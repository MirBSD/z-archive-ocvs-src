head	1.7;
access;
symbols
	MIRBSD_XP_MIRPPC:1.3.0.4
	cvs-200411032110:1.1.1.1
	cvs-200411031520:1.1.1.1
	MIRBSD_XP_SPARC_BASE:1.3
	MIRBSD_XP_SPARC:1.3.0.2
	mirbsdksh-1_12:1.2
	cvs-200408271355:1.1.1.1
	MIRBSD_7quater:1.2
	mirbsdksh-1_11:1.2
	mirbsdksh-1_10:1.2
	cvs-200405160640:1.1.1.1
	mirbsdksh-1_6:1.1.1.1
	mirbsdksh-1_5:1.1.1.1
	mirbsdksh-1_4:1.1.1.1
	mirbsdksh-1_3:1.1.1.1
	mirbsdksh-1_2:1.1.1.1
	ksh_maintainer:1.1.1.1.0.10
	pdksh-5_2_14:1.1.3.1
	tg:1.1.3
	cvs-200401271800:1.1.1.1
	cvs-200401261630:1.1.1.1
	cvs-200401021645:1.1.1.1
	MIRBSD_7_ALPHA:1.1.1.1.0.6
	MIRBSD_7:1.2.0.2
	cvs-200312222040:1.1.1.1
	MIRBSD_7ter:1.1.1.1
	MIRBSD_7_DEV:1.1.1.1.0.2
	cvs-200310020700:1.1.1.1
	cvs-200309271030:1.1.1.1
	cvs-200309251530:1.1.1.1
	cvs-200308302005:1.1.1.1
	cvs-200308171200:1.1.1.1
	ctm-3496:1.1.1.1
	ctm-3449:1.1.1.1
	ctm-3437:1.1.1.1
	cvs-200307191805:1.1.1.1
	ctm-3425:1.1.1.1
	cvs-200307091500:1.1.1.1
	ctm-3389:1.1.1.1
	cvs-200306291430:1.1.1.1
	ctm-3341:1.1.1.1
	MIRBSD_5:1.1.1.1
	cvs-200306082100:1.1.1.1
	ctm-3316:1.1.1.1
	ctm-3272:1.1.1.1
	ctm-3264:1.1.1.1
	cvs-200305071630:1.1.1.1
	MIRBSD_4:1.1.1.1
	ctm-3203:1.1.1.1
	cvs-20030410-1130:1.1.1.1
	ctm-3155:1.1.1.1
	ctm-3132:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.7
date	2004.11.10.17.13.11;	author tg;	state dead;
branches;
next	1.6;

1.6
date	2004.10.28.11.53.42;	author tg;	state Exp;
branches;
next	1.5;

1.5
date	2004.10.28.11.11.18;	author tg;	state Exp;
branches;
next	1.4;

1.4
date	2004.10.28.11.03.23;	author tg;	state Exp;
branches;
next	1.3;

1.3
date	2004.09.21.11.57.13;	author tg;	state Exp;
branches;
next	1.2;

1.2
date	2004.05.24.19.56.16;	author tg;	state Stab;
branches;
next	1.1;

1.1
date	2003.03.22.17.35.03;	author tg;	state Exp;
branches
	1.1.1.1
	1.1.3.1;
next	;

1.1.1.1
date	2003.03.22.17.35.03;	author tg;	state Exp;
branches;
next	;

1.1.3.1
date	2004.03.21.00.34.01;	author tg;	state Exp;
branches;
next	;


desc
@@


1.7
log
@remove mail check functionality (everybody SANE uses uw, imaps and mbx now)
update notes
fix Build.sh
@
text
@/**	$MirBSD: src/bin/ksh/mail.c,v 1.6 2004/10/28 11:53:42 tg Exp $ */
/*	$OpenBSD: mail.c,v 1.9 1999/06/15 01:18:35 millert Exp $	*/

/*
 * Mailbox checking code by Robert J. Gibson, adapted for PD ksh by
 * John R. MacMillan
 */

#include "config.h"

#ifdef KSH
#include "sh.h"
#include "ksh_stat.h"
#include "ksh_time.h"

__RCSID("$MirBSD: src/bin/ksh/mail.c,v 1.6 2004/10/28 11:53:42 tg Exp $");

#define MBMESSAGE	"you have mail in $_"

typedef struct mbox {
	struct mbox    *mb_next;	/* next mbox in list */
	char	       *mb_path;	/* path to mail file */
	char	       *mb_msg;		/* to announce arrival of new mail */
	time_t		mb_mtime;	/* mtime of mail file */
} mbox_t;

/*
 * $MAILPATH is a linked list of mboxes.  $MAIL is a treated as a
 * special case of $MAILPATH, where the list has only one node.  The
 * same list is used for both since they are exclusive.
 */

static mbox_t	*mplist;
static mbox_t	mbox;
static time_t	mlastchkd;	/* when mail was last checked */
static time_t	mailcheck_interval;

static void     munset(mbox_t *mlist); /* free mlist and mval */
static mbox_t * mballoc(char *p, char *m); /* allocate a new mbox */
static void     mprintit(mbox_t *mbp);

void
mcheck(void)
{
	mbox_t	*mbp;
	time_t		 now;
	struct tbl	*vp;
	struct stat	 stbuf;

	now = time(NULL);
	if (mlastchkd == 0)
		mlastchkd = now;
	if (now - mlastchkd >= mailcheck_interval) {
		mlastchkd = now;

		if (mplist)
			mbp = mplist;
		else if ((vp = global("MAIL")) && (vp->flag & ISSET))
			mbp = &mbox;
		else
			mbp = NULL;

		while (mbp) {
			if (mbp->mb_path && stat(mbp->mb_path, &stbuf) == 0
			    && S_ISREG(stbuf.st_mode))
			{
				if (stbuf.st_size
				    && mbp->mb_mtime != stbuf.st_mtime
				    && stbuf.st_atime <= stbuf.st_mtime)
					mprintit(mbp);
				mbp->mb_mtime = stbuf.st_mtime;
			} else {
				/*
				 * Some mail readers remove the mail
				 * file if all mail is read.  If file
				 * does not exist, assume this is the
				 * case and set mtime to zero.
				 */
				mbp->mb_mtime = 0;
			}
			mbp = mbp->mb_next;
		}
	}
}

void
mcset(long int interval)
{
	mailcheck_interval = interval;
}

void
mbset(char *p)
{
	struct stat	stbuf;

	if (mbox.mb_msg)
		afree((void *)mbox.mb_msg, APERM);
	if (mbox.mb_path)
		afree((void *)mbox.mb_path, APERM);
	/* Save a copy to protect from export (which munges the string) */
	mbox.mb_path = str_save(p, APERM);
	mbox.mb_msg = NULL;
	if (p && stat(p, &stbuf) == 0 && S_ISREG(stbuf.st_mode))
		mbox.mb_mtime = stbuf.st_mtime;
	else
		mbox.mb_mtime = 0;
}

void
mpset(char *mptoparse)
{
	mbox_t	*mbp;
	char	*mpath, *mmsg, *mval;
	char *p;

	munset( mplist );
	mplist = NULL;
	mval = str_save(mptoparse, APERM);
	while (mval) {
		mpath = mval;
		if ((mval = strchr(mval, PATHSEP)) != NULL) {
			*mval = '\0', mval++;
		}
		/* POSIX/bourne-shell say file%message */
		for (p = mpath; (mmsg = strchr(p, '%')); ) {
			/* a literal percent? (POSIXism) */
			if (mmsg[-1] == '\\') {
				/* use memmove() to avoid overlap problems */
				memmove(mmsg - 1, mmsg, strlen(mmsg) + 1);
				p = mmsg + 1;
				continue;
			}
			break;
		}
		/* at&t ksh says file?message */
		if (!mmsg && !Flag(FPOSIX))
			mmsg = strchr(mpath, '?');
		if (mmsg) {
			*mmsg = '\0';
			mmsg++;
		}
		mbp = mballoc(mpath, mmsg);
		mbp->mb_next = mplist;
		mplist = mbp;
	}
}

static void
munset(mbox_t *mlist)
{
	mbox_t	*mbp;

	while (mlist != NULL) {
		mbp = mlist;
		mlist = mbp->mb_next;
		if (!mlist)
			afree((void *)mbp->mb_path, APERM);
		afree((void *)mbp, APERM);
	}
}

static mbox_t *
mballoc(char *p, char *m)
{
	struct stat	stbuf;
	mbox_t	*mbp;

	mbp = (mbox_t *)alloc(sizeof(mbox_t), APERM);
	mbp->mb_next = NULL;
	mbp->mb_path = p;
	mbp->mb_msg = m;
	if (stat(mbp->mb_path, &stbuf) == 0 && S_ISREG(stbuf.st_mode))
		mbp->mb_mtime = stbuf.st_mtime;
	else
		mbp->mb_mtime = 0;
	return(mbp);
}

static void
mprintit(mbox_t *mbp)
{
	struct tbl	*vp;

#if 0
	/*
	 * I doubt this $_ overloading is bad in /bin/sh mode.  Anyhow, we
	 * crash as the code looks now if we do not set vp.  Now, this is
	 * easy to fix too, but I'd like to see what POSIX says before doing
	 * a change like that.
	 */
	if (!Flag(FSH))
#endif
		/* Ignore setstr errors here (arbitrary) */
		setstr((vp = local("_", FALSE)), mbp->mb_path, KSH_RETURN_ERROR);

	shellf("%s\n", substitute(mbp->mb_msg ? mbp->mb_msg : MBMESSAGE, 0));

	unset(vp, 0);
}
#endif /* KSH */
@


1.6
log
@run GNU protoize
protect header files
nuke some dead code
regenerate configure script
let silly code die
@
text
@d1 1
a1 1
/**	$MirBSD: src/bin/ksh/mail.c,v 1.5 2004/10/28 11:11:18 tg Exp $ */
d16 1
a16 1
__RCSID("$MirBSD: src/bin/ksh/mail.c,v 1.5 2004/10/28 11:11:18 tg Exp $");
@


1.5
log
@de-register, de-inline, de-__P
@
text
@d1 1
a1 1
/**	$MirBSD: src/bin/ksh/mail.c,v 1.4 2004/10/28 11:03:23 tg Exp $ */
d16 1
a16 1
__RCSID("$MirBSD$");
d43 1
a43 1
mcheck()
d50 1
a50 1
	now = time((time_t *) 0);
d87 1
a87 2
mcset(interval)
	long interval;
d93 1
a93 2
mbset(p)
	char	*p;
d111 1
a111 2
mpset(mptoparse)
	char	*mptoparse;
d150 1
a150 2
munset(mlist)
mbox_t	*mlist;
d164 1
a164 3
mballoc(p, m)
	char	*p;
	char	*m;
d181 1
a181 2
mprintit( mbp )
mbox_t	*mbp;
@


1.4
log
@-Wall -Werror -W -pedantic clean
@
text
@d1 1
a1 1
/**	$MirBSD: src/bin/ksh/mail.c,v 1.3 2004/09/21 11:57:13 tg Exp $ */
d16 2
d38 3
a40 3
static void     munset      ARGS((mbox_t *mlist)); /* free mlist and mval */
static mbox_t * mballoc     ARGS((char *p, char *m)); /* allocate a new mbox */
static void     mprintit    ARGS((mbox_t *mbp));
@


1.3
log
@unify spacing of RCS IDs
@
text
@d1 1
a1 1
/**	$MirBSD$ */
d43 1
a43 1
	register mbox_t	*mbp;
d93 1
a93 1
	register char	*p;
d112 1
a112 1
	register char	*mptoparse;
d114 2
a115 2
	register mbox_t	*mbp;
	register char	*mpath, *mmsg, *mval;
d152 1
a152 1
register mbox_t	*mlist;
d154 1
a154 1
	register mbox_t	*mbp;
d171 1
a171 1
	register mbox_t	*mbp;
@


1.2
log
@polish, mop up whitespace, etc.

passes regressions on MirOS
@
text
@d1 2
a2 2
/* $MirBSD$ */
/* $OpenBSD: mail.c,v 1.9 1999/06/15 01:18:35 millert Exp $	*/
@


1.1
log
@Initial revision
@
text
@d1 2
a2 1
/*	$OpenBSD: mail.c,v 1.9 1999/06/15 01:18:35 millert Exp $	*/
@


1.1.3.1
log
@Import upstream pdksh-5.2.14 (latest version) in order to be able
to play around with it a bit
@
text
@d1 2
d189 11
a199 2
	/* Ignore setstr errors here (arbitrary) */
	setstr((vp = local("_", FALSE)), mbp->mb_path, KSH_RETURN_ERROR);
@


1.1.1.1
log
@Import OpenBSD 3.3 source repository from CTM 3132 the first time
This opens an OpenBSD-mirabile (aka MirBSD) repository.

### MirBSD is:
# Copyright (c) 1982-2003 by Thorsten "mirabile" Glaser <x86@@ePost.de>
# Copyright © 1968-2003  The authors of And contributors to UNIX®, the
#       C Language, BSD/Berkeley Unix; 386BSD, NetBSD 1.1 and OpenBSD.
#
# Anyone who obtained a copy of this work is hereby permitted to freely use,
# distribute, modify, merge, sublicence, give away or sell it as long as the
# authors are given due credit and the following notice is retained:
#
# This work is provided "as is", with no explicit or implicit warranty what-
# soever. Use it only at your own risk. In no event may an author or contri-
# butor be held liable for any damage, directly or indirectly, that origina-
# ted through or is caused by creation or modification of this work.

MirBSD is my private tree. MirBSD does not differ very much from OpenBSD
and intentionally tracks OpenBSD. That's why it _is_ OpenBSD, just not the
official one. It's like with DarrenBSD.

At time of this writing, no advertising for MirBSD must be done,
because the advertising clause has not yet been sorted out.

http://templeofhate.com/tglaser/MirBSD/index.php
@
text
@@
