head	1.2;
access;
symbols
	mksh-18:1.1.4.3
	mirbsdksh-1_17:1.1.4.3
	mirbsdksh-1_16:1.1.4.2
	ksh_maintainer:1.1.0.4
	mirbsdksh-1_12:1.1.4.1
	mirbsdksh-1_11:1.1.2.1
	mirbsdksh-1_10:1.1.2.1
	mirbsdksh-1_6:1.1.2.1
	mirbsdksh-1_5:1.1.2.1
	tg:1.1.0.2;
locks; strict;
comment	@ * @;


1.2
date	2004.11.13.01.55.35;	author tg;	state dead;
branches;
next	1.1;

1.1
date	2004.05.24.17.43.42;	author tg;	state Stab;
branches
	1.1.2.1
	1.1.4.1;
next	;

1.1.2.1
date	2004.05.24.17.43.42;	author tg;	state Rel;
branches;
next	;

1.1.4.1
date	2004.08.27.19.36.55;	author tg;	state Exp;
branches;
next	1.1.4.2;

1.1.4.2
date	2004.11.10.17.29.20;	author tg;	state Exp;
branches;
next	1.1.4.3;

1.1.4.3
date	2004.12.05.16.10.58;	author tg;	state Exp;
branches;
next	;


desc
@@


1.2
log
@did. anybody. ever. say. this. is. ok. in. HEAD?
@
text
@@


1.1
log
@file strlfun.c was initially added on branch tg.
@
text
@@


1.1.4.1
log
@copy latest src/lib/libc/string/strlfun.c
@
text
@a0 128
/**	$MirBSD: src/lib/libc/string/strlfun.c,v 1.5 2004/08/27 19:35:37 tg Stab $ */
/*	$OpenBSD: strlcpy.c,v 1.8 2003/06/17 21:56:24 millert Exp $ */
/*	$OpenBSD: strlcat.c,v 1.11 2003/06/17 21:56:24 millert Exp $ */

/*-
 * Copyright (c) 2004
 *	Thorsten "mirabile" Glaser <tg@@66h.42h.de>
 *
 * Licensee is hereby permitted to deal in this work without restric-
 * tion, including unlimited rights to use, publically perform, modi-
 * fy, merge, distribute, sell, give away or sublicence, provided the
 * above copyright notices, these terms and the disclaimer are retai-
 * ned in all redistributions, or reproduced in accompanying documen-
 * tation or other materials provided with binary redistributions.
 *
 * Licensor hereby provides this work "AS IS" and WITHOUT WARRANTY of
 * any kind, expressed or implied, to the maximum extent permitted by
 * applicable law, but with the warranty of being written without ma-
 * licious intent or gross negligence; in no event shall licensor, an
 * author or contributor be held liable for any damage, direct, indi-
 * rect or other, however caused, arising in any way out of the usage
 * of covered work, even if advised of the possibility of such damage.
 *-
 * Implementation by myself
 * Some optimizations idea from Bodo Eggert
 */

/*
 * Copyright (c) 1998 Todd C. Miller <Todd.Miller@@courtesan.com>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */


#include <sys/types.h>
#include <string.h>

#ifdef	HAVE_CONFIG_H
/* packaged with third-party software */
#include "config.h"
#define	LIBC_SCCS
#else	/* ! def(HAVE_CONFIG_H) */
/* integrated into C library */
#undef	HAVE_STRLCPY
#undef	HAVE_STRLCAT
#endif	/* ! def(HAVE_CONFIG_H) */

#if defined(__RCSID)
__RCSID("$MirBSD: src/lib/libc/string/strlfun.c,v 1.5 2004/08/27 19:35:37 tg Stab $");
#elif defined(LIBC_SCCS) && !defined(lint)
static const char rcsid[] = "$MirBSD: src/lib/libc/string/strlfun.c,v 1.5 2004/08/27 19:35:37 tg Stab $";
#endif	/* LIBC_SCCS and not lint */


#ifndef	HAVE_STRLCPY
/*
 * Copy src to string dst of size siz.  At most siz-1 characters
 * will be copied.  Always NUL terminates (unless siz == 0).
 * Returns strlen(src); if retval >= siz, truncation occurred.
 */
size_t
strlcpy(char *dst, const char *src, size_t siz)
{
	const char *s = src;

	if (!siz) goto traverse_src;

	/* Copy as many bytes as will fit */
	for (; --siz && (*dst++ = *s++); /* nothing */)
		;

	/* Not enough room in dst, add NUL and traverse rest of src */
	if (!siz) {
		/* Save, since we've copied at max. (siz-1) characters */
		*dst = '\0';	/* NUL-terminate dst */
  traverse_src:
		while (*s++)
			;
	}

	return (s - src - 1);	/* count does not include NUL */
}
#endif	/* ndef HAVE_STRLCPY */

#ifndef	HAVE_STRLCAT
/*
 * Appends src to string dst of size siz (unlike strncat, siz is the
 * full size of dst, not space left).  At most siz-1 characters
 * will be copied.  Always NUL terminates (unless siz <= strlen(dst)).
 * Returns strlen(src) + MIN(siz, strlen(initial dst)).
 * If retval >= siz, truncation occurred.
 */
size_t
strlcat(char *dst, const char *src, size_t siz)
{
	char *d = dst;
	size_t n = siz, dl;
	const size_t sl = strlen(src);

	while (n-- && (*d++ != '\0'))
		;
	if (!++n && (*d != '\0'))
		return strlen(src);
	dl = --d - dst;		/* original strlen(dst), max. siz-1 */
	n = siz - dl;
	dl += sl;

	if (!n--)
		return dl;

	if (n > sl)
		n = sl;		/* number of octets to copy */
	for (; n-- && (*d++ = *src++); /* nothing */)
		;
	*d = '\0';		/* NUL-terminate dst */
	return dl;
}
#endif	/* ndef HAVE_STRLCAT */
@


1.1.4.2
log
@sync
@
text
@d1 1
a1 1
/**	$MirBSD: src/lib/libc/string/strlfun.c,v 1.6 2004/11/10 17:28:41 tg Exp $ */
d10 5
a14 5
 * tion, including unlimited rights to use, publicly perform, modify,
 * merge, distribute, sell, give away or sublicence, provided all co-
 * pyright notices above, these terms and the disclaimer are retained
 * in all redistributions or reproduced in accompanying documentation
 * or other materials provided with binary redistributions.
d24 2
a25 3
 * Implementation for most of this code by myself.
 * Some optimizations idea from Bodo Eggert in d.a.s.r.
 * The rest of the code is covered by the terms below:
d48 1
a48 1
#ifdef HAVE_CONFIG_H
d51 12
a62 13
#define LIBC_SCCS
#else /* ! def HAVE_CONFIG_H */
/* integrated into MirOS C library */
#undef HAVE_STRLCPY
#undef HAVE_STRLCAT
#endif /* ! def HAVE_CONFIG_H */

#ifndef __RCSID
#define __RCSID(x)	static const char __rcsid[] \
			__attribute__((section(".comment"))) = (x)
#endif

__RCSID("$MirBSD: src/lib/libc/string/strlfun.c,v 1.6 2004/11/10 17:28:41 tg Exp $");
@


1.1.4.3
log
@* sync strlfun.c
* update licence
* update to mksh 1.17
@
text
@d1 1
a1 2
/**	$MirBSD: src/lib/libc/string/strlfun.c,v 1.7 2004/12/05 16:07:53 tg Exp $ */
/**	_MirBSD: src/lib/libc/string/strlfun.c,v 1.7 2004/12/05 16:07:53 tg Exp $ */
d22 1
a22 1
 * of this work, even if advised of the possibility of such damage.
d25 1
a25 1
 * Some optimisation ideas from Bodo Eggert (via d.a.s.r).
d27 3
a29 1
 *-
d60 2
a61 1
#define __RCSID(x)	static const char __rcsid[] = (x)
d64 1
a64 1
__RCSID("$MirBSD: src/lib/libc/string/strlfun.c,v 1.7 2004/12/05 16:07:53 tg Exp $");
d88 1
a88 1
traverse_src:
d109 1
a109 1
	size_t dl, n = siz;
a115 1

@


1.1.2.1
log
@Add strlfun.c from MirOS:src/lib/libc/string/
with additional RCS ID for keeping
@
text
@a0 121
/* $MirBSD: src/lib/libc/string/strlfun.c,v 1.2 2004/04/27 18:52:23 tg Exp $ */
/* _MirBSD: src/lib/libc/string/strlfun.c,v 1.2 2004/04/27 18:52:23 tg Exp $ */
/* $OpenBSD: strlcpy.c,v 1.8 2003/06/17 21:56:24 millert Exp $ */
/* $OpenBSD: strlcat.c,v 1.11 2003/06/17 21:56:24 millert Exp $ */

/* Copyright (c) 2004
 *	Thorsten "mirabile" Glaser <x86@@ePost.de>
 *
 * Subject to these terms, everybody who obtained a copy of this work
 * is hereby permitted to deal in the work without restriction inclu-
 * ding without limitation the rights to use, distribute, sell, modi-
 * fy, publically perform, give away, merge or sublicence it provided
 * this notice is kept and the authors and contributors are given due
 * credit in derivates or accompanying documents.
 *
 * This work is provided by its developers (authors and contributors)
 * "as is" and without any warranties whatsoever, express or implied,
 * to the maximum extent permitted by applicable law; in no event may
 * developers be held liable for damage caused, directly or indirect-
 * ly, but not by a developer's malice intent, even if advised of the
 * possibility of such damage.
 */
/*
 * Some optimizations idea from Bodo Eggert
 */
/*
 * Copyright (c) 1998 Todd C. Miller <Todd.Miller@@courtesan.com>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#ifdef	HAVE_CONFIG_H
/* packaged with third-party software */
#include "config.h"
#define	LIBC_SCCS
#else	/* ! def(HAVE_CONFIG_H) */
/* integrated into C library */
#undef	HAVE_STRLCPY
#undef	HAVE_STRLCAT
#endif	/* ! def(HAVE_CONFIG_H) */

#if defined(LIBC_SCCS) && !defined(lint)
static const char rcsid[] = "$MirBSD: src/lib/libc/string/strlfun.c,v 1.2 2004/04/27 18:52:23 tg Exp $";
#endif	/* LIBC_SCCS and not lint */

#include <sys/types.h>
#include <string.h>


#ifndef	HAVE_STRLCPY
/*
 * Copy src to string dst of size siz.  At most siz-1 characters
 * will be copied.  Always NUL terminates (unless siz == 0).
 * Returns strlen(src); if retval >= siz, truncation occurred.
 */
size_t
strlcpy(char *dst, const char *src, size_t siz)
{
	const char *s = src;

	if (!siz) goto traverse_src;

	/* Copy as many bytes as will fit */
	for (; --siz && (*dst++ = *s++); /* nothing */)
		;

	/* Not enough room in dst, add NUL and traverse rest of src */
	if (!siz) {
		/* Save, since we've copied at max. (siz-1) characters */
		*dst = '\0';	/* NUL-terminate dst */
  traverse_src:
		while (*s++)
			;
	}

	return (s - src - 1);	/* count does not include NUL */
}
#endif	/* ndef HAVE_STRLCPY */

#ifndef	HAVE_STRLCAT
/*
 * Appends src to string dst of size siz (unlike strncat, siz is the
 * full size of dst, not space left).  At most siz-1 characters
 * will be copied.  Always NUL terminates (unless siz <= strlen(dst)).
 * Returns strlen(src) + MIN(siz, strlen(initial dst)).
 * If retval >= siz, truncation occurred.
 */
size_t
strlcat(char *dst, const char *src, size_t siz)
{
	char *d = dst;
	size_t n = siz, dl;
	const size_t sl = strlen(src);

	while (n-- && (*d++ != '\0'))
		;
	dl = --d - dst;		/* original strlen(dst), max. siz-1 */
	n = siz - dl;
	dl += sl;

	if (!n--)
		return dl;

	if (n > sl)
		n = sl;		/* number of octets to copy */
	for (; n-- && (*d++ = *src++); /* nothing */)
		;
	*d = '\0';		/* NUL-terminate dst */
	return dl;
}
#endif	/* ndef HAVE_STRLCAT */
@

