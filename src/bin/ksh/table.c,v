head	1.6;
access;
symbols
	tg-mergetmp-mirosx-1:1.6
	MIROS_X:1.6.0.2
	MIROS_X_BASE:1.6
	mksh-18:1.6
	mirbsdksh-1_17:1.6
	MIRBSD_XP_MIRPPC:1.3.0.4
	mirbsdksh-1_16:1.6
	cvs-200411032110:1.1.1.1
	cvs-200411031520:1.1.1.1
	MIRBSD_XP_SPARC_BASE:1.3
	MIRBSD_XP_SPARC:1.3.0.2
	mirbsdksh-1_12:1.2
	cvs-200408271355:1.1.1.1
	MIRBSD_7quater:1.2
	mirbsdksh-1_11:1.2
	mirbsdksh-1_10:1.2
	cvs-200405160640:1.1.1.1
	mirbsdksh-1_6:1.1.1.1
	mirbsdksh-1_5:1.1.1.1
	mirbsdksh-1_4:1.1.1.1
	mirbsdksh-1_3:1.1.1.1
	mirbsdksh-1_2:1.1.1.1
	ksh_maintainer:1.1.1.1.0.10
	pdksh-5_2_14:1.1.3.1
	tg:1.1.3
	cvs-200401271800:1.1.1.1
	cvs-200401261630:1.1.1.1
	cvs-200401021645:1.1.1.1
	MIRBSD_7_ALPHA:1.1.1.1.0.6
	MIRBSD_7:1.2.0.2
	cvs-200312222040:1.1.1.1
	MIRBSD_7ter:1.1.1.1
	MIRBSD_7_DEV:1.1.1.1.0.2
	cvs-200310020700:1.1.1.1
	cvs-200309271030:1.1.1.1
	cvs-200309251530:1.1.1.1
	cvs-200308302005:1.1.1.1
	cvs-200308171200:1.1.1.1
	ctm-3496:1.1.1.1
	ctm-3449:1.1.1.1
	ctm-3437:1.1.1.1
	cvs-200307191805:1.1.1.1
	ctm-3425:1.1.1.1
	cvs-200307091500:1.1.1.1
	ctm-3389:1.1.1.1
	cvs-200306291430:1.1.1.1
	ctm-3341:1.1.1.1
	MIRBSD_5:1.1.1.1
	cvs-200306082100:1.1.1.1
	ctm-3316:1.1.1.1
	ctm-3272:1.1.1.1
	ctm-3264:1.1.1.1
	cvs-200305071630:1.1.1.1
	MIRBSD_4:1.1.1.1
	ctm-3203:1.1.1.1
	cvs-20030410-1130:1.1.1.1
	ctm-3155:1.1.1.1
	ctm-3132:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.6
date	2004.10.28.11.53.43;	author tg;	state Exp;
branches;
next	1.5;

1.5
date	2004.10.28.11.11.19;	author tg;	state Exp;
branches;
next	1.4;

1.4
date	2004.10.28.11.03.24;	author tg;	state Exp;
branches;
next	1.3;

1.3
date	2004.09.21.11.57.15;	author tg;	state Exp;
branches;
next	1.2;

1.2
date	2004.05.24.19.56.19;	author tg;	state Stab;
branches;
next	1.1;

1.1
date	2003.03.22.17.35.03;	author tg;	state Exp;
branches
	1.1.1.1
	1.1.3.1;
next	;

1.1.1.1
date	2003.03.22.17.35.03;	author tg;	state Exp;
branches;
next	;

1.1.3.1
date	2004.03.21.00.34.06;	author tg;	state Exp;
branches;
next	;


desc
@@


1.6
log
@run GNU protoize
protect header files
nuke some dead code
regenerate configure script
let silly code die
@
text
@/**	$MirBSD: src/bin/ksh/table.c,v 1.5 2004/10/28 11:11:19 tg Exp $ */
/*	$OpenBSD: table.c,v 1.5 1999/01/10 17:55:03 millert Exp $	*/

/*
 * dynamic hashed associative table for commands and variables
 */

#include "sh.h"

__RCSID("$MirBSD: src/bin/ksh/table.c,v 1.5 2004/10/28 11:11:19 tg Exp $");

#define	INIT_TBLS	8	/* initial table size (power of 2) */

static void     texpand(struct table *tp, int nsize);
static int      tnamecmp(void *p1, void *p2);


unsigned int
hash(const char *n)
{
	unsigned int h = 0;

	while (*n != '\0')
		h = 2*h + *n++;
	return h * 32821;	/* scatter bits */
}

void
tinit(struct table *tp, Area *ap, int tsize)
{
	tp->areap = ap;
	tp->tbls = NULL;
	tp->size = tp->nfree = 0;
	if (tsize)
		texpand(tp, tsize);
}

static void
texpand(struct table *tp, int nsize)
{
	int i;
	struct tbl *tblp, **p;
	struct tbl **ntblp, **otblp = tp->tbls;
	int osize = tp->size;

	ntblp = (struct tbl**) alloc(sizeofN(struct tbl *, nsize), tp->areap);
	for (i = 0; i < nsize; i++)
		ntblp[i] = NULL;
	tp->size = nsize;
	tp->nfree = 8*nsize/10;	/* table can get 80% full */
	tp->tbls = ntblp;
	if (otblp == NULL)
		return;
	for (i = 0; i < osize; i++)
		if ((tblp = otblp[i]) != NULL) {
			if ((tblp->flag&DEFINED)) {
				for (p = &ntblp[hash(tblp->name)
					  & (tp->size-1)];
				     *p != NULL; p--)
					if (p == ntblp) /* wrap */
						p += tp->size;
				*p = tblp;
				tp->nfree--;
			} else if (!(tblp->flag & FINUSE)) {
				afree((void*)tblp, tp->areap);
			}
		}
	afree((void*)otblp, tp->areap);
}

struct tbl *
tsearch(struct table *tp, const char *n, unsigned int h)
	                 	/* table */
	              		/* name to enter */
	               			/* hash(n) */
{
	struct tbl **pp, *p;

	if (tp->size == 0)
		return NULL;

	/* search for name in hashed table */
	for (pp = &tp->tbls[h & (tp->size-1)]; (p = *pp) != NULL; pp--) {
		if (*p->name == *n && strcmp(p->name, n) == 0
		    && (p->flag&DEFINED))
			return p;
		if (pp == tp->tbls) /* wrap */
			pp += tp->size;
	}

	return NULL;
}

struct tbl *
tenter(struct table *tp, const char *n, unsigned int h)
	                 	/* table */
	              		/* name to enter */
	               			/* hash(n) */
{
	struct tbl **pp, *p;
	int len;

	if (tp->size == 0)
		texpand(tp, INIT_TBLS);
  Search:
	/* search for name in hashed table */
	for (pp = &tp->tbls[h & (tp->size-1)]; (p = *pp) != NULL; pp--) {
		if (*p->name == *n && strcmp(p->name, n) == 0)
			return p; 	/* found */
		if (pp == tp->tbls) /* wrap */
			pp += tp->size;
	}

	if (tp->nfree <= 0) {	/* too full */
		texpand(tp, 2*tp->size);
		goto Search;
	}

	/* create new tbl entry */
	len = strlen(n) + 1;
	p = (struct tbl *) alloc(offsetof(struct tbl, name[0]) + len,
				 tp->areap);
	p->flag = 0;
	p->type = 0;
	p->areap = tp->areap;
	p->u2.field = 0;
	p->u.array = (struct tbl *)0;
	memcpy(p->name, n, len);

	/* enter in tp->tbls */
	tp->nfree--;
	*pp = p;
	return p;
}

void
tdelete(struct tbl *p)
{
	p->flag = 0;
}

void
twalk(struct tstate *ts, struct table *tp)
{
	ts->left = tp->size;
	ts->next = tp->tbls;
}

struct tbl *
tnext(struct tstate *ts)
{
	while (--ts->left >= 0) {
		struct tbl *p = *ts->next++;
		if (p != NULL && (p->flag&DEFINED))
			return p;
	}
	return NULL;
}

static int
tnamecmp(void *p1, void *p2)
{
	return strcmp(((struct tbl *)p1)->name, ((struct tbl *)p2)->name);
}

struct tbl **
tsort(struct table *tp)
{
	int i;
	struct tbl **p, **sp, **dp;

	p = (struct tbl **)alloc(sizeofN(struct tbl *, tp->size+1), ATEMP);
	sp = tp->tbls;		/* source */
	dp = p;			/* dest */
	for (i = 0; i < tp->size; i++)
		if ((*dp = *sp++) != NULL && (((*dp)->flag&DEFINED) ||
					      ((*dp)->flag&ARRAY)))
			dp++;
	i = dp - p;
	qsortp((void**)p, (size_t)i, tnamecmp);
	p[i] = NULL;
	return p;
}

#ifdef PERF_DEBUG /* performance debugging */

void tprintinfo(struct table *tp);

void
tprintinfo(tp)
	struct table *tp;
{
	struct tbl *te;
	char *n;
	unsigned int h;
	int ncmp;
	int totncmp = 0, maxncmp = 0;
	int nentries = 0;
	struct tstate ts;

	shellf("table size %d, nfree %d\n", tp->size, tp->nfree);
	shellf("    Ncmp name\n");
	twalk(&ts, tp);
	while ((te = tnext(&ts))) {
		struct tbl **pp, *p;

		h = hash(n = te->name);
		ncmp = 0;

		/* taken from tsearch() and added counter */
		for (pp = &tp->tbls[h & (tp->size-1)]; (p = *pp); pp--) {
			ncmp++;
			if (*p->name == *n && strcmp(p->name, n) == 0
			    && (p->flag&DEFINED))
				break; /* return p; */
			if (pp == tp->tbls) /* wrap */
				pp += tp->size;
		}
		shellf("    %4d %s\n", ncmp, n);
		totncmp += ncmp;
		nentries++;
		if (ncmp > maxncmp)
			maxncmp = ncmp;
	}
	if (nentries)
		shellf("  %d entries, worst ncmp %d, avg ncmp %d.%02d\n",
			nentries, maxncmp,
			totncmp / nentries,
			(totncmp % nentries) * 100 / nentries);
}
#endif /* PERF_DEBUG */
@


1.5
log
@de-register, de-inline, de-__P
@
text
@d1 1
a1 1
/**	$MirBSD: src/bin/ksh/table.c,v 1.4 2004/10/28 11:03:24 tg Exp $ */
d10 1
a10 1
__RCSID("$MirBSD$");
d19 1
a19 2
hash(n)
	const char * n;
d29 1
a29 4
tinit(tp, ap, tsize)
	struct table *tp;
	Area *ap;
	int tsize;
d39 1
a39 3
texpand(tp, nsize)
	struct table *tp;
	int nsize;
d72 4
a75 4
tsearch(tp, n, h)
	struct table *tp;	/* table */
	const char *n;		/* name to enter */
	unsigned int h;			/* hash(n) */
d95 4
a98 4
tenter(tp, n, h)
	struct table *tp;	/* table */
	const char *n;		/* name to enter */
	unsigned int h;			/* hash(n) */
d137 1
a137 2
tdelete(p)
	struct tbl *p;
d143 1
a143 3
twalk(ts, tp)
	struct tstate *ts;
	struct table *tp;
d150 1
a150 2
tnext(ts)
	struct tstate *ts;
d161 1
a161 2
tnamecmp(p1, p2)
	void *p1, *p2;
d167 1
a167 2
tsort(tp)
	struct table *tp;
@


1.4
log
@-Wall -Werror -W -pedantic clean
@
text
@d1 1
a1 1
/**	$MirBSD: src/bin/ksh/table.c,v 1.3 2004/09/21 11:57:15 tg Exp $ */
d10 2
d14 2
a15 2
static void     texpand     ARGS((struct table *tp, int nsize));
static int      tnamecmp    ARGS((void *p1, void *p2));
d199 1
a199 1
void tprintinfo ARGS((struct table *tp));
@


1.3
log
@unify spacing of RCS IDs
@
text
@d1 1
a1 1
/**	$MirBSD$ */
d18 1
a18 1
	register const char * n;
d20 1
a20 1
	register unsigned int h = 0;
d29 2
a30 2
	register struct table *tp;
	register Area *ap;
d42 1
a42 1
	register struct table *tp;
d45 3
a47 3
	register int i;
	register struct tbl *tblp, **p;
	register struct tbl **ntblp, **otblp = tp->tbls;
d77 2
a78 2
	register struct table *tp;	/* table */
	register const char *n;		/* name to enter */
d81 1
a81 1
	register struct tbl **pp, *p;
d100 2
a101 2
	register struct table *tp;	/* table */
	register const char *n;		/* name to enter */
d104 2
a105 2
	register struct tbl **pp, *p;
	register int len;
d142 1
a142 1
	register struct tbl *p;
d177 1
a177 1
	register struct table *tp;
d179 2
a180 2
	register int i;
	register struct tbl **p, **sp, **dp;
d215 1
a215 1
		register struct tbl **pp, *p;
@


1.2
log
@polish, mop up whitespace, etc.

passes regressions on MirOS
@
text
@d1 2
a2 2
/* $MirBSD$ */
/* $OpenBSD: table.c,v 1.5 1999/01/10 17:55:03 millert Exp $	*/
@


1.1
log
@Initial revision
@
text
@d1 2
a2 1
/*	$OpenBSD: table.c,v 1.5 1999/01/10 17:55:03 millert Exp $	*/
@


1.1.3.1
log
@Import upstream pdksh-5.2.14 (latest version) in order to be able
to play around with it a bit
@
text
@d1 2
d58 1
a58 1
		if ((tblp = otblp[i]) != NULL)
d70 1
@


1.1.1.1
log
@Import OpenBSD 3.3 source repository from CTM 3132 the first time
This opens an OpenBSD-mirabile (aka MirBSD) repository.

### MirBSD is:
# Copyright (c) 1982-2003 by Thorsten "mirabile" Glaser <x86@@ePost.de>
# Copyright © 1968-2003  The authors of And contributors to UNIX®, the
#       C Language, BSD/Berkeley Unix; 386BSD, NetBSD 1.1 and OpenBSD.
#
# Anyone who obtained a copy of this work is hereby permitted to freely use,
# distribute, modify, merge, sublicence, give away or sell it as long as the
# authors are given due credit and the following notice is retained:
#
# This work is provided "as is", with no explicit or implicit warranty what-
# soever. Use it only at your own risk. In no event may an author or contri-
# butor be held liable for any damage, directly or indirectly, that origina-
# ted through or is caused by creation or modification of this work.

MirBSD is my private tree. MirBSD does not differ very much from OpenBSD
and intentionally tracks OpenBSD. That's why it _is_ OpenBSD, just not the
official one. It's like with DarrenBSD.

At time of this writing, no advertising for MirBSD must be done,
because the advertising clause has not yet been sorted out.

http://templeofhate.com/tglaser/MirBSD/index.php
@
text
@@
