head	1.1;
branch	1.1.1;
access;
symbols
	tg-mergetmp-mirosx-1:1.1.1.1
	tg-mergefixes-1-branch:1.1.1.1.0.14
	tg-mergefixes-1-base:1.1.1.1
	MIROS_X:1.1.1.1.0.12
	MIROS_X_BASE:1.1.1.1
	tg-mergetmp-3:1.1.1.1
	MIRBSD_XP_MIRPPC:1.1.1.1.0.10
	cvs-200410222320:1.1.1.1
	MIRBSD_XP_SPARC_BASE:1.1.1.1
	MIRBSD_XP_SPARC:1.1.1.1.0.8
	cvs-200406091940:1.1.1.1
	MIRBSD_7quater:1.1.1.1
	cvs-200405160640:1.1.1.1
	cvs-200401271800:1.1.1.1
	cvs-200401261630:1.1.1.1
	cvs-200401021645:1.1.1.1
	MIRBSD_7_ALPHA:1.1.1.1.0.6
	MIRBSD_7:1.1.1.1.0.4
	cvs-200312222040:1.1.1.1
	MIRBSD_7ter:1.1.1.1
	MIRBSD_7_DEV:1.1.1.1.0.2
	cvs-200310020700:1.1.1.1
	cvs-200309271030:1.1.1.1
	cvs-200309251530:1.1.1.1
	cvs-200309171845:1.1.1.1
	cvs-200308302005:1.1.1.1
	cvs-200308171200:1.1.1.1
	ctm-3496:1.1.1.1
	ctm-3449:1.1.1.1
	ctm-3437:1.1.1.1
	cvs-200307191805:1.1.1.1
	ctm-3425:1.1.1.1
	cvs-200307091500:1.1.1.1
	ctm-3389:1.1.1.1
	cvs-200306291430:1.1.1.1
	ctm-3341:1.1.1.1
	MIRBSD_5:1.1.1.1
	cvs-200306082100:1.1.1.1
	ctm-3316:1.1.1.1
	ctm-3272:1.1.1.1
	ctm-3264:1.1.1.1
	cvs-200305071630:1.1.1.1
	MIRBSD_4:1.1.1.1
	ctm-3203:1.1.1.1
	cvs-20030410-1130:1.1.1.1
	cvs-20030329-2200:1.1.1.1
	ctm-3155:1.1.1.1
	ctm-3132:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.1
date	2003.03.22.17.44.37;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.03.22.17.44.37;	author tg;	state Stab;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@/*
 * Copyright (c) 2000-2001 Sendmail, Inc. and its suppliers.
 *      All rights reserved.
 * Copyright (c) 1990, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * Chris Torek.
 *
 * By using this file, you agree to the terms and conditions set
 * forth in the LICENSE file which can be found at the top level of
 * the sendmail distribution.
 */

#include <sm/gen.h>
SM_RCSID("@@(#)$Sendmail: fflush.c,v 1.43 2001/09/11 04:04:48 gshapiro Exp $")
#include <unistd.h>
#include <errno.h>
#include <sys/time.h>
#include <signal.h>
#include <fcntl.h>
#include <string.h>
#include <sm/io.h>
#include <sm/assert.h>
#include <sm/setjmp.h>
#include "local.h"
#include <sm/conf.h>

/*
**  SM_IO_FLUSH -- flush the buffer for a 'fp' to the "file"
**
**  Flush a single file. We don't allow this function to flush
**  all open files when fp==NULL any longer.
**
**	Parameters:
**		fp -- the file pointer buffer to flush
**		timeout -- time to complete the flush
**
**	Results:
**		Failure: SM_IO_EOF and sets errno
**		Success: 0 (zero)
*/

int
sm_io_flush(fp, timeout)
	register SM_FILE_T *fp;
	int SM_NONVOLATILE timeout;
{
	int fd;
	struct timeval to;

	SM_REQUIRE_ISA(fp, SmFileMagic);

	if ((fp->f_flags & (SMWR | SMRW)) == 0)
	{
		/*
		**  The file is not opened for writing, so it cannot be flushed
		**  (writable means SMWR [write] or SMRW [read/write].
		*/

		errno = EBADF;
		return SM_IO_EOF;
	}

	SM_CONVERT_TIME(fp, fd, timeout, &to);

	/* Now do the flush */
	return sm_flush(fp, (int *) &timeout);
}

/*
**  SM_FLUSH -- perform the actual flush
**
**  Assumes that 'fp' has been validated before this function called.
**
**	Parameters:
**		fp -- file pointer to be flushed
**		timeout -- max time allowed for flush (milliseconds)
**
**	Results:
**		Success: 0 (zero)
**		Failure: SM_IO_EOF and errno set
**
**	Side Effects:
**		timeout will get updated with the time remaining (if any)
*/

int
sm_flush(fp, timeout)
	register SM_FILE_T *fp;
	int *timeout;
{
	register unsigned char *p;
	register int n, t;
	int fd;

	SM_REQUIRE_ISA(fp, SmFileMagic);

	t = fp->f_flags;
	if ((t & SMWR) == 0)
		return 0;

	if (t & SMSTR)
	{
		*fp->f_p = '\0';
		return 0;
	}

	if ((p = fp->f_bf.smb_base) == NULL)
		return 0;

	n = fp->f_p - p;		/* write this much */

	if ((fd = sm_io_getinfo(fp, SM_IO_WHAT_FD, NULL)) == -1)
	{
		/* can't get an fd, likely internal 'fake' fp */
		errno = 0;
		fd = -1;
	}

	/*
	**  Set these immediately to avoid problems with longjmp and to allow
	**  exchange buffering (via setvbuf) in user write function.
	*/

	fp->f_p = p;
	fp->f_w = t & (SMLBF|SMNBF) ? 0 : fp->f_bf.smb_size; /* implies SMFBF */

	for (; n > 0; n -= t, p += t)
	{
		errno = 0; /* needed to ensure EOF correctly found */

		/* Call the file type's write function */
		t = (*fp->f_write)(fp, (char *)p, n);
		if (t <= 0)
		{
			if (t == 0 && errno == 0)
				break; /* EOF found */

			if (IS_IO_ERROR(fd, t, *timeout))
			{
				fp->f_flags |= SMERR;

				/* errno set by fp->f_write */
				return SM_IO_EOF;
			}
			SM_IO_WR_TIMEOUT(fp, fd, *timeout);
		}
	}
	return 0;
}
@


1.1.1.1
log
@Import OpenBSD 3.3 source repository from CTM 3132 the first time
This opens an OpenBSD-mirabile (aka MirBSD) repository.

### MirBSD is:
# Copyright (c) 1982-2003 by Thorsten "mirabile" Glaser <x86@@ePost.de>
# Copyright © 1968-2003  The authors of And contributors to UNIX®, the
#       C Language, BSD/Berkeley Unix; 386BSD, NetBSD 1.1 and OpenBSD.
#
# Anyone who obtained a copy of this work is hereby permitted to freely use,
# distribute, modify, merge, sublicence, give away or sell it as long as the
# authors are given due credit and the following notice is retained:
#
# This work is provided "as is", with no explicit or implicit warranty what-
# soever. Use it only at your own risk. In no event may an author or contri-
# butor be held liable for any damage, directly or indirectly, that origina-
# ted through or is caused by creation or modification of this work.

MirBSD is my private tree. MirBSD does not differ very much from OpenBSD
and intentionally tracks OpenBSD. That's why it _is_ OpenBSD, just not the
official one. It's like with DarrenBSD.

At time of this writing, no advertising for MirBSD must be done,
because the advertising clause has not yet been sorted out.

http://templeofhate.com/tglaser/MirBSD/index.php
@
text
@@
