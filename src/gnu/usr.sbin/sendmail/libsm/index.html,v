head	1.1;
branch	1.1.1;
access;
symbols
	tg-mergetmp-mirosx-1:1.1.1.1
	tg-mergefixes-1-branch:1.1.1.1.0.14
	tg-mergefixes-1-base:1.1.1.1
	MIROS_X:1.1.1.1.0.12
	MIROS_X_BASE:1.1.1.1
	tg-mergetmp-3:1.1.1.1
	MIRBSD_XP_MIRPPC:1.1.1.1.0.10
	cvs-200410222320:1.1.1.1
	MIRBSD_XP_SPARC_BASE:1.1.1.1
	MIRBSD_XP_SPARC:1.1.1.1.0.8
	cvs-200406091940:1.1.1.1
	MIRBSD_7quater:1.1.1.1
	cvs-200405160640:1.1.1.1
	cvs-200401271800:1.1.1.1
	cvs-200401261630:1.1.1.1
	cvs-200401021645:1.1.1.1
	MIRBSD_7_ALPHA:1.1.1.1.0.6
	MIRBSD_7:1.1.1.1.0.4
	cvs-200312222040:1.1.1.1
	MIRBSD_7ter:1.1.1.1
	MIRBSD_7_DEV:1.1.1.1.0.2
	cvs-200310020700:1.1.1.1
	cvs-200309271030:1.1.1.1
	cvs-200309251530:1.1.1.1
	cvs-200309171845:1.1.1.1
	cvs-200308302005:1.1.1.1
	cvs-200308171200:1.1.1.1
	ctm-3496:1.1.1.1
	ctm-3449:1.1.1.1
	ctm-3437:1.1.1.1
	cvs-200307191805:1.1.1.1
	ctm-3425:1.1.1.1
	cvs-200307091500:1.1.1.1
	ctm-3389:1.1.1.1
	cvs-200306291430:1.1.1.1
	ctm-3341:1.1.1.1
	MIRBSD_5:1.1.1.1
	cvs-200306082100:1.1.1.1
	ctm-3316:1.1.1.1
	ctm-3272:1.1.1.1
	ctm-3264:1.1.1.1
	cvs-200305071630:1.1.1.1
	MIRBSD_4:1.1.1.1
	ctm-3203:1.1.1.1
	cvs-20030410-1130:1.1.1.1
	cvs-20030329-2200:1.1.1.1
	ctm-3155:1.1.1.1
	ctm-3132:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@# @;


1.1
date	2003.03.22.17.44.37;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.03.22.17.44.37;	author tg;	state Stab;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@<html>
<head>
    <title>libsm Overview</title>
</head>
<body>

<center>
    <h1> libsm Overview </h1>
    <br> $Sendmail: index.html,v 1.14 2001/02/13 21:21:25 gshapiro Exp $
</center>

<h2> Introduction </h2>

Libsm is a library of generally useful C abstractions.
Libsm stands alone; it depends on no other sendmail libraries,
and the only sendmail header files it depends on are its own,
which reside in <tt>../include/sm</tt>.

<h2> Contents </h2>

Here is the current set of packages:
<blockquote>
    <a href="gen.html"> gen: general definitions </a><br>
    <a href="debug.html"> debug: debugging and tracing </a><br>
    <a href="assert.html"> assert: assertion handling and aborts </a><br>
    <a href="heap.html"> heap: memory allocation </a><br>
    <a href="exc.html"> exc: exception handling </a><br>
    <a href="rpool.html"> rpool: resource pools </a><br>
    <a href="cdefs.html"> cdefs: C language portability macros </a><br>
    <a href="io.html"> io: buffered i/o </a><br>
</blockquote>

<h2> Naming Conventions </h2>

    Some of the symbols defined by libsm
    come from widely used defacto or dejure standards.
    Examples include <tt>size_t</tt> (from the C 89 standard),
    <tt>bool</tt> (from the C 99 standard),
    <tt>strerror</tt> (from Posix),
    and <tt>__P</tt> (from BSD and Linux).
    In these cases, we use the standard name rather than
    inventing a new name.
    We import the name from the appropriate header file when possible,
    or define it ourselves when necessary.
    When you are using one of these abstractions, you must include
    the appropriate libsm header file.
    For example, when you are using <tt>strerror</tt>, you must
    include <tt>&lt;sm/string.h&gt;</tt> instead of <tt>&lt;string.h&gt;</tt>.

    <p>
    When we aren't implementing a standard interface,
    we use a naming convention that attempts to maximize portability
    across platforms, and minimize conflicts with other libraries.
    Except for a few seemingly benign exceptions,
    all names begin with <tt>SM_</tt>, <tt>Sm</tt> or <tt>sm_</tt>.

    <p>
    The ISO C, Posix and Unix standards forbid applications
    from using names beginning with <tt>__</tt> or <tt>_[A-Z]</tt>,
    and place restrictions on what sorts of names can begin
    with <tt>_[a-z]</tt>.  Such names are reserved for the compiler and
    the standard libraries.
    For this reason, we avoid defining any names that begin
    with <tt>_</tt>.
    For example, all libsm header file idempotency macros have the form
    <tt>SM_FOO_H</tt> (no leading <tt>_</tt>).

    <p>
    Type names begin with <tt>SM_</tt> and end with <tt>_T</tt>.
    Note that the Posix standard reserves all identifiers ending
    with <tt>_t</tt>.

    <p>
    All functions that are capable of raising an exception
    have names ending in <tt>_x</tt>, and developers are
    encouraged to use this convention when writing new code.
    This naming convention may seem unnecessary at first,
    but it becomes extremely useful during maintenance,
    when you are attempting to reason about the correctness
    of a block of code,
    and when you are trying to track down exception-related bugs
    in existing code.

<h2> Coding Conventions </h2>

The official style for function prototypes in libsm header files is

<blockquote><pre>
extern int
foo __P((
	int _firstarg,
	int _secondarg));
</pre></blockquote>

The <tt>extern</tt> is useless, but required for stylistic reasons.
The parameter names are optional; if present they are lowercase
and begin with _ to avoid namespace conflicts.
Each parameter is written on its own line to avoid very long lines.

<p>
For each structure <tt>struct sm_foo</tt> defined by libsm,
there is a typedef:

<blockquote><pre>
typedef struct sm_foo SM_FOO_T;
</pre></blockquote>

and there is a global variable which is defined as follows:

<blockquote><pre>
const char SmFooMagic[] = "sm_foo";
</pre></blockquote>

The first member of each structure defined by libsm is

<blockquote><pre>
const char *sm_magic;
</pre></blockquote>

For all instances of <tt>struct sm_foo</tt>,
<tt>sm_magic</tt> contains <tt>SmFooMagic</tt>,
which points to a unique character string naming the type.
It is used for debugging and run time type checking.

<p>
Each function with a parameter declared <tt>SM_FOO_T *foo</tt>
contains the following assertion:

<blockquote><pre>
SM_REQUIRE_ISA(foo, SmFooMagic);
</pre></blockquote>

which is equivalent to

<blockquote><pre>
SM_REQUIRE(foo != NULL && foo-&gt;sm_magic == SmFooMagic);
</pre></blockquote>

When an object of type <tt>SM_FOO_T</tt> is deallocated,
the member <tt>sm_magic</tt> is set to <tt>NULL</tt>.
That will cause the above assertion to fail if a dangling pointer is used.

<h2> Additional Design Goals </h2>

Here are some of my design goals:
<ul>
    <p>
<li>The sm library is self contained; it does not depend on any other
    sendmail libraries or header files.
    <p>
<li>The sm library must be compatible with shared libraries,
    even on platforms with weird implementation restrictions.
    I assume that a shared library can export global variables;
    the debug package relies on this assumption.
    I do not assume that if an application redefines a function defined
    in a shared library, the shared library will use the version of the
    function defined in the application in preference to the version
    that it defines.
    For this reason, I provide interfaces for registering handler functions
    in cases where an application might need to override standard behaviour.
    <p>
<li>The sm library must be compatible with threads.
    The debug package presents a small problem: I don't want
    sm_debug_active to acquire and release a lock.
    So I assume that
    there exists an integral type <tt>SM_ATOMIC_INT_T</tt>
    (see <a href="gen.html"><tt>&lt;sm/gen.h&gt;</tt></a>)
    that can be accessed and updated atomically.
    I assume that locking must be used to guard updates and accesses to
    any other type, and I have designed the interfaces accordingly.
</ul>

</body>
</html>
@


1.1.1.1
log
@Import OpenBSD 3.3 source repository from CTM 3132 the first time
This opens an OpenBSD-mirabile (aka MirBSD) repository.

### MirBSD is:
# Copyright (c) 1982-2003 by Thorsten "mirabile" Glaser <x86@@ePost.de>
# Copyright © 1968-2003  The authors of And contributors to UNIX®, the
#       C Language, BSD/Berkeley Unix; 386BSD, NetBSD 1.1 and OpenBSD.
#
# Anyone who obtained a copy of this work is hereby permitted to freely use,
# distribute, modify, merge, sublicence, give away or sell it as long as the
# authors are given due credit and the following notice is retained:
#
# This work is provided "as is", with no explicit or implicit warranty what-
# soever. Use it only at your own risk. In no event may an author or contri-
# butor be held liable for any damage, directly or indirectly, that origina-
# ted through or is caused by creation or modification of this work.

MirBSD is my private tree. MirBSD does not differ very much from OpenBSD
and intentionally tracks OpenBSD. That's why it _is_ OpenBSD, just not the
official one. It's like with DarrenBSD.

At time of this writing, no advertising for MirBSD must be done,
because the advertising clause has not yet been sorted out.

http://templeofhate.com/tglaser/MirBSD/index.php
@
text
@@
