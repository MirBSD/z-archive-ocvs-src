head	1.2;
access;
symbols
	cvs-200406091940:1.1.1.1
	MIRBSD_7quater:1.1.1.1
	cvs-200405160640:1.1.1.1
	cvs-200401271800:1.1.1.1
	cvs-200401261630:1.1.1.1
	cvs-200401021645:1.1.1.1
	MIRBSD_7_ALPHA:1.1.1.1.0.6
	MIRBSD_7:1.1.1.1.0.4
	cvs-200312222040:1.1.1.1
	MIRBSD_7ter:1.1.1.1
	MIRBSD_7_DEV:1.1.1.1.0.2
	cvs-200310020700:1.1.1.1
	cvs-200309271030:1.1.1.1
	cvs-200309251530:1.1.1.1
	cvs-200308302005:1.1.1.1
	cvs-200308171200:1.1.1.1
	ctm-3496:1.1.1.1
	ctm-3449:1.1.1.1
	ctm-3437:1.1.1.1
	cvs-200307191805:1.1.1.1
	ctm-3425:1.1.1.1
	cvs-200307091500:1.1.1.1
	ctm-3389:1.1.1.1
	cvs-200306291430:1.1.1.1
	ctm-3341:1.1.1.1
	MIRBSD_5:1.1.1.1
	cvs-200306082100:1.1.1.1
	ctm-3316:1.1.1.1
	ctm-3272:1.1.1.1
	ctm-3264:1.1.1.1
	cvs-200305071630:1.1.1.1
	MIRBSD_4:1.1.1.1
	ctm-3203:1.1.1.1
	cvs-20030410-1130:1.1.1.1
	ctm-3155:1.1.1.1
	ctm-3132:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.2
date	2003.10.30.18.08.06;	author tg;	state dead;
branches;
next	1.1;

1.1
date	2003.03.22.17.44.28;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.03.22.17.44.28;	author tg;	state Exp;
branches;
next	;


desc
@@


1.2
log
@It turns out that
* mkisofs works
* the "old-style" image built on cdrom34.fs works
* the "new-style" image built on cdboot and with bsd.rd doesn't
  (cdboot seems to be not initialized correctly, will
   look after that later)
* mkhybrid has lived out its life (report regressions
  against mkisofs please)
* we should bump the patchlevel and issue a warning if
  the user installs the cdrtools port
  (I don't delete mkisofs from the port yet, the MirPorts
   framework is currently following MirOS #7 stable)
* I should get my hands on the El Torito standard, and
  a good copy of bochs :)
@
text
@/*
 * 27-Mar-96: Jan-Piet Mens <jpm@@mens.de>
 * added 'match' option (-m) to specify regular expressions NOT to be included
 * in the CD image.
 */

#ifdef APPLE_HYB
/*
 * Added a number of routines to create lists of files to hidden from
 * the ISO9660 and/or Joliet trees. James Pearson (j.pearson@@ge.ucl.ac.uk)
 * January 1999 (these will probably appear in mkisofs in the future)
 */
#endif /* APPLE_HYB */

static char rcsid[] ="$Id: match.c,v 1.1 2003/03/22 17:44:28 tg Exp $";

#include "config.h"
#include <prototyp.h>
#include <stdio.h>
#ifndef VMS
#ifdef HAVE_MALLOC_H
#include <malloc.h>
#else
#include <stdlib.h>
#endif
#endif
#include <inttypes.h>
#include <string.h>
#include "match.h"

#define MAXMATCH 1000
static char *mat[MAXMATCH];

#ifdef APPLE_HYB
int  add_match(fn)
#else
void add_match(fn)
#endif /* APPLE_HYB */
char * fn;
{
  register int i;

  for (i=0; mat[i] && i<MAXMATCH; i++);
  if (i == MAXMATCH) {
    fprintf(stderr,"Can't exclude RE '%s' - too many entries in table\n",fn);
    return 1;
  }

 
  mat[i] = (char *) malloc(strlen(fn)+1);
  if (! mat[i]) {
    fprintf(stderr,"Can't allocate memory for excluded filename\n");
    return 1;
  }

  strcpy(mat[i],fn);

  return 0;
}

int matches(fn)
char * fn;
{
  /* very dumb search method ... */
  register int i;

  for (i=0; mat[i] && i<MAXMATCH; i++) {
    if (fnmatch(mat[i], fn, FNM_FILE_NAME) != FNM_NOMATCH) {
      return 1; /* found -> excluded filenmae */
    }
  }
  return 0; /* not found -> not excluded */
}

/* ISO9660/RR hide */

static char *i_mat[MAXMATCH];

#ifdef APPLE_HYB
int  i_add_match(fn)
#else
void i_add_match(fn)
#endif /* APPLE_HYB */
char * fn;
{
  register int i;

  for (i=0; i_mat[i] && i<MAXMATCH; i++);
  if (i == MAXMATCH) {
    fprintf(stderr,"Can't exclude RE '%s' - too many entries in table\n",fn);
    return;
  }

 
  i_mat[i] = (char *) malloc(strlen(fn)+1);
  if (! i_mat[i]) {
    fprintf(stderr,"Can't allocate memory for excluded filename\n");
    return;
  }

  strcpy(i_mat[i],fn);
}

int i_matches(fn)
char * fn;
{
  /* very dumb search method ... */
  register int i;

  for (i=0; i_mat[i] && i<MAXMATCH; i++) {
    if (fnmatch(i_mat[i], fn, FNM_FILE_NAME) != FNM_NOMATCH) {
      return 1; /* found -> excluded filenmae */
    }
  }
  return 0; /* not found -> not excluded */
}

intptr_t i_ishidden()
{
  return((intptr_t)i_mat[0]);
}

/* Joliet hide */

static char *j_mat[MAXMATCH];

#ifdef APPLE_HYB
int  j_add_match(fn)
#else
void j_add_match(fn)
#endif /* APPLE_HYB */
char * fn;
{
  register int i;

  for (i=0; j_mat[i] && i<MAXMATCH; i++);
  if (i == MAXMATCH) {
    fprintf(stderr,"Can't exclude RE '%s' - too many entries in table\n",fn);
    return 1;
  }

 
  j_mat[i] = (char *) malloc(strlen(fn)+1);
  if (! j_mat[i]) {
    fprintf(stderr,"Can't allocate memory for excluded filename\n");
    return 1;
  }

  strcpy(j_mat[i],fn);

  return 0;
}

int j_matches(fn)
char * fn;
{
  /* very dumb search method ... */
  register int i;

  for (i=0; j_mat[i] && i<MAXMATCH; i++) {
    if (fnmatch(j_mat[i], fn, FNM_FILE_NAME) != FNM_NOMATCH) {
      return 1; /* found -> excluded filenmae */
    }
  }
  return 0; /* not found -> not excluded */
}

intptr_t j_ishidden()
{
  return((intptr_t)j_mat[0]);
}

#ifdef APPLE_HYB

/* HFS hide */

static char *hfs_mat[MAXMATCH];

int hfs_add_match(fn)
char * fn;
{
  register int i;

  for (i=0; hfs_mat[i] && i<MAXMATCH; i++);
  if (i == MAXMATCH) {
    fprintf(stderr,"Can't exclude RE '%s' - too many entries in table\n",fn);
    return 1;
  }

 
  hfs_mat[i] = (char *) malloc(strlen(fn)+1);
  if (! hfs_mat[i]) {
    fprintf(stderr,"Can't allocate memory for excluded filename\n");
    return 1;
  }

  strcpy(hfs_mat[i],fn);

  return 0;
}

void hfs_add_list(file)
char *file;
{
  FILE *fp;
  char name[1024];

  if ((fp = fopen(file, "r")) == NULL) {
    fprintf(stderr,"Can't open hidden file list %s\n", file);
    exit (1);
  }

  while (fscanf(fp, "%s", name) != EOF) {
    if (hfs_add_match(name)) {
      fclose(fp);
      return;
    }
  }

  fclose(fp);
}


int hfs_matches(fn)
char * fn;
{
  /* very dumb search method ... */
  register int i;

  for (i=0; hfs_mat[i] && i<MAXMATCH; i++) {
    if (fnmatch(hfs_mat[i], fn, FNM_FILE_NAME) != FNM_NOMATCH) {
      return 1; /* found -> excluded filenmae */
    }
  }
  return 0; /* not found -> not excluded */
}

intptr_t hfs_ishidden()
{
  return((intptr_t)hfs_mat[0]);
}

/* These will probably appear in mkisofs in the future */

void add_list(file)
char *file;
{
  FILE *fp;
  char name[1024];

  if ((fp = fopen(file, "r")) == NULL) {
    fprintf(stderr,"Can't open exclude file list %s\n", file);
    exit (1);
  }

  while (fscanf(fp, "%s", name) != EOF) {
    if (add_match(name)) {
      fclose(fp);
      return;
    }
  }

  fclose(fp);
}

void i_add_list(file)
char *file;
{
  FILE *fp;
  char name[1024];

  if ((fp = fopen(file, "r")) == NULL) {
    fprintf(stderr,"Can't open hidden file list %s\n", file);
    exit (1);
  }

  while (fscanf(fp, "%s", name) != EOF) {
    if (i_add_match(name)) {
      fclose(fp);
      return;
    }
  }

  fclose(fp);
}

void j_add_list(file)
char *file;
{
  FILE *fp;
  char name[1024];

  if ((fp = fopen(file, "r")) == NULL) {
    fprintf(stderr,"Can't open hidden file list %s\n", file);
    exit (1);
  }

  while (fscanf(fp, "%s", name) != EOF) {
    if (j_add_match(name)) {
      fclose(fp);
      return;
    }
  }

  fclose(fp);
}

#endif /* APPLE_HYB */
@


1.1
log
@Initial revision
@
text
@d15 1
a15 1
static char rcsid[] ="$Id: match.c,v 1.2 2002/11/03 20:27:03 pvalchev Exp $";
@


1.1.1.1
log
@Import OpenBSD 3.3 source repository from CTM 3132 the first time
This opens an OpenBSD-mirabile (aka MirBSD) repository.

### MirBSD is:
# Copyright (c) 1982-2003 by Thorsten "mirabile" Glaser <x86@@ePost.de>
# Copyright © 1968-2003  The authors of And contributors to UNIX®, the
#       C Language, BSD/Berkeley Unix; 386BSD, NetBSD 1.1 and OpenBSD.
#
# Anyone who obtained a copy of this work is hereby permitted to freely use,
# distribute, modify, merge, sublicence, give away or sell it as long as the
# authors are given due credit and the following notice is retained:
#
# This work is provided "as is", with no explicit or implicit warranty what-
# soever. Use it only at your own risk. In no event may an author or contri-
# butor be held liable for any damage, directly or indirectly, that origina-
# ted through or is caused by creation or modification of this work.

MirBSD is my private tree. MirBSD does not differ very much from OpenBSD
and intentionally tracks OpenBSD. That's why it _is_ OpenBSD, just not the
official one. It's like with DarrenBSD.

At time of this writing, no advertising for MirBSD must be done,
because the advertising clause has not yet been sorted out.

http://templeofhate.com/tglaser/MirBSD/index.php
@
text
@@
