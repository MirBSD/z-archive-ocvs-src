head	1.2;
access;
symbols
	cvs-200406091940:1.1.1.1
	MIRBSD_7quater:1.1.1.1
	cvs-200405160640:1.1.1.1
	cvs-200401271800:1.1.1.1
	cvs-200401261630:1.1.1.1
	cvs-200401021645:1.1.1.1
	MIRBSD_7_ALPHA:1.1.1.1.0.6
	MIRBSD_7:1.1.1.1.0.4
	cvs-200312222040:1.1.1.1
	MIRBSD_7ter:1.1.1.1
	MIRBSD_7_DEV:1.1.1.1.0.2
	cvs-200310020700:1.1.1.1
	cvs-200309271030:1.1.1.1
	cvs-200309251530:1.1.1.1
	cvs-200308302005:1.1.1.1
	cvs-200308171200:1.1.1.1
	ctm-3496:1.1.1.1
	ctm-3449:1.1.1.1
	ctm-3437:1.1.1.1
	cvs-200307191805:1.1.1.1
	ctm-3425:1.1.1.1
	cvs-200307091500:1.1.1.1
	ctm-3389:1.1.1.1
	cvs-200306291430:1.1.1.1
	ctm-3341:1.1.1.1
	MIRBSD_5:1.1.1.1
	cvs-200306082100:1.1.1.1
	ctm-3316:1.1.1.1
	ctm-3272:1.1.1.1
	ctm-3264:1.1.1.1
	cvs-200305071630:1.1.1.1
	MIRBSD_4:1.1.1.1
	ctm-3203:1.1.1.1
	cvs-20030410-1130:1.1.1.1
	ctm-3155:1.1.1.1
	ctm-3132:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.2
date	2003.10.30.18.08.12;	author tg;	state dead;
branches;
next	1.1;

1.1
date	2003.03.22.17.44.28;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.03.22.17.44.28;	author tg;	state Exp;
branches;
next	;


desc
@@


1.2
log
@It turns out that
* mkisofs works
* the "old-style" image built on cdrom34.fs works
* the "new-style" image built on cdboot and with bsd.rd doesn't
  (cdboot seems to be not initialized correctly, will
   look after that later)
* mkhybrid has lived out its life (report regressions
  against mkisofs please)
* we should bump the patchlevel and issue a warning if
  the user installs the cdrtools port
  (I don't delete mkisofs from the port yet, the MirPorts
   framework is currently following MirOS #7 stable)
* I should get my hands on the El Torito standard, and
  a good copy of bochs :)
@
text
@/*
 * File vms.c - assorted bletcherous hacks for VMS.

   Written by Eric Youngdale (1993).
 */

static char rcsid[] ="$Id: vms.c,v 1.1 2003/03/22 17:44:28 tg Exp $";

#ifdef VMS
#include <rms.h>
#include <descrip.h>
#include <ssdef.h>
#include <sys/types.h>
#include <sys/stat.h>
#define opendir fake_opendir
#include "mkisofs.h"
#undef opendir
#include <stdio.h>

static struct RAB *rab;	/* used for external mailfiles */
static int rms_status;

static error_exit(char * text){
	fprintf(stderr,"%s\n", text);
	exit(33);
}


char * strrchr(const char *, char);

char * strdup(char * source){
  char * pnt;
  pnt = (char *) e_malloc(strlen(source) + 1);
  strcpy(pnt, source);
  return pnt;
}

int VMS_stat(char * path, struct stat * spnt){
  char * spath;
  char sbuffer[255];
  char * pnt, *ppnt;
  char * pnt1;

  ppnt = strrchr(path,']');
  if(ppnt) ppnt++;
  else ppnt = path;

  spath = path;

  if(strcmp(ppnt,".") == 0 || strcmp(ppnt,"..") == 0){
    strcpy(sbuffer, path);

    /* Find end of actual name */
    pnt = strrchr(sbuffer,']');
    if(!pnt) return 0;

    pnt1 = pnt;
    while(*pnt1 != '[' && *pnt1 != '.') pnt1--;

    if(*pnt1 != '[' && strcmp(ppnt,"..") == 0) {
      pnt1--;
      while(*pnt1 != '[' && *pnt1 != '.') pnt1--;
    };

    if(*pnt1 == '.') {
      *pnt1 = ']';
      pnt = pnt1;
      while(*pnt != '.' && *pnt != ']') pnt++;
      *pnt++ = ']';
      while(*pnt != '.' && *pnt != ']') pnt++;
      *pnt = 0;
      strcat(sbuffer,".DIR;1");
    };

    if(*pnt1 == '[') {
      pnt1++;
      *pnt1 = 0;
      strcat(pnt1,"000000]");
      pnt1 = strrchr(path,'[') + 1;
      pnt = sbuffer + strlen(sbuffer);
      while(*pnt1 && *pnt1 != '.' && *pnt1 != ']') *pnt++ = *pnt1++;
      *pnt = 0;
      strcat(sbuffer,".DIR;1");
    };

    spath = sbuffer;
  };
  return stat_filter(spath, spnt);
}

static int dircontext[32] = {0,};
static char * searchpath[32];
static struct direct d_entry[32];

int optind = 0;
char * optarg;

int  getopt(int argc, char *argv[], char * flags){
  char * pnt;
  char c;
  optind++;
  if(*argv[optind] != '-') return EOF;
  optarg = 0;

  c = *(argv[optind]+1);
  pnt = (char *) strchr(flags, c);
  if(!pnt) return c;  /* Not found */
  if(pnt[1] == ':') {
    optind++;
    optarg = argv[optind];
  };
  return c;
}

void vms_path_fixup(char * name){
  char * pnt1;
  pnt1 = name + strlen(name) - 6;

  /* First strip the .DIR;1 */
  if(strcmp(pnt1, ".DIR;1") == 0) *pnt1 = 0;

  pnt1 = (char*) strrchr(name, ']');
  if(pnt1) {
    if(pnt1[1] == 0) return;
    *pnt1 = '.';
    strcat(name,"]");
    return;
  };
  pnt1 = (char*) strrchr(name, '>');
  if(pnt1) {
    if(pnt1[1] == 0) return;
    *pnt1 = '.';
    strcat(name,">");
    return;
  };
}

int opendir(char * path){
  int i;
  for(i=1; i<32; i++) {
    if(dircontext[i] == 0){
      dircontext[i] = -1;
      searchpath[i] = (char *) e_malloc(strlen(path) + 6);
      strcpy(searchpath[i], path);
      vms_path_fixup(searchpath[i]);
      strcat(searchpath[i],"*.*.*");
      return i;
    };
  };
  exit(0);
}

struct direct * readdir(int context){
  int i;
  char cresult[100];
  char * pnt;
  int status;
  $DESCRIPTOR(dpath,searchpath[context]);
  $DESCRIPTOR(result,cresult);

  if(dircontext[context] == -1) {
    dircontext[context] = -2;
    strcpy(d_entry[context].d_name, ".");
    return &d_entry[context];
  };

  if(dircontext[context] == -2) {
    dircontext[context] = -3;
    strcpy(d_entry[context].d_name, "..");
    return &d_entry[context];
  };

  if(dircontext[context] == -3) dircontext[context] = 0;

  dpath.dsc$w_length = strlen(searchpath[context]);
  lib$find_file(&dpath, &result, &dircontext[context], 
		0, 0, &status, 0);

  if(status == SS$_NOMOREFILES) return 0;

  /* Now trim trailing spaces from the name */
  i = result.dsc$w_length - 1;
  while(i && cresult[i] == ' ') i--;
  cresult[i+1] = 0;

  /* Now locate the actual portion of the file we want */

  pnt = (char *) strrchr(cresult,']');
  if(pnt) pnt++;
  else
    pnt = cresult;

  strcpy(d_entry[context].d_name, pnt);
  return &d_entry[context];
}

void closedir(int context){
  lib$find_file_end(&dircontext[context]);
  free(searchpath[context]);
  searchpath[context] = (char *) 0;
  dircontext[context] = 0;
}

static open_file(char* fn){
/* this routine initializes a rab and  fab required to get the
   correct definition of the external data file used by mail */
	struct FAB * fab;

	rab = (struct RAB*) e_malloc(sizeof(struct RAB));
	fab = (struct FAB*) e_malloc(sizeof(struct FAB));

	*rab = cc$rms_rab;	/* initialize RAB*/
	rab->rab$l_fab = fab;

	*fab = cc$rms_fab;	/* initialize FAB*/
	fab->fab$l_fna = fn;
	fab->fab$b_fns = strlen(fn);
	fab->fab$w_mrs = 512;
	fab->fab$b_fac = FAB$M_BIO | FAB$M_GET;
	fab->fab$b_org = FAB$C_SEQ;
	fab->fab$b_rfm = FAB$C_FIX;
	fab->fab$l_xab = (char*) 0;

	rms_status = sys$open(rab->rab$l_fab);
	if(rms_status != RMS$_NORMAL && rms_status != RMS$_CREATED)
		error_exit("$OPEN");
	rms_status = sys$connect(rab);
	if(rms_status != RMS$_NORMAL)
		error_exit("$CONNECT");
	return 1;
}

static close_file(struct RAB * prab){
	rms_status = sys$close(prab->rab$l_fab);
	free(prab->rab$l_fab);
	free(prab);
	if(rms_status != RMS$_NORMAL)
		error_exit("$CLOSE");
}

#define NSECT 16
extern unsigned int last_extent_written;

int vms_write_one_file(char * filename, int size, FILE * outfile){
	int status, i;
	char buffer[SECTOR_SIZE * NSECT];
	int count;
	int use;
	int remain;

	open_file(filename);

	remain = size;
	
	while(remain > 0){
	  use =  (remain >  SECTOR_SIZE * NSECT - 1 ? NSECT*SECTOR_SIZE : remain);
	  use = ROUND_UP(use); /* Round up to nearest sector boundary */
	  memset(buffer, 0, use);
	  rab->rab$l_ubf = buffer;
	  rab->rab$w_usz = sizeof(buffer);
	  status = sys$read(rab);
	  fwrite(buffer, 1, use, outfile);
	  last_extent_written += use/SECTOR_SIZE;
	  if((last_extent_written % 1000) < use/SECTOR_SIZE) fprintf(stderr,"%d..", last_extent_written);
	  remain -= use;
	};
	
	close_file(rab);
}
#endif
@


1.1
log
@Initial revision
@
text
@d7 1
a7 1
static char rcsid[] ="$Id: vms.c,v 1.1 2000/10/10 20:40:21 beck Exp $";
@


1.1.1.1
log
@Import OpenBSD 3.3 source repository from CTM 3132 the first time
This opens an OpenBSD-mirabile (aka MirBSD) repository.

### MirBSD is:
# Copyright (c) 1982-2003 by Thorsten "mirabile" Glaser <x86@@ePost.de>
# Copyright © 1968-2003  The authors of And contributors to UNIX®, the
#       C Language, BSD/Berkeley Unix; 386BSD, NetBSD 1.1 and OpenBSD.
#
# Anyone who obtained a copy of this work is hereby permitted to freely use,
# distribute, modify, merge, sublicence, give away or sell it as long as the
# authors are given due credit and the following notice is retained:
#
# This work is provided "as is", with no explicit or implicit warranty what-
# soever. Use it only at your own risk. In no event may an author or contri-
# butor be held liable for any damage, directly or indirectly, that origina-
# ted through or is caused by creation or modification of this work.

MirBSD is my private tree. MirBSD does not differ very much from OpenBSD
and intentionally tracks OpenBSD. That's why it _is_ OpenBSD, just not the
official one. It's like with DarrenBSD.

At time of this writing, no advertising for MirBSD must be done,
because the advertising clause has not yet been sorted out.

http://templeofhate.com/tglaser/MirBSD/index.php
@
text
@@
