head	1.3;
access;
symbols
	texinfo-4_8:1.1.2.2
	tg-mergetmp-mirosx-1:1.3
	tg-mergefixes-1-branch:1.3.0.8
	tg-mergefixes-1-base:1.3
	MIROS_X:1.3.0.6
	MIROS_X_BASE:1.3
	MIRBSD_XP_MIRPPC:1.3.0.4
	texinfo-4_7:1.1.2.1
	FSF:1.1.2
	MIRBSD_XP_SPARC_BASE:1.3
	MIRBSD_XP_SPARC:1.3.0.2
	testing_SYNC_A:1.3
	cvs-200406091940:1.1.1.1
	MIRBSD_7quater:1.1.1.1
	cvs-200405160640:1.1.1.1
	cvs-200401271800:1.1.1.1
	cvs-200401261630:1.1.1.1
	cvs-200401021645:1.1.1.1
	MIRBSD_7_ALPHA:1.1.1.1.0.6
	MIRBSD_7:1.1.1.1.0.4
	cvs-200312222040:1.1.1.1
	MIRBSD_7ter:1.1.1.1
	MIRBSD_7_DEV:1.1.1.1.0.2
	cvs-200310020700:1.1.1.1
	cvs-200309271030:1.1.1.1
	cvs-200309251530:1.1.1.1
	cvs-200308302005:1.1.1.1
	cvs-200308171200:1.1.1.1
	ctm-3496:1.1.1.1
	ctm-3449:1.1.1.1
	ctm-3437:1.1.1.1
	cvs-200307191805:1.1.1.1
	ctm-3425:1.1.1.1
	cvs-200307091500:1.1.1.1
	ctm-3389:1.1.1.1
	cvs-200306291430:1.1.1.1
	ctm-3341:1.1.1.1
	MIRBSD_5:1.1.1.1
	cvs-200306082100:1.1.1.1
	ctm-3316:1.1.1.1
	ctm-3272:1.1.1.1
	ctm-3264:1.1.1.1
	cvs-200305071630:1.1.1.1
	MIRBSD_4:1.1.1.1
	ctm-3203:1.1.1.1
	cvs-20030410-1130:1.1.1.1
	ctm-3155:1.1.1.1
	ctm-3132:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.3
date	2004.08.08.17.29.23;	author tg;	state Stab;
branches;
next	1.2;

1.2
date	2004.08.08.17.26.07;	author tg;	state dead;
branches;
next	1.1;

1.1
date	2003.03.22.17.44.18;	author tg;	state Exp;
branches
	1.1.1.1
	1.1.2.1;
next	;

1.1.1.1
date	2003.03.22.17.44.18;	author tg;	state Exp;
branches;
next	;

1.1.2.1
date	2004.10.16.23.10.07;	author tg;	state Exp;
branches;
next	1.1.2.2;

1.1.2.2
date	2005.01.06.23.37.24;	author tg;	state Exp;
branches;
next	;


desc
@@


1.3
log
@switch to texinfo 4.7 based system
@
text
@/* index.h -- declarations for index.c.
   $Id: index.h,v 1.1.2.1 2004/08/08 16:18:01 tg Exp $

   Copyright (C) 1998, 99 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software Foundation,
   Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */

#ifndef INDEX_H
#define INDEX_H

#include "makeinfo.h"
#include "cmds.h"

/* User commands are only new indices.  (Macros are handled separately.)  */
extern COMMAND **user_command_array;
extern int user_command_array_len;

/* An index element... */
typedef struct index_elt
{
  struct index_elt *next;
  char *entry;                  /* The index entry itself, after expansion. */
  char *entry_text;             /* The original, non-expanded entry text. */
  char *node;                   /* The node from whence it came. */
  char *section;                /* Current section number we are in, */
  char *section_name;           /* ... and its title.  */
  int code;                     /* Nonzero means add `@@code{...}' when
                                   printing this element. */
  int defining_line;            /* Line number where this entry was written. */
  int output_line;              /* And line number where it is in the output. */
  char *defining_file;          /* Source file for defining_line. */
  char *output_file;            /* Output file for output_line. */
  int entry_number;             /* Entry number.  */
} INDEX_ELT;


/* A list of short-names for each index.
   There are two indices into the the_indices array.
   * read_index is the index that points to the list of index
     entries that we will find if we ask for the list of entries for
     this name.
   * write_index is the index that points to the list of index entries
     that we will add new entries to.

   Initially, read_index and write_index are the same, but the
   @@syncodeindex and @@synindex commands can change the list we add
   entries to.

   For example, after the commands
     @@cindex foo
     @@defindex ii
     @@synindex cp ii
     @@cindex bar

   the cp index will contain the entry `foo', and the new ii
   index will contain the entry `bar'.  This is consistent with the
   way texinfo.tex handles the same situation.

   In addition, for each index, it is remembered whether that index is
   a code index or not.  Code indices have @@code{} inserted around the
   first word when they are printed with printindex. */
typedef struct
{
  char *name;
  int read_index;   /* index entries for `name' */
  int write_index;  /* store index entries here, @@synindex can change it */
  int code;
} INDEX_ALIST;

extern INDEX_ALIST **name_index_alist;

/* Initialize all indices.  */
extern void init_indices (void);

extern int defined_indices;
extern int printing_index;
extern int index_counter;

INDEX_ELT *index_list (char *name);

#endif /* !INDEX_H */
@


1.2
log
@remove old texinfo 4.2
@
text
@d2 1
a2 1
   $Id: index.h,v 1.1 2003/03/22 17:44:18 tg Exp $
d30 54
d85 5
a89 1
extern void init_indices ();
d91 1
a91 2
/* Function to compare index entries for sorting.  */
extern int (*index_compare_fn) ();
@


1.1
log
@Initial revision
@
text
@d2 1
a2 1
   $Id: index.h,v 1.1.1.1 2000/02/09 01:25:16 espie Exp $
@


1.1.2.1
log
@(stripped down to actually needed files) pristine GNU texinfo 4.7
@
text
@d2 1
a2 1
   $Id: index.h,v 1.6 2004/02/28 10:42:50 dirt Exp $
a29 54
/* An index element... */
typedef struct index_elt
{
  struct index_elt *next;
  char *entry;                  /* The index entry itself, after expansion. */
  char *entry_text;             /* The original, non-expanded entry text. */
  char *node;                   /* The node from whence it came. */
  char *section;                /* Current section number we are in, */
  char *section_name;           /* ... and its title.  */
  int code;                     /* Nonzero means add `@@code{...}' when
                                   printing this element. */
  int defining_line;            /* Line number where this entry was written. */
  int output_line;              /* And line number where it is in the output. */
  char *defining_file;          /* Source file for defining_line. */
  char *output_file;            /* Output file for output_line. */
  int entry_number;             /* Entry number.  */
} INDEX_ELT;


/* A list of short-names for each index.
   There are two indices into the the_indices array.
   * read_index is the index that points to the list of index
     entries that we will find if we ask for the list of entries for
     this name.
   * write_index is the index that points to the list of index entries
     that we will add new entries to.

   Initially, read_index and write_index are the same, but the
   @@syncodeindex and @@synindex commands can change the list we add
   entries to.

   For example, after the commands
     @@cindex foo
     @@defindex ii
     @@synindex cp ii
     @@cindex bar

   the cp index will contain the entry `foo', and the new ii
   index will contain the entry `bar'.  This is consistent with the
   way texinfo.tex handles the same situation.

   In addition, for each index, it is remembered whether that index is
   a code index or not.  Code indices have @@code{} inserted around the
   first word when they are printed with printindex. */
typedef struct
{
  char *name;
  int read_index;   /* index entries for `name' */
  int write_index;  /* store index entries here, @@synindex can change it */
  int code;
} INDEX_ALIST;

extern INDEX_ALIST **name_index_alist;

d31 1
a31 5
extern void init_indices (void);

extern int defined_indices;
extern int printing_index;
extern int index_counter;
d33 2
a34 1
INDEX_ELT *index_list (char *name);
@


1.1.2.2
log
@GNU Texinfo 4.8 here, too
@
text
@d2 1
a2 1
   $Id: index.h,v 1.2 2004/04/11 17:56:47 karl Exp $
@


1.1.1.1
log
@Import OpenBSD 3.3 source repository from CTM 3132 the first time
This opens an OpenBSD-mirabile (aka MirBSD) repository.

### MirBSD is:
# Copyright (c) 1982-2003 by Thorsten "mirabile" Glaser <x86@@ePost.de>
# Copyright © 1968-2003  The authors of And contributors to UNIX®, the
#       C Language, BSD/Berkeley Unix; 386BSD, NetBSD 1.1 and OpenBSD.
#
# Anyone who obtained a copy of this work is hereby permitted to freely use,
# distribute, modify, merge, sublicence, give away or sell it as long as the
# authors are given due credit and the following notice is retained:
#
# This work is provided "as is", with no explicit or implicit warranty what-
# soever. Use it only at your own risk. In no event may an author or contri-
# butor be held liable for any damage, directly or indirectly, that origina-
# ted through or is caused by creation or modification of this work.

MirBSD is my private tree. MirBSD does not differ very much from OpenBSD
and intentionally tracks OpenBSD. That's why it _is_ OpenBSD, just not the
official one. It's like with DarrenBSD.

At time of this writing, no advertising for MirBSD must be done,
because the advertising clause has not yet been sorted out.

http://templeofhate.com/tglaser/MirBSD/index.php
@
text
@@
