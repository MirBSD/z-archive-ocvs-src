head	1.2;
access;
symbols
	cvs-200406091940:1.1.1.1
	cvs-200405160640:1.1.1.1
	cvs-200401271800:1.1.1.1
	cvs-200401261630:1.1.1.1
	cvs-200401021645:1.1.1.1
	cvs-200312222040:1.1.1.1
	cvs-200310020700:1.1.1.1
	cvs-200309271030:1.1.1.1
	cvs-200309251530:1.1.1.1
	cvs-200308302005:1.1.1.1
	cvs-200308171200:1.1.1.1
	ctm-3496:1.1.1.1
	ctm-3449:1.1.1.1
	ctm-3437:1.1.1.1
	cvs-200307191805:1.1.1.1
	ctm-3425:1.1.1.1
	cvs-200307091500:1.1.1.1
	ctm-3389:1.1.1.1
	cvs-200306291430:1.1.1.1
	ctm-3341:1.1.1.1
	cvs-200306082100:1.1.1.1
	ctm-3316:1.1.1.1
	ctm-3272:1.1.1.1
	ctm-3264:1.1.1.1
	cvs-200305071630:1.1.1.1
	MIRBSD_4:1.1.1.1
	ctm-3203:1.1.1.1
	cvs-20030410-1130:1.1.1.1
	ctm-3155:1.1.1.1
	ctm-3132:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@# @;


1.2
date	2003.05.16.17.08.37;	author tg;	state dead;
branches;
next	1.1;

1.1
date	2003.03.22.17.42.00;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.03.22.17.42.00;	author tg;	state Exp;
branches;
next	;


desc
@@


1.2
log
@remove GNU groff - tree cleanup
we don't really need it; unix nroff fits us well enough, and for
the pre-formatted man pages, we can simply grab them from openbsd

someone wanna make a port?
@
text
@Give a more helpful error message when the indent is set to a value
greater than the line-length.

Tracing. This is a pain to implement because requests are responsible
for reading their own arguments.

Possibly implement -s option (stop every N pages). This functionality
would be more appropriate in a postprocessor.

Line breaking should be smarter.  In particular, it should be possible
to shrink spaces.  Also avoid having a line that's been shrunk a lot
next to a line that's been stretched a lot.  The difficulty is to
design a mechanism that allows the user complete control over the
decision of where to break the line.

Provide a mechanism to control the shape of the rag in non-justified
text.

Add a discretionary break escape sequence. \B'...'...'...' like TeX.

Think about kerning between characters and spaces. (Need to implement
get_breakpoints and split methods for kern_pair_node class.)

In troff, if .L > 1 when a diversion is reread in no-fill mode, then
extra line-spacing is added on. Groff at the moment treats line-spacing
like vertical spacing and doesn't do this. 

Suppose \(ch comes from a special font S, and that the current font is
R. Suppose that R contains a hyphen character and that S does not.
Suppose that the current font is R. Suppose that \(ch is in a word
and has a non-zero hyphen-type. Then we ought to be able to hyphenate,
but we won't be able to because we will look for the hyphen only in
font S and not in font R.

Variant of tm which doesn't write a newline.

Perhaps the current input level should be accessible in a number register.

Should \w deal with a newline like \X?

Have another look at uses of token::delimiter.  Perhaps we need to
distinguish the case where we want to see if a token could start a
number, from the case where we want to see if it could occur somewhere
in a number expression.

Provide a facility like copy thru in pic.

Fancier implementation of font families which doesn't group fonts into
families purely on the basis of their names.

In the DESC file make the number of fonts optional if they are all on
one line.

Number register to give the diversion level.

Time various alternative implementations of scale (both in font.c and
number.c). On a sparc it's faster to always do it in floating point.

Devise a more compact representation for the hyphenation patterns trie.

Have a per-environment parameter to increase letter-spacing.

Number register to return character height.

Number register to return character slant.

Request to set character height.

Request to set character slant.

Provide some way to upcase or downcase strings.

Support non-uniformly scalable fonts. Perhaps associate a suffix with
a particular range of sizes.  eg
  sizesuffix .display 14-512
Then is you ask for R at pointsize 16, groff will first look for
R.display and then R.  Probably necessary to be able to specify a
separate unitwidth for each sizesuffix (eg. for X).

Request to copy an environment into the current environment.

Variant of `.it' for which a line interrupted with \c counts as one
input line.

Make it possible to suppress hyphenation on a word-by-word basis.
(Perhaps store hyphenation flags in tfont.)

Possibly allow multiple simultaneous input line traps.

Unpaddable, breakable space escape sequence.

Support hanging punctuation.

In justified text, if the last line of a paragraph is only a little
bit short it might be desirable to justify the line.  Allow the user
control over this.

Have a blank line macro like the end macro.  When a blank line macro
has been set, then a blank line causes the blank line macro to be
called rather than doing the equivalent of .sp.

The pm request could print where the macro was defined.  Also could
optionally print the contents of a macro.

Provide some way to round numbers to multiples of the current
horizontal or vertical resolution.

Better string-processing support (substring, length, search).

Generalized ligatures.

Provide some way for a macro to tell whether it was called with `'' or
`.'.  This would be useful for implementing a tracing macro package.

Request to remove an environment. (Maintain a count of the references
to the environment from the environment table, environment dictionary
or environment stack.)

Perhaps in the nr request a leading `-' should only be recognized as a
decrement when it's at the same input level as the request.

Don't ever change a charinfo.  Create new variants instead and chain
them together.

Make it possible to tr characters onto \~.

Unix troff appears to read the first character of a request name in
copy mode.  Should we do the same?

Number register giving name of end macro.

More thorough range checking.

Provide syntax for octal and hexadecimal numeric constants.  Perhaps
o#100 and x#7f as per Scheme.  Or perhaps PostScript 16#7f.  Ambiguity
between whether `c' is treated as digit or scaling indicator.

Request to return from a macro (ie ignore the rest of the current
input level).
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Import OpenBSD 3.3 source repository from CTM 3132 the first time
This opens an OpenBSD-mirabile (aka MirBSD) repository.

### MirBSD is:
# Copyright (c) 1982-2003 by Thorsten "mirabile" Glaser <x86@@ePost.de>
# Copyright © 1968-2003  The authors of And contributors to UNIX®, the
#       C Language, BSD/Berkeley Unix; 386BSD, NetBSD 1.1 and OpenBSD.
#
# Anyone who obtained a copy of this work is hereby permitted to freely use,
# distribute, modify, merge, sublicence, give away or sell it as long as the
# authors are given due credit and the following notice is retained:
#
# This work is provided "as is", with no explicit or implicit warranty what-
# soever. Use it only at your own risk. In no event may an author or contri-
# butor be held liable for any damage, directly or indirectly, that origina-
# ted through or is caused by creation or modification of this work.

MirBSD is my private tree. MirBSD does not differ very much from OpenBSD
and intentionally tracks OpenBSD. That's why it _is_ OpenBSD, just not the
official one. It's like with DarrenBSD.

At time of this writing, no advertising for MirBSD must be done,
because the advertising clause has not yet been sorted out.

http://templeofhate.com/tglaser/MirBSD/index.php
@
text
@@
