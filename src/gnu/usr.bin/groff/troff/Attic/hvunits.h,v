head	1.2;
access;
symbols
	cvs-200406091940:1.1.1.1
	cvs-200405160640:1.1.1.1
	cvs-200401271800:1.1.1.1
	cvs-200401261630:1.1.1.1
	cvs-200401021645:1.1.1.1
	cvs-200312222040:1.1.1.1
	cvs-200310020700:1.1.1.1
	cvs-200309271030:1.1.1.1
	cvs-200309251530:1.1.1.1
	cvs-200308302005:1.1.1.1
	cvs-200308171200:1.1.1.1
	ctm-3496:1.1.1.1
	ctm-3449:1.1.1.1
	ctm-3437:1.1.1.1
	cvs-200307191805:1.1.1.1
	ctm-3425:1.1.1.1
	cvs-200307091500:1.1.1.1
	ctm-3389:1.1.1.1
	cvs-200306291430:1.1.1.1
	ctm-3341:1.1.1.1
	cvs-200306082100:1.1.1.1
	ctm-3316:1.1.1.1
	ctm-3272:1.1.1.1
	ctm-3264:1.1.1.1
	cvs-200305071630:1.1.1.1
	MIRBSD_4:1.1.1.1
	ctm-3203:1.1.1.1
	cvs-20030410-1130:1.1.1.1
	ctm-3155:1.1.1.1
	ctm-3132:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.2
date	2003.05.16.17.08.42;	author tg;	state dead;
branches;
next	1.1;

1.1
date	2003.03.22.17.42.01;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.03.22.17.42.01;	author tg;	state Exp;
branches;
next	;


desc
@@


1.2
log
@remove GNU groff - tree cleanup
we don't really need it; unix nroff fits us well enough, and for
the pre-formatted man pages, we can simply grab them from openbsd

someone wanna make a port?
@
text
@// -*- C++ -*-
/* Copyright (C) 1989, 1990, 1991, 1992 Free Software Foundation, Inc.
     Written by James Clark (jjc@@jclark.com)

This file is part of groff.

groff is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free
Software Foundation; either version 2, or (at your option) any later
version.

groff is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or
FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
for more details.

You should have received a copy of the GNU General Public License along
with groff; see the file COPYING.  If not, write to the Free Software
Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA. */


class vunits {
  int n;
public:
  vunits();
  vunits(units);
  units to_units();
  int is_zero();
  vunits& operator+=(const vunits&);
  vunits& operator-=(const vunits&);
  friend inline vunits scale(vunits n, units x, units y); // scale n by x/y
  friend inline vunits scale(vunits n, vunits x, vunits y);
  friend inline vunits operator +(const vunits&, const vunits&);
  friend inline vunits operator -(const vunits&, const vunits&);
  friend inline vunits operator -(const vunits&);
  friend inline int operator /(const vunits&, const vunits&);
  friend inline vunits operator /(const vunits&, int);
  friend inline vunits operator *(const vunits&, int);
  friend inline vunits operator *(int, const vunits&);
  friend inline int operator <(const vunits&, const vunits&);
  friend inline int operator >(const vunits&, const vunits&);
  friend inline int operator <=(const vunits&, const vunits&);
  friend inline int operator >=(const vunits&, const vunits&);
  friend inline int operator ==(const vunits&, const vunits&);
  friend inline int operator !=(const vunits&, const vunits&);
};

extern vunits V0;


class hunits {
  int n;
public:
  hunits();
  hunits(units);
  units to_units();
  int is_zero();
  hunits& operator+=(const hunits&);
  hunits& operator-=(const hunits&);
  friend inline hunits scale(hunits n, units x, units y); // scale n by x/y
  friend inline hunits scale(hunits n, double x);
  friend inline hunits operator +(const hunits&, const hunits&);
  friend inline hunits operator -(const hunits&, const hunits&);
  friend inline hunits operator -(const hunits&);
  friend inline int operator /(const hunits&, const hunits&);
  friend inline hunits operator /(const hunits&, int);
  friend inline hunits operator *(const hunits&, int);
  friend inline hunits operator *(int, const hunits&);
  friend inline int operator <(const hunits&, const hunits&);
  friend inline int operator >(const hunits&, const hunits&);
  friend inline int operator <=(const hunits&, const hunits&);
  friend inline int operator >=(const hunits&, const hunits&);
  friend inline int operator ==(const hunits&, const hunits&);
  friend inline int operator !=(const hunits&, const hunits&);
};

extern hunits H0;

extern int get_vunits(vunits *, unsigned char si);
extern int get_hunits(hunits *, unsigned char si);
extern int get_vunits(vunits *, unsigned char si, vunits prev_value);
extern int get_hunits(hunits *, unsigned char si, hunits prev_value);

inline vunits:: vunits() : n(0)
{
}

inline units vunits::to_units()
{
  return n*vresolution;
}

inline int vunits::is_zero()
{
  return n == 0;
}

inline vunits operator +(const vunits & x, const vunits & y)
{
  vunits r;
  r = x;
  r.n += y.n;
  return r;
}

inline vunits operator -(const vunits & x, const vunits & y)
{
  vunits r;
  r = x;
  r.n -= y.n;
  return r;
}

inline vunits operator -(const vunits & x)
{
  vunits r;
  r.n = -x.n;
  return r;
}

inline int operator /(const vunits & x, const vunits & y)
{
  return x.n/y.n;
}

inline vunits operator /(const vunits & x, int n)
{
  vunits r;
  r = x;
  r.n /= n;
  return r;
}

inline vunits operator *(const vunits & x, int n)
{
  vunits r;
  r = x;
  r.n *= n;
  return r;
}

inline vunits operator *(int n, const vunits & x)
{
  vunits r;
  r = x;
  r.n *= n;
  return r;
}

inline int operator <(const vunits & x, const vunits & y)
{
  return x.n < y.n;
}

inline int operator >(const vunits & x, const vunits & y)
{
  return x.n > y.n;
}

inline int operator <=(const vunits & x, const vunits & y)
{
  return x.n <= y.n;
}

inline int operator >=(const vunits & x, const vunits & y)
{
  return x.n >= y.n;
}

inline int operator ==(const vunits & x, const vunits & y)
{
  return x.n == y.n;
}

inline int operator !=(const vunits & x, const vunits & y)
{
  return x.n != y.n;
}


inline vunits& vunits::operator+=(const vunits & x)
{
  n += x.n;
  return *this;
}

inline vunits& vunits::operator-=(const vunits & x)
{
  n -= x.n;
  return *this;
}

inline hunits:: hunits() : n(0)
{
}

inline units hunits::to_units()
{
  return n*hresolution;
}

inline int hunits::is_zero()
{
  return n == 0;
}

inline hunits operator +(const hunits & x, const hunits & y)
{
  hunits r;
  r = x;
  r.n += y.n;
  return r;
}

inline hunits operator -(const hunits & x, const hunits & y)
{
  hunits r;
  r = x;
  r.n -= y.n;
  return r;
}

inline hunits operator -(const hunits & x)
{
  hunits r;
  r = x;
  r.n = -x.n;
  return r;
}

inline int operator /(const hunits & x, const hunits & y)
{
  return x.n/y.n;
}

inline hunits operator /(const hunits & x, int n)
{
  hunits r;
  r = x;
  r.n /= n;
  return r;
}

inline hunits operator *(const hunits & x, int n)
{
  hunits r;
  r = x;
  r.n *= n;
  return r;
}

inline hunits operator *(int n, const hunits & x)
{
  hunits r;
  r = x;
  r.n *= n;
  return r;
}

inline int operator <(const hunits & x, const hunits & y)
{
  return x.n < y.n;
}

inline int operator >(const hunits & x, const hunits & y)
{
  return x.n > y.n;
}

inline int operator <=(const hunits & x, const hunits & y)
{
  return x.n <= y.n;
}

inline int operator >=(const hunits & x, const hunits & y)
{
  return x.n >= y.n;
}

inline int operator ==(const hunits & x, const hunits & y)
{
  return x.n == y.n;
}

inline int operator !=(const hunits & x, const hunits & y)
{
  return x.n != y.n;
}


inline hunits& hunits::operator+=(const hunits & x)
{
  n += x.n;
  return *this;
}

inline hunits& hunits::operator-=(const hunits & x)
{
  n -= x.n;
  return *this;
}

inline hunits scale(hunits n, units x, units y)
{
  hunits r;
  r.n = scale(n.n, x, y);
  return r;
}

inline vunits scale(vunits n, units x, units y)
{
  vunits r;
  r.n = scale(n.n, x, y);
  return r;
}

inline vunits scale(vunits n, vunits x, vunits y)
{
  vunits r;
  r.n = scale(n.n, x.n, y.n);
  return r;
}

inline hunits scale(hunits n, double x)
{
  hunits r;
  r.n = int(n.n*x);
  return r;
}

inline units scale(units n, double x)
{
  return int(n*x);
}

inline units points_to_units(units n)
{
  return scale(n, units_per_inch, 72);
}

@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Import OpenBSD 3.3 source repository from CTM 3132 the first time
This opens an OpenBSD-mirabile (aka MirBSD) repository.

### MirBSD is:
# Copyright (c) 1982-2003 by Thorsten "mirabile" Glaser <x86@@ePost.de>
# Copyright © 1968-2003  The authors of And contributors to UNIX®, the
#       C Language, BSD/Berkeley Unix; 386BSD, NetBSD 1.1 and OpenBSD.
#
# Anyone who obtained a copy of this work is hereby permitted to freely use,
# distribute, modify, merge, sublicence, give away or sell it as long as the
# authors are given due credit and the following notice is retained:
#
# This work is provided "as is", with no explicit or implicit warranty what-
# soever. Use it only at your own risk. In no event may an author or contri-
# butor be held liable for any damage, directly or indirectly, that origina-
# ted through or is caused by creation or modification of this work.

MirBSD is my private tree. MirBSD does not differ very much from OpenBSD
and intentionally tracks OpenBSD. That's why it _is_ OpenBSD, just not the
official one. It's like with DarrenBSD.

At time of this writing, no advertising for MirBSD must be done,
because the advertising clause has not yet been sorted out.

http://templeofhate.com/tglaser/MirBSD/index.php
@
text
@@
