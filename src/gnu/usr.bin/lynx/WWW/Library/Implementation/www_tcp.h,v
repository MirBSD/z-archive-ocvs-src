head	1.4;
access;
symbols
	lynx-2_8_6dev10:1.1.2.1
	FSF:1.1.2
	tg-mergetmp-mirosx-1:1.1.3.3
	tg-mergefixes-1-branch:1.1.3.3.0.8
	tg-mergefixes-1-base:1.1.3.3
	MIROS_X:1.1.3.3.0.6
	MIROS_X_BASE:1.1.3.3
	MIRBSD_XP_MIRPPC:1.1.3.3.0.4
	lynx-2_8_6dev_7b:1.1.3.3
	lynx-2_8_6dev_6:1.1.3.3
	MIRBSD_XP_SPARC_BASE:1.1.3.3
	MIRBSD_XP_SPARC:1.1.3.3.0.2
	lynx-2_8_6dev_5-iz2:1.1.3.3
	lynx-2_8_6dev_5:1.1.3.3
	cvs-200406091940:1.1.1.1
	MIRBSD_7quater:1.3
	cvs-200405160640:1.1.1.1
	lynx-2_8_6dev2:1.1.3.2
	lynx-2_8_5:1.1.3.2
	cvs-200401271800:1.1.1.1
	cvs-200401261630:1.1.1.1
	lynx_2-8-5_dev17d:1.1.3.1
	cvs-200401021645:1.1.1.1
	MIRBSD_7_ALPHA:1.3.0.6
	MIRBSD_7:1.3.0.4
	cvs-200312222040:1.1.1.1
	MIRBSD_7ter:1.3
	MIRBSD_7_DEV:1.3.0.2
	cvs-200310020700:1.1.1.1
	lynx_2-8-5_dev16c:1.1.3.1
	cvs-200309271030:1.1.1.1
	cvs-200309251530:1.1.1.1
	lynx_2-8-5_dev16:1.1.3.1
	tg:1.1.3
	cvs-200308302005:1.1.1.1
	cvs-200308171200:1.1.1.1
	ctm-3496:1.1.1.1
	ctm-3449:1.1.1.1
	ctm-3437:1.1.1.1
	cvs-200307191805:1.1.1.1
	ctm-3425:1.1.1.1
	cvs-200307091500:1.1.1.1
	VENDOR_LYNX_285dev16:1.3
	ctm-3389:1.1.1.1
	cvs-200306291430:1.1.1.1
	ctm-3341:1.1.1.1
	MIRBSD_5:1.1.1.1
	cvs-200306082100:1.1.1.1
	ctm-3316:1.1.1.1
	ctm-3272:1.1.1.1
	ctm-3264:1.1.1.1
	cvs-200305071630:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.4
date	2005.01.03.00.45.51;	author tg;	state Exp;
branches;
next	1.3;

1.3
date	2003.07.07.18.58.05;	author tg;	state Exp;
branches;
next	1.2;

1.2
date	2003.07.07.18.49.11;	author tg;	state dead;
branches;
next	1.1;

1.1
date	2003.05.07.17.30.03;	author tg;	state Exp;
branches
	1.1.1.1
	1.1.2.1
	1.1.3.1;
next	;

1.1.1.1
date	2003.05.07.17.30.03;	author tg;	state Exp;
branches;
next	;

1.1.2.1
date	2005.01.03.00.27.05;	author tg;	state Exp;
branches;
next	;

1.1.3.1
date	2003.09.17.14.19.53;	author tg;	state Exp;
branches;
next	1.1.3.2;

1.1.3.2
date	2004.02.08.13.06.04;	author tg;	state Exp;
branches;
next	1.1.3.3;

1.1.3.3
date	2004.07.15.15.47.38;	author tg;	state Stab;
branches;
next	;


desc
@@


1.4
log
@soft merge
@
text
@/*                System dependencies in the W3 library
                                   SYSTEM DEPENDENCIES

   System-system differences for TCP include files and macros.  This
   file includes for each system the files necessary for network and
   file I/O.  It should be used in conjunction with HTUtils.h to help
   ensure portability across as many platforms and flavors of platforms
   as possible.

  AUTHORS

  TBL                Tim Berners-Lee, W3 project, CERN, <timbl@@info.cern.ch>
  EvA                     Eelco van Asperen <evas@@cs.few.eur.nl>
  MA                      Marc Andreessen NCSA
  AT                      Aleksandar Totic <atotic@@ncsa.uiuc.edu>
  SCW                     Susan C. Weber <sweber@@kyle.eitech.com>

  HISTORY:
  22 Feb 91               Written (TBL) as part of the WWW library.
  16 Jan 92               PC code from EvA
  22 Apr 93               Merged diffs bits from xmosaic release
  29 Apr 93               Windows/NT code from SCW
  20 May 94		  A.Harper Add support for VMS CMU TCP/IP transport
   3 Oct 94		  A.Harper Add support for VMS SOCKETSHR/NETLIB
  15 Jul 95               S. Bjorndahl Gnu C for VMS Globaldef/ref support

*/

#ifndef TCP_H
#define TCP_H

/*

Default values

   These values may be reset and altered by system-specific sections
   later on.  there are also a bunch of defaults at the end .

 */
/* Default values of those: */
#define NETCLOSE close		/* Routine to close a TCP-IP socket         */
#define NETREAD  HTDoRead	/* Routine to read from a TCP-IP socket     */
#define NETWRITE write		/* Routine to write to a TCP-IP socket      */
#define SOCKET_READ read	/* normal socket read routine */
#define IOCTL ioctl		/* normal ioctl routine for sockets */
#define SOCKET_ERRNO errno	/* normal socket errno */

/* Unless stated otherwise, */
#define SELECT			/* Can handle >1 channel.               */
#define GOT_SYSTEM		/* Can call shell with string           */

#ifdef UNIX
#define GOT_PIPE
#endif /* UNIX */

#define INVSOC (-1)		/* Unix invalid socket */
		/* NB: newer libwww has something different for Windows */

#ifndef VMS

#include <sys/types.h>

#if defined(__BORLANDC__)
#define DECL_ERRNO
#endif

#if defined(__DJGPP__) || defined(__BORLANDC__)
#undef HAVE_DIRENT_H
#define HAVE_DIRENT_H
#undef HAVE_SYS_FILIO_H
#endif /* DJGPP or __BORLANDC__ */

#if defined(_MSC_VER)
#undef HAVE_DIRENT_H
#define HAVE_DIRENT_H
#undef HAVE_SYS_FILIO_H
#endif /* _MSC_VER */

#ifdef HAVE_DIRENT_H
# include <dirent.h>
# define D_NAMLEN(dirent) strlen((dirent)->d_name)
# define STRUCT_DIRENT struct dirent
#else
# define D_NAMLEN(dirent) (dirent)->d_namlen
# define STRUCT_DIRENT struct direct
# ifdef HAVE_SYS_NDIR_H
#  include <sys/ndir.h>
# endif
# ifdef HAVE_SYS_DIR_H
#  include <sys/dir.h>
# endif
# ifdef HAVE_NDIR_H
#  include <ndir.h>
# endif
#endif /* HAVE_DIRENT_H */
#endif /* !VMS */

#ifdef TIME_WITH_SYS_TIME
# include <sys/time.h>
# include <time.h>
#else
# ifdef HAVE_SYS_TIME_H
#  include <sys/time.h>
# else
#  include <time.h>
# endif
#endif

#if defined(_AIX) && !defined(AIX)
#define AIX
#endif /* _AIX */

#ifndef __CYGWIN__
#ifdef WIN_EX
#define HAVE_FTIME 1
#define HAVE_SYS_TIMEB_H 1
#endif
#endif /* __CYGWIN__ */

#ifdef HAVE_FCNTL_H
#include <fcntl.h>
#else
#ifdef HAVE_SYS_FCNTL_H
#include <sys/fcntl.h>
#endif
#endif

#ifdef HAVE_STRING_H
#include <string.h>		/* For bzero etc */
#endif /* HAVE_STRING_H */

/*

  MACROS FOR CONVERTING CHARACTERS

 */
#ifndef TOASCII
#ifdef EBCDIC			/* S/390 -- gil -- 1327 */

extern char un_IBM1047[];
extern unsigned char IBM1047[];

/* For debugging
#include <assert.h>
#define   TOASCII(c) (assert((c)>=0 && (c)<256), un_IBM1047[c])
*//* for production */
#define   TOASCII(c) (un_IBM1047[c])

#define FROMASCII(c) (IBM1047[c])

#else /* EBCDIC */

#if '0' != 48
error Host character set is not ASCII.
#endif

#define TOASCII(c) (c)
#define FROMASCII(c) (c)

#endif				/* EBCDIC */
#endif				/* !TOASCII */

/* convert a char to an unsigned, needed if we have signed characters for ctype.h */
#define UCH(ch) ((unsigned char)(ch))

/*
IBM-PC running Windows NT

	These parameters providede by  Susan C. Weber <sweber@@kyle.eitech.com>.
*/

#ifdef _WINDOWS

#ifndef _WINDOWS_NSL
#define _WINDOWS_NSL
#endif

#include <fcntl.h>		/* For HTFile.c */
#include <sys/types.h>		/* For HTFile.c */
#include <sys/stat.h>		/* For HTFile.c */
#undef NETREAD
#undef NETWRITE
#undef NETCLOSE
#undef IOCTL
extern int ws_netread(int fd, char *buf, int len);

#define NETREAD(s,b,l)  ws_netread((s),(b),(l))		/* 1997/11/06 (Thu) */
#define NETWRITE(s,b,l) send((s),(b),(l),0)
#define NETCLOSE(s)     closesocket(s)
#define IOCTL				ioctlsocket
#include <io.h>
#include <string.h>
#include <process.h>
#include <time.h>
#include <errno.h>
#include <direct.h>

#ifdef ENABLE_IPV6
#undef  USE_WINSOCK2_H
#define USE_WINSOCK2_H

/* Avoid including <winsock*.h> in <windows.h> */
#ifndef WIN32_LEAN_AND_MEAN
#error Define "WIN32_LEAN_AND_MEAN" in your makefile
#endif

#if defined(_MSC_VER) && (!defined(_WIN32_WINNT) || _WIN32_WINNT < 0x0501)
/*
 * Needed to pull in the real getaddrinfo() and not the inline version
 * in <wspiAPI.H> which doesn't support IPv6 (IPv4 only). <wspiAPI.H> is
 * included from <ws2tcpip.h> for <= 0x0500 SDKs.
 */
#undef  _WIN32_WINNT
#define _WIN32_WINNT 0x0501
#endif
#endif /* ENABLE_IPV6 */

#ifdef USE_WINSOCK2_H
#include <winsock2.h>		/* normally included in windows.h */

#ifdef ENABLE_IPV6
#include <ws2tcpip.h>
#endif

#undef EINPROGRESS
#undef EALREADY
#undef EISCONN
#undef EINTR
#undef EAGAIN
#undef ENOTCONN
#undef ECONNRESET
#undef ETIMEDOUT

#define EINPROGRESS  WSAEINPROGRESS
#define EALREADY     WSAEALREADY
#define EISCONN      WSAEISCONN
#define EINTR        WSAEINTR
/* fine EAGAIN       WSAEAGAIN */
#define ENOTCONN     WSAENOTCONN
#define ECONNRESET   WSAECONNRESET
#define ETIMEDOUT    WSAETIMEDOUT

#else /* USE_WINSOCK2_H */

#include <winsock.h>

#if defined(_MSC_VER) || defined(__MINGW32__)
#undef EINTR
#undef EAGAIN
#endif /* _MSC_VER */

#define EINPROGRESS          (WSABASEERR+36)
#define EALREADY             (WSABASEERR+37)
#define EISCONN              (WSABASEERR+56)
#define EINTR                (WSABASEERR+4)
#define EAGAIN               (WSABASEERR+1002)
#define ENOTCONN             (WSABASEERR+57)
#define ECONNRESET           (WSABASEERR+54)
#define ETIMEDOUT             WSAETIMEDOUT

#endif /* USE_WINSOCK2_H */

#undef  SOCKET_ERRNO
#define SOCKET_ERRNO          WSAGetLastError()

#define INCLUDES_DONE
#define TCP_INCLUDES_DONE
#endif /* WINDOWS */

/*

VAX/VMS

   Under VMS, there are many versions of TCP-IP. Define one if you do
   not use Digital's UCX product:

  UCX                     DEC's "Ultrix connection" (default)
  CMU_TCP                 Available via FTP from sacusr.mp.usbr.gov
  SOCKETSHR		  Eckhart Meyer's interface to NETLIB
  WIN_TCP                 From Wollongong, now GEC software.
  MULTINET                From SRI, became TGV, then Cisco.
  DECNET                  Cern's TCP socket emulation over DECnet

   The last three do not interfere with the
   unix i/o library, and so they need special calls to read, write and
   close sockets.  In these cases the socket number is a VMS channel
   number, so we make the @@@@@@ HORRIBLE @@@@@@ assumption that a channel
   number will be greater than 10 but a unix file descriptor less than
   10.  It works.

 */
#ifdef VMS

#ifdef UCX
#undef IOCTL
#define IOCTL HTioctl
#endif /* UCX */

#ifdef WIN_TCP
#undef SOCKET_READ
#undef NETWRITE
#undef NETCLOSE
#define SOCKET_READ(s,b,l)  ((s)>10 ? netread((s),(b),(l)) : read((s),(b),(l)))
#define NETWRITE(s,b,l) ((s)>10 ? netwrite((s),(b),(l)) : write((s),(b),(l)))
#define NETCLOSE(s)     ((s)>10 ? netclose(s) : close(s))
#undef IOCTL
#define IOCTL(a,b,c) -1		/* disables ioctl function            */
#define NO_IOCTL		/* flag to check if ioctl is disabled */
#endif /* WIN_TCP */

#ifdef CMU_TCP
#undef SOCKET_READ
#undef NETREAD
#undef NETWRITE
#undef NETCLOSE
#define SOCKET_READ(s,b,l) (cmu_get_sdc((s)) != 0 ? cmu_read((s),(b),(l)) : read((s),(b),(l)))
#define NETREAD(s,b,l) (cmu_get_sdc((s)) != 0 ? HTDoRead((s),(b),(l)) : read((s),(b),(l)))
#define NETWRITE(s,b,l) (cmu_get_sdc((s)) != 0 ? cmu_write((s),(b),(l)) : write((s),(b),(l)))
#define NETCLOSE(s) (cmu_get_sdc((s)) != 0 ? cmu_close((s)) : close((s)))
#endif /* CMU_TCP */

#ifdef MULTINET
#undef NETCLOSE
#undef SOCKET_READ
#undef NETWRITE
#undef IOCTL
#undef SOCKET_ERRNO
/*
 *  Delete these socket_foo() prototypes as MultiNet adds them
 *  to it's socket library headers.  Compiler warnings due to
 *  the absence of arguments in the generic prototypes here will
 *  include the names of those which can be deleted. - FM
 */
extern int socket_read();
extern int socket_write();
extern int socket_close();
extern int socket_ioctl();

#define SOCKET_READ(s,b,l)  ((s)>10 ? socket_read((s),(b),(l)) : \
				read((s),(b),(l)))
#define NETWRITE(s,b,l) ((s)>10 ? socket_write((s),(b),(l)) : \
                                write((s),(b),(l)))
#define NETCLOSE(s)     ((s)>10 ? socket_close(s) : close(s))
#define IOCTL socket_ioctl
#define SOCKET_ERRNO socket_errno
#endif /* MULTINET */

#ifdef SOCKETSHR_TCP
#undef SOCKET_READ
#undef NETREAD
#undef NETWRITE
#undef NETCLOSE
#undef IOCTL
#define SOCKET_READ(s,b,l) (si_get_sdc((s)) != 0 ? si_read((s),(b),(l)) : \
                                read((s),(b),(l)))
#define NETREAD(s,b,l) (si_get_sdc((s)) != 0 ? HTDoRead((s),(b),(l)) : \
                                read((s),(b),(l)))
#define NETWRITE(s,b,l) (si_get_sdc((s)) != 0 ? si_write((s),(b),(l)) : \
                                write((s),(b),(l)))
#define NETCLOSE(s) (si_get_sdc((s)) != 0 ? si_close((s)) : close((s)))
#define IOCTL si_ioctl
#endif /* SOCKETSHR_TCP */

#include <string.h>

#include <file.h>
#include <stat.h>
#include <unixio.h>
#include <unixlib.h>

#define INCLUDES_DONE

#ifdef MULTINET			/* Include from standard Multinet directories */
/*
 *  Delete any of these multinet_foo() and associated prototypes
 *  as MultiNet adds them to its socket library headers.  You'll
 *  get compiler warnings about them, due the absence of arguments
 *  in the generic prototyping here, and the warnings will include
 *  the names of the functions whose prototype entries can be
 *  deleted here. - FM
 */
extern int multinet_accept();
extern int multinet_bind();
extern int multinet_connect();
extern int multinet_gethostname();
extern int multinet_getsockname();
extern unsigned short multinet_htons(unsigned short __val);
extern unsigned short multinet_ntohs(unsigned short __val);
extern int multinet_listen();
extern int multinet_select();
extern int multinet_socket();
extern char *vms_errno_string();

#ifndef __SOCKET_TYPEDEFS
#define __SOCKET_TYPEDEFS 1
#endif /* !__SOCKET_TYPEDEFS */
#include <time.h>
#include <types.h>
#ifdef __TIME_T
#undef  __TYPES
#define __TYPES 1
#define __TYPES_LOADED 1
#endif /* __TIME_T */
#ifdef __SOCKET_TYPEDEFS
#undef __SOCKET_TYPEDEFS
#endif /* __SOCKET_TYPEDEFS */
#include "multinet_root:[multinet.include.sys]types.h"
#ifndef __SOCKET_TYPEDEFS
#define __SOCKET_TYPEDEFS 1
#endif /* !__SOCKET_TYPEDEFS */
#include "multinet_root:[multinet.include]errno.h"
#ifdef __TYPES
#undef  __TIME_T
#define __TIME_T 1
#endif /* __TYPE */
#ifdef __TIME_LOADED
#undef  __TIME
#define __TIME 1		/* to avoid double definitions in in.h */
#endif /* __TIME_LOADED */
#include "multinet_root:[multinet.include.sys]time.h"
#define MULTINET_NO_PROTOTYPES	/* DECC is compatible-but-different */
#include "multinet_root:[multinet.include.sys]socket.h"
#undef MULTINET_NO_PROTOTYPES
#include "multinet_root:[multinet.include.netinet]in.h"
#include "multinet_root:[multinet.include.arpa]inet.h"
#include "multinet_root:[multinet.include]netdb.h"
#include "multinet_root:[multinet.include.sys]ioctl.h"
#define TCP_INCLUDES_DONE
/*
 *  Uncomment this if you get compiler messages
 *  about struct timeval having no linkage. - FM
 */
/*#define NO_TIMEVAL*/
#ifdef NO_TIMEVAL
struct timeval {
    long tv_sec;		/* seconds since Jan. 1, 1970 */
    long tv_usec;		/* microseconds */
};
#endif /* NO_TIMEVAL */
#endif /* MULTINET */

#ifdef DECNET
#include <types.h>
#include <errno.h>
#include <time.h>
#include <types.h>		/* for socket.h */
#include <socket.h>
#include <dn>
#include <dnetdb>
/* #include "vms.h" */
#define TCP_INCLUDES_DONE
#endif /* DECNET */

#ifdef UCX
#include <types.h>
#include <errno.h>
#include <time.h>
#include <socket.h>
#include <in.h>
#include <inet.h>
#if defined(TCPWARE) && !defined(__DECC)
#include "tcpware_include:netdb.h"
#include "tcpware_include:ucx$inetdef.h"
#else
#include <netdb.h>
#include <ucx$inetdef.h>
#endif /* TCPWARE */
#define TCP_INCLUDES_DONE
#endif /* UCX */

#ifdef CMU_TCP
#include <types.h>
#include <errno.h>
#include "cmuip_root:[syslib]time.h"
#include "cmuip_root:[syslib]socket.h"
#include <in.h>
#include <inet.h>
#include <netdb.h>
#include "cmuip_root:[syslib]ioctl.h"
#define TCP_INCLUDES_DONE
#endif /* CMU_TCP */

#ifdef SOCKETSHR_TCP
#include <types.h>
#include <errno.h>
#include <time.h>
#include <socket.h>
#include <in.h>
#include <inet.h>
#include <netdb.h>
#include "socketshr_library:socketshr.h"
#include "socketshr_library:ioctl.h"
#define TCP_INCLUDES_DONE
#endif /* SOCKETSHR_TCP */

#ifdef WIN_TCP
#include <types.h>
#include <errno.h>
#include <time.h>
#include <socket.h>
#include <in.h>
#include <inet.h>
#include <netdb.h>
#ifndef NO_IOCTL
#include <ioctl.h>
#endif /* !NO_IOCTL */
#define TCP_INCLUDES_DONE
#endif /* WIN_TCP */

#ifndef TCP_INCLUDES_DONE
#include <types.h>
#include <errno.h>
#include <time.h>
#ifdef VMS_SOCKET_HEADERS
/*
 *  Not all versions of VMS have the full set of headers
 *  for socket library functions, because the TCP/IP
 *  packages were layered products.  If we want these
 *  specifically, instead of those for the above packages,
 *  the module should be compiled with VMS_SOCKET_HEADERS
 *  defined instead of layered product definitions, above.
 *  If the module is not using socket library functions,
 *  none of the definitions need be used, and we include
 *  only the above three headers. - FM
 */
#include <socket.h>
#include <in.h>
#include <inet.h>
#include <netdb.h>
#include <ioctl.h>
#endif /* VMS_SOCKET_HEADERS */
#define TCP_INCLUDES_DONE
#endif /* !TCP_INCLUDES_DONE */

/*

   On VMS machines, the linker needs to be told to put global data sections into
 a data
   segment using these storage classes. (MarkDonszelmann)

 */
#if defined(VAXC) && !defined(__DECC)
#define GLOBALDEF globaldef
#define GLOBALREF globalref
#else
#ifdef __GNUC__			/* this added by Sterling Bjorndahl */
#define GLOBALREF_IS_MACRO 1
#define GLOBALDEF_IS_MACRO 1
#include <gnu_hacks.h>		/* defines GLOBALREF and GLOBALDEF for GNUC on VMS */
#endif /* __GNUC__ */
#endif /* VAXC && !DECC */

#include <perror.h>
#ifndef errno
extern int errno;
#endif /* !errno */

#endif /* VMS */

/*
 * On non-VMS machines and for DECC on VMS, the GLOBALDEF and GLOBALREF
 * storage types default to normal C storage types.
 */
#ifndef GLOBALREF
#define GLOBALDEF
#define GLOBALREF extern
#endif /* !GLOBALREF */

#ifdef __DJGPP__
#undef SELECT
#define TCP_INCLUDES_DONE
#undef  IOCTL
#define IOCTL(s,cmd,arg) ioctlsocket(s,cmd,(char*)(arg))
#define DECL_ERRNO
#include <errno.h>
#include <sys/types.h>
#include <io.h>
#include <sys/ioctl.h>
#include <sys/socket.h>
#include <arpa/inet.h>
#include <tcp.h>
#ifdef word
#undef word
#endif /* word */
#define select select_s

#undef NETWRITE
#define NETWRITE write_s
#undef NETREAD
#define NETREAD read_s
#undef NETCLOSE
#define NETCLOSE close_s
#ifdef UNIX
#undef UNIX
#endif /* UNIX */
#ifdef HAVE_GETTEXT
#define gettext gettext__
#endif
#if !defined(NCURSES) && !defined(USE_SLANG)
#define HAVE_CBREAK 1
#endif /* !NCURSES && !USE_SLANG */
#if defined(USE_SLANG) && !defined(NO_DJ_KEYHANDLER) && defined(HAVE_CONFIG_H)
#define DJGPP_KEYHANDLER
#endif /* USE_SLANG && !NO_DJ_KEYHANDLER  && HAVE_CONFIG_H */
#endif /* DJGPP */

#ifdef HAVE_UNISTD_H
#include <unistd.h>
#endif /* HAVE_UNISTD_H */

#ifdef HAVE_SYS_FILIO_H
#include <sys/filio.h>
#endif /* HAVE_SYS_FILIO_H */

#if !defined(HAVE_LSTAT) && !defined(lstat)
#define lstat(path,block) stat(path,block)
#endif

#if defined(DECL_ERRNO) && !defined(errno)
extern int errno;
#endif /* DECL_ERRNO */

/*
Regular BSD unix versions
=========================
   These are a default unix where not already defined specifically.
 */
#ifndef INCLUDES_DONE
#include <sys/types.h>
#ifdef HAVE_STRING_H
#include <string.h>
#endif /* HAVE_STRING_H */
#include <errno.h>		/* independent */
#ifdef __MVS__			/* S/390 -- gil -- 1361 */
#include <time.h>
#endif /* __MVS__ */
#ifdef SCO
#include <sys/timeb.h>
#include <time.h>
#endif /* SCO */
#if defined(AIX) || defined(SVR4)
#include <time.h>
#endif /* AIX || SVR4 */
#include <sys/time.h>		/* independent */
#include <sys/stat.h>
#ifndef __MVS__			/* S/390 -- gil -- 1373 */
#include <sys/param.h>
#endif /* __MVS__ */
#include <sys/file.h>		/* For open() etc */

#if defined(NeXT) || defined(sony_news)
#ifndef mode_t
typedef unsigned short mode_t;
#endif /* !mode_t */

#endif /* NeXT || sony_news */

#define INCLUDES_DONE
#endif /* Normal includes */

/* FIXME: this should be autoconf'd */
/* Interactive UNIX for i386 and i486 -- Thanks to jeffrey@@itm.itm.org */
#ifdef ISC
#include <net/errno.h>
#include <sys/types.h>
#include <sys/tty.h>
#include <sys/sioctl.h>
#include <sys/bsdtypes.h>
#ifndef MERGE
#define MERGE
#include <sys/pty.h>
#undef MERGE
#else
#include <sys/pty.h>
#endif /* !MERGE */
#ifndef USE_DIRENT
#define USE_DIRENT		/* sys V style directory open */
#endif /* USE_DIRENT */
#include <sys/dirent.h>
#endif /* ISC */

/*	Directory reading stuff - BSD or SYS V
*/
#ifdef HAVE_CONFIG_H

# ifdef HAVE_LIMITS_H
#  include <limits.h>
# endif				/* HAVE_LIMITS_H */
# if !defined(MAXINT) && defined(INT_MAX)
#  define MAXINT INT_MAX
# endif				/* !MAXINT && INT_MAX */

#else

#if !(defined(VM) || defined(VMS) || defined(THINK_C) || defined(PCNFS) || defined(_WINDOWS))
#define DECL_SYS_ERRLIST 1
#endif

#define socklen_t int		/* used for default LY_SOCKLEN definition */

#endif /* !HAVE_CONFIG_H */

#ifdef HAVE_LIBINTL_H
#include <libintl.h>
#endif

#ifdef HAVE_LIBGETTEXT_H
#include <libgettext.h>
#endif

#define N_(s) s

#ifndef HAVE_GETTEXT
#define gettext(s) s
#endif

/*
Defaults
========
  INCLUDE FILES FOR TCP
 */
#ifndef TCP_INCLUDES_DONE
#ifndef NO_IOCTL
#include <sys/ioctl.h>		/* EJB */
#endif /* !NO_IOCTL */
#include <sys/socket.h>
#include <netinet/in.h>
#ifdef HAVE_ARPA_INET_H
#include <arpa/inet.h>		/* Must be after netinet/in.h */
#endif
#include <netdb.h>
#endif /* TCP includes */

typedef unsigned short PortNumber;

#ifndef S_ISLNK
#define S_ISLNK(m)	(((m) & S_IFMT) == S_IFLNK)
#endif /* S_ISLNK */

#ifndef S_ISDIR
#define S_ISDIR(m)	(((m) & S_IFMT) == S_IFDIR)
#endif /* S_ISDIR */

#ifndef S_ISREG
#define S_ISREG(m)	(((m) & S_IFMT) == S_IFREG)
#endif /* S_ISREG */

#ifndef S_ISUID
#define S_ISUID  0004000
#endif
#ifndef S_ISGID
#define S_ISGID  0002000
#endif
#ifndef S_ISVTX
#define S_ISVTX  0001000
#endif

#ifndef S_IRWXU
#define S_IRWXU 00700
#endif

#ifndef S_IRUSR
#define S_IRUSR 00400
#endif
#ifndef S_IWUSR
#define S_IWUSR 00200
#endif
#ifndef S_IXUSR
#define S_IXUSR 00100
#endif

#ifndef S_IRWXG
#define S_IRWXG 00070
#endif

#ifndef S_IRGRP
#define S_IRGRP 00040
#endif
#ifndef S_IWGRP
#define S_IWGRP 00020
#endif
#ifndef S_IXGRP
#define S_IXGRP 00010
#endif

#ifndef S_IRWXO
#define S_IRWXO 00007
#endif

#ifndef S_IROTH
#define S_IROTH 00004
#endif
#ifndef S_IWOTH
#define S_IWOTH 00002
#endif
#ifndef S_IXOTH
#define S_IXOTH 00001
#endif

/*

ROUGH ESTIMATE OF MAX PATH LENGTH

*/
#ifndef HT_MAX_PATH
#ifdef MAXPATHLEN
#define HT_MAX_PATH MAXPATHLEN
#else
#ifdef PATH_MAX
#define HT_MAX_PATH PATH_MAX
#else
#define HT_MAX_PATH 1024	/* Any better ideas? */
#endif
#endif
#endif /* HT_MAX_PATH */

#if HT_MAX_PATH < 256
#undef HT_MAX_PATH
#define HT_MAX_PATH 256
#endif

/*
  MACROS FOR MANIPULATING MASKS FOR SELECT()
 */
#ifdef SELECT
#ifndef FD_SET
typedef unsigned int fd_set;

#define FD_SET(fd,pmask) (*(pmask)) |=  (1<<(fd))
#define FD_CLR(fd,pmask) (*(pmask)) &= ~(1<<(fd))
#define FD_ZERO(pmask)   (*(pmask))=0
#define FD_ISSET(fd,pmask) (*(pmask) & (1<<(fd)))
#endif /* !FD_SET */
#endif /* SELECT */

/*
 * Macro for setting errno - only define this if you really can do it.
 */
#if defined(CAN_SET_ERRNO) || (!defined(errno) && (!defined(VMS) || defined(UCX)))
#define set_errno(value) errno = value
#else
#define set_errno(value)	/* we do not know how */
#endif

/*
 * IPv6 support
 */
#if defined(HAVE_GETADDRINFO) && defined(ENABLE_IPV6)
#if defined(HAVE_GAI_STRERROR)
#define INET6
#elif defined(_WINDOWS)
#define INET6
#ifndef WIN_EX
#error Define "WIN_EX" in your makefile.
#endif
#ifndef _MSC_VER		/* MSVC has this inlined in <ws2tcpip.h> */
#undef  gai_strerror
#define gai_strerror(err) w32_strerror (err)
#endif
#endif
#endif /* HAVE_GETADDRINFO && ENABLE_IPV6 */

#ifdef INET6
typedef struct sockaddr_storage SockA;

#ifdef SIN6_LEN
#define SOCKADDR_LEN(soc_address) ((struct sockaddr *)&soc_address)->sa_len
#else
#ifndef SA_LEN
#define SA_LEN(x) (((x)->sa_family == AF_INET6) \
		   ? sizeof(struct sockaddr_in6) \
		   : (((x)->sa_family == AF_INET) \
		      ? sizeof(struct sockaddr_in) \
		      : sizeof(struct sockaddr)))	/* AF_UNSPEC? */
#endif
#define SOCKADDR_LEN(soc_address) SA_LEN((struct sockaddr *)&soc_address)
#endif /* SIN6_LEN */
#else
typedef struct sockaddr_in SockA;

#define SOCKADDR_LEN(soc_address) sizeof(soc_address)
#endif /* INET6 */

#ifndef MAXHOSTNAMELEN
#define MAXHOSTNAMELEN 128	/* Max label is 63. Should handle 2 of those */
#endif /* MAXHOSTNAMELEN */

#endif /* TCP_H */
@


1.3
log
@un-tar the file
>>> lynx2.8.5dev.16.tar.gz
from http://lynx.isc.org/current/

the following files need -kb:
- LYStyle.c
- Xsystem.c
- WWW HTMIME.c
@
text
@d41 6
a46 6
#define NETCLOSE close      /* Routine to close a TCP-IP socket         */
#define NETREAD  HTDoRead       /* Routine to read from a TCP-IP socket     */
#define NETWRITE write      /* Routine to write to a TCP-IP socket      */
#define SOCKET_READ read    /* normal socket read routine */
#define IOCTL ioctl	    /* normal ioctl routine for sockets */
#define SOCKET_ERRNO errno	    /* normal socket errno */
d49 2
a50 2
#define SELECT                  /* Can handle >1 channel.               */
#define GOT_SYSTEM              /* Can call shell with string           */
d56 1
a56 1
#define INVSOC (-1)             /* Unix invalid socket */
d113 1
a113 4
#ifdef __CYGWIN__
#define _WINDOWS_NSL
#define WIN_EX
#else
d129 1
a129 1
#include <string.h>             /* For bzero etc */
d138 1
a138 1
#ifdef EBCDIC  /* S/390 -- gil -- 1327 */
d140 1
a140 1
extern       char un_IBM1047[];
d142 1
d146 1
a146 1
*/ /* for production */
d151 1
a151 1
#else  /* EBCDIC */
d154 1
a154 1
 error Host character set is not ASCII.
d160 2
a161 2
#endif /* EBCDIC */
#endif /* !TOASCII */
d173 2
d176 5
a180 3
#include <fcntl.h>                      /* For HTFile.c */
#include <sys\types.h>                  /* For HTFile.c */
#include <sys\stat.h>                   /* For HTFile.c */
d186 2
a187 1
#define NETREAD(s,b,l)  ws_netread((s),(b),(l))	/* 1997/11/06 (Thu) */
d198 20
d221 4
d243 1
a243 1
#else /* USE_WINSOCK_H */
a245 1
typedef struct sockaddr_in SockA;  /* See netinet/in.h */
d259 3
a261 1
#define ETIMEDOUT             WSAETIMEDOUT	/* 1997/11/10 (Mon) */
d263 1
a263 1
#undef  SOCKET_ERRNO	/* 1997/10/19 (Sun) 18:01:46 */
a265 2
#endif	/* USE_WINSOCK_H */

d268 1
a268 3
#endif  /* WINDOWS */


d307 2
a308 2
#define IOCTL(a,b,c) -1 /* disables ioctl function	      */
#define NO_IOCTL	/* flag to check if ioctl is disabled */
d329 5
a333 5
**  Delete these socket_foo() prototypes as MultiNet adds them
**  to it's socket library headers.  Compiler warnings due to
**  the absence of arguments in the generic prototypes here will
**  include the names of those which can be deleted. - FM
*/
d373 1
a373 1
#ifdef MULTINET  /* Include from standard Multinet directories */
d375 7
a381 7
**  Delete any of these multinet_foo() and associated prototypes
**  as MultiNet adds them to its socket library headers.  You'll
**  get compiler warnings about them, due the absence of arguments
**  in the generic prototyping here, and the warnings will include
**  the names of the functions whose prototype entries can be
**  deleted here. - FM
*/
d418 1
a418 1
#define __TIME 1  /* to avoid double definitions in in.h */
d430 3
a432 3
**  Uncomment this if you get compiler messages
**  about struct timeval having no linkage. - FM
*/
a441 1

d446 1
a446 1
#include <types.h>  /* for socket.h */
a453 1

a470 1

a482 1

d516 10
a525 10
**  Not all versions of VMS have the full set of headers
**  for socket library functions, because the TCP/IP
**  packages were layered products.  If we want these
**  specifically, instead of those for the above packages,
**  the module should be compiled with VMS_SOCKET_HEADERS
**  defined instead of layered product definitions, above.
**  If the module is not using socket library functions,
**  none of the definitions need be used, and we include
**  only the above three headers. - FM
*/
d546 1
a546 1
#ifdef __GNUC__		/* this added by Sterling Bjorndahl */
d549 2
a550 2
#include <gnu_hacks.h>	/* defines GLOBALREF and GLOBALDEF for GNUC on VMS */
#endif  /* __GNUC__ */
d633 2
a634 2
#include <errno.h>          /* independent */
#ifdef __MVS__  /* S/390 -- gil -- 1361 */
d644 1
a644 1
#include <sys/time.h>       /* independent */
d646 1
a646 1
#ifndef __MVS__  /* S/390 -- gil -- 1373 */
d649 1
a649 1
#include <sys/file.h>       /* For open() etc */
d659 1
a659 1
#endif  /* Normal includes */
d677 1
a677 1
#define USE_DIRENT     /* sys V style directory open */
d688 1
a688 1
# endif /* HAVE_LIMITS_H */
d691 1
a691 1
# endif /* !MAXINT && INT_MAX */
d695 1
a695 1
#if !(defined(VM) || defined(VMS) || defined(THINK_C) || defined(PCNFS) || defined(__MINGW32__))
d699 2
d711 1
a711 1
#define N_(s) (s)
d724 1
a724 1
#include <sys/ioctl.h> /* EJB */
d729 1
a729 1
#include <arpa/inet.h>      /* Must be after netinet/in.h */
d732 1
a732 1
#endif  /* TCP includes */
d812 1
a812 1
#define HT_MAX_PATH 1024                        /* Any better ideas? */
d828 1
d833 2
a834 2
#endif  /* !FD_SET */
#endif  /* SELECT */
d842 1
a842 1
#define set_errno(value) /* we do not know how */
d845 17
a861 4
/* IPv6 support */
#if defined(HAVE_GETADDRINFO) && defined(HAVE_GAI_STRERROR) && defined(ENABLE_IPV6)
#	define INET6
#endif /* HAVE_GETADDRINFO && HAVE_GAI_STRERROR && ENABLE_IPV6 */
a862 1
#if !defined(__MINGW32__)
d864 1
a864 5
typedef struct sockaddr_storage SockA;  /* See netinet/in.h */
#else
typedef struct sockaddr_in SockA;  /* See netinet/in.h */
#endif /* INET6 */
#endif
a865 1
#ifdef INET6
d870 5
a874 2
#define SA_LEN(x) (((x)->sa_family == AF_INET6)?sizeof(struct sockaddr_in6): \
       (((x)->sa_family == AF_INET)?sizeof(struct sockaddr_in):sizeof(struct sockaddr)))
d879 2
d885 1
a885 1
#define MAXHOSTNAMELEN 64		/* Arbitrary limit */
@


1.2
log
@remove lynx 2.8.4 patchlevel 1d
@
text
@d552 2
a553 1
#define NO_IOCTL
a556 1
#include <socket.h>
d558 2
a559 1
#ifdef WATT32
a565 1
#endif /* WATT32 */
d573 3
a575 3
#ifndef WATT32
#define getsockname getsockname_s
#endif /* !WATT32 */
d579 6
a635 4
#ifndef pid_t
typedef int pid_t;
#endif /* !pid_t */

d685 4
d848 4
@


1.1
log
@Initial revision
@
text
@@


1.1.2.1
log
@Lynx 2.8.6dev.10 as imported into ncvs
@
text
@d41 6
a46 6
#define NETCLOSE close		/* Routine to close a TCP-IP socket         */
#define NETREAD  HTDoRead	/* Routine to read from a TCP-IP socket     */
#define NETWRITE write		/* Routine to write to a TCP-IP socket      */
#define SOCKET_READ read	/* normal socket read routine */
#define IOCTL ioctl		/* normal ioctl routine for sockets */
#define SOCKET_ERRNO errno	/* normal socket errno */
d49 2
a50 2
#define SELECT			/* Can handle >1 channel.               */
#define GOT_SYSTEM		/* Can call shell with string           */
d56 1
a56 1
#define INVSOC (-1)		/* Unix invalid socket */
d113 4
a116 1
#ifndef __CYGWIN__
d132 1
a132 1
#include <string.h>		/* For bzero etc */
d141 1
a141 1
#ifdef EBCDIC			/* S/390 -- gil -- 1327 */
d143 1
a143 1
extern char un_IBM1047[];
a144 1

d148 1
a148 1
*//* for production */
d153 1
a153 1
#else /* EBCDIC */
d156 1
a156 1
error Host character set is not ASCII.
d162 2
a163 2
#endif				/* EBCDIC */
#endif				/* !TOASCII */
a174 2

#ifndef _WINDOWS_NSL
d176 3
a178 5
#endif

#include <fcntl.h>		/* For HTFile.c */
#include <sys/types.h>		/* For HTFile.c */
#include <sys/stat.h>		/* For HTFile.c */
d184 1
a184 2

#define NETREAD(s,b,l)  ws_netread((s),(b),(l))		/* 1997/11/06 (Thu) */
a194 20
#ifdef ENABLE_IPV6
#undef  USE_WINSOCK2_H
#define USE_WINSOCK2_H

/* Avoid including <winsock*.h> in <windows.h> */
#ifndef WIN32_LEAN_AND_MEAN
#error Define "WIN32_LEAN_AND_MEAN" in your makefile
#endif

#if defined(_MSC_VER) && (!defined(_WIN32_WINNT) || _WIN32_WINNT < 0x0501)
/*
 * Needed to pull in the real getaddrinfo() and not the inline version
 * in <wspiAPI.H> which doesn't support IPv6 (IPv4 only). <wspiAPI.H> is
 * included from <ws2tcpip.h> for <= 0x0500 SDKs.
 */
#undef  _WIN32_WINNT
#define _WIN32_WINNT 0x0501
#endif
#endif /* ENABLE_IPV6 */

a197 4
#ifdef ENABLE_IPV6
#include <ws2tcpip.h>
#endif

d216 1
a216 1
#else /* USE_WINSOCK2_H */
d219 1
d233 1
a233 1
#define ETIMEDOUT             WSAETIMEDOUT
d235 2
a236 1
#endif /* USE_WINSOCK2_H */
d238 1
a238 2
#undef  SOCKET_ERRNO
#define SOCKET_ERRNO          WSAGetLastError()
d242 3
a244 1
#endif /* WINDOWS */
d283 2
a284 2
#define IOCTL(a,b,c) -1		/* disables ioctl function            */
#define NO_IOCTL		/* flag to check if ioctl is disabled */
d305 5
a309 5
 *  Delete these socket_foo() prototypes as MultiNet adds them
 *  to it's socket library headers.  Compiler warnings due to
 *  the absence of arguments in the generic prototypes here will
 *  include the names of those which can be deleted. - FM
 */
d349 1
a349 1
#ifdef MULTINET			/* Include from standard Multinet directories */
d351 7
a357 7
 *  Delete any of these multinet_foo() and associated prototypes
 *  as MultiNet adds them to its socket library headers.  You'll
 *  get compiler warnings about them, due the absence of arguments
 *  in the generic prototyping here, and the warnings will include
 *  the names of the functions whose prototype entries can be
 *  deleted here. - FM
 */
d394 1
a394 1
#define __TIME 1		/* to avoid double definitions in in.h */
d406 3
a408 3
 *  Uncomment this if you get compiler messages
 *  about struct timeval having no linkage. - FM
 */
d418 1
d423 1
a423 1
#include <types.h>		/* for socket.h */
d431 1
d449 1
d462 1
d496 10
a505 10
 *  Not all versions of VMS have the full set of headers
 *  for socket library functions, because the TCP/IP
 *  packages were layered products.  If we want these
 *  specifically, instead of those for the above packages,
 *  the module should be compiled with VMS_SOCKET_HEADERS
 *  defined instead of layered product definitions, above.
 *  If the module is not using socket library functions,
 *  none of the definitions need be used, and we include
 *  only the above three headers. - FM
 */
d526 1
a526 1
#ifdef __GNUC__			/* this added by Sterling Bjorndahl */
d529 2
a530 2
#include <gnu_hacks.h>		/* defines GLOBALREF and GLOBALDEF for GNUC on VMS */
#endif /* __GNUC__ */
d552 1
a552 2
#undef  IOCTL
#define IOCTL(s,cmd,arg) ioctlsocket(s,cmd,(char*)(arg))
d556 1
d558 1
a558 2
#include <sys/ioctl.h>
#include <sys/socket.h>
d565 1
d573 3
a575 3
#ifdef UNIX
#undef UNIX
#endif /* UNIX */
a578 6
#if !defined(NCURSES) && !defined(USE_SLANG)
#define HAVE_CBREAK 1
#endif /* !NCURSES && !USE_SLANG */
#if defined(USE_SLANG) && !defined(NO_DJ_KEYHANDLER) && defined(HAVE_CONFIG_H)
#define DJGPP_KEYHANDLER
#endif /* USE_SLANG && !NO_DJ_KEYHANDLER  && HAVE_CONFIG_H */
d607 2
a608 2
#include <errno.h>		/* independent */
#ifdef __MVS__			/* S/390 -- gil -- 1361 */
d618 1
a618 1
#include <sys/time.h>		/* independent */
d620 1
a620 1
#ifndef __MVS__			/* S/390 -- gil -- 1373 */
d623 1
a623 1
#include <sys/file.h>		/* For open() etc */
d630 4
d637 1
a637 1
#endif /* Normal includes */
d655 1
a655 1
#define USE_DIRENT		/* sys V style directory open */
d666 1
a666 1
# endif				/* HAVE_LIMITS_H */
d669 1
a669 1
# endif				/* !MAXINT && INT_MAX */
d673 1
a673 1
#if !(defined(VM) || defined(VMS) || defined(THINK_C) || defined(PCNFS) || defined(_WINDOWS))
a676 2
#define socklen_t int		/* used for default LY_SOCKLEN definition */

d683 1
a683 5
#ifdef HAVE_LIBGETTEXT_H
#include <libgettext.h>
#endif

#define N_(s) s
d696 1
a696 1
#include <sys/ioctl.h>		/* EJB */
d701 1
a701 1
#include <arpa/inet.h>		/* Must be after netinet/in.h */
d704 1
a704 1
#endif /* TCP includes */
d784 1
a784 1
#define HT_MAX_PATH 1024	/* Any better ideas? */
a799 1

d804 2
a805 2
#endif /* !FD_SET */
#endif /* SELECT */
d813 1
a813 1
#define set_errno(value)	/* we do not know how */
d816 11
a826 15
/*
 * IPv6 support
 */
#if defined(HAVE_GETADDRINFO) && defined(ENABLE_IPV6)
#if defined(HAVE_GAI_STRERROR)
#define INET6
#elif defined(_WINDOWS)
#define INET6
#ifndef WIN_EX
#error Define "WIN_EX" in your makefile.
#endif
#ifndef _MSC_VER		/* MSVC has this inlined in <ws2tcpip.h> */
#undef  gai_strerror
#define gai_strerror(err) w32_strerror (err)
#endif
a827 1
#endif /* HAVE_GETADDRINFO && ENABLE_IPV6 */
a829 2
typedef struct sockaddr_storage SockA;

d834 2
a835 5
#define SA_LEN(x) (((x)->sa_family == AF_INET6) \
		   ? sizeof(struct sockaddr_in6) \
		   : (((x)->sa_family == AF_INET) \
		      ? sizeof(struct sockaddr_in) \
		      : sizeof(struct sockaddr)))	/* AF_UNSPEC? */
a839 2
typedef struct sockaddr_in SockA;

a841 4

#ifndef MAXHOSTNAMELEN
#define MAXHOSTNAMELEN 128	/* Max label is 63. Should handle 2 of those */
#endif /* MAXHOSTNAMELEN */
@


1.1.3.1
log
@Import Lynx 2.8.5.dev16 again, this time via a vendor branch (tg),
to ease tracking of the upcoming dev17 (2.8.6-prerelease) update.
@
text
@d552 1
a552 2
#undef  IOCTL
#define IOCTL(s,cmd,arg) ioctlsocket(s,cmd,(char*)(arg))
d556 1
d558 1
a558 2
#include <sys/ioctl.h>
#include <sys/socket.h>
d565 1
d573 3
a575 3
#ifdef UNIX
#undef UNIX
#endif /* UNIX */
a578 6
#if !defined(NCURSES) && !defined(USE_SLANG)
#define HAVE_CBREAK 1
#endif /* !NCURSES && !USE_SLANG */
#if defined(USE_SLANG) && !defined(NO_DJ_KEYHANDLER) && defined(HAVE_CONFIG_H)
#define DJGPP_KEYHANDLER
#endif /* USE_SLANG && !NO_DJ_KEYHANDLER  && HAVE_CONFIG_H */
d630 4
a682 4
#ifdef HAVE_LIBGETTEXT_H
#include <libgettext.h>
#endif

a841 4

#ifndef MAXHOSTNAMELEN
#define MAXHOSTNAMELEN 64		/* Arbitrary limit */
#endif /* MAXHOSTNAMELEN */
@


1.1.3.2
log
@Update to the lynx 2.8.5 release (only minor diffs)
so the lusers won't cry we aren't up to date
@
text
@d113 4
a116 1
#ifndef __CYGWIN__
a174 2

#ifndef _WINDOWS_NSL
a175 2
#endif

d689 1
a689 1
#define N_(s) s
@


1.1.3.3
log
@Lynx 2.8.6dev.5 fresh from the ISC
@
text
@d41 6
a46 6
#define NETCLOSE close		/* Routine to close a TCP-IP socket         */
#define NETREAD  HTDoRead	/* Routine to read from a TCP-IP socket     */
#define NETWRITE write		/* Routine to write to a TCP-IP socket      */
#define SOCKET_READ read	/* normal socket read routine */
#define IOCTL ioctl		/* normal ioctl routine for sockets */
#define SOCKET_ERRNO errno	/* normal socket errno */
d49 2
a50 2
#define SELECT			/* Can handle >1 channel.               */
#define GOT_SYSTEM		/* Can call shell with string           */
d56 1
a56 1
#define INVSOC (-1)		/* Unix invalid socket */
d129 1
a129 1
#include <string.h>		/* For bzero etc */
d138 1
a138 1
#ifdef EBCDIC			/* S/390 -- gil -- 1327 */
d140 1
a140 1
extern char un_IBM1047[];
a141 1

d145 1
a145 1
*//* for production */
d150 1
a150 1
#else /* EBCDIC */
d153 1
a153 1
error Host character set is not ASCII.
d159 2
a160 2
#endif				/* EBCDIC */
#endif				/* !TOASCII */
d177 3
a179 3
#include <fcntl.h>		/* For HTFile.c */
#include <sys/types.h>		/* For HTFile.c */
#include <sys/stat.h>		/* For HTFile.c */
d185 1
a185 2

#define NETREAD(s,b,l)  ws_netread((s),(b),(l))		/* 1997/11/06 (Thu) */
a195 20
#ifdef ENABLE_IPV6
#undef  USE_WINSOCK2_H
#define USE_WINSOCK2_H

/* Avoid including <winsock*.h> in <windows.h> */
#ifndef WIN32_LEAN_AND_MEAN
#error Define "WIN32_LEAN_AND_MEAN" in your makefile
#endif

#if defined(_MSC_VER) && (!defined(_WIN32_WINNT) || _WIN32_WINNT < 0x0501)
/*
 * Needed to pull in the real getaddrinfo() and not the inline version
 * in <wspiAPI.H> which doesn't support IPv6 (IPv4 only). <wspiAPI.H> is
 * included from <ws2tcpip.h> for <= 0x0500 SDKs.
 */
#undef  _WIN32_WINNT
#define _WIN32_WINNT 0x0501
#endif
#endif /* ENABLE_IPV6 */

a198 4
#ifdef ENABLE_IPV6
#include <ws2tcpip.h>
#endif

d217 1
a217 1
#else /* USE_WINSOCK2_H */
d220 1
d234 1
a234 1
#define ETIMEDOUT             WSAETIMEDOUT
d236 2
a237 1
#endif /* USE_WINSOCK2_H */
d239 1
a239 2
#undef  SOCKET_ERRNO
#define SOCKET_ERRNO          WSAGetLastError()
d243 3
a245 1
#endif /* WINDOWS */
d284 2
a285 2
#define IOCTL(a,b,c) -1		/* disables ioctl function            */
#define NO_IOCTL		/* flag to check if ioctl is disabled */
d306 5
a310 5
 *  Delete these socket_foo() prototypes as MultiNet adds them
 *  to it's socket library headers.  Compiler warnings due to
 *  the absence of arguments in the generic prototypes here will
 *  include the names of those which can be deleted. - FM
 */
d350 1
a350 1
#ifdef MULTINET			/* Include from standard Multinet directories */
d352 7
a358 7
 *  Delete any of these multinet_foo() and associated prototypes
 *  as MultiNet adds them to its socket library headers.  You'll
 *  get compiler warnings about them, due the absence of arguments
 *  in the generic prototyping here, and the warnings will include
 *  the names of the functions whose prototype entries can be
 *  deleted here. - FM
 */
d395 1
a395 1
#define __TIME 1		/* to avoid double definitions in in.h */
d407 3
a409 3
 *  Uncomment this if you get compiler messages
 *  about struct timeval having no linkage. - FM
 */
d419 1
d424 1
a424 1
#include <types.h>		/* for socket.h */
d432 1
d450 1
d463 1
d497 10
a506 10
 *  Not all versions of VMS have the full set of headers
 *  for socket library functions, because the TCP/IP
 *  packages were layered products.  If we want these
 *  specifically, instead of those for the above packages,
 *  the module should be compiled with VMS_SOCKET_HEADERS
 *  defined instead of layered product definitions, above.
 *  If the module is not using socket library functions,
 *  none of the definitions need be used, and we include
 *  only the above three headers. - FM
 */
d527 1
a527 1
#ifdef __GNUC__			/* this added by Sterling Bjorndahl */
d530 2
a531 2
#include <gnu_hacks.h>		/* defines GLOBALREF and GLOBALDEF for GNUC on VMS */
#endif /* __GNUC__ */
d614 2
a615 2
#include <errno.h>		/* independent */
#ifdef __MVS__			/* S/390 -- gil -- 1361 */
d625 1
a625 1
#include <sys/time.h>		/* independent */
d627 1
a627 1
#ifndef __MVS__			/* S/390 -- gil -- 1373 */
d630 1
a630 1
#include <sys/file.h>		/* For open() etc */
d640 1
a640 1
#endif /* Normal includes */
d658 1
a658 1
#define USE_DIRENT		/* sys V style directory open */
d669 1
a669 1
# endif				/* HAVE_LIMITS_H */
d672 1
a672 1
# endif				/* !MAXINT && INT_MAX */
d676 1
a676 1
#if !(defined(VM) || defined(VMS) || defined(THINK_C) || defined(PCNFS) || defined(_WINDOWS))
d703 1
a703 1
#include <sys/ioctl.h>		/* EJB */
d708 1
a708 1
#include <arpa/inet.h>		/* Must be after netinet/in.h */
d711 1
a711 1
#endif /* TCP includes */
d791 1
a791 1
#define HT_MAX_PATH 1024	/* Any better ideas? */
a806 1

d811 2
a812 2
#endif /* !FD_SET */
#endif /* SELECT */
d820 1
a820 1
#define set_errno(value)	/* we do not know how */
d823 11
a833 15
/*
 * IPv6 support
 */
#if defined(HAVE_GETADDRINFO) && defined(ENABLE_IPV6)
#if defined(HAVE_GAI_STRERROR)
#define INET6
#elif defined(_WINDOWS)
#define INET6
#ifndef WIN_EX
#error Define "WIN_EX" in your makefile.
#endif
#ifndef _MSC_VER		/* MSVC has this inlined in <ws2tcpip.h> */
#undef  gai_strerror
#define gai_strerror(err) w32_strerror (err)
#endif
a834 1
#endif /* HAVE_GETADDRINFO && ENABLE_IPV6 */
a836 2
typedef struct sockaddr_storage SockA;

d841 2
a842 5
#define SA_LEN(x) (((x)->sa_family == AF_INET6) \
		   ? sizeof(struct sockaddr_in6) \
		   : (((x)->sa_family == AF_INET) \
		      ? sizeof(struct sockaddr_in) \
		      : sizeof(struct sockaddr)))	/* AF_UNSPEC? */
a846 2
typedef struct sockaddr_in SockA;

d851 1
a851 1
#define MAXHOSTNAMELEN 128	/* Max label is 63. Should handle 2 of those */
@


1.1.1.1
log
@Import OpenBSD source tree of short before 17:00 UTC today
@
text
@@
