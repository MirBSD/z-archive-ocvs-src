head	1.7;
access;
symbols
	tg-mergetmp-mirosx-1:1.7
	tg-mergefixes-1-branch:1.7.0.4
	tg-mergefixes-1-base:1.7
	MIROS_X:1.7.0.2
	MIROS_X_BASE:1.7
	MIRBSD_XP_MIRPPC:1.6.0.4
	MIRBSD_XP_SPARC_BASE:1.6
	MIRBSD_XP_SPARC:1.6.0.2
	rcs-5_7:1.1.2.1
	FSF:1.1.2
	cvs-200406091940:1.1.1.1
	MIRBSD_7quater:1.1.1.1
	cvs-200405160640:1.1.1.1
	cvs-200401271800:1.1.1.1
	cvs-200401261630:1.1.1.1
	cvs-200401021645:1.1.1.1
	MIRBSD_7_ALPHA:1.1.1.1.0.6
	MIRBSD_7:1.1.1.1.0.4
	cvs-200312222040:1.1.1.1
	MIRBSD_7ter:1.1.1.1
	MIRBSD_7_DEV:1.1.1.1.0.2
	cvs-200310020700:1.1.1.1
	cvs-200309271030:1.1.1.1
	cvs-200309251530:1.1.1.1
	cvs-200308302005:1.1.1.1
	cvs-200308171200:1.1.1.1
	ctm-3496:1.1.1.1
	ctm-3449:1.1.1.1
	ctm-3437:1.1.1.1
	cvs-200307191805:1.1.1.1
	ctm-3425:1.1.1.1
	cvs-200307091500:1.1.1.1
	ctm-3389:1.1.1.1
	cvs-200306291430:1.1.1.1
	ctm-3341:1.1.1.1
	MIRBSD_5:1.1.1.1
	cvs-200306082100:1.1.1.1
	ctm-3316:1.1.1.1
	ctm-3272:1.1.1.1
	ctm-3264:1.1.1.1
	cvs-200305071630:1.1.1.1
	MIRBSD_4:1.1.1.1
	ctm-3203:1.1.1.1
	cvs-20030410-1130:1.1.1.1
	ctm-3155:1.1.1.1
	ctm-3132:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.7
date	2004.12.12.21.22.56;	author tg;	state Exp;
branches;
next	1.6;

1.6
date	2004.07.21.15.02.41;	author tg;	state Stab;
branches;
next	1.5;

1.5
date	2004.07.21.14.02.43;	author tg;	state Exp;
branches;
next	1.4;

1.4
date	2004.07.21.10.48.21;	author tg;	state Exp;
branches;
next	1.3;

1.3
date	2004.07.21.10.25.14;	author tg;	state Exp;
branches;
next	1.2;

1.2
date	2004.07.21.09.38.11;	author tg;	state Exp;
branches;
next	1.1;

1.1
date	2003.03.22.17.44.10;	author tg;	state Exp;
branches
	1.1.1.1
	1.1.2.1;
next	;

1.1.1.1
date	2003.03.22.17.44.10;	author tg;	state Exp;
branches;
next	;

1.1.2.1
date	2004.07.21.09.14.37;	author tg;	state Exp;
branches;
next	;


desc
@@


1.7
log
@RCS IDs, snprintf, ...
@
text
@/* $MirBSD: src/gnu/usr.bin/rcs/src/rcskeys.c,v 1.5 2004/07/21 14:02:43 tg Exp $ */

/* RCS keyword table and match operation */

/* Copyright 1982, 1988, 1989 Walter Tichy
   Copyright 1990, 1991, 1992, 1993, 1995 Paul Eggert
   Distributed under license by the Free Software Foundation, Inc.

This file is part of RCS.

RCS is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2, or (at your option)
any later version.

RCS is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with RCS; see the file COPYING.
If not, write to the Free Software Foundation,
59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

Report problems and direct all questions to:

    rcs-bugs@@cs.purdue.edu

*/

#include "rcsbase.h"

__RCSID("$MirBSD$");

char const *Keyword[] = {
    /* This must be in the same order as rcsbase.h's enum markers type. */
	0,
	AUTHOR, DATE, HEADER, IDH,
	LOCKER, LOG, NAME, RCSFILE, REVISION, SOURCE, STATE, NULL
};



	enum markers
trymatch(string)
	char const *string;
/* function: Checks whether string starts with a keyword followed
 * by a KDELIM or a VDELIM.
 * If successful, returns the appropriate marker, otherwise Nomatch.
 */
{
        register int j;
	register char const *p, *s;
	for (j = sizeof(Keyword)/sizeof(*Keyword);  (--j);  ) {
		if (Keyword[j] != NULL) {
			/* try next keyword */
			p = Keyword[j];
			s = string;
			while (*p++ == *s++) {
				if (!*p)
				    switch (*s) {
					case KDELIM:
					case VDELIM:
					    return (enum markers)j;
					default:
					    return Nomatch;
				    }
			}
		}
        }
        return(Nomatch);
}

	void
setRCSlocalId(string)
	char const *string;
/* function: sets local RCS id and RCSLOCALID envariable */
{
	static char local_id[keylength+1];

	if (strlen(string) > keylength)
		warn("LocalId is too long");
	strlcpy(local_id, string, keylength+1);
	Keyword[LocalId] = local_id;
}
@


1.6
log
@* -Werror clean
* conf.sh uses -Wno-error if that works
* strcpy -> strlcpy (except if neither mkstemp nor mktemp are defined...)
@
text
@d34 1
a34 2
libId(keysId, "$MirBSD: src/gnu/usr.bin/rcs/src/rcskeys.c,v 1.5 2004/07/21 14:02:43 tg Exp $")

@


1.5
log
@add rcs ids

add fix from openbsd: support local keyword
@
text
@d1 1
a1 1
/* $MirBSD$ */
d34 1
a34 1
libId(keysId, "$MirBSD: src/gnu/usr.bin/rcs/src/rcskeys.c,v 1.4 2004/07/21 10:48:21 tg Exp $")
d83 3
a85 5
	if (strlen(string) > keylength) {
		error("LocalId is too long");
		exit(1);
	}
	VOID strcpy(local_id, string);
@


1.4
log
@improve RCS (CVS) Id handling in RCS source; use .comment
@
text
@d1 2
d34 1
a34 1
libId(keysId, "$MirBSD: rcskeys.c,v 1.3 2004/07/21 10:25:14 tg Exp $")
d37 1
a37 1
char const *const Keyword[] = {
d41 1
a41 1
	LOCKER, LOG, NAME, RCSFILE, REVISION, SOURCE, STATE
d57 14
a70 12
		/* try next keyword */
		p = Keyword[j];
		s = string;
		while (*p++ == *s++) {
			if (!*p)
			    switch (*s) {
				case KDELIM:
				case VDELIM:
				    return (enum markers)j;
				default:
				    return Nomatch;
			    }
d74 15
@


1.3
log
@remove unneeded files, whitespace at end of line or file
@
text
@d32 1
a32 1
libId(keysId, "$Id: rcskeys.c,v 1.2 2004/07/21 09:38:11 tg Exp $")
@


1.2
log
@no RCS IDs in commit messages is a rule. why, you ask?
because there is a RCS keyword which is dangerous.
it's " $ L o g $ "

remove this from these files, before doing _anything_
else on them.

NB: I'm re-doing the RCS port from the upstream, because
    I think I can do it better now... with 2 yrs experience
@
text
@d32 1
a32 1
libId(keysId, "$Id: rcskeys.c,v 1.1.2.1 2004/07/21 09:14:37 tg Exp $")
a70 1

@


1.1
log
@Initial revision
@
text
@a29 47
/*
 * $Log: rcskeys.c,v $
 * Revision 1.4  2002/07/03 23:07:32  deraadt
 * if localid is too long, abort; found by cloder@@acm.org
 *
 * Revision 1.3  1996/08/12 21:05:54  millert
 * slightly less gross fix to avoid a coredump.
 *
 * Revision 1.2  1996/08/12 20:20:04  millert
 * fixes core dump if RCSLOCALID not set--oops.
 *
 * Revision 1.1  1996/08/12 04:08:22  millert
 * rcs 5.7 + OpenBSD changes
 *
 * Revision 5.4  1995/06/16 06:19:24  eggert
 * Update FSF address.
 *
 * Revision 5.3  1993/11/03 17:42:27  eggert
 * Add Name keyword.
 *
 * Revision 5.2  1991/08/19  03:13:55  eggert
 * Say `T const' instead of `const T'; it's less confusing for pointer types.
 * (This change was made in other source files too.)
 *
 * Revision 5.1  1991/04/21  11:58:25  eggert
 * Don't put , just before } in initializer.
 *
 * Revision 5.0  1990/08/22  08:12:54  eggert
 * Add -k.  Ansify and Posixate.
 *
 * Revision 4.3  89/05/01  15:13:02  narten
 * changed copyright header to reflect current distribution rules
 * 
 * Revision 4.2  87/10/18  10:36:33  narten
 * Updating version numbers. Changes relative to 1.1 actuallyt
 * relative to 4.1
 * 
 * Revision 1.2  87/09/24  14:00:10  narten
 * Sources now pass through lint (if you ignore printf/sprintf/fprintf 
 * warnings)
 * 
 * Revision 4.1  83/05/04  10:06:53  wft
 * Initial revision.
 * 
 */


d32 1
a32 1
libId(keysId, "$Id: rcskeys.c,v 1.4 2002/07/03 23:07:32 deraadt Exp $")
d35 1
a35 1
char const *Keyword[] = {
d39 1
a39 1
	LOCKER, LOG, NAME, RCSFILE, REVISION, SOURCE, STATE, NULL
d43 1
d55 12
a66 14
		if (Keyword[j]) {
			/* try next keyword */
			p = Keyword[j];
			s = string;
			while (*p++ == *s++) {
				if (!*p)
				    switch (*s) {
					case KDELIM:
					case VDELIM:
					    return (enum markers)j;
					default:
					    return Nomatch;
				    }
			}
a71 15

	void
setRCSlocalId(string)
	char const *string;
/* function: sets local RCS id and RCSLOCALID envariable */
{
	static char local_id[keylength+1];

	if (strlen(string) > keylength) {
		error("LocalId is too long");
		exit(1);
	}
	VOID strcpy(local_id, string);
	Keyword[LocalId] = local_id;
}
@


1.1.2.1
log
@pristine GNU RCS 5.7
@
text
@d32 12
d79 1
a79 1
libId(keysId, "$Id: rcskeys.c,v 5.4 1995/06/16 06:19:24 eggert Exp $")
d82 1
a82 1
char const *const Keyword[] = {
d86 1
a86 1
	LOCKER, LOG, NAME, RCSFILE, REVISION, SOURCE, STATE
a89 1

d101 14
a114 12
		/* try next keyword */
		p = Keyword[j];
		s = string;
		while (*p++ == *s++) {
			if (!*p)
			    switch (*s) {
				case KDELIM:
				case VDELIM:
				    return (enum markers)j;
				default:
				    return Nomatch;
			    }
d120 15
@


1.1.1.1
log
@Import OpenBSD 3.3 source repository from CTM 3132 the first time
This opens an OpenBSD-mirabile (aka MirBSD) repository.

### MirBSD is:
# Copyright (c) 1982-2003 by Thorsten "mirabile" Glaser <x86@@ePost.de>
# Copyright © 1968-2003  The authors of And contributors to UNIX®, the
#       C Language, BSD/Berkeley Unix; 386BSD, NetBSD 1.1 and OpenBSD.
#
# Anyone who obtained a copy of this work is hereby permitted to freely use,
# distribute, modify, merge, sublicence, give away or sell it as long as the
# authors are given due credit and the following notice is retained:
#
# This work is provided "as is", with no explicit or implicit warranty what-
# soever. Use it only at your own risk. In no event may an author or contri-
# butor be held liable for any damage, directly or indirectly, that origina-
# ted through or is caused by creation or modification of this work.

MirBSD is my private tree. MirBSD does not differ very much from OpenBSD
and intentionally tracks OpenBSD. That's why it _is_ OpenBSD, just not the
official one. It's like with DarrenBSD.

At time of this writing, no advertising for MirBSD must be done,
because the advertising clause has not yet been sorted out.

http://templeofhate.com/tglaser/MirBSD/index.php
@
text
@@
