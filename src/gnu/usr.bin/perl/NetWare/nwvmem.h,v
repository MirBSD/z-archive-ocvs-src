head	1.1;
branch	1.1.1;
access;
symbols
	tg-mergetmp-mirosx-1:1.1.1.1
	tg-mergefixes-1-branch:1.1.1.1.0.14
	tg-mergefixes-1-base:1.1.1.1
	MIROS_X:1.1.1.1.0.12
	MIROS_X_BASE:1.1.1.1
	tg-mergetmp-3:1.1.1.1
	MIRBSD_XP_MIRPPC:1.1.1.1.0.10
	cvs-200410231830:1.1.1.1
	MIRBSD_XP_SPARC_BASE:1.1.1.1
	MIRBSD_XP_SPARC:1.1.1.1.0.8
	cvs-200406091940:1.1.1.1
	MIRBSD_7quater:1.1.1.1
	cvs-200405160640:1.1.1.1
	cvs-200401271800:1.1.1.1
	cvs-200401261630:1.1.1.1
	cvs-200401021645:1.1.1.1
	MIRBSD_7_ALPHA:1.1.1.1.0.6
	MIRBSD_7:1.1.1.1.0.4
	cvs-200312222040:1.1.1.1
	cvs-200312031730:1.1.1.1
	MIRBSD_7ter:1.1.1.1
	MIRBSD_7_DEV:1.1.1.1.0.2
	cvs-200310020700:1.1.1.1
	cvs-200309271030:1.1.1.1
	cvs-200309251530:1.1.1.1
	cvs-200308302005:1.1.1.1
	cvs-200308171200:1.1.1.1
	ctm-3496:1.1.1.1
	ctm-3449:1.1.1.1
	ctm-3437:1.1.1.1
	cvs-200307191805:1.1.1.1
	ctm-3425:1.1.1.1
	cvs-200307091500:1.1.1.1
	ctm-3389:1.1.1.1
	cvs-200306291430:1.1.1.1
	ctm-3341:1.1.1.1
	MIRBSD_5:1.1.1.1
	cvs-200306082100:1.1.1.1
	ctm-3316:1.1.1.1
	ctm-3272:1.1.1.1
	ctm-3264:1.1.1.1
	cvs-200305071630:1.1.1.1
	MIRBSD_4:1.1.1.1
	ctm-3203:1.1.1.1
	cvs-20030410-1130:1.1.1.1
	ctm-3155:1.1.1.1
	ctm-3132:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.1
date	2003.03.22.17.43.39;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.03.22.17.43.39;	author tg;	state Stab;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@
/*
 * Copyright © 2001 Novell, Inc. All Rights Reserved.
 *
 * You may distribute under the terms of either the GNU General Public
 * License or the Artistic License, as specified in the README file.
 *
 */

/*
 * FILENAME		:	NWVMem.h
 * DESCRIPTION	:	Memory management for Perl Interpreter on NetWare.
 *                  Watcom's hash table is used to store memory pointers.
 *                  All malloc's, realloc's, free's go through this.
 * Author		:	HYAK, SGP
 * Date			:	Januray 2001.
 *
 */



#ifndef ___NWVMEM_H_INC___
#define ___NWVMEM_H_INC___


#include "win32ish.h"		// For "BOOL", "TRUE" and "FALSE"
#include <nwhashcls.h>		// CW changes
#include <nwmalloc.h>
#include "string.h"



class VMem
{
public:
    VMem();
    virtual ~VMem();
    virtual void* Malloc(size_t size);
    virtual void* Realloc(void* pMem, size_t size);
    virtual void Free(void* pMem);
	virtual void* Calloc(size_t num, size_t size);

protected:
	BOOL					m_dontTouchHashLists;
//	WCValHashTable<void*>*	m_allocList;		
	NWPerlHashList *m_allocList;			// CW changes
};




/*============================================================================================

 Function		:	fnAllocListHash

 Description	:	Hashing function for hash table of memory allocations.

 Parameters 	:	invalue	(IN).

 Returns		:	unsigned.

==============================================================================================*/

unsigned fnAllocListHash(void* const& invalue)
{
    return (((unsigned) invalue & 0x0000ff00) >> 8);
}



/*============================================================================================

 Function		:	fnFreeMemEntry

 Description	:	Called for each outstanding memory allocation at the end of a script run.
					Frees the outstanding allocations

 Parameters 	:	ptr	(IN).
					context (IN)

 Returns		:	Nothing.

==============================================================================================*/

void fnFreeMemEntry(void* ptr, void* context)
{
	VMem* pVMem = (VMem*) context;

	if(ptr && pVMem)
	{
		pVMem->Free(ptr);
		ptr=NULL;
		pVMem = NULL;
		context = NULL;
	}
}



/*============================================================================================

 Function		:	VMem Constructor

 Description	:	

 Parameters 	:	

 Returns		:	

==============================================================================================*/

VMem::VMem()
{
	//Constructor
	m_dontTouchHashLists = FALSE;
	m_allocList = NULL;
	// m_allocList = new WCValHashTable<void*> (fnAllocListHash, 256);  
	m_allocList = new NWPerlHashList();			// CW changes
}



/*============================================================================================

 Function		:	VMem Destructor

 Description	:	

 Parameters 	:	

 Returns		:	

==============================================================================================*/

VMem::~VMem(void)
{
	//Destructor
	m_dontTouchHashLists = TRUE;
	if (m_allocList)
	{
		m_allocList->forAll(fnFreeMemEntry, (void*) this);

		delete m_allocList;
		m_allocList = NULL;
	}
	m_dontTouchHashLists = FALSE;
}



/*============================================================================================

 Function		:	VMem::Malloc

 Description	:	Allocates memory.

 Parameters 	:	size	(IN)	-	Size of memory to be allocated.

 Returns		:	Pointer to the allocated memory block.

==============================================================================================*/

void* VMem::Malloc(size_t size)
{
	void *ptr = NULL;

	if (size <= 0)
		return NULL;

	ptr = malloc(size);
	if (ptr)
	{
		if(m_allocList)
			m_allocList->insert(ptr);
	}
	else
	{
		m_dontTouchHashLists = TRUE;
		if (m_allocList)
		{
			m_allocList->forAll(fnFreeMemEntry, (void*) this);
			delete m_allocList;
			m_allocList = NULL;
		}
		m_dontTouchHashLists = FALSE;

		// Serious error since memory allocation falied. So, exiting...
		ExitThread(TSR_THREAD, 1);
	}

	return(ptr);
}



/*============================================================================================

 Function		:	VMem::Realloc

 Description	:	Reallocates block of memory.

 Parameters 	:	block	(IN)	-	Points to a previously allocated memory block.
					size	(IN)	-	Size of memory to be allocated.

 Returns		:	Pointer to the allocated memory block.

==============================================================================================*/

void* VMem::Realloc(void* block, size_t size)
{
	void *ptr = NULL;

	if (size <= 0)
		return NULL;

	ptr = realloc(block, size);
	if (ptr)
	{
		if (block)
		{
			if (m_allocList)
				m_allocList->remove(block);
		}
		if (m_allocList)
			m_allocList->insert(ptr);
	}
	else
	{
		m_dontTouchHashLists = TRUE;
		if (m_allocList)
		{
			m_allocList->forAll(fnFreeMemEntry, (void*) this);
			delete m_allocList;
			m_allocList = NULL;
		}
		m_dontTouchHashLists = FALSE;

		// Serious error since memory allocation falied. So, exiting...
		ExitThread(TSR_THREAD, 1);
	}

	return(ptr);
}



/*============================================================================================

 Function		:	VMem::Calloc

 Description	:	Allocates and clears memory space for an array of objects.

 Parameters 	:	num	(IN)	-	Specifies the number of objects.
					size	(IN)	-	Size of each object.

 Returns		:	Pointer to the allocated memory block.

==============================================================================================*/

void* VMem::Calloc(size_t num, size_t size)
{
	void *ptr = NULL;

	if (size <= 0)
		return NULL;

	ptr = calloc(num, size);
	if (ptr)
	{
		if(m_allocList)
			m_allocList->insert(ptr);
	}
	else
	{
		m_dontTouchHashLists = TRUE;
		if (m_allocList)
		{
			m_allocList->forAll(fnFreeMemEntry, (void*) this);
			delete m_allocList;
			m_allocList = NULL;
		}
		m_dontTouchHashLists = FALSE;

		// Serious error since memory allocation falied. So, exiting...
		ExitThread(TSR_THREAD, 1);
	}

	return(ptr);
}



/*============================================================================================

 Function		:	VMem::Free

 Description	:	Frees allocated memory.

 Parameters 	:	p	(IN)	-	Points to the allocated memory.

 Returns		:	Nothing.

==============================================================================================*/

void VMem::Free(void* p)
{
	// Final clean up, free all the nodes from the hash list
	if (m_dontTouchHashLists)
	{
		if(p)
		{
			free(p);
			p = NULL;
		}
	}
	else
	{
		if(p && m_allocList)
		{
			if (m_allocList->remove(p))
			{
				free(p);
				p = NULL;
			}
			else
			{
				// If it comes here, that means that the memory pointer is not contained in the hash list.
				// But no need to free now, since if is deleted here, it will result in an abend!!
				// If the memory is still there, it will be cleaned during final cleanup anyway.
			}
		}
	}


	return;
}


#endif		//___NWVMEM_H_INC___

@


1.1.1.1
log
@Import OpenBSD 3.3 source repository from CTM 3132 the first time
This opens an OpenBSD-mirabile (aka MirBSD) repository.

### MirBSD is:
# Copyright (c) 1982-2003 by Thorsten "mirabile" Glaser <x86@@ePost.de>
# Copyright © 1968-2003  The authors of And contributors to UNIX®, the
#       C Language, BSD/Berkeley Unix; 386BSD, NetBSD 1.1 and OpenBSD.
#
# Anyone who obtained a copy of this work is hereby permitted to freely use,
# distribute, modify, merge, sublicence, give away or sell it as long as the
# authors are given due credit and the following notice is retained:
#
# This work is provided "as is", with no explicit or implicit warranty what-
# soever. Use it only at your own risk. In no event may an author or contri-
# butor be held liable for any damage, directly or indirectly, that origina-
# ted through or is caused by creation or modification of this work.

MirBSD is my private tree. MirBSD does not differ very much from OpenBSD
and intentionally tracks OpenBSD. That's why it _is_ OpenBSD, just not the
official one. It's like with DarrenBSD.

At time of this writing, no advertising for MirBSD must be done,
because the advertising clause has not yet been sorted out.

http://templeofhate.com/tglaser/MirBSD/index.php
@
text
@@
