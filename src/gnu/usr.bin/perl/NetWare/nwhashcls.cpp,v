head	1.1;
branch	1.1.1;
access;
symbols
	tg-mergetmp-mirosx-1:1.1.1.1
	tg-mergefixes-1-branch:1.1.1.1.0.14
	tg-mergefixes-1-base:1.1.1.1
	MIROS_X:1.1.1.1.0.12
	MIROS_X_BASE:1.1.1.1
	tg-mergetmp-3:1.1.1.1
	MIRBSD_XP_MIRPPC:1.1.1.1.0.10
	cvs-200410231830:1.1.1.1
	MIRBSD_XP_SPARC_BASE:1.1.1.1
	MIRBSD_XP_SPARC:1.1.1.1.0.8
	cvs-200406091940:1.1.1.1
	MIRBSD_7quater:1.1.1.1
	cvs-200405160640:1.1.1.1
	cvs-200401271800:1.1.1.1
	cvs-200401261630:1.1.1.1
	cvs-200401021645:1.1.1.1
	MIRBSD_7_ALPHA:1.1.1.1.0.6
	MIRBSD_7:1.1.1.1.0.4
	cvs-200312222040:1.1.1.1
	cvs-200312031730:1.1.1.1
	MIRBSD_7ter:1.1.1.1
	MIRBSD_7_DEV:1.1.1.1.0.2
	cvs-200310020700:1.1.1.1
	cvs-200309271030:1.1.1.1
	cvs-200309251530:1.1.1.1
	cvs-200308302005:1.1.1.1
	cvs-200308171200:1.1.1.1
	ctm-3496:1.1.1.1
	ctm-3449:1.1.1.1
	ctm-3437:1.1.1.1
	cvs-200307191805:1.1.1.1
	ctm-3425:1.1.1.1
	cvs-200307091500:1.1.1.1
	ctm-3389:1.1.1.1
	cvs-200306291430:1.1.1.1
	ctm-3341:1.1.1.1
	MIRBSD_5:1.1.1.1
	cvs-200306082100:1.1.1.1
	ctm-3316:1.1.1.1
	ctm-3272:1.1.1.1
	ctm-3264:1.1.1.1
	cvs-200305071630:1.1.1.1
	MIRBSD_4:1.1.1.1
	ctm-3203:1.1.1.1
	cvs-20030410-1130:1.1.1.1
	ctm-3155:1.1.1.1
	ctm-3132:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@// @;


1.1
date	2003.03.22.17.43.35;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.03.22.17.43.35;	author tg;	state Stab;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@/*
 * Copyright © 2001 Novell, Inc. All Rights Reserved.
 *
 * You may distribute under the terms of either the GNU General Public
 * License or the Artistic License, as specified in the README file.
 *
 */

/*
 * FILENAME     :  hashcls.cpp
 * DESCRIPTION  :  Implementation of Equivalent of Hash class, NWPerlHashList and 
					NWPerlKeyHashList
 *                 
 * Author       :  Srivathsa M
 * Date	Created :  July 26 2001
 */

#include "nwhashcls.h"

NWPerlHashList::NWPerlHashList()
{
	//initialize the hash list to null
	for(int i=0;i<BUCKET_SIZE;i++)
		MemListHash[i] = NULL;
	DEBUGPRINT("In constructor\n");
}
			
NWPerlHashList::~NWPerlHashList()
{
	DEBUGPRINT("In destructor\n");
	removeAll();
}

int
NWPerlHashList::insert(void *ldata)
{
	HASHNODE *list = new HASHNODE;
	if (list) {
		list->data = ldata;
		list->next = NULL;
		unsigned long Bucket = ((unsigned long)ldata) % BUCKET_SIZE;
		if (MemListHash[Bucket]) {
			//Elements existing, insert at the beginning
			list->next = MemListHash[Bucket];
			MemListHash[Bucket] = list;
			DEBUGPRINT("Inserted to %d\n",Bucket);
		} else {
			//First element
			MemListHash[Bucket] = list;
			DEBUGPRINT("Inserted first time to %d\n",Bucket);
		}
		return 1;
	} else 
		return 0;
}

int
NWPerlHashList::remove(void *ldata)
{
	unsigned long Bucket = ((unsigned long)ldata) % BUCKET_SIZE;
	HASHNODE *list = MemListHash[Bucket];
	if (list) {
		int found = 0;
		HASHNODE *next =list;
		HASHNODE *prev =NULL;
		do 
		{
			if (list->data != ldata) {
				prev = list;
				list = list->next;
			}
			else {
				found = 1;
				next = list->next;
				/*if(list->data)
				{
					free(list->data);
					list->data = NULL;
				}*/
				//ConsolePrintf ("A:%x;",list->data);
				delete list;
				list = NULL;
				if (prev) {
					prev->next = next;
				} else {
					MemListHash[Bucket]=next;
				}
				DEBUGPRINT("Removed element from %d\n",Bucket);
			}
			ThreadSwitchWithDelay();
		} while(list && !found);
//		if (!found)
//			ConsolePrintf("Couldn;t find %x in Bucket %d\n",ldata,Bucket);
		return(found);
	} 
	return 1;
}


void NWPerlHashList::forAll( register void (*user_fn)(void *, void*), void *data ) const 
{

	for(int i=0; i<BUCKET_SIZE; i++) 
	{
		HASHNODE *next = MemListHash[i];
		while(next)
		{
			HASHNODE *temp = next->next;
			if(next->data)
			{
				DEBUGPRINT("- To remove element from bucket %d\n",i);
	            user_fn( next->data, data );
			}
			next = temp;
			ThreadSwitchWithDelay();
		}
	}
	return ;
};

void NWPerlHashList::removeAll( ) const 
{

	for(int i=0; i<BUCKET_SIZE; i++) 
	{
		HASHNODE *next = MemListHash[i];
		while(next)
		{
			HASHNODE *temp = next->next;
			delete next;
			next = temp;
			ThreadSwitchWithDelay();
		}
	}
	return ;
};

/**
NWPerlKeyHashList::NWPerlKeyHashList()
{
	//initialize the hash list to null
	for(int i=0;i<BUCKET_SIZE;i++)
		MemListHash[i] = NULL;
	DEBUGPRINT("In constructor\n");
}
			
NWPerlKeyHashList::~NWPerlKeyHashList()
{
	DEBUGPRINT("In destructor\n");
	removeAll();
}

int
NWPerlKeyHashList::insert(void *key, void *ldata)
{
	KEYHASHNODE *list = new KEYHASHNODE;
	if (list) {
		list->key = key;
		list->data = ldata;
		list->next = NULL;
		unsigned long Bucket = ((unsigned long)key) % BUCKET_SIZE;
		if (MemListHash[Bucket]) {
			//Elements existing, insert at the beginning
			list->next = MemListHash[Bucket];
			MemListHash[Bucket] = list;
			DEBUGPRINT("Inserted to %d\n",Bucket);
		} else {
			//First element
			MemListHash[Bucket] = list;
			DEBUGPRINT("Inserted first time to %d\n",Bucket);
		}
		return 1;
	} else 
		return 0;
}

int
NWPerlKeyHashList::remove(void *key)
{
	unsigned long Bucket = ((unsigned long)key) % BUCKET_SIZE;
	KEYHASHNODE *list = MemListHash[Bucket];
	if (list) {
		int found = 0;
		KEYHASHNODE *next =list;
		KEYHASHNODE *prev =NULL;
		do 
		{
			if (list->key != key) {
				prev = list;
				list = list->next;
			}
			else {
				found = 1;
				next = list->next;
				delete list;
				list = NULL;
				if (prev) {
					prev->next = next;
				} else {
					MemListHash[Bucket]=next;
				}
				DEBUGPRINT("Removed element from %d\n",Bucket);
			}
		} while(list && !found);
//		if (!found)
//			ConsolePrintf("Couldn;t find %x in Bucket %d\n",key,Bucket);
		return(found);
	} 
	return 1;
}


void NWPerlKeyHashList::forAll( register void (*user_fn)(void *, void*), void *data ) const 
{

	for(int i=0; i<BUCKET_SIZE; i++) 
	{
		KEYHASHNODE *next = MemListHash[i];
		while(next)
		{
			KEYHASHNODE *temp = next->next;
			if(next->data)
			{
				DEBUGPRINT("- To remove element from bucket %d\n",i);
	            user_fn( next->data, data );
			}
			next = temp;
			ThreadSwitchWithDelay();
		}
	}
	return ;
};

int NWPerlKeyHashList::find(void *key,void **pData)
{
	for(int i=0; i<BUCKET_SIZE; i++) 
	{
		KEYHASHNODE *next = MemListHash[i];
		while(next)
		{
			if(next->key==key)
			{
				*pData=next->data;
				return 1;
			}
			next = next->next;
			ThreadSwitchWithDelay();
		}
	}
	return 0;
}

void NWPerlKeyHashList::removeAll( ) const 
{

	for(int i=0; i<BUCKET_SIZE; i++) 
	{
		KEYHASHNODE *next = MemListHash[i];
		while(next)
		{
			KEYHASHNODE *temp = next->next;
			delete next;
			next = temp;
			ThreadSwitchWithDelay();
		}
	}
	return ;
};
**/
@


1.1.1.1
log
@Import OpenBSD 3.3 source repository from CTM 3132 the first time
This opens an OpenBSD-mirabile (aka MirBSD) repository.

### MirBSD is:
# Copyright (c) 1982-2003 by Thorsten "mirabile" Glaser <x86@@ePost.de>
# Copyright © 1968-2003  The authors of And contributors to UNIX®, the
#       C Language, BSD/Berkeley Unix; 386BSD, NetBSD 1.1 and OpenBSD.
#
# Anyone who obtained a copy of this work is hereby permitted to freely use,
# distribute, modify, merge, sublicence, give away or sell it as long as the
# authors are given due credit and the following notice is retained:
#
# This work is provided "as is", with no explicit or implicit warranty what-
# soever. Use it only at your own risk. In no event may an author or contri-
# butor be held liable for any damage, directly or indirectly, that origina-
# ted through or is caused by creation or modification of this work.

MirBSD is my private tree. MirBSD does not differ very much from OpenBSD
and intentionally tracks OpenBSD. That's why it _is_ OpenBSD, just not the
official one. It's like with DarrenBSD.

At time of this writing, no advertising for MirBSD must be done,
because the advertising clause has not yet been sorted out.

http://templeofhate.com/tglaser/MirBSD/index.php
@
text
@@
