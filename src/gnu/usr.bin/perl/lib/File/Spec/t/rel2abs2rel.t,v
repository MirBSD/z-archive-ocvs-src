head	1.1;
branch	1.1.1;
access;
symbols
	tg-mergetmp-mirosx-1:1.1.1.2
	tg-mergefixes-1-branch:1.1.1.2.0.8
	tg-mergefixes-1-base:1.1.1.2
	MIROS_X:1.1.1.2.0.6
	MIROS_X_BASE:1.1.1.2
	tg-mergetmp-3:1.1.1.2
	MIRBSD_XP_MIRPPC:1.1.1.2.0.4
	cvs-200410231830:1.1.1.2
	MIRBSD_XP_SPARC_BASE:1.1.1.2
	MIRBSD_XP_SPARC:1.1.1.2.0.2
	cvs-200406091940:1.1.1.2
	MIRBSD_7quater:1.1.1.1
	cvs-200405160640:1.1.1.2
	cvs-200401271800:1.1.1.2
	cvs-200401261630:1.1.1.2
	cvs-200401021645:1.1.1.2
	MIRBSD_7_ALPHA:1.1.1.1.0.6
	MIRBSD_7:1.1.1.1.0.4
	cvs-200312222040:1.1.1.2
	cvs-200312031730:1.1.1.2
	MIRBSD_7ter:1.1.1.1
	MIRBSD_7_DEV:1.1.1.1.0.2
	cvs-200310020700:1.1.1.1
	cvs-200309271030:1.1.1.1
	cvs-200309251530:1.1.1.1
	cvs-200308302005:1.1.1.1
	cvs-200308171200:1.1.1.1
	ctm-3496:1.1.1.1
	ctm-3449:1.1.1.1
	ctm-3437:1.1.1.1
	cvs-200307191805:1.1.1.1
	ctm-3425:1.1.1.1
	cvs-200307091500:1.1.1.1
	ctm-3389:1.1.1.1
	cvs-200306291430:1.1.1.1
	ctm-3341:1.1.1.1
	MIRBSD_5:1.1.1.1
	cvs-200306082100:1.1.1.1
	ctm-3316:1.1.1.1
	ctm-3272:1.1.1.1
	ctm-3264:1.1.1.1
	cvs-200305071630:1.1.1.1
	MIRBSD_4:1.1.1.1
	ctm-3203:1.1.1.1
	cvs-20030410-1130:1.1.1.1
	ctm-3155:1.1.1.1
	ctm-3132:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@# @;


1.1
date	2003.03.22.17.43.18;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.03.22.17.43.18;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2003.12.03.17.55.45;	author tg;	state Stab;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@#!./perl -w

# Herein we apply abs2rel, rel2abs and canonpath against various real
# world files and make sure it all actually works.

BEGIN {
    chdir 't';
    @@INC = '../lib';
}
BEGIN {                                # Set up a tiny script file
    open(F, ">rel2abs2rel$$.pl")
      or die "Can't open rel2abs2rel$$.pl file for script -- $!\n";
    print F qq(print "ok\\n"\n);
    close(F);
}
END {
    unlink("rel2abs2rel$$.pl");
    unlink("rel2abs2rel$$.tmp");
}

use Config;

use Test::More tests => 5;
use File::Spec;

# Change 'perl' to './perl' so the shell doesn't go looking through PATH.
sub safe_rel {
    my($perl) = shift;
    $perl = File::Spec->catfile(File::Spec->curdir, $perl) unless
      File::Spec->file_name_is_absolute($perl);

    return $perl;
}
# Make a putative perl binary say "ok\n". We have to do it this way
# because the filespec of the binary may contain characters that a
# command interpreter considers special, so we can't use the obvious
# `$perl -le "print 'ok'"`. And, for portability, we can't use fork().
sub sayok{
    my $perl = shift;
    open(STDOUTDUP, '>&STDOUT');
    open(STDOUT, ">rel2abs2rel$$.tmp")
        or die "Can't open scratch file rel2abs2rel$$.tmp -- $!\n";
    system($perl, "rel2abs2rel$$.pl");
    open(STDOUT, '>&STDOUTDUP');
    close(STDOUTDUP);
    open(F, "rel2abs2rel$$.tmp");
    local $/ = undef;
    my $output = <F>;
    close(F);
    return $output;
}

# Here we make sure File::Spec can properly deal with executables.
# VMS has some trouble with these.
my $perl = safe_rel($^X);
is( sayok($perl), "ok\n",   '`` works' );

$perl = File::Spec->rel2abs($^X);
is( sayok($perl), "ok\n",   '`` works' );

$perl = File::Spec->canonpath($perl);
is( sayok($perl), "ok\n",   'rel2abs($^X)' );

$perl = safe_rel(File::Spec->abs2rel($perl));
is( sayok($perl), "ok\n",   'canonpath on abs executable' );

$perl = safe_rel(File::Spec->canonpath($^X));
is(sayok($perl), "ok\n",   'canonpath on rel executable' );
@


1.1.1.1
log
@Import OpenBSD 3.3 source repository from CTM 3132 the first time
This opens an OpenBSD-mirabile (aka MirBSD) repository.

### MirBSD is:
# Copyright (c) 1982-2003 by Thorsten "mirabile" Glaser <x86@@ePost.de>
# Copyright © 1968-2003  The authors of And contributors to UNIX®, the
#       C Language, BSD/Berkeley Unix; 386BSD, NetBSD 1.1 and OpenBSD.
#
# Anyone who obtained a copy of this work is hereby permitted to freely use,
# distribute, modify, merge, sublicence, give away or sell it as long as the
# authors are given due credit and the following notice is retained:
#
# This work is provided "as is", with no explicit or implicit warranty what-
# soever. Use it only at your own risk. In no event may an author or contri-
# butor be held liable for any damage, directly or indirectly, that origina-
# ted through or is caused by creation or modification of this work.

MirBSD is my private tree. MirBSD does not differ very much from OpenBSD
and intentionally tracks OpenBSD. That's why it _is_ OpenBSD, just not the
official one. It's like with DarrenBSD.

At time of this writing, no advertising for MirBSD must be done,
because the advertising clause has not yet been sorted out.

http://templeofhate.com/tglaser/MirBSD/index.php
@
text
@@


1.1.1.2
log
@Import selected parts of the OpenBSD base system:
 * vnd change - you'll have to re-run MAKEDEV after booting a new kernel
 * misc. changes in /etc, mostly user related
 * Perl 5.8.2 (diff to MirPorts will be committed RSN)
 * some changes to binutils
 * Updates in bc and dc
@
text
@d1 1
a1 1
#!/usr/bin/perl -w
d3 2
a4 7
# Here we make sure File::Spec can properly deal with executables.
# VMS has some trouble with these.

use Test::More (-x $^X
		? (tests => 5)
		: (skip_all => "Can't find an executable file")
	       );
d6 4
a10 1
    local *F;
d17 2
a18 2
    1 while unlink("rel2abs2rel$$.pl");
    1 while unlink("rel2abs2rel$$.tmp");
d23 1
a45 2

    local *F;
d53 2
a54 2
print "# Checking manipulations of \$^X=$^X\n";

d56 1
a56 1
is( sayok($perl), "ok\n",   "`$perl rel2abs2rel$$.pl` works" );
d59 1
a59 1
is( sayok($perl), "ok\n",   "`$perl rel2abs2rel$$.pl` works" );
d62 1
a62 1
is( sayok($perl), "ok\n",   "canonpath(rel2abs($^X)) = $perl" );
d65 1
a65 1
is( sayok($perl), "ok\n",   "safe_rel(abs2rel(canonpath(rel2abs($^X)))) = $perl" );
d68 1
a68 1
is( sayok($perl), "ok\n",   "safe_rel(canonpath($^X)) = $perl" );
@

