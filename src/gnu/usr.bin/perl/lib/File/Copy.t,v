head	1.1;
branch	1.1.1;
access;
symbols
	tg-mergetmp-mirosx-1:1.1.1.2
	tg-mergefixes-1-branch:1.1.1.2.0.8
	tg-mergefixes-1-base:1.1.1.2
	MIROS_X:1.1.1.2.0.6
	MIROS_X_BASE:1.1.1.2
	tg-mergetmp-3:1.1.1.2
	MIRBSD_XP_MIRPPC:1.1.1.2.0.4
	cvs-200410231830:1.1.1.2
	MIRBSD_XP_SPARC_BASE:1.1.1.2
	MIRBSD_XP_SPARC:1.1.1.2.0.2
	cvs-200406091940:1.1.1.2
	MIRBSD_7quater:1.1.1.1
	cvs-200405160640:1.1.1.2
	cvs-200401271800:1.1.1.1
	cvs-200401261630:1.1.1.1
	cvs-200401021645:1.1.1.1
	MIRBSD_7_ALPHA:1.1.1.1.0.6
	MIRBSD_7:1.1.1.1.0.4
	cvs-200312222040:1.1.1.1
	cvs-200312031730:1.1.1.1
	MIRBSD_7ter:1.1.1.1
	MIRBSD_7_DEV:1.1.1.1.0.2
	cvs-200310020700:1.1.1.1
	cvs-200309271030:1.1.1.1
	cvs-200309251530:1.1.1.1
	cvs-200308302005:1.1.1.1
	cvs-200308171200:1.1.1.1
	ctm-3496:1.1.1.1
	ctm-3449:1.1.1.1
	ctm-3437:1.1.1.1
	cvs-200307191805:1.1.1.1
	ctm-3425:1.1.1.1
	cvs-200307091500:1.1.1.1
	ctm-3389:1.1.1.1
	cvs-200306291430:1.1.1.1
	ctm-3341:1.1.1.1
	MIRBSD_5:1.1.1.1
	cvs-200306082100:1.1.1.1
	ctm-3316:1.1.1.1
	ctm-3272:1.1.1.1
	ctm-3264:1.1.1.1
	cvs-200305071630:1.1.1.1
	MIRBSD_4:1.1.1.1
	ctm-3203:1.1.1.1
	cvs-20030410-1130:1.1.1.1
	ctm-3155:1.1.1.1
	ctm-3132:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@# @;


1.1
date	2003.03.22.17.43.14;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.03.22.17.43.14;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2004.05.16.07.57.35;	author tg;	state Stab;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@#!./perl

BEGIN {
    chdir 't' if -d 't';
    @@INC = '../lib';
    push @@INC, "::lib:$MacPerl::Architecture" if $^O eq 'MacOS';
}

$| = 1;

my @@pass = (0,1);
my $tests = $^O eq 'MacOS' ? 15 : 12;
printf "1..%d\n", $tests * scalar(@@pass);

use File::Copy;

for my $pass (@@pass) {

  my $loopconst = $pass*$tests;

  # First we create a file
  open(F, ">file-$$") or die;
  binmode F; # for DOSISH platforms, because test 3 copies to stdout
  printf F "ok %d\n", 3 + $loopconst;
  close F;

  copy "file-$$", "copy-$$";

  open(F, "copy-$$") or die;
  $foo = <F>;
  close(F);

  print "not " if -s "file-$$" != -s "copy-$$";
  printf "ok %d\n", 1 + $loopconst;

  print "not " unless $foo eq sprintf "ok %d\n", 3+$loopconst;
  printf "ok %d\n", 2+$loopconst;

  binmode STDOUT unless $^O eq 'VMS'; # Copy::copy works in binary mode
  copy "copy-$$", \*STDOUT;
  unlink "copy-$$" or die "unlink: $!";

  open(F,"file-$$");
  copy(*F, "copy-$$");
  open(R, "copy-$$") or die "open copy-$$: $!"; $foo = <R>; close(R);
  print "not " unless $foo eq sprintf "ok %d\n", 3+$loopconst;
  printf "ok %d\n", 4+$loopconst;
  unlink "copy-$$" or die "unlink: $!";
  open(F,"file-$$");
  copy(\*F, "copy-$$");
  close(F) or die "close: $!";
  open(R, "copy-$$") or die; $foo = <R>; close(R) or die "close: $!";
  print "not " unless $foo eq sprintf "ok %d\n", 3+$loopconst;
  printf "ok %d\n", 5+$loopconst;
  unlink "copy-$$" or die "unlink: $!";

  require IO::File;
  $fh = IO::File->new(">copy-$$") or die "Cannot open copy-$$:$!";
  binmode $fh or die;
  copy("file-$$",$fh);
  $fh->close or die "close: $!";
  open(R, "copy-$$") or die; $foo = <R>; close(R);
  print "# foo=`$foo'\nnot " unless $foo eq sprintf "ok %d\n", 3+$loopconst;
  printf "ok %d\n", 6+$loopconst;
  unlink "copy-$$" or die "unlink: $!";
  require FileHandle;
  my $fh = FileHandle->new(">copy-$$") or die "Cannot open copy-$$:$!";
  binmode $fh or die;
  copy("file-$$",$fh);
  $fh->close;
  open(R, "copy-$$") or die; $foo = <R>; close(R);
  print "not " unless $foo eq sprintf "ok %d\n", 3+$loopconst;
  printf "ok %d\n", 7+$loopconst;
  unlink "file-$$" or die "unlink: $!";

  print "# moved missing file.\nnot " if move("file-$$", "copy-$$");
  print "# target disappeared.\nnot " if not -e "copy-$$";
  printf "ok %d\n", 8+$loopconst;

  move "copy-$$", "file-$$" or print "# move did not succeed.\n";
  print "# not moved: $!\nnot " unless -e "file-$$" and not -e "copy-$$";
  open(R, "file-$$") or die; $foo = <R>; close(R);
  print "# foo=`$foo'\nnot " unless $foo eq sprintf "ok %d\n", 3+$loopconst;
  printf "ok %d\n", 9+$loopconst;

  if ($^O eq 'MacOS') {
	
    copy "file-$$", "lib";	
    open(R, ":lib:file-$$") or die; $foo = <R>; close(R);
    print "not " unless $foo eq sprintf "ok %d\n", 3+$loopconst;
    printf "ok %d\n", 10+$loopconst;
    unlink ":lib:file-$$" or die "unlink: $!";
	
    copy "file-$$", ":lib";	
    open(R, ":lib:file-$$") or die; $foo = <R>; close(R);
    print "not " unless $foo eq sprintf "ok %d\n", 3+$loopconst;
    printf "ok %d\n", 11+$loopconst;
    unlink ":lib:file-$$" or die "unlink: $!";
	
    copy "file-$$", ":lib:";	
    open(R, ":lib:file-$$") or die; $foo = <R>; close(R);
    print "not " unless $foo eq sprintf "ok %d\n", 3+$loopconst;
    printf "ok %d\n", 12+$loopconst;
    unlink ":lib:file-$$" or die "unlink: $!";
	
    unless (-e 'lib:') { # make sure there's no volume called 'lib'
	undef $@@;
	eval { (copy "file-$$", "lib:") || die "'lib:' is not a volume name"; };
	print "# Died: $@@";
	print "not " unless ( $@@ =~ m|'lib:' is not a volume name| );
    }
    printf "ok %d\n", 13+$loopconst;

    move "file-$$", ":lib:";
    open(R, ":lib:file-$$") or die "open :lib:file-$$: $!"; $foo = <R>; close(R);
    print "not " unless $foo eq sprintf("ok %d\n", 3+$loopconst)
        and not -e "file-$$";;
    printf "ok %d\n", 14+$loopconst;

    eval { copy("copy-$$", "copy-$$") };
    printf "ok %d\n", 15+$loopconst
	unless $@@ =~ /are identical/ && -s "copy-$$";

    unlink ":lib:file-$$" or die "unlink: $!";
  
  } else {
    
    copy "file-$$", "lib";
    open(R, "lib/file-$$") or die; $foo = <R>; close(R);
    print "not " unless $foo eq sprintf "ok %d\n", 3+$loopconst;
    printf "ok %d\n", 10+$loopconst;
    unlink "lib/file-$$" or die "unlink: $!";

    move "file-$$", "lib";
    open(R, "lib/file-$$") or die "open lib/file-$$: $!"; $foo = <R>; close(R);
    print "not " unless $foo eq sprintf("ok %d\n", 3+$loopconst)
        and not -e "file-$$";;
    printf "ok %d\n", 11+$loopconst;

    eval { copy("copy-$$", "copy-$$") };
    printf "ok %d\n", 12+$loopconst
	unless $@@ =~ /are identical/ && -s "copy-$$";

    unlink "lib/file-$$" or die "unlink: $!";
  
  }
}


END {
    1 while unlink "file-$$";
    if ($^O eq 'MacOS') {
        1 while unlink ":lib:file-$$";
    } else {
        1 while unlink "lib/file-$$";
    }
}
@


1.1.1.1
log
@Import OpenBSD 3.3 source repository from CTM 3132 the first time
This opens an OpenBSD-mirabile (aka MirBSD) repository.

### MirBSD is:
# Copyright (c) 1982-2003 by Thorsten "mirabile" Glaser <x86@@ePost.de>
# Copyright © 1968-2003  The authors of And contributors to UNIX®, the
#       C Language, BSD/Berkeley Unix; 386BSD, NetBSD 1.1 and OpenBSD.
#
# Anyone who obtained a copy of this work is hereby permitted to freely use,
# distribute, modify, merge, sublicence, give away or sell it as long as the
# authors are given due credit and the following notice is retained:
#
# This work is provided "as is", with no explicit or implicit warranty what-
# soever. Use it only at your own risk. In no event may an author or contri-
# butor be held liable for any damage, directly or indirectly, that origina-
# ted through or is caused by creation or modification of this work.

MirBSD is my private tree. MirBSD does not differ very much from OpenBSD
and intentionally tracks OpenBSD. That's why it _is_ OpenBSD, just not the
official one. It's like with DarrenBSD.

At time of this writing, no advertising for MirBSD must be done,
because the advertising clause has not yet been sorted out.

http://templeofhate.com/tglaser/MirBSD/index.php
@
text
@@


1.1.1.2
log
@large-scale import of OpenBSD 3.5-current source base including many fixes
note: from now, we will not be binary compatible with OpenBSD apps any
longer (due to syscall numbering differences); both an OpenBSD compat and
a conversion tool for old MirOS #7 apps will be delivered later.

The src/ tree is locked from now.
@
text
@d12 1
a12 1
my $tests = $^O eq 'MacOS' ? 17 : 14;
a15 1
use Config;
a85 1
  my $test_i;
d125 1
a125 2

    $test_i = 15;
d145 1
a145 16

    $test_i = 12;
  }

  if ($Config{d_symlink}) {
    open(F, ">file-$$") or die $!;
    print F "dummy content\n";
    close F;
    symlink("file-$$", "symlink-$$") or die $!;
    eval { copy("file-$$", "symlink-$$") };
    print "not " if $@@ !~ /are identical/ || -z "file-$$";
    printf "ok %d\n", (++$test_i)+$loopconst;
    unlink "symlink-$$";
    unlink "file-$$";
  } else {
    printf "ok %d # Skipped: no symlinks on this platform\n", (++$test_i)+$loopconst;
a146 19

  if ($Config{d_link}) {
    if ($^O ne 'MSWin32') {
      open(F, ">file-$$") or die $!;
      print F "dummy content\n";
      close F;
      link("file-$$", "hardlink-$$") or die $!;
      eval { copy("file-$$", "hardlink-$$") };
      print "not " if $@@ !~ /are identical/ || -z "file-$$";
      printf "ok %d\n", (++$test_i)+$loopconst;
      unlink "hardlink-$$";
      unlink "file-$$";
    } else {
      printf "ok %d # Skipped: can't test hardlinks on MSWin32\n", (++$test_i)+$loopconst;
    }
  } else {
    printf "ok %d # Skipped: no hardlinks on this platform\n", (++$test_i)+$loopconst;
  }

@

