head	1.1;
branch	1.1.1;
access;
symbols
	tg-mergetmp-mirosx-1:1.1.1.1
	tg-mergefixes-1-branch:1.1.1.1.0.14
	tg-mergefixes-1-base:1.1.1.1
	MIROS_X:1.1.1.1.0.12
	MIROS_X_BASE:1.1.1.1
	tg-mergetmp-3:1.1.1.1
	MIRBSD_XP_MIRPPC:1.1.1.1.0.10
	cvs-200410231830:1.1.1.1
	MIRBSD_XP_SPARC_BASE:1.1.1.1
	MIRBSD_XP_SPARC:1.1.1.1.0.8
	cvs-200406091940:1.1.1.1
	MIRBSD_7quater:1.1.1.1
	cvs-200405160640:1.1.1.1
	cvs-200401271800:1.1.1.1
	cvs-200401261630:1.1.1.1
	cvs-200401021645:1.1.1.1
	MIRBSD_7_ALPHA:1.1.1.1.0.6
	MIRBSD_7:1.1.1.1.0.4
	cvs-200312222040:1.1.1.1
	cvs-200312031730:1.1.1.1
	MIRBSD_7ter:1.1.1.1
	MIRBSD_7_DEV:1.1.1.1.0.2
	cvs-200310020700:1.1.1.1
	cvs-200309271030:1.1.1.1
	cvs-200309251530:1.1.1.1
	cvs-200308302005:1.1.1.1
	cvs-200308171200:1.1.1.1
	ctm-3496:1.1.1.1
	ctm-3449:1.1.1.1
	ctm-3437:1.1.1.1
	cvs-200307191805:1.1.1.1
	ctm-3425:1.1.1.1
	cvs-200307091500:1.1.1.1
	ctm-3389:1.1.1.1
	cvs-200306291430:1.1.1.1
	ctm-3341:1.1.1.1
	MIRBSD_5:1.1.1.1
	cvs-200306082100:1.1.1.1
	ctm-3316:1.1.1.1
	ctm-3272:1.1.1.1
	ctm-3264:1.1.1.1
	cvs-200305071630:1.1.1.1
	MIRBSD_4:1.1.1.1
	ctm-3203:1.1.1.1
	cvs-20030410-1130:1.1.1.1
	ctm-3155:1.1.1.1
	ctm-3132:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@# @;


1.1
date	2003.03.22.17.43.25;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.03.22.17.43.25;	author tg;	state Stab;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@#!./perl

my $file;

BEGIN {
        $file = $0;
        chdir 't' if -d 't';

        if ( $ENV{PERL_CORE} ) {
           @@INC = '../lib';
        }
}

END {
	# let VMS whack all versions
	1 while unlink('tcout');
}

use Test::More;

# these names are hardcoded in Term::Cap
my $files = join '',
    grep { -f $_ }
	( $ENV{HOME} . '/.termcap', # we assume pretty UNIXy system anyway
	  '/etc/termcap', 
	  '/usr/share/misc/termcap' );
unless( $files || $^O eq 'VMS') {
    plan skip_all => 'no termcap available to test';
}
else {
    plan tests => 44;
}

use_ok( 'Term::Cap' );

local (*TCOUT, *OUT);
my $out = tie *OUT, 'TieOut';
my $writable = 1;

if (open(TCOUT, ">tcout")) {
	print TCOUT <DATA>;
	close TCOUT;
} else {
	$writable = 0;
}

# termcap_path -- the names are hardcoded in Term::Cap
$ENV{TERMCAP} = '';
my $path = join '', Term::Cap::termcap_path();
is( $path, $files, 'termcap_path() should find default files' );

SKIP: {
	# this is ugly, but -f $0 really *ought* to work
	skip("-f $file fails, some tests difficult now", 2) unless -f $file;

	$ENV{TERMCAP} = $ENV{TERMPATH} = $file;
	ok( grep($file, Term::Cap::termcap_path()), 
		'termcap_path() should find file from $ENV{TERMCAP}' );

	$ENV{TERMCAP} = '/';
	ok( grep($file, Term::Cap::termcap_path()), 
		'termcap_path() should find file from $ENV{TERMPATH}' );
}

# make a Term::Cap "object"
my $t = {
	PADDING => 1,
	_pc => 'pc',
};
bless($t, 'Term::Cap' );

# see if Tpad() works
is( $t->Tpad(), undef, 'Tpad() should return undef with no arguments' );
is( $t->Tpad('x'), 'x', 'Tpad() should return strings verbatim with no match' );
is( $t->Tpad( '1*a', 2 ), 'apcpc', 'Tpad() should pad paddable strings' );

$t->{PADDING} = 2;
is( $t->Tpad( '1*a', 3, *OUT ), 'apcpc', 'Tpad() should perform pad math' );
is( $out->read(), 'apcpc', 'Tpad() should write to filehandle when passed' );

is( $t->Tputs('PADDING'), 2, 'Tputs() should return existing value' );
is( $t->Tputs('pc', 2), 'pc', 'Tputs() should delegate to Tpad()' );
$t->Tputs('pc', 1, *OUT);
is( $t->{pc}, 'pc', 'Tputs() should cache pc value when asked' );
is( $out->read(), 'pc', 'Tputs() should write to filehandle when passed' );

eval { $t->Trequire( 'pc' ) };
is( $@@, '', 'Trequire() should finds existing cap' );
eval { $t->Trequire( 'nonsense' ) };
like( $@@, qr/support: \(nonsense\)/, 
	'Trequire() should croak with unsupported cap' );

my $warn;
local $SIG{__WARN__} = sub {
	$warn = $_[0];
};

# test the first few features by forcing Tgetent() to croak (line 156)
undef $ENV{TERM};
my $vals = {};
eval { local $^W = 1; $t = Term::Cap->Tgetent($vals) };
like( $@@, qr/TERM not set/, 'Tgetent() should croaks without TERM' );
like( $warn, qr/OSPEED was not set/, 'Tgetent() should set default OSPEED' );

is( $vals->{PADDING}, 10000/9600, 'Default OSPEED implies default PADDING' );

$warn = 'xxxx';
eval { local $^W = 0; $t = Term::Cap->Tgetent($vals) };
is($warn,'xxxx',"Tgetent() doesn't carp() without warnings on");

# check values for very slow speeds
$vals->{OSPEED} = 1;
$warn = '';
eval { $t = Term::Cap->Tgetent($vals) };
is( $warn, '', 'Tgetent() should not work if OSPEED is provided' );
is( $vals->{PADDING}, 200, 'Tgetent() should set slow PADDING when needed' );


SKIP: {
        skip('Tgetent() bad termcap test, since using a fixed termcap',1)
              if $^O eq 'VMS';
        # now see if lines 177 or 180 will fail
        $ENV{TERM} = 'foo';
        $ENV{TERMPATH} = '!';
        $ENV{TERMCAP} = '';
        eval { $t = Term::Cap->Tgetent($vals) };
        isn't( $@@, '', 'Tgetent() should catch bad termcap file' );
}

SKIP: {
	skip( "Can't write 'tcout' file for tests", 9 ) unless $writable;

	# it won't find the termtype in this fake file, so it should croak
	$vals->{TERM} = 'quux';
	$ENV{TERMPATH} = 'tcout';
	eval { $t = Term::Cap->Tgetent($vals) };
	like( $@@, qr/failed termcap/, 'Tgetent() should die with bad termcap' );

	# it shouldn't try to read one file more than 32(!) times
	# see __END__ for a really awful termcap example
	$ENV{TERMPATH} = join(' ', ('tcout') x 33);
	$vals->{TERM} = 'bar';
	eval { $t = Term::Cap->Tgetent($vals) };
	like( $@@, qr/failed termcap loop/, 'Tgetent() should catch deep recursion');

	# now let it read a fake termcap file, and see if it sets properties 
	$ENV{TERMPATH} = 'tcout';
	$vals->{TERM} = 'baz';
	$t = Term::Cap->Tgetent($vals);
	is( $t->{_f1}, 1, 'Tgetent() should set a single field correctly' );
	is( $t->{_f2}, 1, 'Tgetent() should set another field on the same line' );
	is( $t->{_no}, '', 'Tgetent() should set a blank field correctly' );
	is( $t->{_k1}, 'v1', 'Tgetent() should set a key value pair correctly' );
	like( $t->{_k2}, qr/v2\\\n2/, 'Tgetent() should set and translate pairs' );

	# and it should have set these two fields
	is( $t->{_pc}, "\0", 'should set _pc field correctly' );
	is( $t->{_bc}, "\b", 'should set _bc field correctly' );
}

# Tgoto has comments on the expected formats
$t->{_test} = "a%d";
is( $t->Tgoto('test', '', 1, *OUT), 'a1', 'Tgoto() should handle %d code' );
is( $out->read(), 'a1', 'Tgoto() should print to filehandle if passed' );

$t->{_test} = "a%.";
like( $t->Tgoto('test', '', 1), qr/^a\x01/, 'Tgoto() should handle %.' );
if (ord('A') == 193) {  # EBCDIC platform
like( $t->Tgoto('test', '', 0), qr/\x81\x01\x16/, 
	'Tgoto() should handle %. and magic' );
} else { # ASCII platform
like( $t->Tgoto('test', '', 0), qr/\x61\x01\x08/, 
	'Tgoto() should handle %. and magic' );
}

$t->{_test} = 'a%+';
like( $t->Tgoto('test', '', 1), qr/a\x01/, 'Tgoto() should handle %+' );
$t->{_test} = 'a%+a';
is( $t->Tgoto('test', '', 1), 'ab', 'Tgoto() should handle %+char' );
$t->{_test} .= 'a' x 99;
like( $t->Tgoto('test', '', 1), qr/ba{98}/, 
	'Tgoto() should substr()s %+ if needed' );

$t->{_test} = '%ra%d';
is( $t->Tgoto('test', 1, ''), 'a1', 'Tgoto() should swaps params with %r' );

$t->{_test} = 'a%>11bc';
is( $t->Tgoto('test', '', 1), 'abc', 'Tgoto() should unpack args with %>' );

$t->{_test} = 'a%21';
is( $t->Tgoto('test'), 'a001', 'Tgoto() should format with %2' );

$t->{_test} = 'a%31';
is( $t->Tgoto('test'), 'a0001', 'Tgoto() should also formats with %3' );

$t->{_test} = '%ia%21';
is( $t->Tgoto('test', '', 1), 'a021', 'Tgoto() should increment args with %i' );

$t->{_test} = '%z';
is( $t->Tgoto('test'), 'OOPS', 'Tgoto() should catch invalid args' );

# and this is pretty standard
package TieOut;

sub TIEHANDLE {
	bless( \(my $self), $_[0] );
}

sub PRINT {
	my $self = shift;
	$$self .= join('', @@_);
}

sub read {
	my $self = shift;
	substr( $$self, 0, length($$self), '' );
}

__END__
bar: :tc=bar: \
baz: \
:f1: :f2: \
:no@@ \
:k1#v1\
:k2=v2\\n2
@


1.1.1.1
log
@Import OpenBSD 3.3 source repository from CTM 3132 the first time
This opens an OpenBSD-mirabile (aka MirBSD) repository.

### MirBSD is:
# Copyright (c) 1982-2003 by Thorsten "mirabile" Glaser <x86@@ePost.de>
# Copyright © 1968-2003  The authors of And contributors to UNIX®, the
#       C Language, BSD/Berkeley Unix; 386BSD, NetBSD 1.1 and OpenBSD.
#
# Anyone who obtained a copy of this work is hereby permitted to freely use,
# distribute, modify, merge, sublicence, give away or sell it as long as the
# authors are given due credit and the following notice is retained:
#
# This work is provided "as is", with no explicit or implicit warranty what-
# soever. Use it only at your own risk. In no event may an author or contri-
# butor be held liable for any damage, directly or indirectly, that origina-
# ted through or is caused by creation or modification of this work.

MirBSD is my private tree. MirBSD does not differ very much from OpenBSD
and intentionally tracks OpenBSD. That's why it _is_ OpenBSD, just not the
official one. It's like with DarrenBSD.

At time of this writing, no advertising for MirBSD must be done,
because the advertising clause has not yet been sorted out.

http://templeofhate.com/tglaser/MirBSD/index.php
@
text
@@
