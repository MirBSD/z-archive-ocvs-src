head	1.1;
branch	1.1.1;
access;
symbols
	tg-mergetmp-mirosx-1:1.1.1.2
	tg-mergefixes-1-branch:1.1.1.2.0.8
	tg-mergefixes-1-base:1.1.1.2
	MIROS_X:1.1.1.2.0.6
	MIROS_X_BASE:1.1.1.2
	tg-mergetmp-3:1.1.1.2
	MIRBSD_XP_MIRPPC:1.1.1.2.0.4
	cvs-200410231830:1.1.1.2
	MIRBSD_XP_SPARC_BASE:1.1.1.2
	MIRBSD_XP_SPARC:1.1.1.2.0.2
	cvs-200406091940:1.1.1.2
	MIRBSD_7quater:1.1.1.1
	cvs-200405160640:1.1.1.2
	cvs-200401271800:1.1.1.2
	cvs-200401261630:1.1.1.2
	cvs-200401021645:1.1.1.2
	MIRBSD_7_ALPHA:1.1.1.1.0.6
	MIRBSD_7:1.1.1.1.0.4
	cvs-200312222040:1.1.1.2
	cvs-200312031730:1.1.1.2
	MIRBSD_7ter:1.1.1.1
	MIRBSD_7_DEV:1.1.1.1.0.2
	cvs-200310020700:1.1.1.1
	cvs-200309271030:1.1.1.1
	cvs-200309251530:1.1.1.1
	cvs-200308302005:1.1.1.1
	cvs-200308171200:1.1.1.1
	ctm-3496:1.1.1.1
	ctm-3449:1.1.1.1
	ctm-3437:1.1.1.1
	cvs-200307191805:1.1.1.1
	ctm-3425:1.1.1.1
	cvs-200307091500:1.1.1.1
	ctm-3389:1.1.1.1
	cvs-200306291430:1.1.1.1
	ctm-3341:1.1.1.1
	MIRBSD_5:1.1.1.1
	cvs-200306082100:1.1.1.1
	ctm-3316:1.1.1.1
	ctm-3272:1.1.1.1
	ctm-3264:1.1.1.1
	cvs-200305071630:1.1.1.1
	MIRBSD_4:1.1.1.1
	ctm-3203:1.1.1.1
	cvs-20030410-1130:1.1.1.1
	ctm-3155:1.1.1.1
	ctm-3132:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@# @;


1.1
date	2003.03.22.17.43.14;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.03.22.17.43.14;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2003.12.03.17.55.42;	author tg;	state Stab;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@#!/usr/bin/perl -w

BEGIN {
    if( $ENV{PERL_CORE} ) {
        chdir 't' if -d 't';
        @@INC = '../lib';
    }
    else {
        unshift @@INC, 't/lib/';
    }
}
chdir 't';


use strict;

use Config;
use Cwd;
use File::Path;
use File::Basename;
use File::Spec;

use Test::More tests => 46;

BEGIN { use_ok( 'ExtUtils::Installed' ) }

my $mandirs =  !!$Config{man1direxp} + !!$Config{man3direxp};

# saves having to qualify package name for class methods
my $ei = bless( {}, 'ExtUtils::Installed' );

# _is_prefix
ok( $ei->_is_prefix('foo/bar', 'foo'),
	'_is_prefix() should match valid path prefix' );
ok( !$ei->_is_prefix('\foo\bar', '\bar'),
	'... should not match wrong prefix' );

# _is_type
ok( $ei->_is_type(0, 'all'), '_is_type() should be true for type of "all"' );

foreach my $path (qw( man1dir man3dir )) {
SKIP: {
	my $dir = $Config{$path.'exp'};
        skip("no man directory $path on this system", 2 ) unless $dir;

	my $file = $dir . '/foo';
	ok( $ei->_is_type($file, 'doc'),   "... should find doc file in $path" );
	ok( !$ei->_is_type($file, 'prog'), "... but not prog file in $path" );
    }
}

# VMS 5.6.1 doesn't seem to have $Config{prefixexp}
my $prefix = $Config{prefix} || $Config{prefixexp};

# You can concatenate /foo but not foo:, which defaults in the current 
# directory
$prefix = VMS::Filespec::unixify($prefix) if $^O eq 'VMS';

# ActivePerl 5.6.1/631 has $Config{prefixexp} as 'p:' for some reason
$prefix = $Config{prefix} if $prefix eq 'p:' && $^O eq 'MSWin32';

ok( $ei->_is_type( File::Spec->catfile($prefix, 'bar'), 'prog'),
	"... should find prog file under $prefix" );

SKIP: {
	skip('no man directories on this system', 1) unless $mandirs;
	is( $ei->_is_type('bar', 'doc'), 0, 
		'... should not find doc file outside path' );
}

ok( !$ei->_is_type('bar', 'prog'),
	'... nor prog file outside path' );
ok( !$ei->_is_type('whocares', 'someother'), '... nor other type anywhere' );

# _is_under
ok( $ei->_is_under('foo'), '_is_under() should return true with no dirs' );

my @@under = qw( boo bar baz );
ok( !$ei->_is_under('foo', @@under), '... should find no file not under dirs');
ok( $ei->_is_under('baz', @@under),  '... should find file under dir' );


my $wrotelist;

rmtree 'auto/FakeMod';
ok( mkpath('auto/FakeMod') );
END { rmtree 'auto/FakeMod' }

ok(open(PACKLIST, '>auto/FakeMod/.packlist'));
print PACKLIST 'list';
close PACKLIST;

ok(open(FAKEMOD, '>auto/FakeMod/FakeMod.pm'));

print FAKEMOD <<'FAKE';
package FakeMod;
use vars qw( $VERSION );
$VERSION = '1.1.1';
1;
FAKE

close FAKEMOD;

{
    # avoid warning and death by localizing glob
    local *ExtUtils::Installed::Config;
    my $fake_mod_dir = File::Spec->catdir(cwd(), 'auto', 'FakeMod');
    %ExtUtils::Installed::Config = (
        %Config,
        archlibexp	   => cwd(),
        sitearchexp	   => $fake_mod_dir,
    );

	# necessary to fool new()
	push @@INC, $fake_mod_dir;

	my $realei = ExtUtils::Installed->new();
    isa_ok( $realei, 'ExtUtils::Installed' );
    isa_ok( $realei->{Perl}{packlist}, 'ExtUtils::Packlist' );
    is( $realei->{Perl}{version}, $Config{version}, 
        'new() should set Perl version from %Config' );

	ok( exists $realei->{FakeMod}, 'new() should find modules with .packlists');
	isa_ok( $realei->{FakeMod}{packlist}, 'ExtUtils::Packlist' );
	is( $realei->{FakeMod}{version}, '1.1.1', 
		'... should find version in modules' );
}

# modules
$ei->{$_} = 1 for qw( abc def ghi );
is( join(' ', $ei->modules()), 'abc def ghi', 
	'modules() should return sorted keys' );

# This didn't work for a long time due to a sort in scalar context oddity.
is( $ei->modules, 3,    'modules() in scalar context' );

# files
$ei->{goodmod} = { 
	packlist => { 
                ($Config{man1direxp} ? 
                    (File::Spec->catdir($Config{man1direxp}, 'foo') => 1) : 
                        ()),
                ($Config{man3direxp} ? 
                    (File::Spec->catdir($Config{man3direxp}, 'bar') => 1) : 
                        ()),
                File::Spec->catdir($prefix, 'foobar') => 1,
		foobaz	=> 1,
	},
};

eval { $ei->files('badmod') };
like( $@@, qr/badmod is not installed/,'files() should croak given bad modname');
eval { $ei->files('goodmod', 'badtype' ) };
like( $@@, qr/type must be/,'files() should croak given bad type' );

my @@files;
SKIP: {
    skip('no man directory man1dir on this system', 2) 
      unless $Config{man1direxp}; 
    @@files = $ei->files('goodmod', 'doc', $Config{man1direxp});
    is( scalar @@files, 1, '... should find doc file under given dir' );
    is( (grep { /foo$/ } @@files), 1, '... checking file name' );
}
SKIP: {
    skip('no man directories on this system', 1) unless $mandirs;
    @@files = $ei->files('goodmod', 'doc');
    is( scalar @@files, $mandirs, '... should find all doc files with no dir' );
}

@@files = $ei->files('goodmod', 'prog', 'fake', 'fake2');
is( scalar @@files, 0, '... should find no doc files given wrong dirs' );
@@files = $ei->files('goodmod', 'prog');
is( scalar @@files, 1, '... should find doc file in correct dir' );
like( $files[0], qr/foobar[>\]]?$/, '... checking file name' );
@@files = $ei->files('goodmod');
is( scalar @@files, 2 + $mandirs, '... should find all files with no type specified' );
my %dirnames = map { lc($_) => dirname($_) } @@files;

# directories
my @@dirs = $ei->directories('goodmod', 'prog', 'fake');
is( scalar @@dirs, 0, 'directories() should return no dirs if no files found' );

SKIP: {
    skip('no man directories on this system', 1) unless $mandirs;
    @@dirs = $ei->directories('goodmod', 'doc');
    is( scalar @@dirs, $mandirs, '... should find all files files() would' );
}
@@dirs = $ei->directories('goodmod');
is( scalar @@dirs, 2 + $mandirs, '... should find all files files() would, again' );
@@files = sort map { exists $dirnames{lc($_)} ? $dirnames{lc($_)} : '' } @@files;
is( join(' ', @@files), join(' ', @@dirs), '... should sort output' );

# directory_tree
my $expectdirs = 
       ($mandirs == 2) && 
       (dirname($Config{man1direxp}) eq dirname($Config{man3direxp}))
       ? 3 : 2;
 
SKIP: {
    skip('no man directories on this system', 1) unless $mandirs;
    @@dirs = $ei->directory_tree('goodmod', 'doc', $Config{man1direxp} ?
       dirname($Config{man1direxp}) : dirname($Config{man3direxp}));
    is( scalar @@dirs, $expectdirs, 
        'directory_tree() should report intermediate dirs to those requested' );
}

my $fakepak = Fakepak->new(102);

$ei->{yesmod} = { 
	version		=> 101,
	packlist	=> $fakepak,
};

# these should all croak
foreach my $sub (qw( validate packlist version )) {
	eval { $ei->$sub('nomod') };
	like( $@@, qr/nomod is not installed/, 
		"$sub() should croak when asked about uninstalled module" );
}

# validate
is( $ei->validate('yesmod'), 'validated', 
	'validate() should return results of packlist validate() call' );

# packlist
is( ${ $ei->packlist('yesmod') }, 102, 
	'packlist() should report installed mod packlist' );

# version
is( $ei->version('yesmod'), 101, 
	'version() should report installed mod version' );

END {
	if ($wrotelist) {
		for my $file (qw( .packlist FakePak.pm )) {
			1 while unlink $file;
		}
		File::Path::rmtree('auto') or warn "Couldn't rmtree auto: $!";
	}
}

package Fakepak;

sub new {
	my $class = shift;
	bless(\(my $scalar = shift), $class);
}

sub validate {
	'validated'
}
@


1.1.1.1
log
@Import OpenBSD 3.3 source repository from CTM 3132 the first time
This opens an OpenBSD-mirabile (aka MirBSD) repository.

### MirBSD is:
# Copyright (c) 1982-2003 by Thorsten "mirabile" Glaser <x86@@ePost.de>
# Copyright © 1968-2003  The authors of And contributors to UNIX®, the
#       C Language, BSD/Berkeley Unix; 386BSD, NetBSD 1.1 and OpenBSD.
#
# Anyone who obtained a copy of this work is hereby permitted to freely use,
# distribute, modify, merge, sublicence, give away or sell it as long as the
# authors are given due credit and the following notice is retained:
#
# This work is provided "as is", with no explicit or implicit warranty what-
# soever. Use it only at your own risk. In no event may an author or contri-
# butor be held liable for any damage, directly or indirectly, that origina-
# ted through or is caused by creation or modification of this work.

MirBSD is my private tree. MirBSD does not differ very much from OpenBSD
and intentionally tracks OpenBSD. That's why it _is_ OpenBSD, just not the
official one. It's like with DarrenBSD.

At time of this writing, no advertising for MirBSD must be done,
because the advertising clause has not yet been sorted out.

http://templeofhate.com/tglaser/MirBSD/index.php
@
text
@@


1.1.1.2
log
@Import selected parts of the OpenBSD base system:
 * vnd change - you'll have to re-run MAKEDEV after booting a new kernel
 * misc. changes in /etc, mostly user related
 * Perl 5.8.2 (diff to MirPorts will be committed RSN)
 * some changes to binutils
 * Updates in bc and dc
@
text
@d12 1
a12 3

my $Is_VMS = $^O eq 'VMS';
chdir($Is_VMS ? 'BFD_TEST_ROOT:[t]' : 't');
d57 1
a57 1
$prefix = VMS::Filespec::unixify($prefix) if $Is_VMS;
d83 2
d87 1
a87 1
END { rmtree 'auto' }
d233 8
@

