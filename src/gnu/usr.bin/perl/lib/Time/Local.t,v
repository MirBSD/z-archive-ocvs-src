head	1.1;
branch	1.1.1;
access;
symbols
	tg-mergetmp-mirosx-1:1.1.1.3
	tg-mergefixes-1-branch:1.1.1.3.0.4
	tg-mergefixes-1-base:1.1.1.3
	MIROS_X:1.1.1.3.0.2
	MIROS_X_BASE:1.1.1.3
	tg-mergetmp-3:1.1.1.3
	MIRBSD_XP_MIRPPC:1.1.1.2.0.4
	cvs-200410231830:1.1.1.3
	MIRBSD_XP_SPARC_BASE:1.1.1.2
	MIRBSD_XP_SPARC:1.1.1.2.0.2
	cvs-200406091940:1.1.1.2
	MIRBSD_7quater:1.1.1.1
	cvs-200405160640:1.1.1.2
	cvs-200401271800:1.1.1.2
	cvs-200401261630:1.1.1.2
	cvs-200401021645:1.1.1.2
	MIRBSD_7_ALPHA:1.1.1.1.0.6
	MIRBSD_7:1.1.1.1.0.4
	cvs-200312222040:1.1.1.2
	cvs-200312031730:1.1.1.2
	MIRBSD_7ter:1.1.1.1
	MIRBSD_7_DEV:1.1.1.1.0.2
	cvs-200310020700:1.1.1.1
	cvs-200309271030:1.1.1.1
	cvs-200309251530:1.1.1.1
	cvs-200308302005:1.1.1.1
	cvs-200308171200:1.1.1.1
	ctm-3496:1.1.1.1
	ctm-3449:1.1.1.1
	ctm-3437:1.1.1.1
	cvs-200307191805:1.1.1.1
	ctm-3425:1.1.1.1
	cvs-200307091500:1.1.1.1
	ctm-3389:1.1.1.1
	cvs-200306291430:1.1.1.1
	ctm-3341:1.1.1.1
	MIRBSD_5:1.1.1.1
	cvs-200306082100:1.1.1.1
	ctm-3316:1.1.1.1
	ctm-3272:1.1.1.1
	ctm-3264:1.1.1.1
	cvs-200305071630:1.1.1.1
	MIRBSD_4:1.1.1.1
	ctm-3203:1.1.1.1
	cvs-20030410-1130:1.1.1.1
	ctm-3155:1.1.1.1
	ctm-3132:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@# @;


1.1
date	2003.03.22.17.43.25;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.03.22.17.43.25;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2003.12.03.17.56.16;	author tg;	state Stab;
branches;
next	1.1.1.3;

1.1.1.3
date	2004.10.23.18.41.51;	author tg;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@#!./perl

BEGIN {
    chdir 't' if -d 't';
    @@INC = '../lib';
}

use Time::Local;

# Set up time values to test
@@time =
  (
   #year,mon,day,hour,min,sec 
   [1970,  1,  2, 00, 00, 00],
   [1980,  2, 28, 12, 00, 00],
   [1980,  2, 29, 12, 00, 00],
   [1999, 12, 31, 23, 59, 59],
   [2000,  1,  1, 00, 00, 00],
   [2010, 10, 12, 14, 13, 12],
   [2020,  2, 29, 12, 59, 59],
   [2030,  7,  4, 17, 07, 06],
# The following test fails on a surprising number of systems
# so it is commented out. The end of the Epoch for a 32-bit signed
# implementation of time_t should be Jan 19, 2038  03:14:07 UTC.
#  [2038,  1, 17, 23, 59, 59],     # last full day in any tz
  );

# use vmsish 'time' makes for oddness around the Unix epoch
if ($^O eq 'VMS') { $time[0][2]++ }

print "1..", @@time * 2 + 5, "\n";

$count = 1;
for (@@time) {
    my($year, $mon, $mday, $hour, $min, $sec) = @@$_;
    $year -= 1900;
    $mon --;
    if ($^O eq 'vos' && $count == 1) {
     print "ok $count -- skipping 1970 test on VOS.\n";
    } else {
     my $time = timelocal($sec,$min,$hour,$mday,$mon,$year);
     # print scalar(localtime($time)), "\n";
     my($s,$m,$h,$D,$M,$Y) = localtime($time);

     if ($s == $sec &&
	 $m == $min &&
	 $h == $hour &&
	 $D == $mday &&
	 $M == $mon &&
	 $Y == $year
        ) {
	 print "ok $count\n";
     } else {
      print "not ok $count\n";
     }
    }
    $count++;

    # Test gmtime function
    if ($^O eq 'vos' && $count == 2) {
        print "ok $count -- skipping 1970 test on VOS.\n";
    } else {
     $time = timegm($sec,$min,$hour,$mday,$mon,$year);
     ($s,$m,$h,$D,$M,$Y) = gmtime($time);

     if ($s == $sec &&
	 $m == $min &&
	 $h == $hour &&
	 $D == $mday &&
	 $M == $mon &&
	 $Y == $year
        ) {
	 print "ok $count\n";
     } else {
      print "not ok $count\n";
     }
    }
    $count++;
}

#print "Testing that the differences between a few dates makes sense...\n";

timelocal(0,0,1,1,0,90) - timelocal(0,0,0,1,0,90) == 3600
  or print "not ";
print "ok ", $count++, "\n";

timelocal(1,2,3,1,0,100) - timelocal(1,2,3,31,11,99) == 24 * 3600 
  or print "not ";
print "ok ", $count++, "\n";

# Diff beween Jan 1, 1980 and Mar 1, 1980 = (31 + 29 = 60 days)
timegm(0,0,0, 1, 2, 80) - timegm(0,0,0, 1, 0, 80) == 60 * 24 * 3600
  or print "not ";
print "ok ", $count++, "\n";


#print "Testing timelocal.pl module too...\n";
package test;
require 'timelocal.pl';
timegm(0,0,0,1,0,80) == main::timegm(0,0,0,1,0,80) or print "not ";
print "ok ", $main::count++, "\n";

timelocal(1,2,3,4,5,88) == main::timelocal(1,2,3,4,5,88) or print "not ";
print "ok ", $main::count++, "\n";
@


1.1.1.1
log
@Import OpenBSD 3.3 source repository from CTM 3132 the first time
This opens an OpenBSD-mirabile (aka MirBSD) repository.

### MirBSD is:
# Copyright (c) 1982-2003 by Thorsten "mirabile" Glaser <x86@@ePost.de>
# Copyright © 1968-2003  The authors of And contributors to UNIX®, the
#       C Language, BSD/Berkeley Unix; 386BSD, NetBSD 1.1 and OpenBSD.
#
# Anyone who obtained a copy of this work is hereby permitted to freely use,
# distribute, modify, merge, sublicence, give away or sell it as long as the
# authors are given due credit and the following notice is retained:
#
# This work is provided "as is", with no explicit or implicit warranty what-
# soever. Use it only at your own risk. In no event may an author or contri-
# butor be held liable for any damage, directly or indirectly, that origina-
# ted through or is caused by creation or modification of this work.

MirBSD is my private tree. MirBSD does not differ very much from OpenBSD
and intentionally tracks OpenBSD. That's why it _is_ OpenBSD, just not the
official one. It's like with DarrenBSD.

At time of this writing, no advertising for MirBSD must be done,
because the advertising clause has not yet been sorted out.

http://templeofhate.com/tglaser/MirBSD/index.php
@
text
@@


1.1.1.2
log
@Import selected parts of the OpenBSD base system:
 * vnd change - you'll have to re-run MAKEDEV after booting a new kernel
 * misc. changes in /etc, mostly user related
 * Perl 5.8.2 (diff to MirPorts will be committed RSN)
 * some changes to binutils
 * Updates in bc and dc
@
text
@d4 2
a5 4
  if ($ENV{PERL_CORE}){
    chdir('t') if -d 't';
    @@INC = ('.', '../lib');
  }
d31 1
a31 4
my $tests = @@time * 2 + 4;
$tests += 2 if $ENV{PERL_CORE};

print "1..$tests\n";
a95 12
# bugid #19393
# At a DST transition, the clock skips forward, eg from 01:59:59 to
# 03:00:00. In this case, 02:00:00 is an invalid time, and should be
# treated like 03:00:00 rather than 01:00:00 - negative zone offsets used
# to do the latter
{
    my $hour = (localtime(timelocal(0, 0, 2, 7, 3, 102)))[2];
    # testers in US/Pacific should get 3,
    # other testers should get 2
    print "not " unless $hour == 2 || $hour == 3;
    print "ok ", $main::count++, "\n";
}
d97 5
a101 6
if ($ENV{PERL_CORE}) {
  #print "Testing timelocal.pl module too...\n";
  package test;
  require 'timelocal.pl';
  timegm(0,0,0,1,0,80) == main::timegm(0,0,0,1,0,80) or print "not ";
  print "ok ", $main::count++, "\n";
d103 2
a104 3
  timelocal(1,2,3,4,5,88) == main::timelocal(1,2,3,4,5,88) or print "not ";
  print "ok ", $main::count++, "\n";
}
@


1.1.1.3
log
@5.8.5
@
text
@a9 4
use strict;

use Config;
use Test;
d13 1
a13 1
my @@time =
d15 1
a15 1
   #year,mon,day,hour,min,sec
d33 1
a33 1
my $tests = (@@time * 12) + 6;
a34 1
$tests += 5 if $ENV{MAINTAINER};
d36 1
a36 1
plan tests => $tests;
d38 1
d42 3
a44 4
    $mon--;

    if ($^O eq 'vos' && $year == 70) {
        skip(1, "skipping 1970 test on VOS.\n") for 1..6;
d46 15
a60 10
        my $time = timelocal($sec,$min,$hour,$mday,$mon,$year);

        my($s,$m,$h,$D,$M,$Y) = localtime($time);

        ok($s, $sec, 'second');
        ok($m, $min, 'minute');
        ok($h, $hour, 'hour');
        ok($D, $mday, 'day');
        ok($M, $mon, 'month');
        ok($Y, $year, 'year');
d62 1
d64 3
a66 2
    if ($^O eq 'vos' && $year == 70) {
        skip(1, "skipping 1970 test on VOS.\n") for 1..6;
d68 2
a69 1
        my $time = timegm($sec,$min,$hour,$mday,$mon,$year);
d71 11
a81 8
        my($s,$m,$h,$D,$M,$Y) = gmtime($time);

        ok($s, $sec, 'second');
        ok($m, $min, 'minute');
        ok($h, $hour, 'hour');
        ok($D, $mday, 'day');
        ok($M, $mon, 'month');
        ok($Y, $year, 'year');
d83 1
d86 1
a86 2
ok(timelocal(0,0,1,1,0,90) - timelocal(0,0,0,1,0,90), 3600,
   'one hour difference between two calls to timelocal');
d88 7
a94 2
ok(timelocal(1,2,3,1,0,100) - timelocal(1,2,3,31,11,99), 24 * 3600,
   'one day difference between two calls to timelocal');
d97 3
a99 2
ok(timegm(0,0,0, 1, 2, 80) - timegm(0,0,0, 1, 0, 80), 60 * 24 * 3600,
   '60 day difference between two calls to timegm');
d110 2
a111 56
    ok($hour == 2 || $hour == 3, 1, 'hour should be 2 or 3');
}

# round trip was broken for edge cases
if ($^O eq "aix" && $Config{osvers} =~ m/^4\.3\./) {
    skip( 1, "No fix expected for edge case test for $_ on AIX 4.3") for qw( timegm timelocal );
} else {
    ok(sprintf('%x', timegm(gmtime(0x7fffffff))), sprintf('%x', 0x7fffffff),
       '0x7fffffff round trip through gmtime then timegm');

    ok(sprintf('%x', timelocal(localtime(0x7fffffff))), sprintf('%x', 0x7fffffff),
       '0x7fffffff round trip through localtime then timelocal');
}

if ($ENV{MAINTAINER}) {
    eval { require POSIX; POSIX::tzset() };
    if ($@@) {
        skip( 1, "Cannot call POSIX::tzset() on this platform\n" ) for 1..3;
    }
    else {
        local $ENV{TZ} = 'Europe/Vienna';
        POSIX::tzset();

        # 2001-10-28 02:30:00 - could be either summer or standard time,
        # prefer earlier of the two, in this case summer
        my $time = timelocal(0, 30, 2, 28, 9, 101);
        ok($time, 1004229000,
           'timelocal prefers earlier epoch in the presence of a DST change');

        local $ENV{TZ} = 'America/Chicago';
        POSIX::tzset();

        # Same local time in America/Chicago.  There is a transition
        # here as well.
        $time = timelocal(0, 30, 1, 28, 9, 101);
        ok($time, 1004250600,
           'timelocal prefers earlier epoch in the presence of a DST change');

        $time = timelocal(0, 30, 2, 1, 3, 101);
        ok($time, 986113800,
           'timelocal for non-existent time gives you the time one hour later');

        local $ENV{TZ} = 'Australia/Sydney';
        POSIX::tzset();

        # 2001-03-25 02:30:00 in Australia/Sydney.  This is the transition
        # _to_ summer time.  The southern hemisphere transitions are
        # opposite those of the northern.
        $time = timelocal(0, 30, 2, 25, 2, 101);
        ok($time, 985447800,
           'timelocal prefers earlier epoch in the presence of a DST change');

        $time = timelocal(0, 30, 2, 28, 9, 101);
        ok($time, 1004200200,
           'timelocal for non-existent time gives you the time one hour later');
    }
d115 1
d118 2
d121 2
a122 6
  # need to get ok() from main package
  ::ok(timegm(0,0,0,1,0,80), main::timegm(0,0,0,1,0,80),
     'timegm in timelocal.pl');

  ::ok(timelocal(1,2,3,4,5,88), main::timelocal(1,2,3,4,5,88),
     'timelocal in timelocal.pl');
@


