head	1.1;
branch	1.1.1;
access;
symbols
	tg-mergetmp-mirosx-1:1.1.1.1
	tg-mergefixes-1-branch:1.1.1.1.0.14
	tg-mergefixes-1-base:1.1.1.1
	MIROS_X:1.1.1.1.0.12
	MIROS_X_BASE:1.1.1.1
	tg-mergetmp-3:1.1.1.1
	MIRBSD_XP_MIRPPC:1.1.1.1.0.10
	cvs-200410231830:1.1.1.1
	MIRBSD_XP_SPARC_BASE:1.1.1.1
	MIRBSD_XP_SPARC:1.1.1.1.0.8
	cvs-200406091940:1.1.1.1
	MIRBSD_7quater:1.1.1.1
	cvs-200405160640:1.1.1.1
	cvs-200401271800:1.1.1.1
	cvs-200401261630:1.1.1.1
	cvs-200401021645:1.1.1.1
	MIRBSD_7_ALPHA:1.1.1.1.0.6
	MIRBSD_7:1.1.1.1.0.4
	cvs-200312222040:1.1.1.1
	cvs-200312031730:1.1.1.1
	MIRBSD_7ter:1.1.1.1
	MIRBSD_7_DEV:1.1.1.1.0.2
	cvs-200310020700:1.1.1.1
	cvs-200309271030:1.1.1.1
	cvs-200309251530:1.1.1.1
	cvs-200308302005:1.1.1.1
	cvs-200308171200:1.1.1.1
	ctm-3496:1.1.1.1
	ctm-3449:1.1.1.1
	ctm-3437:1.1.1.1
	cvs-200307191805:1.1.1.1
	ctm-3425:1.1.1.1
	cvs-200307091500:1.1.1.1
	ctm-3389:1.1.1.1
	cvs-200306291430:1.1.1.1
	ctm-3341:1.1.1.1
	MIRBSD_5:1.1.1.1
	cvs-200306082100:1.1.1.1
	ctm-3316:1.1.1.1
	ctm-3272:1.1.1.1
	ctm-3264:1.1.1.1
	cvs-200305071630:1.1.1.1
	MIRBSD_4:1.1.1.1
	ctm-3203:1.1.1.1
	cvs-20030410-1130:1.1.1.1
	ctm-3155:1.1.1.1
	ctm-3132:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@# @;


1.1
date	2003.03.22.17.43.05;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.03.22.17.43.05;	author tg;	state Stab;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@#!./perl

BEGIN {
    chdir 't' if -d 't';
    @@INC = '../lib';
    require Config; import Config;
    if (! $Config{'use5005threads'}) {
	print "1..0 # Skip: no use5005threads\n";
	exit 0;
    }

    # XXX known trouble with global destruction
    $ENV{PERL_DESTRUCT_LEVEL} = 0 unless $ENV{PERL_DESTRUCT_LEVEL} > 3;
}
$| = 1;
print "1..74\n";
use Thread 'yield';
print "ok 1\n";

sub content
{
 print shift;
 return shift;
}

# create a thread passing args and immedaietly wait for it.
my $t = new Thread \&content,("ok 2\n","ok 3\n", 1..1000);
print $t->join;

# check that lock works ...
{lock $foo;
 $t = new Thread sub { lock $foo; print "ok 5\n" };
 print "ok 4\n";
}
$t->join;

sub dorecurse
{
 my $val = shift;
 my $ret;
 print $val;
 if (@@_)
  {
   $ret = Thread->new(\&dorecurse, @@_);
   $ret->join;
  }
}

$t = new Thread \&dorecurse, map { "ok $_\n" } 6..10;
$t->join;

# test that sleep lets other thread run
$t = new Thread \&dorecurse,"ok 11\n";
sleep 6;
print "ok 12\n";
$t->join;

sub islocked : locked {
 my $val = shift;
 my $ret;
 print $val;
 if (@@_)
  {
   $ret = Thread->new(\&islocked, shift);
  }
 $ret;
}

$t = Thread->new(\&islocked, "ok 13\n", "ok 14\n");
$t->join->join;

{
    package Loch::Ness;
    sub new { bless [], shift }
    sub monster : locked : method {
	my($s, $m) = @@_;
	print "ok $m\n";
    }
    sub gollum { &monster }
}
Loch::Ness->monster(15);
Loch::Ness->new->monster(16);
Loch::Ness->gollum(17);
Loch::Ness->new->gollum(18);

my $short = "This is a long string that goes on and on.";
my $shorte = " a long string that goes on and on.";
my $long  = "This is short.";
my $longe  = " short.";
my $thr1 = new Thread \&threaded, $short, $shorte, "19";
my $thr2 = new Thread \&threaded, $long, $longe, "20";
my $thr3 = new Thread \&testsprintf, "21";

sub testsprintf {
  my $testno = shift;
  # this may coredump if thread vars are not properly initialised
  my $same = sprintf "%.0f", $testno;
  if ($testno eq $same) {
    print "ok $testno\n";
  } else {
    print "not ok $testno\t# '$testno' ne '$same'\n";
  }
}

sub threaded {
  my ($string, $string_end, $testno) = @@_;

  # Do the match, saving the output in appropriate variables
  $string =~ /(.*)(is)(.*)/;
  # Yield control, allowing the other thread to fill in the match variables
  yield();
  # Examine the match variable contents; on broken perls this fails
  if ($3 eq $string_end) {
    print "ok $testno\n";
  }
  else {
    warn <<EOT;

#
# This is a KNOWN FAILURE, and one of the reasons why threading
# is still an experimental feature.  It is here to stop people
# from deploying threads in production. ;-)
#
EOT
    print "not ok $testno # other thread filled in match variables\n";
  }
}
$thr1->join;
$thr2->join;
$thr3->join;
print "ok 22\n";

{
    my $THRf_STATE_MASK = 7;
    my $THRf_R_JOINABLE = 0;
    my $THRf_R_JOINED = 1;
    my $THRf_R_DETACHED = 2;
    my $THRf_ZOMBIE = 3;
    my $THRf_DEAD = 4;
    my $THRf_DID_DIE = 8;
    sub _test {
	my($test, $t, $state, $die) = @@_;
	my $flags = $t->flags;
	if (($flags & $THRf_STATE_MASK) == $state
		&& !($flags & $THRf_DID_DIE) == !$die) {
	    print "ok $test\n";
	} else {
	    print <<BAD;
not ok $test\t# got flags $flags not @@{[ $state + ($die ? $THRf_DID_DIE : 0) ]}
BAD
	}
    }

    my @@t;
    push @@t, (
	Thread->new(sub { sleep 4; die "thread die\n" }),
	Thread->new(sub { die "thread die\n" }),
	Thread->new(sub { sleep 4; 1 }),
	Thread->new(sub { 1 }),
    ) for 1, 2;
    $_->detach for @@t[grep $_ & 4, 0..$#t];

    sleep 1;
    my $test = 23;
    for (0..7) {
	my $t = $t[$_];
	my $flags = ($_ & 1)
	    ? ($_ & 4) ? $THRf_DEAD : $THRf_ZOMBIE
	    : ($_ & 4) ? $THRf_R_DETACHED : $THRf_R_JOINABLE;
	_test($test++, $t, $flags, (($_ & 3) != 1) ? 0 : $THRf_DID_DIE);
	printf "%sok %s\n", !$t->done == !($_ & 1) ? "" : "not ", $test++;
    }
#   $test = 39;
    for (grep $_ & 1, 0..$#t) {
	next if $_ & 4;		# can't join detached threads
	$t[$_]->eval;
	my $die = ($_ & 2) ? "" : "thread die\n";
	printf "%sok %s\n", $@@ eq $die ? "" : "not ", $test++;
    }
#   $test = 41;
    for (0..7) {
	my $t = $t[$_];
	my $flags = ($_ & 1)
	    ? ($_ & 4) ? $THRf_DEAD : $THRf_DEAD
	    : ($_ & 4) ? $THRf_R_DETACHED : $THRf_R_JOINABLE;
	_test($test++, $t, $flags, (($_ & 3) != 1) ? 0 : $THRf_DID_DIE);
	printf "%sok %s\n", !$t->done == !($_ & 1) ? "" : "not ", $test++;
    }
#   $test = 57;
    for (grep !($_ & 1), 0..$#t) {
	next if $_ & 4;		# can't join detached threads
	$t[$_]->eval;
	my $die = ($_ & 2) ? "" : "thread die\n";
	printf "%sok %s\n", $@@ eq $die ? "" : "not ", $test++;
    }
    sleep 1;	# make sure even the detached threads are done sleeping
#   $test = 59;
    for (0..7) {
	my $t = $t[$_];
	my $flags = ($_ & 1)
	    ? ($_ & 4) ? $THRf_DEAD : $THRf_DEAD
	    : ($_ & 4) ? $THRf_DEAD : $THRf_DEAD;
	_test($test++, $t, $flags, ($_ & 2) ? 0 : $THRf_DID_DIE);
	printf "%sok %s\n", $t->done ? "" : "not ", $test++;
    }
#   $test = 75;
}
@


1.1.1.1
log
@Import OpenBSD 3.3 source repository from CTM 3132 the first time
This opens an OpenBSD-mirabile (aka MirBSD) repository.

### MirBSD is:
# Copyright (c) 1982-2003 by Thorsten "mirabile" Glaser <x86@@ePost.de>
# Copyright © 1968-2003  The authors of And contributors to UNIX®, the
#       C Language, BSD/Berkeley Unix; 386BSD, NetBSD 1.1 and OpenBSD.
#
# Anyone who obtained a copy of this work is hereby permitted to freely use,
# distribute, modify, merge, sublicence, give away or sell it as long as the
# authors are given due credit and the following notice is retained:
#
# This work is provided "as is", with no explicit or implicit warranty what-
# soever. Use it only at your own risk. In no event may an author or contri-
# butor be held liable for any damage, directly or indirectly, that origina-
# ted through or is caused by creation or modification of this work.

MirBSD is my private tree. MirBSD does not differ very much from OpenBSD
and intentionally tracks OpenBSD. That's why it _is_ OpenBSD, just not the
official one. It's like with DarrenBSD.

At time of this writing, no advertising for MirBSD must be done,
because the advertising clause has not yet been sorted out.

http://templeofhate.com/tglaser/MirBSD/index.php
@
text
@@
