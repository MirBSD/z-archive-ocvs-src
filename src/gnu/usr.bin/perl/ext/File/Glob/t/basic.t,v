head	1.1;
branch	1.1.1;
access;
symbols
	tg-mergetmp-mirosx-1:1.1.1.2
	tg-mergefixes-1-branch:1.1.1.2.0.8
	tg-mergefixes-1-base:1.1.1.2
	MIROS_X:1.1.1.2.0.6
	MIROS_X_BASE:1.1.1.2
	tg-mergetmp-3:1.1.1.2
	MIRBSD_XP_MIRPPC:1.1.1.2.0.4
	cvs-200410231830:1.1.1.2
	MIRBSD_XP_SPARC_BASE:1.1.1.2
	MIRBSD_XP_SPARC:1.1.1.2.0.2
	cvs-200406091940:1.1.1.2
	MIRBSD_7quater:1.1.1.1
	cvs-200405160640:1.1.1.2
	cvs-200401271800:1.1.1.2
	cvs-200401261630:1.1.1.2
	cvs-200401021645:1.1.1.2
	MIRBSD_7_ALPHA:1.1.1.1.0.6
	MIRBSD_7:1.1.1.1.0.4
	cvs-200312222040:1.1.1.2
	cvs-200312031730:1.1.1.2
	MIRBSD_7ter:1.1.1.1
	MIRBSD_7_DEV:1.1.1.1.0.2
	cvs-200310020700:1.1.1.1
	cvs-200309271030:1.1.1.1
	cvs-200309251530:1.1.1.1
	cvs-200308302005:1.1.1.1
	cvs-200308171200:1.1.1.1
	ctm-3496:1.1.1.1
	ctm-3449:1.1.1.1
	ctm-3437:1.1.1.1
	cvs-200307191805:1.1.1.1
	ctm-3425:1.1.1.1
	cvs-200307091500:1.1.1.1
	ctm-3389:1.1.1.1
	cvs-200306291430:1.1.1.1
	ctm-3341:1.1.1.1
	MIRBSD_5:1.1.1.1
	cvs-200306082100:1.1.1.1
	ctm-3316:1.1.1.1
	ctm-3272:1.1.1.1
	ctm-3264:1.1.1.1
	cvs-200305071630:1.1.1.1
	MIRBSD_4:1.1.1.1
	ctm-3203:1.1.1.1
	cvs-20030410-1130:1.1.1.1
	ctm-3155:1.1.1.1
	ctm-3132:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@# @;


1.1
date	2003.03.22.17.42.58;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.03.22.17.42.58;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2003.12.03.17.55.00;	author tg;	state Stab;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@#!./perl

BEGIN {
    chdir 't' if -d 't';
    if ($^O eq 'MacOS') { 
	@@INC = qw(: ::lib ::macos:lib); 
    } else { 
	@@INC = '.'; 
	push @@INC, '../lib'; 
    }
    require Config; import Config;
    if ($Config{'extensions'} !~ /\bFile\/Glob\b/i) {
        print "1..0\n";
        exit 0;
    }
    print "1..11\n";
}
END {
    print "not ok 1\n" unless $loaded;
}
use File::Glob ':glob';
use Cwd ();
$loaded = 1;
print "ok 1\n";

sub array {
    return '(', join(", ", map {defined $_ ? "\"$_\"" : "undef"} @@a), ")\n";
}

# look for the contents of the current directory
$ENV{PATH} = "/bin";
delete @@ENV{BASH_ENV, CDPATH, ENV, IFS};
@@correct = ();
if (opendir(D, $^O eq "MacOS" ? ":" : ".")) {
   @@correct = grep { !/^\./ } sort readdir(D);
   closedir D;
}
@@a = File::Glob::glob("*", 0);
@@a = sort @@a;
if ("@@a" ne "@@correct" || GLOB_ERROR) {
    print "# |@@a| ne |@@correct|\nnot ";
}
print "ok 2\n";

# look up the user's home directory
# should return a list with one item, and not set ERROR
if ($^O ne 'MSWin32' && $^O ne 'NetWare' && $^O ne 'VMS' && $^O ne 'os2') {
  eval {
    ($name, $home) = (getpwuid($>))[0,7];
    1;
  } and do {
    if (defined $home && defined $name && -d $home) {
	@@a = bsd_glob("~$name", GLOB_TILDE);
	if ((scalar(@@a) != 1 || $a[0] ne $home || GLOB_ERROR)) {
	    print "not ";
	}
    }
  };
}
print "ok 3\n";

# check backslashing
# should return a list with one item, and not set ERROR
@@a = bsd_glob('TEST', GLOB_QUOTE);
if (scalar @@a != 1 || $a[0] ne 'TEST' || GLOB_ERROR) {
    local $/ = "][";
    print "# [@@a]\n";
    print "not ";
}
print "ok 4\n";

# check nonexistent checks
# should return an empty list
# XXX since errfunc is NULL on win32, this test is not valid there
@@a = bsd_glob("asdfasdf", 0);
if (($^O ne 'MSWin32' && $^O ne 'NetWare') and scalar @@a != 0) {
    print "# |@@a|\nnot ";
}
print "ok 5\n";

# check bad protections
# should return an empty list, and set ERROR
if ($^O eq 'mpeix' or $^O eq 'MSWin32' or $^O eq 'NetWare' or $^O eq 'os2' or $^O eq 'VMS'
    or $^O eq 'cygwin' or Cwd::cwd() =~ m#^$Config{'afsroot'}#s or not $>)
{
    print "ok 6 # skipped\n";
}
else {
    $dir = "pteerslo";
    mkdir $dir, 0;
    @@a = bsd_glob("$dir/*", GLOB_ERR);
    #print "\@@a = ", array(@@a);
    rmdir $dir;
    if (scalar(@@a) != 0 || GLOB_ERROR == 0) {
	if ($^O eq 'vos') {
	    print "not ok 6 # TODO hit VOS bug posix-956\n";
	} else {
	    print "not ok 6\n";
	}
    }
    else {
	print "ok 6\n";
    }
}

# check for csh style globbing
@@a = bsd_glob('{a,b}', GLOB_BRACE | GLOB_NOMAGIC);
unless (@@a == 2 and $a[0] eq 'a' and $a[1] eq 'b') {
    print "not ";
}
print "ok 7\n";

@@a = bsd_glob(
    '{TES*,doesntexist*,a,b}',
    GLOB_BRACE | GLOB_NOMAGIC | ($^O eq 'VMS' ? GLOB_NOCASE : 0)
);

# Working on t/TEST often causes this test to fail because it sees Emacs temp
# and RCS files.  Filter them out, and .pm files too, and patch temp files.
@@a = grep !/(,v$|~$|\.(pm|ori?g|rej)$)/, @@a;
@@a = (grep !/test.pl/, @@a) if $^O eq 'VMS';

print "# @@a\n";

unless (@@a == 3
        and $a[0] eq ($^O eq 'VMS'? 'test.' : 'TEST')
        and $a[1] eq 'a'
        and $a[2] eq 'b')
{
    print "not ok 8 # @@a\n";
} else {
    print "ok 8\n";
}

# "~" should expand to $ENV{HOME}
$ENV{HOME} = "sweet home";
@@a = bsd_glob('~', GLOB_TILDE | GLOB_NOMAGIC);
unless ($^O eq "MacOS" || (@@a == 1 and $a[0] eq $ENV{HOME})) {
    print "not ";
}
print "ok 9\n";

# GLOB_ALPHASORT (default) should sort alphabetically regardless of case
mkdir "pteerslo", 0777;
chdir "pteerslo";

@@f_names = qw(Ax.pl Bx.pl Cx.pl aY.pl bY.pl cY.pl);
@@f_alpha = qw(Ax.pl aY.pl Bx.pl bY.pl Cx.pl cY.pl);
if ('a' lt 'A') { # EBCDIC char sets sort lower case before UPPER
    @@f_names = sort(@@f_names);
}
if ($^O eq 'VMS') { # VMS is happily caseignorant
    @@f_alpha = qw(ax.pl ay.pl bx.pl by.pl cx.pl cy.pl);
    @@f_names = @@f_alpha;
}

for (@@f_names) {
    open T, "> $_";
    close T;
}

$pat = "*.pl";

$ok = 1;
@@g_names = bsd_glob($pat, 0);
print "# f_names = @@f_names\n";
print "# g_names = @@g_names\n";
for (@@f_names) {
    $ok = 0 unless $_ eq shift @@g_names;
}
print $ok ? "ok 10\n" : "not ok 10\n";

$ok = 1;
@@g_alpha = bsd_glob($pat);
print "# f_alpha = @@f_alpha\n";
print "# g_alpha = @@g_alpha\n";
for (@@f_alpha) {
    $ok = 0 unless $_ eq shift @@g_alpha;
}
print $ok ? "ok 11\n" : "not ok 11\n";

unlink @@f_names;
chdir "..";
rmdir "pteerslo";
@


1.1.1.1
log
@Import OpenBSD 3.3 source repository from CTM 3132 the first time
This opens an OpenBSD-mirabile (aka MirBSD) repository.

### MirBSD is:
# Copyright (c) 1982-2003 by Thorsten "mirabile" Glaser <x86@@ePost.de>
# Copyright © 1968-2003  The authors of And contributors to UNIX®, the
#       C Language, BSD/Berkeley Unix; 386BSD, NetBSD 1.1 and OpenBSD.
#
# Anyone who obtained a copy of this work is hereby permitted to freely use,
# distribute, modify, merge, sublicence, give away or sell it as long as the
# authors are given due credit and the following notice is retained:
#
# This work is provided "as is", with no explicit or implicit warranty what-
# soever. Use it only at your own risk. In no event may an author or contri-
# butor be held liable for any damage, directly or indirectly, that origina-
# ted through or is caused by creation or modification of this work.

MirBSD is my private tree. MirBSD does not differ very much from OpenBSD
and intentionally tracks OpenBSD. That's why it _is_ OpenBSD, just not the
official one. It's like with DarrenBSD.

At time of this writing, no advertising for MirBSD must be done,
because the advertising clause has not yet been sorted out.

http://templeofhate.com/tglaser/MirBSD/index.php
@
text
@@


1.1.1.2
log
@Import selected parts of the OpenBSD base system:
 * vnd change - you'll have to re-run MAKEDEV after booting a new kernel
 * misc. changes in /etc, mostly user related
 * Perl 5.8.2 (diff to MirPorts will be committed RSN)
 * some changes to binutils
 * Updates in bc and dc
@
text
@d16 1
a16 1
    print "1..12\n";
a184 4

# this can panic if PL_glob_index gets passed as flags to bsd_glob
<*>; <*>;
print "ok 12\n";
@

