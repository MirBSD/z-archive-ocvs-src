head	1.1;
branch	1.1.1;
access;
symbols
	tg-mergetmp-mirosx-1:1.1.1.3
	tg-mergefixes-1-branch:1.1.1.3.0.4
	tg-mergefixes-1-base:1.1.1.3
	MIROS_X:1.1.1.3.0.2
	MIROS_X_BASE:1.1.1.3
	tg-mergetmp-3:1.1.1.3
	MIRBSD_XP_MIRPPC:1.1.1.2.0.4
	cvs-200410231830:1.1.1.3
	MIRBSD_XP_SPARC_BASE:1.1.1.2
	MIRBSD_XP_SPARC:1.1.1.2.0.2
	cvs-200406091940:1.1.1.2
	MIRBSD_7quater:1.1.1.1
	cvs-200405160640:1.1.1.2
	cvs-200401271800:1.1.1.2
	cvs-200401261630:1.1.1.2
	cvs-200401021645:1.1.1.2
	MIRBSD_7_ALPHA:1.1.1.1.0.6
	MIRBSD_7:1.1.1.1.0.4
	cvs-200312222040:1.1.1.2
	cvs-200312031730:1.1.1.2
	MIRBSD_7ter:1.1.1.1
	MIRBSD_7_DEV:1.1.1.1.0.2
	cvs-200310020700:1.1.1.1
	cvs-200309271030:1.1.1.1
	cvs-200309251530:1.1.1.1
	cvs-200308302005:1.1.1.1
	cvs-200308171200:1.1.1.1
	ctm-3496:1.1.1.1
	ctm-3449:1.1.1.1
	ctm-3437:1.1.1.1
	cvs-200307191805:1.1.1.1
	ctm-3425:1.1.1.1
	cvs-200307091500:1.1.1.1
	ctm-3389:1.1.1.1
	cvs-200306291430:1.1.1.1
	ctm-3341:1.1.1.1
	MIRBSD_5:1.1.1.1
	cvs-200306082100:1.1.1.1
	ctm-3316:1.1.1.1
	ctm-3272:1.1.1.1
	ctm-3264:1.1.1.1
	cvs-200305071630:1.1.1.1
	MIRBSD_4:1.1.1.1
	ctm-3203:1.1.1.1
	cvs-20030410-1130:1.1.1.1
	ctm-3155:1.1.1.1
	ctm-3132:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@# @;


1.1
date	2003.03.22.17.42.45;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.03.22.17.42.45;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2003.12.03.17.54.03;	author tg;	state Stab;
branches;
next	1.1.1.3;

1.1.1.3
date	2004.10.23.18.38.19;	author tg;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@package Encode::CN::HZ;

use strict;

use vars qw($VERSION);
$VERSION = do { my @@r = (q$Revision: 1.4 $ =~ /\d+/g); sprintf "%d."."%02d" x $#r, @@r };

use Encode ();

use base qw(Encode::Encoding);
__PACKAGE__->Define('hz');

# HZ is only escaped GB, so we implement it with the
# GB2312(raw) encoding here. Cf. RFCs 1842 & 1843.



sub needs_lines  { 1 }

sub perlio_ok { 
    return 0; # for the time being
}

sub decode
{
    my ($obj,$str,$chk) = @@_;
    my $gb = Encode::find_encoding('gb2312-raw');

    $str =~ s{~			# starting tilde
	(?:
	    (~)			# another tilde - escaped (set $1)
		|		#     or
	    \n			# \n - output nothing
		|		#     or
	    \{			# opening brace of GB data
		(		#  set $2 to any number of...
		    (?:	
			[^~]	#  non-tilde GB character
			    |   #     or
			~(?!\}) #  tilde not followed by a closing brace
		    )*
		)
	    ~\}			# closing brace of GB data
		|		# XXX: invalid escape - maybe die on $chk?
	)
    }{
	(defined $1)	? '~'			# two tildes make one tilde
	    :
	(defined $2)	? $gb->decode($2, $chk)	# decode the characters
	    :
	''					# ~\n and invalid escape = ''
    }egx;

    return $str;
}

sub encode
{
    my ($obj,$str,$chk) = @@_;
    my ($out, $in_gb);
    my $gb = Encode::find_encoding('gb2312-raw');

    $str =~ s/~/~~/g;

    # XXX: Since CHECK and partial decoding has not been implemented yet,
    #      we'll use a very crude way to test for GB2312ness.

    for my $index (0 .. length($str) - 1) {
	no warnings 'utf8';

	my $char = substr($str, $index, 1);
	# try to encode this character
	# with CHECK on so it stops at proper place.
	# also note that the assignement was braced in eval
	#  -- dankogai
	my $try;
	eval{ $try = $gb->encode($char, 1) };
	
	if (defined($try)) {		# is a GB character:
	    if ($in_gb) {
		$out .= $try;		#  in GB mode - just append it
	    }
	    else {
		$in_gb = 1;		#  enter GB mode, then append it
		$out .= "~{$try";
	    }
	}				# not a GB character:
	elsif ($in_gb) {
	    $in_gb = 0;			#  leave GB mode, then append it
	    $out .= "~}$char";
	}
	else {
	    $out .= $char;		#  not in GB mode - just append it
	}
    }

    $out .= '~}' if $in_gb;		# add closing brace if needed

    return $out;
}

1;
__END__


=head1 NAME

Encode::CN::HZ -- internally used by Encode::CN

=cut
@


1.1.1.1
log
@Import OpenBSD 3.3 source repository from CTM 3132 the first time
This opens an OpenBSD-mirabile (aka MirBSD) repository.

### MirBSD is:
# Copyright (c) 1982-2003 by Thorsten "mirabile" Glaser <x86@@ePost.de>
# Copyright © 1968-2003  The authors of And contributors to UNIX®, the
#       C Language, BSD/Berkeley Unix; 386BSD, NetBSD 1.1 and OpenBSD.
#
# Anyone who obtained a copy of this work is hereby permitted to freely use,
# distribute, modify, merge, sublicence, give away or sell it as long as the
# authors are given due credit and the following notice is retained:
#
# This work is provided "as is", with no explicit or implicit warranty what-
# soever. Use it only at your own risk. In no event may an author or contri-
# butor be held liable for any damage, directly or indirectly, that origina-
# ted through or is caused by creation or modification of this work.

MirBSD is my private tree. MirBSD does not differ very much from OpenBSD
and intentionally tracks OpenBSD. That's why it _is_ OpenBSD, just not the
official one. It's like with DarrenBSD.

At time of this writing, no advertising for MirBSD must be done,
because the advertising clause has not yet been sorted out.

http://templeofhate.com/tglaser/MirBSD/index.php
@
text
@@


1.1.1.2
log
@Import selected parts of the OpenBSD base system:
 * vnd change - you'll have to re-run MAKEDEV after booting a new kernel
 * misc. changes in /etc, mostly user related
 * Perl 5.8.2 (diff to MirPorts will be committed RSN)
 * some changes to binutils
 * Updates in bc and dc
@
text
@d6 1
a6 1
$VERSION = do { my @@r = (q$Revision: 1.5 $ =~ /\d+/g); sprintf "%d."."%02d" x $#r, @@r };
d8 1
a8 1
use Encode qw(:fallbacks);
d13 3
a15 2
# HZ is a combination of ASCII and escaped GB, so we implement it
# with the GB2312(raw) encoding here. Cf. RFCs 1842 & 1843.
a16 1
# not ported for EBCDIC.  Which should be used, "~" or "\x7E"?
d20 3
a22 1
sub perlio_ok    { 1 }
d24 1
a24 1
sub decode ($$;$)
a25 1
    use bytes;
d27 26
d54 1
a54 37
    my $GB = Encode::find_encoding('gb2312-raw');
    my $ret = '';
    my $in_ascii = 1; # default mode is ASCII.

    while (length $str) {
	if ($in_ascii) { # ASCII mode
	    if ($str =~ s/^([\x00-\x7D\x7F]+)//) { # no '~' => ASCII
		$ret .= $1;
		# EBCDIC should need ascii2native, but not ported.
	    }
	    elsif ($str =~ s/^\x7E\x7E//) { # escaped tilde
		$ret .= '~';
	    }
	    elsif ($str =~ s/^\x7E\cJ//) { # '\cJ' == LF in ASCII
		1; # no-op
	    }
	    elsif ($str =~ s/^\x7E\x7B//) { # '~{'
		$in_ascii = 0; # to GB
	    }
	    else { # encounters an invalid escape, \x80 or greater
		last;
	    }
	}
	else { # GB mode; the byte ranges are as in RFC 1843.
	    if ($str =~ s/^((?:[\x21-\x77][\x21-\x7E])+)//) {
		$ret .= $GB->decode($1, $chk);
	    }
	    elsif ($str =~ s/^\x7E\x7D//) { # '~}'
		$in_ascii = 1;
	    }
	    else { # invalid
		last;
	    }
	}
    }
    $_[1] = $str if $chk;
    return $ret;
d57 5
a61 9
sub cat_decode {
    use bytes;

    my ($obj, undef, $src, $pos, $trm, $chk) = @@_;
    my ($rdst, $rsrc, $rpos) = \@@_[1..3];

    my $GB = Encode::find_encoding('gb2312-raw');
    my $ret = '';
    my $in_ascii = 1; # default mode is ASCII.
d63 1
a63 1
    my $ini_pos = pos($$rsrc);
d65 2
a66 1
    substr($src, 0, $pos) = '';
d68 23
a90 37
    my $ini_len = bytes::length($src);

    # $trm is the first of the pair '~~', then 2nd tilde is to be removed.
    # XXX: Is better C<$src =~ s/^\x7E// or die if ...>?
    $src =~ s/^\x7E// if $trm eq "\x7E";

    while (length $src) {
	my $now;
	if ($in_ascii) { # ASCII mode
	    if ($src =~ s/^([\x00-\x7D\x7F])//) { # no '~' => ASCII
		$now = $1;
	    }
	    elsif ($src =~ s/^\x7E\x7E//) { # escaped tilde
		$now = '~';
	    }
	    elsif ($src =~ s/^\x7E\cJ//) { # '\cJ' == LF in ASCII
		next;
	    }
	    elsif ($src =~ s/^\x7E\x7B//) { # '~{'
		$in_ascii = 0; # to GB
		next;
	    }
	    else { # encounters an invalid escape, \x80 or greater
		last;
	    }
	}
	else { # GB mode; the byte ranges are as in RFC 1843.
	    if ($src =~ s/^((?:[\x21-\x77][\x21-\x7F])+)//) {
		$now = $GB->decode($1, $chk);
	    }
	    elsif ($src =~ s/^\x7E\x7D//) { # '~}'
		$in_ascii = 1;
		next;
	    }
	    else { # invalid
		last;
	    }
d92 2
a93 10

	next if ! defined $now;

	$ret .= $now;

	if ($now eq $trm) {
	    $$rdst .= $ret;
	    $$rpos = $ini_pos + $pos + $ini_len - bytes::length($src);
	    pos($$rsrc) = $ini_pos;
	    return 1;
d97 1
a97 6
    $$rdst .= $ret;
    $$rpos = $ini_pos + $pos + $ini_len - bytes::length($src);
    pos($$rsrc) = $ini_pos;
    return ''; # terminator not found
}

d99 1
a99 53
sub encode($$;$)
{
    my ($obj,$str,$chk) = @@_;

    my $GB = Encode::find_encoding('gb2312-raw');
    my $ret = '';
    my $in_ascii = 1; # default mode is ASCII.

    no warnings 'utf8'; # $str may be malformed UTF8 at the end of a chunk.

    while (length $str) {
	if ($str =~ s/^([[:ascii:]]+)//) {
	    my $tmp = $1;
	    $tmp =~ s/~/~~/g; # escapes tildes
	    if (! $in_ascii) {
		$ret .= "\x7E\x7D"; # '~}'
		$in_ascii = 1;
	    }
	    $ret .= pack 'a*', $tmp; # remove UTF8 flag.
	}
	elsif ($str =~ s/(.)//) {
	    my $tmp = $GB->encode($1, $chk);
	    last if !defined $tmp;
	    if (length $tmp == 2) { # maybe a valid GB char (XXX)
		if ($in_ascii) {
		    $ret .= "\x7E\x7B"; # '~{'
		    $in_ascii = 0;
		}
		$ret .= $tmp;
	    }
	    elsif (length $tmp) { # maybe FALLBACK in ASCII (XXX)
		if (!$in_ascii) {
		    $ret .= "\x7E\x7D"; # '~}'
		    $in_ascii = 1;
		}
		$ret .= $tmp;
	    }
	}
	else { # if $str is malformed UTF8 *and* if length $str != 0.
	    last;
	}
    }
    $_[1] = $str if $chk;

  # The state at the end of the chunk is discarded, even if in GB mode.
  # That results in the combination of GB-OUT and GB-IN, i.e. "~}~{".
  # Parhaps it is harmless, but further investigations may be required...

    if (! $in_ascii) {
	$ret .= "\x7E\x7D"; # '~}'
	$in_ascii = 1;
    }
    return $ret;
d104 1
@


1.1.1.3
log
@5.8.5
@
text
@d6 1
a6 1
$VERSION = do { my @@r = (q$Revision: 2.1 $ =~ /\d+/g); sprintf "%d."."%02d" x $#r, @@r };
d20 2
d24 1
d62 1
a62 1
    $_[1] = '' if $chk; # needs_lines guarantees no partial character
d67 2
d159 1
a159 2
	    my $s = $1;
	    my $tmp = $GB->encode($s, $chk);
@


