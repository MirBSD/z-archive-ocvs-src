head	1.1;
branch	1.1.1;
access;
symbols
	tg-mergetmp-mirosx-1:1.1.1.3
	tg-mergefixes-1-branch:1.1.1.3.0.4
	tg-mergefixes-1-base:1.1.1.3
	MIROS_X:1.1.1.3.0.2
	MIROS_X_BASE:1.1.1.3
	tg-mergetmp-3:1.1.1.3
	MIRBSD_XP_MIRPPC:1.1.1.2.0.4
	cvs-200410231830:1.1.1.3
	MIRBSD_XP_SPARC_BASE:1.1.1.2
	MIRBSD_XP_SPARC:1.1.1.2.0.2
	cvs-200406091940:1.1.1.2
	MIRBSD_7quater:1.1.1.1
	cvs-200405160640:1.1.1.2
	cvs-200401271800:1.1.1.2
	cvs-200401261630:1.1.1.2
	cvs-200401021645:1.1.1.2
	MIRBSD_7_ALPHA:1.1.1.1.0.6
	MIRBSD_7:1.1.1.1.0.4
	cvs-200312222040:1.1.1.2
	cvs-200312031730:1.1.1.2
	MIRBSD_7ter:1.1.1.1
	MIRBSD_7_DEV:1.1.1.1.0.2
	cvs-200310020700:1.1.1.1
	cvs-200309271030:1.1.1.1
	cvs-200309251530:1.1.1.1
	cvs-200308302005:1.1.1.1
	cvs-200308171200:1.1.1.1
	ctm-3496:1.1.1.1
	ctm-3449:1.1.1.1
	ctm-3437:1.1.1.1
	cvs-200307191805:1.1.1.1
	ctm-3425:1.1.1.1
	cvs-200307091500:1.1.1.1
	ctm-3389:1.1.1.1
	cvs-200306291430:1.1.1.1
	ctm-3341:1.1.1.1
	MIRBSD_5:1.1.1.1
	cvs-200306082100:1.1.1.1
	ctm-3316:1.1.1.1
	ctm-3272:1.1.1.1
	ctm-3264:1.1.1.1
	cvs-200305071630:1.1.1.1
	MIRBSD_4:1.1.1.1
	ctm-3203:1.1.1.1
	cvs-20030410-1130:1.1.1.1
	ctm-3155:1.1.1.1
	ctm-3132:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@# @;


1.1
date	2003.03.22.17.43.57;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.03.22.17.43.57;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2003.12.03.17.57.53;	author tg;	state Stab;
branches;
next	1.1.1.3;

1.1.1.3
date	2004.10.23.18.43.29;	author tg;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@#!./perl

BEGIN {
    chdir 't' if -d 't';
    @@INC = '../lib';
}

print "1..46\n";

$FS = ':';

$_ = 'a:b:c';

($a,$b,$c) = split($FS,$_);

if (join(';',$a,$b,$c) eq 'a;b;c') {print "ok 1\n";} else {print "not ok 1\n";}

@@ary = split(/:b:/);
if (join("$_",@@ary) eq 'aa:b:cc') {print "ok 2\n";} else {print "not ok 2\n";}

$_ = "abc\n";
my @@xyz = (@@ary = split(//));
if (join(".",@@ary) eq "a.b.c.\n") {print "ok 3\n";} else {print "not ok 3\n";}

$_ = "a:b:c::::";
@@ary = split(/:/);
if (join(".",@@ary) eq "a.b.c") {print "ok 4\n";} else {print "not ok 4\n";}

$_ = join(':',split(' ',"    a b\tc \t d "));
if ($_ eq 'a:b:c:d') {print "ok 5\n";} else {print "not ok 5 #$_#\n";}

$_ = join(':',split(/ */,"foo  bar bie\tdoll"));
if ($_ eq "f:o:o:b:a:r:b:i:e:\t:d:o:l:l")
	{print "ok 6\n";} else {print "not ok 6\n";}

$_ = join(':', 'foo', split(/ /,'a b  c'), 'bar');
if ($_ eq "foo:a:b::c:bar") {print "ok 7\n";} else {print "not ok 7 $_\n";}

# Can we say how many fields to split to?
$_ = join(':', split(' ','1 2 3 4 5 6', 3));
print $_ eq '1:2:3 4 5 6' ? "ok 8\n" : "not ok 8 $_\n";

# Can we do it as a variable?
$x = 4;
$_ = join(':', split(' ','1 2 3 4 5 6', $x));
print $_ eq '1:2:3:4 5 6' ? "ok 9\n" : "not ok 9 $_\n";

# Does the 999 suppress null field chopping?
$_ = join(':', split(/:/,'1:2:3:4:5:6:::', 999));
print $_ eq '1:2:3:4:5:6:::' ? "ok 10\n" : "not ok 10 $_\n";

# Does assignment to a list imply split to one more field than that?
if ($^O eq 'MSWin32') { $foo = `.\\perl -D1024 -e "(\$a,\$b) = split;" 2>&1` }
elsif ($^O eq 'NetWare') { $foo = `perl -D1024 -e "(\$a,\$b) = split;" 2>&1` }
elsif ($^O eq 'VMS')  { $foo = `./perl "-D1024" -e "(\$a,\$b) = split;" 2>&1` }
elsif ($^O eq 'MacOS'){ $foo = `$^X "-D1024" -e "(\$a,\$b) = split;"` }
else                  { $foo = `./perl -D1024 -e '(\$a,\$b) = split;' 2>&1` }
print $foo =~ /DEBUGGING/ || $foo =~ /SV = (VOID|IV\(3\))/ ? "ok 11\n" : "not ok 11\n";

# Can we say how many fields to split to when assigning to a list?
($a,$b) = split(' ','1 2 3 4 5 6', 2);
$_ = join(':',$a,$b);
print $_ eq '1:2 3 4 5 6' ? "ok 12\n" : "not ok 12 $_\n";

# do subpatterns generate additional fields (without trailing nulls)?
$_ = join '|', split(/,|(-)/, "1-10,20,,,");
print $_ eq "1|-|10||20" ? "ok 13\n" : "not ok 13\n";

# do subpatterns generate additional fields (with a limit)?
$_ = join '|', split(/,|(-)/, "1-10,20,,,", 10);
print $_ eq "1|-|10||20||||||" ? "ok 14\n" : "not ok 14\n";

# is the 'two undefs' bug fixed?
(undef, $a, undef, $b) = qw(1 2 3 4);
print "$a|$b" eq "2|4" ? "ok 15\n" : "not ok 15\n";

# .. even for locals?
{
  local(undef, $a, undef, $b) = qw(1 2 3 4);
  print "$a|$b" eq "2|4" ? "ok 16\n" : "not ok 16\n";
}

# check splitting of null string
$_ = join('|', split(/x/,   '',-1), 'Z');
print $_ eq "Z" ? "ok 17\n" : "#$_\nnot ok 17\n";

$_ = join('|', split(/x/,   '', 1), 'Z');
print $_ eq "Z" ? "ok 18\n" : "#$_\nnot ok 18\n";

$_ = join('|', split(/(p+)/,'',-1), 'Z');
print $_ eq "Z" ? "ok 19\n" : "#$_\nnot ok 19\n";

$_ = join('|', split(/.?/,  '',-1), 'Z');
print $_ eq "Z" ? "ok 20\n" : "#$_\nnot ok 20\n";


# Are /^/m patterns scanned?
$_ = join '|', split(/^a/m, "a b a\na d a", 20);
print $_ eq "| b a\n| d a" ? "ok 21\n" : "not ok 21\n# `$_'\n";

# Are /$/m patterns scanned?
$_ = join '|', split(/a$/m, "a b a\na d a", 20);
print $_ eq "a b |\na d |" ? "ok 22\n" : "not ok 22\n# `$_'\n";

# Are /^/m patterns scanned?
$_ = join '|', split(/^aa/m, "aa b aa\naa d aa", 20);
print $_ eq "| b aa\n| d aa" ? "ok 23\n" : "not ok 23\n# `$_'\n";

# Are /$/m patterns scanned?
$_ = join '|', split(/aa$/m, "aa b aa\naa d aa", 20);
print $_ eq "aa b |\naa d |" ? "ok 24\n" : "not ok 24\n# `$_'\n";

# Greedyness:
$_ = "a : b :c: d";
@@ary = split(/\s*:\s*/);
if (($res = join(".",@@ary)) eq "a.b.c.d") {print "ok 25\n";} else {print "not ok 25\n# res=`$res' != `a.b.c.d'\n";}

# use of match result as pattern (!)
'p:q:r:s' eq join ':', split('abc' =~ /b/, 'p1q1r1s') or print "not ";
print "ok 26\n";

# /^/ treated as /^/m
$_ = join ':', split /^/, "ab\ncd\nef\n";
print "not " if $_ ne "ab\n:cd\n:ef\n";
print "ok 27\n";

# see if @@a = @@b = split(...) optimization works
@@list1 = @@list2 = split ('p',"a p b c p");
print "not " if @@list1 != @@list2 or "@@list1" ne "@@list2"
             or @@list1 != 2 or "@@list1" ne "a   b c ";
print "ok 28\n";

# zero-width assertion
$_ = join ':', split /(?=\w)/, "rm b";
print "not" if $_ ne "r:m :b";
print "ok 29\n";

# unicode splittage

@@ary = map {ord} split //, v1.20.300.4000.50000.4000.300.20.1;
print "not " unless "@@ary" eq "1 20 300 4000 50000 4000 300 20 1";
print "ok 30\n";

@@ary = split(/\x{FE}/, "\x{FF}\x{FE}\x{FD}"); # bug id 20010105.016
print "not " unless @@ary == 2 &&
                    $ary[0] eq "\xFF"   && $ary[1] eq "\xFD" &&
                    $ary[0] eq "\x{FF}" && $ary[1] eq "\x{FD}";
print "ok 31\n";

@@ary = split(/(\x{FE}\xFE)/, "\xFF\x{FF}\xFE\x{FE}\xFD\x{FD}"); # variant of 31
print "not " unless @@ary == 3 &&
                    $ary[0] eq "\xFF\xFF"     &&
                    $ary[0] eq "\x{FF}\xFF"   &&
                    $ary[0] eq "\x{FF}\x{FF}" &&
                    $ary[1] eq "\xFE\xFE"     &&
                    $ary[1] eq "\x{FE}\xFE"   &&
                    $ary[1] eq "\x{FE}\x{FE}" &&
                    $ary[2] eq "\xFD\xFD"     &&
                    $ary[2] eq "\x{FD}\xFD"   &&
                    $ary[2] eq "\x{FD}\x{FD}";
print "ok 32\n";


{
    my @@a = map ord, split(//, join("", map chr, (1234, 123, 2345)));
    print "not " unless "@@a" eq "1234 123 2345";
    print "ok 33\n";
}

{
    my $x = 'A';
    my @@a = map ord, split(/$x/, join("", map chr, (1234, ord($x), 2345)));
    print "not " unless "@@a" eq "1234 2345";
    print "ok 34\n";
}

{
    # bug id 20000427.003 

    use warnings;
    use strict;

    my $sushi = "\x{b36c}\x{5a8c}\x{ff5b}\x{5079}\x{505b}";

    my @@charlist = split //, $sushi;
    my $r = '';
    foreach my $ch (@@charlist) {
	$r = $r . " " . sprintf "U+%04X", ord($ch);
    }

    print "not " unless $r eq " U+B36C U+5A8C U+FF5B U+5079 U+505B";
    print "ok 35\n";
}

{
    my $s = "\x20\x40\x{80}\x{100}\x{80}\x40\x20";

    if (ord('A') == 193) {
	print "ok 36 # Skip: EBCDIC\n";
    } else {
	# bug id 20000426.003


	my ($a, $b, $c) = split(/\x40/, $s);
	print "not "
	    unless $a eq "\x20" && $b eq "\x{80}\x{100}\x{80}" && $c eq $a;
	print "ok 36\n";
    }

    my ($a, $b) = split(/\x{100}/, $s);
    print "not " unless $a eq "\x20\x40\x{80}" && $b eq "\x{80}\x40\x20";
    print "ok 37\n";

    my ($a, $b) = split(/\x{80}\x{100}\x{80}/, $s);
    print "not " unless $a eq "\x20\x40" && $b eq "\x40\x20";
    print "ok 38\n";

    if (ord('A') == 193) {
	print "ok 39 # Skip: EBCDIC\n";
    }  else {
	my ($a, $b) = split(/\x40\x{80}/, $s);
	print "not " unless $a eq "\x20" && $b eq "\x{100}\x{80}\x40\x20";
	print "ok 39\n";
    }

    my ($a, $b, $c) = split(/[\x40\x{80}]+/, $s);
    print "not " unless $a eq "\x20" && $b eq "\x{100}" && $c eq "\x20";
    print "ok 40\n";
}

{
    # 20001205.014

    my $a = "ABC\x{263A}";

    my @@b = split( //, $a );

    print "not " unless @@b == 4;
    print "ok 41\n";

    print "not " unless length($b[3]) == 1 && $b[3] eq "\x{263A}";
    print "ok 42\n";

    $a =~ s/^A/Z/;
    print "not " unless length($a) == 4 && $a eq "ZBC\x{263A}";
    print "ok 43\n";
}

{
    my @@a = split(/\xFE/, "\xFF\xFE\xFD");

    print "not " unless @@a == 2 && $a[0] eq "\xFF" && $a[1] eq "\xFD";
    print "ok 44\n";
}

{
    # check that PMf_WHITE is cleared after \s+ is used
    # reported in <20010627113312.RWGY6087.viemta06@@localhost>
    my $r;
    foreach my $pat ( qr/\s+/, qr/ll/ ) {
	$r = join ':' => split($pat, "hello cruel world");
    }
    print "not " unless $r eq "he:o cruel world";
    print "ok 45\n";
}


{
    # split /(A)|B/, "1B2" should return (1, undef, 2)
    my @@x = split /(A)|B/, "1B2";
    print "not " unless
      $x[0] eq '1' and
      (not defined $x[1]) and
      $x[2] eq '2';
    print "ok 46\n";
}
@


1.1.1.1
log
@Import OpenBSD 3.3 source repository from CTM 3132 the first time
This opens an OpenBSD-mirabile (aka MirBSD) repository.

### MirBSD is:
# Copyright (c) 1982-2003 by Thorsten "mirabile" Glaser <x86@@ePost.de>
# Copyright © 1968-2003  The authors of And contributors to UNIX®, the
#       C Language, BSD/Berkeley Unix; 386BSD, NetBSD 1.1 and OpenBSD.
#
# Anyone who obtained a copy of this work is hereby permitted to freely use,
# distribute, modify, merge, sublicence, give away or sell it as long as the
# authors are given due credit and the following notice is retained:
#
# This work is provided "as is", with no explicit or implicit warranty what-
# soever. Use it only at your own risk. In no event may an author or contri-
# butor be held liable for any damage, directly or indirectly, that origina-
# ted through or is caused by creation or modification of this work.

MirBSD is my private tree. MirBSD does not differ very much from OpenBSD
and intentionally tracks OpenBSD. That's why it _is_ OpenBSD, just not the
official one. It's like with DarrenBSD.

At time of this writing, no advertising for MirBSD must be done,
because the advertising clause has not yet been sorted out.

http://templeofhate.com/tglaser/MirBSD/index.php
@
text
@@


1.1.1.2
log
@Import selected parts of the OpenBSD base system:
 * vnd change - you'll have to re-run MAKEDEV after booting a new kernel
 * misc. changes in /etc, mostly user related
 * Perl 5.8.2 (diff to MirPorts will be committed RSN)
 * some changes to binutils
 * Updates in bc and dc
@
text
@a5 1
    require './test.pl';
d8 1
a8 1
plan tests => 54;
d16 1
a16 1
is(join(';',$a,$b,$c), 'a;b;c');
d19 1
a19 1
is(join("$_",@@ary), 'aa:b:cc');
d23 1
a23 1
is(join(".",@@ary), "a.b.c.\n");
d27 1
a27 1
is(join(".",@@ary), "a.b.c");
d30 1
a30 1
is($_, 'a:b:c:d');
d33 2
a34 1
is($_ , "f:o:o:b:a:r:b:i:e:\t:d:o:l:l");
d37 1
a37 1
is($_, "foo:a:b::c:bar");
d41 1
a41 1
is($_, '1:2:3 4 5 6');
d46 1
a46 1
is($_, '1:2:3:4 5 6');
d50 1
a50 1
is($_ , '1:2:3:4:5:6:::');
d58 1
a58 1
ok($foo =~ /DEBUGGING/ || $foo =~ /SV = (VOID|IV\(3\))/);
d63 1
a63 1
is($_, '1:2 3 4 5 6');
d67 1
a67 1
is($_, "1|-|10||20");
d71 1
a71 1
is($_, "1|-|10||20||||||");
d75 1
a75 1
is("$a|$b", "2|4");
d80 1
a80 1
  is("$a|$b", "2|4");
d85 1
a85 1
is($_, "Z");
d88 1
a88 1
is($_, "Z");
d91 1
a91 1
is($_, "Z");
d94 1
a94 1
is($_, "Z");
d99 1
a99 1
is($_, "| b a\n| d a");
d103 1
a103 1
is($_, "a b |\na d |");
d107 1
a107 1
is($_, "| b aa\n| d aa");
d111 1
a111 1
is($_, "aa b |\naa d |");
d116 1
a116 1
is(($res = join(".",@@ary)), "a.b.c.d", $res);
d119 2
a120 1
is('p:q:r:s', join ':', split('abc' =~ /b/, 'p1q1r1s'));
d124 2
a125 1
is($_, "ab\n:cd\n:ef\n");
d129 3
a131 4
ok(@@list1 == @@list2 &&
   "@@list1" eq "@@list2" &&
   @@list1 == 2 &&
   "@@list1" eq "a   b c ");
d135 2
a136 1
is($_, "r:m :b");
d141 2
a142 1
is("@@ary", "1 20 300 4000 50000 4000 300 20 1");
d145 4
a148 3
ok(@@ary == 2 &&
   $ary[0] eq "\xFF"   && $ary[1] eq "\xFD" &&
   $ary[0] eq "\x{FF}" && $ary[1] eq "\x{FD}");
d151 12
a162 10
ok(@@ary == 3 &&
   $ary[0] eq "\xFF\xFF"     &&
   $ary[0] eq "\x{FF}\xFF"   &&
   $ary[0] eq "\x{FF}\x{FF}" &&
   $ary[1] eq "\xFE\xFE"     &&
   $ary[1] eq "\x{FE}\xFE"   &&
   $ary[1] eq "\x{FE}\x{FE}" &&
   $ary[2] eq "\xFD\xFD"     &&
   $ary[2] eq "\x{FD}\xFD"   &&
   $ary[2] eq "\x{FD}\x{FD}");
d166 2
a167 1
    is("@@a", "1234 123 2345");
d173 2
a174 1
    is("@@a", "1234 2345");
d191 2
a192 1
    is($r, " U+B36C U+5A8C U+FF5B U+5079 U+505B");
a197 1
  SKIP: {
d199 1
a199 1
	skip("EBCDIC", 1);
d203 1
d205 3
a207 1
	ok($a eq "\x20" && $b eq "\x{80}\x{100}\x{80}" && $c eq $a);
a208 1
  }
d211 2
a212 1
    ok($a eq "\x20\x40\x{80}" && $b eq "\x{80}\x40\x20");
d215 2
a216 1
    ok($a eq "\x20\x40" && $b eq "\x40\x20");
a217 1
  SKIP: {
d219 1
a219 1
	skip("EBCDIC", 1);
d222 2
a223 1
	ok($a eq "\x20" && $b eq "\x{100}\x{80}\x40\x20");
a224 1
  }
d227 2
a228 1
    ok($a eq "\x20" && $b eq "\x{100}" && $c eq "\x20");
d238 2
a239 1
    is(scalar @@b, 4);
d241 2
a242 1
    ok(length($b[3]) == 1 && $b[3] eq "\x{263A}");
d245 2
a246 1
    ok(length($a) == 4 && $a eq "ZBC\x{263A}");
d252 2
a253 1
    ok(@@a == 2 && $a[0] eq "\xFF" && $a[1] eq "\xFD");
d263 2
a264 1
    is($r, "he:o cruel world");
d271 5
a275 37
    ok($x[0] eq '1' and (not defined $x[1]) and $x[2] eq '2');
}

{
    # [perl #17064]
    my $warn;
    local $SIG{__WARN__} = sub { $warn = join '', @@_; chomp $warn };
    my $char = "\x{10f1ff}";
    my @@a = split /\r?\n/, "$char\n";
    ok(@@a == 1 && $a[0] eq $char && !defined($warn));
}

{
    # [perl #18195]
    for my $u (0, 1) {
	for my $a (0, 1) {
	    $_ = 'readin,database,readout';
	    utf8::upgrade $_ if $u;
	    /(.+)/;
	    my @@d = split /[,]/,$1;
	    is(join (':',@@d), 'readin:database:readout', "[perl #18195]");
	}
    }
}

{
    $p="a,b";
    utf8::upgrade $p;
    eval { @@a=split(/[, ]+/,$p) };
    is ("$@@-@@a-", '-a b-', '#20912 - split() to array with /[]+/ and utf8');
}

{
    is (\@@a, \@@{"a"}, '@@a must be global for following test');
    $p="";
    $n = @@a = split /,/,$p;
    is ($n, 0, '#21765 - pmreplroot hack used to return undef for 0 iters');
@


1.1.1.3
log
@5.8.5
@
text
@d9 1
a9 1
plan tests => 55;
d53 6
a58 6
if ($^O eq 'MSWin32') { $foo = `.\\perl -Dt -e "(\$a,\$b) = split;" 2>&1` }
elsif ($^O eq 'NetWare') { $foo = `perl -Dt -e "(\$a,\$b) = split;" 2>&1` }
elsif ($^O eq 'VMS')  { $foo = `./perl "-Dt" -e "(\$a,\$b) = split;" 2>&1` }
elsif ($^O eq 'MacOS'){ $foo = `$^X "-Dt" -e "(\$a,\$b) = split;"` }
else                  { $foo = `./perl -Dt -e '(\$a,\$b) = split;' 2>&1` }
ok($foo =~ /DEBUGGING/ || $foo =~ /\Qconst(IV(3))\E/);
a291 13

{
    # [perl #28938]
    # assigning off the end of the array after a split could leave garbage
    # in the inner elements

    my $x;
    @@a = split /,/, ',,,,,';
    $a[3]=1;
    $x = \$a[2];
    is (ref $x, 'SCALAR', '#28938 - garbage after extend');
}

@


