head	1.1;
branch	1.1.1;
access;
symbols
	tg-mergetmp-mirosx-1:1.1.1.3
	tg-mergefixes-1-branch:1.1.1.3.0.4
	tg-mergefixes-1-base:1.1.1.3
	MIROS_X:1.1.1.3.0.2
	MIROS_X_BASE:1.1.1.3
	tg-mergetmp-3:1.1.1.3
	MIRBSD_XP_MIRPPC:1.1.1.2.0.4
	cvs-200410231830:1.1.1.3
	MIRBSD_XP_SPARC_BASE:1.1.1.2
	MIRBSD_XP_SPARC:1.1.1.2.0.2
	cvs-200406091940:1.1.1.2
	MIRBSD_7quater:1.1.1.1
	cvs-200405160640:1.1.1.2
	cvs-200401271800:1.1.1.2
	cvs-200401261630:1.1.1.2
	cvs-200401021645:1.1.1.2
	MIRBSD_7_ALPHA:1.1.1.1.0.6
	MIRBSD_7:1.1.1.1.0.4
	cvs-200312222040:1.1.1.2
	cvs-200312031730:1.1.1.2
	MIRBSD_7ter:1.1.1.1
	MIRBSD_7_DEV:1.1.1.1.0.2
	cvs-200310020700:1.1.1.1
	cvs-200309271030:1.1.1.1
	cvs-200309251530:1.1.1.1
	cvs-200308302005:1.1.1.1
	cvs-200308171200:1.1.1.1
	ctm-3496:1.1.1.1
	ctm-3449:1.1.1.1
	ctm-3437:1.1.1.1
	cvs-200307191805:1.1.1.1
	ctm-3425:1.1.1.1
	cvs-200307091500:1.1.1.1
	ctm-3389:1.1.1.1
	cvs-200306291430:1.1.1.1
	ctm-3341:1.1.1.1
	MIRBSD_5:1.1.1.1
	cvs-200306082100:1.1.1.1
	ctm-3316:1.1.1.1
	ctm-3272:1.1.1.1
	ctm-3264:1.1.1.1
	cvs-200305071630:1.1.1.1
	MIRBSD_4:1.1.1.1
	ctm-3203:1.1.1.1
	cvs-20030410-1130:1.1.1.1
	ctm-3155:1.1.1.1
	ctm-3132:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@# @;


1.1
date	2003.03.22.17.43.57;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.03.22.17.43.57;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2003.12.03.17.57.46;	author tg;	state Stab;
branches;
next	1.1.1.3;

1.1.1.3
date	2004.10.23.18.43.19;	author tg;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@#!./perl

print "1..72\n";

#
# @@foo, @@bar, and @@ary are also used from tie-stdarray after tie-ing them
#

@@ary = (1,2,3,4,5);
if (join('',@@ary) eq '12345') {print "ok 1\n";} else {print "not ok 1\n";}

$tmp = $ary[$#ary]; --$#ary;
if ($tmp == 5) {print "ok 2\n";} else {print "not ok 2\n";}
if ($#ary == 3) {print "ok 3\n";} else {print "not ok 3\n";}
if (join('',@@ary) eq '1234') {print "ok 4\n";} else {print "not ok 4\n";}

$[ = 1;
@@ary = (1,2,3,4,5);
if (join('',@@ary) eq '12345') {print "ok 5\n";} else {print "not ok 5\n";}

$tmp = $ary[$#ary]; --$#ary;
if ($tmp == 5) {print "ok 6\n";} else {print "not ok 6\n";}
if ($#ary == 4) {print "ok 7\n";} else {print "not ok 7\n";}
if (join('',@@ary) eq '1234') {print "ok 8\n";} else {print "not ok 8\n";}

if ($ary[5] eq '') {print "ok 9\n";} else {print "not ok 9\n";}

$#ary += 1;	# see if element 5 gone for good
if ($#ary == 5) {print "ok 10\n";} else {print "not ok 10\n";}
if (defined $ary[5]) {print "not ok 11\n";} else {print "ok 11\n";}

$[ = 0;
@@foo = ();
$r = join(',', $#foo, @@foo);
if ($r eq "-1") {print "ok 12\n";} else {print "not ok 12 $r\n";}
$foo[0] = '0';
$r = join(',', $#foo, @@foo);
if ($r eq "0,0") {print "ok 13\n";} else {print "not ok 13 $r\n";}
$foo[2] = '2';
$r = join(',', $#foo, @@foo);
if ($r eq "2,0,,2") {print "ok 14\n";} else {print "not ok 14 $r\n";}
@@bar = ();
$bar[0] = '0';
$bar[1] = '1';
$r = join(',', $#bar, @@bar);
if ($r eq "1,0,1") {print "ok 15\n";} else {print "not ok 15 $r\n";}
@@bar = ();
$r = join(',', $#bar, @@bar);
if ($r eq "-1") {print "ok 16\n";} else {print "not ok 16 $r\n";}
$bar[0] = '0';
$r = join(',', $#bar, @@bar);
if ($r eq "0,0") {print "ok 17\n";} else {print "not ok 17 $r\n";}
$bar[2] = '2';
$r = join(',', $#bar, @@bar);
if ($r eq "2,0,,2") {print "ok 18\n";} else {print "not ok 18 $r\n";}
reset 'b';
@@bar = ();
$bar[0] = '0';
$r = join(',', $#bar, @@bar);
if ($r eq "0,0") {print "ok 19\n";} else {print "not ok 19 $r\n";}
$bar[2] = '2';
$r = join(',', $#bar, @@bar);
if ($r eq "2,0,,2") {print "ok 20\n";} else {print "not ok 20 $r\n";}

$foo = 'now is the time';
if (($F1,$F2,$Etc) = ($foo =~ /^(\S+)\s+(\S+)\s*(.*)/)) {
    if ($F1 eq 'now' && $F2 eq 'is' && $Etc eq 'the time') {
	print "ok 21\n";
    }
    else {
	print "not ok 21\n";
    }
}
else {
    print "not ok 21\n";
}

$foo = 'lskjdf';
if ($cnt = (($F1,$F2,$Etc) = ($foo =~ /^(\S+)\s+(\S+)\s*(.*)/))) {
    print "not ok 22 $cnt $F1:$F2:$Etc\n";
}
else {
    print "ok 22\n";
}

%foo = ('blurfl','dyick','foo','bar','etc.','etc.');
%bar = %foo;
print $bar{'foo'} eq 'bar' ? "ok 23\n" : "not ok 23\n";
%bar = ();
print $bar{'foo'} eq '' ? "ok 24\n" : "not ok 24\n";
(%bar,$a,$b) = (%foo,'how','now');
print $bar{'foo'} eq 'bar' ? "ok 25\n" : "not ok 25\n";
print $bar{'how'} eq 'now' ? "ok 26\n" : "not ok 26\n";
@@bar{keys %foo} = values %foo;
print $bar{'foo'} eq 'bar' ? "ok 27\n" : "not ok 27\n";
print $bar{'how'} eq 'now' ? "ok 28\n" : "not ok 28\n";

@@foo = grep(/e/,split(' ','now is the time for all good men to come to'));
print join(' ',@@foo) eq 'the time men come' ? "ok 29\n" : "not ok 29\n";

@@foo = grep(!/e/,split(' ','now is the time for all good men to come to'));
print join(' ',@@foo) eq 'now is for all good to to' ? "ok 30\n" : "not ok 30\n";

$foo = join('',('a','b','c','d','e','f')[0..5]);
print $foo eq 'abcdef' ? "ok 31\n" : "not ok 31\n";

$foo = join('',('a','b','c','d','e','f')[0..1]);
print $foo eq 'ab' ? "ok 32\n" : "not ok 32\n";

$foo = join('',('a','b','c','d','e','f')[6]);
print $foo eq '' ? "ok 33\n" : "not ok 33\n";

@@foo = ('a','b','c','d','e','f')[0,2,4];
@@bar = ('a','b','c','d','e','f')[1,3,5];
$foo = join('',(@@foo,@@bar)[0..5]);
print $foo eq 'acebdf' ? "ok 34\n" : "not ok 34\n";

$foo = ('a','b','c','d','e','f')[0,2,4];
print $foo eq 'e' ? "ok 35\n" : "not ok 35\n";

$foo = ('a','b','c','d','e','f')[1];
print $foo eq 'b' ? "ok 36\n" : "not ok 36\n";

@@foo = ( 'foo', 'bar', 'burbl');
push(foo, 'blah');
print $#foo == 3 ? "ok 37\n" : "not ok 37\n";

# various AASSIGN_COMMON checks (see newASSIGNOP() in op.c)

$test = 37;
sub t { ++$test; print "not " unless $_[0]; print "ok $test\n"; }

@@foo = @@foo;
t("@@foo" eq "foo bar burbl blah");				# 38

(undef,@@foo) = @@foo;
t("@@foo" eq "bar burbl blah");					# 39

@@foo = ('XXX',@@foo, 'YYY');
t("@@foo" eq "XXX bar burbl blah YYY");				# 40

@@foo = @@foo = qw(foo b\a\r bu\\rbl blah);
t("@@foo" eq 'foo b\a\r bu\\rbl blah');				# 41

@@bar = @@foo = qw(foo bar);					# 42
t("@@foo" eq "foo bar");
t("@@bar" eq "foo bar");						# 43

# try the same with local
# XXX tie-stdarray fails the tests involving local, so we use
# different variable names to escape the 'tie'

@@bee = ( 'foo', 'bar', 'burbl', 'blah');
{

    local @@bee = @@bee;
    t("@@bee" eq "foo bar burbl blah");				# 44
    {
	local (undef,@@bee) = @@bee;
	t("@@bee" eq "bar burbl blah");				# 45
	{
	    local @@bee = ('XXX',@@bee,'YYY');
	    t("@@bee" eq "XXX bar burbl blah YYY");		# 46
	    {
		local @@bee = local(@@bee) = qw(foo bar burbl blah);
		t("@@bee" eq "foo bar burbl blah");		# 47
		{
		    local (@@bim) = local(@@bee) = qw(foo bar);
		    t("@@bee" eq "foo bar");			# 48
		    t("@@bim" eq "foo bar");			# 49
		}
		t("@@bee" eq "foo bar burbl blah");		# 50
	    }
	    t("@@bee" eq "XXX bar burbl blah YYY");		# 51
	}
	t("@@bee" eq "bar burbl blah");				# 52
    }
    t("@@bee" eq "foo bar burbl blah");				# 53
}

# try the same with my
{

    my @@bee = @@bee;
    t("@@bee" eq "foo bar burbl blah");				# 54
    {
	my (undef,@@bee) = @@bee;
	t("@@bee" eq "bar burbl blah");				# 55
	{
	    my @@bee = ('XXX',@@bee,'YYY');
	    t("@@bee" eq "XXX bar burbl blah YYY");		# 56
	    {
		my @@bee = my @@bee = qw(foo bar burbl blah);
		t("@@bee" eq "foo bar burbl blah");		# 57
		{
		    my (@@bim) = my(@@bee) = qw(foo bar);
		    t("@@bee" eq "foo bar");			# 58
		    t("@@bim" eq "foo bar");			# 59
		}
		t("@@bee" eq "foo bar burbl blah");		# 60
	    }
	    t("@@bee" eq "XXX bar burbl blah YYY");		# 61
	}
	t("@@bee" eq "bar burbl blah");				# 62
    }
    t("@@bee" eq "foo bar burbl blah");				# 63
}

# make sure reification behaves
my $t = 63;
sub reify { $_[1] = ++$t; print "@@_\n"; }
reify('ok');
reify('ok');

# qw() is no more a runtime split, it's compiletime.
print "not " unless qw(foo bar snorfle)[2] eq 'snorfle';
print "ok 66\n";

@@ary = (12,23,34,45,56);

print "not " unless shift(@@ary) == 12;
print "ok 67\n";

print "not " unless pop(@@ary) == 56;
print "ok 68\n";

print "not " unless push(@@ary,56) == 4;
print "ok 69\n";

print "not " unless unshift(@@ary,12) == 5;
print "ok 70\n";

sub foo { "a" }
@@foo=(foo())[0,0];
$foo[1] eq "a" or print "not ";
print "ok 71\n";

# $[ should have the same effect regardless of whether the aelem
#    op is optimized to aelemfast.

sub tary {
  local $[ = 10;
  my $five = 5;
  print "not " unless $tary[5] == $tary[$five];
  print "ok 72\n";
}

@@tary = (0..50);
tary();
@


1.1.1.1
log
@Import OpenBSD 3.3 source repository from CTM 3132 the first time
This opens an OpenBSD-mirabile (aka MirBSD) repository.

### MirBSD is:
# Copyright (c) 1982-2003 by Thorsten "mirabile" Glaser <x86@@ePost.de>
# Copyright © 1968-2003  The authors of And contributors to UNIX®, the
#       C Language, BSD/Berkeley Unix; 386BSD, NetBSD 1.1 and OpenBSD.
#
# Anyone who obtained a copy of this work is hereby permitted to freely use,
# distribute, modify, merge, sublicence, give away or sell it as long as the
# authors are given due credit and the following notice is retained:
#
# This work is provided "as is", with no explicit or implicit warranty what-
# soever. Use it only at your own risk. In no event may an author or contri-
# butor be held liable for any damage, directly or indirectly, that origina-
# ted through or is caused by creation or modification of this work.

MirBSD is my private tree. MirBSD does not differ very much from OpenBSD
and intentionally tracks OpenBSD. That's why it _is_ OpenBSD, just not the
official one. It's like with DarrenBSD.

At time of this writing, no advertising for MirBSD must be done,
because the advertising clause has not yet been sorted out.

http://templeofhate.com/tglaser/MirBSD/index.php
@
text
@@


1.1.1.2
log
@Import selected parts of the OpenBSD base system:
 * vnd change - you'll have to re-run MAKEDEV after booting a new kernel
 * misc. changes in /etc, mostly user related
 * Perl 5.8.2 (diff to MirPorts will be committed RSN)
 * some changes to binutils
 * Updates in bc and dc
@
text
@d3 1
a3 7

BEGIN {
    chdir 't' if -d 't';
    @@INC = '../lib';
}

print "1..73\n";
a249 19


require './test.pl';

# bugid #15439 - clearing an array calls destructors which may try
# to modify the array - caused 'Attempt to free unreferenced scalar'

my $got = runperl (
	prog => q{
		    sub X::DESTROY { @@a = () }
		    @@a = (bless {}, 'X');
		    @@a = ();
		},
	stderr => 1
    );

$got =~ s/\n/ /g;
print "# $got\nnot " unless $got eq '';
print "ok 73\n";
@


1.1.1.3
log
@5.8.5
@
text
@d3 1
d9 1
a9 1
print "1..82\n";
a274 26

# Test negative and funky indices.

{
    my @@a = 0..4;
    print $a[-1] == 4 ? "ok 74\n" : "not ok 74\n";
    print $a[-2] == 3 ? "ok 75\n" : "not ok 75\n";
    print $a[-5] == 0 ? "ok 76\n" : "not ok 76\n";
    print defined $a[-6] ? "not ok 77\n" : "ok 77\n";

    print $a[2.1]   == 2 ? "ok 78\n" : "not ok 78\n";
    print $a[2.9]   == 2 ? "ok 79\n" : "not ok 79\n";
    print $a[undef] == 0 ? "ok 80\n" : "not ok 80\n";
    print $a["3rd"] == 3 ? "ok 81\n" : "not ok 81\n";
}

sub kindalike { # TODO: test.pl-ize the array.t.
    my ($s, $r, $m, $n) = @@_;
    print $s =~ /$r/ ? "ok $n - $m\n" : "not ok $n - $m ($s)\n";
}

{
    my @@a;
    eval '$a[-1] = 0';
    kindalike($@@, qr/Modification of non-creatable array value attempted, subscript -1/, "\$a[-1] = 0", 82);
}
@


