head	1.1;
branch	1.1.1;
access;
symbols
	tg-mergetmp-mirosx-1:1.1.1.2
	tg-mergefixes-1-branch:1.1.1.2.0.8
	tg-mergefixes-1-base:1.1.1.2
	MIROS_X:1.1.1.2.0.6
	MIROS_X_BASE:1.1.1.2
	tg-mergetmp-3:1.1.1.2
	MIRBSD_XP_MIRPPC:1.1.1.2.0.4
	cvs-200410231830:1.1.1.2
	MIRBSD_XP_SPARC_BASE:1.1.1.2
	MIRBSD_XP_SPARC:1.1.1.2.0.2
	cvs-200406091940:1.1.1.2
	MIRBSD_7quater:1.1.1.1
	cvs-200405160640:1.1.1.2
	cvs-200401271800:1.1.1.2
	cvs-200401261630:1.1.1.2
	cvs-200401021645:1.1.1.2
	MIRBSD_7_ALPHA:1.1.1.1.0.6
	MIRBSD_7:1.1.1.1.0.4
	cvs-200312222040:1.1.1.2
	cvs-200312031730:1.1.1.2
	MIRBSD_7ter:1.1.1.1
	MIRBSD_7_DEV:1.1.1.1.0.2
	cvs-200310020700:1.1.1.1
	cvs-200309271030:1.1.1.1
	cvs-200309251530:1.1.1.1
	cvs-200308302005:1.1.1.1
	cvs-200308171200:1.1.1.1
	ctm-3496:1.1.1.1
	ctm-3449:1.1.1.1
	ctm-3437:1.1.1.1
	cvs-200307191805:1.1.1.1
	ctm-3425:1.1.1.1
	cvs-200307091500:1.1.1.1
	ctm-3389:1.1.1.1
	cvs-200306291430:1.1.1.1
	ctm-3341:1.1.1.1
	MIRBSD_5:1.1.1.1
	cvs-200306082100:1.1.1.1
	ctm-3316:1.1.1.1
	ctm-3272:1.1.1.1
	ctm-3264:1.1.1.1
	cvs-200305071630:1.1.1.1
	MIRBSD_4:1.1.1.1
	ctm-3203:1.1.1.1
	cvs-20030410-1130:1.1.1.1
	ctm-3155:1.1.1.1
	ctm-3132:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@# @;


1.1
date	2003.03.22.17.43.57;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.03.22.17.43.57;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2003.12.03.17.57.56;	author tg;	state Stab;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@#!./perl

BEGIN {
    chdir 't' if -d 't';
    @@INC = '../lib';
}

my @@expect;
my $data = "";
my @@data = ();
my $test = 1;

sub ok { print "not " unless shift; print "ok ",$test++,"\n"; }

package Implement;

BEGIN { *ok = \*main::ok }

sub compare {
    return unless @@expect;
    return ok(0) unless(@@_ == @@expect);

    my $i;
    for($i = 0 ; $i < @@_ ; $i++) {
	next if $_[$i] eq $expect[$i];
	return ok(0);
    }

    ok(1);
}

sub TIEHANDLE {
    compare(TIEHANDLE => @@_);
    my ($class,@@val) = @@_;
    return bless \@@val,$class;
}

sub PRINT {
    compare(PRINT => @@_);
    1;
}

sub PRINTF {
    compare(PRINTF => @@_);
    2;
}

sub READLINE {
    compare(READLINE => @@_);
    wantarray ? @@data : shift @@data;
}

sub GETC {
    compare(GETC => @@_);
    substr($data,0,1);
}

sub READ {
    compare(READ => @@_);
    substr($_[1],$_[3] || 0) = substr($data,0,$_[2]);
    3;
}

sub WRITE {
    compare(WRITE => @@_);
    $data = substr($_[1],$_[3] || 0, $_[2]);
    length($data);
}

sub CLOSE {
    compare(CLOSE => @@_);
    
    5;
}

package main;

use Symbol;

print "1..39\n";

my $fh = gensym;

@@expect = (TIEHANDLE => 'Implement');
my $ob = tie *$fh,'Implement';
ok(ref($ob) eq 'Implement');
ok(tied(*$fh) == $ob);

@@expect = (PRINT => $ob,"some","text");
$r = print $fh @@expect[2,3];
ok($r == 1);

@@expect = (PRINTF => $ob,"%s","text");
$r = printf $fh @@expect[2,3];
ok($r == 2);

$text = (@@data = ("the line\n"))[0];
@@expect = (READLINE => $ob);
$ln = <$fh>;
ok($ln eq $text);

@@expect = ();
@@in = @@data = qw(a line at a time);
@@line = <$fh>;
@@expect = @@in;
Implement::compare(@@line);

@@expect = (GETC => $ob);
$data = "abc";
$ch = getc $fh;
ok($ch eq "a");

$buf = "xyz";
@@expect = (READ => $ob, $buf, 3);
$data = "abc";
$r = read $fh,$buf,3;
ok($r == 3);
ok($buf eq "abc");


$buf = "xyzasd";
@@expect = (READ => $ob, $buf, 3,3);
$data = "abc";
$r = sysread $fh,$buf,3,3;
ok($r == 3);
ok($buf eq "xyzabc");

$buf = "qwerty";
@@expect = (WRITE => $ob, $buf, 4,1);
$data = "";
$r = syswrite $fh,$buf,4,1;
ok($r == 4);
ok($data eq "wert");

$buf = "qwerty";
@@expect = (WRITE => $ob, $buf, 4);
$data = "";
$r = syswrite $fh,$buf,4;
ok($r == 4);
ok($data eq "qwer");

$buf = "qwerty";
@@expect = (WRITE => $ob, $buf, 6);
$data = "";
$r = syswrite $fh,$buf;
ok($r == 6);
ok($data eq "qwerty");

@@expect = (CLOSE => $ob);
$r = close $fh;
ok($r == 5);

# Does aliasing work with tied FHs?
*ALIAS = *$fh;
@@expect = (PRINT => $ob,"some","text");
$r = print ALIAS @@expect[2,3];
ok($r == 1);

{
    use warnings;
    # Special case of aliasing STDERR, which used
    # to dump core when warnings were enabled
    local *STDERR = *$fh;
    @@expect = (PRINT => $ob,"some","text");
    $r = print STDERR @@expect[2,3];
    ok($r == 1);
}

{
    # Test for change #11536
    package Foo;
    use strict;
    sub TIEHANDLE { bless {} }
    my $cnt = 'a';
    sub READ {
	$_[1] = $cnt++;
	1;
    }
    sub do_read {
	my $fh = shift;
	read $fh, my $buff, 1;
	main::ok(1);
    }
    $|=1;
    tie *STDIN, 'Foo';
    read STDIN, my $buff, 1;
    main::ok(1);
    do_read(\*STDIN);
    untie *STDIN;
}


{
    # test for change 11639: Can't localize *FH, then tie it
    {
	local *foo;
	tie %foo, 'Blah';
    }
    ok(!tied %foo);

    {
	local *bar;
	tie @@bar, 'Blah';
    }
    ok(!tied @@bar);

    {
	local *BAZ;
	tie *BAZ, 'Blah';
    }
    ok(!tied *BAZ);

    package Blah;

    sub TIEHANDLE {bless {}}
    sub TIEHASH   {bless {}}
    sub TIEARRAY  {bless {}}
}

{
    # warnings should pass to the PRINT method of tied STDERR
    my @@received;

    local *STDERR = *$fh;
    local *Implement::PRINT = sub { @@received = @@_ };

    $r = warn("some", "text", "\n");
    @@expect = (PRINT => $ob,"sometext\n");

    Implement::compare(PRINT => @@received);
}

@


1.1.1.1
log
@Import OpenBSD 3.3 source repository from CTM 3132 the first time
This opens an OpenBSD-mirabile (aka MirBSD) repository.

### MirBSD is:
# Copyright (c) 1982-2003 by Thorsten "mirabile" Glaser <x86@@ePost.de>
# Copyright © 1968-2003  The authors of And contributors to UNIX®, the
#       C Language, BSD/Berkeley Unix; 386BSD, NetBSD 1.1 and OpenBSD.
#
# Anyone who obtained a copy of this work is hereby permitted to freely use,
# distribute, modify, merge, sublicence, give away or sell it as long as the
# authors are given due credit and the following notice is retained:
#
# This work is provided "as is", with no explicit or implicit warranty what-
# soever. Use it only at your own risk. In no event may an author or contri-
# butor be held liable for any damage, directly or indirectly, that origina-
# ted through or is caused by creation or modification of this work.

MirBSD is my private tree. MirBSD does not differ very much from OpenBSD
and intentionally tracks OpenBSD. That's why it _is_ OpenBSD, just not the
official one. It's like with DarrenBSD.

At time of this writing, no advertising for MirBSD must be done,
because the advertising clause has not yet been sorted out.

http://templeofhate.com/tglaser/MirBSD/index.php
@
text
@@


1.1.1.2
log
@Import selected parts of the OpenBSD base system:
 * vnd change - you'll have to re-run MAKEDEV after booting a new kernel
 * misc. changes in /etc, mostly user related
 * Perl 5.8.2 (diff to MirPorts will be committed RSN)
 * some changes to binutils
 * Updates in bc and dc
@
text
@d1 1
a1 1
#!./perl -w
d11 1
d13 5
a17 2
require './test.pl';
plan(tests => 41);
d21 1
a21 1
    return ::fail() unless(@@_ == @@expect);
d23 2
a24 1
    for my $i (0..$#_) {
d26 1
a26 1
	return ::fail();
d29 1
a29 1
    ::pass();
a31 3

package Implement;

d33 1
a33 1
    ::compare(TIEHANDLE => @@_);
d39 1
a39 1
    ::compare(PRINT => @@_);
d44 1
a44 1
    ::compare(PRINTF => @@_);
d49 1
a49 1
    ::compare(READLINE => @@_);
d54 1
a54 1
    ::compare(GETC => @@_);
d59 1
a59 1
    ::compare(READ => @@_);
d65 1
a65 1
    ::compare(WRITE => @@_);
d71 1
a71 1
    ::compare(CLOSE => @@_);
d80 2
d86 2
a87 2
is(ref($ob),  'Implement');
is(tied(*$fh), $ob);
d91 1
a91 1
is($r, 1);
d95 1
a95 1
is($r, 2);
d100 1
a100 1
is($ln, $text);
d106 1
a106 1
compare(@@line);
d111 1
a111 1
is($ch, "a");
d117 2
a118 2
is($r, 3);
is($buf, "abc");
d125 2
a126 2
is($r, 3);
is($buf, "xyzabc");
d132 2
a133 2
is($r, 4);
is($data, "wert");
d139 2
a140 2
is($r, 4);
is($data, "qwer");
d146 2
a147 2
is($r, 6);
is($data, "qwerty");
d151 1
a151 1
is($r, 5);
d157 1
a157 1
is($r, 1);
d166 1
a166 1
    is($r, 1);
d182 1
a182 1
	::pass();
d187 1
a187 1
    ::pass();
a224 1
    no warnings 'redefine';
d230 1
a230 6
    compare(PRINT => @@received);

    use warnings;
    print undef;

    like($received[1], qr/Use of uninitialized value/);
a231 14

{
    # [ID 20020713.001] chomp($data=<tied_fh>)
    local *TEST;
    tie *TEST, 'CHOMP';
    my $data;
    chomp($data = <TEST>);
    is($data, 'foobar');

    package CHOMP;
    sub TIEHANDLE { bless {}, $_[0] }
    sub READLINE { "foobar\n" }
}

@

