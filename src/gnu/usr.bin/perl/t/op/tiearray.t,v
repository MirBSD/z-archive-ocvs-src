head	1.1;
branch	1.1.1;
access;
symbols
	tg-mergetmp-mirosx-1:1.1.1.2
	tg-mergefixes-1-branch:1.1.1.2.0.8
	tg-mergefixes-1-base:1.1.1.2
	MIROS_X:1.1.1.2.0.6
	MIROS_X_BASE:1.1.1.2
	tg-mergetmp-3:1.1.1.2
	MIRBSD_XP_MIRPPC:1.1.1.2.0.4
	cvs-200410231830:1.1.1.2
	MIRBSD_XP_SPARC_BASE:1.1.1.2
	MIRBSD_XP_SPARC:1.1.1.2.0.2
	cvs-200406091940:1.1.1.2
	MIRBSD_7quater:1.1.1.1
	cvs-200405160640:1.1.1.2
	cvs-200401271800:1.1.1.2
	cvs-200401261630:1.1.1.2
	cvs-200401021645:1.1.1.2
	MIRBSD_7_ALPHA:1.1.1.1.0.6
	MIRBSD_7:1.1.1.1.0.4
	cvs-200312222040:1.1.1.2
	cvs-200312031730:1.1.1.2
	MIRBSD_7ter:1.1.1.1
	MIRBSD_7_DEV:1.1.1.1.0.2
	cvs-200310020700:1.1.1.1
	cvs-200309271030:1.1.1.1
	cvs-200309251530:1.1.1.1
	cvs-200308302005:1.1.1.1
	cvs-200308171200:1.1.1.1
	ctm-3496:1.1.1.1
	ctm-3449:1.1.1.1
	ctm-3437:1.1.1.1
	cvs-200307191805:1.1.1.1
	ctm-3425:1.1.1.1
	cvs-200307091500:1.1.1.1
	ctm-3389:1.1.1.1
	cvs-200306291430:1.1.1.1
	ctm-3341:1.1.1.1
	MIRBSD_5:1.1.1.1
	cvs-200306082100:1.1.1.1
	ctm-3316:1.1.1.1
	ctm-3272:1.1.1.1
	ctm-3264:1.1.1.1
	cvs-200305071630:1.1.1.1
	MIRBSD_4:1.1.1.1
	ctm-3203:1.1.1.1
	cvs-20030410-1130:1.1.1.1
	ctm-3155:1.1.1.1
	ctm-3132:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@# @;


1.1
date	2003.03.22.17.43.57;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.03.22.17.43.57;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2003.12.03.17.57.56;	author tg;	state Stab;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@#!./perl


BEGIN {
    chdir 't' if -d 't';
    @@INC = '../lib';
}

my %seen;

package Implement;

sub TIEARRAY
{
 $seen{'TIEARRAY'}++;
 my ($class,@@val) = @@_;
 return bless \@@val,$class;
}

sub STORESIZE
{        
 $seen{'STORESIZE'}++;
 my ($ob,$sz) = @@_; 
 return $#{$ob} = $sz-1;
}

sub EXTEND
{        
 $seen{'EXTEND'}++;
 my ($ob,$sz) = @@_; 
 return @@$ob = $sz;
}

sub FETCHSIZE
{        
 $seen{'FETCHSIZE'}++;
 return scalar(@@{$_[0]});
}

sub FETCH
{
 $seen{'FETCH'}++;
 my ($ob,$id) = @@_;
 return $ob->[$id]; 
}

sub STORE
{
 $seen{'STORE'}++;
 my ($ob,$id,$val) = @@_;
 $ob->[$id] = $val; 
}                 

sub UNSHIFT
{
 $seen{'UNSHIFT'}++;
 my $ob = shift;
 unshift(@@$ob,@@_);
}                 

sub PUSH
{
 $seen{'PUSH'}++;
 my $ob = shift;;
 push(@@$ob,@@_);
}                 

sub CLEAR
{
 $seen{'CLEAR'}++;
 @@{$_[0]} = ();
}

sub DESTROY
{
 $seen{'DESTROY'}++;
}

sub POP
{
 $seen{'POP'}++;
 my ($ob) = @@_;
 return pop(@@$ob);
}

sub SHIFT
{
 $seen{'SHIFT'}++;
 my ($ob) = @@_;
 return shift(@@$ob);
}

sub SPLICE
{
 $seen{'SPLICE'}++;
 my $ob  = shift;                    
 my $off = @@_ ? shift : 0;
 my $len = @@_ ? shift : @@$ob-1;
 return splice(@@$ob,$off,$len,@@_);
}

package main;

print "1..36\n";                   
my $test = 1;

{my @@ary;

{ my $ob = tie @@ary,'Implement',3,2,1;
  print "not " unless $ob;
  print "ok ", $test++,"\n";
  print "not " unless tied(@@ary) == $ob;
  print "ok ", $test++,"\n";
}


print "not " unless @@ary == 3;
print "ok ", $test++,"\n";

print "not " unless $#ary == 2;
print "ok ", $test++,"\n";

print "not " unless join(':',@@ary) eq '3:2:1';
print "ok ", $test++,"\n";         

print "not " unless $seen{'FETCH'} >= 3;
print "ok ", $test++,"\n";

@@ary = (1,2,3);

print "not " unless $seen{'STORE'} >= 3;
print "ok ", $test++,"\n";
print "not " unless join(':',@@ary) eq '1:2:3';
print "ok ", $test++,"\n";         

{my @@thing = @@ary;
print "not " unless join(':',@@thing) eq '1:2:3';
print "ok ", $test++,"\n";         

tie @@thing,'Implement';
@@thing = @@ary;
print "not " unless join(':',@@thing) eq '1:2:3';
print "ok ", $test++,"\n";
} 

print "not " unless pop(@@ary) == 3;
print "ok ", $test++,"\n";
print "not " unless $seen{'POP'} == 1;
print "ok ", $test++,"\n";
print "not " unless join(':',@@ary) eq '1:2';
print "ok ", $test++,"\n";

push(@@ary,4);
print "not " unless $seen{'PUSH'} == 1;
print "ok ", $test++,"\n";
print "not " unless join(':',@@ary) eq '1:2:4';
print "ok ", $test++,"\n";

my @@x = splice(@@ary,1,1,7);


print "not " unless $seen{'SPLICE'} == 1;
print "ok ", $test++,"\n";

print "not " unless @@x == 1;
print "ok ", $test++,"\n";
print "not " unless $x[0] == 2;
print "ok ", $test++,"\n";
print "not " unless join(':',@@ary) eq '1:7:4';
print "ok ", $test++,"\n";             

print "not " unless shift(@@ary) == 1;
print "ok ", $test++,"\n";
print "not " unless $seen{'SHIFT'} == 1;
print "ok ", $test++,"\n";
print "not " unless join(':',@@ary) eq '7:4';
print "ok ", $test++,"\n";             

my $n = unshift(@@ary,5,6);
print "not " unless $seen{'UNSHIFT'} == 1;
print "ok ", $test++,"\n";
print "not " unless $n == 4;
print "ok ", $test++,"\n";
print "not " unless join(':',@@ary) eq '5:6:7:4';
print "ok ", $test++,"\n";

@@ary = split(/:/,'1:2:3');
print "not " unless join(':',@@ary) eq '1:2:3';
print "ok ", $test++,"\n";         

  
my $t = 0;
foreach $n (@@ary)
 {
  print "not " unless $n == ++$t;
  print "ok ", $test++,"\n";         
 }

# (30-33) 20020303 mjd-perl-patch+@@plover.com
@@ary = ();
$seen{POP} = 0;
pop @@ary;                       # this didn't used to call POP at all
print "not " unless $seen{POP} == 1;
print "ok ", $test++,"\n";         
$seen{SHIFT} = 0;
shift @@ary;                     # this didn't used to call SHIFT at  all
print "not " unless $seen{SHIFT} == 1;
print "ok ", $test++,"\n";         
$seen{PUSH} = 0;
push @@ary;                       # this didn't used to call PUSH at all
print "not " unless $seen{PUSH} == 1;
print "ok ", $test++,"\n";         
$seen{UNSHIFT} = 0;
unshift @@ary;                   # this didn't used to call UNSHIFT at all
print "not " unless $seen{UNSHIFT} == 1;
print "ok ", $test++,"\n";         

@@ary = qw(3 2 1);
print "not " unless join(':',@@ary) eq '3:2:1';
print "ok ", $test++,"\n";         

untie @@ary;   

}

# 20020401 mjd-perl-patch+@@plover.com
# Thanks to Dave Mitchell for the small test case and the fix
{
  my @@a;
  
  sub X::TIEARRAY { bless {}, 'X' }

  sub X::SPLICE {
    do '/dev/null';
    die;
  }

  tie @@a, 'X';
  eval { splice(@@a) };
  # If we survived this far.
  print "ok ", $test++, "\n";
}
                           
print "not " unless $seen{'DESTROY'} == 2;
print "ok ", $test++,"\n";         

@


1.1.1.1
log
@Import OpenBSD 3.3 source repository from CTM 3132 the first time
This opens an OpenBSD-mirabile (aka MirBSD) repository.

### MirBSD is:
# Copyright (c) 1982-2003 by Thorsten "mirabile" Glaser <x86@@ePost.de>
# Copyright © 1968-2003  The authors of And contributors to UNIX®, the
#       C Language, BSD/Berkeley Unix; 386BSD, NetBSD 1.1 and OpenBSD.
#
# Anyone who obtained a copy of this work is hereby permitted to freely use,
# distribute, modify, merge, sublicence, give away or sell it as long as the
# authors are given due credit and the following notice is retained:
#
# This work is provided "as is", with no explicit or implicit warranty what-
# soever. Use it only at your own risk. In no event may an author or contri-
# butor be held liable for any damage, directly or indirectly, that origina-
# ted through or is caused by creation or modification of this work.

MirBSD is my private tree. MirBSD does not differ very much from OpenBSD
and intentionally tracks OpenBSD. That's why it _is_ OpenBSD, just not the
official one. It's like with DarrenBSD.

At time of this writing, no advertising for MirBSD must be done,
because the advertising clause has not yet been sorted out.

http://templeofhate.com/tglaser/MirBSD/index.php
@
text
@@


1.1.1.2
log
@Import selected parts of the OpenBSD base system:
 * vnd change - you'll have to re-run MAKEDEV after booting a new kernel
 * misc. changes in /etc, mostly user related
 * Perl 5.8.2 (diff to MirPorts will be committed RSN)
 * some changes to binutils
 * Updates in bc and dc
@
text
@d102 1
a102 27
package NegIndex;               # 20020220 MJD
@@ISA = 'Implement';

# simulate indices -2 .. 2
my $offset = 2;
$NegIndex::NEGATIVE_INDICES = 1;

sub FETCH {
  my ($ob,$id) = @@_;
#  print "# FETCH @@_\n";
  $id += $offset;
  $ob->[$id];
}

sub STORE {
  my ($ob,$id,$value) = @@_;
#  print "# STORE @@_\n";
  $id += $offset;
  $ob->[$id] = $value;
}

sub DELETE {
  my ($ob,$id) = @@_;
#  print "# DELETE @@_\n";
  $id += $offset;
  delete $ob->[$id];
}
d104 1
a104 10
sub EXISTS {
  my ($ob,$id) = @@_;
#  print "# EXISTS @@_\n";
  $id += $offset;
  exists $ob->[$id];
}

package main;
  
print "1..61\n";                   
a242 48


{ # 20020220 mjd-perl-patch+@@plover.com
  my @@n;
  tie @@n => 'NegIndex', ('A' .. 'E');

  # FETCH
  print "not " unless $n[0] eq 'C';
  print "ok ", $test++,"\n";
  print "not " unless $n[1] eq 'D';
  print "ok ", $test++,"\n";
  print "not " unless $n[2] eq 'E';
  print "ok ", $test++,"\n";
  print "not " unless $n[-1] eq 'B';
  print "ok ", $test++,"\n";
  print "not " unless $n[-2] eq 'A';
  print "ok ", $test++,"\n";

  # STORE
  $n[-2] = 'a';
  print "not " unless $n[-2] eq 'a';
  print "ok ", $test++,"\n";
  $n[-1] = 'b';
  print "not " unless $n[-1] eq 'b';
  print "ok ", $test++,"\n";
  $n[0] = 'c';
  print "not " unless $n[0] eq 'c';
  print "ok ", $test++,"\n";
  $n[1] = 'd';
  print "not " unless $n[1] eq 'd';
  print "ok ", $test++,"\n";
  $n[2] = 'e';
  print "not " unless $n[2] eq 'e';
  print "ok ", $test++,"\n";

  # DELETE and EXISTS
  for (-2 .. 2) {
    print exists($n[$_]) ? "ok $test\n" : "not ok $test\n";
    $test++;
    delete $n[$_];
    print defined($n[$_]) ? "not ok $test\n" : "ok $test\n";
    $test++;
    print exists($n[$_]) ? "not ok $test\n" : "ok $test\n";
    $test++;
  }
}
                           

d244 1
a244 1
print "not " unless $seen{'DESTROY'} == 3;
@

