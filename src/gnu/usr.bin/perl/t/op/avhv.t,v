head	1.1;
branch	1.1.1;
access;
symbols
	tg-mergetmp-mirosx-1:1.1.1.2
	tg-mergefixes-1-branch:1.1.1.2.0.8
	tg-mergefixes-1-base:1.1.1.2
	MIROS_X:1.1.1.2.0.6
	MIROS_X_BASE:1.1.1.2
	tg-mergetmp-3:1.1.1.2
	MIRBSD_XP_MIRPPC:1.1.1.2.0.4
	cvs-200410231830:1.1.1.2
	MIRBSD_XP_SPARC_BASE:1.1.1.2
	MIRBSD_XP_SPARC:1.1.1.2.0.2
	cvs-200406091940:1.1.1.2
	MIRBSD_7quater:1.1.1.1
	cvs-200405160640:1.1.1.2
	cvs-200401271800:1.1.1.1
	cvs-200401261630:1.1.1.1
	cvs-200401021645:1.1.1.1
	MIRBSD_7_ALPHA:1.1.1.1.0.6
	MIRBSD_7:1.1.1.1.0.4
	cvs-200312222040:1.1.1.1
	cvs-200312031730:1.1.1.1
	MIRBSD_7ter:1.1.1.1
	MIRBSD_7_DEV:1.1.1.1.0.2
	cvs-200310020700:1.1.1.1
	cvs-200309271030:1.1.1.1
	cvs-200309251530:1.1.1.1
	cvs-200308302005:1.1.1.1
	cvs-200308171200:1.1.1.1
	ctm-3496:1.1.1.1
	ctm-3449:1.1.1.1
	ctm-3437:1.1.1.1
	cvs-200307191805:1.1.1.1
	ctm-3425:1.1.1.1
	cvs-200307091500:1.1.1.1
	ctm-3389:1.1.1.1
	cvs-200306291430:1.1.1.1
	ctm-3341:1.1.1.1
	MIRBSD_5:1.1.1.1
	cvs-200306082100:1.1.1.1
	ctm-3316:1.1.1.1
	ctm-3272:1.1.1.1
	ctm-3264:1.1.1.1
	cvs-200305071630:1.1.1.1
	MIRBSD_4:1.1.1.1
	ctm-3203:1.1.1.1
	cvs-20030410-1130:1.1.1.1
	ctm-3155:1.1.1.1
	ctm-3132:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@# @;


1.1
date	2003.03.22.17.43.57;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.03.22.17.43.57;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2004.05.16.08.04.03;	author tg;	state Stab;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@#!./perl

BEGIN {
    chdir 't' if -d 't';
    @@INC = '../lib';
}

require Tie::Array;

package Tie::BasicArray;
@@ISA = 'Tie::Array';
sub TIEARRAY  { bless [], $_[0] }
sub STORE     { $_[0]->[$_[1]] = $_[2] }
sub FETCH     { $_[0]->[$_[1]] }
sub FETCHSIZE { scalar(@@{$_[0]})} 
sub STORESIZE { $#{$_[0]} = $_[1]+1 } 

package main;

print "1..29\n";

$sch = {
    'abc' => 1,
    'def' => 2,
    'jkl' => 3,
};

# basic normal array
$a = [];
$a->[0] = $sch;

$a->{'abc'} = 'ABC';
$a->{'def'} = 'DEF';
$a->{'jkl'} = 'JKL';

@@keys = keys %$a;
@@values = values %$a;

if ($#keys == 2 && $#values == 2) {print "ok 1\n";} else {print "not ok 1\n";}

$i = 0;		# stop -w complaints

while (($key,$value) = each %$a) {
    if ($key eq $keys[$i] && $value eq $values[$i] && $key eq lc($value)) {
	$key =~ y/a-z/A-Z/;
	$i++ if $key eq $value;
    }
}

if ($i == 3) {print "ok 2\n";} else {print "not ok 2\n";}

# quick check with tied array
tie @@fake, 'Tie::StdArray';
$a = \@@fake;
$a->[0] = $sch;

$a->{'abc'} = 'ABC';
if ($a->{'abc'} eq 'ABC') {print "ok 3\n";} else {print "not ok 3\n";}

# quick check with tied array
tie @@fake, 'Tie::BasicArray';
$a = \@@fake;
$a->[0] = $sch;

$a->{'abc'} = 'ABC';
if ($a->{'abc'} eq 'ABC') {print "ok 4\n";} else {print "not ok 4\n";}

# quick check with tied array & tied hash
require Tie::Hash;
tie %fake, Tie::StdHash;
%fake = %$sch;
$a->[0] = \%fake;

$a->{'abc'} = 'ABC';
if ($a->{'abc'} eq 'ABC') {print "ok 5\n";} else {print "not ok 5\n";}

# hash slice
my $slice = join('', 'x',@@$a{'abc','def'},'x');
print "not " if $slice ne 'xABCx';
print "ok 6\n";

# evaluation in scalar context
my $avhv = [{}];
print "not " if %$avhv;
print "ok 7\n";

push @@$avhv, "a";
print "not " if %$avhv;
print "ok 8\n";

$avhv = [];
eval { $a = %$avhv };
print "not " unless $@@ and $@@ =~ /^Can't coerce array into hash/;
print "ok 9\n";

$avhv = [{foo=>1, bar=>2}];
print "not " unless %$avhv =~ m,^\d+/\d+,;
print "ok 10\n";

# check if defelem magic works
sub f {
    print "not " unless $_[0] eq 'a';
    $_[0] = 'b';
    print "ok 11\n";
}
$a = [{key => 1}, 'a'];
f($a->{key});
print "not " unless $a->[1] eq 'b';
print "ok 12\n";

# check if exists() is behaving properly
$avhv = [{foo=>1,bar=>2,pants=>3}];
print "not " if exists $avhv->{bar};
print "ok 13\n";

$avhv->{pants} = undef;
print "not " unless exists $avhv->{pants};
print "ok 14\n";
print "not " if exists $avhv->{bar};
print "ok 15\n";

$avhv->{bar} = 10;
print "not " unless exists $avhv->{bar} and $avhv->{bar} == 10;
print "ok 16\n";

$v = delete $avhv->{bar};
print "not " unless $v == 10;
print "ok 17\n";

print "not " if exists $avhv->{bar};
print "ok 18\n";

$avhv->{foo} = 'xxx';
$avhv->{bar} = 'yyy';
$avhv->{pants} = 'zzz';
@@x = delete @@{$avhv}{'foo','pants'};
print "# @@x\nnot " unless "@@x" eq "xxx zzz";
print "ok 19\n";

print "not " unless "$avhv->{bar}" eq "yyy";
print "ok 20\n";

# hash assignment
%$avhv = ();
print "not " unless ref($avhv->[0]) eq 'HASH';
print "ok 21\n";

%hv = %$avhv;
print "not " if grep defined, values %hv;
print "ok 22\n";
print "not " if grep ref, keys %hv;
print "ok 23\n";

%$avhv = (foo => 29, pants => 2, bar => 0);
print "not " unless "@@$avhv[1..3]" eq '29 0 2';
print "ok 24\n";

my $extra;
my @@extra;
($extra, %$avhv) = ("moo", foo => 42, pants => 53, bar => "HIKE!");
print "not " unless "@@$avhv[1..3]" eq '42 HIKE! 53' and $extra eq 'moo';
print "ok 25\n";

%$avhv = ();
(%$avhv, $extra) = (foo => 42, pants => 53, bar => "HIKE!");
print "not " unless "@@$avhv[1..3]" eq '42 HIKE! 53' and !defined $extra;
print "ok 26\n";

@@extra = qw(whatever and stuff);
%$avhv = ();
(%$avhv, @@extra) = (foo => 42, pants => 53, bar => "HIKE!");
print "not " unless "@@$avhv[1..3]" eq '42 HIKE! 53' and @@extra == 0;
print "ok 27\n";

%$avhv = ();
(@@extra, %$avhv) = (foo => 42, pants => 53, bar => "HIKE!");
print "not " unless ref $avhv->[0] eq 'HASH' and @@extra == 6;
print "ok 28\n";

# Check hash slices (BUG ID 20010423.002)
$avhv = [{foo=>1, bar=>2}];
@@$avhv{"foo", "bar"} = (42, 53);
print "not " unless $avhv->{foo} == 42 && $avhv->{bar} == 53;
print "ok 29\n";
@


1.1.1.1
log
@Import OpenBSD 3.3 source repository from CTM 3132 the first time
This opens an OpenBSD-mirabile (aka MirBSD) repository.

### MirBSD is:
# Copyright (c) 1982-2003 by Thorsten "mirabile" Glaser <x86@@ePost.de>
# Copyright © 1968-2003  The authors of And contributors to UNIX®, the
#       C Language, BSD/Berkeley Unix; 386BSD, NetBSD 1.1 and OpenBSD.
#
# Anyone who obtained a copy of this work is hereby permitted to freely use,
# distribute, modify, merge, sublicence, give away or sell it as long as the
# authors are given due credit and the following notice is retained:
#
# This work is provided "as is", with no explicit or implicit warranty what-
# soever. Use it only at your own risk. In no event may an author or contri-
# butor be held liable for any damage, directly or indirectly, that origina-
# ted through or is caused by creation or modification of this work.

MirBSD is my private tree. MirBSD does not differ very much from OpenBSD
and intentionally tracks OpenBSD. That's why it _is_ OpenBSD, just not the
official one. It's like with DarrenBSD.

At time of this writing, no advertising for MirBSD must be done,
because the advertising clause has not yet been sorted out.

http://templeofhate.com/tglaser/MirBSD/index.php
@
text
@@


1.1.1.2
log
@large-scale import of OpenBSD 3.5-current source base including many fixes
note: from now, we will not be binary compatible with OpenBSD apps any
longer (due to syscall numbering differences); both an OpenBSD compat and
a conversion tool for old MirOS #7 apps will be delivered later.

The src/ tree is locked from now.
@
text
@a5 1
    require './test.pl';
a7 5
use warnings;
no warnings 'deprecated';
use strict;
use vars qw(@@fake %fake);

d11 1
a11 1
@@Tie::BasicArray::ISA = 'Tie::Array';
d20 1
a20 1
plan tests => 36;
d22 1
a22 1
my $sch = {
d36 2
a37 2
my @@keys = keys %$a;
my @@values = values %$a;
d39 1
a39 2
is ($#keys, 2);
is ($#values, 2);
d41 1
a41 1
my $i = 0;	# stop -w complaints
d43 1
a43 1
while (my ($key,$value) = each %$a) {
d50 1
a50 1
is ($i, 3);
d58 1
a58 1
is ($a->{'abc'}, 'ABC');
d66 1
a66 1
is ($a->{'abc'}, 'ABC');
d70 1
a70 1
tie %fake, 'Tie::StdHash';
d75 1
a75 1
is ($a->{'abc'}, 'ABC');
d78 3
a80 5
{
  no warnings 'uninitialized';
  my $slice = join('', 'x',@@$a{'abc','def'},'x');
  is ($slice, 'xABCx');
}
d84 2
a85 1
ok (!%$avhv);
d88 2
a89 1
ok (!%$avhv);
d93 2
a94 1
like ($@@, qr/^Can't coerce array into hash/);
d97 2
a98 1
like (%$avhv, qr,^\d+/\d+,);
d102 1
a102 1
    is ($_[0], 'a');
d104 1
d108 2
a109 1
is ($a->[1], 'b');
d113 2
a114 1
ok (!exists $avhv->{bar});
d117 4
a120 2
ok (exists $avhv->{pants});
ok (!exists $avhv->{bar});
d123 2
a124 2
ok (exists $avhv->{bar});
is ($avhv->{bar}, 10);
d126 3
a128 2
my $v = delete $avhv->{bar};
is ($v, 10);
d130 2
a131 1
ok (!exists $avhv->{bar});
d136 3
a138 2
my @@x = delete @@{$avhv}{'foo','pants'};
is ("@@x", "xxx zzz");
d140 2
a141 1
is ("$avhv->{bar}", "yyy");
d145 2
a146 1
is (ref($avhv->[0]), 'HASH');
d148 5
a152 3
my %hv = %$avhv;
ok (!grep defined, values %hv);
ok (!grep ref, keys %hv);
d155 2
a156 1
is ("@@$avhv[1..3]", '29 0 2');
d161 2
a162 2
is ("@@$avhv[1..3]", '42 HIKE! 53');
is ($extra, 'moo');
d166 2
a167 2
is ("@@$avhv[1..3]", '42 HIKE! 53');
ok (!defined $extra);
d172 2
a173 2
is ("@@$avhv[1..3]", '42 HIKE! 53');
is (@@extra, 0);
d177 2
a178 2
is (ref $avhv->[0], 'HASH');
is (@@extra, 6);
d183 2
a184 2
is ($avhv->{foo}, 42);
is ($avhv->{bar}, 53);
@

