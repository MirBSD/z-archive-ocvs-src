head	1.1;
branch	1.1.1;
access;
symbols
	tg-mergetmp-mirosx-1:1.1.1.3
	tg-mergefixes-1-branch:1.1.1.3.0.8
	tg-mergefixes-1-base:1.1.1.3
	MIROS_X:1.1.1.3.0.6
	MIROS_X_BASE:1.1.1.3
	tg-mergetmp-3:1.1.1.3
	MIRBSD_XP_MIRPPC:1.1.1.3.0.4
	cvs-200410231830:1.1.1.3
	MIRBSD_XP_SPARC_BASE:1.1.1.3
	MIRBSD_XP_SPARC:1.1.1.3.0.2
	cvs-200406091940:1.1.1.3
	MIRBSD_7quater:1.1.1.1
	cvs-200405160640:1.1.1.3
	cvs-200401271800:1.1.1.2
	cvs-200401261630:1.1.1.2
	cvs-200401021645:1.1.1.2
	MIRBSD_7_ALPHA:1.1.1.1.0.6
	MIRBSD_7:1.1.1.1.0.4
	cvs-200312222040:1.1.1.2
	cvs-200312031730:1.1.1.2
	MIRBSD_7ter:1.1.1.1
	MIRBSD_7_DEV:1.1.1.1.0.2
	cvs-200310020700:1.1.1.1
	cvs-200309271030:1.1.1.1
	cvs-200309251530:1.1.1.1
	cvs-200308302005:1.1.1.1
	cvs-200308171200:1.1.1.1
	ctm-3496:1.1.1.1
	ctm-3449:1.1.1.1
	ctm-3437:1.1.1.1
	cvs-200307191805:1.1.1.1
	ctm-3425:1.1.1.1
	cvs-200307091500:1.1.1.1
	ctm-3389:1.1.1.1
	cvs-200306291430:1.1.1.1
	ctm-3341:1.1.1.1
	MIRBSD_5:1.1.1.1
	cvs-200306082100:1.1.1.1
	ctm-3316:1.1.1.1
	ctm-3272:1.1.1.1
	ctm-3264:1.1.1.1
	cvs-200305071630:1.1.1.1
	MIRBSD_4:1.1.1.1
	ctm-3203:1.1.1.1
	cvs-20030410-1130:1.1.1.1
	ctm-3155:1.1.1.1
	ctm-3132:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@# @;


1.1
date	2003.03.22.17.43.54;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.03.22.17.43.54;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2003.12.03.17.57.38;	author tg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2004.05.16.08.04.35;	author tg;	state Stab;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@#!./perl

BEGIN {
    chdir 't' if -d 't';
    @@INC = '../lib';
    unless (find PerlIO::Layer 'perlio') {
	print "1..0 # Skip: not perlio\n";
	exit 0;
    }
}

no utf8; # needed for use utf8 not griping about the raw octets

$| = 1;
print "1..31\n";

open(F,"+>:utf8",'a');
print F chr(0x100).'£';
print '#'.tell(F)."\n";
print "not " unless tell(F) == 4;
print "ok 1\n";
print F "\n";
print '#'.tell(F)."\n";
print "not " unless tell(F) >= 5;
print "ok 2\n";
seek(F,0,0);
print "not " unless getc(F) eq chr(0x100);
print "ok 3\n";
print "not " unless getc(F) eq "£";
print "ok 4\n";
print "not " unless getc(F) eq "\n";
print "ok 5\n";
seek(F,0,0);
binmode(F,":bytes");
my $chr = chr(0xc4);
if (ord('A') == 193) { $chr = chr(0x8c); } # EBCDIC
print "not " unless getc(F) eq $chr;
print "ok 6\n";
$chr = chr(0x80);
if (ord('A') == 193) { $chr = chr(0x41); } # EBCDIC
print "not " unless getc(F) eq $chr;
print "ok 7\n";
$chr = chr(0xc2);
if (ord('A') == 193) { $chr = chr(0x80); } # EBCDIC
print "not " unless getc(F) eq $chr;
print "ok 8\n";
$chr = chr(0xa3);
if (ord('A') == 193) { $chr = chr(0x44); } # EBCDIC
print "not " unless getc(F) eq $chr;
print "ok 9\n";
print "not " unless getc(F) eq "\n";
print "ok 10\n";
seek(F,0,0);
binmode(F,":utf8");
print "not " unless scalar(<F>) eq "\x{100}£\n";
print "ok 11\n";
seek(F,0,0);
$buf = chr(0x200);
$count = read(F,$buf,2,1);
print "not " unless $count == 2;
print "ok 12\n";
print "not " unless $buf eq "\x{200}\x{100}£";
print "ok 13\n";
close(F);

{
    $a = chr(300); # This *is* UTF-encoded
    $b = chr(130); # This is not.

    open F, ">:utf8", 'a' or die $!;
    print F $a,"\n";
    close F;

    open F, "<:utf8", 'a' or die $!;
    $x = <F>;
    chomp($x);
    print "not " unless $x eq chr(300);
    print "ok 14\n";

    open F, "a" or die $!; # Not UTF
    binmode(F, ":bytes");
    $x = <F>;
    chomp($x);
    $chr = chr(196).chr(172);
    if (ord('A') == 193) { $chr = chr(141).chr(83); } # EBCDIC
    print "not " unless $x eq $chr;
    print "ok 15\n";
    close F;

    open F, ">:utf8", 'a' or die $!;
    binmode(F);  # we write a "\n" and then tell() - avoid CRLF issues.
    binmode(F,":utf8"); # turn UTF-8-ness back on
    print F $a;
    my $y;
    { my $x = tell(F);
      { use bytes; $y = length($a);}
      print "not " unless $x == $y;
      print "ok 16\n";
  }

    { # Check byte length of $b
	use bytes; my $y = length($b);
	print "not " unless $y == 1;
	print "ok 17\n";
    }

    print F $b,"\n"; # Don't upgrades $b

    { # Check byte length of $b
	use bytes; my $y = length($b);
	print "not ($y) " unless $y == 1;
	print "ok 18\n";
    }

    {
	my $x = tell(F);
	{ use bytes; if (ord('A')==193){$y += 2;}else{$y += 3;}} # EBCDIC ASCII
	print "not ($x,$y) " unless $x == $y;
	print "ok 19\n";
    }

    close F;

    open F, "a" or die $!; # Not UTF
    binmode(F, ":bytes");
    $x = <F>;
    chomp($x);
    $chr = v196.172.194.130;
    if (ord('A') == 193) { $chr = v141.83.130; } # EBCDIC
    printf "not (%vd) ", $x unless $x eq $chr;
    print "ok 20\n";

    open F, "<:utf8", "a" or die $!;
    $x = <F>;
    chomp($x);
    close F;
    printf "not (%vd) ", $x unless $x eq chr(300).chr(130);
    print "ok 21\n";

    open F, ">", "a" or die $!;
    if (${^OPEN} =~ /:utf8/) {
        binmode(F, ":bytes:");
    }

    # Now let's make it suffer.
    my $w;
    {
	use warnings 'utf8';
	local $SIG{__WARN__} = sub { $w = $_[0] };
	print F $a;
	print "not " if ($@@ || $w !~ /Wide character in print/i);
    }
    print "ok 22\n";
}

# Hm. Time to get more evil.
open F, ">:utf8", "a" or die $!;
print F $a;
binmode(F, ":bytes");
print F chr(130)."\n";
close F;

open F, "<", "a" or die $!;
binmode(F, ":bytes");
$x = <F>; chomp $x;
$chr = v196.172.130;
if (ord('A') == 193) { $chr = v141.83.130; } # EBCDIC
print "not " unless $x eq $chr;
print "ok 23\n";

# Right.
open F, ">:utf8", "a" or die $!;
print F $a;
close F;
open F, ">>", "a" or die $!;
print F chr(130)."\n";
close F;

open F, "<", "a" or die $!;
$x = <F>; chomp $x;
print "not " unless $x eq $chr;
print "ok 24\n";

# Now we have a deformed file.

if (ord('A') == 193) {
    print "ok 25 # Skip: EBCDIC\n"; # EBCDIC doesn't complain
} else {
    open F, "<:utf8", "a" or die $!;
    $x = <F>; chomp $x;
    local $SIG{__WARN__} = sub { print "ok 25\n" };
    eval { sprintf "%vd\n", $x };
}

close F;
unlink('a');

open F, ">:utf8", "a";
@@a = map { chr(1 << ($_ << 2)) } 0..5; # 0x1, 0x10, .., 0x100000
unshift @@a, chr(0); # ... and a null byte in front just for fun
print F @@a;
close F;

my $c;

# read() should work on characters, not bytes
open F, "<:utf8", "a";
$a = 0;
for (@@a) {
    unless (($c = read(F, $b, 1) == 1)  &&
            length($b)           == 1  &&
            ord($b)              == ord($_) &&
            tell(F)              == ($a += bytes::length($b))) {
        print '# ord($_)           == ', ord($_), "\n";
        print '# ord($b)           == ', ord($b), "\n";
        print '# length($b)        == ', length($b), "\n";
        print '# bytes::length($b) == ', bytes::length($b), "\n";
        print '# tell(F)           == ', tell(F), "\n";
        print '# $a                == ', $a, "\n";
        print '# $c                == ', $c, "\n";
        print "not ";
        last;
    }
}
close F;
print "ok 26\n";

{
    # Check that warnings are on on I/O, and that they can be muffled.

    local $SIG{__WARN__} = sub { $@@ = shift };

    undef $@@;
    open F, ">a";
    binmode(F, ":bytes");
    print F chr(0x100);
    close(F);

    print $@@ =~ /Wide character in print/ ? "ok 27\n" : "not ok 27\n";

    undef $@@;
    open F, ">:utf8", "a";
    print F chr(0x100);
    close(F);

    print defined $@@ ? "not ok 28\n" : "ok 28\n";

    undef $@@;
    open F, ">a";
    binmode(F, ":utf8");
    print F chr(0x100);
    close(F);

    print defined $@@ ? "not ok 29\n" : "ok 29\n";

    no warnings 'utf8';

    undef $@@;
    open F, ">a";
    print F chr(0x100);
    close(F);

    print defined $@@ ? "not ok 30\n" : "ok 30\n";

    use warnings 'utf8';

    undef $@@;
    open F, ">a";
    binmode(F, ":bytes");
    print F chr(0x100);
    close(F);

    print $@@ =~ /Wide character in print/ ? "ok 31\n" : "not ok 31\n";
}

# sysread() and syswrite() tested in lib/open.t since Fnctl is used

END {
    1 while unlink "a";
    1 while unlink "b";
}

@


1.1.1.1
log
@Import OpenBSD 3.3 source repository from CTM 3132 the first time
This opens an OpenBSD-mirabile (aka MirBSD) repository.

### MirBSD is:
# Copyright (c) 1982-2003 by Thorsten "mirabile" Glaser <x86@@ePost.de>
# Copyright © 1968-2003  The authors of And contributors to UNIX®, the
#       C Language, BSD/Berkeley Unix; 386BSD, NetBSD 1.1 and OpenBSD.
#
# Anyone who obtained a copy of this work is hereby permitted to freely use,
# distribute, modify, merge, sublicence, give away or sell it as long as the
# authors are given due credit and the following notice is retained:
#
# This work is provided "as is", with no explicit or implicit warranty what-
# soever. Use it only at your own risk. In no event may an author or contri-
# butor be held liable for any damage, directly or indirectly, that origina-
# ted through or is caused by creation or modification of this work.

MirBSD is my private tree. MirBSD does not differ very much from OpenBSD
and intentionally tracks OpenBSD. That's why it _is_ OpenBSD, just not the
official one. It's like with DarrenBSD.

At time of this writing, no advertising for MirBSD must be done,
because the advertising clause has not yet been sorted out.

http://templeofhate.com/tglaser/MirBSD/index.php
@
text
@@


1.1.1.2
log
@Import selected parts of the OpenBSD base system:
 * vnd change - you'll have to re-run MAKEDEV after booting a new kernel
 * misc. changes in /etc, mostly user related
 * Perl 5.8.2 (diff to MirPorts will be committed RSN)
 * some changes to binutils
 * Updates in bc and dc
@
text
@a13 4
require "./test.pl";

plan(tests => 53);

d15 1
d19 3
a21 1
ok( tell(F) == 4, tell(F) );
d23 3
a25 1
ok( tell(F) >= 5, tell(F) );
d27 6
a32 3
ok( getc(F) eq chr(0x100) );
ok( getc(F) eq "£" );
ok( getc(F) eq "\n" );
d37 2
a38 1
ok( getc(F) eq $chr );
d41 2
a42 1
ok( getc(F) eq $chr );
d45 2
a46 1
ok( getc(F) eq $chr );
d49 4
a52 2
ok( getc(F) eq $chr );
ok( getc(F) eq "\n" );
d55 2
a56 1
ok( scalar(<F>) eq "\x{100}£\n" );
d60 4
a63 2
ok( $count == 2 );
ok( $buf eq "\x{200}\x{100}£" );
d77 2
a78 1
    ok( $x eq chr(300) );
d86 2
a87 1
    ok( $x eq $chr );
d97 2
a98 1
      ok( $x == $y );
d103 2
a104 1
	ok( $y == 1 );
d111 2
a112 1
	ok( $y == 1 );
d118 2
a119 1
	ok( $x == $y );
d130 2
a131 1
    ok( $x eq $chr, sprintf('(%vd)', $x) );
d137 2
a138 1
    ok( $x eq chr(300).chr(130), sprintf('(%vd)', $x) );
d151 1
a151 1
        ok( !($@@ || $w !~ /Wide character in print/i) );
d153 1
d168 2
a169 1
ok( $x eq $chr );
d181 2
a182 1
ok( $x eq $chr );
d186 7
a192 9
SKIP: {
    if (ord('A') == 193) {
	skip( "EBCDIC doesn't complain" );
    } else {
	open F, "<:utf8", "a" or die $!;
	$x = <F>; chomp $x;
	local $SIG{__WARN__} = sub { ok( 1 ) };
	eval { sprintf "%vd\n", $x };
    }
d226 1
a226 1
ok( 1 );
d239 1
a239 1
    like( $@@, 'Wide character in print' );
d246 1
a246 1
    isnt( defined $@@ );
d254 1
a254 1
    isnt( defined $@@ );
d263 1
a263 1
    isnt( defined $@@ );
d273 1
a273 21
    like( $@@, 'Wide character in print' );
}

{
    open F, ">:bytes","a"; print F "\xde"; close F;

    open F, "<:bytes", "a";
    my $b = chr 0x100;
    $b .= <F>;
    ok( $b eq chr(0x100).chr(0xde), "21395 '.= <>' utf8 vs. bytes" );
    close F;
}

{
    open F, ">:utf8","a"; print F chr 0x100; close F;

    open F, "<:utf8", "a";
    my $b = "\xde";
    $b .= <F>;
    ok( $b eq chr(0xde).chr(0x100), "21395 '.= <>' bytes vs. utf8" );
    close F;
d276 1
a276 63
{
    my @@a = ( [ 0x007F, "bytes" ],
	      [ 0x0080, "bytes" ],
	      [ 0x0080, "utf8"  ],
	      [ 0x0100, "utf8"  ] );
    my $t = 34;
    for my $u (@@a) {
	for my $v (@@a) {
	    # print "# @@$u - @@$v\n";
	    open F, ">a";
	    binmode(F, ":" . $u->[1]);
	    print F chr($u->[0]);
	    close F;

	    open F, "<a";
	    binmode(F, ":" . $u->[1]);

	    my $s = chr($v->[0]);
	    utf8::upgrade($s) if $v->[1] eq "utf8";

	    $s .= <F>;
	    ok( $s eq chr($v->[0]) . chr($u->[0]), 'rcatline utf8' );
	    close F;
	    $t++;
	}
    }
    # last test here 49
}

{
    # [perl #23428] Somethings rotten in unicode semantics
    open F, ">a";
    binmode F, ":utf8";
    syswrite(F, $a = chr(0x100));
    close F;
    is( ord($a), 0x100, '23428 syswrite should not downgrade scalar' );
    like( $a, qr/^\w+/, '23428 syswrite should not downgrade scalar' );
}

# sysread() and syswrite() tested in lib/open.t since Fcntl is used

{
    # <FH> on a :utf8 stream should complain immediately with -w
    # if it finds bad UTF-8 (:encoding(utf8) works this way)
    use warnings 'utf8';
    undef $@@;
    local $SIG{__WARN__} = sub { $@@ = shift };
    open F, ">a";
    binmode F;
    print F "foo", chr(0xE4), "\n";
    print F "foo", chr(0xF6), "\n";
    close F;
    open F, "<:utf8", "a";
    undef $@@;
    my $line = <F>;
    like( $@@, qr/utf8 "\\xE4" does not map to Unicode .+ <F> line 1/,
	  "<:utf8 readline must warn about bad utf8");
    undef $@@;
    $line .= <F>;
    like( $@@, qr/utf8 "\\xF6" does not map to Unicode .+ <F> line 2/,
	  "<:utf8 rcatline must warn about bad utf8");
    close F;
}
d282 1
@


1.1.1.3
log
@large-scale import of OpenBSD 3.5-current source base including many fixes
note: from now, we will not be binary compatible with OpenBSD apps any
longer (due to syscall numbering differences); both an OpenBSD compat and
a conversion tool for old MirOS #7 apps will be delivered later.

The src/ tree is locked from now.
@
text
@d324 2
a325 5
    my ($chrE4, $chrF6) = (chr(0xE4), chr(0xF6));
    if (ord('A') == 193)	# EBCDIC
    { ($chrE4, $chrF6) = (chr(0x43), chr(0xEC)); }
    print F "foo", $chrE4, "\n";
    print F "foo", $chrF6, "\n";
d330 1
a330 3
    my ($chrE4, $chrF6) = ("E4", "F6");
    if (ord('A') == 193) { ($chrE4, $chrF6) = ("43", "EC"); } # EBCDIC
    like( $@@, qr/utf8 "\\x$chrE4" does not map to Unicode .+ <F> line 1/,
d334 1
a334 1
    like( $@@, qr/utf8 "\\x$chrF6" does not map to Unicode .+ <F> line 2/,
@


