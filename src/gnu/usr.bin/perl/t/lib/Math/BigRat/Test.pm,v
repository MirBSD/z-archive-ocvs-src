head	1.1;
branch	1.1.1;
access;
symbols
	tg-mergetmp-mirosx-1:1.1.1.2
	tg-mergefixes-1-branch:1.1.1.2.0.4
	tg-mergefixes-1-base:1.1.1.2
	MIROS_X:1.1.1.2.0.2
	MIROS_X_BASE:1.1.1.2
	tg-mergetmp-3:1.1.1.2
	MIRBSD_XP_MIRPPC:1.1.1.1.0.10
	cvs-200410231830:1.1.1.2
	MIRBSD_XP_SPARC_BASE:1.1.1.1
	MIRBSD_XP_SPARC:1.1.1.1.0.8
	cvs-200406091940:1.1.1.1
	MIRBSD_7quater:1.1.1.1
	cvs-200405160640:1.1.1.1
	cvs-200401271800:1.1.1.1
	cvs-200401261630:1.1.1.1
	cvs-200401021645:1.1.1.1
	MIRBSD_7_ALPHA:1.1.1.1.0.6
	MIRBSD_7:1.1.1.1.0.4
	cvs-200312222040:1.1.1.1
	cvs-200312031730:1.1.1.1
	MIRBSD_7ter:1.1.1.1
	MIRBSD_7_DEV:1.1.1.1.0.2
	cvs-200310020700:1.1.1.1
	cvs-200309271030:1.1.1.1
	cvs-200309251530:1.1.1.1
	cvs-200308302005:1.1.1.1
	cvs-200308171200:1.1.1.1
	ctm-3496:1.1.1.1
	ctm-3449:1.1.1.1
	ctm-3437:1.1.1.1
	cvs-200307191805:1.1.1.1
	ctm-3425:1.1.1.1
	cvs-200307091500:1.1.1.1
	ctm-3389:1.1.1.1
	cvs-200306291430:1.1.1.1
	ctm-3341:1.1.1.1
	MIRBSD_5:1.1.1.1
	cvs-200306082100:1.1.1.1
	ctm-3316:1.1.1.1
	ctm-3272:1.1.1.1
	ctm-3264:1.1.1.1
	cvs-200305071630:1.1.1.1
	MIRBSD_4:1.1.1.1
	ctm-3203:1.1.1.1
	cvs-20030410-1130:1.1.1.1
	ctm-3155:1.1.1.1
	ctm-3132:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@# @;


1.1
date	2003.03.22.17.43.54;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.03.22.17.43.54;	author tg;	state Stab;
branches;
next	1.1.1.2;

1.1.1.2
date	2004.10.23.18.43.08;	author tg;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@#!/usr/bin/perl -w

package Math::BigRat::Test;

require 5.005_02;
use strict;

use Exporter;
use Math::BigRat;
use Math::BigFloat;
use vars qw($VERSION @@ISA $PACKAGE
            $accuracy $precision $round_mode $div_scale);

@@ISA = qw(Exporter Math::BigRat);
$VERSION = 0.03;

use overload; 		# inherit overload from BigRat

# Globals
$accuracy = $precision = undef;
$round_mode = 'even';
$div_scale = 40;

my $class = 'Math::BigRat::Test';

#ub new
#{
#        my $proto  = shift;
#        my $class  = ref($proto) || $proto;
#
#        my $value       = shift;
#	my $a = $accuracy; $a = $_[0] if defined $_[0];
#	my $p = $precision; $p = $_[1] if defined $_[1];
#        # Store the floating point value
#        my $self = Math::BigFloat->new($value,$a,$p,$round_mode);
#        bless $self, $class;
#        $self->{'_custom'} = 1; # make sure this never goes away
#        return $self;
#}

sub bstr
  {
  # calculate a BigFloat compatible string output
  my ($x) = @@_;

  $x = $class->new($x) unless ref $x;

  if ($x->{sign} !~ /^[+-]$/)           # inf, NaN etc
    {
    my $s = $x->{sign}; $s =~ s/^\+//;  # +inf => inf
    return $s;
    }

  my $s = ''; $s = $x->{sign} if $x->{sign} ne '+';     # +3 vs 3

  return $s.$x->{_n} if $x->{_d}->is_one(); 
  my $output = Math::BigFloat->new($x->{_n})->bdiv($x->{_d});
  return $s.$output->bstr();
  }

sub bsstr
  {
  # calculate a BigFloat compatible string output
  my ($x) = @@_;

  $x = $class->new($x) unless ref $x;

  if ($x->{sign} !~ /^[+-]$/)           # inf, NaN etc
    {
    my $s = $x->{sign}; $s =~ s/^\+//;  # +inf => inf
    return $s;
    }

  my $s = ''; $s = $x->{sign} if $x->{sign} ne '+';     # +3 vs 3

  return $s.$x->{_n}->bsstr() if $x->{_d}->is_one(); 
  my $output = Math::BigFloat->new($x->{_n})->bdiv($x->{_d});
  return $s.$output->bsstr();
  }

1;
@


1.1.1.1
log
@Import OpenBSD 3.3 source repository from CTM 3132 the first time
This opens an OpenBSD-mirabile (aka MirBSD) repository.

### MirBSD is:
# Copyright (c) 1982-2003 by Thorsten "mirabile" Glaser <x86@@ePost.de>
# Copyright © 1968-2003  The authors of And contributors to UNIX®, the
#       C Language, BSD/Berkeley Unix; 386BSD, NetBSD 1.1 and OpenBSD.
#
# Anyone who obtained a copy of this work is hereby permitted to freely use,
# distribute, modify, merge, sublicence, give away or sell it as long as the
# authors are given due credit and the following notice is retained:
#
# This work is provided "as is", with no explicit or implicit warranty what-
# soever. Use it only at your own risk. In no event may an author or contri-
# butor be held liable for any damage, directly or indirectly, that origina-
# ted through or is caused by creation or modification of this work.

MirBSD is my private tree. MirBSD does not differ very much from OpenBSD
and intentionally tracks OpenBSD. That's why it _is_ OpenBSD, just not the
official one. It's like with DarrenBSD.

At time of this writing, no advertising for MirBSD must be done,
because the advertising clause has not yet been sorted out.

http://templeofhate.com/tglaser/MirBSD/index.php
@
text
@@


1.1.1.2
log
@5.8.5
@
text
@d1 2
d11 1
a11 1
use vars qw($VERSION @@ISA 
d14 2
a15 2
@@ISA = qw(Math::BigRat Exporter);
$VERSION = 0.04;
a40 36
BEGIN 
  {
  *fstr = \&bstr;
  *fsstr = \&bsstr;
  *objectify = \&Math::BigInt::objectify;
  *AUTOLOAD = \&Math::BigRat::AUTOLOAD;
  no strict 'refs';
  foreach my $method ( qw/ div acmp floor ceil root sqrt log fac modpow modinv/)
    {
    *{'b' . $method} = \&{'Math::BigRat::b' . $method};
    }
  }

sub fround
  {
  my ($x,$a) = @@_;

  #print "$a $accuracy $precision $round_mode\n";
  Math::BigFloat->round_mode($round_mode);
  Math::BigFloat->accuracy($a || $accuracy);
  Math::BigFloat->precision(undef);
  my $y = Math::BigFloat->new($x->bsstr(),undef,undef);
  $class->new($y->fround($a));
  }

sub ffround
  {
  my ($x,$p) = @@_;

  Math::BigFloat->round_mode($round_mode);
  Math::BigFloat->accuracy(undef);
  Math::BigFloat->precision($p || $precision);
  my $y = Math::BigFloat->new($x->bsstr(),undef,undef);
  $class->new($y->ffround($p));
  }

a55 1
#  print " bstr \$x ", $accuracy || $x->{_a} || 'notset', " ", $precision || $x->{_p} || 'notset', "\n";
d58 1
a58 8
  local $Math::BigFloat::accuracy = $accuracy || $x->{_a};
  local $Math::BigFloat::precision = $precision || $x->{_p};
  $s.$output->bstr();
  }

sub numify
  {
  $_[0]->bsstr();
d76 1
@

