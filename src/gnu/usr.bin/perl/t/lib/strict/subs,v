head	1.1;
branch	1.1.1;
access;
symbols
	tg-mergetmp-mirosx-1:1.1.1.3
	tg-mergefixes-1-branch:1.1.1.3.0.4
	tg-mergefixes-1-base:1.1.1.3
	MIROS_X:1.1.1.3.0.2
	MIROS_X_BASE:1.1.1.3
	tg-mergetmp-3:1.1.1.3
	MIRBSD_XP_MIRPPC:1.1.1.2.0.4
	cvs-200410231830:1.1.1.3
	MIRBSD_XP_SPARC_BASE:1.1.1.2
	MIRBSD_XP_SPARC:1.1.1.2.0.2
	cvs-200406091940:1.1.1.2
	MIRBSD_7quater:1.1.1.1
	cvs-200405160640:1.1.1.2
	cvs-200401271800:1.1.1.2
	cvs-200401261630:1.1.1.2
	cvs-200401021645:1.1.1.2
	MIRBSD_7_ALPHA:1.1.1.1.0.6
	MIRBSD_7:1.1.1.1.0.4
	cvs-200312222040:1.1.1.2
	cvs-200312031730:1.1.1.2
	MIRBSD_7ter:1.1.1.1
	MIRBSD_7_DEV:1.1.1.1.0.2
	cvs-200310020700:1.1.1.1
	cvs-200309271030:1.1.1.1
	cvs-200309251530:1.1.1.1
	cvs-200308302005:1.1.1.1
	cvs-200308171200:1.1.1.1
	ctm-3496:1.1.1.1
	ctm-3449:1.1.1.1
	ctm-3437:1.1.1.1
	cvs-200307191805:1.1.1.1
	ctm-3425:1.1.1.1
	cvs-200307091500:1.1.1.1
	ctm-3389:1.1.1.1
	cvs-200306291430:1.1.1.1
	ctm-3341:1.1.1.1
	MIRBSD_5:1.1.1.1
	cvs-200306082100:1.1.1.1
	ctm-3316:1.1.1.1
	ctm-3272:1.1.1.1
	ctm-3264:1.1.1.1
	cvs-200305071630:1.1.1.1
	MIRBSD_4:1.1.1.1
	ctm-3203:1.1.1.1
	cvs-20030410-1130:1.1.1.1
	ctm-3155:1.1.1.1
	ctm-3132:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@# @;


1.1
date	2003.03.22.17.43.57;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.03.22.17.43.57;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2003.12.03.17.57.42;	author tg;	state Stab;
branches;
next	1.1.1.3;

1.1.1.3
date	2004.10.23.18.43.13;	author tg;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@Check strict subs functionality

__END__

# no strict, should build & run ok.
Fred ;
my $fred ;
$b = "fred" ;
$a = $$b ;
EXPECT

########

use strict qw(refs vars);
Fred ;
EXPECT

########

use strict ;
no strict 'subs' ;
Fred ;
EXPECT

########

# strict subs - error
use strict 'subs' ;
my @@a = (1..2);
my $b = xyz;
EXPECT
Bareword "xyz" not allowed while "strict subs" in use at - line 5.
Execution of - aborted due to compilation errors.
########

# strict subs - error
use strict 'subs' ;
Fred ;
EXPECT
Bareword "Fred" not allowed while "strict subs" in use at - line 4.
Execution of - aborted due to compilation errors.
########

# strict subs - error
use strict 'subs' ;
my @@a = (A..Z);
EXPECT
Bareword "Z" not allowed while "strict subs" in use at - line 4.
Bareword "A" not allowed while "strict subs" in use at - line 4.
Execution of - aborted due to compilation errors.
########

# strict subs - error
use strict 'subs' ;
my $a = (B..Y);
EXPECT
Bareword "Y" not allowed while "strict subs" in use at - line 4.
Bareword "B" not allowed while "strict subs" in use at - line 4.
Execution of - aborted due to compilation errors.
########

# strict subs - error
use strict ;
Fred ;
EXPECT
Bareword "Fred" not allowed while "strict subs" in use at - line 4.
Execution of - aborted due to compilation errors.
########

# strict subs - no error
use strict 'subs' ;
sub Fred {}
Fred ;
EXPECT

########

# Check compile time scope of strict subs pragma
use strict 'subs' ;
{
    no strict ;
    my $a = Fred ;
}
my $a = Fred ;
EXPECT
Bareword "Fred" not allowed while "strict subs" in use at - line 8.
Execution of - aborted due to compilation errors.
########

# Check compile time scope of strict subs pragma
no strict;
{
    use strict 'subs' ;
    my $a = Fred ;
}
my $a = Fred ;
EXPECT
Bareword "Fred" not allowed while "strict subs" in use at - line 6.
Execution of - aborted due to compilation errors.
########

# Check compile time scope of strict vars pragma
use strict 'vars' ;
{
    no strict ;
    $joe = 1 ;
}
$joe = 1 ;
EXPECT
Variable "$joe" is not imported at - line 8.
Global symbol "$joe" requires explicit package name at - line 8.
Execution of - aborted due to compilation errors.
########

# Check compile time scope of strict vars pragma
no strict;
{
    use strict 'vars' ;
    $joe = 1 ;
}
$joe = 1 ;
EXPECT
Global symbol "$joe" requires explicit package name at - line 6.
Execution of - aborted due to compilation errors.
########

# Check runtime scope of strict refs pragma
use strict 'refs';
my $fred ;
my $b = "fred" ;
{
    no strict ;
    my $a = $$b ;
}
my $a = $$b ;
EXPECT
Can't use string ("fred") as a SCALAR ref while "strict refs" in use at - line 10.
########

# Check runtime scope of strict refs pragma
no strict ;
my $fred ;
my $b = "fred" ;
{
    use strict 'refs' ;
    my $a = $$b ;
}
my $a = $$b ;
EXPECT
Can't use string ("fred") as a SCALAR ref while "strict refs" in use at - line 8.
########

# Check runtime scope of strict refs pragma
no strict ;
my $fred ;
my $b = "fred" ;
{
    use strict 'refs' ;
    $a = sub { my $c = $$b ; }
}
&$a ;
EXPECT
Can't use string ("fred") as a SCALAR ref while "strict refs" in use at - line 8.
########

use strict 'subs' ;
my $a = Fred ;
EXPECT
Bareword "Fred" not allowed while "strict subs" in use at - line 3.
Execution of - aborted due to compilation errors.
########

--FILE-- abc
my $a = Fred ;
1;
--FILE-- 
use strict 'subs' ;
require "./abc";
EXPECT

########

--FILE-- abc
use strict 'subs' ;
1;
--FILE-- 
require "./abc";
my $a = Fred ;
EXPECT

########

--FILE-- abc
use strict 'subs' ;
my $a = Fred ;
1;
--FILE-- 
Fred ;
require "./abc";
EXPECT
Bareword "Fred" not allowed while "strict subs" in use at ./abc line 2.
Compilation failed in require at - line 2.
########

--FILE-- abc.pm
use strict 'subs' ;
my $a = Fred ;
1;
--FILE-- 
Fred ;
use abc;
EXPECT
Bareword "Fred" not allowed while "strict subs" in use at abc.pm line 2.
Compilation failed in require at - line 2.
BEGIN failed--compilation aborted at - line 2.
########

# Check scope of pragma with eval
no strict ;
eval {
    my $a = Fred ;
};
print STDERR $@@;
my $a = Fred ;
EXPECT

########

# Check scope of pragma with eval
no strict ;
eval {
    use strict 'subs' ;
    my $a = Fred ;
};
print STDERR $@@;
my $a = Fred ;
EXPECT
Bareword "Fred" not allowed while "strict subs" in use at - line 6.
Execution of - aborted due to compilation errors.
########

# Check scope of pragma with eval
use strict 'subs' ;
eval {
    my $a = Fred ;
};
print STDERR $@@;
my $a = Fred ;
EXPECT
Bareword "Fred" not allowed while "strict subs" in use at - line 5.
Bareword "Fred" not allowed while "strict subs" in use at - line 8.
Execution of - aborted due to compilation errors.
########

# Check scope of pragma with eval
use strict 'subs' ;
eval {
    no strict ;
    my $a = Fred ;
};
print STDERR $@@;
my $a = Fred ;
EXPECT
Bareword "Fred" not allowed while "strict subs" in use at - line 9.
Execution of - aborted due to compilation errors.
########

# Check scope of pragma with eval
no strict ;
eval '
    Fred ;
'; print STDERR $@@ ;
Fred ;
EXPECT

########

# Check scope of pragma with eval
no strict ;
eval q[ 
    use strict 'subs' ;
    Fred ;
]; print STDERR $@@;
EXPECT
Bareword "Fred" not allowed while "strict subs" in use at (eval 1) line 3.
########

# Check scope of pragma with eval
use strict 'subs' ;
eval '
    Fred ;
'; print STDERR $@@ ;
EXPECT
Bareword "Fred" not allowed while "strict subs" in use at (eval 1) line 2.
########

# Check scope of pragma with eval
use strict 'subs' ;
eval '
    no strict ;
    my $a = Fred ;
'; print STDERR $@@;
my $a = Fred ;
EXPECT
Bareword "Fred" not allowed while "strict subs" in use at - line 8.
Execution of - aborted due to compilation errors.
########

# see if Foo->Bar(...) etc work under strictures
use strict;
package Foo; sub Bar { print "@@_\n" }
Foo->Bar('a',1);
Bar Foo ('b',2);
Foo->Bar(qw/c 3/);
Bar Foo (qw/d 4/);
Foo::->Bar('A',1);
Bar Foo:: ('B',2);
Foo::->Bar(qw/C 3/);
Bar Foo:: (qw/D 4/);
EXPECT
Foo a 1
Foo b 2
Foo c 3
Foo d 4
Foo A 1
Foo B 2
Foo C 3
Foo D 4
########

# Check that barewords on the RHS of a regex match are caught
use strict;
"" =~ foo;
EXPECT
Bareword "foo" not allowed while "strict subs" in use at - line 4.
Execution of - aborted due to compilation errors.

########

# ID 20020703.002
use strict;
use warnings;
my $abc = XYZ ? 1 : 0;
print "$abc\n";
EXPECT
Bareword "XYZ" not allowed while "strict subs" in use at - line 5.
Execution of - aborted due to compilation errors.
@


1.1.1.1
log
@Import OpenBSD 3.3 source repository from CTM 3132 the first time
This opens an OpenBSD-mirabile (aka MirBSD) repository.

### MirBSD is:
# Copyright (c) 1982-2003 by Thorsten "mirabile" Glaser <x86@@ePost.de>
# Copyright © 1968-2003  The authors of And contributors to UNIX®, the
#       C Language, BSD/Berkeley Unix; 386BSD, NetBSD 1.1 and OpenBSD.
#
# Anyone who obtained a copy of this work is hereby permitted to freely use,
# distribute, modify, merge, sublicence, give away or sell it as long as the
# authors are given due credit and the following notice is retained:
#
# This work is provided "as is", with no explicit or implicit warranty what-
# soever. Use it only at your own risk. In no event may an author or contri-
# butor be held liable for any damage, directly or indirectly, that origina-
# ted through or is caused by creation or modification of this work.

MirBSD is my private tree. MirBSD does not differ very much from OpenBSD
and intentionally tracks OpenBSD. That's why it _is_ OpenBSD, just not the
official one. It's like with DarrenBSD.

At time of this writing, no advertising for MirBSD must be done,
because the advertising clause has not yet been sorted out.

http://templeofhate.com/tglaser/MirBSD/index.php
@
text
@@


1.1.1.2
log
@Import selected parts of the OpenBSD base system:
 * vnd change - you'll have to re-run MAKEDEV after booting a new kernel
 * misc. changes in /etc, mostly user related
 * Perl 5.8.2 (diff to MirPorts will be committed RSN)
 * some changes to binutils
 * Updates in bc and dc
@
text
@a347 16
########

# [perl #10021]
use strict;
use warnings;
print "" if BAREWORD;
EXPECT
Bareword "BAREWORD" not allowed while "strict subs" in use at - line 5.
Execution of - aborted due to compilation errors.
########
# Ticket: 18927
use strict 'subs';
print 1..1, bad;
EXPECT
Bareword "bad" not allowed while "strict subs" in use at - line 3.
Execution of - aborted due to compilation errors.
@


1.1.1.3
log
@5.8.5
@
text
@a363 27
########
# [perl #25147] 
use strict;
print "" if BAREWORD;
EXPECT
Bareword "BAREWORD" not allowed while "strict subs" in use at - line 3.
Execution of - aborted due to compilation errors.
########
# [perl #26910] hints not propagated into (?{...})
use strict 'subs';
qr/(?{my $x=foo})/;
EXPECT
Bareword "foo" not allowed while "strict subs" in use at (re_eval 1) line 1.
Compilation failed in regexp at - line 3.
########
#  [perl #27628] strict 'subs' didn't warn on bareword array index
use strict 'subs';
my $x=$a[FOO];
EXPECT
Bareword "FOO" not allowed while "strict subs" in use at - line 3.
Execution of - aborted due to compilation errors.
########
use strict 'subs';
my @@a;my $x=$a[FOO];
EXPECT
Bareword "FOO" not allowed while "strict subs" in use at - line 2.
Execution of - aborted due to compilation errors.
@


