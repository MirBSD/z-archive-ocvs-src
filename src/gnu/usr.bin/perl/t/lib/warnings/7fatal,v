head	1.1;
branch	1.1.1;
access;
symbols
	tg-mergetmp-mirosx-1:1.1.1.1
	tg-mergefixes-1-branch:1.1.1.1.0.14
	tg-mergefixes-1-base:1.1.1.1
	MIROS_X:1.1.1.1.0.12
	MIROS_X_BASE:1.1.1.1
	tg-mergetmp-3:1.1.1.1
	MIRBSD_XP_MIRPPC:1.1.1.1.0.10
	cvs-200410231830:1.1.1.1
	MIRBSD_XP_SPARC_BASE:1.1.1.1
	MIRBSD_XP_SPARC:1.1.1.1.0.8
	cvs-200406091940:1.1.1.1
	MIRBSD_7quater:1.1.1.1
	cvs-200405160640:1.1.1.1
	cvs-200401271800:1.1.1.1
	cvs-200401261630:1.1.1.1
	cvs-200401021645:1.1.1.1
	MIRBSD_7_ALPHA:1.1.1.1.0.6
	MIRBSD_7:1.1.1.1.0.4
	cvs-200312222040:1.1.1.1
	cvs-200312031730:1.1.1.1
	MIRBSD_7ter:1.1.1.1
	MIRBSD_7_DEV:1.1.1.1.0.2
	cvs-200310020700:1.1.1.1
	cvs-200309271030:1.1.1.1
	cvs-200309251530:1.1.1.1
	cvs-200308302005:1.1.1.1
	cvs-200308171200:1.1.1.1
	ctm-3496:1.1.1.1
	ctm-3449:1.1.1.1
	ctm-3437:1.1.1.1
	cvs-200307191805:1.1.1.1
	ctm-3425:1.1.1.1
	cvs-200307091500:1.1.1.1
	ctm-3389:1.1.1.1
	cvs-200306291430:1.1.1.1
	ctm-3341:1.1.1.1
	MIRBSD_5:1.1.1.1
	cvs-200306082100:1.1.1.1
	ctm-3316:1.1.1.1
	ctm-3272:1.1.1.1
	ctm-3264:1.1.1.1
	cvs-200305071630:1.1.1.1
	MIRBSD_4:1.1.1.1
	ctm-3203:1.1.1.1
	cvs-20030410-1130:1.1.1.1
	ctm-3155:1.1.1.1
	ctm-3132:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@# @;


1.1
date	2003.03.22.17.43.57;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.03.22.17.43.57;	author tg;	state Stab;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@Check FATAL functionality

__END__

# Check compile time warning
use warnings FATAL => 'syntax' ;
{
    no warnings ;
    $a =+ 1 ;
}
$a =+ 1 ;
print STDERR "The End.\n" ;
EXPECT
Reversed += operator at - line 8.
########

# Check compile time warning
use warnings FATAL => 'all' ;
{
    no warnings ;
    my $a =+ 1 ;
}
my $a =+ 1 ;
print STDERR "The End.\n" ;
EXPECT
Reversed += operator at - line 8.
########

# Check runtime scope of pragma
use warnings FATAL => 'uninitialized' ;
{
    no warnings ;
    my $b ; chop $b ;
}
my $b ; chop $b ;
print STDERR "The End.\n" ;
EXPECT
Use of uninitialized value in scalar chop at - line 8.
########

# Check runtime scope of pragma
use warnings FATAL => 'all' ;
{
    no warnings ;
    my $b ; chop $b ;
}
my $b ; chop $b ;
print STDERR "The End.\n" ;
EXPECT
Use of uninitialized value in scalar chop at - line 8.
########

# Check runtime scope of pragma
no warnings ;
{
    use warnings FATAL => 'uninitialized' ;
    $a = sub { my $b ; chop $b ; }
}
&$a ;
print STDERR "The End.\n" ;
EXPECT
Use of uninitialized value in scalar chop at - line 6.
########

# Check runtime scope of pragma
no warnings ;
{
    use warnings FATAL => 'all' ;
    $a = sub { my $b ; chop $b ; }
}
&$a ;
print STDERR "The End.\n" ;
EXPECT
Use of uninitialized value in scalar chop at - line 6.
########

--FILE-- abc
$a =+ 1 ;
1;
--FILE-- 
use warnings FATAL => 'syntax' ;
require "./abc";
EXPECT

########

--FILE-- abc
use warnings FATAL => 'syntax' ;
1;
--FILE-- 
require "./abc";
$a =+ 1 ;
EXPECT

########

--FILE-- abc
use warnings 'syntax' ;
$a =+ 1 ;
1;
--FILE-- 
use warnings FATAL => 'uninitialized' ;
require "./abc";
my $a ; chop $a ;
print STDERR "The End.\n" ;
EXPECT
Reversed += operator at ./abc line 2.
Use of uninitialized value in scalar chop at - line 3.
########

--FILE-- abc.pm
use warnings 'syntax' ;
$a =+ 1 ;
1;
--FILE-- 
use warnings FATAL => 'uninitialized' ;
use abc;
my $a ; chop $a ;
print STDERR "The End.\n" ;
EXPECT
Reversed += operator at abc.pm line 2.
Use of uninitialized value in scalar chop at - line 3.
########

# Check scope of pragma with eval
no warnings ;
eval {
    use warnings FATAL => 'uninitialized' ;
    my $b ; chop $b ;
}; print STDERR "-- $@@" ;
my $b ; chop $b ;
print STDERR "The End.\n" ;
EXPECT
-- Use of uninitialized value in scalar chop at - line 6.
The End.
########

# Check scope of pragma with eval
use warnings FATAL => 'uninitialized' ;
eval {
    my $b ; chop $b ;
}; print STDERR "-- $@@" ;
my $b ; chop $b ;
print STDERR "The End.\n" ;
EXPECT
-- Use of uninitialized value in scalar chop at - line 5.
Use of uninitialized value in scalar chop at - line 7.
########

# Check scope of pragma with eval
use warnings FATAL => 'uninitialized' ;
eval {
    no warnings ;
    my $b ; chop $b ;
}; print STDERR $@@ ;
my $b ; chop $b ;
print STDERR "The End.\n" ;
EXPECT
Use of uninitialized value in scalar chop at - line 8.
########

# Check scope of pragma with eval
no warnings ;
eval {
    use warnings FATAL => 'syntax' ;
    $a =+ 1 ;
}; print STDERR "-- $@@" ;
$a =+ 1 ;
print STDERR "The End.\n" ;
EXPECT
Reversed += operator at - line 6.
########

# Check scope of pragma with eval
use warnings FATAL => 'syntax' ;
eval {
    $a =+ 1 ;
}; print STDERR "-- $@@" ;
$a =+ 1 ;
print STDERR "The End.\n" ;
EXPECT
Reversed += operator at - line 5.
########

# Check scope of pragma with eval
use warnings FATAL => 'syntax' ;
eval {
    no warnings ;
    $a =+ 1 ;
}; print STDERR $@@ ;
$a =+ 1 ;
print STDERR "The End.\n" ;
EXPECT
Reversed += operator at - line 8.
########

# Check scope of pragma with eval
no warnings ;
eval {
    use warnings FATAL => 'syntax' ;
}; print STDERR $@@ ;
$a =+ 1 ;
print STDERR "The End.\n" ;
EXPECT
The End.
########

# Check scope of pragma with eval
no warnings ;
eval q[ 
    use warnings FATAL => 'uninitialized' ;
    my $b ; chop $b ;
]; print STDERR "-- $@@";
my $b ; chop $b ;
print STDERR "The End.\n" ;
EXPECT
-- Use of uninitialized value in scalar chop at (eval 1) line 3.
The End.
########

# Check scope of pragma with eval
use warnings FATAL => 'uninitialized' ;
eval '
    my $b ; chop $b ;
'; print STDERR "-- $@@" ;
my $b ; chop $b ;
print STDERR "The End.\n" ;
EXPECT
-- Use of uninitialized value in scalar chop at (eval 1) line 2.
Use of uninitialized value in scalar chop at - line 7.
########

# Check scope of pragma with eval
use warnings FATAL => 'uninitialized' ;
eval '
    no warnings ;
    my $b ; chop $b ;
'; print STDERR $@@ ;
my $b ; chop $b ;
print STDERR "The End.\n" ;
EXPECT
Use of uninitialized value in scalar chop at - line 8.
########

# Check scope of pragma with eval
no warnings ;
eval q[ 
    use warnings FATAL => 'syntax' ;
    $a =+ 1 ;
]; print STDERR "-- $@@";
$a =+ 1 ;
print STDERR "The End.\n" ;
EXPECT
-- Reversed += operator at (eval 1) line 3.
The End.
########

# Check scope of pragma with eval
use warnings FATAL => 'syntax' ;
eval '
    $a =+ 1 ;
'; print STDERR "-- $@@";
print STDERR "The End.\n" ;
EXPECT
-- Reversed += operator at (eval 1) line 2.
The End.
########

# Check scope of pragma with eval
use warnings FATAL => 'syntax' ;
eval '
    no warnings ;
    $a =+ 1 ;
'; print STDERR "-- $@@";
$a =+ 1 ;
print STDERR "The End.\n" ;
EXPECT
Reversed += operator at - line 8.
########

use warnings 'void' ;

time ;

{
    use warnings FATAL => qw(void) ;
    length "abc" ;
}

join "", 1,2,3 ;

print "done\n" ;
EXPECT
Useless use of time in void context at - line 4.
Useless use of length in void context at - line 8.
########

use warnings ;

time ;

{
    use warnings FATAL => qw(void) ;
    length "abc" ;
}

join "", 1,2,3 ;

print "done\n" ;
EXPECT
Useless use of time in void context at - line 4.
Useless use of length in void context at - line 8.
########

use warnings FATAL => 'all';
{
    no warnings;
    my $b ; chop $b;
    {
        use warnings ;
        my $b ; chop $b;
    }
}
my $b ; chop $b;
print STDERR "The End.\n" ;
EXPECT
Use of uninitialized value in scalar chop at - line 8.
Use of uninitialized value in scalar chop at - line 11.
########

use warnings FATAL => 'all';
{
    no warnings FATAL => 'all';
    my $b ; chop $b;
    {
        use warnings ;
        my $b ; chop $b;
    }
}
my $b ; chop $b;
print STDERR "The End.\n" ;
EXPECT
Use of uninitialized value in scalar chop at - line 8.
Use of uninitialized value in scalar chop at - line 11.
########

use warnings FATAL => 'all';
{
    no warnings 'syntax';
    {
        use warnings ;
        my $b ; chop $b;
    }
}
my $b ; chop $b;
print STDERR "The End.\n" ;
EXPECT
Use of uninitialized value in scalar chop at - line 7.
########

use warnings FATAL => 'syntax', NONFATAL => 'void' ;

length "abc";
print STDERR "The End.\n" ;
EXPECT
Useless use of length in void context at - line 4.
The End.
########

use warnings FATAL => 'all', NONFATAL => 'void' ;

length "abc";
print STDERR "The End.\n" ;
EXPECT
Useless use of length in void context at - line 4.
The End.
########

use warnings FATAL => 'all', NONFATAL => 'void' ;

my $a ; chomp $a;
length "abc";
print STDERR "The End.\n" ;
EXPECT
Useless use of length in void context at - line 5.
Use of uninitialized value in scalar chomp at - line 4.
########

use warnings FATAL => 'void', NONFATAL => 'void' ;

length "abc";
print STDERR "The End.\n" ;
EXPECT
Useless use of length in void context at - line 4.
The End.
########

use warnings NONFATAL => 'void', FATAL => 'void' ;

length "abc";
print STDERR "The End.\n" ;
EXPECT
Useless use of length in void context at - line 4.
########

use warnings FATAL => 'all', NONFATAL => 'io';
no warnings 'once';

open(F, "<true\ncd");
close "fred" ;
print STDERR "The End.\n" ;
EXPECT
Unsuccessful open on filename containing newline at - line 5.
close() on unopened filehandle fred at - line 6.
The End.
########

use warnings FATAL => 'all', NONFATAL => 'io', FATAL => 'unopened' ;
no warnings 'once';

open(F, "<true\ncd");
close "fred" ;
print STDERR "The End.\n" ;
EXPECT
Unsuccessful open on filename containing newline at - line 5.
close() on unopened filehandle fred at - line 6.
@


1.1.1.1
log
@Import OpenBSD 3.3 source repository from CTM 3132 the first time
This opens an OpenBSD-mirabile (aka MirBSD) repository.

### MirBSD is:
# Copyright (c) 1982-2003 by Thorsten "mirabile" Glaser <x86@@ePost.de>
# Copyright © 1968-2003  The authors of And contributors to UNIX®, the
#       C Language, BSD/Berkeley Unix; 386BSD, NetBSD 1.1 and OpenBSD.
#
# Anyone who obtained a copy of this work is hereby permitted to freely use,
# distribute, modify, merge, sublicence, give away or sell it as long as the
# authors are given due credit and the following notice is retained:
#
# This work is provided "as is", with no explicit or implicit warranty what-
# soever. Use it only at your own risk. In no event may an author or contri-
# butor be held liable for any damage, directly or indirectly, that origina-
# ted through or is caused by creation or modification of this work.

MirBSD is my private tree. MirBSD does not differ very much from OpenBSD
and intentionally tracks OpenBSD. That's why it _is_ OpenBSD, just not the
official one. It's like with DarrenBSD.

At time of this writing, no advertising for MirBSD must be done,
because the advertising clause has not yet been sorted out.

http://templeofhate.com/tglaser/MirBSD/index.php
@
text
@@
