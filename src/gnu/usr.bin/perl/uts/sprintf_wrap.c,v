head	1.1;
branch	1.1.1;
access;
symbols
	tg-mergetmp-mirosx-1:1.1.1.1
	tg-mergefixes-1-branch:1.1.1.1.0.14
	tg-mergefixes-1-base:1.1.1.1
	MIROS_X:1.1.1.1.0.12
	MIROS_X_BASE:1.1.1.1
	tg-mergetmp-3:1.1.1.1
	MIRBSD_XP_MIRPPC:1.1.1.1.0.10
	cvs-200410231830:1.1.1.1
	MIRBSD_XP_SPARC_BASE:1.1.1.1
	MIRBSD_XP_SPARC:1.1.1.1.0.8
	cvs-200406091940:1.1.1.1
	MIRBSD_7quater:1.1.1.1
	cvs-200405160640:1.1.1.1
	cvs-200401271800:1.1.1.1
	cvs-200401261630:1.1.1.1
	cvs-200401021645:1.1.1.1
	MIRBSD_7_ALPHA:1.1.1.1.0.6
	MIRBSD_7:1.1.1.1.0.4
	cvs-200312222040:1.1.1.1
	cvs-200312031730:1.1.1.1
	MIRBSD_7ter:1.1.1.1
	MIRBSD_7_DEV:1.1.1.1.0.2
	cvs-200310020700:1.1.1.1
	cvs-200309271030:1.1.1.1
	cvs-200309251530:1.1.1.1
	cvs-200308302005:1.1.1.1
	cvs-200308171200:1.1.1.1
	ctm-3496:1.1.1.1
	ctm-3449:1.1.1.1
	ctm-3437:1.1.1.1
	cvs-200307191805:1.1.1.1
	ctm-3425:1.1.1.1
	cvs-200307091500:1.1.1.1
	ctm-3389:1.1.1.1
	cvs-200306291430:1.1.1.1
	ctm-3341:1.1.1.1
	MIRBSD_5:1.1.1.1
	cvs-200306082100:1.1.1.1
	ctm-3316:1.1.1.1
	ctm-3272:1.1.1.1
	ctm-3264:1.1.1.1
	cvs-200305071630:1.1.1.1
	MIRBSD_4:1.1.1.1
	ctm-3203:1.1.1.1
	cvs-20030410-1130:1.1.1.1
	ctm-3155:1.1.1.1
	ctm-3132:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.1
date	2003.03.22.17.44.01;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.03.22.17.44.01;	author tg;	state Stab;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@#include	<stdlib.h>
#include	<stdio.h>
#include	<assert.h>
#include	<string.h>

char	*UTS_sprintf_wrap();
char	*do_efmt();
char	*do_gfmt();
char	*Fill();

/* main(argc, argv)
 * char	**argv;
 * {
 * 	double	d;
 * 	char	*Fmt, *Ret;
 * 	char	obuf[200];
 * 
 * 	assert(argc > 2);
 * 	Fmt = argv[1];
 * 	d = strtod(argv[2], (char **)0);
 * 
 * 	putchar('{');
 * 	printf(Fmt, d);
 * 	printf("}\n");
 * 
 * 	Ret = UTS_sprintf_wrap(obuf, Fmt, d);
 * 	assert(Ret == obuf);
 * 
 * 	printf("{%s}\n", obuf);
 * }
 */

char *
UTS_sprintf_wrap(obuf, fmt, d,
	a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15)
char	*obuf, *fmt;
double	d;
{
	int	fmtlen, Width=0, Precision=6, Alt=0, Plus=0, Minus=0,
		Zero = 0;
	int	FmtChar, BaseFmt = 0;
	char	*f = fmt, *AfterWidth = 0, *AfterPrecision = 0;
	char	*Dot;

	if(*f++ != '%') {
		return
sprintf(obuf, fmt, d, a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15);
	}
	fmtlen = strlen(fmt);
	FmtChar = fmt[fmtlen - 1];
	switch(FmtChar) {
	case 'f':
	case 'F':
		return
sprintf(obuf, fmt, d, a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15);
	case 'e':
	case 'E':
		BaseFmt = 'e';
		goto BaseFmt_IsSet;
	case 'g':
	case 'G':
		BaseFmt = 'g';
BaseFmt_IsSet:
		if(*f == '#') { Alt = 1; ++f; }   /* Always has '.' */
		if(*f == '+') { Plus = 1; ++f; }  /* Force explicit sign */
		if(*f == '-') { Minus = 1; ++f; } /* Left justify */
		if(*f == '0') { Zero = 1; ++f;} /* Fill using 0s*/
		if(Dot = strchr(f, '.')) {
			Precision = strtol(Dot+1, &AfterPrecision, 0);
		}
		if(!Dot || (Dot && Dot > f)) { /* Next char=='.' => no width*/
			Width = strtol(f, &AfterWidth, 0);
		}
		if(Dot) { f = AfterPrecision; }
		else if(AfterWidth) { f = AfterWidth; }
		if(*f != FmtChar) goto regular_sprintf;
		 /* It doesn't look like a f.p. sprintf call */
		 /* from Perl_sv_vcatpvfn		     */

		if(BaseFmt == 'e') {
			return do_efmt(d, obuf, Width, Precision, Alt,
				Plus, Minus, Zero, FmtChar == 'E');
		} else {
			return do_gfmt(d, obuf, Width, Precision, Alt,
				Plus, Minus, Zero, FmtChar == 'G');
		}
	default:
regular_sprintf:
		return
sprintf(obuf, fmt, d, a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15);
	}
}

char	*
do_efmt(d, obuf, Width, Precision, Alt, Plus, Minus, Zero, UpperCase)
char	*obuf;
double	d;
{
	char	*Ecvt;
	char	*ob;
	int	decpt, sign, E;
	int	len;
	int	AllZeroes = 0;

	Ecvt = ecvt( d , Precision+1, &decpt, &sign);

	/* fprintf(stderr, "decpt=%d, sign=%d\n", decpt, sign); */

	len = strlen(Ecvt);
	if(strspn(Ecvt, "0") == len) AllZeroes = 1;

	ob = obuf;
	if(sign)	*ob++ = '-';
	else if(Plus)	*ob++ = '+';

	*ob++ = Ecvt[0];

	if(Precision > 0 || Alt) *ob++ = '.';
	strcpy(ob, &Ecvt[1]);

	ob += strlen(ob);	/* ADVANCE TO END OF WHAT WE JUST ADDED */
	*ob++ = UpperCase ? 'E' : 'e';

	if(AllZeroes)	E = 0;
	else		E = decpt - 1;

	if(E < 0)	{ *ob++ = '-'; E = -E; }
	else		{ *ob++ = '+'; }

	sprintf(ob, "%.2d", E);	/* Too much horsepower used here */

	if(Width > strlen(obuf)) return Fill(obuf, Width, Minus, Zero);
	else			 return obuf;
}

char	*
do_gfmt(d, obuf, Width, Precision, Alt, Plus, Minus, Zero, UpperCase)
char	*obuf;
double	d;
{
	char	*Ecvt = gcvt(d, Precision ? Precision : 1, obuf);
	int	len = strlen(obuf);

	 /* gcvt fails (maybe give a warning? For now return empty string): */
	if(!Ecvt) { *obuf = '\0'; return obuf; }

	/* printf("Ecvt='%s'\n", Ecvt); */
	if(Plus && (Ecvt[0] != '-')) {
		memmove(obuf+1, obuf, len+1); /* "+1" to get '\0' at end */
		obuf[0] = '+';
		++len;
	}
	if(Alt && !strchr(Ecvt, '.')) {
		int	LenUpTo_E = strcspn(obuf, "eE");
		int	E_etc_len = strlen(&obuf[LenUpTo_E]);
			/* ABOVE: Will be 0 if there's no E/e because */
			/* strcspn will return length of whole string */

		if(E_etc_len)
			memmove(obuf+LenUpTo_E+1, obuf+LenUpTo_E, E_etc_len);
		obuf[LenUpTo_E] = '.';
		obuf[LenUpTo_E + 1 + E_etc_len ] = '\0';
	}
	{ char *E_loc;
	  if(UpperCase && (E_loc = strchr(obuf, 'e'))) { *E_loc = 'E'; }
	}
	if(Width > len)
		return Fill(obuf, Width, Minus, Zero);
	else
		return obuf;
}

char *
Fill(obuf, Width, LeftJustify, Zero)
char	*obuf;
{
	int	W = strlen(obuf);
	int	diff = Width - W;
	 /* LeftJustify means there was a '-' flag, and in that case,	*/
	 /* printf man page (UTS4.4) says ignore '0'			*/
	char	FillChar = (Zero && !LeftJustify) ? '0' : ' ';
	int	i;
	int	LeftFill = ! LeftJustify;

	if(Width <= W) return obuf;

	if(LeftFill) {
		memmove(obuf+diff, obuf, W+1); /* "+1" to get '\0' at end */
		for(i=0 ; i < diff ; ++i) { obuf[i] = FillChar; }
	} else {
		for(i=W ; i < Width ; ++i)
			obuf[i] = FillChar;
		obuf[Width] = '\0';
	}
	return obuf;
}
@


1.1.1.1
log
@Import OpenBSD 3.3 source repository from CTM 3132 the first time
This opens an OpenBSD-mirabile (aka MirBSD) repository.

### MirBSD is:
# Copyright (c) 1982-2003 by Thorsten "mirabile" Glaser <x86@@ePost.de>
# Copyright © 1968-2003  The authors of And contributors to UNIX®, the
#       C Language, BSD/Berkeley Unix; 386BSD, NetBSD 1.1 and OpenBSD.
#
# Anyone who obtained a copy of this work is hereby permitted to freely use,
# distribute, modify, merge, sublicence, give away or sell it as long as the
# authors are given due credit and the following notice is retained:
#
# This work is provided "as is", with no explicit or implicit warranty what-
# soever. Use it only at your own risk. In no event may an author or contri-
# butor be held liable for any damage, directly or indirectly, that origina-
# ted through or is caused by creation or modification of this work.

MirBSD is my private tree. MirBSD does not differ very much from OpenBSD
and intentionally tracks OpenBSD. That's why it _is_ OpenBSD, just not the
official one. It's like with DarrenBSD.

At time of this writing, no advertising for MirBSD must be done,
because the advertising clause has not yet been sorted out.

http://templeofhate.com/tglaser/MirBSD/index.php
@
text
@@
