head	1.4;
access;
symbols
	cvs-1_12_11:1.1.2.1
	tg-mergetmp-mirosx-1:1.4
	tg-mergefixes-1-branch:1.4.0.4
	tg-mergefixes-1-base:1.4
	MIROS_X:1.4.0.2
	MIROS_X_BASE:1.4
	cvs-1_12_10:1.1.2.1
	FSF:1.1.2
	MIRBSD_XP_MIRPPC:1.3.0.4
	MIRBSD_XP_SPARC_BASE:1.3
	MIRBSD_XP_SPARC:1.3.0.2
	cvs-200406091940:1.1.1.1
	MIRBSD_7quater:1.1.1.1
	cvs-200405160640:1.1.1.1
	cvs-200404170130:1.1.1.1
	cvs-1_11_12:1.1.3.2
	cvs-1_11_1p1:1.1.3.1
	tg:1.1.3
	cvs-200401271800:1.1.1.1
	cvs-200401261630:1.1.1.1
	cvs-200401021645:1.1.1.1
	MIRBSD_7_ALPHA:1.1.1.1.0.6
	MIRBSD_7:1.1.1.1.0.4
	cvs-200312222040:1.1.1.1
	MIRBSD_7ter:1.1.1.1
	MIRBSD_7_DEV:1.1.1.1.0.2
	cvs-200310020700:1.1.1.1
	cvs-200309271030:1.1.1.1
	cvs-200309251530:1.1.1.1
	cvs-200308302005:1.1.1.1
	cvs-200308171200:1.1.1.1
	ctm-3496:1.1.1.1
	ctm-3449:1.1.1.1
	ctm-3437:1.1.1.1
	cvs-200307191805:1.1.1.1
	ctm-3425:1.1.1.1
	cvs-200307091500:1.1.1.1
	ctm-3389:1.1.1.1
	cvs-200306291430:1.1.1.1
	ctm-3341:1.1.1.1
	MIRBSD_5:1.1.1.1
	cvs-200306082100:1.1.1.1
	ctm-3316:1.1.1.1
	ctm-3272:1.1.1.1
	ctm-3264:1.1.1.1
	cvs-200305071630:1.1.1.1
	MIRBSD_4:1.1.1.1
	ctm-3203:1.1.1.1
	cvs-20030410-1130:1.1.1.1
	ctm-3155:1.1.1.1
	ctm-3132:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@# @;


1.4
date	2004.12.02.12.39.45;	author tg;	state Exp;
branches;
next	1.3;

1.3
date	2004.02.22.13.49.11;	author tg;	state Stab;
branches;
next	1.2;

1.2
date	2004.02.12.21.15.51;	author tg;	state Exp;
branches;
next	1.1;

1.1
date	2003.03.22.17.41.23;	author tg;	state Exp;
branches
	1.1.1.1
	1.1.2.1
	1.1.3.1;
next	;

1.1.1.1
date	2003.03.22.17.41.23;	author tg;	state Exp;
branches;
next	;

1.1.2.1
date	2004.12.02.11.58.16;	author tg;	state Exp;
branches;
next	;

1.1.3.1
date	2004.02.12.19.17.14;	author tg;	state Exp;
branches;
next	1.1.3.2;

1.1.3.2
date	2004.02.12.19.37.35;	author tg;	state Exp;
branches;
next	;


desc
@@


1.4
log
@update to cvs 1.12.10-MirOS except automatically
generated files
XXX this installs as /usr/bin/ncvs yet, so no
XXX conflicts during the test phase.
XXX I suggest to _not_ update.

XXX *** IMPORTANT *** DO NOT ACCESS CVS 1.11 REPOSITORIES
XXX *** IMPORTANT *** WITH CVS 1.12 OR VICE VERSA!
@
text
@#! /bin/sh
#
#	cvs2vendor - move revsisions from files in A to files in B
# 
# The primary reason for this script is to move deltas from a
# non-vendor branched repository onto a fresh vendor branched one,
# skipping the initial checkin in assumption that it is the same in
# both repositories.  This way you can take a project that was moved
# into CVS without the benefit of the vendor branch and for all
# intents and purposes add the vendor branch underneath the existing
# deltas.
# 
# This script is also a decent example of repository maintenance using
# raw RCS commands (if I do say so myself! ;-).
# 
# Tags are preserved.
# 
# The timestamp of the initial vendor branch revision will be adjusted
# to be the same as the 1.1 revision of each source file.
# 
# Extra branches in the source directory will cause breakage.
# 
# Intermediate files are created in the current working directory
# where this script is started.
# 
# Written by Greg A. Woods <woods@@planix.com>, based on rcs2sccs
# (retains some of the rlog parsing from it).
# 
# The copyright is in the Public Domain.
#

if [ $# -ne 2 ]; then
	echo USAGE: $0 srcdir dstdir
	exit 2
fi
tsrcdir=$1
tdstdir=$2

revfile=/tmp/cvs2vendor_$$_rev
rm -f $revfile

commentfile=/tmp/cvs2vendor_$$_comment
rm -f $commentfile

if sort -k 1,1 /dev/null 2>/dev/null
then sort_each_field='-k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 -k 8 -k 9'
else sort_each_field='+0 +1 +2 +3 +4 +5 +6 +7 +8'
fi

srcdirs=`cd $tsrcdir && find . -type d -print | sed 's~^\.[/]*~~'`

# the "" is a trick to get $tsrcdir itself without resorting to '.'
for ldir in "" $srcdirs; do

	srcdir=$tsrcdir/$ldir
	dstdir=$tdstdir/$ldir

	# Loop over every RCS file in srcdir
	#
	for vfile in $srcdir/*,v; do
		# get rid of the ",v" at the end of the name
		file=`echo $vfile | sed -e 's/,v$//'`
		bfile=`basename $file`

		if [ ! -d $dstdir ]; then
			echo "making locally added directory $dstdir"
			mkdir -p $dstdir
		fi
		if [ ! -f $dstdir/$bfile,v ]; then
			echo "copying locally added file $dstdir/$bfile ..."
			cp $vfile $dstdir
			continue;
		fi

		# work on each rev of that file in ascending order
		rlog $file | grep "^revision [0-9][0-9]*\." | awk '{print $2}' | sed -e 's/\./ /g' | sort -n -u $sort_each_field | sed -e 's/ /./g' > $revfile

		for rev in `cat $revfile`; do

			case "$rev" in
			1.1)
				newdate=`rlog -r$rev $file | grep "^date: " | awk '{printf("%s.%s\n",$2,$3); exit}' | sed -e 's~/~.~g' -e 's/:/./g' -e 's/;//' -e 's/^19//'`
				olddate=`rlog -r1.1.1.1 $dstdir/$bfile | grep "^date: " | awk '{printf("%s.%s\n",$2,$3); exit}' | sed -e 's~/~.~g' -e 's/:/./g' -e 's/;//' -e 's/^19//'`
				sed "s/$olddate/$newdate/" < $dstdir/$bfile,v > $dstdir/$bfile.x
				mv -f $dstdir/$bfile.x $dstdir/$bfile,v
				chmod -w $dstdir/$bfile,v
				symname=`rlog -h $file | sed -e '1,/^symbolic names:/d' -e 's/[ 	]*//g' | awk -F: '$2 == "'"$rev"'" {printf("-n%s:1.1.1.1\n",$1)}'`
				if [ -n "$symname" ]; then
					echo "tagging $file with $symname ..."
					rcs $symname $dstdir/$bfile,v
					if [ $? != 0 ]; then
						echo ERROR - rcs $symname $dstdir/$bfile,v
						exit 1
					fi
				fi
				continue			# skip first rev....
				;;
			esac

			# get a lock on the destination local branch tip revision
			co -r1 -l $dstdir/$bfile
			if [ $? != 0 ]; then
				echo ERROR - co -r1 -l $dstdir/$bfile
				exit 1
			fi
			rm -f $dstdir/$bfile

			# get file into current dir and get stats
			date=`rlog -r$rev $file | grep "^date: " | awk '{printf("%s %s\n",$2,$3); exit}' | sed -e 's/;//'`
			author=`rlog -r$rev $file | grep "^date: " | awk '{print $5; exit}' | sed -e 's/;//'`

			symname=`rlog -h $file | sed -e '1,/^symbolic names:/d' -e 's/[ 	]*//g' | awk -F: '$2 == "'"$rev"'" {printf("-n%s\n",$1)}'`

			rlog -r$rev $file | sed -e '/^branches: /d' -e '1,/^date: /d' -e '/^===========/d' | awk '{if ((total += length($0) + 1) < 510) print $0}' > $commentfile

			echo "==> file $file, rev=$rev, date=$date, author=$author $symname"

			co -p -r$rev $file > $bfile
			if [ $? != 0 ]; then
				echo ERROR - co -p -r$rev $file
				exit 1
			fi

			# check file into vendor repository...
			ci -f -m"`cat $commentfile`" -d"$date" $symname -w"$author" $bfile $dstdir/$bfile,v
			if [ $? != 0 ]; then
				echo ERROR - ci -f -m"`cat $commentfile`" -d"$date" $symname -w"$author" $bfile $dstdir/$bfile,v
				exit 1
			fi
			rm -f $bfile

			# set the default branch to the trunk...
			# XXX really only need to do this once....
			rcs -b1 $dstdir/$bfile
			if [ $? != 0 ]; then
				echo ERROR - rcs -b1 $dstdir/$bfile
				exit 1
			fi
		done
	done
done

echo cleaning up...
rm -f $commentfile
echo "       Conversion Completed Successfully"

exit 0
@


1.3
log
@cvs-1.11.12 doesn't do the joints correctly (what were the
FSF people smoking?), it memory faults.
thusly revert to 1.11.1p1

tested.
agreed bsiegert@@
@
text
@d45 5
d76 1
a76 1
		rlog $file | grep "^revision [0-9][0-9]*\." | awk '{print $2}' | sed -e 's/\./ /g' | sort -n -u +0 +1 +2 +3 +4 +5 +6 +7 +8 | sed -e 's/ /./g' > $revfile
@


1.2
log
@first step of merging new cvs
XXX might not compile
XXX might not work
XXX might contain bugs
XXX definitively needs autoconf 2.58 first
@
text
@a44 5
if sort -k 1,1 /dev/null 2>/dev/null
then sort_each_field='-k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 -k 8 -k 9'
else sort_each_field='+0 +1 +2 +3 +4 +5 +6 +7 +8'
fi

d71 1
a71 1
		rlog $file | grep "^revision [0-9][0-9]*\." | awk '{print $2}' | sed -e 's/\./ /g' | sort -n -u $sort_each_field | sed -e 's/ /./g' > $revfile
@


1.1
log
@Initial revision
@
text
@d45 5
d76 1
a76 1
		rlog $file | grep "^revision [0-9][0-9]*\." | awk '{print $2}' | sed -e 's/\./ /g' | sort -n -u +0 +1 +2 +3 +4 +5 +6 +7 +8 | sed -e 's/ /./g' > $revfile
@


1.1.2.1
log
@vendor-branch-ify new cvs 1.12
@
text
@a44 5
if sort -k 1,1 /dev/null 2>/dev/null
then sort_each_field='-k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 -k 8 -k 9'
else sort_each_field='+0 +1 +2 +3 +4 +5 +6 +7 +8'
fi

d71 1
a71 1
		rlog $file | grep "^revision [0-9][0-9]*\." | awk '{print $2}' | sed -e 's/\./ /g' | sort -n -u $sort_each_field | sed -e 's/ /./g' > $revfile
@


1.1.3.1
log
@our CVS is currently at 1.11.1p1, thus import that version into vendor branch
@
text
@@


1.1.3.2
log
@CVS 1.11.12 is the latest stable version of CVS,
released 06.02.2004, with a huge lot of bug fixes.

/me hopes this will pay off...
@
text
@a44 5
if sort -k 1,1 /dev/null 2>/dev/null
then sort_each_field='-k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 -k 8 -k 9'
else sort_each_field='+0 +1 +2 +3 +4 +5 +6 +7 +8'
fi

d71 1
a71 1
		rlog $file | grep "^revision [0-9][0-9]*\." | awk '{print $2}' | sed -e 's/\./ /g' | sort -n -u $sort_each_field | sed -e 's/ /./g' > $revfile
@


1.1.1.1
log
@Import OpenBSD 3.3 source repository from CTM 3132 the first time
This opens an OpenBSD-mirabile (aka MirBSD) repository.

### MirBSD is:
# Copyright (c) 1982-2003 by Thorsten "mirabile" Glaser <x86@@ePost.de>
# Copyright © 1968-2003  The authors of And contributors to UNIX®, the
#       C Language, BSD/Berkeley Unix; 386BSD, NetBSD 1.1 and OpenBSD.
#
# Anyone who obtained a copy of this work is hereby permitted to freely use,
# distribute, modify, merge, sublicence, give away or sell it as long as the
# authors are given due credit and the following notice is retained:
#
# This work is provided "as is", with no explicit or implicit warranty what-
# soever. Use it only at your own risk. In no event may an author or contri-
# butor be held liable for any damage, directly or indirectly, that origina-
# ted through or is caused by creation or modification of this work.

MirBSD is my private tree. MirBSD does not differ very much from OpenBSD
and intentionally tracks OpenBSD. That's why it _is_ OpenBSD, just not the
official one. It's like with DarrenBSD.

At time of this writing, no advertising for MirBSD must be done,
because the advertising clause has not yet been sorted out.

http://templeofhate.com/tglaser/MirBSD/index.php
@
text
@@
