head	1.4;
access;
symbols
	cvs-1_12_11:1.1.2.1
	tg-mergetmp-mirosx-1:1.4
	tg-mergefixes-1-branch:1.4.0.4
	tg-mergefixes-1-base:1.4
	MIROS_X:1.4.0.2
	MIROS_X_BASE:1.4
	cvs-1_12_10:1.1.2.1
	FSF:1.1.2
	MIRBSD_XP_MIRPPC:1.3.0.4
	MIRBSD_XP_SPARC_BASE:1.3
	MIRBSD_XP_SPARC:1.3.0.2
	cvs-200406091940:1.1.1.1
	MIRBSD_7quater:1.1.1.1
	cvs-200405160640:1.1.1.1
	cvs-200404170130:1.1.1.1
	cvs-1_11_12:1.1.3.2
	cvs-1_11_1p1:1.1.3.1
	tg:1.1.3
	cvs-200401271800:1.1.1.1
	cvs-200401261630:1.1.1.1
	cvs-200401021645:1.1.1.1
	MIRBSD_7_ALPHA:1.1.1.1.0.6
	MIRBSD_7:1.1.1.1.0.4
	cvs-200312222040:1.1.1.1
	MIRBSD_7ter:1.1.1.1
	MIRBSD_7_DEV:1.1.1.1.0.2
	cvs-200310020700:1.1.1.1
	cvs-200309271030:1.1.1.1
	cvs-200309251530:1.1.1.1
	cvs-200308302005:1.1.1.1
	cvs-200308171200:1.1.1.1
	ctm-3496:1.1.1.1
	ctm-3449:1.1.1.1
	ctm-3437:1.1.1.1
	cvs-200307191805:1.1.1.1
	ctm-3425:1.1.1.1
	cvs-200307091500:1.1.1.1
	ctm-3389:1.1.1.1
	cvs-200306291430:1.1.1.1
	ctm-3341:1.1.1.1
	MIRBSD_5:1.1.1.1
	cvs-200306082100:1.1.1.1
	ctm-3316:1.1.1.1
	ctm-3272:1.1.1.1
	ctm-3264:1.1.1.1
	cvs-200305071630:1.1.1.1
	MIRBSD_4:1.1.1.1
	ctm-3203:1.1.1.1
	cvs-20030410-1130:1.1.1.1
	ctm-3155:1.1.1.1
	ctm-3132:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@# @;


1.4
date	2004.12.02.12.39.45;	author tg;	state Exp;
branches;
next	1.3;

1.3
date	2004.02.22.13.49.11;	author tg;	state Stab;
branches;
next	1.2;

1.2
date	2004.02.12.21.15.51;	author tg;	state Exp;
branches;
next	1.1;

1.1
date	2003.03.22.17.41.23;	author tg;	state Exp;
branches
	1.1.1.1
	1.1.2.1
	1.1.3.1;
next	;

1.1.1.1
date	2003.03.22.17.41.23;	author tg;	state Exp;
branches;
next	;

1.1.2.1
date	2004.12.02.11.58.16;	author tg;	state Exp;
branches;
next	;

1.1.3.1
date	2004.02.12.19.17.16;	author tg;	state Exp;
branches;
next	1.1.3.2;

1.1.3.2
date	2004.02.12.19.37.38;	author tg;	state Exp;
branches;
next	;


desc
@@


1.4
log
@update to cvs 1.12.10-MirOS except automatically
generated files
XXX this installs as /usr/bin/ncvs yet, so no
XXX conflicts during the test phase.
XXX I suggest to _not_ update.

XXX *** IMPORTANT *** DO NOT ACCESS CVS 1.11 REPOSITORIES
XXX *** IMPORTANT *** WITH CVS 1.12 OR VICE VERSA!
@
text
@#!/bin/sh

#
# This program is intended to take a check.log file generated by a failed run of
# sanity.sh as input and run expr line by line on it.  It seems a much easier
# way of spotting a single failed line in a 100 line test result.
#

#
# This script falls under the GNU General Public License and is intended to
# be distributed with CVS.
#

#
# No warranties, express or implied.
#

#
# Contributed by Derek R. Price <derek.price@@openavenue.com>
#



usage ()
{
	echo "\
usage: $0 [-afh] [file...]

       -a          process alternate pattern
       -f          process first pattern (default)
       -h          print this text

     file          files to process (default = check.log)"
}

# Do a line by line match with expr
#
# INPUTS
#    $1 = text file name
#    $2 = pattern file name
expr_line_by_line ()
{
	dcl_line=0
	dcl_wrong=
	# We are assuming a newline at the end of the file.  The way sanity.sh
	# uses echo to create the log message guarantees this newline and since
	# expr ignores the last newline when the anchor is present anyhow, no
	# information is being lost in the transition
	while test $dcl_line -lt `wc -l <$1` -a $dcl_line -lt `wc -l <$2`; do
		dcl_line=`expr $dcl_line + 1`
		if test `sed -ne${dcl_line}p <$1 |wc -c` -eq 1 \
				-a `sed -ne${dcl_line}p <$2 |wc -c` -eq 1; then
			# This is a workaround for what I am calling a bug in GNU
			# expr - it won't match the empty string to the empty
			# string.  In this case the assumption is that a single
			# character is always a newline.  Since we already checked
			# for the end of the file, we know sed will echo the
			# newline.
			: 
		elif expr "`sed -ne${dcl_line}p <$1`" : \
				"`sed -ne${dcl_line}p <$2`\$" >/dev/null; then
			:
		else
			echo "$dcl_line: `sed -ne${dcl_line}p <$1`"
			echo "$dcl_line: `sed -ne${dcl_line}p <$2`\$"
			dcl_wrong="$dcl_wrong $dcl_line"
		fi
	done
	if test `wc -l <$1` -ne `wc -l <$2`; then
		echo "output & pattern contain differing number of lines"
	elif test -z "$dcl_wrong"; then
		echo "no mismatched lines"
	else
		echo "mismatched lines: $dcl_wrong"
	fi
}

# Process a single check.log file
#
# INPUTS
#    $1 = filename
process_check_log ()
{
	# abort if we can't find any expressions
	if grep '^\*\* got: $' <$1 >/dev/null; then
		:
	else
		echo "WARNING:  No expressions in file: $1" >&2
		echo "          Either not a check.log or sanity.sh exited for some other reason," >&2
		echo "          like bad exit status.  Try tail." >&2
		return
	fi

	dcl_exprfiles=""
	if grep '^\*\* or: $' <$1 >/dev/null; then
		# file contains a second regex
		if test $dcl_dofirst -eq 1; then
			# get the first pattern
			sed -ne '/^\*\* expected: $/,/^\*\* or: $/p' <$1 >/tmp/dcle$$
			dcl_exprfiles="$dcl_exprfiles /tmp/dcle$$"
		fi
		if test $dcl_doalternate -eq 1; then
			# get the alternate pattern
			sed -ne '/^\*\* or: $/,/^\*\* got: $/p' <$1 >/tmp/dclo$$
			dcl_exprfiles="$dcl_exprfiles /tmp/dclo$$"
		else
			echo "WARNING:  Ignoring alternate pattern in file: $1" >&2
		fi
	else
		# file doesn't contain a second regex
		if test $dcl_dofirst = 1; then
			# get the only pattern
			sed -ne '/^\*\* expected: $/,/^\*\* got: $/p' <$1 >/tmp/dcle$$
			dcl_exprfiles="$dcl_exprfiles /tmp/dcle$$"
		fi
		if test $dcl_doalternate -eq 1; then
			echo "WARNING:  No alternate pattern in file:  $1" >&2
		fi
	fi

	# and get the actual output
	sed -ne '/^\*\* got: $/,$p' <$1 >/tmp/dclg$$
	sed -ne '1D
$D
p' </tmp/dclg$$ >/tmp/dclh$$
	mv /tmp/dclh$$ /tmp/dclg$$

	# compare the output against each pattern requested
	for dcl_f in $dcl_exprfiles; do
		sed -ne '1D
$D
p' <$dcl_f >/tmp/dclp$$
		mv /tmp/dclp$$ $dcl_f

		case $dcl_f in
			/tmp/dcle*)
				echo "********** $1 : Primary **********"
				;;
			/tmp/dclo*)
				echo "********** $1 : Alternate **********"
				;;
		esac

		expr_line_by_line /tmp/dclg$$ $dcl_f

		rm $dcl_f
	done

	rm /tmp/dclg$$
}

###
### MAIN
###

# set up defaults
dcl_doalternate=0
dcl_dofirst=0

# process options
while getopts afh arg; do
	case $arg in
		a)
			dcl_doalternate=1
			;;
		f)
			dcl_dofirst=1
			;;
		\?|h)
			usage
			exit 1
			;;
	esac
done

# dispose of processed args
shift `expr $OPTIND - 1`
OPTIND=1

# set the default mode
if test $dcl_doalternate -eq 0; then
	dcl_dofirst=1
fi

# set default arg
if test $# -eq 0; then
	if test -f src/check.log && test -r src/check.log; then
		set src/check.log
	else
		set check.log
	fi
fi

for file in "$@@"; do
	process_check_log $file;
done

exit 0
@


1.3
log
@cvs-1.11.12 doesn't do the joints correctly (what were the
FSF people smoking?), it memory faults.
thusly revert to 1.11.1p1

tested.
agreed bsiegert@@
@
text
@d187 5
a191 4
	dcl_argvar=dcl_default
	dcl_default=check.log
else
	dcl_argvar=@@
d194 2
a195 2
eval for file in \"\$$dcl_argvar\"\; do \
	process_check_log \$file\; \
@


1.2
log
@first step of merging new cvs
XXX might not compile
XXX might not work
XXX might contain bugs
XXX definitively needs autoconf 2.58 first
@
text
@d187 4
a190 5
	if test -f src/check.log && test -r src/check.log; then
		set src/check.log
	else
		set check.log
	fi
d193 2
a194 2
for file in "$@@"; do
	process_check_log $file;
@


1.1
log
@Initial revision
@
text
@d187 5
a191 4
	dcl_argvar=dcl_default
	dcl_default=check.log
else
	dcl_argvar=@@
d194 2
a195 2
eval for file in \"\$$dcl_argvar\"\; do \
	process_check_log \$file\; \
@


1.1.2.1
log
@vendor-branch-ify new cvs 1.12
@
text
@d187 4
a190 5
	if test -f src/check.log && test -r src/check.log; then
		set src/check.log
	else
		set check.log
	fi
d193 2
a194 2
for file in "$@@"; do
	process_check_log $file;
@


1.1.3.1
log
@our CVS is currently at 1.11.1p1, thus import that version into vendor branch
@
text
@@


1.1.3.2
log
@CVS 1.11.12 is the latest stable version of CVS,
released 06.02.2004, with a huge lot of bug fixes.

/me hopes this will pay off...
@
text
@d187 4
a190 5
	if test -f src/check.log && test -r src/check.log; then
		set src/check.log
	else
		set check.log
	fi
d193 2
a194 2
for file in "$@@"; do
	process_check_log $file;
@


1.1.1.1
log
@Import OpenBSD 3.3 source repository from CTM 3132 the first time
This opens an OpenBSD-mirabile (aka MirBSD) repository.

### MirBSD is:
# Copyright (c) 1982-2003 by Thorsten "mirabile" Glaser <x86@@ePost.de>
# Copyright © 1968-2003  The authors of And contributors to UNIX®, the
#       C Language, BSD/Berkeley Unix; 386BSD, NetBSD 1.1 and OpenBSD.
#
# Anyone who obtained a copy of this work is hereby permitted to freely use,
# distribute, modify, merge, sublicence, give away or sell it as long as the
# authors are given due credit and the following notice is retained:
#
# This work is provided "as is", with no explicit or implicit warranty what-
# soever. Use it only at your own risk. In no event may an author or contri-
# butor be held liable for any damage, directly or indirectly, that origina-
# ted through or is caused by creation or modification of this work.

MirBSD is my private tree. MirBSD does not differ very much from OpenBSD
and intentionally tracks OpenBSD. That's why it _is_ OpenBSD, just not the
official one. It's like with DarrenBSD.

At time of this writing, no advertising for MirBSD must be done,
because the advertising clause has not yet been sorted out.

http://templeofhate.com/tglaser/MirBSD/index.php
@
text
@@
