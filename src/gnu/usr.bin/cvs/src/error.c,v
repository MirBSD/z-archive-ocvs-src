head	1.2;
access;
symbols
	cvs-1_12_11:1.1.2.1
	tg-mergetmp-mirosx-1:1.2
	tg-mergefixes-1-branch:1.2.0.4
	tg-mergefixes-1-base:1.2
	MIROS_X:1.2.0.2
	MIROS_X_BASE:1.2
	cvs-1_12_10:1.1.2.1
	FSF:1.1.2
	MIRBSD_XP_MIRPPC:1.1.1.1.0.10
	MIRBSD_XP_SPARC_BASE:1.1.1.1
	MIRBSD_XP_SPARC:1.1.1.1.0.8
	cvs-200406091940:1.1.1.1
	MIRBSD_7quater:1.1.1.1
	cvs-200405160640:1.1.1.1
	cvs-200404170130:1.1.1.1
	cvs-1_11_12:1.1.3.1
	cvs-1_11_1p1:1.1.3.1
	tg:1.1.3
	cvs-200401271800:1.1.1.1
	cvs-200401261630:1.1.1.1
	cvs-200401021645:1.1.1.1
	MIRBSD_7_ALPHA:1.1.1.1.0.6
	MIRBSD_7:1.1.1.1.0.4
	cvs-200312222040:1.1.1.1
	MIRBSD_7ter:1.1.1.1
	MIRBSD_7_DEV:1.1.1.1.0.2
	cvs-200310020700:1.1.1.1
	cvs-200309271030:1.1.1.1
	cvs-200309251530:1.1.1.1
	cvs-200308302005:1.1.1.1
	cvs-200308171200:1.1.1.1
	ctm-3496:1.1.1.1
	ctm-3449:1.1.1.1
	ctm-3437:1.1.1.1
	cvs-200307191805:1.1.1.1
	ctm-3425:1.1.1.1
	cvs-200307091500:1.1.1.1
	ctm-3389:1.1.1.1
	cvs-200306291430:1.1.1.1
	ctm-3341:1.1.1.1
	MIRBSD_5:1.1.1.1
	cvs-200306082100:1.1.1.1
	ctm-3316:1.1.1.1
	ctm-3272:1.1.1.1
	ctm-3264:1.1.1.1
	cvs-200305071630:1.1.1.1
	MIRBSD_4:1.1.1.1
	ctm-3203:1.1.1.1
	cvs-20030410-1130:1.1.1.1
	ctm-3155:1.1.1.1
	ctm-3132:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.2
date	2004.12.02.12.40.13;	author tg;	state Exp;
branches;
next	1.1;

1.1
date	2003.03.22.17.41.28;	author tg;	state Exp;
branches
	1.1.1.1
	1.1.2.1
	1.1.3.1;
next	;

1.1.1.1
date	2003.03.22.17.41.28;	author tg;	state Stab;
branches;
next	;

1.1.2.1
date	2004.12.02.11.58.53;	author tg;	state Exp;
branches;
next	;

1.1.3.1
date	2004.02.12.19.18.40;	author tg;	state Exp;
branches;
next	;


desc
@@


1.2
log
@update to cvs 1.12.10-MirOS except automatically
generated files
XXX this installs as /usr/bin/ncvs yet, so no
XXX conflicts during the test phase.
XXX I suggest to _not_ update.

XXX *** IMPORTANT *** DO NOT ACCESS CVS 1.11 REPOSITORIES
XXX *** IMPORTANT *** WITH CVS 1.12 OR VICE VERSA!
@
text
@/* error.c -- error handler for noninteractive utilities
   Copyright (C) 1990-1992 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.  */

/* David MacKenzie */
/* Brian Berliner added support for CVS */

#include "cvs.h"

/* If non-zero, error will use the CVS protocol to stdout to report error
   messages.  This will only be set in the CVS server parent process;
   most other code is run via do_cvs_command, which forks off a child
   process and packages up its stderr in the protocol.  */
int error_use_protocol; 

#ifndef strerror
extern char *strerror (int);
#endif



/* Print the program name and error message MESSAGE, which is a printf-style
   format string with optional args.  This is a very limited printf subset:
   %s, %d, %c, %x and %% only (without anything between the % and the s,
   d, &c).  Callers who want something fancier can use sprintf.

   If ERRNUM is nonzero, print its corresponding system error message.
   Exit with status EXIT_FAILURE if STATUS is nonzero.  If MESSAGE is "",
   no need to print a message.

   I think this is largely cleaned up to the point where it does the right
   thing for the server, whether the normal server_active (child process)
   case or the error_use_protocol (parent process) case.  The one exception
   is that STATUS nonzero for error_use_protocol probably doesn't work yet;
   in that case still need to use the pending_error machinery in server.c.

   error() does not molest errno; some code (e.g. Entries_Open) depends
   on being able to say something like:
      error (0, 0, "foo");
      error (0, errno, "bar");

   */

/* VARARGS */
void
error (int status, int errnum, const char *message, ...)
{
    int save_errno = errno;

    if (message[0] != '\0')
    {
	va_list args;
	const char *p;
	char *q;
	char *str;
	int num;
	long lnum;
	unsigned int unum;
	unsigned long ulnum;
	int ch;
	char buf[100];

	cvs_outerr (program_name, 0);
	if (cvs_cmd_name && *cvs_cmd_name)
	{
	    cvs_outerr (" ", 1);
	    if (status != 0)
		cvs_outerr ("[", 1);
	    cvs_outerr (cvs_cmd_name, 0);
	    if (status != 0)
		cvs_outerr (" aborted]", 0);
	}
	cvs_outerr (": ", 2);

	va_start( args, message );
	p = message;
	while ((q = strchr (p, '%')) != NULL)
	{
	    static const char msg[] =
		"\ninternal error: bad % in error()\n";
	    if (q - p > 0)
		cvs_outerr (p, q - p);

	    switch (q[1])
	    {
	    case 's':
		str = va_arg (args, char *);
		cvs_outerr (str, strlen (str));
		break;
	    case 'd':
		num = va_arg (args, int);
		sprintf (buf, "%d", num);
		cvs_outerr (buf, strlen (buf));
		break;
	    case 'l':
		if (q[2] == 'd')
		{
		    lnum = va_arg (args, long);
		    sprintf (buf, "%ld", lnum);
		}
		else if (q[2] == 'u')
		{
		    ulnum = va_arg (args, unsigned long);
		    sprintf (buf, "%lu", ulnum);
		}
		else goto bad;
		cvs_outerr (buf, strlen (buf));
		q++;
		break;
	    case 'x':
		unum = va_arg (args, unsigned int);
		sprintf (buf, "%x", unum);
		cvs_outerr (buf, strlen (buf));
		break;
	    case 'c':
		ch = va_arg (args, int);
		buf[0] = ch;
		cvs_outerr (buf, 1);
		break;
	    case '%':
		cvs_outerr ("%", 1);
		break;
	    default:
	    bad:
		cvs_outerr (msg, sizeof (msg) - 1);
		/* Don't just keep going, because q + 1 might point to the
		   terminating '\0'.  */
		goto out;
	    }
	    p = q + 2;
	}
	cvs_outerr (p, strlen (p));
    out:
	va_end (args);

	if (errnum != 0)
	{
	    cvs_outerr (": ", 2);
	    cvs_outerr (strerror (errnum), 0);
	}
	cvs_outerr ("\n", 1);
    }

    if (status)
	exit (EXIT_FAILURE);
    errno = save_errno;
}

/* Print the program name and error message MESSAGE, which is a printf-style
   format string with optional args to the file specified by FP.
   If ERRNUM is nonzero, print its corresponding system error message.
   Exit with status EXIT_FAILURE if STATUS is nonzero.  */
/* VARARGS */
void
fperrmsg (FILE *fp, int status, int errnum, char *message, ...)
{
    va_list args;

    fprintf (fp, "%s: ", program_name);
    va_start( args, message );
    vfprintf (fp, message, args);
    va_end (args);
    if (errnum)
	fprintf (fp, ": %s", strerror (errnum));
    putc ('\n', fp);
    fflush (fp);
    if (status)
	exit (EXIT_FAILURE);
}
@


1.1
log
@Initial revision
@
text
@a18 2
#include <stdio.h>

a24 33
#ifdef HAVE_VPRINTF

#ifdef __STDC__
#include <stdarg.h>
#define VA_START(args, lastarg) va_start(args, lastarg)
#else /* ! __STDC__ */
#include <varargs.h>
#define VA_START(args, lastarg) va_start(args)
#endif /* __STDC__ */

#else /* ! HAVE_VPRINTF */ 

#ifdef HAVE_DOPRNT
#define va_alist args
#define va_dcl int args;
#else /* ! HAVE_DOPRNT */
#define va_alist a1, a2, a3, a4, a5, a6, a7, a8
#define va_dcl char *a1, *a2, *a3, *a4, *a5, *a6, *a7, *a8;
#endif /* HAVE_DOPRNT */

#endif /* HAVE_VPRINTF */ 

#if STDC_HEADERS
#include <stdlib.h>
#include <string.h>
#else /* ! STDC_HEADERS */
#ifdef __STDC__
void exit(int status);
#else /* ! __STDC__ */
void exit ();
#endif /* __STDC__ */
#endif /* STDC_HEADERS */

d26 1
a26 1
extern char *strerror ();
d29 1
a29 16
void
error_exit PROTO ((void))
{
    rcs_cleanup ();
    Lock_Cleanup ();
#ifdef SERVER_SUPPORT
    if (server_active)
	server_cleanup (0);
#endif
#ifdef SYSTEM_CLEANUP
    /* Hook for OS-specific behavior, for example socket subsystems on
       NT and OS2 or dealing with windows and arguments on Mac.  */
    SYSTEM_CLEANUP ();
#endif
    exit (EXIT_FAILURE);
}
a54 1
#if defined (__STDC__)
a55 7
#else
error (status, errnum, message, va_alist)
    int status;
    int errnum;
    const char *message;
    va_dcl
#endif
d73 1
a73 1
	if (command_name && *command_name)
d78 1
a78 1
	    cvs_outerr (command_name, 0);
d84 1
a84 1
	VA_START (args, message);
d154 1
a154 1
	error_exit ();
a163 1
#if defined (HAVE_VPRINTF) && defined (__STDC__)
a164 8
#else
fperrmsg (fp, status, errnum, message, va_alist)
    FILE *fp;
    int status;
    int errnum;
    char *message;
    va_dcl
#endif
a165 1
#ifdef HAVE_VPRINTF
a166 1
#endif
d169 1
a169 2
#ifdef HAVE_VPRINTF
    VA_START (args, message);
a171 7
#else
#ifdef HAVE_DOPRNT
    _doprnt (message, &args, fp);
#else
    fprintf (fp, message, a1, a2, a3, a4, a5, a6, a7, a8);
#endif
#endif
d177 1
a177 1
	error_exit ();
@


1.1.2.1
log
@vendor-branch-ify new cvs 1.12
@
text
@d19 2
d27 33
d61 1
a61 1
extern char *strerror (int);
d64 16
a79 1

d105 1
d107 7
d131 1
a131 1
	if (cvs_cmd_name && *cvs_cmd_name)
d136 1
a136 1
	    cvs_outerr (cvs_cmd_name, 0);
d142 1
a142 1
	va_start( args, message );
d212 1
a212 1
	exit (EXIT_FAILURE);
d222 1
d224 8
d233 1
d235 1
d238 2
a239 1
    va_start( args, message );
d242 7
d254 1
a254 1
	exit (EXIT_FAILURE);
@


1.1.3.1
log
@our CVS is currently at 1.11.1p1, thus import that version into vendor branch
@
text
@@


1.1.1.1
log
@Import OpenBSD 3.3 source repository from CTM 3132 the first time
This opens an OpenBSD-mirabile (aka MirBSD) repository.

### MirBSD is:
# Copyright (c) 1982-2003 by Thorsten "mirabile" Glaser <x86@@ePost.de>
# Copyright © 1968-2003  The authors of And contributors to UNIX®, the
#       C Language, BSD/Berkeley Unix; 386BSD, NetBSD 1.1 and OpenBSD.
#
# Anyone who obtained a copy of this work is hereby permitted to freely use,
# distribute, modify, merge, sublicence, give away or sell it as long as the
# authors are given due credit and the following notice is retained:
#
# This work is provided "as is", with no explicit or implicit warranty what-
# soever. Use it only at your own risk. In no event may an author or contri-
# butor be held liable for any damage, directly or indirectly, that origina-
# ted through or is caused by creation or modification of this work.

MirBSD is my private tree. MirBSD does not differ very much from OpenBSD
and intentionally tracks OpenBSD. That's why it _is_ OpenBSD, just not the
official one. It's like with DarrenBSD.

At time of this writing, no advertising for MirBSD must be done,
because the advertising clause has not yet been sorted out.

http://templeofhate.com/tglaser/MirBSD/index.php
@
text
@@
