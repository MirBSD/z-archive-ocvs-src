head	1.2;
access;
symbols
	cvs-1_12_11:1.1.2.1
	tg-mergetmp-mirosx-1:1.2
	tg-mergefixes-1-branch:1.2.0.4
	tg-mergefixes-1-base:1.2
	MIROS_X:1.2.0.2
	MIROS_X_BASE:1.2
	cvs-1_12_10:1.1.2.1
	FSF:1.1.2
	MIRBSD_XP_MIRPPC:1.1.3.1.0.4
	MIRBSD_XP_SPARC_BASE:1.1.3.1
	MIRBSD_XP_SPARC:1.1.3.1.0.2
	cvs-1_11_12:1.1.3.1
	tg:1.1.3;
locks; strict;
comment	@ * @;


1.2
date	2004.12.02.12.40.30;	author tg;	state Exp;
branches;
next	1.1;

1.1
date	2004.02.12.19.40.24;	author tg;	state Exp;
branches
	1.1.2.1
	1.1.3.1;
next	;

1.1.2.1
date	2004.12.02.11.59.16;	author tg;	state Exp;
branches;
next	;

1.1.3.1
date	2004.02.12.19.40.24;	author tg;	state Stab;
branches;
next	;


desc
@@


1.2
log
@update to cvs 1.12.10-MirOS except automatically
generated files
XXX this installs as /usr/bin/ncvs yet, so no
XXX conflicts during the test phase.
XXX I suggest to _not_ update.

XXX *** IMPORTANT *** DO NOT ACCESS CVS 1.11 REPOSITORIES
XXX *** IMPORTANT *** WITH CVS 1.12 OR VICE VERSA!
@
text
@/*
 * Copyright (c) 2004, Free Software Foundation,
 *                     Derek Price,
 *                     & Ximbiot <http://ximbiot.com>.
 * 
 * You may distribute under the terms of the GNU General Public License as
 * specified in the README file that comes with the CVS source distribution.
 *
 * This module uses the hash.c module to implement a stack.
 */

#include "cvs.h"
#include <assert.h>



static void
do_push (List *stack, void *elem, int isstring)
{
    Node *p = getnode();

    if (isstring)
	p->key = elem;
    else
	p->data = elem;

    addnode(stack, p);
}



void
push (List *stack, void *elem)
{
    do_push (stack, elem, 0);
}



void
push_string (List *stack, char *elem)
{
    do_push (stack, elem, 1);
}



static void *
do_pop (List *stack, int isstring)
{
    void *elem;

    if (isempty (stack)) return NULL;

    if (isstring)
    {
	elem = stack->list->prev->key;
	stack->list->prev->key = NULL;
    }
    else
    {
	elem = stack->list->prev->data;
	stack->list->prev->data = NULL;
    }

    delnode (stack->list->prev);
    return elem;
}



void *
pop (List *stack)
{
    return do_pop (stack, 0);
}



char *
pop_string (List *stack)
{
    return do_pop (stack, 1);
}



static void
do_unshift (List *stack, void *elem, int isstring)
{
    Node *p = getnode();

    if (isstring)
	p->key = elem;
    else
	p->data = elem;

    addnode_at_front(stack, p);
}



void
unshift (List *stack, void *elem)
{
    do_unshift (stack, elem, 0);
}



void
unshift_string (List *stack, char *elem)
{
    do_unshift (stack, elem, 1);
}



static void *
do_shift (List *stack, int isstring)
{
    void *elem;

    if (isempty (stack)) return NULL;

    if (isstring)
    {
	elem = stack->list->next->key;
	stack->list->next->key = NULL;
    }
    else
    {
	elem = stack->list->next->data;
	stack->list->next->data = NULL;
    }
    delnode (stack->list->next);
    return elem;
}



void *
shift (List *stack)
{
    return do_shift (stack, 0);
}



char *
shift_string (List *stack)
{
    return do_shift (stack, 1);
}



int
isempty (List *stack)
{
    if (stack->list == stack->list->next)
	return 1;
    return 0;
}
@


1.1
log
@Initial revision
@
text
@d18 1
a18 4
_push (stack, elem, isstring)
    List *stack;
    void *elem;
    int isstring;
d33 1
a33 3
push (stack, elem)
    List *stack;
    void *elem;
d35 1
a35 1
    _push (stack, elem, 0);
d41 1
a41 3
push_string (stack, elem)
    List *stack;
    char *elem;
d43 1
a43 1
    _push (stack, elem, 1);
d49 1
a49 3
_pop (stack, isstring)
    List *stack;
    int isstring;
d73 1
a73 2
pop (stack)
    List *stack;
d75 1
a75 1
    return _pop (stack, 0);
d81 1
a81 2
pop_string (stack)
    List *stack;
d83 1
a83 1
    return _pop (stack, 1);
d89 1
a89 4
_unshift (stack, elem, isstring)
    List *stack;
    void *elem;
    int isstring;
d104 1
a104 3
unshift (stack, elem)
    List *stack;
    void *elem;
d106 1
a106 1
    _unshift (stack, elem, 0);
d112 1
a112 3
unshift_string (stack, elem)
    List *stack;
    char *elem;
d114 1
a114 1
    _unshift (stack, elem, 1);
d120 1
a120 3
_shift (stack, isstring)
    List *stack;
    int isstring;
d143 1
a143 2
shift (stack)
    List *stack;
d145 1
a145 1
    return _shift (stack, 0);
d151 1
a151 2
shift_string (stack)
    List *stack;
d153 1
a153 1
    return _shift (stack, 1);
d159 1
a159 2
isempty (stack)
    List *stack;
@


1.1.2.1
log
@vendor-branch-ify new cvs 1.12
@
text
@d18 4
a21 1
do_push (List *stack, void *elem, int isstring)
d36 3
a38 1
push (List *stack, void *elem)
d40 1
a40 1
    do_push (stack, elem, 0);
d46 3
a48 1
push_string (List *stack, char *elem)
d50 1
a50 1
    do_push (stack, elem, 1);
d56 3
a58 1
do_pop (List *stack, int isstring)
d82 2
a83 1
pop (List *stack)
d85 1
a85 1
    return do_pop (stack, 0);
d91 2
a92 1
pop_string (List *stack)
d94 1
a94 1
    return do_pop (stack, 1);
d100 4
a103 1
do_unshift (List *stack, void *elem, int isstring)
d118 3
a120 1
unshift (List *stack, void *elem)
d122 1
a122 1
    do_unshift (stack, elem, 0);
d128 3
a130 1
unshift_string (List *stack, char *elem)
d132 1
a132 1
    do_unshift (stack, elem, 1);
d138 3
a140 1
do_shift (List *stack, int isstring)
d163 2
a164 1
shift (List *stack)
d166 1
a166 1
    return do_shift (stack, 0);
d172 2
a173 1
shift_string (List *stack)
d175 1
a175 1
    return do_shift (stack, 1);
d181 2
a182 1
isempty (List *stack)
@


1.1.3.1
log
@CVS 1.11.12 is the latest stable version of CVS,
released 06.02.2004, with a huge lot of bug fixes.

/me hopes this will pay off...
@
text
@@
