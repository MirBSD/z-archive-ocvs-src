head	1.3;
access;
symbols
	cvs-1_12_11:1.1.2.2
	tg-mergetmp-mirosx-1:1.2
	tg-mergefixes-1-branch:1.2.0.4
	tg-mergefixes-1-base:1.2
	MIROS_X:1.2.0.2
	MIROS_X_BASE:1.2
	cvs-1_12_10:1.1.2.1
	FSF:1.1.2
	MIRBSD_XP_MIRPPC:1.1.3.1.0.4
	MIRBSD_XP_SPARC_BASE:1.1.3.1
	MIRBSD_XP_SPARC:1.1.3.1.0.2
	cvs-1_11_12:1.1.3.1
	tg:1.1.3;
locks; strict;
comment	@ * @;


1.3
date	2005.01.08.21.31.32;	author tg;	state Exp;
branches;
next	1.2;

1.2
date	2004.12.02.12.40.24;	author tg;	state Exp;
branches;
next	1.1;

1.1
date	2004.02.12.19.40.45;	author tg;	state Exp;
branches
	1.1.2.1
	1.1.3.1;
next	;

1.1.2.1
date	2004.12.02.11.59.02;	author tg;	state Exp;
branches;
next	1.1.2.2;

1.1.2.2
date	2005.01.08.21.14.07;	author tg;	state Exp;
branches;
next	;

1.1.3.1
date	2004.02.12.19.40.45;	author tg;	state Stab;
branches;
next	;


desc
@@


1.3
log
@fastmerge
@
text
@/*
 * Copyright (c) 2001, Derek Price and others
 * Copyright (c) 1992, Brian Berliner and Jeff Polk
 * Copyright (c) 1989-1992, Brian Berliner
 *
 * You may distribute under the terms of the GNU General Public License as
 * specified in the README file that comes with the CVS kit.
 */

/* CVSroot data structures */

/* Access method specified in CVSroot. */
typedef enum {
    null_method = 0,
    local_method,
    server_method,
    pserver_method,
    kserver_method,
    gserver_method,
    ext_method,
    fork_method
} CVSmethod;
extern const char method_names[][16];	/* change this in root.c if you change
					   the enum above */

typedef struct cvsroot_s {
    char *original;		/* The complete source CVSroot string. */
    CVSmethod method;		/* One of the enum values above. */
    char *directory;		/* The directory name. */
#ifdef CLIENT_SUPPORT
    char *username;		/* The username or NULL if method == local. */
    char *password;		/* The password or NULL if method == local. */
    char *hostname;		/* The hostname or NULL if method == local. */
    char *cvs_rsh;		/* The $CVS_RSH or NULL if method != ext. */
    char *cvs_server;		/* The $CVS_SERVER or NULL if
				 * method != ext and method != fork. */
    int port;			/* The port or zero if method == local. */
    char *proxy_hostname;	/* The hostname of the proxy server, or NULL
				 * when method == local or no proxy will be
				 * used.
				 */
    int proxy_port;		/* The port of the proxy or zero, as above. */
    unsigned char isremote;	/* Nonzero if we are doing remote access. */
    bool redirect;		/* False if we are to disable redirects. */
#endif /* CLIENT_SUPPORT */
} cvsroot_t;

extern cvsroot_t *current_parsed_root;
extern const cvsroot_t *original_parsed_root;

cvsroot_t *Name_Root (const char *dir, const char *update_dir);
void free_cvsroot_t (cvsroot_t *root_in);
cvsroot_t *parse_cvsroot (const char *root)
	__attribute__ ((__malloc__));
cvsroot_t *local_cvsroot (const char *dir)
	__attribute__ ((__malloc__));
void Create_Root (const char *dir, const char *rootdir);
void root_allow_add (const char *);
void root_allow_free (void);
bool root_allow_ok (const char *);
struct config *get_root_allow_config (const char *arg);
const char *primary_root_translate (const char *root_in);
const char *primary_root_inverse_translate (const char *root_in);
@


1.2
log
@update to cvs 1.12.10-MirOS except automatically
generated files
XXX this installs as /usr/bin/ncvs yet, so no
XXX conflicts during the test phase.
XXX I suggest to _not_ update.

XXX *** IMPORTANT *** DO NOT ACCESS CVS 1.11 REPOSITORIES
XXX *** IMPORTANT *** WITH CVS 1.12 OR VICE VERSA!
@
text
@d34 3
d44 1
@


1.1
log
@Initial revision
@
text
@d14 1
a14 1
    null_method,
d27 3
a29 7
    char *original;		/* the complete source CVSroot string */
    CVSmethod method;		/* one of the enum values above */
    char *username;		/* the username or NULL if method == local */
    char *password;		/* the username or NULL if method == local */
    char *hostname;		/* the hostname or NULL if method == local */
    int port;			/* the port or zero if method == local */
    char *directory;		/* the directory name */
d31 10
a40 1
    unsigned char isremote;	/* nonzero if we are doing remote access */
d43 17
@


1.1.2.1
log
@vendor-branch-ify new cvs 1.12
@
text
@d14 1
a14 1
    null_method = 0,
d27 7
a33 3
    char *original;		/* The complete source CVSroot string. */
    CVSmethod method;		/* One of the enum values above. */
    char *directory;		/* The directory name. */
d35 1
a35 10
    char *username;		/* The username or NULL if method == local. */
    char *password;		/* The password or NULL if method == local. */
    char *hostname;		/* The hostname or NULL if method == local. */
    int port;			/* The port or zero if method == local. */
    char *proxy_hostname;	/* The hostname of the proxy server, or NULL
				 * when method == local or no proxy will be
				 * used.
				 */
    int proxy_port;		/* The port of the proxy or zero, as above. */
    unsigned char isremote;	/* Nonzero if we are doing remote access. */
a37 17

extern cvsroot_t *current_parsed_root;
extern const cvsroot_t *original_parsed_root;

cvsroot_t *Name_Root (const char *dir, const char *update_dir);
void free_cvsroot_t (cvsroot_t *root_in);
cvsroot_t *parse_cvsroot (const char *root)
	__attribute__ ((__malloc__));
cvsroot_t *local_cvsroot (const char *dir)
	__attribute__ ((__malloc__));
void Create_Root (const char *dir, const char *rootdir);
void root_allow_add (const char *);
void root_allow_free (void);
bool root_allow_ok (const char *);
struct config *get_root_allow_config (const char *arg);
const char *primary_root_translate (const char *root_in);
const char *primary_root_inverse_translate (const char *root_in);
@


1.1.2.2
log
@GNU CVS 1.12.11
@
text
@a33 3
    char *cvs_rsh;		/* The $CVS_RSH or NULL if method != ext. */
    char *cvs_server;		/* The $CVS_SERVER or NULL if
				 * method != ext and method != fork. */
a40 1
    bool redirect;		/* False if we are to disable redirects. */
@


1.1.3.1
log
@CVS 1.11.12 is the latest stable version of CVS,
released 06.02.2004, with a huge lot of bug fixes.

/me hopes this will pay off...
@
text
@@
