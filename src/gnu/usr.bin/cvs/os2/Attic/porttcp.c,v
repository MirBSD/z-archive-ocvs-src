head	1.2;
access;
symbols
	cvs-1_12_11:1.1.2.1
	cvs-1_12_10:1.1.2.1
	FSF:1.1.2
	cvs-200406091940:1.1.1.1
	cvs-200405160640:1.1.1.1
	cvs-200404170130:1.1.1.1
	cvs-1_11_12:1.1.3.1
	cvs-1_11_1p1:1.1.3.1
	tg:1.1.3
	cvs-200401271800:1.1.1.1
	cvs-200401261630:1.1.1.1
	cvs-200401021645:1.1.1.1
	cvs-200312222040:1.1.1.1
	cvs-200310020700:1.1.1.1
	cvs-200309271030:1.1.1.1
	cvs-200309251530:1.1.1.1
	cvs-200308302005:1.1.1.1
	cvs-200308171200:1.1.1.1
	ctm-3496:1.1.1.1
	ctm-3449:1.1.1.1
	ctm-3437:1.1.1.1
	cvs-200307191805:1.1.1.1
	ctm-3425:1.1.1.1
	cvs-200307091500:1.1.1.1
	ctm-3389:1.1.1.1
	cvs-200306291430:1.1.1.1
	ctm-3341:1.1.1.1
	cvs-200306082100:1.1.1.1
	ctm-3316:1.1.1.1
	ctm-3272:1.1.1.1
	ctm-3264:1.1.1.1
	cvs-200305071630:1.1.1.1
	MIRBSD_4:1.1.1.1
	ctm-3203:1.1.1.1
	cvs-20030410-1130:1.1.1.1
	ctm-3155:1.1.1.1
	ctm-3132:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.2
date	2003.05.16.17.43.37;	author tg;	state dead;
branches;
next	1.1;

1.1
date	2003.03.22.17.41.27;	author tg;	state Exp;
branches
	1.1.1.1
	1.1.2.1
	1.1.3.1;
next	;

1.1.1.1
date	2003.03.22.17.41.27;	author tg;	state Exp;
branches;
next	;

1.1.2.1
date	2004.12.02.11.58.43;	author tg;	state Exp;
branches;
next	;

1.1.3.1
date	2004.02.12.19.17.32;	author tg;	state Exp;
branches;
next	;


desc
@@


1.2
log
@remove the FSF changelog files and other unused files; use cvsweb or anoncvs to retrieve them
@
text
@/****************************************************************
**
**	PORTTCP.C	- Support for portable TCP/IP
**
****************************************************************/

#define TCPIP_IBM_NOHIDE
#include	<stdio.h>
#include	"tcpip.h"

/*
 * Common unknown error buffer
 */
static char ErrUnknownBuf[36];

#ifndef SockStrError

/****************************************************************
 *	Routine: SockStrError
 *	Returns: Pointer to static buffer
 *	Action : Convert SOCK_ERRNO into error text
 ****************************************************************/

const char *
SockStrError(int SockErrno)
{
#if defined (TCPIP_IBM)  && defined (IBM_CPP)
  switch (SockErrno)
    {
    case SOCEPERM:		return "Not owner";
    case SOCESRCH:		return "No such process";
    case SOCEINTR:		return "Interrupted system call";
    case SOCENXIO:		return "No such device or address";
    case SOCEBADF:		return "Bad file number";
    case SOCEACCES:		return "Permission denied";
    case SOCEFAULT:		return "Bad address";
    case SOCEINVAL:		return "Invalid argument";
    case SOCEMFILE:		return "Too many open files";
    case SOCEPIPE:		return "Broken pipe";
    case SOCEOS2ERR:		return "OS/2 Error";
    case SOCEWOULDBLOCK:	return "Operation would block";
    case SOCEINPROGRESS:	return "Operation now in progress";
    case SOCEALREADY:		return "Operation already in progress";
    case SOCENOTSOCK:		return "Socket operation on non-socket";
    case SOCEDESTADDRREQ:	return "Destination address required";
    case SOCEMSGSIZE:		return "Message too long";
    case SOCEPROTOTYPE:		return "Protocol wrong type for socket";
    case SOCENOPROTOOPT:	return "Protocol not available";
    case SOCEPROTONOSUPPORT:    return "Protocol not supported";
    case SOCESOCKTNOSUPPORT:    return "Socket type not supported";
    case SOCEOPNOTSUPP:		return "Operation not supported on socket";
    case SOCEPFNOSUPPORT:	return "Protocol family not supported";
    case SOCEAFNOSUPPORT:
      return "Address family not supported by protocol family";
    case SOCEADDRINUSE:		return "Address already in use";
    case SOCEADDRNOTAVAIL:	return "Can't assign requested address";
    case SOCENETDOWN:		return "Network is down";
    case SOCENETUNREACH:	return "Network is unreachable";
    case SOCENETRESET:		return "Network dropped connection on reset";
    case SOCECONNABORTED:	return "Software caused connection abort";
    case SOCECONNRESET:		return "Connection reset by peer";
    case SOCENOBUFS:		return "No buffer space available";
    case SOCEISCONN:		return "Socket is already connected";
    case SOCENOTCONN:		return "Socket is not connected";
    case SOCESHUTDOWN:		return "Can't send after socket shutdown";
    case SOCETOOMANYREFS:	return "Too many references: can't splice";
    case SOCETIMEDOUT:		return "Connection timed out";
    case SOCECONNREFUSED:	return "Connection refused";
    case SOCELOOP:		return "Too many levels of symbolic links";
    case SOCENAMETOOLONG:	return "File name too long";
    case SOCEHOSTDOWN:		return "Host is down";
    case SOCEHOSTUNREACH:	return "No route to host";
    case SOCENOTEMPTY:		return "Directory not empty";

    default:
      sprintf( ErrUnknownBuf, "SockStrErrno( %d ) unknown", SockErrno );
      return ErrUnknownBuf;
    }
#else
#error	SockStrError not supported for this OS
#endif
}

#endif /* SockStrError */


/****************************************************************
 *	Routine: HostStrError
 *	Returns: Pointer to static buffer
 *	Action : Convert HOST_ERRNO into error text
 ****************************************************************/

const char *
HostStrError(int HostErrno)
{
  switch (HostErrno) 
    {
    case HOST_NOT_FOUND:
      return "Host not found";
    case TRY_AGAIN:
      return "Host not found (suggest try again)";
    case NO_RECOVERY:
      return "Non-recoverable error: FORMERR, REFUSED, NOTIMP";
    case NO_DATA:
      return "No Data (valid name, but no record of requested type)";

    default:
      sprintf( ErrUnknownBuf, "HostStrErrno( %d ) unknown", HostErrno );
      return ErrUnknownBuf;
    }
}


#if defined( TCPIP_IBM )
/****************************************************************
 * Routine: IbmSockSend
 * Returns: same as send
 * Action : Do the right thing for IBM TCP/IP which includes
 *	    the following two stupidities:
 *		1) Never try to send more than 32K
 *		2) Never pass a buffer that crosses a 64K boundary
 *     	 If Flags is non-zero, this function only attempts
 *	 to deal with condition (1) above.
 ****************************************************************/

int
IbmSockSend (int Socket, const void *Buffer, int Len, int Flags)
{
	int Sent, ToSend, TotalSent = 0;

	const char *Tmp = Buffer;

    /*
     * If Flags have been passed in, the 64K boundary optimization
     * can not be performed.  For example, MSG_PEEK would not work
     * correctly.
     */
	if (Flags)
          return send (Socket, (char *) Buffer, min (0x7FFF, Len), Flags);

	do
        {
          /* Never send across a 64K boundary */
          ToSend = min (Len, (int) (0x10000 -  (0xFFFF & (long) Tmp)));

          /* Never send more than 32K */
          if (ToSend > 0x7FFF) 
            ToSend = 0x7FFF;

          Sent = send (Socket, (char *) Tmp, ToSend, 0);
          if (Sent < 0)
            {
              if ((TotalSent > 0) && (SOCK_ERRNO == EWOULDBLOCK))
                return TotalSent;
              if (SOCK_ERRNO == EINTR)
                continue;
              return Sent;
            }
          if (Sent < ToSend)
            return TotalSent + Sent;
          
          Tmp += Sent;
          TotalSent += Sent;
          Len -= Sent;
	} while (Len > 0);
        
	return TotalSent;
}



/****************************************************************
 * Routine: IbmSockRecv
 * Returns: same as recv
 * Action : Do the right thing for IBM TCP/IP which includes
 *          the following two stupidities:
 *			1) Never try to recv more than 32K
 *			2) Never pass a buffer that crosses a 64K boundary
 *		 If Flags is non-zero, this function only attempts
 *		 to deal with condition (1) above.
 ****************************************************************/

int
IbmSockRecv (int Socket, const void *Buffer, int Len, int Flags)
{
  int Recvd, ToRecv, TotalRecvd = 0;

  char *Tmp = Buffer;

  /* If Flags have been passed in, the 64K boundary optimization
     probably can not be performed. */

	if (Flags)
          return recv (Socket, Buffer, min (0x7FFF, Len), Flags);

	do
	{
          /* Never send across a 64K boundary */
          ToRecv = min( Len, (int)( 0x10000 - ( 0xFFFF & (long)Tmp )));
          
          /* Never send more than 32K */
          if( ToRecv > 0x7FFF )
            ToRecv = 0x7FFF;

          Recvd = recv (Socket, Tmp, ToRecv, 0);
          if (Recvd <= 0)
            {
              if ((TotalRecvd > 0)
                  && (Recvd == 0 || (SOCK_ERRNO == EWOULDBLOCK )))
                return TotalRecvd;
              if (SOCK_ERRNO == EINTR)
                continue;
              
              return Recvd;
            }
          if (Recvd < ToRecv)
            return TotalRecvd + Recvd;
          
          Tmp += Recvd;
          TotalRecvd += Recvd;
          Len -= Recvd;
	} while (Len > 0);
        
	return TotalRecvd;
}
#endif /* defined( TCPIP_IBM ) */

@


1.1
log
@Initial revision
@
text
@@


1.1.2.1
log
@vendor-branch-ify new cvs 1.12
@
text
@@


1.1.3.1
log
@our CVS is currently at 1.11.1p1, thus import that version into vendor branch
@
text
@@


1.1.1.1
log
@Import OpenBSD 3.3 source repository from CTM 3132 the first time
This opens an OpenBSD-mirabile (aka MirBSD) repository.

### MirBSD is:
# Copyright (c) 1982-2003 by Thorsten "mirabile" Glaser <x86@@ePost.de>
# Copyright © 1968-2003  The authors of And contributors to UNIX®, the
#       C Language, BSD/Berkeley Unix; 386BSD, NetBSD 1.1 and OpenBSD.
#
# Anyone who obtained a copy of this work is hereby permitted to freely use,
# distribute, modify, merge, sublicence, give away or sell it as long as the
# authors are given due credit and the following notice is retained:
#
# This work is provided "as is", with no explicit or implicit warranty what-
# soever. Use it only at your own risk. In no event may an author or contri-
# butor be held liable for any damage, directly or indirectly, that origina-
# ted through or is caused by creation or modification of this work.

MirBSD is my private tree. MirBSD does not differ very much from OpenBSD
and intentionally tracks OpenBSD. That's why it _is_ OpenBSD, just not the
official one. It's like with DarrenBSD.

At time of this writing, no advertising for MirBSD must be done,
because the advertising clause has not yet been sorted out.

http://templeofhate.com/tglaser/MirBSD/index.php
@
text
@@
