head	1.2;
access;
symbols
	cvs-1_12_11:1.1.2.1
	cvs-1_12_10:1.1.2.1
	FSF:1.1.2
	cvs-200406091940:1.1.1.1
	cvs-200405160640:1.1.1.1
	cvs-200404170130:1.1.1.1
	cvs-1_11_12:1.1.3.2
	cvs-1_11_1p1:1.1.3.1
	tg:1.1.3
	cvs-200401271800:1.1.1.1
	cvs-200401261630:1.1.1.1
	cvs-200401021645:1.1.1.1
	cvs-200312222040:1.1.1.1
	cvs-200310020700:1.1.1.1
	cvs-200309271030:1.1.1.1
	cvs-200309251530:1.1.1.1
	cvs-200308302005:1.1.1.1
	cvs-200308171200:1.1.1.1
	ctm-3496:1.1.1.1
	ctm-3449:1.1.1.1
	ctm-3437:1.1.1.1
	cvs-200307191805:1.1.1.1
	ctm-3425:1.1.1.1
	cvs-200307091500:1.1.1.1
	ctm-3389:1.1.1.1
	cvs-200306291430:1.1.1.1
	ctm-3341:1.1.1.1
	cvs-200306082100:1.1.1.1
	ctm-3316:1.1.1.1
	ctm-3272:1.1.1.1
	ctm-3264:1.1.1.1
	cvs-200305071630:1.1.1.1
	MIRBSD_4:1.1.1.1
	ctm-3203:1.1.1.1
	cvs-20030410-1130:1.1.1.1
	ctm-3155:1.1.1.1
	ctm-3132:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.2
date	2003.05.16.17.43.37;	author tg;	state dead;
branches;
next	1.1;

1.1
date	2003.03.22.17.41.27;	author tg;	state Exp;
branches
	1.1.1.1
	1.1.2.1
	1.1.3.1;
next	;

1.1.1.1
date	2003.03.22.17.41.27;	author tg;	state Exp;
branches;
next	;

1.1.2.1
date	2004.12.02.11.58.42;	author tg;	state Exp;
branches;
next	;

1.1.3.1
date	2004.02.12.19.17.30;	author tg;	state Exp;
branches;
next	1.1.3.2;

1.1.3.2
date	2004.02.12.19.37.51;	author tg;	state Exp;
branches;
next	;


desc
@@


1.2
log
@remove the FSF changelog files and other unused files; use cvsweb or anoncvs to retrieve them
@
text
@/*
 *              Author:     Bob Withers
 *              Copyright (c) 1993, All Rights Reserved
 *
 *                              NOTICE
 *
 * Permission to use, copy, modify, and distribute this software and
 * its documentation for any purpose and without fee is hereby granted
 * provided that the above copyright notice appears in all copies and
 * that both the copyright notice and this permission notice appear in
 * supporting documentation.
 *
 * The author makes no representations about the suitability of this
 * software for any purpose.  This software is provided ``as is''
 * without express or implied warranty.
 */

#include <stdlib.h>
#include <string.h>

#define INCL_DOSFILEMGR
#define INCL_DOSERRORS
#include <os2.h>

#include "dirent.h"


#define DIRENT_INCR             25


DIR *opendir(char *filename)
{
    auto     size_t             len;
    auto     DIR               *dirp;
    auto     char              *p;
    auto     HDIR               hdir;

#ifdef OS2_16
    auto     USHORT             rc;         /* for 16 bit OS/2          */
    auto     FILEFINDBUF        ff;
    auto     USHORT             cnt;
#else
    auto     APIRET             rc;         /* for 32 bit OS/2          */
    auto     FILEFINDBUF3       ff;
    auto     ULONG              cnt;
#endif  /* OS2_16 */

    if (NULL == filename || '\0' == filename[0])
        filename = ".";

    dirp = malloc(sizeof(*dirp));
    if (NULL == dirp)
        return(NULL);

    len = strlen(filename);
    dirp->dirname = malloc(len + 5);
    if (NULL == dirp->dirname)
    {
        free(dirp);
        return(NULL);
    }

    dirp->max_ent = 0;
    dirp->tot_ent = 0;
    dirp->cur_ent = 0;
    dirp->entp    = NULL;
    strcpy(dirp->dirname, filename);
    for (p = dirp->dirname; *p; ++p)
    {
        if ('/' == *p)
            *p = '\\';
    }

    if ('\\' != dirp->dirname[len - 1])
        strcat(dirp->dirname, "\\");

    strcat(dirp->dirname, "*.*");

    hdir = HDIR_SYSTEM;
    cnt  = 1;
    rc = DosFindFirst(dirp->dirname, &hdir,
                      FILE_NORMAL | FILE_READONLY | FILE_HIDDEN |
                      FILE_SYSTEM | FILE_DIRECTORY | FILE_ARCHIVED,
                      &ff, sizeof(ff), &cnt, FIL_STANDARD);

    while (NO_ERROR == rc)
    {
        auto     struct dirent     *entp;

        if (dirp->tot_ent >= dirp->max_ent)
        {
            auto     struct dirent    **p;

            dirp->max_ent += DIRENT_INCR;
            p = realloc(dirp->entp, dirp->max_ent * sizeof(entp));
            if (NULL == p)
            {
                rc = ERROR_NOT_ENOUGH_MEMORY;
                break;
            }

            dirp->entp = p;
        }

        entp = malloc(sizeof(*entp) + (size_t) ff.cchName);
        if (NULL == entp)
        {
            rc = ERROR_NOT_ENOUGH_MEMORY;
            break;
        }

        entp->d_ino = 0;
        entp->d_off = dirp->tot_ent;
        entp->d_namlen = (unsigned short) ff.cchName;
        memcpy(entp->d_name, ff.achName, entp->d_namlen);
        entp->d_name[entp->d_namlen] = '\0';
        dirp->entp[dirp->tot_ent++] = entp;

        cnt = 1;
        rc = DosFindNext(hdir, &ff, sizeof(ff), &cnt);
    }

    DosFindClose(hdir);
    if (ERROR_NO_MORE_FILES == rc)
        return(dirp);

    closedir(dirp);
    return(NULL);
}


struct dirent *readdir(DIR *dirp)
{
    if (dirp->cur_ent < 0 || dirp->cur_ent >= dirp->tot_ent)
        return(NULL);

    return(dirp->entp[dirp->cur_ent++]);
}


long telldir(DIR *dirp)
{
    return((long) dirp->cur_ent);
}


void seekdir(DIR *dirp, long loc)
{
    dirp->cur_ent = (int) loc;
    return;
}


void rewinddir(DIR *dirp)
{
    dirp->cur_ent = 0;
    return;
}


void closedir(DIR *dirp)
{
    if (dirp)
    {
        if (dirp->dirname)
            free(dirp->dirname);

        if (dirp->entp)
        {
            register int        i;

            for (i = 0; i < dirp->tot_ent; ++i)
                free(dirp->entp[i]);

            free(dirp->entp);
        }
    }

    return;
}
@


1.1
log
@Initial revision
@
text
@@


1.1.2.1
log
@vendor-branch-ify new cvs 1.12
@
text
@d51 1
a51 1
    dirp = xmalloc(sizeof(*dirp));
d56 1
a56 1
    dirp->dirname = xmalloc(len + 5);
d95 1
a95 1
            p = xrealloc(dirp->entp, dirp->max_ent * sizeof(entp));
d105 1
a105 1
        entp = xmalloc(sizeof(*entp) + (size_t) ff.cchName);
@


1.1.3.1
log
@our CVS is currently at 1.11.1p1, thus import that version into vendor branch
@
text
@@


1.1.3.2
log
@CVS 1.11.12 is the latest stable version of CVS,
released 06.02.2004, with a huge lot of bug fixes.

/me hopes this will pay off...
@
text
@d51 1
a51 1
    dirp = xmalloc(sizeof(*dirp));
d56 1
a56 1
    dirp->dirname = xmalloc(len + 5);
d95 1
a95 1
            p = xrealloc(dirp->entp, dirp->max_ent * sizeof(entp));
d105 1
a105 1
        entp = xmalloc(sizeof(*entp) + (size_t) ff.cchName);
@


1.1.1.1
log
@Import OpenBSD 3.3 source repository from CTM 3132 the first time
This opens an OpenBSD-mirabile (aka MirBSD) repository.

### MirBSD is:
# Copyright (c) 1982-2003 by Thorsten "mirabile" Glaser <x86@@ePost.de>
# Copyright © 1968-2003  The authors of And contributors to UNIX®, the
#       C Language, BSD/Berkeley Unix; 386BSD, NetBSD 1.1 and OpenBSD.
#
# Anyone who obtained a copy of this work is hereby permitted to freely use,
# distribute, modify, merge, sublicence, give away or sell it as long as the
# authors are given due credit and the following notice is retained:
#
# This work is provided "as is", with no explicit or implicit warranty what-
# soever. Use it only at your own risk. In no event may an author or contri-
# butor be held liable for any damage, directly or indirectly, that origina-
# ted through or is caused by creation or modification of this work.

MirBSD is my private tree. MirBSD does not differ very much from OpenBSD
and intentionally tracks OpenBSD. That's why it _is_ OpenBSD, just not the
official one. It's like with DarrenBSD.

At time of this writing, no advertising for MirBSD must be done,
because the advertising clause has not yet been sorted out.

http://templeofhate.com/tglaser/MirBSD/index.php
@
text
@@
