head	1.3;
access;
symbols;
locks; strict;
comment	@ * @;


1.3
date	2004.11.13.00.49.29;	author tg;	state dead;
branches;
next	1.2;

1.2
date	2004.11.12.22.07.36;	author tg;	state Exp;
branches;
next	1.1;

1.1
date	2004.11.12.22.01.09;	author tg;	state Exp;
branches;
next	;


desc
@@


1.3
log
@give up on gcc 3.4
GNU make is just too... /* */
@
text
@/* $MirBSD: src/gnu/usr.bin/gcc/config/mirbsd.h,v 1.2 2004/11/12 22:07:36 tg Exp $ */

/* Base configuration file for all MirOS BSD targets.
   Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004
   Free Software Foundation, Inc.

This file is part of GCC.

GCC is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2, or (at your option)
any later version.

GCC is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with GCC; see the file COPYING.  If not, write to
the Free Software Foundation, 59 Temple Place - Suite 330,
Boston, MA 02111-1307, USA.  */

/* TARGET_OS_CPP_BUILTINS() common to all MirOS BSD targets.  */
#define MIRBSD_OS_CPP_BUILTINS()		\
  do						\
    {						\
      builtin_define ("__MirBSD__");		\
      builtin_define ("__OpenBSD__");		\
      builtin_define ("__ELF__");		\
      builtin_assert ("system=unix");		\
      builtin_assert ("system=MirBSD");		\
      builtin_assert ("system=OpenBSD");	\
    }						\
  while (0)

/* CPP_SPEC parts common to all MirBSD targets.  */
#undef CPP_SPEC
#define CPP_SPEC				\
   %{pthread:-D_REENTRANT -D_PTHREADS}"

/* MIRBSD_NATIVE is defined when gcc is integrated into the MirBSD
   source tree so it can be configured appropriately without using
   the GNU configure/build mechanism.  */

#ifdef MIRBSD_NATIVE

/* Look for the include files in the system-defined places.  */

#undef GPLUSPLUS_INCLUDE_DIR
#define GPLUSPLUS_INCLUDE_DIR		"/usr/include/cxx"

#undef GCC_INCLUDE_DIR
#define GCC_INCLUDE_DIR			"/usr/include"

#undef INCLUDE_DEFAULTS
#define INCLUDE_DEFAULTS			\
  {						\
    { GPLUSPLUS_INCLUDE_DIR, "G++", 1, 1 },	\
    { GCC_INCLUDE_DIR, "GCC", 0, 0 },		\
    { 0, 0, 0, 0 }				\
  }

/* Under MirBSD, the normal location of the compiler back ends is the
   /usr/lib directory.  */

#undef STANDARD_EXEC_PREFIX
#define STANDARD_EXEC_PREFIX		"/usr/lib/"

/* Under MirBSD, the normal location of the various *crt*.o files is the
   /usr/lib directory.  */

#undef STANDARD_STARTFILE_PREFIX
#define STANDARD_STARTFILE_PREFIX	"/usr/lib/"

#endif /* MIRBSD_NATIVE */


/* Provide a LIB_SPEC appropriate for MirBSD.  Here we select the
   appropriate set of libs.  */

#undef LIB_SPEC
#define LIB_SPEC		\
  "%{pthread:-lpthread}		\
   %{!shared:			\
     ${!symbolic:-lc}}"

/* Provide a LIBGCC_SPEC appropriate for MirBSD.  We also want to exclude
   libgcc with -symbolic.  */

#undef LIBGCC_SPEC
#define LIBGCC_SPEC		\
  "%{!symbolic:-lgcc}"

/* When building shared libraries, the initialization and finalization
   functions for the library are .init and .fini respectively.  */

#define COLLECT_SHARED_INIT_FUNC(STREAM,FUNC)				\
  do {									\
    fprintf ((STREAM), "void __init() __asm__ (\".init\");");		\
    fprintf ((STREAM), "void __init() {\n\t%s();\n}\n", (FUNC));	\
  } while (0)

#define COLLECT_SHARED_FINI_FUNC(STREAM,FUNC)				\
  do {									\
    fprintf ((STREAM), "void __fini() __asm__ (\".fini\");");		\
    fprintf ((STREAM), "void __fini() {\n\t%s();\n}\n", (FUNC));	\
  } while (0)

#undef TARGET_HAS_F_SETLKW
#define TARGET_HAS_F_SETLKW

/* Implicit library calls should use memcpy, not bcopy, etc.  */

#undef TARGET_MEM_FUNCTIONS
#define TARGET_MEM_FUNCTIONS 1

/* Handle #pragma weak and #pragma pack.  */

#define HANDLE_SYSV_PRAGMA 1


/* Define some types that are the same on all NetBSD platforms,
   making them agree with <machine/ansi.h>.  */

#undef WCHAR_TYPE
#define WCHAR_TYPE		"int"

#undef WCHAR_TYPE_SIZE
#define WCHAR_TYPE_SIZE		32

#undef WINT_TYPE
#define WINT_TYPE		"int"


/* Attempt to turn on execute permission for the stack.  This may be
   used by INITIALIZE_TRAMPOLINE of the target needs it (that is,
   if the target machine can change execute permissions on a page).

   There is no way to query the execute permission of the stack, so
   we always issue the mprotect() call.

   Note that we go out of our way to use namespace-non-invasive calls
   here.  Unfortunately, there is no libc-internal name for mprotect().

   Also note that no errors should be emitted by this code; it is considered
   dangerous for library calls to send messages to stdout/stderr.  */

#define ENABLE_EXECUTE_STACK						\
extern void __enable_execute_stack (void *);				\
void									\
__enable_execute_stack (void *addr)					\
{									\
  int size = getpagesize();						\
  long mask = ~(size-1);						\
  char *page = (char *) (((long) addr) & mask);				\
  char *end  = (char *) ( (((long) (addr + TRAMPOLINE_SIZE)) & mask)	\
			  + size);					\
									\
  if (mprotect (page, end - page,					\
	PROT_READ | PROT_WRITE | PROT_EXEC) < 0)			\
    perror ("mprotect of trampoline code");				\
}

/* This defines which switch letters take arguments.  On MirBSD, most
   of the normal cases (defined by gcc.c) apply.  */

#undef SWITCH_TAKES_ARG
#define SWITCH_TAKES_ARG(CHAR)			\
  (DEFAULT_SWITCH_TAKES_ARG (CHAR)		\
   || (CHAR) == 'R')


/* Provide a STARTFILE_SPEC appropriate for MirOS BSD.  Here we
   provide support for the special GCC option -static.  On ELF
   targets, we also add the crtbegin.o file, which provides part
   of the support for getting C++ file-scope static objects
   constructed before entering "main".  */

#undef STARTFILE_SPEC
#define STARTFILE_SPEC		\
  "crti%O%s			\
   %{!shared:			\
     crt0%O%s			\
     crtbegin%O%s}		\
   %{shared:crtbeginS%O%s}"


/* Provide an ENDFILE_SPEC appropriate for MirOS BSD.  Here we
   add crtend.o, which provides part of the support for getting
   C++ file-scope static objects deconstructed after exiting "main".  */

#undef ENDFILE_SPEC
#define ENDFILE_SPEC		\
  "%{!shared:crtend%O%s}	\
   %{shared:crtendS%O%s}	\
   crtn%O%s"

/* Provide a LINK_SPEC appropriate for MirOS BSD.  */

#undef LINK_SPEC
#define LINK_SPEC			\
  "%{!shared:				\
     -dc -dp				\
     %{!nostdlib:			\
       %{!r*:%{!e*:-e __start}}}	\
    }					\
   %{shared:-shared}			\
   %{R*}				\
   %{static:-Bstatic}			\
   %{!static:-Bdynamic}			\
   %{assert*} %{rpath*}			\
   %{!dynamic-linker:-dynamic-linker /usr/libexec/ld.so}"

/* Don't use the 'xsTAG;' construct in DBX output; OpenBSD systems that
   use DBX don't support it.  */
#define DBX_NO_XREFS

/* MirOS libc already is propolice-enabled.  */
#define _LIBC_PROVIDES_SSP_ 1

/* need this for trampoline code.  */
#include <sys/types.h>
#include <sys/mman.h>
@


1.2
log
@propolice and trampoline fixes
@
text
@d1 1
a1 1
/* $MirBSD: src/gnu/usr.bin/gcc/config/mirbsd.h,v 1.1 2004/11/12 22:01:09 tg Exp $ */
@


1.1
log
@I've drunken enough to... start this
@
text
@d1 1
a1 1
/* $MirBSD$ */
d218 7
@

