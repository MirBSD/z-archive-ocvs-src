head	1.3;
access;
symbols
	binutils-2_15:1.1.2.3
	cvs-200406091940:1.1.1.2
	MIRBSD_7quater:1.2
	cvs-200405160640:1.1.1.1
	cvs-200401271800:1.1.1.1
	cvs-200401261630:1.1.1.1
	cvs-200401021645:1.1.1.1
	MIRBSD_7_ALPHA:1.2.0.6
	MIRBSD_7:1.2.0.4
	cvs-200312222040:1.1.1.1
	cvs-200312031730:1.1.1.1
	MIRBSD_7ter:1.2
	MIRBSD_7_DEV:1.2.0.2
	cvs-200310020700:1.1.1.1
	cvs-200309271030:1.1.1.1
	cvs-200309251530:1.1.1.1
	binutils_2_14:1.1.2.2
	binutils_2_11_2:1.1.2.1
	FSF:1.1.2
	cvs-200308302005:1.1.1.1
	cvs-200308171200:1.1.1.1
	ctm-3496:1.1.1.1
	ctm-3449:1.1.1.1
	ctm-3437:1.1.1.1
	cvs-200307191805:1.1.1.1
	ctm-3425:1.1.1.1
	cvs-200307091500:1.1.1.1
	ctm-3389:1.1.1.1
	cvs-200306291430:1.1.1.1
	ctm-3341:1.1.1.1
	MIRBSD_5:1.1.1.1
	cvs-200306082100:1.1.1.1
	ctm-3316:1.1.1.1
	ctm-3272:1.1.1.1
	ctm-3264:1.1.1.1
	cvs-200305071630:1.1.1.1
	MIRBSD_4:1.1.1.1
	ctm-3203:1.1.1.1
	cvs-20030410-1130:1.1.1.1
	ctm-3155:1.1.1.1
	ctm-3132:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.3
date	2004.08.11.20.59.27;	author tg;	state dead;
branches;
next	1.2;

1.2
date	2003.09.23.21.01.42;	author tg;	state Exp;
branches;
next	1.1;

1.1
date	2003.03.22.17.39.25;	author tg;	state Exp;
branches
	1.1.1.1
	1.1.2.1;
next	;

1.1.1.1
date	2003.03.22.17.39.25;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2004.06.09.20.30.51;	author tg;	state Exp;
branches;
next	;

1.1.2.1
date	2003.09.23.15.41.17;	author tg;	state Exp;
branches;
next	1.1.2.2;

1.1.2.2
date	2003.09.23.16.05.08;	author tg;	state Exp;
branches;
next	1.1.2.3;

1.1.2.3
date	2004.07.15.17.09.52;	author tg;	state Exp;
branches;
next	;


desc
@@


1.3
log
@remove old binutils
@
text
@/* output-file.c -  Deal with the output file
   Copyright 1987, 1990, 1991, 1992, 1993, 1994, 1996, 1998, 1999, 2001
   Free Software Foundation, Inc.

   This file is part of GAS, the GNU Assembler.

   GAS is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   GAS is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with GAS; see the file COPYING.  If not, write to
   the Free Software Foundation, 59 Temple Place - Suite 330, Boston, MA
   02111-1307, USA.  */

#include <stdio.h>

#include "as.h"

#include "output-file.h"

#ifdef BFD_HEADERS
#define USE_BFD
#endif

#ifdef BFD_ASSEMBLER
#define USE_BFD
#ifndef TARGET_MACH
#define TARGET_MACH 0
#endif
#endif

#ifdef USE_BFD
#include "bfd.h"
bfd *stdoutput;

void
output_file_create (name)
     char *name;
{
  if (name[0] == '-' && name[1] == '\0')
    as_fatal (_("can't open a bfd on stdout %s"), name);

  else if (!(stdoutput = bfd_openw (name, TARGET_FORMAT)))
    {
      as_perror (_("FATAL: can't create %s"), name);
      exit (EXIT_FAILURE);
    }

  bfd_set_format (stdoutput, bfd_object);
#ifdef BFD_ASSEMBLER
  bfd_set_arch_mach (stdoutput, TARGET_ARCH, TARGET_MACH);
#endif
  if (flag_traditional_format)
    stdoutput->flags |= BFD_TRADITIONAL_FORMAT;
}

void
output_file_close (filename)
     char *filename;
{
#ifdef BFD_ASSEMBLER
  /* Close the bfd.  */
  if (bfd_close (stdoutput) == 0)
    {
      bfd_perror (filename);
      as_perror (_("FATAL: can't close %s\n"), filename);
      exit (EXIT_FAILURE);
    }
#else
  /* Close the bfd without getting bfd to write out anything by itself.  */
  if (bfd_close_all_done (stdoutput) == 0)
    {
      as_perror (_("FATAL: can't close %s\n"), filename);
      exit (EXIT_FAILURE);
    }
#endif
  stdoutput = NULL;		/* Trust nobody!  */
}

#ifndef BFD_ASSEMBLER
void
output_file_append (where, length, filename)
     char *where ATTRIBUTE_UNUSED;
     long length ATTRIBUTE_UNUSED;
     char *filename ATTRIBUTE_UNUSED;
{
  abort ();
}
#endif

#else

static FILE *stdoutput;

void
output_file_create (name)
     char *name;
{
  if (name[0] == '-' && name[1] == '\0')
    {
      stdoutput = stdout;
      return;
    }

  stdoutput = fopen (name, FOPEN_WB);
  if (stdoutput == NULL)
    {
      as_perror (_("FATAL: can't create %s"), name);
      exit (EXIT_FAILURE);
    }
}

void
output_file_close (filename)
     char *filename;
{
  if (EOF == fclose (stdoutput))
    {
      as_perror (_("FATAL: can't close %s"), filename);
      exit (EXIT_FAILURE);
    }

  /* Trust nobody!  */
  stdoutput = NULL;
}

void
output_file_append (where, length, filename)
     char * where;
     long   length;
     char * filename;
{
  for (; length; length--, where++)
    {
      (void) putc (*where, stdoutput);

      if (ferror (stdoutput))
	/* if ( EOF == (putc( *where, stdoutput )) ) */
	{
	  as_perror (_("Failed to emit an object byte"), filename);
	  as_fatal (_("can't continue"));
	}
    }
}

#endif

@


1.2
log
@looks as if some sour wine (Federweiﬂer <german>, for an English
description see http://forum.leo.org/archiv/2002_11/04/20021104125717e_en.html)
could help me to bear the pain upgrading binutils to 2.14

todo:
 - test if this works at all
 - test if this works
 - test if nothing breaks
 - nuke all occurences of "false" and "true" in binutils (including gdb),
   see bfd.h "Poison" for reference
 - talk to the OpenBSD people, ask them if they could improve this
@
text
@@


1.1
log
@Initial revision
@
text
@d2 1
a2 1
   Copyright 1987, 1990, 1991, 1992, 1993, 1994, 1996, 1998, 1999
d19 2
a20 1
   the Free Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */
d48 2
a49 3
    {
      as_fatal (_("Can't open a bfd on stdout %s "), name);
    }
d52 1
a52 1
      as_perror (_("FATAL: Can't create %s"), name);
d55 1
d73 1
a73 1
      as_perror (_("FATAL: Can't close %s\n"), filename);
d77 1
a77 1
  /* Close the bfd without getting bfd to write out anything by itself */
d80 1
a80 1
      as_perror (_("FATAL: Can't close %s\n"), filename);
d84 1
a84 1
  stdoutput = NULL;		/* Trust nobody! */
d112 1
a112 6
  stdoutput = fopen (name, "wb");

  /* Some systems don't grok "b" in fopen modes.  */
  if (stdoutput == NULL)
    stdoutput = fopen (name, "w");

d115 1
a115 1
      as_perror (_("FATAL: Can't create %s"), name);
d126 1
a126 1
      as_perror (_("FATAL: Can't close %s"), filename);
d129 3
a131 1
  stdoutput = NULL;		/* Trust nobody! */
d136 3
a138 3
     char *where;
     long length;
     char *filename;
d143 1
d148 1
a148 1
	  as_fatal (_("Can't continue"));
a154 1
/* end of output-file.c */
@


1.1.2.1
log
@vendor-branch-i-fy GNU binutils (2.11.2) to facilitate an update
@
text
@@


1.1.2.2
log
@Import GNU binutils 2.14 from the Free Software Foundation
(in case the update goes FUBAR, it can be easily backed off)
@
text
@d2 1
a2 1
   Copyright 1987, 1990, 1991, 1992, 1993, 1994, 1996, 1998, 1999, 2001
d19 1
a19 2
   the Free Software Foundation, 59 Temple Place - Suite 330, Boston, MA
   02111-1307, USA.  */
d47 3
a49 2
    as_fatal (_("can't open a bfd on stdout %s"), name);

d52 1
a52 1
      as_perror (_("FATAL: can't create %s"), name);
a54 1

d72 1
a72 1
      as_perror (_("FATAL: can't close %s\n"), filename);
d76 1
a76 1
  /* Close the bfd without getting bfd to write out anything by itself.  */
d79 1
a79 1
      as_perror (_("FATAL: can't close %s\n"), filename);
d83 1
a83 1
  stdoutput = NULL;		/* Trust nobody!  */
d111 6
a116 1
  stdoutput = fopen (name, FOPEN_WB);
d119 1
a119 1
      as_perror (_("FATAL: can't create %s"), name);
d130 1
a130 1
      as_perror (_("FATAL: can't close %s"), filename);
d133 1
a133 3

  /* Trust nobody!  */
  stdoutput = NULL;
d138 3
a140 3
     char * where;
     long   length;
     char * filename;
a144 1

d149 1
a149 1
	  as_fatal (_("can't continue"));
d156 1
@


1.1.2.3
log
@GNU Binutils, version 2.15
@
text
@d2 1
a2 1
   Copyright 1987, 1990, 1991, 1992, 1993, 1994, 1996, 1998, 1999, 2001, 2003
d44 2
a45 1
output_file_create (char *name)
d65 2
a66 1
output_file_close (char *filename)
d89 4
a92 3
output_file_append (char *where ATTRIBUTE_UNUSED,
		    long length ATTRIBUTE_UNUSED,
		    char *filename ATTRIBUTE_UNUSED)
d103 2
a104 1
output_file_create (char *name)
a114 3
#ifdef BFD_ASSEMBLER
      bfd_set_error (bfd_error_system_call);
#endif
d121 2
a122 1
output_file_close (char *filename)
a125 3
#ifdef BFD_ASSEMBLER
      bfd_set_error (bfd_error_system_call);
#endif
d135 4
a138 1
output_file_append (char * where, long length, char * filename)
d145 1
a146 3
#ifdef BFD_ASSEMBLER
	  bfd_set_error (bfd_error_system_call);
#endif
@


1.1.1.1
log
@Import OpenBSD 3.3 source repository from CTM 3132 the first time
This opens an OpenBSD-mirabile (aka MirBSD) repository.

### MirBSD is:
# Copyright (c) 1982-2003 by Thorsten "mirabile" Glaser <x86@@ePost.de>
# Copyright © 1968-2003  The authors of And contributors to UNIXÆ, the
#       C Language, BSD/Berkeley Unix; 386BSD, NetBSD 1.1 and OpenBSD.
#
# Anyone who obtained a copy of this work is hereby permitted to freely use,
# distribute, modify, merge, sublicence, give away or sell it as long as the
# authors are given due credit and the following notice is retained:
#
# This work is provided "as is", with no explicit or implicit warranty what-
# soever. Use it only at your own risk. In no event may an author or contri-
# butor be held liable for any damage, directly or indirectly, that origina-
# ted through or is caused by creation or modification of this work.

MirBSD is my private tree. MirBSD does not differ very much from OpenBSD
and intentionally tracks OpenBSD. That's why it _is_ OpenBSD, just not the
official one. It's like with DarrenBSD.

At time of this writing, no advertising for MirBSD must be done,
because the advertising clause has not yet been sorted out.

http://templeofhate.com/tglaser/MirBSD/index.php
@
text
@@


1.1.1.2
log
@Sync of src/gnu with OpenBSD (promised a long time ago)
@
text
@d2 1
a2 1
   Copyright 1987, 1990, 1991, 1992, 1993, 1994, 1996, 1998, 1999, 2001
d19 1
a19 2
   the Free Software Foundation, 59 Temple Place - Suite 330, Boston, MA
   02111-1307, USA.  */
d47 3
a49 2
    as_fatal (_("can't open a bfd on stdout %s"), name);

d52 1
a52 1
      as_perror (_("FATAL: can't create %s"), name);
a54 1

d72 1
a72 1
      as_perror (_("FATAL: can't close %s\n"), filename);
d76 1
a76 1
  /* Close the bfd without getting bfd to write out anything by itself.  */
d79 1
a79 1
      as_perror (_("FATAL: can't close %s\n"), filename);
d83 1
a83 1
  stdoutput = NULL;		/* Trust nobody!  */
d111 6
a116 1
  stdoutput = fopen (name, FOPEN_WB);
d119 1
a119 1
      as_perror (_("FATAL: can't create %s"), name);
d130 1
a130 1
      as_perror (_("FATAL: can't close %s"), filename);
d133 1
a133 3

  /* Trust nobody!  */
  stdoutput = NULL;
d138 3
a140 3
     char * where;
     long   length;
     char * filename;
a144 1

d149 1
a149 1
	  as_fatal (_("can't continue"));
d156 1
@

