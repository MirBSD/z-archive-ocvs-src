head	1.2;
access;
symbols
	binutils-2_15:1.1.2.2
	cvs-200406091940:1.1.1.1
	openbsd:1.1.1
	MIRBSD_7quater:1.1.2.1
	MIRBSD_7_ALPHA:1.1.2.1.0.6
	MIRBSD_7:1.1.2.1.0.4
	MIRBSD_7ter:1.1.2.1
	MIRBSD_7_DEV:1.1.2.1.0.2
	binutils_2_14:1.1.2.1
	FSF:1.1.2;
locks; strict;
comment	@# @;


1.2
date	2003.11.04.17.25.39;	author tg;	state dead;
branches;
next	1.1;

1.1
date	2003.09.23.16.05.46;	author tg;	state Exp;
branches
	1.1.1.1
	1.1.2.1;
next	;

1.1.1.1
date	2004.06.09.20.31.48;	author tg;	state Exp;
branches;
next	;

1.1.2.1
date	2003.09.23.16.05.46;	author tg;	state Exp;
branches;
next	1.1.2.2;

1.1.2.2
date	2004.07.15.17.11.41;	author tg;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Yours sincerely, licence auditor, strikes again.


Remove stuff under the so-called "GNU Free Documentation License".

You are actually even breaching the licence when you are
storing GFDL-licenced documents on an encrypted filesystem,
or "even  storing  it  on  a  file-sharing  system  with
non-world-readable permissions", according to the information
found at http://home.twcny.rr.com/nerode/neroden/fdl.html
via Slashdot.

I am thinking whether to adopt the (amended) Debian Social
Contract, and either the DFSG or the OSD (or both) for MirOS.
(see the /. story)

src/gnu/libstdc++:

| The Docs: FDL
|
|    The documentation shipped with the library and made available over the
|    web,   including   the  pages  generated  from  source  comments,  are
|    copyrighted  by  the  Free  Software  Foundation, and placed under the
|    [3]GNU   Free   Documentation   License  version  1.1.  There  are  no
|    Front-Cover Texts, no Back-Cover Texts, and no Invariant Sections.

Of course this doesn't apply to documentation for libstdc++ generated by
ourselfes from GPL'd or LGPL'd files, because the GFDL is incompatible
with both of them.


Hint: if you can dig out older versions of the GNU tools man pages, such
as gcc 3.0 and binutils 2.12/2.13 (for example), which are not yet GFDL
licenced, please give me a hint (I'm not actively searching myself now)
or mail them to me, and be sure I'll commit them, together with a warning
about inactuality.
@
text
@@@c Copyright 2002
@@c Free Software Foundation, Inc.
@@c   Contributed by David Mosberger-Tang <davidm@@hpl.hp.com>
@@c This is part of the GAS manual.
@@c For copying conditions, see the file as.texinfo.

@@ifset GENERIC
@@page
@@node IA-64-Dependent
@@chapter IA-64 Dependent Features
@@end ifset

@@ifclear GENERIC
@@node Machine Dependencies
@@chapter IA-64 Dependent Features
@@end ifclear

@@cindex IA-64 support
@@menu
* IA-64 Options::              Options
* IA-64 Syntax::               Syntax
@@c * IA-64 Floating Point::       Floating Point		// to be written
@@c * IA-64 Directives::           IA-64 Machine Directives	// to be written
* IA-64 Opcodes::              Opcodes
@@end menu

@@node IA-64 Options
@@section Options
@@cindex IA-64 options
@@cindex options for IA-64

@@table @@option
@@cindex @@code{-mconstant-gp} command line option, IA-64

@@item -mconstant-gp
This option instructs the assembler to mark the resulting object file
as using the ``constant GP'' model.  With this model, it is assumed
that the entire program uses a single global pointer (GP) value.  Note
that this option does not in any fashion affect the machine code
emitted by the assembler.  All it does is turn on the EF_IA_64_CONS_GP
flag in the ELF file header.

@@item -mauto-pic
This option instructs the assembler to mark the resulting object file
as using the ``constant GP without function descriptor'' data model.
This model is like the ``constant GP'' model, except that it
additionally does away with function descriptors.  What this means is
that the address of a function refers directly to the function's code
entry-point.  Normally, such an address would refer to a function
descriptor, which contains both the code entry-point and the GP-value
needed by the function.  Note that this option does not in any fashion
affect the machine code emitted by the assembler.  All it does is
turn on the EF_IA_64_NOFUNCDESC_CONS_GP flag in the ELF file header.

@@item -milp32
@@item -milp64
@@item -mlp64
@@item -mp64
These options select the data model.  The assembler defaults to @@code{-mlp64}
(LP64 data model).

@@item -mle
@@item -mbe
These options select the byte order.  The @@code{-mle} option selects little-endian
byte order (default) and @@code{-mbe} selects big-endian byte order.  Note that
IA-64 machine code always uses little-endian byte order.

@@item -x
@@item -xexplicit
These options turn on dependency violation checking.  This checking is turned on by
default.

@@item -xauto
This option instructs the assembler to automatically insert stop bits where necessary
to remove dependency violations.

@@item -xdebug
This turns on debug output intended to help tracking down bugs in the dependency
violation checker.

@@end table

@@cindex IA-64 Syntax
@@node IA-64 Syntax
@@section Syntax
The assembler syntax closely follows the IA-64 Assembly Language
Reference Guide.

@@menu
* IA-64-Chars::                Special Characters
* IA-64-Regs::                 Register Names
* IA-64-Bits::                 Bit Names
* IA-64-Relocs::               Relocations
@@end menu

@@node IA-64-Chars
@@subsection Special Characters

@@cindex line comment character, IA-64
@@cindex IA-64 line comment character
@@samp{//} is the line comment token.

@@cindex line separator, IA-64
@@cindex statement separator, IA-64
@@cindex IA-64 line separator
@@samp{;} can be used instead of a newline to separate statements.

@@node IA-64-Regs
@@subsection Register Names
@@cindex IA-64 registers
@@cindex register names, IA-64

The 128 integer registers are refered to as @@samp{r@@var{n}}.
The 128 floating-point registers are refered to as @@samp{f@@var{n}}.
The 128 application registers are refered to as @@samp{ar@@var{n}}.
The 128 control registers are refered to as @@samp{cr@@var{n}}.
The 64 one-bit predicate registers are refered to as @@samp{p@@var{n}}.
The 8 branch registers are refered to as @@samp{b@@var{n}}.
In addition, the assembler defines a number of aliases:
@@samp{gp} (@@samp{r1}), @@samp{sp} (@@samp{r12}), @@samp{rp} (@@samp{b0}),
@@samp{ret0} (@@samp{r8}), @@samp{ret1} (@@samp{r9}), @@samp{ret2} (@@samp{r10}),
@@samp{ret3} (@@samp{r9}), @@samp{farg@@var{n}} (@@samp{f8+@@var{n}}), and
@@samp{fret@@var{n}} (@@samp{f8+@@var{n}}).

For convenience, the assembler also defines aliases for all named application
and control registers.  For example, @@samp{ar.bsp} refers to the register
backing store pointer (@@samp{ar17}).  Similarly, @@samp{cr.eoi} refers to
the end-of-interrupt register (@@samp{cr67}).

@@node IA-64-Bits
@@subsection IA-64 Processor-Status-Register (PSR) Bit Names
@@cindex IA-64 Processor-status-Register bit names
@@cindex PSR bits
@@cindex bit names, IA-64

The assembler defines bit masks for each of the bits in the IA-64
processor status register.  For example, @@samp{psr.ic} corresponds to
a value of 0x2000.  These masks are primarily intended for use with
the @@sample{ssm}/@@sample{sum} and @@sample{rsm}/@@sample{rum}
instructions, but they can be used anywhere else where an integer
constant is expected.

@@node IA-64 Opcodes
@@section Opcodes
For detailed information on the IA-64 machine instruction set, see the
@@c Attempt to work around a very overfull hbox.
@@iftex
IA-64 Assembly Language Reference Guide available at
@@smallfonts
@@example
http://developer.intel.com/design/itanium/arch_spec.htm
@@end example
@@textfonts
@@end iftex
@@ifnottex
@@uref{http://developer.intel.com/design/itanium/arch_spec.htm,IA-64 Architecture Handbook}.
@@end ifnottex
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Sync of src/gnu with OpenBSD (promised a long time ago)
@
text
@@


1.1.2.1
log
@Import GNU binutils 2.14 from the Free Software Foundation
(in case the update goes FUBAR, it can be easily backed off)
@
text
@@


1.1.2.2
log
@GNU Binutils, version 2.15
@
text
@d113 6
a118 6
The 128 integer registers are referred to as @@samp{r@@var{n}}.
The 128 floating-point registers are referred to as @@samp{f@@var{n}}.
The 128 application registers are referred to as @@samp{ar@@var{n}}.
The 128 control registers are referred to as @@samp{cr@@var{n}}.
The 64 one-bit predicate registers are referred to as @@samp{p@@var{n}}.
The 8 branch registers are referred to as @@samp{b@@var{n}}.
@

