head	1.2;
access;
symbols
	binutils-2_15:1.1.2.1
	cvs-200405160640:1.1.1.1
	cvs-200401271800:1.1.1.1
	cvs-200401261630:1.1.1.1
	cvs-200401021645:1.1.1.1
	cvs-200312222040:1.1.1.1
	cvs-200312031730:1.1.1.1
	cvs-200310020700:1.1.1.1
	cvs-200309271030:1.1.1.1
	cvs-200309251530:1.1.1.1
	binutils_2_14:1.1.2.1
	binutils_2_11_2:1.1.2.1
	FSF:1.1.2
	cvs-200308302005:1.1.1.1
	cvs-200308171200:1.1.1.1
	ctm-3496:1.1.1.1
	ctm-3449:1.1.1.1
	ctm-3437:1.1.1.1
	cvs-200307191805:1.1.1.1
	ctm-3425:1.1.1.1
	cvs-200307091500:1.1.1.1
	ctm-3389:1.1.1.1
	cvs-200306291430:1.1.1.1
	ctm-3341:1.1.1.1
	cvs-200306082100:1.1.1.1
	ctm-3316:1.1.1.1
	ctm-3272:1.1.1.1
	ctm-3264:1.1.1.1
	cvs-200305071630:1.1.1.1
	MIRBSD_4:1.1.1.1
	ctm-3203:1.1.1.1
	cvs-20030410-1130:1.1.1.1
	ctm-3155:1.1.1.1
	ctm-3132:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@# @;


1.2
date	2003.05.16.17.42.07;	author tg;	state dead;
branches;
next	1.1;

1.1
date	2003.03.22.17.39.46;	author tg;	state Exp;
branches
	1.1.1.1
	1.1.2.1;
next	;

1.1.1.1
date	2003.03.22.17.39.46;	author tg;	state Exp;
branches;
next	;

1.1.2.1
date	2003.09.23.15.42.00;	author tg;	state Exp;
branches;
next	;


desc
@@


1.2
log
@remove the FSF changelog files and other unused files; use cvsweb or anoncvs to retrieve them
@
text
@print ".text\n";
print "\t.type _start,@@","function\n";
print "_start:\n\n";

print "// Fixed and stacked integer registers.\n";
for ($i = 1; $i < 128; ++$i) {
  print "\t{ .mii; mov r$i = r0; nop.i 0; nop.i 0;; }\n";
}
print "\n";

print "// Alternate names for input registers\n";
print "\t.regstk 96, 0, 0, 0\n";
for ($i = 0; $i < 96; ++$i) {
  print "\t{ .mii; mov in$i = r0; nop.i 0; nop.i 0;; }\n";
}
print "\n";

print "// Alternate names for output registers\n";
print "\t.regstk 0, 0, 96, 0\n";
for ($i = 0; $i < 96; ++$i) {
  print "\t{ .mii; mov out$i = r0; nop.i 0; nop.i 0;; }\n";
}
print "\n";

print "// Alternate names for local registers\n";
print "\t.regstk 0, 96, 0, 0\n";
for ($i = 0; $i < 96; ++$i) {
  print "\t{ .mii; mov loc$i = r0; nop.i 0; nop.i 0;; }\n";
}
print "\n";

print "// Return value registers\n";
for ($i = 0; $i < 4; ++$i) {
  print "\t{ .mii; mov ret$i = r0; nop.i 0; nop.i 0;; }\n";
}
print "\n";

print "\t{ .mii;\n";
print "\tmov gp = r0\n";
print "\tmov sp = r0\n";
print "\tnop.i 0;; }\n\n";

print "// Floating point registers\n";
for ($i = 2; $i < 128; ++$i) {
  print "\t{ .mfi; mov f$i = f0 ;; }\n";
}
print "\n";

print "// Floating point argument registers\n";
for ($i = 0; $i < 8; ++$i) {
  print "\t{ .mfi; mov farg$i = f1 ;; }\n";
}
print "\n";

print "// Floating point return value registers\n";
for ($i = 0; $i < 8; ++$i) {
  print "\t{ .mfi; mov fret$i = f1 ;; }\n";
}
print "\n";

print "// Predicate registers\n";
for ($i = 0; $i < 64; ++$i) {
  print "\t{ .mii; (p$i)\tmov r", $i+1, " = r0; nop.i 0; nop.i 0;; }\n";
}
print "\n";

print "// Predicates as a unit\n";
print "\t{ .mmi; nop.m 0; mov r1 = pr ;; }\n";
print "//\tmov r2 = pr.rot\n";
print "\n";

print "// Branch registers.\n";
for ($i = 0; $i < 8; ++$i) {
  print "\t{ .mmi; mov b$i = r0;; }\n";
}
print "\n";

print "\t{ .mmi; mov rp = r0;; }\n";
print "\n";

print "// Application registers\n";
@@reserved = ( 8..15, 20, 22..23, 31, 33..35, 37..39, 41..47, 67..111 );
%reserved = ();
foreach $i (@@reserved) {
  $reserved{$i} = 1;
}
for ($i = 0; $i < 128; ++$i) {
  print "//" if $reserved{$i};
  print "\t{ .mmi; nop.m 0; mov r1 = ar$i ;; }";
  print "\t\t// reserved" if $reserved{$i};
  print "\n";
}
print "\n";

print "// Application registers by name\n";
for ($i = 0; $i < 8; ++$i) {
  print "\t{ .mmi; nop.m 0; mov r1 = ar.k$i ;;}\n";
}

@@regs = ( "rsc", "bsp", "bspstore", "rnat", "ccv", "unat", "fpsr", "itc",
	  "pfs", "lc", "ec" );
foreach $i (@@regs) {
  print "\t{ .mmi; nop.m 0; mov r1 = ar.$i ;; }\n";
}
print "\n";

print "// Control registers\n";
@@reserved = ( 3..7, 10..15, 18, 26..63, 75..79, 82..127 );
%reserved = ();
foreach $i (@@reserved) {
  $reserved{$i} = 1;
}
for ($i = 0; $i < 128; ++$i) {
  print "//" if $reserved{$i};
  print "\t{ .mfb; mov r1 = cr$i ;; }";
  print "\t\t// reserved" if $reserved{$i};
  print "\n";
}
print "\n";

print "// Control registers by name\n";
@@regs = ( "dcr", "itm", "iva", "pta", "ipsr", "isr", "iip",
	  "iipa", "ifs", "iim", "iha", "lid", "ivr",
	  "tpr", "eoi", "irr0", "irr1", "irr2", "irr3", "itv", "pmv",
	  "lrr0", "lrr1", "cmcv" );
# ias doesn't accept these, despite documentation to the contrary.
# push @@regs, "ida", "idtr", "iitr"
foreach $i (@@regs) {
  print "\t{ .mfb; mov r1 = cr.$i ;; }\n";
}
print "\n";


print "// Other registers\n";
print "\t{ .mfb; mov r1 = psr ;; }\n";
print "//\t{ .mfb; mov r1 = psr.l ;; }\n";
print "\t{ .mfb; mov r1 = psr.um ;; }\n";
print "\t{ .mmi; mov r1 = ip ;; }\n";
print "\n";

print "// Indirect register files\n";
@@regs = ("pmc", "pmd", "pkr", "rr", "ibr", "dbr", "CPUID", "cpuid");
# ias doesn't accept these, despite documentation to the contrary.
# push @@regs, "itr", "dtr";
foreach $i (@@regs) {
  print "\t{ .mmi\n";
  print "\tmov r1 = ${i}[r3]\n";
  print "\tmov r2 = ${i}[r4]\n";
  print "\tnop.i 0;; }\n";
}
@


1.1
log
@Initial revision
@
text
@@


1.1.2.1
log
@vendor-branch-i-fy GNU binutils (2.11.2) to facilitate an update
@
text
@@


1.1.1.1
log
@Import OpenBSD 3.3 source repository from CTM 3132 the first time
This opens an OpenBSD-mirabile (aka MirBSD) repository.

### MirBSD is:
# Copyright (c) 1982-2003 by Thorsten "mirabile" Glaser <x86@@ePost.de>
# Copyright © 1968-2003  The authors of And contributors to UNIX®, the
#       C Language, BSD/Berkeley Unix; 386BSD, NetBSD 1.1 and OpenBSD.
#
# Anyone who obtained a copy of this work is hereby permitted to freely use,
# distribute, modify, merge, sublicence, give away or sell it as long as the
# authors are given due credit and the following notice is retained:
#
# This work is provided "as is", with no explicit or implicit warranty what-
# soever. Use it only at your own risk. In no event may an author or contri-
# butor be held liable for any damage, directly or indirectly, that origina-
# ted through or is caused by creation or modification of this work.

MirBSD is my private tree. MirBSD does not differ very much from OpenBSD
and intentionally tracks OpenBSD. That's why it _is_ OpenBSD, just not the
official one. It's like with DarrenBSD.

At time of this writing, no advertising for MirBSD must be done,
because the advertising clause has not yet been sorted out.

http://templeofhate.com/tglaser/MirBSD/index.php
@
text
@@
