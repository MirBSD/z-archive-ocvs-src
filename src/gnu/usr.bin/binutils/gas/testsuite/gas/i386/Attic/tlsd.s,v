head	1.2;
access;
symbols
	binutils-2_15:1.1.2.1
	binutils_2_14:1.1.2.1
	FSF:1.1.2;
locks; strict;
comment	@# @;


1.2
date	2003.09.23.21.03.04;	author tg;	state dead;
branches;
next	1.1;

1.1
date	2003.09.23.16.06.26;	author tg;	state Exp;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2003.09.23.16.06.26;	author tg;	state Exp;
branches;
next	;


desc
@@


1.2
log
@looks as if some sour wine (Federweiﬂer <german>, for an English
description see http://forum.leo.org/archiv/2002_11/04/20021104125717e_en.html)
could help me to bear the pain upgrading binutils to 2.14

todo:
 - test if this works at all
 - test if this works
 - test if nothing breaks
 - nuke all occurences of "false" and "true" in binutils (including gdb),
   see bfd.h "Poison" for reference
 - talk to the OpenBSD people, ask them if they could improve this
@
text
@	.section ".tdata", "awT", @@progbits
	.globl foo, baz
	.hidden baz
foo:	.long 25
bar:	.long 27
baz:	.long 29
	.text
	.globl	fn
	.type	fn,@@function
fn:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%ebx
	pushl	%eax
	call	1f
1:	popl	%ebx
	addl	$_GLOBAL_OFFSET_TABLE_+[.-1b], %ebx

	/* Dynamic TLS model, foo not known to be in the current object  */
	leal	foo@@TLSGD(,%ebx,1), %eax
	call	___tls_get_addr@@PLT
	/* %eax now contains &foo  */

	/* Dynamic TLS model, bar and baz known to be in the current object  */
	leal	bar@@TLSLDM(%ebx), %eax
	call	___tls_get_addr@@PLT

	/* Just show that there can be arbitrary instructions here  */
	leal	0(%edi, 1), %edi

	leal	bar@@DTPOFF(%eax), %edx
	/* %edx now contains &bar  */

	/* Again, arbitrary instructions  */
	leal	0(%esi, 1), %esi

	leal	baz@@DTPOFF(%eax), %ecx
	/* %ecx now contains &baz  */

	movl    -4(%ebp), %ebx
	leave
	ret
@


1.1
log
@Initial revision
@
text
@@


1.1.2.1
log
@Import GNU binutils 2.14 from the Free Software Foundation
(in case the update goes FUBAR, it can be easily backed off)
@
text
@@
