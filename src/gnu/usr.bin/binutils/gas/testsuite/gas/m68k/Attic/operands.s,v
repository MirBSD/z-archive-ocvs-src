head	1.2;
access;
symbols
	binutils-2_15:1.1.2.1
	cvs-200405160640:1.1.1.1
	cvs-200401271800:1.1.1.1
	cvs-200401261630:1.1.1.1
	cvs-200401021645:1.1.1.1
	cvs-200312222040:1.1.1.1
	cvs-200312031730:1.1.1.1
	cvs-200310020700:1.1.1.1
	cvs-200309271030:1.1.1.1
	cvs-200309251530:1.1.1.1
	binutils_2_14:1.1.2.1
	binutils_2_11_2:1.1.2.1
	FSF:1.1.2
	cvs-200308302005:1.1.1.1
	cvs-200308171200:1.1.1.1
	ctm-3496:1.1.1.1
	ctm-3449:1.1.1.1
	ctm-3437:1.1.1.1
	cvs-200307191805:1.1.1.1
	ctm-3425:1.1.1.1
	cvs-200307091500:1.1.1.1
	ctm-3389:1.1.1.1
	cvs-200306291430:1.1.1.1
	ctm-3341:1.1.1.1
	cvs-200306082100:1.1.1.1
	ctm-3316:1.1.1.1
	ctm-3272:1.1.1.1
	ctm-3264:1.1.1.1
	cvs-200305071630:1.1.1.1
	MIRBSD_4:1.1.1.1
	ctm-3203:1.1.1.1
	cvs-20030410-1130:1.1.1.1
	ctm-3155:1.1.1.1
	ctm-3132:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@# @;


1.2
date	2003.05.16.17.42.08;	author tg;	state dead;
branches;
next	1.1;

1.1
date	2003.03.22.17.39.46;	author tg;	state Exp;
branches
	1.1.1.1
	1.1.2.1;
next	;

1.1.1.1
date	2003.03.22.17.39.46;	author tg;	state Exp;
branches;
next	;

1.1.2.1
date	2003.09.23.15.42.01;	author tg;	state Exp;
branches;
next	;


desc
@@


1.2
log
@remove the FSF changelog files and other unused files; use cvsweb or anoncvs to retrieve them
@
text
@# Test handling of MIT and Motorola syntax operands
# If you change this file, see also op68000.d.
	.text
foo:	
	| Data register direct
	tstl	%d0

	| Address register direct
	tstl	%a0

	| Address register indirect
	tstl	%a0@@
	tstl	(%a0)

	| Address register indirect with postincrement
	tstl	%a0@@+
	tstl	(%a0)+

	| Address register indirect with predecrement
	tstl	%a0@@-
	tstl	-(%a0)

	| Address register indirect with displacement
	tstl	%a0@@(8)
	tstl	(8,%a0)
	tstl	8(%a0)

	| Address register indirect with index (8-bit displacement)
	tstl	%a0@@(8,%d0)
	tstl	%a0@@(8,%d0:w)
	tstl	%a0@@(8,%d0:w:1)
	tstl	%a0@@(8,%d0:w:2)
	tstl	%a0@@(8,%d0:w:4)
	tstl	%a0@@(8,%d0:w:8)
	tstl	%a0@@(8,%d0:l)
	tstl	%a0@@(8,%d0:l:1)
	tstl	%a0@@(8,%d0:l:2)
	tstl	%a0@@(8,%d0:l:4)
	tstl	%a0@@(8,%d0:l:8)
	tstl	%a0@@(%d0:w:2)
	tstl	(8,%a0,%d0)
	tstl	(8,%a0,%d0*1)
	tstl	(8,%a0,%d0*2)
	tstl	(8,%a0,%d0*4)
	tstl	(8,%a0,%d0*8)
	tstl	(8,%a0,%d0.w)
	tstl	(8,%a0,%d0.w*1)
	tstl	(8,%a0,%d0.w*2)
	tstl	(8,%a0,%d0.w*4)
	tstl	(8,%a0,%d0.w*8)
	tstl	(8,%a0,%d0.l)
	tstl	(8,%a0,%d0.l*1)
	tstl	(8,%a0,%d0.l*2)
	tstl	(8,%a0,%d0.l*4)
	tstl	(8,%a0,%d0.l*8)
	tstl	(8,%d0,%a0)
	tstl	(8,%a1.w*2,%a0)
	tstl	(8,%a1,%a0)
	tstl	8(%a0,%d0.w*2)
	tstl	8(%d0.w*2,%a0)
	tstl	8(%a1.w*2,%a0)
	tstl	(%a0,%d0.w*2)
	tstl	(%d0.w*2,%a0)

	| Address register indirect with index (base displacement)
	tstl	%a0@@(1000,%d0:w:2)
	tstl	@@(1000,%d0:w:2)
	tstl	@@(%d0:w:2)
	tstl	@@(1000)
	tstl	%a0@@(100000)
	tstl	(1000,%a0,%d0.w*2)
	tstl	(1000,%d0,%a0)
	tstl	(1000,%a1.w*2,%a0)
	tstl	1000(%a0,%d0.w*2)
	tstl	1000(%d0,%a0)
	tstl	(1000,%d0.w*2)
	tstl	1000(%d0.w*2)
	tstl	(%d0.w*2)
	tstl	(100000,%a0)
	tstl	100000(%a0)
	tstl	%za1@@(1000,%d0:w:2)
	tstl	%za1@@(100000)
	tstl	(1000,%za1,%d0.w*2)
	tstl	(1000,%d0,%za1)
	tstl	(1000,%a1.w*2,%za1)
	tstl	1000(%za1,%d0.w*2)
	tstl	1000(%d0,%za1)
	tstl	(100000,%za1)
	tstl	100000(%za1)
	tstl	%a0@@(1000,%zd1:w:2)
	tstl	@@(1000,%zd1:w:2)
	tstl	@@(%zd1:w:2)
	tstl	(1000,%a0,%zd1.w*2)
	tstl	(1000,%zd1,%a0)
	tstl	(1000,%za1.w*2,%a0)
	tstl	1000(%a0,%zd1.w*2)
	tstl	1000(%zd1,%a0)
	tstl	(1000,%zd1.w*2)
	tstl	1000(%zd1.w*2)
	tstl	(%zd1.w*2)

	| Memory indirect postindexed
	tstl	%a0@@(1000)@@(2000,%d0:w:2)
	tstl	%a0@@(1000)@@(%d0:w:2)
	tstl	%a0@@(1000)@@(2000)
	tstl	@@(1000)@@(2000,%d0:w:2)
	tstl	@@(1000)@@(%d0:w:2)
	tstl	@@(1000)@@(2000)
	tstl	%a0@@(0)@@(2000,%d0:w:2)
	tstl	%a0@@(0)@@(%d0:w:2)
	tstl	%a0@@(0)@@(2000)
	tstl	@@(0)@@(2000,%d0:w:2)
	tstl	@@(0)@@(%d0:w:2)
	tstl	@@(0)@@(2000)
	tstl	([1000,%a0],%d0:w:2,2000)
	tstl	([1000,%a0],%d0:w:2)
	tstl	([1000,%a0],2000)
	tstl	([1000],%d0:w:2,2000)
	tstl	([1000],%d0:w:2)
	tstl	([1000],2000)
	tstl	([%a0],%d0:w:2,2000)
	tstl	([%a0],%d0:w:2)
	tstl	([%a0],2000)
	tstl	([0],%d0:w:2,2000)
	tstl	([0],%d0:w:2)
	tstl	([0],2000)

	| Memory indirect preindexed
	tstl	%a0@@(1000,%d0:w:2)@@(2000)
	tstl	%a0@@(1000,%d0:w:2)@@(0)
	tstl	@@(1000,%d0:w:2)@@(2000)
	tstl	@@(1000,%d0:w:2)@@(0)
	tstl	%a0@@(%d0:w:2)@@(2000)
	tstl	%a0@@(%d0:w:2)@@(0)
	tstl	@@(%d0:w:2)@@(2000)
	tstl	@@(%d0:w:2)@@(0)
	tstl	([1000,%a0,%d0:w:2],2000)
	tstl	([1000,%d0:w:2,%a0],2000)
	tstl	([1000,%d0,%a0],2000)
	tstl	([1000,%a1,%a0],2000)
	tstl	([1000,%a1:w:2,%a0],2000)
	tstl	([1000,%a0,%d0:w:2])
	tstl	([1000,%d0,%a0])
	tstl	([1000,%d0:w:2],2000)
	tstl	([1000,%d0:w:2])
	tstl	([%a0,%d0:w:2],2000)
	tstl	([%d0,%a0],2000)
	tstl	([%a0,%d0:w:2])
	tstl	([%d0,%a0])
	tstl	([%d0:w:2],2000)
	tstl	([%d0:w:2])

	| Program counter indirect with displacement
	pea	%pc@@(8)
	pea	(8,%pc)
	pea	8(%pc)
	pea	foo

	| Program counter indirect with index (8-bit displacement)
	pea	%pc@@(8,%d0:w:2)
	pea	%pc@@(%d0:w:2)
	pea	(8,%pc,%d0.w*2)
	pea	(8,%d0,%pc)
	pea	(8,%a0,%pc)
	pea	8(%pc,%d0.w*2)
	pea	8(%d0,%pc)
	pea	8(%a0,%pc)
	pea	(%pc,%d0.w*2)
	pea	(%d0,%pc)
	pea	(%a0,%pc)

	| Program counter indirect with index (base displacement)
	pea	%pc@@(1000,%d0:w:2)
	pea	%pc@@(100000)
	pea	(1000,%pc,%d0.w*2)
	pea	(1000,%d0,%pc)
	pea	(1000,%a1.w*2,%pc)
	pea	(1000,%a1,%pc)
	pea	1000(%pc,%d0.w*2)
	pea	1000(%d0,%pc)
	pea	1000(%a1,%pc)
	pea	(100000,%pc)
	pea	100000(%pc)
	pea	%zpc@@(1000,%d0:w:2)
	pea	%zpc@@(100000)
	pea	(1000,%zpc,%d0.w*2)
	pea	(1000,%d0,%zpc)
	pea	(1000,%a1.w*2,%zpc)
	pea	(1000,%a1,%zpc)
	pea	1000(%zpc,%d0.w*2)
	pea	1000(%d0,%zpc)
	pea	1000(%a1,%zpc)
	pea	(100000,%zpc)
	pea	100000(%zpc)

	| Program counter memory indirect postindexed
	pea	%pc@@(1000)@@(2000,%d0:w:2)
	pea	%pc@@(1000)@@(%d0:w:2)
	pea	%pc@@(1000)@@(2000)
	pea	%pc@@(0)@@(2000,%d0:w:2)
	pea	%pc@@(0)@@(%d0:w:2)
	pea	%pc@@(0)@@(2000)
	pea	([1000,%pc],%d0:w:2,2000)
	pea	([1000,%pc],%d0:w:2)
	pea	([1000,%pc],2000)
	pea	([%pc],%d0:w:2,2000)
	pea	([%pc],%d0:w:2)
	pea	([%pc],2000)
	pea	%zpc@@(1000)@@(2000,%d0:w:2)
	pea	%zpc@@(1000)@@(%d0:w:2)
	pea	%zpc@@(1000)@@(2000)
	pea	%zpc@@(0)@@(2000,%d0:w:2)
	pea	%zpc@@(0)@@(%d0:w:2)
	pea	%zpc@@(0)@@(2000)
	pea	([1000,%zpc],%d0:w:2,2000)
	pea	([1000,%zpc],%d0:w:2)
	pea	([1000,%zpc],2000)
	pea	([%zpc],%d0:w:2,2000)
	pea	([%zpc],%d0:w:2)
	pea	([%zpc],2000)

	| Program counter memory indirect preindexed
	pea	%pc@@(1000,%d0:w:2)@@(2000)
	pea	%pc@@(1000,%d0:w:2)@@(0)
	pea	%pc@@(%d0:w:2)@@(2000)
	pea	%pc@@(%d0:w:2)@@(0)
	pea	([1000,%pc,%d0:w:2],2000)
	pea	([1000,%d0:w:2,%pc],2000)
	pea	([1000,%d0,%pc],2000)
	pea	([1000,%a1,%pc],2000)
	pea	([1000,%pc,%a1],2000)
	pea	([1000,%a1:w:2,%pc],2000)
	pea	([1000,%pc,%d0:w:2])
	pea	([1000,%d0,%pc])
	pea	([1000,%a1,%pc])
	pea	([%pc,%d0:w:2],2000)
	pea	([%pc,%a0],2000)
	pea	([%pc,%d0:w:2])
	pea	([%d0,%pc])
	pea	%zpc@@(1000,%d0:w:2)@@(2000)
	pea	%zpc@@(1000,%d0:w:2)@@(0)
	pea	%zpc@@(%d0:w:2)@@(2000)
	pea	%zpc@@(%d0:w:2)@@(0)
	pea	([1000,%zpc,%d0:w:2],2000)
	pea	([1000,%d0:w:2,%zpc],2000)
	pea	([1000,%d0,%zpc],2000)
	pea	([1000,%a1,%zpc],2000)
	pea	([1000,%zpc,%a1],2000)
	pea	([1000,%a1:w:2,%zpc],2000)
	pea	([1000,%zpc,%d0:w:2])
	pea	([1000,%d0,%zpc])
	pea	([1000,%a1,%zpc])
	pea	([%zpc,%d0:w:2],2000)
	pea	([%zpc,%a0],2000)
	pea	([%zpc,%d0:w:2])
	pea	([%d0,%zpc])

	| Absolute short
	tstl	4
	tstl	4.w
	tstl	(4).w

	| Absolute long
	tstl	100000
	tstl	8.l
	tstl	(8).l

	| Immediate
	addib	&1,%d0
	addiw	&1,%d0
	addil	&1,%d0
	addqb	&1,%d0
@


1.1
log
@Initial revision
@
text
@@


1.1.2.1
log
@vendor-branch-i-fy GNU binutils (2.11.2) to facilitate an update
@
text
@@


1.1.1.1
log
@Import OpenBSD 3.3 source repository from CTM 3132 the first time
This opens an OpenBSD-mirabile (aka MirBSD) repository.

### MirBSD is:
# Copyright (c) 1982-2003 by Thorsten "mirabile" Glaser <x86@@ePost.de>
# Copyright © 1968-2003  The authors of And contributors to UNIX®, the
#       C Language, BSD/Berkeley Unix; 386BSD, NetBSD 1.1 and OpenBSD.
#
# Anyone who obtained a copy of this work is hereby permitted to freely use,
# distribute, modify, merge, sublicence, give away or sell it as long as the
# authors are given due credit and the following notice is retained:
#
# This work is provided "as is", with no explicit or implicit warranty what-
# soever. Use it only at your own risk. In no event may an author or contri-
# butor be held liable for any damage, directly or indirectly, that origina-
# ted through or is caused by creation or modification of this work.

MirBSD is my private tree. MirBSD does not differ very much from OpenBSD
and intentionally tracks OpenBSD. That's why it _is_ OpenBSD, just not the
official one. It's like with DarrenBSD.

At time of this writing, no advertising for MirBSD must be done,
because the advertising clause has not yet been sorted out.

http://templeofhate.com/tglaser/MirBSD/index.php
@
text
@@
