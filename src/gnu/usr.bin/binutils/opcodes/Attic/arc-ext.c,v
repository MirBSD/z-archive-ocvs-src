head	1.3;
access;
symbols
	binutils-2_15:1.1.2.2
	cvs-200406091940:1.1.1.2
	MIRBSD_7quater:1.2
	cvs-200405160640:1.1.1.1
	cvs-200401271800:1.1.1.1
	cvs-200401261630:1.1.1.1
	cvs-200401021645:1.1.1.1
	MIRBSD_7_ALPHA:1.2.0.6
	MIRBSD_7:1.2.0.4
	cvs-200312222040:1.1.1.1
	cvs-200312031730:1.1.1.1
	MIRBSD_7ter:1.2
	MIRBSD_7_DEV:1.2.0.2
	cvs-200310020700:1.1.1.1
	cvs-200309271030:1.1.1.1
	cvs-200309251530:1.1.1.1
	binutils_2_14:1.1.2.2
	binutils_2_11_2:1.1.2.1
	FSF:1.1.2
	cvs-200308302005:1.1.1.1
	cvs-200308171200:1.1.1.1
	ctm-3496:1.1.1.1
	ctm-3449:1.1.1.1
	ctm-3437:1.1.1.1
	cvs-200307191805:1.1.1.1
	ctm-3425:1.1.1.1
	cvs-200307091500:1.1.1.1
	ctm-3389:1.1.1.1
	cvs-200306291430:1.1.1.1
	ctm-3341:1.1.1.1
	MIRBSD_5:1.1.1.1
	cvs-200306082100:1.1.1.1
	ctm-3316:1.1.1.1
	ctm-3272:1.1.1.1
	ctm-3264:1.1.1.1
	cvs-200305071630:1.1.1.1
	MIRBSD_4:1.1.1.1
	ctm-3203:1.1.1.1
	cvs-20030410-1130:1.1.1.1
	ctm-3155:1.1.1.1
	ctm-3132:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.3
date	2004.08.11.21.26.13;	author tg;	state dead;
branches;
next	1.2;

1.2
date	2003.09.23.21.07.58;	author tg;	state Exp;
branches;
next	1.1;

1.1
date	2003.03.22.17.41.13;	author tg;	state Exp;
branches
	1.1.1.1
	1.1.2.1;
next	;

1.1.1.1
date	2003.03.22.17.41.13;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2004.06.09.20.31.53;	author tg;	state Exp;
branches;
next	;

1.1.2.1
date	2003.09.23.15.42.59;	author tg;	state Exp;
branches;
next	1.1.2.2;

1.1.2.2
date	2003.09.23.16.08.11;	author tg;	state Exp;
branches;
next	;


desc
@@


1.3
log
@remove old binutils
@
text
@/* ARC target-dependent stuff. Extension structure access functions
   Copyright 1995, 1997, 2000, 2001 Free Software Foundation, Inc.

   This file is part of GDB.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */

#include "sysdep.h"
#include <stdlib.h>
#include <stdio.h>
#include "bfd.h"
#include "arc-ext.h"
#include "libiberty.h"

/* Extension structure  */
static struct arcExtMap arc_extension_map;

/* Get the name of an extension instruction.  */

const char *
arcExtMap_instName(int opcode, int minor, int *flags)
{
    if (opcode == 3)
      {
	/* FIXME: ??? need to also check 0/1/2 in bit0 for (3f) brk/sleep/swi  */
	if (minor < 0x09 || minor == 0x3f)
	  return 0;
	else
	  opcode = 0x1f - 0x10 + minor - 0x09 + 1;
      }
    else
      if (opcode < 0x10)
	return 0;
    else
      opcode -= 0x10;
    if (!arc_extension_map.instructions[opcode])
      return 0;
    *flags = arc_extension_map.instructions[opcode]->flags;
    return arc_extension_map.instructions[opcode]->name;
}

/* Get the name of an extension core register.  */

const char *
arcExtMap_coreRegName(int value)
{
  if (value < 32)
    return 0;
  return (const char *) arc_extension_map.coreRegisters[value-32];
}

/* Get the name of an extension condition code.  */

const char *
arcExtMap_condCodeName(int value)
{
  if (value < 16)
    return 0;
  return (const char *) arc_extension_map.condCodes[value-16];
}

/* Get the name of an extension aux register.  */

const char *
arcExtMap_auxRegName(long address)
{
  /* walk the list of aux reg names and find the name  */
  struct ExtAuxRegister *r;

  for (r = arc_extension_map.auxRegisters; r; r = r->next) {
    if (r->address == address)
      return (const char *) r->name;
  }
  return 0;
}

/* Recursively free auxilliary register strcture pointers until
   the list is empty.  */

static void
clean_aux_registers(struct ExtAuxRegister *r)
{
  if (r -> next)
    {
      clean_aux_registers( r->next);
      free(r -> name);
      free(r -> next);
      r ->next = NULL;
    }
  else
    free(r -> name);
}

/* Free memory that has been allocated for the extensions.  */

static void
cleanup_ext_map(void)
{
  struct ExtAuxRegister *r;
  struct ExtInstruction *insn;
  int i;

  /* clean aux reg structure  */
  r = arc_extension_map.auxRegisters;
  if (r)
    {
      (clean_aux_registers(r));
      free(r);
    }

  /* clean instructions  */
  for (i = 0; i < NUM_EXT_INST; i++)
    {
      insn = arc_extension_map.instructions[i];
      if (insn)
	free(insn->name);
    }

  /* clean core reg struct  */
  for (i = 0; i < NUM_EXT_CORE; i++)
    {
      if (arc_extension_map.coreRegisters[i])
	free(arc_extension_map.coreRegisters[i]);
    }

  for (i = 0; i < NUM_EXT_COND; i++) {
    if (arc_extension_map.condCodes[i])
      free(arc_extension_map.condCodes[i]);
  }

  memset(&arc_extension_map, 0, sizeof(struct arcExtMap));
}

int
arcExtMap_add(void *base, unsigned long length)
{
  unsigned char *block = base;
  unsigned char *p = block;

  /* Clean up and reset everything if needed.  */
  cleanup_ext_map();

  while (p && p < (block + length))
    {
      /* p[0] == length of record
	 p[1] == type of record
	 For instructions:
	   p[2]  = opcode
	   p[3]  = minor opcode (if opcode == 3)
	   p[4]  = flags
	   p[5]+ = name
	 For core regs and condition codes:
	   p[2]  = value
	   p[3]+ = name
	 For aux regs:
	   p[2..5] = value
	   p[6]+   = name
	 (value is p[2]<<24|p[3]<<16|p[4]<<8|p[5])  */

      if (p[0] == 0)
	return -1;

      switch (p[1])
	{
	case EXT_INSTRUCTION:
	  {
	    char opcode = p[2];
	    char minor  = p[3];
	    char * insn_name = (char *) xmalloc(( (int)*p-5) * sizeof(char));
	    struct ExtInstruction * insn =
	      (struct ExtInstruction *) xmalloc(sizeof(struct ExtInstruction));

	    if (opcode==3)
	      opcode = 0x1f - 0x10 + minor - 0x09 + 1;
	    else
	      opcode -= 0x10;
	    insn -> flags = (char) *(p+4);
	    strcpy(insn_name, (p+5));
	    insn -> name = insn_name;
	    arc_extension_map.instructions[(int) opcode] = insn;
	  }
	  break;

	case EXT_CORE_REGISTER:
	  {
	    char * core_name = (char *) xmalloc(((int)*p-3) * sizeof(char));

	    strcpy(core_name, (p+3));
	    arc_extension_map.coreRegisters[p[2]-32] = core_name;
	  }
	  break;

	case EXT_COND_CODE:
	  {
	    char * cc_name = (char *) xmalloc( ((int)*p-3) * sizeof(char));
	    strcpy(cc_name, (p+3));
	    arc_extension_map.condCodes[p[2]-16] = cc_name;
	  }
	  break;

	case EXT_AUX_REGISTER:
	  {
	    /* trickier -- need to store linked list to these  */
	    struct ExtAuxRegister *newAuxRegister =
	      (struct ExtAuxRegister *)malloc(sizeof(struct ExtAuxRegister));
	    char * aux_name = (char *) xmalloc ( ((int)*p-6) * sizeof(char));

	    strcpy (aux_name, (p+6));
	    newAuxRegister->name = aux_name;
	    newAuxRegister->address = p[2]<<24 | p[3]<<16 | p[4]<<8  | p[5];
	    newAuxRegister->next = arc_extension_map.auxRegisters;
	    arc_extension_map.auxRegisters = newAuxRegister;
	  }
	  break;

	default:
	  return -1;

	}
      p += p[0]; /* move to next record  */
    }

  return 0;
}

/* Load hw extension descibed in .extArcMap ELF section.  */

void
build_ARC_extmap (text_bfd)
  bfd *text_bfd;
{
  char *arcExtMap;
  bfd_size_type count;
  asection *p;

  for (p = text_bfd->sections; p != NULL; p = p->next)
    if (!strcmp (p->name, ".arcextmap"))
      {
        count = p->_raw_size;
        arcExtMap = (char *) xmalloc (count);
        if (bfd_get_section_contents (text_bfd, p, (PTR) arcExtMap, 0, count))
          {
            arcExtMap_add ((PTR) arcExtMap, count);
            break;
          }
        free ((PTR) arcExtMap);
      }
}
@


1.2
log
@looks as if some sour wine (Federweiﬂer <german>, for an English
description see http://forum.leo.org/archiv/2002_11/04/20021104125717e_en.html)
could help me to bear the pain upgrading binutils to 2.14

todo:
 - test if this works at all
 - test if this works
 - test if nothing breaks
 - nuke all occurences of "false" and "true" in binutils (including gdb),
   see bfd.h "Poison" for reference
 - talk to the OpenBSD people, ask them if they could improve this
@
text
@@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/* ARC target-dependent stuff. Extension structure access functions 
d20 1
d33 1
a33 1
arcExtMap_instName(int opcode, int minor, int *flags) 
d35 1
a35 1
    if (opcode == 3) 
d57 1
a57 1
arcExtMap_coreRegName(int value) 
d67 1
a67 1
arcExtMap_condCodeName(int value) 
d92 1
a92 1
static void 
d102 1
a102 1
  else 
d105 1
a105 1
	      
d108 2
a109 2
static void 
cleanup_ext_map(void) 
d117 1
a117 1
  if (r) 
d122 1
a122 1
  
d124 1
a124 1
  for (i = 0; i < NUM_EXT_INST; i++) 
d130 1
a130 1
  
d132 1
a132 1
  for (i = 0; i < NUM_EXT_CORE; i++) 
d137 1
a137 1
  
d142 2
a143 2
  
  memset(&arc_extension_map, 0, sizeof(struct arcExtMap));  
d146 2
a147 2
int 
arcExtMap_add(void *base, unsigned long length) 
d151 1
a151 1
  
d155 1
a155 1
  while (p && p < (block + length)) 
d174 1
a174 1
      
d182 1
a182 1
	    struct ExtInstruction * insn = 
d184 1
a184 1
	    
d195 2
a196 2
	
	case EXT_CORE_REGISTER: 
d204 2
a205 2
	  
	case EXT_COND_CODE: 
d210 1
a210 1
	  }	
d212 2
a213 2
	  
	case EXT_AUX_REGISTER: 
d216 1
a216 1
	    struct ExtAuxRegister *newAuxRegister = 
d227 1
a227 1
	  
d230 1
a230 1
	  
d234 1
a234 1
  
@


1.1.2.1
log
@vendor-branch-i-fy GNU binutils (2.11.2) to facilitate an update
@
text
@@


1.1.2.2
log
@Import GNU binutils 2.14 from the Free Software Foundation
(in case the update goes FUBAR, it can be easily backed off)
@
text
@d1 1
a1 1
/* ARC target-dependent stuff. Extension structure access functions
a19 1
#include "sysdep.h"
d32 1
a32 1
arcExtMap_instName(int opcode, int minor, int *flags)
d34 1
a34 1
    if (opcode == 3)
d56 1
a56 1
arcExtMap_coreRegName(int value)
d66 1
a66 1
arcExtMap_condCodeName(int value)
d91 1
a91 1
static void
d101 1
a101 1
  else
d104 1
a104 1

d107 2
a108 2
static void
cleanup_ext_map(void)
d116 1
a116 1
  if (r)
d121 1
a121 1

d123 1
a123 1
  for (i = 0; i < NUM_EXT_INST; i++)
d129 1
a129 1

d131 1
a131 1
  for (i = 0; i < NUM_EXT_CORE; i++)
d136 1
a136 1

d141 2
a142 2

  memset(&arc_extension_map, 0, sizeof(struct arcExtMap));
d145 2
a146 2
int
arcExtMap_add(void *base, unsigned long length)
d150 1
a150 1

d154 1
a154 1
  while (p && p < (block + length))
d173 1
a173 1

d181 1
a181 1
	    struct ExtInstruction * insn =
d183 1
a183 1

d194 2
a195 2

	case EXT_CORE_REGISTER:
d203 2
a204 2

	case EXT_COND_CODE:
d209 1
a209 1
	  }
d211 2
a212 2

	case EXT_AUX_REGISTER:
d215 1
a215 1
	    struct ExtAuxRegister *newAuxRegister =
d226 1
a226 1

d229 1
a229 1

d233 1
a233 1

@


1.1.1.1
log
@Import OpenBSD 3.3 source repository from CTM 3132 the first time
This opens an OpenBSD-mirabile (aka MirBSD) repository.

### MirBSD is:
# Copyright (c) 1982-2003 by Thorsten "mirabile" Glaser <x86@@ePost.de>
# Copyright © 1968-2003  The authors of And contributors to UNIXÆ, the
#       C Language, BSD/Berkeley Unix; 386BSD, NetBSD 1.1 and OpenBSD.
#
# Anyone who obtained a copy of this work is hereby permitted to freely use,
# distribute, modify, merge, sublicence, give away or sell it as long as the
# authors are given due credit and the following notice is retained:
#
# This work is provided "as is", with no explicit or implicit warranty what-
# soever. Use it only at your own risk. In no event may an author or contri-
# butor be held liable for any damage, directly or indirectly, that origina-
# ted through or is caused by creation or modification of this work.

MirBSD is my private tree. MirBSD does not differ very much from OpenBSD
and intentionally tracks OpenBSD. That's why it _is_ OpenBSD, just not the
official one. It's like with DarrenBSD.

At time of this writing, no advertising for MirBSD must be done,
because the advertising clause has not yet been sorted out.

http://templeofhate.com/tglaser/MirBSD/index.php
@
text
@@


1.1.1.2
log
@Sync of src/gnu with OpenBSD (promised a long time ago)
@
text
@d1 1
a1 1
/* ARC target-dependent stuff. Extension structure access functions
a19 1
#include "sysdep.h"
d32 1
a32 1
arcExtMap_instName(int opcode, int minor, int *flags)
d34 1
a34 1
    if (opcode == 3)
d56 1
a56 1
arcExtMap_coreRegName(int value)
d66 1
a66 1
arcExtMap_condCodeName(int value)
d91 1
a91 1
static void
d101 1
a101 1
  else
d104 1
a104 1

d107 2
a108 2
static void
cleanup_ext_map(void)
d116 1
a116 1
  if (r)
d121 1
a121 1

d123 1
a123 1
  for (i = 0; i < NUM_EXT_INST; i++)
d129 1
a129 1

d131 1
a131 1
  for (i = 0; i < NUM_EXT_CORE; i++)
d136 1
a136 1

d141 2
a142 2

  memset(&arc_extension_map, 0, sizeof(struct arcExtMap));
d145 2
a146 2
int
arcExtMap_add(void *base, unsigned long length)
d150 1
a150 1

d154 1
a154 1
  while (p && p < (block + length))
d173 1
a173 1

d181 1
a181 1
	    struct ExtInstruction * insn =
d183 1
a183 1

d194 2
a195 2

	case EXT_CORE_REGISTER:
d203 2
a204 2

	case EXT_COND_CODE:
d209 1
a209 1
	  }
d211 2
a212 2

	case EXT_AUX_REGISTER:
d215 1
a215 1
	    struct ExtAuxRegister *newAuxRegister =
d226 1
a226 1

d229 1
a229 1

d233 1
a233 1

@

