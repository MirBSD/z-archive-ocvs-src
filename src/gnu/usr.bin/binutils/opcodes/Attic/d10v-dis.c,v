head	1.3;
access;
symbols
	binutils-2_15:1.1.2.2
	cvs-200406091940:1.1.1.2
	MIRBSD_7quater:1.2
	cvs-200405160640:1.1.1.1
	cvs-200401271800:1.1.1.1
	cvs-200401261630:1.1.1.1
	cvs-200401021645:1.1.1.1
	MIRBSD_7_ALPHA:1.2.0.6
	MIRBSD_7:1.2.0.4
	cvs-200312222040:1.1.1.1
	cvs-200312031730:1.1.1.1
	MIRBSD_7ter:1.2
	MIRBSD_7_DEV:1.2.0.2
	cvs-200310020700:1.1.1.1
	cvs-200309271030:1.1.1.1
	cvs-200309251530:1.1.1.1
	binutils_2_14:1.1.2.2
	binutils_2_11_2:1.1.2.1
	FSF:1.1.2
	cvs-200308302005:1.1.1.1
	cvs-200308171200:1.1.1.1
	ctm-3496:1.1.1.1
	ctm-3449:1.1.1.1
	ctm-3437:1.1.1.1
	cvs-200307191805:1.1.1.1
	ctm-3425:1.1.1.1
	cvs-200307091500:1.1.1.1
	ctm-3389:1.1.1.1
	cvs-200306291430:1.1.1.1
	ctm-3341:1.1.1.1
	MIRBSD_5:1.1.1.1
	cvs-200306082100:1.1.1.1
	ctm-3316:1.1.1.1
	ctm-3272:1.1.1.1
	ctm-3264:1.1.1.1
	cvs-200305071630:1.1.1.1
	MIRBSD_4:1.1.1.1
	ctm-3203:1.1.1.1
	cvs-20030410-1130:1.1.1.1
	ctm-3155:1.1.1.1
	ctm-3132:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.3
date	2004.08.11.21.26.31;	author tg;	state dead;
branches;
next	1.2;

1.2
date	2003.09.23.21.08.01;	author tg;	state Exp;
branches;
next	1.1;

1.1
date	2003.03.22.17.41.13;	author tg;	state Exp;
branches
	1.1.1.1
	1.1.2.1;
next	;

1.1.1.1
date	2003.03.22.17.41.13;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2004.06.09.20.31.58;	author tg;	state Exp;
branches;
next	;

1.1.2.1
date	2003.09.23.15.43.01;	author tg;	state Exp;
branches;
next	1.1.2.2;

1.1.2.2
date	2003.09.23.16.08.16;	author tg;	state Exp;
branches;
next	;


desc
@@


1.3
log
@remove old binutils
@
text
@/* Disassemble D10V instructions.
   Copyright 1996, 1997, 1998, 2000, 2001 Free Software Foundation, Inc.

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */

#include <stdio.h>

#include "sysdep.h"
#include "opcode/d10v.h"
#include "dis-asm.h"

/* The PC wraps at 18 bits, except for the segment number,
   so use this mask to keep the parts we want.  */
#define PC_MASK	0x0303FFFF

static void dis_2_short PARAMS ((unsigned long insn, bfd_vma memaddr,
				 struct disassemble_info *info, int order));
static void dis_long PARAMS ((unsigned long insn, bfd_vma memaddr,
			      struct disassemble_info *info));
static void print_operand
  PARAMS ((struct d10v_operand *, long unsigned int, struct d10v_opcode *,
	   bfd_vma, struct disassemble_info *));

int
print_insn_d10v (memaddr, info)
     bfd_vma memaddr;
     struct disassemble_info *info;
{
  int status;
  bfd_byte buffer[4];
  unsigned long insn;

  status = (*info->read_memory_func) (memaddr, buffer, 4, info);
  if (status != 0)
    {
      (*info->memory_error_func) (status, memaddr, info);
      return -1;
    }
  insn = bfd_getb32 (buffer);

  status = insn & FM11;
  switch (status)
    {
    case 0:
      dis_2_short (insn, memaddr, info, 2);
      break;
    case FM01:
      dis_2_short (insn, memaddr, info, 0);
      break;
    case FM10:
      dis_2_short (insn, memaddr, info, 1);
      break;
    case FM11:
      dis_long (insn, memaddr, info);
      break;
    }
  return 4;
}

static void
print_operand (oper, insn, op, memaddr, info)
     struct d10v_operand *oper;
     unsigned long insn;
     struct d10v_opcode *op;
     bfd_vma memaddr;
     struct disassemble_info *info;
{
  int num, shift;

  if (oper->flags == OPERAND_ATMINUS)
    {
      (*info->fprintf_func) (info->stream, "@@-");
      return;
    }
  if (oper->flags == OPERAND_MINUS)
    {
      (*info->fprintf_func) (info->stream, "-");
      return;
    }
  if (oper->flags == OPERAND_PLUS)
    {
      (*info->fprintf_func) (info->stream, "+");
      return;
    }
  if (oper->flags == OPERAND_ATSIGN)
    {
      (*info->fprintf_func) (info->stream, "@@");
      return;
    }
  if (oper->flags == OPERAND_ATPAR)
    {
      (*info->fprintf_func) (info->stream, "@@(");
      return;
    }

  shift = oper->shift;

  /* The LONG_L format shifts registers over by 15.  */
  if (op->format == LONG_L && (oper->flags & OPERAND_REG))
    shift += 15;

  num = (insn >> shift) & (0x7FFFFFFF >> (31 - oper->bits));

  if (oper->flags & OPERAND_REG)
    {
      int i;
      int match = 0;
      num += (oper->flags
	      & (OPERAND_GPR | OPERAND_FFLAG | OPERAND_CFLAG | OPERAND_CONTROL));
      if (oper->flags & (OPERAND_ACC0 | OPERAND_ACC1))
	num += num ? OPERAND_ACC1 : OPERAND_ACC0;
      for (i = 0; i < d10v_reg_name_cnt (); i++)
	{
	  if (num == (d10v_predefined_registers[i].value & ~ OPERAND_SP))
	    {
	      if (d10v_predefined_registers[i].pname)
		(*info->fprintf_func) (info->stream, "%s",
				       d10v_predefined_registers[i].pname);
	      else
		(*info->fprintf_func) (info->stream, "%s",
				       d10v_predefined_registers[i].name);
	      match = 1;
	      break;
	    }
	}
      if (match == 0)
	{
	  /* This would only get executed if a register was not in the
	     register table.  */
	  if (oper->flags & (OPERAND_ACC0 | OPERAND_ACC1))
	    (*info->fprintf_func) (info->stream, "a");
	  else if (oper->flags & OPERAND_CONTROL)
	    (*info->fprintf_func) (info->stream, "cr");
	  else if (oper->flags & OPERAND_REG)
	    (*info->fprintf_func) (info->stream, "r");
	  (*info->fprintf_func) (info->stream, "%d", num & REGISTER_MASK);
	}
    }
  else
    {
      /* Addresses are right-shifted by 2.  */
      if (oper->flags & OPERAND_ADDR)
	{
	  long max;
	  int neg = 0;
	  max = (1 << (oper->bits - 1));
	  if (num & max)
	    {
	      num = -num & ((1 << oper->bits) - 1);
	      neg = 1;
	    }
	  num = num << 2;
	  if (info->flags & INSN_HAS_RELOC)
	    (*info->print_address_func) (num & PC_MASK, info);
	  else
	    {
	      if (neg)
		(*info->print_address_func) ((memaddr - num) & PC_MASK, info);
	      else
		(*info->print_address_func) ((memaddr + num) & PC_MASK, info);
	    }
	}
      else
	{
	  if (oper->flags & OPERAND_SIGNED)
	    {
	      int max = (1 << (oper->bits - 1));
	      if (num & max)
		{
		  num = -num & ((1 << oper->bits) - 1);
		  (*info->fprintf_func) (info->stream, "-");
		}
	    }
	  (*info->fprintf_func) (info->stream, "0x%x", num);
	}
    }
}

static void
dis_long (insn, memaddr, info)
     unsigned long insn;
     bfd_vma memaddr;
     struct disassemble_info *info;
{
  int i;
  struct d10v_opcode *op = (struct d10v_opcode *) d10v_opcodes;
  struct d10v_operand *oper;
  int need_paren = 0;
  int match = 0;

  while (op->name)
    {
      if ((op->format & LONG_OPCODE) && ((op->mask & insn) == (unsigned long) op->opcode))
	{
	  match = 1;
	  (*info->fprintf_func) (info->stream, "%s\t", op->name);
	  for (i = 0; op->operands[i]; i++)
	    {
	      oper = (struct d10v_operand *) &d10v_operands[op->operands[i]];
	      if (oper->flags == OPERAND_ATPAR)
		need_paren = 1;
	      print_operand (oper, insn, op, memaddr, info);
	      if (op->operands[i + 1] && oper->bits
		  && d10v_operands[op->operands[i + 1]].flags != OPERAND_PLUS
		  && d10v_operands[op->operands[i + 1]].flags != OPERAND_MINUS)
		(*info->fprintf_func) (info->stream, ", ");
	    }
	  break;
	}
      op++;
    }

  if (!match)
    (*info->fprintf_func) (info->stream, ".long\t0x%08x", insn);

  if (need_paren)
    (*info->fprintf_func) (info->stream, ")");
}

static void
dis_2_short (insn, memaddr, info, order)
     unsigned long insn;
     bfd_vma memaddr;
     struct disassemble_info *info;
     int order;
{
  int i, j;
  unsigned int ins[2];
  struct d10v_opcode *op;
  int match, num_match = 0;
  struct d10v_operand *oper;
  int need_paren = 0;

  ins[0] = (insn & 0x3FFFFFFF) >> 15;
  ins[1] = insn & 0x00007FFF;

  for (j = 0; j < 2; j++)
    {
      op = (struct d10v_opcode *) d10v_opcodes;
      match = 0;
      while (op->name)
	{
	  if ((op->format & SHORT_OPCODE)
	      && ((op->mask & ins[j]) == (unsigned long) op->opcode))
	    {
	      (*info->fprintf_func) (info->stream, "%s\t", op->name);
	      for (i = 0; op->operands[i]; i++)
		{
		  oper = (struct d10v_operand *) &d10v_operands[op->operands[i]];
		  if (oper->flags == OPERAND_ATPAR)
		    need_paren = 1;
		  print_operand (oper, ins[j], op, memaddr, info);
		  if (op->operands[i + 1] && oper->bits
		      && d10v_operands[op->operands[i + 1]].flags != OPERAND_PLUS
		      && d10v_operands[op->operands[i + 1]].flags != OPERAND_MINUS)
		    (*info->fprintf_func) (info->stream, ", ");
		}
	      match = 1;
	      num_match++;
	      break;
	    }
	  op++;
	}
      if (!match)
	(*info->fprintf_func) (info->stream, "unknown");

      switch (order)
	{
	case 0:
	  (*info->fprintf_func) (info->stream, "\t->\t");
	  order = -1;
	  break;
	case 1:
	  (*info->fprintf_func) (info->stream, "\t<-\t");
	  order = -1;
	  break;
	case 2:
	  (*info->fprintf_func) (info->stream, "\t||\t");
	  order = -1;
	  break;
	default:
	  break;
	}
    }

  if (num_match == 0)
    (*info->fprintf_func) (info->stream, ".long\t0x%08x", insn);

  if (need_paren)
    (*info->fprintf_func) (info->stream, ")");
}
@


1.2
log
@looks as if some sour wine (Federweiﬂer <german>, for an English
description see http://forum.leo.org/archiv/2002_11/04/20021104125717e_en.html)
could help me to bear the pain upgrading binutils to 2.14

todo:
 - test if this works at all
 - test if this works
 - test if nothing breaks
 - nuke all occurences of "false" and "true" in binutils (including gdb),
   see bfd.h "Poison" for reference
 - talk to the OpenBSD people, ask them if they could improve this
@
text
@@


1.1
log
@Initial revision
@
text
@d2 1
a2 1
   Copyright 1996, 1997, 1998, 2000 Free Software Foundation, Inc.
a17 1

d21 1
a21 1
#include "opcode/d10v.h" 
d24 2
a25 2
/* the PC wraps at 18 bits, except for the segment number */
/* so use this mask to keep the parts we want */
d28 1
a28 1
static void dis_2_short PARAMS ((unsigned long insn, bfd_vma memaddr, 
d30 1
a30 1
static void dis_long PARAMS ((unsigned long insn, bfd_vma memaddr, 
d32 3
d36 1
a36 1
int 
d54 15
a68 14
  switch (status) {
  case 0:
    dis_2_short (insn, memaddr, info, 2);
    break;
  case FM01:
    dis_2_short (insn, memaddr, info, 0);
    break;
  case FM10:
    dis_2_short (insn, memaddr, info, 1);
    break;
  case FM11:
    dis_long (insn, memaddr, info);
    break;
  }
d84 1
a84 1
      (*info->fprintf_func) (info->stream, "@@-");   
d89 1
a89 1
      (*info->fprintf_func) (info->stream, "-");   
d94 1
a94 1
      (*info->fprintf_func) (info->stream, "+");   
d99 1
a99 1
      (*info->fprintf_func) (info->stream, "@@");   
d104 1
a104 1
      (*info->fprintf_func) (info->stream, "@@(");   
d110 1
a110 1
  /* the LONG_L format shifts registers over by 15 */
d119 1
a119 1
      int match=0;
d121 2
a122 2
	      & (OPERAND_GPR|OPERAND_FFLAG|OPERAND_CFLAG|OPERAND_CONTROL));
      if (oper->flags & (OPERAND_ACC0|OPERAND_ACC1))
d124 1
a124 1
      for (i = 0; i < d10v_reg_name_cnt(); i++)
d126 1
a126 1
	  if (num == d10v_predefined_registers[i].value)
d129 2
a130 1
		(*info->fprintf_func) (info->stream, "%s",d10v_predefined_registers[i].pname);
d132 3
a134 2
		(*info->fprintf_func) (info->stream, "%s",d10v_predefined_registers[i].name);
	      match=1;
d140 3
a142 3
	  /* this would only get executed if a register was not in the 
	     register table */
	  if (oper->flags & (OPERAND_ACC0|OPERAND_ACC1))
d146 1
a146 1
	  else if(oper->flags & OPERAND_REG)
d148 1
a148 1
	  (*info->fprintf_func) (info->stream, "%d",num);
d153 1
a153 1
      /* addresses are right-shifted by 2 */
d157 1
a157 1
	  int neg=0;
d161 1
a161 1
	      num = -num & ((1 << oper->bits)-1);
d164 1
a164 1
	  num = num<<2;
d182 1
a182 1
		  num = -num & ((1 << oper->bits)-1);
d186 1
a186 1
	  (*info->fprintf_func) (info->stream, "0x%x",num);
a190 1

d198 1
a198 2
  char buf[32];
  struct d10v_opcode *op = (struct d10v_opcode *)d10v_opcodes;
d205 1
a205 1
      if ((op->format & LONG_OPCODE) && ((op->mask & insn) == op->opcode))
d208 2
a209 2
	  (*info->fprintf_func) (info->stream, "%s\t", op->name);   
	  for ( i=0; op->operands[i]; i++)
d211 1
a211 1
	      oper = (struct d10v_operand *)&d10v_operands[op->operands[i]];
d215 4
a218 4
	      if (op->operands[i+1] && oper->bits &&
		  d10v_operands[op->operands[i+1]].flags != OPERAND_PLUS &&
		  d10v_operands[op->operands[i+1]].flags != OPERAND_MINUS)
		(*info->fprintf_func) (info->stream, ", ");   
d226 1
a226 1
    (*info->fprintf_func) (info->stream, ".long\t0x%08x",insn);   
d229 1
a229 1
    (*info->fprintf_func) (info->stream, ")");   
d239 1
a239 2
  int i,j;
  char astr[2][32];
d242 1
a242 2
  char buf[32];
  int match, num_match=0;
d249 1
a249 1
  for(j=0;j<2;j++)
d251 2
a252 2
      op = (struct d10v_opcode *)d10v_opcodes;
      match=0;
d255 2
a256 1
	  if ((op->format & SHORT_OPCODE) && ((op->mask & ins[j]) == op->opcode))
d258 2
a259 2
	      (*info->fprintf_func) (info->stream, "%s\t",op->name);   
	      for (i=0; op->operands[i]; i++)
d261 1
a261 1
		  oper = (struct d10v_operand *)&d10v_operands[op->operands[i]];
d265 4
a268 4
		  if (op->operands[i+1] && oper->bits && 
		  d10v_operands[op->operands[i+1]].flags != OPERAND_PLUS &&
		  d10v_operands[op->operands[i+1]].flags != OPERAND_MINUS)
		    (*info->fprintf_func) (info->stream, ", ");   
d277 1
a277 1
	(*info->fprintf_func) (info->stream, "unknown");   
d282 1
a282 1
	  (*info->fprintf_func) (info->stream, "\t->\t");   
d286 1
a286 1
	  (*info->fprintf_func) (info->stream, "\t<-\t");   
d290 1
a290 1
	  (*info->fprintf_func) (info->stream, "\t||\t");   
d299 1
a299 1
    (*info->fprintf_func) (info->stream, ".long\t0x%08x",insn);   
d302 1
a302 1
    (*info->fprintf_func) (info->stream, ")");   
@


1.1.2.1
log
@vendor-branch-i-fy GNU binutils (2.11.2) to facilitate an update
@
text
@@


1.1.2.2
log
@Import GNU binutils 2.14 from the Free Software Foundation
(in case the update goes FUBAR, it can be easily backed off)
@
text
@d2 1
a2 1
   Copyright 1996, 1997, 1998, 2000, 2001 Free Software Foundation, Inc.
d18 1
d22 1
a22 1
#include "opcode/d10v.h"
d25 2
a26 2
/* The PC wraps at 18 bits, except for the segment number,
   so use this mask to keep the parts we want.  */
d29 1
a29 1
static void dis_2_short PARAMS ((unsigned long insn, bfd_vma memaddr,
d31 1
a31 1
static void dis_long PARAMS ((unsigned long insn, bfd_vma memaddr,
a32 3
static void print_operand
  PARAMS ((struct d10v_operand *, long unsigned int, struct d10v_opcode *,
	   bfd_vma, struct disassemble_info *));
d34 1
a34 1
int
d52 14
a65 15
  switch (status)
    {
    case 0:
      dis_2_short (insn, memaddr, info, 2);
      break;
    case FM01:
      dis_2_short (insn, memaddr, info, 0);
      break;
    case FM10:
      dis_2_short (insn, memaddr, info, 1);
      break;
    case FM11:
      dis_long (insn, memaddr, info);
      break;
    }
d81 1
a81 1
      (*info->fprintf_func) (info->stream, "@@-");
d86 1
a86 1
      (*info->fprintf_func) (info->stream, "-");
d91 1
a91 1
      (*info->fprintf_func) (info->stream, "+");
d96 1
a96 1
      (*info->fprintf_func) (info->stream, "@@");
d101 1
a101 1
      (*info->fprintf_func) (info->stream, "@@(");
d107 1
a107 1
  /* The LONG_L format shifts registers over by 15.  */
d116 1
a116 1
      int match = 0;
d118 2
a119 2
	      & (OPERAND_GPR | OPERAND_FFLAG | OPERAND_CFLAG | OPERAND_CONTROL));
      if (oper->flags & (OPERAND_ACC0 | OPERAND_ACC1))
d121 1
a121 1
      for (i = 0; i < d10v_reg_name_cnt (); i++)
d123 1
a123 1
	  if (num == (d10v_predefined_registers[i].value & ~ OPERAND_SP))
d126 1
a126 2
		(*info->fprintf_func) (info->stream, "%s",
				       d10v_predefined_registers[i].pname);
d128 2
a129 3
		(*info->fprintf_func) (info->stream, "%s",
				       d10v_predefined_registers[i].name);
	      match = 1;
d135 3
a137 3
	  /* This would only get executed if a register was not in the
	     register table.  */
	  if (oper->flags & (OPERAND_ACC0 | OPERAND_ACC1))
d141 1
a141 1
	  else if (oper->flags & OPERAND_REG)
d143 1
a143 1
	  (*info->fprintf_func) (info->stream, "%d", num & REGISTER_MASK);
d148 1
a148 1
      /* Addresses are right-shifted by 2.  */
d152 1
a152 1
	  int neg = 0;
d156 1
a156 1
	      num = -num & ((1 << oper->bits) - 1);
d159 1
a159 1
	  num = num << 2;
d177 1
a177 1
		  num = -num & ((1 << oper->bits) - 1);
d181 1
a181 1
	  (*info->fprintf_func) (info->stream, "0x%x", num);
d186 1
d194 2
a195 1
  struct d10v_opcode *op = (struct d10v_opcode *) d10v_opcodes;
d202 1
a202 1
      if ((op->format & LONG_OPCODE) && ((op->mask & insn) == (unsigned long) op->opcode))
d205 2
a206 2
	  (*info->fprintf_func) (info->stream, "%s\t", op->name);
	  for (i = 0; op->operands[i]; i++)
d208 1
a208 1
	      oper = (struct d10v_operand *) &d10v_operands[op->operands[i]];
d212 4
a215 4
	      if (op->operands[i + 1] && oper->bits
		  && d10v_operands[op->operands[i + 1]].flags != OPERAND_PLUS
		  && d10v_operands[op->operands[i + 1]].flags != OPERAND_MINUS)
		(*info->fprintf_func) (info->stream, ", ");
d223 1
a223 1
    (*info->fprintf_func) (info->stream, ".long\t0x%08x", insn);
d226 1
a226 1
    (*info->fprintf_func) (info->stream, ")");
d236 2
a237 1
  int i, j;
d240 2
a241 1
  int match, num_match = 0;
d248 1
a248 1
  for (j = 0; j < 2; j++)
d250 2
a251 2
      op = (struct d10v_opcode *) d10v_opcodes;
      match = 0;
d254 1
a254 2
	  if ((op->format & SHORT_OPCODE)
	      && ((op->mask & ins[j]) == (unsigned long) op->opcode))
d256 2
a257 2
	      (*info->fprintf_func) (info->stream, "%s\t", op->name);
	      for (i = 0; op->operands[i]; i++)
d259 1
a259 1
		  oper = (struct d10v_operand *) &d10v_operands[op->operands[i]];
d263 4
a266 4
		  if (op->operands[i + 1] && oper->bits
		      && d10v_operands[op->operands[i + 1]].flags != OPERAND_PLUS
		      && d10v_operands[op->operands[i + 1]].flags != OPERAND_MINUS)
		    (*info->fprintf_func) (info->stream, ", ");
d275 1
a275 1
	(*info->fprintf_func) (info->stream, "unknown");
d280 1
a280 1
	  (*info->fprintf_func) (info->stream, "\t->\t");
d284 1
a284 1
	  (*info->fprintf_func) (info->stream, "\t<-\t");
d288 1
a288 1
	  (*info->fprintf_func) (info->stream, "\t||\t");
d297 1
a297 1
    (*info->fprintf_func) (info->stream, ".long\t0x%08x", insn);
d300 1
a300 1
    (*info->fprintf_func) (info->stream, ")");
@


1.1.1.1
log
@Import OpenBSD 3.3 source repository from CTM 3132 the first time
This opens an OpenBSD-mirabile (aka MirBSD) repository.

### MirBSD is:
# Copyright (c) 1982-2003 by Thorsten "mirabile" Glaser <x86@@ePost.de>
# Copyright © 1968-2003  The authors of And contributors to UNIXÆ, the
#       C Language, BSD/Berkeley Unix; 386BSD, NetBSD 1.1 and OpenBSD.
#
# Anyone who obtained a copy of this work is hereby permitted to freely use,
# distribute, modify, merge, sublicence, give away or sell it as long as the
# authors are given due credit and the following notice is retained:
#
# This work is provided "as is", with no explicit or implicit warranty what-
# soever. Use it only at your own risk. In no event may an author or contri-
# butor be held liable for any damage, directly or indirectly, that origina-
# ted through or is caused by creation or modification of this work.

MirBSD is my private tree. MirBSD does not differ very much from OpenBSD
and intentionally tracks OpenBSD. That's why it _is_ OpenBSD, just not the
official one. It's like with DarrenBSD.

At time of this writing, no advertising for MirBSD must be done,
because the advertising clause has not yet been sorted out.

http://templeofhate.com/tglaser/MirBSD/index.php
@
text
@@


1.1.1.2
log
@Sync of src/gnu with OpenBSD (promised a long time ago)
@
text
@d2 1
a2 1
   Copyright 1996, 1997, 1998, 2000, 2001 Free Software Foundation, Inc.
d18 1
d22 1
a22 1
#include "opcode/d10v.h"
d25 2
a26 2
/* The PC wraps at 18 bits, except for the segment number,
   so use this mask to keep the parts we want.  */
d29 1
a29 1
static void dis_2_short PARAMS ((unsigned long insn, bfd_vma memaddr,
d31 1
a31 1
static void dis_long PARAMS ((unsigned long insn, bfd_vma memaddr,
a32 3
static void print_operand
  PARAMS ((struct d10v_operand *, long unsigned int, struct d10v_opcode *,
	   bfd_vma, struct disassemble_info *));
d34 1
a34 1
int
d52 14
a65 15
  switch (status)
    {
    case 0:
      dis_2_short (insn, memaddr, info, 2);
      break;
    case FM01:
      dis_2_short (insn, memaddr, info, 0);
      break;
    case FM10:
      dis_2_short (insn, memaddr, info, 1);
      break;
    case FM11:
      dis_long (insn, memaddr, info);
      break;
    }
d81 1
a81 1
      (*info->fprintf_func) (info->stream, "@@-");
d86 1
a86 1
      (*info->fprintf_func) (info->stream, "-");
d91 1
a91 1
      (*info->fprintf_func) (info->stream, "+");
d96 1
a96 1
      (*info->fprintf_func) (info->stream, "@@");
d101 1
a101 1
      (*info->fprintf_func) (info->stream, "@@(");
d107 1
a107 1
  /* The LONG_L format shifts registers over by 15.  */
d116 1
a116 1
      int match = 0;
d118 2
a119 2
	      & (OPERAND_GPR | OPERAND_FFLAG | OPERAND_CFLAG | OPERAND_CONTROL));
      if (oper->flags & (OPERAND_ACC0 | OPERAND_ACC1))
d121 1
a121 1
      for (i = 0; i < d10v_reg_name_cnt (); i++)
d123 1
a123 1
	  if (num == (d10v_predefined_registers[i].value & ~ OPERAND_SP))
d126 1
a126 2
		(*info->fprintf_func) (info->stream, "%s",
				       d10v_predefined_registers[i].pname);
d128 2
a129 3
		(*info->fprintf_func) (info->stream, "%s",
				       d10v_predefined_registers[i].name);
	      match = 1;
d135 3
a137 3
	  /* This would only get executed if a register was not in the
	     register table.  */
	  if (oper->flags & (OPERAND_ACC0 | OPERAND_ACC1))
d141 1
a141 1
	  else if (oper->flags & OPERAND_REG)
d143 1
a143 1
	  (*info->fprintf_func) (info->stream, "%d", num & REGISTER_MASK);
d148 1
a148 1
      /* Addresses are right-shifted by 2.  */
d152 1
a152 1
	  int neg = 0;
d156 1
a156 1
	      num = -num & ((1 << oper->bits) - 1);
d159 1
a159 1
	  num = num << 2;
d177 1
a177 1
		  num = -num & ((1 << oper->bits) - 1);
d181 1
a181 1
	  (*info->fprintf_func) (info->stream, "0x%x", num);
d186 1
d194 2
a195 1
  struct d10v_opcode *op = (struct d10v_opcode *) d10v_opcodes;
d202 1
a202 1
      if ((op->format & LONG_OPCODE) && ((op->mask & insn) == (unsigned long) op->opcode))
d205 2
a206 2
	  (*info->fprintf_func) (info->stream, "%s\t", op->name);
	  for (i = 0; op->operands[i]; i++)
d208 1
a208 1
	      oper = (struct d10v_operand *) &d10v_operands[op->operands[i]];
d212 4
a215 4
	      if (op->operands[i + 1] && oper->bits
		  && d10v_operands[op->operands[i + 1]].flags != OPERAND_PLUS
		  && d10v_operands[op->operands[i + 1]].flags != OPERAND_MINUS)
		(*info->fprintf_func) (info->stream, ", ");
d223 1
a223 1
    (*info->fprintf_func) (info->stream, ".long\t0x%08x", insn);
d226 1
a226 1
    (*info->fprintf_func) (info->stream, ")");
d236 2
a237 1
  int i, j;
d240 2
a241 1
  int match, num_match = 0;
d248 1
a248 1
  for (j = 0; j < 2; j++)
d250 2
a251 2
      op = (struct d10v_opcode *) d10v_opcodes;
      match = 0;
d254 1
a254 2
	  if ((op->format & SHORT_OPCODE)
	      && ((op->mask & ins[j]) == (unsigned long) op->opcode))
d256 2
a257 2
	      (*info->fprintf_func) (info->stream, "%s\t", op->name);
	      for (i = 0; op->operands[i]; i++)
d259 1
a259 1
		  oper = (struct d10v_operand *) &d10v_operands[op->operands[i]];
d263 4
a266 4
		  if (op->operands[i + 1] && oper->bits
		      && d10v_operands[op->operands[i + 1]].flags != OPERAND_PLUS
		      && d10v_operands[op->operands[i + 1]].flags != OPERAND_MINUS)
		    (*info->fprintf_func) (info->stream, ", ");
d275 1
a275 1
	(*info->fprintf_func) (info->stream, "unknown");
d280 1
a280 1
	  (*info->fprintf_func) (info->stream, "\t->\t");
d284 1
a284 1
	  (*info->fprintf_func) (info->stream, "\t<-\t");
d288 1
a288 1
	  (*info->fprintf_func) (info->stream, "\t||\t");
d297 1
a297 1
    (*info->fprintf_func) (info->stream, ".long\t0x%08x", insn);
d300 1
a300 1
    (*info->fprintf_func) (info->stream, ")");
@

