head	1.3;
access;
symbols
	binutils-2_15:1.1.2.2
	cvs-200406091940:1.1.1.2
	MIRBSD_7quater:1.2
	cvs-200405160640:1.1.1.1
	cvs-200401271800:1.1.1.1
	cvs-200401261630:1.1.1.1
	cvs-200401021645:1.1.1.1
	MIRBSD_7_ALPHA:1.2.0.6
	MIRBSD_7:1.2.0.4
	cvs-200312222040:1.1.1.1
	cvs-200312031730:1.1.1.1
	MIRBSD_7ter:1.2
	MIRBSD_7_DEV:1.2.0.2
	cvs-200310020700:1.1.1.1
	cvs-200309271030:1.1.1.1
	cvs-200309251530:1.1.1.1
	binutils_2_14:1.1.2.2
	binutils_2_11_2:1.1.2.1
	FSF:1.1.2
	cvs-200308302005:1.1.1.1
	cvs-200308171200:1.1.1.1
	ctm-3496:1.1.1.1
	ctm-3449:1.1.1.1
	ctm-3437:1.1.1.1
	cvs-200307191805:1.1.1.1
	ctm-3425:1.1.1.1
	cvs-200307091500:1.1.1.1
	ctm-3389:1.1.1.1
	cvs-200306291430:1.1.1.1
	ctm-3341:1.1.1.1
	MIRBSD_5:1.1.1.1
	cvs-200306082100:1.1.1.1
	ctm-3316:1.1.1.1
	ctm-3272:1.1.1.1
	ctm-3264:1.1.1.1
	cvs-200305071630:1.1.1.1
	MIRBSD_4:1.1.1.1
	ctm-3203:1.1.1.1
	cvs-20030410-1130:1.1.1.1
	ctm-3155:1.1.1.1
	ctm-3132:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.3
date	2004.08.11.21.28.20;	author tg;	state dead;
branches;
next	1.2;

1.2
date	2003.09.23.21.08.09;	author tg;	state Exp;
branches;
next	1.1;

1.1
date	2003.03.22.17.41.14;	author tg;	state Exp;
branches
	1.1.1.1
	1.1.2.1;
next	;

1.1.1.1
date	2003.03.22.17.41.14;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2004.06.09.20.32.12;	author tg;	state Exp;
branches;
next	;

1.1.2.1
date	2003.09.23.15.43.08;	author tg;	state Exp;
branches;
next	1.1.2.2;

1.1.2.2
date	2003.09.23.16.08.24;	author tg;	state Exp;
branches;
next	;


desc
@@


1.3
log
@remove old binutils
@
text
@/* ia64-opc-x.c -- IA-64 `X' opcode table.
   Copyright 1998, 1999, 2000, 2002 Free Software Foundation, Inc.
   Contributed by Timothy Wall <twall@@cygnus.com>

   This file is part of GDB, GAS, and the GNU binutils.

   GDB, GAS, and the GNU binutils are free software; you can redistribute
   them and/or modify them under the terms of the GNU General Public
   License as published by the Free Software Foundation; either version
   2, or (at your option) any later version.

   GDB, GAS, and the GNU binutils are distributed in the hope that they
   will be useful, but WITHOUT ANY WARRANTY; without even the implied
   warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See
   the GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this file; see the file COPYING.  If not, write to the
   Free Software Foundation, 59 Temple Place - Suite 330, Boston, MA
   02111-1307, USA.  */

#include "ia64-opc.h"

/* Identify the specific X-unit type.  */
#define X0      IA64_TYPE_X, 0
#define X	IA64_TYPE_X, 1

/* Instruction bit fields:  */
#define bBtype(x)	(((ia64_insn) ((x) & 0x7)) << 6)
#define bD(x)		(((ia64_insn) ((x) & 0x1)) << 35)
#define bPa(x)		(((ia64_insn) ((x) & 0x1)) << 12)
#define bPr(x)		(((ia64_insn) ((x) & 0x3f)) << 0)
#define bVc(x)		(((ia64_insn) ((x) & 0x1)) << 20)
#define bWha(x)		(((ia64_insn) ((x) & 0x3)) << 33)
#define bX3(x)		(((ia64_insn) ((x) & 0x7)) << 33)
#define bX6(x)		(((ia64_insn) ((x) & 0x3f)) << 27)
#define bY(x)		(((ia64_insn) ((x) & 0x1)) << 26)

#define mBtype		bBtype (-1)
#define mD		bD (-1)
#define mPa		bPa (-1)
#define mPr		bPr (-1)
#define mVc             bVc (-1)
#define mWha		bWha (-1)
#define mX3             bX3 (-1)
#define mX6		bX6 (-1)
#define mY		bY (-1)

#define OpX3X6(a,b,c)		(bOp (a) | bX3 (b) | bX6(c)), \
				(mOp | mX3 | mX6)
#define OpX3X6Y(a,b,c,d)	(bOp (a) | bX3 (b) | bX6(c) | bY(d)), \
				(mOp | mX3 | mX6 | mY)
#define OpVc(a,b)		(bOp (a) | bVc (b)), (mOp | mVc)
#define OpPaWhaD(a,b,c,d) \
	(bOp (a) | bPa (b) | bWha (c) | bD (d)), (mOp | mPa | mWha | mD)
#define OpBtypePaWhaD(a,b,c,d,e) \
	(bOp (a) | bBtype (b) | bPa (c) | bWha (d) | bD (e)), \
	(mOp | mBtype | mPa | mWha | mD)
#define OpBtypePaWhaDPr(a,b,c,d,e,f) \
	(bOp (a) | bBtype (b) | bPa (c) | bWha (d) | bD (e) | bPr (f)), \
	(mOp | mBtype | mPa | mWha | mD | mPr)

struct ia64_opcode ia64_opcodes_x[] =
  {
    {"break.x",	X0, OpX3X6 (0, 0, 0x00), {IMMU62}, 0, 0, NULL},
    {"nop.x",	X0, OpX3X6Y (0, 0, 0x01, 0), {IMMU62}, 0, 0, NULL},
    {"hint.x",	X0, OpX3X6Y (0, 0, 0x01, 1), {IMMU62}, 0, 0, NULL},
    {"movl",	X,  OpVc (6, 0), {R1, IMMU64}, 0, 0, NULL},
#define BRL(a,b) \
      X0, OpBtypePaWhaDPr (0xC, 0, a, 0, b, 0), {TGT64}, PSEUDO, 0, NULL
    {"brl.few",         BRL (0, 0)},
    {"brl",             BRL (0, 0)},
    {"brl.few.clr",	BRL (0, 1)},
    {"brl.clr",		BRL (0, 1)},
    {"brl.many",	BRL (1, 0)},
    {"brl.many.clr",	BRL (1, 1)},
#undef BRL
#define BRL(a,b,c) \
      X0, OpBtypePaWhaD (0xC, 0, a, b, c), {TGT64}, 0, 0, NULL
#define BRLP(a,b,c) \
      X0, OpBtypePaWhaD (0xC, 0, a, b, c), {TGT64}, PSEUDO, 0, NULL
    {"brl.cond.sptk.few",	BRL (0, 0, 0)},
    {"brl.cond.sptk",		BRLP (0, 0, 0)},
    {"brl.cond.sptk.few.clr",	BRL (0, 0, 1)},
    {"brl.cond.sptk.clr",	BRLP (0, 0, 1)},
    {"brl.cond.spnt.few",	BRL (0, 1, 0)},
    {"brl.cond.spnt",		BRLP (0, 1, 0)},
    {"brl.cond.spnt.few.clr",	BRL (0, 1, 1)},
    {"brl.cond.spnt.clr",	BRLP (0, 1, 1)},
    {"brl.cond.dptk.few",	BRL (0, 2, 0)},
    {"brl.cond.dptk",		BRLP (0, 2, 0)},
    {"brl.cond.dptk.few.clr",	BRL (0, 2, 1)},
    {"brl.cond.dptk.clr",	BRLP (0, 2, 1)},
    {"brl.cond.dpnt.few",	BRL (0, 3, 0)},
    {"brl.cond.dpnt",		BRLP (0, 3, 0)},
    {"brl.cond.dpnt.few.clr",	BRL (0, 3, 1)},
    {"brl.cond.dpnt.clr",	BRLP (0, 3, 1)},
    {"brl.cond.sptk.many",	BRL (1, 0, 0)},
    {"brl.cond.sptk.many.clr",	BRL (1, 0, 1)},
    {"brl.cond.spnt.many",	BRL (1, 1, 0)},
    {"brl.cond.spnt.many.clr",	BRL (1, 1, 1)},
    {"brl.cond.dptk.many",	BRL (1, 2, 0)},
    {"brl.cond.dptk.many.clr",	BRL (1, 2, 1)},
    {"brl.cond.dpnt.many",	BRL (1, 3, 0)},
    {"brl.cond.dpnt.many.clr",	BRL (1, 3, 1)},
    {"brl.sptk.few",		BRL (0, 0, 0)},
    {"brl.sptk",		BRLP (0, 0, 0)},
    {"brl.sptk.few.clr",	BRL (0, 0, 1)},
    {"brl.sptk.clr",		BRLP (0, 0, 1)},
    {"brl.spnt.few",		BRL (0, 1, 0)},
    {"brl.spnt",		BRLP (0, 1, 0)},
    {"brl.spnt.few.clr",	BRL (0, 1, 1)},
    {"brl.spnt.clr",		BRLP (0, 1, 1)},
    {"brl.dptk.few",		BRL (0, 2, 0)},
    {"brl.dptk",		BRLP (0, 2, 0)},
    {"brl.dptk.few.clr",	BRL (0, 2, 1)},
    {"brl.dptk.clr",		BRLP (0, 2, 1)},
    {"brl.dpnt.few",		BRL (0, 3, 0)},
    {"brl.dpnt",		BRLP (0, 3, 0)},
    {"brl.dpnt.few.clr",	BRL (0, 3, 1)},
    {"brl.dpnt.clr",		BRLP (0, 3, 1)},
    {"brl.sptk.many",		BRL (1, 0, 0)},
    {"brl.sptk.many.clr",	BRL (1, 0, 1)},
    {"brl.spnt.many",		BRL (1, 1, 0)},
    {"brl.spnt.many.clr",	BRL (1, 1, 1)},
    {"brl.dptk.many",		BRL (1, 2, 0)},
    {"brl.dptk.many.clr",	BRL (1, 2, 1)},
    {"brl.dpnt.many",		BRL (1, 3, 0)},
    {"brl.dpnt.many.clr",	BRL (1, 3, 1)},
#undef BRL
#undef BRLP
#define BRL(a,b,c) X, OpPaWhaD (0xD, a, b, c), {B1, TGT64}, 0, 0, NULL
#define BRLP(a,b,c) X, OpPaWhaD (0xD, a, b, c), {B1, TGT64}, PSEUDO, 0, NULL
    {"brl.call.sptk.few",	BRL (0, 0, 0)},
    {"brl.call.sptk",		BRLP (0, 0, 0)},
    {"brl.call.sptk.few.clr",	BRL (0, 0, 1)},
    {"brl.call.sptk.clr",	BRLP (0, 0, 1)},
    {"brl.call.spnt.few",	BRL (0, 1, 0)},
    {"brl.call.spnt",		BRLP (0, 1, 0)},
    {"brl.call.spnt.few.clr",	BRL (0, 1, 1)},
    {"brl.call.spnt.clr",	BRLP (0, 1, 1)},
    {"brl.call.dptk.few",	BRL (0, 2, 0)},
    {"brl.call.dptk",		BRLP (0, 2, 0)},
    {"brl.call.dptk.few.clr",	BRL (0, 2, 1)},
    {"brl.call.dptk.clr",	BRLP (0, 2, 1)},
    {"brl.call.dpnt.few",	BRL (0, 3, 0)},
    {"brl.call.dpnt",		BRLP (0, 3, 0)},
    {"brl.call.dpnt.few.clr",	BRL (0, 3, 1)},
    {"brl.call.dpnt.clr",	BRLP (0, 3, 1)},
    {"brl.call.sptk.many",	BRL (1, 0, 0)},
    {"brl.call.sptk.many.clr",	BRL (1, 0, 1)},
    {"brl.call.spnt.many",	BRL (1, 1, 0)},
    {"brl.call.spnt.many.clr",	BRL (1, 1, 1)},
    {"brl.call.dptk.many",	BRL (1, 2, 0)},
    {"brl.call.dptk.many.clr",	BRL (1, 2, 1)},
    {"brl.call.dpnt.many",	BRL (1, 3, 0)},
    {"brl.call.dpnt.many.clr",	BRL (1, 3, 1)},
#undef BRL
#undef BRLP
    {NULL, 0, 0, 0, 0, {0}, 0, 0, NULL}
  };

#undef X0
#undef X

#undef bBtype
#undef bD
#undef bPa
#undef bPr
#undef bVc
#undef bWha
#undef bX3
#undef bX6

#undef mBtype
#undef mD
#undef mPa
#undef mPr
#undef mVc
#undef mWha
#undef mX3
#undef mX6

#undef OpX3X6
#undef OpVc
#undef OpPaWhaD
#undef OpBtypePaWhaD
#undef OpBtypePaWhaDPr
@


1.2
log
@looks as if some sour wine (Federweißer <german>, for an English
description see http://forum.leo.org/archiv/2002_11/04/20021104125717e_en.html)
could help me to bear the pain upgrading binutils to 2.14

todo:
 - test if this works at all
 - test if this works
 - test if nothing breaks
 - nuke all occurences of "false" and "true" in binutils (including gdb),
   see bfd.h "Poison" for reference
 - talk to the OpenBSD people, ask them if they could improve this
@
text
@@


1.1
log
@Initial revision
@
text
@d2 1
a2 1
   Copyright 1998, 1999, 2000 Free Software Foundation, Inc.
d24 1
a24 1
/* identify the specific X-unit type */
d28 1
a28 1
/* instruction bit fields: */
d37 1
d47 1
d51 2
d65 4
a68 3
    {"break.x", X0, OpX3X6 (0, 0, 0x00), {IMMU62}},
    {"nop.x",   X0, OpX3X6 (0, 0, 0x01), {IMMU62}},
    {"movl",	X,  OpVc (6, 0), {R1, IMMU64}},
d70 7
a76 7
      X0, OpBtypePaWhaDPr (0xC, 0, a, 0, b, 0), {TGT64}, 0
    {"brl.few",         BRL (0, 0) | PSEUDO},
    {"brl",             BRL (0, 0) | PSEUDO},
    {"brl.few.clr",	BRL (0, 1) | PSEUDO},
    {"brl.clr",		BRL (0, 1) | PSEUDO},
    {"brl.many",	BRL (1, 0) | PSEUDO},
    {"brl.many.clr",	BRL (1, 1) | PSEUDO},
d79 3
a81 1
      X0, OpBtypePaWhaD (0xC, 0, a, b, c), {TGT64}, 0
d83 1
a83 1
    {"brl.cond.sptk",		BRL (0, 0, 0) | PSEUDO},
d85 1
a85 1
    {"brl.cond.sptk.clr",	BRL (0, 0, 1) | PSEUDO},
d87 1
a87 1
    {"brl.cond.spnt",		BRL (0, 1, 0) | PSEUDO},
d89 1
a89 1
    {"brl.cond.spnt.clr",	BRL (0, 1, 1) | PSEUDO},
d91 1
a91 1
    {"brl.cond.dptk",		BRL (0, 2, 0) | PSEUDO},
d93 1
a93 1
    {"brl.cond.dptk.clr",	BRL (0, 2, 1) | PSEUDO},
d95 1
a95 1
    {"brl.cond.dpnt",		BRL (0, 3, 0) | PSEUDO},
d97 1
a97 1
    {"brl.cond.dpnt.clr",	BRL (0, 3, 1) | PSEUDO},
d107 1
a107 1
    {"brl.sptk",		BRL (0, 0, 0) | PSEUDO},
d109 1
a109 1
    {"brl.sptk.clr",		BRL (0, 0, 1) | PSEUDO},
d111 1
a111 1
    {"brl.spnt",		BRL (0, 1, 0) | PSEUDO},
d113 1
a113 1
    {"brl.spnt.clr",		BRL (0, 1, 1) | PSEUDO},
d115 1
a115 1
    {"brl.dptk",		BRL (0, 2, 0) | PSEUDO},
d117 1
a117 1
    {"brl.dptk.clr",		BRL (0, 2, 1) | PSEUDO},
d119 1
a119 1
    {"brl.dpnt",		BRL (0, 3, 0) | PSEUDO},
d121 1
a121 1
    {"brl.dpnt.clr",		BRL (0, 3, 1) | PSEUDO},
d131 3
a133 1
#define BRL(a,b,c) X, OpPaWhaD (0xD, a, b, c), {B1, TGT64}, 0
d135 1
a135 1
    {"brl.call.sptk",		BRL (0, 0, 0) | PSEUDO},
d137 1
a137 1
    {"brl.call.sptk.clr",	BRL (0, 0, 1) | PSEUDO},
d139 1
a139 1
    {"brl.call.spnt",		BRL (0, 1, 0) | PSEUDO},
d141 1
a141 1
    {"brl.call.spnt.clr",	BRL (0, 1, 1) | PSEUDO},
d143 1
a143 1
    {"brl.call.dptk",		BRL (0, 2, 0) | PSEUDO},
d145 1
a145 1
    {"brl.call.dptk.clr",	BRL (0, 2, 1) | PSEUDO},
d147 1
a147 1
    {"brl.call.dpnt",		BRL (0, 3, 0) | PSEUDO},
d149 1
a149 1
    {"brl.call.dpnt.clr",	BRL (0, 3, 1) | PSEUDO},
d159 2
a160 1
    {0}
@


1.1.2.1
log
@vendor-branch-i-fy GNU binutils (2.11.2) to facilitate an update
@
text
@@


1.1.2.2
log
@Import GNU binutils 2.14 from the Free Software Foundation
(in case the update goes FUBAR, it can be easily backed off)
@
text
@d2 1
a2 1
   Copyright 1998, 1999, 2000, 2002 Free Software Foundation, Inc.
d24 1
a24 1
/* Identify the specific X-unit type.  */
d28 1
a28 1
/* Instruction bit fields:  */
a36 1
#define bY(x)		(((ia64_insn) ((x) & 0x1)) << 26)
a45 1
#define mY		bY (-1)
a48 2
#define OpX3X6Y(a,b,c,d)	(bOp (a) | bX3 (b) | bX6(c) | bY(d)), \
				(mOp | mX3 | mX6 | mY)
d61 3
a63 4
    {"break.x",	X0, OpX3X6 (0, 0, 0x00), {IMMU62}, 0, 0, NULL},
    {"nop.x",	X0, OpX3X6Y (0, 0, 0x01, 0), {IMMU62}, 0, 0, NULL},
    {"hint.x",	X0, OpX3X6Y (0, 0, 0x01, 1), {IMMU62}, 0, 0, NULL},
    {"movl",	X,  OpVc (6, 0), {R1, IMMU64}, 0, 0, NULL},
d65 7
a71 7
      X0, OpBtypePaWhaDPr (0xC, 0, a, 0, b, 0), {TGT64}, PSEUDO, 0, NULL
    {"brl.few",         BRL (0, 0)},
    {"brl",             BRL (0, 0)},
    {"brl.few.clr",	BRL (0, 1)},
    {"brl.clr",		BRL (0, 1)},
    {"brl.many",	BRL (1, 0)},
    {"brl.many.clr",	BRL (1, 1)},
d74 1
a74 3
      X0, OpBtypePaWhaD (0xC, 0, a, b, c), {TGT64}, 0, 0, NULL
#define BRLP(a,b,c) \
      X0, OpBtypePaWhaD (0xC, 0, a, b, c), {TGT64}, PSEUDO, 0, NULL
d76 1
a76 1
    {"brl.cond.sptk",		BRLP (0, 0, 0)},
d78 1
a78 1
    {"brl.cond.sptk.clr",	BRLP (0, 0, 1)},
d80 1
a80 1
    {"brl.cond.spnt",		BRLP (0, 1, 0)},
d82 1
a82 1
    {"brl.cond.spnt.clr",	BRLP (0, 1, 1)},
d84 1
a84 1
    {"brl.cond.dptk",		BRLP (0, 2, 0)},
d86 1
a86 1
    {"brl.cond.dptk.clr",	BRLP (0, 2, 1)},
d88 1
a88 1
    {"brl.cond.dpnt",		BRLP (0, 3, 0)},
d90 1
a90 1
    {"brl.cond.dpnt.clr",	BRLP (0, 3, 1)},
d100 1
a100 1
    {"brl.sptk",		BRLP (0, 0, 0)},
d102 1
a102 1
    {"brl.sptk.clr",		BRLP (0, 0, 1)},
d104 1
a104 1
    {"brl.spnt",		BRLP (0, 1, 0)},
d106 1
a106 1
    {"brl.spnt.clr",		BRLP (0, 1, 1)},
d108 1
a108 1
    {"brl.dptk",		BRLP (0, 2, 0)},
d110 1
a110 1
    {"brl.dptk.clr",		BRLP (0, 2, 1)},
d112 1
a112 1
    {"brl.dpnt",		BRLP (0, 3, 0)},
d114 1
a114 1
    {"brl.dpnt.clr",		BRLP (0, 3, 1)},
d124 1
a124 3
#undef BRLP
#define BRL(a,b,c) X, OpPaWhaD (0xD, a, b, c), {B1, TGT64}, 0, 0, NULL
#define BRLP(a,b,c) X, OpPaWhaD (0xD, a, b, c), {B1, TGT64}, PSEUDO, 0, NULL
d126 1
a126 1
    {"brl.call.sptk",		BRLP (0, 0, 0)},
d128 1
a128 1
    {"brl.call.sptk.clr",	BRLP (0, 0, 1)},
d130 1
a130 1
    {"brl.call.spnt",		BRLP (0, 1, 0)},
d132 1
a132 1
    {"brl.call.spnt.clr",	BRLP (0, 1, 1)},
d134 1
a134 1
    {"brl.call.dptk",		BRLP (0, 2, 0)},
d136 1
a136 1
    {"brl.call.dptk.clr",	BRLP (0, 2, 1)},
d138 1
a138 1
    {"brl.call.dpnt",		BRLP (0, 3, 0)},
d140 1
a140 1
    {"brl.call.dpnt.clr",	BRLP (0, 3, 1)},
d150 1
a150 2
#undef BRLP
    {NULL, 0, 0, 0, 0, {0}, 0, 0, NULL}
@


1.1.1.1
log
@Import OpenBSD 3.3 source repository from CTM 3132 the first time
This opens an OpenBSD-mirabile (aka MirBSD) repository.

### MirBSD is:
# Copyright (c) 1982-2003 by Thorsten "mirabile" Glaser <x86@@ePost.de>
# Copyright © 1968-2003  The authors of And contributors to UNIX®, the
#       C Language, BSD/Berkeley Unix; 386BSD, NetBSD 1.1 and OpenBSD.
#
# Anyone who obtained a copy of this work is hereby permitted to freely use,
# distribute, modify, merge, sublicence, give away or sell it as long as the
# authors are given due credit and the following notice is retained:
#
# This work is provided "as is", with no explicit or implicit warranty what-
# soever. Use it only at your own risk. In no event may an author or contri-
# butor be held liable for any damage, directly or indirectly, that origina-
# ted through or is caused by creation or modification of this work.

MirBSD is my private tree. MirBSD does not differ very much from OpenBSD
and intentionally tracks OpenBSD. That's why it _is_ OpenBSD, just not the
official one. It's like with DarrenBSD.

At time of this writing, no advertising for MirBSD must be done,
because the advertising clause has not yet been sorted out.

http://templeofhate.com/tglaser/MirBSD/index.php
@
text
@@


1.1.1.2
log
@Sync of src/gnu with OpenBSD (promised a long time ago)
@
text
@d2 1
a2 1
   Copyright 1998, 1999, 2000, 2002 Free Software Foundation, Inc.
d24 1
a24 1
/* Identify the specific X-unit type.  */
d28 1
a28 1
/* Instruction bit fields:  */
a36 1
#define bY(x)		(((ia64_insn) ((x) & 0x1)) << 26)
a45 1
#define mY		bY (-1)
a48 2
#define OpX3X6Y(a,b,c,d)	(bOp (a) | bX3 (b) | bX6(c) | bY(d)), \
				(mOp | mX3 | mX6 | mY)
d61 3
a63 4
    {"break.x",	X0, OpX3X6 (0, 0, 0x00), {IMMU62}, 0, 0, NULL},
    {"nop.x",	X0, OpX3X6Y (0, 0, 0x01, 0), {IMMU62}, 0, 0, NULL},
    {"hint.x",	X0, OpX3X6Y (0, 0, 0x01, 1), {IMMU62}, 0, 0, NULL},
    {"movl",	X,  OpVc (6, 0), {R1, IMMU64}, 0, 0, NULL},
d65 7
a71 7
      X0, OpBtypePaWhaDPr (0xC, 0, a, 0, b, 0), {TGT64}, PSEUDO, 0, NULL
    {"brl.few",         BRL (0, 0)},
    {"brl",             BRL (0, 0)},
    {"brl.few.clr",	BRL (0, 1)},
    {"brl.clr",		BRL (0, 1)},
    {"brl.many",	BRL (1, 0)},
    {"brl.many.clr",	BRL (1, 1)},
d74 1
a74 3
      X0, OpBtypePaWhaD (0xC, 0, a, b, c), {TGT64}, 0, 0, NULL
#define BRLP(a,b,c) \
      X0, OpBtypePaWhaD (0xC, 0, a, b, c), {TGT64}, PSEUDO, 0, NULL
d76 1
a76 1
    {"brl.cond.sptk",		BRLP (0, 0, 0)},
d78 1
a78 1
    {"brl.cond.sptk.clr",	BRLP (0, 0, 1)},
d80 1
a80 1
    {"brl.cond.spnt",		BRLP (0, 1, 0)},
d82 1
a82 1
    {"brl.cond.spnt.clr",	BRLP (0, 1, 1)},
d84 1
a84 1
    {"brl.cond.dptk",		BRLP (0, 2, 0)},
d86 1
a86 1
    {"brl.cond.dptk.clr",	BRLP (0, 2, 1)},
d88 1
a88 1
    {"brl.cond.dpnt",		BRLP (0, 3, 0)},
d90 1
a90 1
    {"brl.cond.dpnt.clr",	BRLP (0, 3, 1)},
d100 1
a100 1
    {"brl.sptk",		BRLP (0, 0, 0)},
d102 1
a102 1
    {"brl.sptk.clr",		BRLP (0, 0, 1)},
d104 1
a104 1
    {"brl.spnt",		BRLP (0, 1, 0)},
d106 1
a106 1
    {"brl.spnt.clr",		BRLP (0, 1, 1)},
d108 1
a108 1
    {"brl.dptk",		BRLP (0, 2, 0)},
d110 1
a110 1
    {"brl.dptk.clr",		BRLP (0, 2, 1)},
d112 1
a112 1
    {"brl.dpnt",		BRLP (0, 3, 0)},
d114 1
a114 1
    {"brl.dpnt.clr",		BRLP (0, 3, 1)},
d124 1
a124 3
#undef BRLP
#define BRL(a,b,c) X, OpPaWhaD (0xD, a, b, c), {B1, TGT64}, 0, 0, NULL
#define BRLP(a,b,c) X, OpPaWhaD (0xD, a, b, c), {B1, TGT64}, PSEUDO, 0, NULL
d126 1
a126 1
    {"brl.call.sptk",		BRLP (0, 0, 0)},
d128 1
a128 1
    {"brl.call.sptk.clr",	BRLP (0, 0, 1)},
d130 1
a130 1
    {"brl.call.spnt",		BRLP (0, 1, 0)},
d132 1
a132 1
    {"brl.call.spnt.clr",	BRLP (0, 1, 1)},
d134 1
a134 1
    {"brl.call.dptk",		BRLP (0, 2, 0)},
d136 1
a136 1
    {"brl.call.dptk.clr",	BRLP (0, 2, 1)},
d138 1
a138 1
    {"brl.call.dpnt",		BRLP (0, 3, 0)},
d140 1
a140 1
    {"brl.call.dpnt.clr",	BRLP (0, 3, 1)},
d150 1
a150 2
#undef BRLP
    {NULL, 0, 0, 0, 0, {0}, 0, 0, NULL}
@

