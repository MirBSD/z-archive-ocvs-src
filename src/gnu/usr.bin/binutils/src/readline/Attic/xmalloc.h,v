head	1.3;
access;
symbols
	MIRBSD_XP_MIRPPC:1.2.0.4
	MIRBSD_XP_SPARC_BASE:1.2
	MIRBSD_XP_SPARC:1.2.0.2
	testing_SYNC_D:1.1.3.2
	testing_SYNC_C:1.1.3.2
	testing_SYNC_B:1.1.3.1
	testing_SYNC_A:1.1.3.1
	tg:1.1.3;
locks; strict;
comment	@ * @;


1.3
date	2004.11.30.20.54.11;	author tg;	state dead;
branches;
next	1.2;

1.2
date	2004.09.16.22.28.25;	author tg;	state Exp;
branches;
next	1.1;

1.1
date	2004.08.11.20.42.32;	author tg;	state Exp;
branches
	1.1.3.1;
next	;

1.1.3.1
date	2004.08.11.20.42.32;	author tg;	state Exp;
branches;
next	1.1.3.2;

1.1.3.2
date	2004.08.12.20.10.32;	author tg;	state Stab;
branches;
next	;


desc
@@


1.3
log
@libedit:
* fix editline to behave like manpage states: try $PWD/.editrc
  before looking at $HOME/.editrc
* use $HOME/.etc/editrc instead of $HOME/.editrc
* <sys/cdefs.h>ify headers
* fix building of test
* simplify installation of headers
* beautify Makefile
* nuke dead trees

libreadline:
* remove

libedit:
* install libreadline wrapper headers to /usr/include/readline again
* take over

tested with a make build NOMAN=1^Hyes
@
text
@/**	$MirBSD: src/gnu/usr.bin/binutils/src/readline/xmalloc.h,v 1.2 2004/09/16 22:28:25 tg Exp $ */

/*-
 * Function declaration for xmalloc, part of GNU libiberty.
 *
 * Copyright (c) 1991, 1992, 1993, 1994, 1995,
 *   1996, 1998, 1999, 2000, 2001, 2002
 *	Free Software Foundation, Inc.
 * Copyright (c) 2004
 *	The MirOS Project
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330,
 * Boston, MA 02111-1307, USA.
 */

#ifndef	_XMALLOC_H
#define	_XMALLOC_H

/**	from: ansidecl.h */

/* Attribute __malloc__ on functions was valid as of gcc 2.96. */
#ifndef ATTRIBUTE_MALLOC
# if (GCC_VERSION >= 2096)
#  define ATTRIBUTE_MALLOC __attribute__ ((__malloc__))
# else
#  define ATTRIBUTE_MALLOC
# endif /* GNUC >= 2.96 */
#endif /* ATTRIBUTE_MALLOC */

#ifndef ATTRIBUTE_NORETURN
#define ATTRIBUTE_NORETURN __attribute__ ((__noreturn__))
#endif /* ATTRIBUTE_NORETURN */

#if defined (__STDC__) || defined (_AIX) || (defined (__mips) && defined (_SYSTYPE_SVR4)) || defined(_WIN32) || (defined(__alpha) && defined(__cplusplus))
#define PTR		void *
#else	/* Not ANSI C.  */
#define PTR		char *
#endif

/**	from: libiberty.h */

/* Set the program name used by xmalloc.  */

extern void xmalloc_set_program_name PARAMS ((const char *));

/* Report an allocation failure.  */
extern void xmalloc_failed PARAMS ((size_t)) ATTRIBUTE_NORETURN;

/* Allocate memory without fail.  If malloc fails, this will print a
   message to stderr (using the name set by xmalloc_set_program_name,
   if any) and then call xexit.  */

extern PTR xmalloc PARAMS ((size_t)) ATTRIBUTE_MALLOC;

/* Reallocate memory without fail.  This works like xmalloc.  Note,
   realloc type functions are not suitable for attribute malloc since
   they may return the same address across multiple calls. */

extern PTR xrealloc PARAMS ((PTR, size_t));

/* Allocate memory without fail and set it to zero.  This works like
   xmalloc.  */

extern PTR xcalloc PARAMS ((size_t, size_t)) ATTRIBUTE_MALLOC;

#endif
@


1.2
log
@update to most recent copy of binutils, based upon the vendor import branch cvs-200409160000 and our binutils port
@
text
@d1 1
a1 1
/**	$MirBSD: testing/binutils/readline/xmalloc.h,v 1.4 2004/09/16 21:19:52 tg Exp $ */
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/**	$MirBSD: testing/binutils/readline/xmalloc.h,v 1.2 2004/08/09 19:52:26 tg Exp $ */
@


1.1.3.1
log
@Import testing binutils source into main tree
@
text
@@


1.1.3.2
log
@sync with testing_SYNC_C from testing/binutils, which apparently works
@
text
@d1 1
a1 1
/**	$MirBSD: testing/binutils/readline/xmalloc.h,v 1.3 2004/08/12 13:21:47 tg Exp $ */
@

