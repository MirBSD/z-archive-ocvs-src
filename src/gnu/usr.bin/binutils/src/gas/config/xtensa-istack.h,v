head	1.2;
access;
symbols
	cvs-200501080000:1.1.2.2
	tg-mergetmp-mirosx-1:1.1.3.1
	tg-mergefixes-1-branch:1.1.3.1.0.8
	tg-mergefixes-1-base:1.1.3.1
	MIROS_X:1.1.3.1.0.6
	MIROS_X_BASE:1.1.3.1
	MIRBSD_XP_MIRPPC:1.1.3.1.0.4
	MIRBSD_XP_SPARC_BASE:1.1.3.1
	MIRBSD_XP_SPARC:1.1.3.1.0.2
	cvs-200409160000:1.1.2.1
	FSF:1.1.2
	testing_SYNC_D:1.1.3.1
	testing_SYNC_C:1.1.3.1
	testing_SYNC_B:1.1.3.1
	testing_SYNC_A:1.1.3.1
	tg:1.1.3;
locks; strict;
comment	@ * @;


1.2
date	2005.01.13.19.44.16;	author tg;	state Exp;
branches;
next	1.1;

1.1
date	2004.08.11.20.34.06;	author tg;	state Exp;
branches
	1.1.2.1
	1.1.3.1;
next	;

1.1.2.1
date	2004.09.16.21.26.48;	author tg;	state Exp;
branches;
next	1.1.2.2;

1.1.2.2
date	2005.01.08.22.52.01;	author tg;	state Exp;
branches;
next	;

1.1.3.1
date	2004.08.11.20.34.06;	author tg;	state Stab;
branches;
next	;


desc
@@


1.2
log
@merge binutils update (quick)
@
text
@/* Declarations for stacks of tokenized Xtensa instructions.
   Copyright (C) 2003, 2004 Free Software Foundation, Inc.

   This file is part of GAS, the GNU Assembler.

   GAS is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   GAS is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with GAS; see the file COPYING.  If not, write to the Free
   Software Foundation, 59 Temple Place - Suite 330, Boston, MA
   02111-1307, USA.  */

#ifndef XTENSA_ISTACK_H
#define XTENSA_ISTACK_H

#include "dwarf2dbg.h"
#include "xtensa-isa.h"

#define MAX_ISTACK 12
#define MAX_INSN_ARGS 10

enum itype_enum
{
  ITYPE_INSN,
  ITYPE_LITERAL,
  ITYPE_LABEL
};


/* Literals have 1 token and no opcode.
   Labels have 1 token and no opcode.  */

typedef struct tinsn_struct
{
  enum itype_enum insn_type;

  xtensa_opcode opcode;	/* Literals have an invalid opcode.  */
  bfd_boolean is_specific_opcode; 
  bfd_boolean keep_wide; 
  int ntok;
  expressionS tok[MAX_INSN_ARGS];
  struct dwarf2_line_info loc;

  struct fixP *fixup;

  /* Filled out by relaxation_requirements:  */
  bfd_boolean record_fix;
  enum xtensa_relax_statesE subtype;
  int literal_space;
  /* Filled out by vinsn_to_insnbuf:  */
  symbolS *symbol;
  symbolS *sub_symbol;
  offsetT offset;
  fragS *literal_frag;
} TInsn;


/* tinsn_stack:  This is a stack of instructions to  be placed.  */

typedef struct tinsn_stack
{
  int ninsn;
  TInsn insn[MAX_ISTACK];
} IStack;


void istack_init (IStack *);
bfd_boolean istack_empty (IStack *);
bfd_boolean istack_full (IStack *);
TInsn *istack_top (IStack *);
void istack_push (IStack *, TInsn *);
TInsn *istack_push_space (IStack *); 
void istack_pop (IStack *);

/* TInsn utilities.  */
void tinsn_init (TInsn *);
expressionS *tinsn_get_tok (TInsn *, int);


/* vliw_insn: bundles of TInsns.  */

typedef struct vliw_insn
{
  xtensa_format format;
  xtensa_insnbuf insnbuf;
  int num_slots;
  unsigned int inside_bundle;
  TInsn slots[MAX_SLOTS];
  xtensa_insnbuf slotbuf[MAX_SLOTS];
} vliw_insn;

#endif /* !XTENSA_ISTACK_H */
@


1.1
log
@Initial revision
@
text
@d2 1
a2 1
   Copyright (C) 2003 Free Software Foundation, Inc.
d24 1
d28 1
a28 1
#define MAX_INSN_ARGS 6
d44 2
a45 1
  
d47 1
a47 1
  xtensa_opcode opcode;	/* Literals have an invalid opcode.  */
d50 13
d75 7
a81 7
void         istack_init        PARAMS ((IStack *));
bfd_boolean  istack_empty       PARAMS ((IStack *));
bfd_boolean  istack_full        PARAMS ((IStack *));
TInsn *      istack_top         PARAMS ((IStack *));
void         istack_push        PARAMS ((IStack *, TInsn *));
TInsn *      istack_push_space  PARAMS ((IStack *)); 
void         istack_pop         PARAMS ((IStack *));
d84 15
a98 3
void         tinsn_init         PARAMS ((TInsn *));
void         tinsn_copy         PARAMS ((TInsn *, const TInsn *));
expressionS *tinsn_get_tok      PARAMS ((TInsn *, int));
@


1.1.2.1
log
@binutils-040916.tar.bz2 from sources.deadrat.com for src/ for later use
@
text
@@


1.1.2.2
log
@binutils-050108.tar.bz2
@
text
@d2 1
a2 1
   Copyright (C) 2003, 2004 Free Software Foundation, Inc.
a23 1
#include "dwarf2dbg.h"
d27 1
a27 1
#define MAX_INSN_ARGS 10
d43 2
a44 1

a45 2
  bfd_boolean is_specific_opcode; 
  bfd_boolean keep_wide; 
a47 13
  struct dwarf2_line_info loc;

  struct fixP *fixup;

  /* Filled out by relaxation_requirements:  */
  bfd_boolean record_fix;
  enum xtensa_relax_statesE subtype;
  int literal_space;
  /* Filled out by vinsn_to_insnbuf:  */
  symbolS *symbol;
  symbolS *sub_symbol;
  offsetT offset;
  fragS *literal_frag;
d60 7
a66 7
void istack_init (IStack *);
bfd_boolean istack_empty (IStack *);
bfd_boolean istack_full (IStack *);
TInsn *istack_top (IStack *);
void istack_push (IStack *, TInsn *);
TInsn *istack_push_space (IStack *); 
void istack_pop (IStack *);
d69 3
a71 15
void tinsn_init (TInsn *);
expressionS *tinsn_get_tok (TInsn *, int);


/* vliw_insn: bundles of TInsns.  */

typedef struct vliw_insn
{
  xtensa_format format;
  xtensa_insnbuf insnbuf;
  int num_slots;
  unsigned int inside_bundle;
  TInsn slots[MAX_SLOTS];
  xtensa_insnbuf slotbuf[MAX_SLOTS];
} vliw_insn;
@


1.1.3.1
log
@Import testing binutils source into main tree
@
text
@@
