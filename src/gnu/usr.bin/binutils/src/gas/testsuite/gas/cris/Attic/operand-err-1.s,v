head	1.2;
access;
symbols
	cvs-200501080000:1.1.2.2
	cvs-200409160000:1.1.2.1
	FSF:1.1.2;
locks; strict;
comment	@# @;


1.2
date	2004.09.16.22.10.25;	author tg;	state dead;
branches;
next	1.1;

1.1
date	2004.09.16.21.27.12;	author tg;	state Exp;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2004.09.16.21.27.12;	author tg;	state Exp;
branches;
next	1.1.2.2;

1.1.2.2
date	2005.01.08.22.52.13;	author tg;	state Exp;
branches;
next	;


desc
@@


1.2
log
@sync number of files with that what we only need
@
text
@; Error cases for invalid operands.
;  { dg-do assemble { target cris-*-* } }
 .text
 .syntax no_register_prefix
start:
 add.w r3,r4,r5 ; { dg-error "(Illegal|Invalid) operands" }
 add.w 42,r4,r5 ; { dg-error "(Illegal|Invalid) operands" }
 add.w [r3],r4,r5 ; Not an error: [r3] implies [r3+0].
 add.w r3,[r3],r4 ; { dg-error "(Illegal|Invalid) operands" }
 add.w r3,[r3] ; { dg-error "(Illegal|Invalid) operands" }
 test.w [r3],r4,r5 ; { dg-error "(Illegal|Invalid) operands" }
 test.d [r3],r4 ; { dg-error "(Illegal|Invalid) operands" }
 move.d [r3],r4,r5 ; { dg-error "(Illegal|Invalid) operands" }

; These two *might* be useful in extreme cases, so maybe the following
; should not be considered an error in the first place.
 test.d whatever ; { dg-error "(Illegal|Invalid) operands" "" { xfail *-*-* } }
 test.d 42 ; { dg-error "(Illegal|Invalid) operands" "" { xfail *-*-* } }

 clear.d whatever ; { dg-error "(Illegal|Invalid) operands" }
 clear.d 42 ; { dg-error "(Illegal|Invalid) operands" }
 addi r5,r3 ; { dg-error "(Illegal|Invalid) operands" }
 ba [external_symbol] ; Not an error, just obscure and generally useless.
 ba [r3] ; Not an error, just obscure and generally useless.
 lsl r3,r5 ; { dg-error "(Illegal|Invalid) operands" }
 xor.d r5,r6 ; { dg-error "(Illegal|Invalid) operands" }

; Addressing modes
 test.d [r3+r4] ; { dg-error "(Illegal|Invalid) operands" }
 test.d [r3=r2+[r4]] ; { dg-error "(Illegal|Invalid) operands" }
 test.d [r3=r2+[r4].w ; { dg-error "(Illegal|Invalid) operands" }
 test.d [r3=r2] ; { dg-error "(Illegal|Invalid) operands" }
 test.d [r3=r2+] ; { dg-error "(Illegal|Invalid) operands|(B|b)ad expression" }
 test.d [r3++] ; { dg-error "(Illegal|Invalid) operands|(B|b)ad expression" }

; I think these should be valid; a dip with "postincrement" on
; the insn that follows.
 test.d [r3=external_symbol] ; { dg-error "(Illegal|Invalid) operands" }
 test.d [r3=[r4]] ; { dg-error "(Illegal|Invalid) operands" }
 test.d [r3=[r4+]] ; { dg-error "(Illegal|Invalid) operands" }

 test.d [[r3+r4.b]] ; { dg-error "(Illegal|Invalid) operands" }
 test.d [r3=external+[r5]] ; { dg-error "(Illegal|Invalid) operands" }
 test.d [r3=[r5]+external] ; { dg-error "(Illegal|Invalid) operands" }
 test.d [r3+[r3+r5.d]] ; { dg-error "(Illegal|Invalid) operands" }
 test.d [r3+[r3+external]] ; { dg-error "(Illegal|Invalid) operands" }
@


1.1
log
@Initial revision
@
text
@@


1.1.2.1
log
@binutils-040916.tar.bz2 from sources.deadrat.com for src/ for later use
@
text
@@


1.1.2.2
log
@binutils-050108.tar.bz2
@
text
@d15 4
a18 6
; These two could be seen useful in extreme cases, but those
; would be shadowed by not flagging erroneous use of
; e.g. "test.d $r3" for CRISv32.  If you really need it, use
; e.g. "test.d [$pc+] @@ .dword whatever".
 test.d whatever ; { dg-error "(Illegal|Invalid) operands" "" }
 test.d 42 ; { dg-error "(Illegal|Invalid) operands" "" }
d23 2
a24 5

; These two are valid instructions, though not recognized by
; the assembler since they're obscure and generally useless.
 ba [external_symbol] ; { dg-error "(Illegal|Invalid) operands|(B|b)ad expression" }
 ba [r3] ; { dg-error "(Illegal|Invalid) operands|(B|b)ad expression" }
@

