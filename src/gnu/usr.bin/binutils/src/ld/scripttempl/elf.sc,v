head	1.22;
access;
symbols
	cvs-200501080000:1.1.2.2
	tg-mergetmp-mirosx-1:1.21
	tg-mergefixes-1-branch:1.21.0.4
	tg-mergefixes-1-base:1.21
	MIROS_X:1.21.0.2
	MIROS_X_BASE:1.21
	MIRBSD_XP_MIRPPC:1.20.0.4
	MIRBSD_XP_SPARC_BASE:1.20
	MIRBSD_XP_SPARC:1.20.0.2
	cvs-200409160000:1.1.2.1
	FSF:1.1.2
	testing_SYNC_D:1.19
	testing_SYNC_C:1.1.3.2
	testing_SYNC_B:1.1.3.1
	testing_SYNC_A:1.1.3.1
	tg:1.1.3;
locks; strict;
comment	@# @;


1.22
date	2005.01.13.19.44.21;	author tg;	state Exp;
branches;
next	1.21;

1.21
date	2004.11.03.15.25.48;	author tg;	state Exp;
branches;
next	1.20;

1.20
date	2004.09.16.22.28.13;	author tg;	state Exp;
branches;
next	1.19;

1.19
date	2004.08.13.22.37.40;	author tg;	state Stab;
branches;
next	1.18;

1.18
date	2004.08.13.17.32.23;	author tg;	state Exp;
branches;
next	1.17;

1.17
date	2004.08.13.17.20.58;	author tg;	state Exp;
branches;
next	1.16;

1.16
date	2004.08.13.07.02.08;	author tg;	state Exp;
branches;
next	1.15;

1.15
date	2004.08.13.06.53.36;	author tg;	state Exp;
branches;
next	1.14;

1.14
date	2004.08.13.06.51.05;	author tg;	state Exp;
branches;
next	1.13;

1.13
date	2004.08.13.06.50.27;	author tg;	state Exp;
branches;
next	1.12;

1.12
date	2004.08.13.06.20.52;	author tg;	state Exp;
branches;
next	1.11;

1.11
date	2004.08.13.06.16.03;	author tg;	state Exp;
branches;
next	1.10;

1.10
date	2004.08.13.06.09.37;	author tg;	state Exp;
branches;
next	1.9;

1.9
date	2004.08.13.06.04.26;	author tg;	state Exp;
branches;
next	1.8;

1.8
date	2004.08.13.05.56.52;	author tg;	state Exp;
branches;
next	1.7;

1.7
date	2004.08.13.05.36.52;	author tg;	state Exp;
branches;
next	1.6;

1.6
date	2004.08.13.05.33.19;	author tg;	state Exp;
branches;
next	1.5;

1.5
date	2004.08.13.05.27.32;	author tg;	state Exp;
branches;
next	1.4;

1.4
date	2004.08.13.05.24.05;	author tg;	state Exp;
branches;
next	1.3;

1.3
date	2004.08.13.05.12.56;	author tg;	state Exp;
branches;
next	1.2;

1.2
date	2004.08.13.04.36.25;	author tg;	state Exp;
branches;
next	1.1;

1.1
date	2004.08.11.20.40.53;	author tg;	state Exp;
branches
	1.1.2.1
	1.1.3.1;
next	;

1.1.2.1
date	2004.09.16.21.31.05;	author tg;	state Exp;
branches;
next	1.1.2.2;

1.1.2.2
date	2005.01.08.22.53.32;	author tg;	state Exp;
branches;
next	;

1.1.3.1
date	2004.08.11.20.40.53;	author tg;	state Exp;
branches;
next	1.1.3.2;

1.1.3.2
date	2004.08.12.20.09.58;	author tg;	state Exp;
branches;
next	;


desc
@@


1.22
log
@merge binutils update (quick)
@
text
@# $MirBSD: src/gnu/usr.bin/binutils/src/ld/scripttempl/elf.sc,v 1.21 2004/11/03 15:25:48 tg Exp $
#
# Unusual variables checked by this code:
#	NOP - four byte opcode for no-op (defaults to 0)
#	NO_SMALL_DATA - no .sbss/.sbss2/.sdata/.sdata2 sections if not
#		empty.
#	SMALL_DATA_CTOR - .ctors contains small data.
#	SMALL_DATA_DTOR - .dtors contains small data.
#	DATA_ADDR - if end-of-text-plus-one-page isn't right for data start
#	INITIAL_READONLY_SECTIONS - at start of text segment
#	OTHER_READONLY_SECTIONS - other than .text .init .rodata ...
#		(e.g., .PARISC.milli)
#	OTHER_TEXT_SECTIONS - these get put in .text when relocating
#	OTHER_READWRITE_SECTIONS - other than .data .bss .ctors .sdata ...
#		(e.g., .PARISC.global)
#	OTHER_RELRO_SECTIONS - other than .data.rel.ro ...
#		(e.g. PPC32 .fixup, .got[12])
#	OTHER_BSS_SECTIONS - other than .bss .sbss ...
#	OTHER_SECTIONS - at the end
#	EXECUTABLE_SYMBOLS - symbols that must be defined for an
#		executable (e.g., _DYNAMIC_LINK)
#       TEXT_START_ADDR - the first byte of the text segment, after any
#               headers.
#       TEXT_BASE_ADDRESS - the first byte of the text segment.
#	TEXT_START_SYMBOLS - symbols that appear at the start of the
#		.text section.
#	DATA_START_SYMBOLS - symbols that appear at the start of the
#		.data section.
#	OTHER_GOT_SYMBOLS - symbols defined just before .got.
#	OTHER_GOT_SECTIONS - sections just after .got.
#	OTHER_SDATA_SECTIONS - sections just after .sdata.
#	OTHER_BSS_SYMBOLS - symbols that appear at the start of the
#		.bss section besides __bss_start.
#	DATA_PLT - .plt should be in data segment, not text segment.
#	PLT_BEFORE_GOT - .plt just before .got when .plt is in data segement.
#	BSS_PLT - .plt should be in bss segment
#	TEXT_DYNAMIC - .dynamic in text segment, not data segment.
#	EMBEDDED - whether this is for an embedded system.
#	SHLIB_TEXT_START_ADDR - if set, add to SIZEOF_HEADERS to set
#		start address of shared library.
#	INPUT_FILES - INPUT command of files to always include
#	WRITABLE_RODATA - if set, the .rodata section should be writable
#	INIT_START, INIT_END -  statements just before and just after
# 	combination of .init sections.
#	FINI_START, FINI_END - statements just before and just after
# 	combination of .fini sections.
#	STACK_ADDR - start of a .stack section.
#	OTHER_END_SYMBOLS - symbols to place right at the end of the script.
#	SEPARATE_GOTPLT - if set, .got.plt should be separate output section,
#		so that .got can be in the RELRO area.  It should be set to
#		the number of bytes in the beginning of .got.plt which can be
#		in the RELRO area as well.
#
# When adding sections, do note that the names of some sections are used
# when specifying the start address of the next.
#

#  Many sections come in three flavours.  There is the 'real' section,
#  like ".data".  Then there are the per-procedure or per-variable
#  sections, generated by -ffunction-sections and -fdata-sections in GCC,
#  and useful for --gc-sections, which for a variable "foo" might be
#  ".data.foo".  Then there are the linkonce sections, for which the linker
#  eliminates duplicates, which are named like ".gnu.linkonce.d.foo".
#  The exact correspondences are:
#
#  Section	Linkonce section
#  .text	.gnu.linkonce.t.foo
#  .rodata	.gnu.linkonce.r.foo
#  .data	.gnu.linkonce.d.foo
#  .bss		.gnu.linkonce.b.foo
#  .sdata	.gnu.linkonce.s.foo
#  .sbss	.gnu.linkonce.sb.foo
#  .sdata2	.gnu.linkonce.s2.foo
#  .sbss2	.gnu.linkonce.sb2.foo
#  .debug_info	.gnu.linkonce.wi.foo
#  .tdata	.gnu.linkonce.td.foo
#  .tbss	.gnu.linkonce.tb.foo
#
#  Each of these can also have corresponding .rel.* and .rela.* sections.

test -z "$ENTRY" && ENTRY=_start
test -z "${BIG_OUTPUT_FORMAT}" && BIG_OUTPUT_FORMAT=${OUTPUT_FORMAT}
test -z "${LITTLE_OUTPUT_FORMAT}" && LITTLE_OUTPUT_FORMAT=${OUTPUT_FORMAT}
if [ -z "$MACHINE" ]; then OUTPUT_ARCH=${ARCH}; else OUTPUT_ARCH=${ARCH}:${MACHINE}; fi
test -z "${ELFSIZE}" && ELFSIZE=32
test -z "${ALIGNMENT}" && ALIGNMENT="${ELFSIZE} / 8"
test "$LD_FLAG" = "N" && DATA_ADDR=.
test -n "$CREATE_SHLIB$CREATE_PIE" && test -n "$SHLIB_DATA_ADDR" && COMMONPAGESIZE=""
test -z "$CREATE_SHLIB$CREATE_PIE" && test -n "$DATA_ADDR" && COMMONPAGESIZE=""
if [ -n "$PLT_BEFORE_GOT" ]; then DATA_NONEXEC_PLT=; unset DATA_PLT; unset BSS_PLT; fi
test -n "$RELRO_NOW" && unset SEPARATE_GOTPLT
unset NO_SMALL_DATA_GOT
test -n "$NO_SMALL_DATA" && test -z "${PAD_GOT+x}" && NO_SMALL_DATA_GOT=
test -z "${NO_SMALL_DATA_GOT+x}" && unset SEPARATE_GOTPLT
DATA_SEGMENT_ALIGN="ALIGN(${SEGMENT_SIZE}) + (. & (${MAXPAGESIZE} - 1))"
DATA_SEGMENT_RELRO_END=""
DATA_SEGMENT_RELRO_GOTPLT_END=""
DATA_SEGMENT_END=""
if test -n "${COMMONPAGESIZE}"; then
  DATA_SEGMENT_ALIGN="ALIGN (${SEGMENT_SIZE}) - ((${MAXPAGESIZE} - .) & (${MAXPAGESIZE} - 1)); . = DATA_SEGMENT_ALIGN (${MAXPAGESIZE}, ${COMMONPAGESIZE})"
  DATA_SEGMENT_END=". = DATA_SEGMENT_END (.);"
  if test -n "${SEPARATE_GOTPLT}"; then
    DATA_SEGMENT_RELRO_GOTPLT_END=". = DATA_SEGMENT_RELRO_END (${SEPARATE_GOTPLT}, .);"
  else
    DATA_SEGMENT_RELRO_END=". = DATA_SEGMENT_RELRO_END (0, .);"
  fi
fi
INTERP=".interp       ${RELOCATING-0} : { *(.interp) }"
PLT=".plt          ${RELOCATING-0} : { *(.plt) }"
if test -z "$GOT"; then
  if test -z "$SEPARATE_GOTPLT"; then
    GOT=".got          ${RELOCATING-0} : { *(.got.plt) *(.got) }"
  else
    GOT=".got          ${RELOCATING-0} : { *(.got) }"
    GOTPLT="${RELOCATING+${DATA_SEGMENT_RELRO_GOTPLT_END}}
  .got.plt      ${RELOCATING-0} : { *(.got.plt) }"
  fi
fi
DYNAMIC=".dynamic      ${RELOCATING-0} : { *(.dynamic) }"
DATARELRO=".data.rel.ro : { *(.data.rel.ro.local) *(.data.rel.ro*) }"
RODATA=".rodata       ${RELOCATING-0} : { *(.rodata${RELOCATING+ .rodata.* .gnu.linkonce.r.*}) }"
STACKNOTE="/DISCARD/ : { *(.note.GNU-stack) }"
if test -z "${NO_SMALL_DATA}"; then
  SBSS=".sbss         ${RELOCATING-0} :
  {
    ${RELOCATING+PROVIDE (__sbss_start = .);}
    ${RELOCATING+PROVIDE (___sbss_start = .);}
    *(.dynsbss)
    *(.sbss${RELOCATING+ .sbss.* .gnu.linkonce.sb.*})
    *(.scommon)
    ${RELOCATING+PROVIDE (__sbss_end = .);}
    ${RELOCATING+PROVIDE (___sbss_end = .);}
  }"
  SBSS2=".sbss2        ${RELOCATING-0} : { *(.sbss2${RELOCATING+ .sbss2.* .gnu.linkonce.sb2.*}) }"
  SDATA="/* We want the small data sections together, so single-instruction offsets
     can access them all, and initialized data all before uninitialized, so
     we can shorten the on-disk segment size.  */
  .sdata        ${RELOCATING-0} :
  {
    ${RELOCATING+${SDATA_START_SYMBOLS}}
    *(.sdata${RELOCATING+ .sdata.* .gnu.linkonce.s.*})
  }"
  SDATA2=".sdata2       ${RELOCATING-0} : { *(.sdata2${RELOCATING+ .sdata2.* .gnu.linkonce.s2.*}) }"
  REL_SDATA=".rel.sdata    ${RELOCATING-0} : { *(.rel.sdata${RELOCATING+ .rel.sdata.* .rel.gnu.linkonce.s.*}) }
  .rela.sdata   ${RELOCATING-0} : { *(.rela.sdata${RELOCATING+ .rela.sdata.* .rela.gnu.linkonce.s.*}) }"
  REL_SBSS=".rel.sbss     ${RELOCATING-0} : { *(.rel.sbss${RELOCATING+ .rel.sbss.* .rel.gnu.linkonce.sb.*}) }
  .rela.sbss    ${RELOCATING-0} : { *(.rela.sbss${RELOCATING+ .rela.sbss.* .rela.gnu.linkonce.sb.*}) }"
  REL_SDATA2=".rel.sdata2   ${RELOCATING-0} : { *(.rel.sdata2${RELOCATING+ .rel.sdata2.* .rel.gnu.linkonce.s2.*}) }
  .rela.sdata2  ${RELOCATING-0} : { *(.rela.sdata2${RELOCATING+ .rela.sdata2.* .rela.gnu.linkonce.s2.*}) }"
  REL_SBSS2=".rel.sbss2    ${RELOCATING-0} : { *(.rel.sbss2${RELOCATING+ .rel.sbss2.* .rel.gnu.linkonce.sb2.*}) }
  .rela.sbss2   ${RELOCATING-0} : { *(.rela.sbss2${RELOCATING+ .rela.sbss2.* .rela.gnu.linkonce.sb2.*}) }"
else
  NO_SMALL_DATA=" "
fi
RODATA_ALIGN_ADD_VAL="${CREATE_SHLIB-${RODATA_ALIGN_ADD:-0}} ${CREATE_SHLIB+0}"
test "$LD_FLAG" = "n" || test "$LD_FLAG" = "N" || test "$LD_FLAG" = "Z" || NO_PAD="y"
if test "$NO_PAD" = "y" ; then
  PAD_RO0="${RELOCATING+${RODATA_ALIGN} + ${RODATA_ALIGN_ADD_VAL};}"
  PAD_PLT0="${RELOCATING+. = ALIGN(${MAXPAGESIZE}) + (. & (${MAXPAGESIZE} - 1));} .pltpad0 ${RELOCATING-0} : { ${RELOCATING+__plt_start = .;} }"
  PAD_PLT1=".pltpad1 ${RELOCATING-0} : { ${RELOCATING+__plt_end = .;}} ${RELOCATING+. = ALIGN(${MAXPAGESIZE}) + (. & (${MAXPAGESIZE} - 1));}"
  PAD_GOT0="${RELOCATING+. = ALIGN(${MAXPAGESIZE}) + (. & (${MAXPAGESIZE} - 1));} .gotpad0 ${RELOCATING-0} : { ${RELOCATING+__got_start = .;} }"
  PAD_GOT1=".gotpad1 ${RELOCATING-0} : { ${RELOCATING+__got_end = .;}} ${RELOCATING+. = ALIGN(${MAXPAGESIZE}) + (. & (${MAXPAGESIZE} - 1));}"
  test "$NO_PAD_CDTOR" = "y" || PAD_CDTOR=
fi
test -n "$SEPARATE_GOTPLT" && SEPARATE_GOTPLT=" "
test -z "$S_EH_FRAME" && S_EH_FRAME=".eh_frame     ${RELOCATING-0} : ONLY_IF_RW { KEEP (*(.eh_frame)) }"
test -z "$S_GCC_EXC" && S_GCC_EXC=".gcc_except_table ${RELOCATING-0} : ONLY_IF_RW { KEEP (*(.gcc_except_table)) *(.gcc_except_table.*) }"
test -z "$S_TDATA" && S_TDATA=".tdata	${RELOCATING-0} : { *(.tdata${RELOCATING+ .tdata.* .gnu.linkonce.td.*}) }"
test -z "$S_TBSS" && S_TBSS=".tbss		${RELOCATING-0} : { *(.tbss${RELOCATING+ .tbss.* .gnu.linkonce.tb.*})${RELOCATING+ *(.tcommon)} }"
test -z "$S_JCR" && S_JCR=".jcr          ${RELOCATING-0} : { KEEP (*(.jcr)) }"
CTOR=".ctors        ${CONSTRUCTING-0} :
  {
    ${CONSTRUCTING+${CTOR_START}}
    /* gcc uses crtbegin.o to find the start of
       the constructors, so we make sure it is
       first.  Because this is a wildcard, it
       doesn't matter if the user does not
       actually link against crtbegin.o; the
       linker won't look for a file to match a
       wildcard.  The wildcard also means that it
       doesn't matter which directory crtbegin.o
       is in.  */

    KEEP (*crtbegin*.o(.ctors))

    /* We don't want to include the .ctor section from
       from the crtend.o file until after the sorted ctors.
       The .ctor section from the crtend file contains the
       end of ctors marker and it must be last */

    KEEP (*(EXCLUDE_FILE (*crtend*.o $OTHER_EXCLUDE_FILES) .ctors))
    KEEP (*(SORT(.ctors.*)))
    KEEP (*(.ctors))
    ${CONSTRUCTING+${CTOR_END}}
  }"
DTOR=".dtors        ${CONSTRUCTING-0} :
  {
    ${CONSTRUCTING+${DTOR_START}}
    KEEP (*crtbegin*.o(.dtors))
    KEEP (*(EXCLUDE_FILE (*crtend*.o $OTHER_EXCLUDE_FILES) .dtors))
    KEEP (*(SORT(.dtors.*)))
    KEEP (*(.dtors))
    ${CONSTRUCTING+${DTOR_END}}
  }"
STACK="  .stack        ${RELOCATING-0}${RELOCATING+${STACK_ADDR}} :
  {
    ${RELOCATING+_stack = .;}
    *(.stack)
  }"

# if this is for an embedded system, don't add SIZEOF_HEADERS.
if [ -z "$EMBEDDED" ]; then
   test -z "${TEXT_BASE_ADDRESS}" && TEXT_BASE_ADDRESS="${TEXT_START_ADDR} + SIZEOF_HEADERS"
else
   test -z "${TEXT_BASE_ADDRESS}" && TEXT_BASE_ADDRESS="${TEXT_START_ADDR}"
fi

cat <<EOF
OUTPUT_FORMAT("${OUTPUT_FORMAT}", "${BIG_OUTPUT_FORMAT}",
	      "${LITTLE_OUTPUT_FORMAT}")
OUTPUT_ARCH(${OUTPUT_ARCH})
ENTRY(${ENTRY})

${RELOCATING+${LIB_SEARCH_DIRS}}
${RELOCATING+/* Do we need any of these for elf?
   __DYNAMIC = 0; ${STACKZERO+${STACKZERO}} ${SHLIB_PATH+${SHLIB_PATH}}  */}
${RELOCATING+${EXECUTABLE_SYMBOLS}}
${RELOCATING+${INPUT_FILES}}
${RELOCATING- /* For some reason, the Solaris linker makes bad executables
  if gld -r is used and the intermediate file has sections starting
  at non-zero addresses.  Could be a Solaris ld bug, could be a GNU ld
  bug.  But for now assigning the zero vmas works.  */}

SECTIONS
{
  /* Read-only sections, merged into text segment: */
  ${CREATE_SHLIB-${CREATE_PIE-${RELOCATING+PROVIDE (__executable_start = ${TEXT_START_ADDR}); . = ${TEXT_BASE_ADDRESS};}}}
  ${CREATE_SHLIB+${RELOCATING+. = ${SHLIB_TEXT_START_ADDR:-0} + SIZEOF_HEADERS;}}
  ${CREATE_PIE+${RELOCATING+. = ${SHLIB_TEXT_START_ADDR:-0} + SIZEOF_HEADERS;}}
  ${CREATE_SHLIB-${INTERP}}
  ${INITIAL_READONLY_SECTIONS}
  ${TEXT_DYNAMIC+${DYNAMIC}}
  .hash         ${RELOCATING-0} : { *(.hash) }
  .dynsym       ${RELOCATING-0} : { *(.dynsym) }
  .dynstr       ${RELOCATING-0} : { *(.dynstr) }
  .gnu.version  ${RELOCATING-0} : { *(.gnu.version) }
  .gnu.version_d ${RELOCATING-0}: { *(.gnu.version_d) }
  .gnu.version_r ${RELOCATING-0}: { *(.gnu.version_r) }

EOF
if [ "x$COMBRELOC" = x ]; then
  COMBRELOCCAT=cat
else
  COMBRELOCCAT="cat > $COMBRELOC"
fi
eval $COMBRELOCCAT <<EOF
  .rel.init     ${RELOCATING-0} : { *(.rel.init) }
  .rela.init    ${RELOCATING-0} : { *(.rela.init) }
  .rel.text     ${RELOCATING-0} : { *(.rel.text${RELOCATING+ .rel.text.* .rel.gnu.linkonce.t.*}) }
  .rela.text    ${RELOCATING-0} : { *(.rela.text${RELOCATING+ .rela.text.* .rela.gnu.linkonce.t.*}) }
  .rel.fini     ${RELOCATING-0} : { *(.rel.fini) }
  .rela.fini    ${RELOCATING-0} : { *(.rela.fini) }
  .rel.rodata   ${RELOCATING-0} : { *(.rel.rodata${RELOCATING+ .rel.rodata.* .rel.gnu.linkonce.r.*}) }
  .rela.rodata  ${RELOCATING-0} : { *(.rela.rodata${RELOCATING+ .rela.rodata.* .rela.gnu.linkonce.r.*}) }
  ${OTHER_READONLY_RELOC_SECTIONS}
  .rel.data.rel.ro ${RELOCATING-0} : { *(.rel.data.rel.ro${RELOCATING+*}) }
  .rela.data.rel.ro ${RELOCATING-0} : { *(.rel.data.rel.ro${RELOCATING+*}) }
  .rel.data     ${RELOCATING-0} : { *(.rel.data${RELOCATING+ .rel.data.* .rel.gnu.linkonce.d.*}) }
  .rela.data    ${RELOCATING-0} : { *(.rela.data${RELOCATING+ .rela.data.* .rela.gnu.linkonce.d.*}) }
  .rel.tdata	${RELOCATING-0} : { *(.rel.tdata${RELOCATING+ .rel.tdata.* .rel.gnu.linkonce.td.*}) }
  .rela.tdata	${RELOCATING-0} : { *(.rela.tdata${RELOCATING+ .rela.tdata.* .rela.gnu.linkonce.td.*}) }
  .rel.tbss	${RELOCATING-0} : { *(.rel.tbss${RELOCATING+ .rel.tbss.* .rel.gnu.linkonce.tb.*}) }
  .rela.tbss	${RELOCATING-0} : { *(.rela.tbss${RELOCATING+ .rela.tbss.* .rela.gnu.linkonce.tb.*}) }
  .rel.ctors    ${RELOCATING-0} : { *(.rel.ctors) }
  .rela.ctors   ${RELOCATING-0} : { *(.rela.ctors) }
  .rel.dtors    ${RELOCATING-0} : { *(.rel.dtors) }
  .rela.dtors   ${RELOCATING-0} : { *(.rela.dtors) }
  .rel.got      ${RELOCATING-0} : { *(.rel.got) }
  .rela.got     ${RELOCATING-0} : { *(.rela.got) }
  ${OTHER_GOT_RELOC_SECTIONS}
  ${REL_SDATA}
  ${REL_SBSS}
  ${REL_SDATA2}
  ${REL_SBSS2}
  .rel.bss      ${RELOCATING-0} : { *(.rel.bss${RELOCATING+ .rel.bss.* .rel.gnu.linkonce.b.*}) }
  .rela.bss     ${RELOCATING-0} : { *(.rela.bss${RELOCATING+ .rela.bss.* .rela.gnu.linkonce.b.*}) }
EOF
if [ -n "$COMBRELOC" ]; then
cat <<EOF
  .rel.dyn      ${RELOCATING-0} :
    {
EOF
sed -e '/^[ 	]*[{}][ 	]*$/d;/:[ 	]*$/d;/\.rela\./d;s/^.*: { *\(.*\)}$/      \1/' $COMBRELOC
cat <<EOF
    }
  .rela.dyn     ${RELOCATING-0} :
    {
EOF
sed -e '/^[ 	]*[{}][ 	]*$/d;/:[ 	]*$/d;/\.rel\./d;s/^.*: { *\(.*\)}/      \1/' $COMBRELOC
cat <<EOF
    }
EOF
fi
cat <<EOF
  .rel.plt      ${RELOCATING-0} : { *(.rel.plt) }
  .rela.plt     ${RELOCATING-0} : { *(.rela.plt) }
  ${OTHER_PLT_RELOC_SECTIONS}

  /* End of relocation sections.
     Start of text sections.  */

  .init         ${RELOCATING-0} :
  {
    ${RELOCATING+${INIT_START}}
    KEEP (*(.init))
    ${RELOCATING+${INIT_END}}
  } =${NOP-0}

  ${DATA_PLT-${DATA_NONEXEC_PLT-${BSS_PLT-${PLT}}}}
  .text         ${RELOCATING-0} :
  {
    ${RELOCATING+${TEXT_START_SYMBOLS}}
    *(.text .stub${RELOCATING+ .text.* .gnu.linkonce.t.*})
    KEEP (*(.text.*personality*))
    /* .gnu.warning sections are handled specially by elf32.em.  */
    *(.gnu.warning)
    ${RELOCATING+${OTHER_TEXT_SECTIONS}}
  } =${NOP-0}
  .fini         ${RELOCATING-0} :
  {
    ${RELOCATING+${FINI_START}}
    KEEP (*(.fini))
    ${RELOCATING+${FINI_END}}
  } =${NOP-0}
  ${RELOCATING+PROVIDE (__etext = .);}
  ${RELOCATING+PROVIDE (_etext = .);}
  ${RELOCATING+PROVIDE (etext = .);}

  /* Start of R/O data sections.  */

  ${PAD_RO+${PAD_RO0}}
  ${WRITABLE_RODATA-${RODATA}}
  .rodata1      ${RELOCATING-0} : { *(.rodata1) }
  ${CREATE_SHLIB-${SDATA2}}
  ${CREATE_SHLIB-${SBSS2}}
  ${OTHER_READONLY_SECTIONS}
  .eh_frame_hdr : { *(.eh_frame_hdr) }
  .eh_frame     ${RELOCATING-0} : ONLY_IF_RO { KEEP (*(.eh_frame)) }
  .gcc_except_table ${RELOCATING-0} : ONLY_IF_RO { KEEP (*(.gcc_except_table)) *(.gcc_except_table.*) }

  /* Start of R/W data sections.  */
  /* Adjust the address for the data segment.  We want to adjust up to
     the same address within the page on the next page up.  */
  ${CREATE_SHLIB-${CREATE_PIE-${RELOCATING+. = ${DATA_ADDR-${DATA_SEGMENT_ALIGN}};}}}
  ${CREATE_SHLIB+${RELOCATING+. = ${SHLIB_DATA_ADDR-${DATA_SEGMENT_ALIGN}};}}
  ${CREATE_PIE+${RELOCATING+. = ${SHLIB_DATA_ADDR-${DATA_SEGMENT_ALIGN}};}}

  ${NO_SMALL_DATA_GOT+${S_EH_FRAME}}
  ${NO_SMALL_DATA_GOT+${S_GCC_EXC}}
  ${NO_SMALL_DATA_GOT+${S_TDATA}}
  ${NO_SMALL_DATA_GOT+${S_TBSS}}

  /* Ensure the __preinit_array_start label is properly aligned.  We
     could instead move the label definition inside the section, but
     the linker would then create the section even if it turns out to
     be empty, which isn't pretty.  */
  ${RELOCATING+. = ALIGN(${ALIGNMENT});}
  ${RELOCATING+${CREATE_SHLIB-PROVIDE (__preinit_array_start = .);}}
  .preinit_array   ${RELOCATING-0} : { KEEP (*(.preinit_array)) }
  ${RELOCATING+${CREATE_SHLIB-PROVIDE (__preinit_array_end = .);}}

  ${RELOCATING+${CREATE_SHLIB-PROVIDE (__init_array_start = .);}}
  .init_array   ${RELOCATING-0} : { KEEP (*(.init_array)) }
  ${RELOCATING+${CREATE_SHLIB-PROVIDE (__init_array_end = .);}}

  ${RELOCATING+${CREATE_SHLIB-PROVIDE (__fini_array_start = .);}}
  .fini_array   ${RELOCATING-0} : { KEEP (*(.fini_array)) }
  ${RELOCATING+${CREATE_SHLIB-PROVIDE (__fini_array_end = .);}}

  ${NO_SMALL_DATA_GOT+${PAD_CDTOR+${SMALL_DATA_CTOR-${RELOCATING+${CTOR}}}}}
  ${NO_SMALL_DATA_GOT+${PAD_CDTOR+${SMALL_DATA_CTOR-${RELOCATING+${DTOR}}}}}
  ${NO_SMALL_DATA_GOT+${S_JCR}}

  ${RELOCATING+${DATARELRO}}
  ${OTHER_RELRO_SECTIONS}
  ${NO_SMALL_DATA_GOT+${TEXT_DYNAMIC-${DYNAMIC}}}
  ${NO_SMALL_DATA_GOT+${RELRO_NOW+${DATA_NONEXEC_PLT+${PLT}}}}
  ${NO_SMALL_DATA_GOT+${RELRO_NOW+${GOT}}}
  ${NO_SMALL_DATA_GOT+${RELRO_NOW-${SEPARATE_GOTPLT+${DATA_NONEXEC_PLT+${PLT}}}}}
  ${NO_SMALL_DATA_GOT+${RELRO_NOW-${SEPARATE_GOTPLT+${GOT}}}}
  ${NO_SMALL_DATA_GOT+${RELRO_NOW-${SEPARATE_GOTPLT+${GOTPLT}}}}
  ${RELOCATING+${DATA_SEGMENT_RELRO_END}}
  ${NO_SMALL_DATA_GOT+${RELRO_NOW-${SEPARATE_GOTPLT-${DATA_NONEXEC_PLT+${PLT}}}}}
  ${NO_SMALL_DATA_GOT+${RELRO_NOW-${SEPARATE_GOTPLT-${GOT}}}}

  ${NO_SMALL_DATA_GOT+${DATA_PLT+${PLT}}}

  .data         ${RELOCATING-0} :
  {
    ${RELOCATING+${DATA_START_SYMBOLS}}
    *(.data${RELOCATING+ .data.* .gnu.linkonce.d.*})
    KEEP (*(.gnu.linkonce.d.*personality*))
    ${CONSTRUCTING+SORT(CONSTRUCTORS)}
  }
  .data1        ${RELOCATING-0} : { *(.data1) }
  ${NO_SMALL_DATA_GOT-${S_TDATA}}
  ${NO_SMALL_DATA_GOT-${S_TBSS}}
  ${NO_SMALL_DATA_GOT-${S_EH_FRAME}}
  ${NO_SMALL_DATA_GOT-${S_GCC_EXC}}
  ${WRITABLE_RODATA+${RODATA}}
  ${OTHER_READWRITE_SECTIONS}
  ${NO_SMALL_DATA_GOT+${PAD_CDTOR+${SMALL_DATA_CTOR+${RELOCATING+${CTOR}}}}}
  ${NO_SMALL_DATA_GOT+${PAD_CDTOR+${SMALL_DATA_CTOR+${RELOCATING+${DTOR}}}}}
  ${NO_SMALL_DATA_GOT-${TEXT_DYNAMIC-${DYNAMIC}}}
  ${PAD_CDTOR-${RELOCATING+${CTOR}}}
  ${PAD_CDTOR-${RELOCATING+${DTOR}}}
  ${NO_SMALL_DATA_GOT-${S_JCR}}

  /* Pad PLT (if DATA_PLT).  */
  ${NO_SMALL_DATA_GOT-${DATA_PLT+${PAD_PLT+${PAD_PLT0}}}}
  ${NO_SMALL_DATA_GOT-${DATA_PLT+${PLT}}}
  ${NO_SMALL_DATA_GOT-${DATA_PLT+${PAD_PLT+${PAD_PLT1}}}}

  /* Pad GOT, PLT (if DATA_NONEXEC_PLT) and CTOR/DTOR (if PAD_CDTOR)
     to page aligned if PAD_GOT.  */
  ${PAD_GOT+${PAD_GOT0}}
  ${NO_SMALL_DATA_GOT-${DATA_NONEXEC_PLT+${PLT}}}
  ${RELOCATING+${OTHER_GOT_SYMBOLS}}
  ${NO_SMALL_DATA_GOT-${GOT}}
  /* If PAD_CDTOR, CTOR and DTOR relocated here to receive mprotect
     protection after relocations are finished - same as GOT.  */
  ${NO_SMALL_DATA_GOT-${PAD_CDTOR+${RELOCATING+${CTOR}}}}
  ${NO_SMALL_DATA_GOT-${PAD_CDTOR+${RELOCATING+${DTOR}}}}
  ${OTHER_GOT_SECTIONS}
  ${PAD_GOT+${PAD_GOT1}}

  /* Start of shared data sections.  */

  ${CREATE_SHLIB+${SDATA2}}
  ${CREATE_SHLIB+${SBSS2}}
  ${SDATA}
  ${OTHER_SDATA_SECTIONS}
  ${RELOCATING+_edata = .;}
  ${RELOCATING+PROVIDE (edata = .);}

  /* Start of BSS sections.  */

  ${RELOCATING+__bss_start = .;}
  ${RELOCATING+${OTHER_BSS_SYMBOLS}}
  ${SBSS}
  ${BSS_PLT+${PAD_PLT+${PAD_PLT0}}}
  ${BSS_PLT+${PLT}}
  ${BSS_PLT+${PAD_PLT+${PAD_PLT1}}}
  .bss          ${RELOCATING-0} :
  {
   *(.dynbss)
   *(.bss${RELOCATING+ .bss.* .gnu.linkonce.b.*})
   *(COMMON)
   /* Align here to ensure that the .bss section occupies space up to
      _end.  Align after .bss to ensure correct alignment even if the
      .bss section disappears because there are no input sections.  */
   ${RELOCATING+. = ALIGN(${ALIGNMENT});}
  }
  ${OTHER_BSS_SECTIONS}
  ${RELOCATING+. = ALIGN(${ALIGNMENT});}
  ${RELOCATING+_end = .;}
  ${RELOCATING+${OTHER_BSS_END_SYMBOLS}}
  ${RELOCATING+PROVIDE (end = .);}
  ${RELOCATING+${DATA_SEGMENT_END}}

  /* Stabs debugging sections.  */
  .stab          0 : { *(.stab) }
  .stabstr       0 : { *(.stabstr) }
  .stab.excl     0 : { *(.stab.excl) }
  .stab.exclstr  0 : { *(.stab.exclstr) }
  .stab.index    0 : { *(.stab.index) }
  .stab.indexstr 0 : { *(.stab.indexstr) }

  .comment       0 : { *(.comment) }

  /* DWARF debug sections.
     Symbols in the DWARF debugging sections are relative to the beginning
     of the section so we begin them at 0.  */

  /* DWARF 1 */
  .debug          0 : { *(.debug) }
  .line           0 : { *(.line) }

  /* GNU DWARF 1 extensions */
  .debug_srcinfo  0 : { *(.debug_srcinfo) }
  .debug_sfnames  0 : { *(.debug_sfnames) }

  /* DWARF 1.1 and DWARF 2 */
  .debug_aranges  0 : { *(.debug_aranges) }
  .debug_pubnames 0 : { *(.debug_pubnames) }

  /* DWARF 2 */
  .debug_info     0 : { *(.debug_info .gnu.linkonce.wi.*) }
  .debug_abbrev   0 : { *(.debug_abbrev) }
  .debug_line     0 : { *(.debug_line) }
  .debug_frame    0 : { *(.debug_frame) }
  .debug_str      0 : { *(.debug_str) }
  .debug_loc      0 : { *(.debug_loc) }
  .debug_macinfo  0 : { *(.debug_macinfo) }

  /* SGI/MIPS DWARF 2 extensions */
  .debug_weaknames 0 : { *(.debug_weaknames) }
  .debug_funcnames 0 : { *(.debug_funcnames) }
  .debug_typenames 0 : { *(.debug_typenames) }
  .debug_varnames  0 : { *(.debug_varnames) }

  ${STACK_ADDR+${STACK}}
  ${OTHER_SECTIONS}
  ${RELOCATING+${OTHER_END_SYMBOLS}}
  ${RELOCATING+${STACKNOTE}}
}
EOF
@


1.21
log
@merge openbsd's merger of GNU binutils 2.15
from miod@@
@
text
@d1 1
a1 1
# $MirBSD: src/gnu/usr.bin/binutils/src/ld/scripttempl/elf.sc,v 1.20 2004/09/16 22:28:13 tg Exp $
d7 2
d22 3
d103 1
a103 1
    DATA_SEGMENT_RELRO_GOTPLT_END=". = DATA_SEGMENT_RELRO_END (. + ${SEPARATE_GOTPLT});"
d105 1
a105 1
    DATA_SEGMENT_RELRO_END=". = DATA_SEGMENT_RELRO_END (.);"
d115 2
a116 1
    GOTPLT=".got.plt      ${RELOCATING-0} : { ${RELOCATING+${DATA_SEGMENT_RELRO_GOTPLT_END}} *(.got.plt) }"
d369 1
a369 1
  .preinit_array   ${RELOCATING-0} : { *(.preinit_array) }
d373 1
a373 1
  .init_array   ${RELOCATING-0} : { *(.init_array) }
d377 1
a377 1
  .fini_array   ${RELOCATING-0} : { *(.fini_array) }
d380 2
a381 2
  ${NO_SMALL_DATA_GOT+${PAD_CDTOR+${RELOCATING+${CTOR}}}}
  ${NO_SMALL_DATA_GOT+${PAD_CDTOR+${RELOCATING+${DTOR}}}}
d412 2
@


1.20
log
@update to most recent copy of binutils, based upon the vendor import branch cvs-200409160000 and our binutils port
@
text
@d1 1
a1 1
# $MirBSD: testing/binutils/ld/scripttempl/elf.sc,v 1.5 2004/09/16 21:19:34 tg Exp $
d151 8
a158 6
test "$NO_PAD" = "y" && PAD_RO0="${RELOCATING+${RODATA_ALIGN} + ${RODATA_ALIGN_ADD_VAL};}"
test "$NO_PAD" = "y" && PAD_PLT0="${RELOCATING+. = ALIGN(${MAXPAGESIZE}) + (. & (${MAXPAGESIZE} - 1));} .pltpad0 ${RELOCATING-0} : { ${RELOCATING+__plt_start = .;} }"
test "$NO_PAD" = "y" && PAD_PLT1=".pltpad1 ${RELOCATING-0} : { ${RELOCATING+__plt_end = .;}} ${RELOCATING+. = ALIGN(${MAXPAGESIZE}) + (. & (${MAXPAGESIZE} - 1));}"
test "$NO_PAD" = "y" && PAD_GOT0="${RELOCATING+. = ALIGN(${MAXPAGESIZE}) + (. & (${MAXPAGESIZE} - 1));} .gotpad0 ${RELOCATING-0} : { ${RELOCATING+__got_start = .;} }"
test "$NO_PAD" = "y" && PAD_GOT1=".gotpad1 ${RELOCATING-0} : { ${RELOCATING+__got_end = .;}} ${RELOCATING+. = ALIGN(${MAXPAGESIZE}) + (. & (${MAXPAGESIZE} - 1));}"
test "$NO_PAD" = "y" && PAD_CDTOR=
@


1.19
log
@revert to 1.16 - it did work out well, except for make(1)
now we're back at 99.5%-openbsd-like section ordering.

this commit message sponsored by ed:

tg@@odem:.../usr.bin/binutils/src/ld/scripttempl $ cvs -d tg@@herc6:/cvs ci
cvs commit: Examining .
292

what do you do? think 3 seconds. find out you're in ed(1) ;-)
@
text
@d1 1
a1 1
# $MirBSD: src/gnu/usr.bin/binutils/src/ld/scripttempl/elf.sc,v 1.16 2004/08/13 07:02:08 tg Exp $
@


1.18
log
@uh no. bad idea.

better: move them where the relro sections are.
@
text
@d1 1
a1 1
# $MirBSD: src/gnu/usr.bin/binutils/src/ld/scripttempl/elf.sc,v 1.17 2004/08/13 17:20:58 tg Exp $
a351 2
  ${PAD_GOT+${S_EH_FRAME}}
  ${PAD_GOT+${S_GCC_EXC}}
a374 1
  ${PAD_GOT+${S_JCR}}
a378 1
  ${PAD_GOT+${TEXT_DYNAMIC-${DYNAMIC}}}
d400 2
a401 2
  ${PAD_GOT-${NO_SMALL_DATA_GOT-${S_EH_FRAME}}}
  ${PAD_GOT-${NO_SMALL_DATA_GOT-${S_GCC_EXC}}}
d404 1
a404 1
  ${PAD_GOT-${NO_SMALL_DATA_GOT-${TEXT_DYNAMIC-${DYNAMIC}}}}
d407 1
a407 1
  ${PAD_GOT-${NO_SMALL_DATA_GOT-${S_JCR}}}
@


1.17
log
@move some of the sections FSF moved before .data right after our
got/ctor/dtor section, and pad them another page in case they
don't behave as nicely.
@
text
@d1 1
a1 1
# $MirBSD: src/gnu/usr.bin/binutils/src/ld/scripttempl/elf.sc,v 1.16 2004/08/13 07:02:08 tg Exp $
a155 1
test "$NO_PAD" = "y" && PAD_GOT2="${RELOCATING+. = ALIGN(${MAXPAGESIZE}) + (. & (${MAXPAGESIZE} - 1));}"
d352 2
d377 1
d382 1
a428 7
  /* In case these don't behave too nicely, pad again.  */
  ${PAD_GOT+${PAD_GOT2}}
  ${PAD_GOT+${S_EH_FRAME}}
  ${PAD_GOT+${S_GCC_EXC}}
  ${PAD_GOT+${TEXT_DYNAMIC-${DYNAMIC}}}
  ${PAD_GOT+${S_JCR}}
  /* End of GOT and associated sections.  */
@


1.16
log
@regen and fix errors for now
@
text
@d1 1
a1 1
# $MirBSD: src/gnu/usr.bin/binutils/src/ld/scripttempl/elf.sc,v 1.15 2004/08/13 06:53:36 tg Exp $
d156 1
d401 2
a402 2
  ${NO_SMALL_DATA_GOT-${S_EH_FRAME}}
  ${NO_SMALL_DATA_GOT-${S_GCC_EXC}}
d405 1
a405 1
  ${NO_SMALL_DATA_GOT-${TEXT_DYNAMIC-${DYNAMIC}}}
d408 1
a408 1
  ${NO_SMALL_DATA_GOT-${S_JCR}}
d426 7
@


1.15
log
@another one
@
text
@d1 1
a1 1
# $MirBSD: src/gnu/usr.bin/binutils/src/ld/scripttempl/elf.sc,v 1.14 2004/08/13 06:51:05 tg Exp $
d158 5
a162 4
test -z "$S_EH_FRAME" && S_EH_FRAME='.eh_frame     ${RELOCATING-0} : ONLY_IF_RW { KEEP (*(.eh_frame)) }'
test -z "$S_GCC_EXC" && S_GCC_EXC='.gcc_except_table ${RELOCATING-0} : ONLY_IF_RW { KEEP (*(.gcc_except_table)) *(.gcc_except_table.*) }'
test -z "$S_TDATA" && S_TDATA='.tdata	${RELOCATING-0} : { *(.tdata${RELOCATING+ .tdata.* .gnu.linkonce.td.*}) }'
test -z "$S_TBSS" && S_TBSS='.tbss		${RELOCATING-0} : { *(.tbss${RELOCATING+ .tbss.* .gnu.linkonce.tb.*})${RELOCATING+ *(.tcommon)} }'
d374 1
a374 1
  ${NO_SMALL_DATA_GOT+.jcr          ${RELOCATING-0} : { KEEP (*(.jcr)) }}
d388 1
a388 1
  ${NO_SMALL_DATA_GOT+${DATA_PLT+${PLT}}
d407 1
a407 1
  ${NO_SMALL_DATA_GOT-.jcr          ${RELOCATING-0} : { KEEP (*(.jcr)) }}
@


1.14
log
@when here, allow overriding
@
text
@d1 1
a1 1
# $MirBSD: src/gnu/usr.bin/binutils/src/ld/scripttempl/elf.sc,v 1.13 2004/08/13 06:50:27 tg Exp $
d387 1
a387 1
  ${NO_SMALL_DATA_GOT+${DATA_PLT+${PLT}}}
@


1.13
log
@fix syntax errors
@
text
@d1 1
a1 1
# $MirBSD: src/gnu/usr.bin/binutils/src/ld/scripttempl/elf.sc,v 1.12 2004/08/13 06:20:52 tg Exp $
d158 4
a161 4
S_EH_FRAME='.eh_frame     ${RELOCATING-0} : ONLY_IF_RW { KEEP (*(.eh_frame)) }'
S_GCC_EXC='.gcc_except_table ${RELOCATING-0} : ONLY_IF_RW { KEEP (*(.gcc_except_table)) *(.gcc_except_table.*) }'
S_TDATA='.tdata	${RELOCATING-0} : { *(.tdata${RELOCATING+ .tdata.* .gnu.linkonce.td.*}) }'
S_TBSS='.tbss		${RELOCATING-0} : { *(.tbss${RELOCATING+ .tbss.* .gnu.linkonce.tb.*})${RELOCATING+ *(.tcommon)} }'
@


1.12
log
@provide more ways PLT can exactly prepend GOT (openbsd rev 1.14)
@
text
@d1 1
a1 1
# $MirBSD: src/gnu/usr.bin/binutils/src/ld/scripttempl/elf.sc,v 1.11 2004/08/13 06:16:03 tg Exp $
d158 4
d349 4
a352 4
  ${NO_SMALL_DATA_GOT+.eh_frame     ${RELOCATING-0} : ONLY_IF_RW { KEEP (*(.eh_frame)) }}
  ${NO_SMALL_DATA_GOT+.gcc_except_table ${RELOCATING-0} : ONLY_IF_RW { KEEP (*(.gcc_except_table)) *(.gcc_except_table.*) }}
  ${NO_SMALL_DATA_GOT+.tdata	${RELOCATING-0} : { *(.tdata${RELOCATING+ .tdata.* .gnu.linkonce.td.*}) }}
  ${NO_SMALL_DATA_GOT+.tbss		${RELOCATING-0} : { *(.tbss${RELOCATING+ .tbss.* .gnu.linkonce.tb.*})${RELOCATING+ *(.tcommon)} }}
d397 4
a400 4
  ${NO_SMALL_DATA_GOT-.tdata	${RELOCATING-0} : { *(.tdata${RELOCATING+ .tdata.* .gnu.linkonce.td.*}) }}
  ${NO_SMALL_DATA_GOT-.tbss		${RELOCATING-0} : { *(.tbss${RELOCATING+ .tbss.* .gnu.linkonce.tb.*})${RELOCATING+ *(.tcommon)} }}
  ${NO_SMALL_DATA_GOT-.eh_frame     ${RELOCATING-0} : ONLY_IF_RW { KEEP (*(.eh_frame)) }}
  ${NO_SMALL_DATA_GOT-.gcc_except_table ${RELOCATING-0} : ONLY_IF_RW { KEEP (*(.gcc_except_table)) *(.gcc_except_table.*) }}
@


1.11
log
@finish merge of 1.43:
        * scripttempl/elf.sc: Unset SEPARATE_GOTPLT if RELRO_NOW is set.
        Create separate .got.plt section if SEPARATE_GOTPLT.

- of course not if no NO_SMALL_DATA_GOT (ie. PAD_GOT or no NO_SMALL_DATA)
@
text
@d1 1
a1 1
# $MirBSD: src/gnu/usr.bin/binutils/src/ld/scripttempl/elf.sc,v 1.10 2004/08/13 06:09:37 tg Exp $
d374 1
d376 1
d380 1
d412 1
a412 1
  ${DATA_NONEXEC_PLT+${PLT}}
@


1.10
log
@more partial merging of 1.43:
        Add DATA_SEGMENT_RELRO_END directive.
        Include OTHER_RELRO_SECTIONS.
@
text
@d1 1
a1 1
# $MirBSD: src/gnu/usr.bin/binutils/src/ld/scripttempl/elf.sc,v 1.9 2004/08/13 06:04:26 tg Exp $
d44 4
d86 1
d89 1
d91 2
d97 5
d105 8
a112 1
test -z "$GOT" && GOT=".got          ${RELOCATING-0} : { *(.got.plt) *(.got) }"
d157 1
a157 1

d374 3
d378 1
a378 1
  ${NO_SMALL_DATA_GOT+${GOT}}
@


1.9
log
@more partial merging of 1.43:

        Move sections which are only written during relocation handling
        to the beginning of RW segment.

- accompany the conditional move
@
text
@d1 1
a1 1
# $MirBSD: src/gnu/usr.bin/binutils/src/ld/scripttempl/elf.sc,v 1.8 2004/08/13 05:56:52 tg Exp $
d14 2
d94 1
d233 2
d351 2
d354 1
a354 1

@


1.8
log
@partial merge of binutils cvsweb 1.43:
If NO_SMALL_DATA, move .got before .data

- but only if PAD_GOT is not defined
@
text
@d1 1
a1 1
# $MirBSD: src/gnu/usr.bin/binutils/src/ld/scripttempl/elf.sc,v 1.7 2004/08/13 05:36:52 tg Exp $
d320 5
d342 6
d350 2
d360 4
a363 4
  .tdata	${RELOCATING-0} : { *(.tdata${RELOCATING+ .tdata.* .gnu.linkonce.td.*}) }
  .tbss		${RELOCATING-0} : { *(.tbss${RELOCATING+ .tbss.* .gnu.linkonce.tb.*})${RELOCATING+ *(.tcommon)} }
  .eh_frame     ${RELOCATING-0} : ONLY_IF_RW { KEEP (*(.eh_frame)) }
  .gcc_except_table ${RELOCATING-0} : ONLY_IF_RW { KEEP (*(.gcc_except_table)) *(.gcc_except_table.*) }
d366 1
a366 1
  ${TEXT_DYNAMIC-${DYNAMIC}}
d369 1
a369 1
  .jcr          ${RELOCATING-0} : { KEEP (*(.jcr)) }
d372 3
a374 3
  ${DATA_PLT+${PAD_PLT+${PAD_PLT0}}}
  ${DATA_PLT+${PLT}}
  ${DATA_PLT+${PAD_PLT+${PAD_PLT1}}}
d384 2
a385 2
  ${PAD_CDTOR+${RELOCATING+${CTOR}}}
  ${PAD_CDTOR+${RELOCATING+${DTOR}}}
@


1.7
log
@merge PLT_BEFORE_GOT (binutils cvsweb 1.46) with our DATA_NONEXEC_PLT
@
text
@d1 1
a1 1
# $MirBSD: src/gnu/usr.bin/binutils/src/ld/scripttempl/elf.sc,v 1.6 2004/08/13 05:33:19 tg Exp $
d80 2
d123 2
d337 2
d368 1
a368 1
  ${GOT}
@


1.6
log
@binutils cvsweb 1.42, 1.45: some KEEP diffs
binutils cvsweb 1.44: place exception handling segments into r/o data
			area if all segments are read-only
@
text
@d1 1
a1 1
# $MirBSD: src/gnu/usr.bin/binutils/src/ld/scripttempl/elf.sc,v 1.5 2004/08/13 05:27:32 tg Exp $
d28 1
d79 1
@


1.5
log
@pull in diffs from binutils 2.14 to 2.15
@
text
@d1 1
a1 1
# $MirBSD: src/gnu/usr.bin/binutils/src/ld/scripttempl/elf.sc,v 1.4 2004/08/13 05:24:05 tg Exp $
d280 1
d304 2
d335 1
d341 2
a342 2
  .eh_frame     ${RELOCATING-0} : { KEEP (*(.eh_frame)) }
  .gcc_except_table ${RELOCATING-0} : { *(.gcc_except_table) }
@


1.4
log
@throw in OpenBSD W^X and the like mods, with more commentary.
@
text
@d1 1
a1 1
# $MirBSD: src/gnu/usr.bin/binutils/src/ld/scripttempl/elf.sc,v 1.3 2004/08/13 05:12:56 tg Exp $
d76 2
a77 2
test -n "$CREATE_SHLIB" && test -n "$SHLIB_DATA_ADDR" && COMMONPAGESIZE=""
test -z "$CREATE_SHLIB" && test -n "$DATA_ADDR" && COMMONPAGESIZE=""
d86 1
d89 1
d195 1
a195 1
  ${CREATE_SHLIB-${RELOCATING+. = ${TEXT_BASE_ADDRESS};}}
d197 1
d307 1
a307 1
  ${CREATE_SHLIB-${RELOCATING+. = ${DATA_ADDR-${DATA_SEGMENT_ALIGN}};}}
d309 1
d356 1
a356 1
  .got          ${RELOCATING-0} : { *(.got.plt) *(.got) }
d442 1
@


1.3
log
@revert to 2.14 (+whitespace, RCS Id)
@
text
@d1 1
a1 1
# $MirBSD$
d118 9
d262 3
d272 1
a272 1
  ${DATA_PLT-${BSS_PLT-${PLT}}}
d290 4
d301 1
d338 2
a339 2
  ${RELOCATING+${CTOR}}
  ${RELOCATING+${DTOR}}
d341 3
d345 6
d353 4
d358 4
d368 3
d374 1
d376 1
@


1.2
log
@This is as far as I come now.
* rebuild base
* partial sync lists
* concatenate X11 lists, too
* add provision for building libgcc.so (commented out - it breaks)
@
text
@d1 1
a1 1
# $MirBSD: src/gnu/usr.bin/binutils/src/ld/scripttempl/elf.sc,v 1.1.3.2 2004/08/12 20:09:58 tg Exp $
a13 2
#	OTHER_RELRO_SECTIONS - other than .data.rel.ro ...
#		(e.g. PPC32 .fixup, .got[12])
a27 1
#	PLT_BEFORE_GOT - .plt just before .got when .plt is in data segement.
d30 1
a30 1
#	EMBEDDED - whether this is for an embedded system. 
a40 4
#	SEPARATE_GOTPLT - if set, .got.plt should be separate output section,
#		so that .got can be in the RELRO area.  It should be set to
#		the number of bytes in the beginning of .got.plt which can be
#		in the RELRO area as well.
d76 2
a77 3
test -n "$CREATE_SHLIB$CREATE_PIE" && test -n "$SHLIB_DATA_ADDR" && COMMONPAGESIZE=""
test -z "$CREATE_SHLIB$CREATE_PIE" && test -n "$DATA_ADDR" && COMMONPAGESIZE=""
test -n "$RELRO_NOW" && unset SEPARATE_GOTPLT
a78 2
DATA_SEGMENT_RELRO_END=""
DATA_SEGMENT_RELRO_GOTPLT_END=""
a82 5
  if test -n "${SEPARATE_GOTPLT}"; then
    DATA_SEGMENT_RELRO_GOTPLT_END=". = DATA_SEGMENT_RELRO_END (. + ${SEPARATE_GOTPLT});"
  else
    DATA_SEGMENT_RELRO_END=". = DATA_SEGMENT_RELRO_END (.);"
  fi
a85 8
if test -z "$GOT"; then
  if test -z "$SEPARATE_GOTPLT"; then
    GOT=".got          ${RELOCATING-0} : { *(.got.plt) *(.got) }"
  else
    GOT=".got          ${RELOCATING-0} : { *(.got) }"
    GOTPLT=".got.plt      ${RELOCATING-0} : { ${RELOCATING+${DATA_SEGMENT_RELRO_GOTPLT_END}} *(.got.plt) }"
  fi
fi
a87 2
DATARELRO=".data.rel.ro : { *(.data.rel.ro.local) *(.data.rel.ro*) }"
STACKNOTE="/DISCARD/ : { *(.note.GNU-stack) }"
d103 1
a103 1
  .sdata        ${RELOCATING-0} : 
a116 2
else
  NO_SMALL_DATA=" "
d118 1
a118 11
RODATA_ALIGN_ADD_VAL="${CREATE_SHLIB-${RODATA_ALIGN_ADD:-0}} ${CREATE_SHLIB+0}"
test "$LD_FLAG" = "n" || test "$LD_FLAG" = "N" || test "$LD_FLAG" = "Z" || NO_PAD="y"
test "$NO_PAD" = "y" && PAD_RO0="${RELOCATING+${RODATA_ALIGN} + ${RODATA_ALIGN_ADD_VAL};}"
test "$NO_PAD" = "y" && PAD_PLT0="${RELOCATING+. = ALIGN(${MAXPAGESIZE}) + (. & (${MAXPAGESIZE} - 1));} .pltpad0 ${RELOCATING-0} : { ${RELOCATING+__plt_start = .;} }"
test "$NO_PAD" = "y" && PAD_PLT1=".pltpad1 ${RELOCATING-0} : { ${RELOCATING+__plt_end = .;}} ${RELOCATING+. = ALIGN(${MAXPAGESIZE}) + (. & (${MAXPAGESIZE} - 1));}"
test "$NO_PAD" = "y" && PAD_GOT0="${RELOCATING+. = ALIGN(${MAXPAGESIZE}) + (. & (${MAXPAGESIZE} - 1));} .gotpad0 ${RELOCATING-0} : { ${RELOCATING+__got_start = .;} }"
test "$NO_PAD" = "y" && PAD_GOT1=".gotpad1 ${RELOCATING-0} : { ${RELOCATING+__got_end = .;}} ${RELOCATING+. = ALIGN(${MAXPAGESIZE}) + (. & (${MAXPAGESIZE} - 1));}"
test "$NO_PAD" = "y" && PAD_CDTOR=

test -n "$SEPARATE_GOTPLT" && SEPARATE_GOTPLT=" "
CTOR=".ctors        ${CONSTRUCTING-0} : 
d184 1
a184 1
  ${CREATE_SHLIB-${CREATE_PIE-${RELOCATING+PROVIDE (__executable_start = ${TEXT_START_ADDR}); . = ${TEXT_BASE_ADDRESS};}}}
a185 1
  ${CREATE_PIE+${RELOCATING+. = ${SHLIB_TEXT_START_ADDR:-0} + SIZEOF_HEADERS;}}
a211 2
  .rel.data.rel.ro ${RELOCATING-0} : { *(.rel.data.rel.ro${RELOCATING+*}) }
  .rela.data.rel.ro ${RELOCATING-0} : { *(.rel.data.rel.ro${RELOCATING+*}) }
d253 2
a254 2
  .init         ${RELOCATING-0} : 
  { 
d260 1
a260 1
  ${DATA_PLT-${DATA_NONEXEC_PLT-${BSS_PLT-${PLT}}}}
a264 1
    KEEP (*(.text.*personality*))
a277 1
  ${PAD_RO+${PAD_RO0}}
d287 1
a287 1
  ${CREATE_SHLIB-${CREATE_PIE-${RELOCATING+. = ${DATA_ADDR-${DATA_SEGMENT_ALIGN}};}}}
a288 1
  ${CREATE_PIE+${RELOCATING+. = ${SHLIB_DATA_ADDR-${DATA_SEGMENT_ALIGN}};}}
a310 1
    KEEP (*(.gnu.linkonce.d.*personality*))
a313 2

  /* Thread Local Storage sections  */
a315 2

  /* Exception handling  */
d317 1
a317 2
  .gcc_except_table ${RELOCATING-0} : { KEEP (*(.gcc_except_table)) *(.gcc_except_table.*) }

d321 2
a322 2
  ${PAD_CDTOR-${RELOCATING+${CTOR}}}
  ${PAD_CDTOR-${RELOCATING+${DTOR}}}
d324 4
a327 37

  ${RELOCATING+${DATARELRO}}
  ${OTHER_RELRO_SECTIONS}
  ${RELOCATING+${DATA_SEGMENT_RELRO_END}}

  /* pad CTOR/DTOR, GOT (and PLT if DATA_PLT) to page aligned if PAD_GOT */
  ${DATA_PLT+${PLT_BEFORE_GOT+${PAD_PLT+${PAD_PLT0}}}}
  ${DATA_PLT+${PLT_BEFORE_GOT+${PLT}}}
  ${DATA_PLT+${PLT_BEFORE_GOT+${PAD_PLT+${PAD_PLT1}}}}
  /* pad GOT (and PLT if DATA_PLT) to page aligned if PAD_GOT */
  ${NO_SMALL_DATA+${PAD_GOT+${PAD_GOT0}}}
  ${NO_SMALL_DATA+${RELOCATING+${OTHER_GOT_SYMBOLS}}}
  ${NO_SMALL_DATA+${RELRO_NOW+${GOT}}}
  ${NO_SMALL_DATA+${RELRO_NOW-${SEPARATE_GOTPLT+${GOT}}}}
  ${NO_SMALL_DATA+${RELRO_NOW-${SEPARATE_GOTPLT+${GOTPLT}}}}
  ${NO_SMALL_DATA+${RELRO_NOW-${SEPARATE_GOTPLT-${GOT}}}}
  ${NO_SMALL_DATA+${OTHER_GOT_SECTIONS}}
  /* If PAD_CDTOR, CTOR and DTOR relocated here to receive mprotect
     protection after relocation are finished same as GOT  */
  ${NO_SMALL_DATA+${PAD_CDTOR+${RELOCATING+${CTOR}}}}
  ${NO_SMALL_DATA+${PAD_CDTOR+${RELOCATING+${DTOR}}}}
  ${NO_SMALL_DATA+${PAD_GOT+${PAD_GOT1}}}

  ${DATA_PLT+${PLT_BEFORE_GOT-${PAD_PLT+${PAD_PLT0}}}}
  ${DATA_PLT+${PLT_BEFORE_GOT-${PLT}}}
  ${DATA_PLT+${PLT_BEFORE_GOT-${PAD_PLT+${PAD_PLT1}}}}

  ${NO_SMALL_DATA-${PAD_GOT+${PAD_GOT0}}}
  ${DATA_NONEXEC_PLT+${PLT}}
  ${NO_SMALL_DATA-${RELOCATING+${OTHER_GOT_SYMBOLS}}}
  ${NO_SMALL_DATA-${GOT}}
  ${NO_SMALL_DATA-${OTHER_GOT_SECTIONS}}
  /* If PAD_CDTOR, CTOR and DTOR relocated here to receive mprotect
     protection after relocation are finished same as GOT  */
  ${NO_SMALL_DATA-${PAD_CDTOR+${RELOCATING+${CTOR}}}}
  ${NO_SMALL_DATA-${PAD_CDTOR+${RELOCATING+${DTOR}}}}
  ${NO_SMALL_DATA-${PAD_GOT+${PAD_GOT1}}}
a336 1
  ${BSS_PLT+${PAD_PLT+${PAD_PLT0}}}
a337 1
  ${BSS_PLT+${PAD_PLT+${PAD_PLT1}}}
a398 1
  ${RELOCATING+${STACKNOTE}}
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
# $MirBSD: testing/binutils/ld/scripttempl/elf.sc,v 1.2 2004/08/11 19:58:59 tg Exp $
d14 2
d30 1
d33 1
a33 1
#	EMBEDDED - whether this is for an embedded system.
d44 4
d85 1
d87 2
d93 5
d101 8
a108 1
test -z "$GOT" && GOT=".got          ${RELOCATING-0} : { *(.got.plt) *(.got) }"
d111 1
d128 1
a128 1
  .sdata        ${RELOCATING-0} :
d142 2
d154 2
a155 1
CTOR=".ctors        ${CONSTRUCTING-0} :
d250 2
d293 2
a294 2
  .init         ${RELOCATING-0} :
  {
d305 1
d354 1
d358 2
d362 2
d365 2
a366 1
  .gcc_except_table ${RELOCATING-0} : { *(.gcc_except_table) }
d374 4
d379 22
a400 4
  ${DATA_PLT+${PAD_PLT+${PAD_PLT0}}}
  ${DATA_PLT+${PLT}}
  ${DATA_PLT+${PAD_PLT+${PAD_PLT1}}}
  ${PAD_GOT+${PAD_GOT0}}
d402 3
a404 2
  ${RELOCATING+${OTHER_GOT_SYMBOLS}}
  ${GOT}
d407 3
a409 4
  ${PAD_CDTOR+${RELOCATING+${CTOR}}}
  ${PAD_CDTOR+${RELOCATING+${DTOR}}}
  ${OTHER_GOT_SECTIONS}
  ${PAD_GOT+${PAD_GOT1}}
@


1.1.2.1
log
@binutils-040916.tar.bz2 from sources.deadrat.com for src/ for later use
@
text
@d1 1
a13 2
#	OTHER_RELRO_SECTIONS - other than .data.rel.ro ...
#		(e.g. PPC32 .fixup, .got[12])
a27 1
#	PLT_BEFORE_GOT - .plt just before .got when .plt is in data segement.
d30 1
a30 1
#	EMBEDDED - whether this is for an embedded system. 
a40 4
#	SEPARATE_GOTPLT - if set, .got.plt should be separate output section,
#		so that .got can be in the RELRO area.  It should be set to
#		the number of bytes in the beginning of .got.plt which can be
#		in the RELRO area as well.
a77 1
test -n "$RELRO_NOW" && unset SEPARATE_GOTPLT
a78 2
DATA_SEGMENT_RELRO_END=""
DATA_SEGMENT_RELRO_GOTPLT_END=""
a82 5
  if test -n "${SEPARATE_GOTPLT}"; then
    DATA_SEGMENT_RELRO_GOTPLT_END=". = DATA_SEGMENT_RELRO_END (. + ${SEPARATE_GOTPLT});"
  else
    DATA_SEGMENT_RELRO_END=". = DATA_SEGMENT_RELRO_END (.);"
  fi
d86 1
a86 8
if test -z "$GOT"; then
  if test -z "$SEPARATE_GOTPLT"; then
    GOT=".got          ${RELOCATING-0} : { *(.got.plt) *(.got) }"
  else
    GOT=".got          ${RELOCATING-0} : { *(.got) }"
    GOTPLT=".got.plt      ${RELOCATING-0} : { ${RELOCATING+${DATA_SEGMENT_RELRO_GOTPLT_END}} *(.got.plt) }"
  fi
fi
a88 1
DATARELRO=".data.rel.ro : { *(.data.rel.ro.local) *(.data.rel.ro*) }"
d105 1
a105 1
  .sdata        ${RELOCATING-0} : 
a118 2
else
  NO_SMALL_DATA=" "
d120 10
a129 2
test -n "$SEPARATE_GOTPLT" && SEPARATE_GOTPLT=" "
CTOR=".ctors        ${CONSTRUCTING-0} : 
a223 2
  .rel.data.rel.ro ${RELOCATING-0} : { *(.rel.data.rel.ro${RELOCATING+*}) }
  .rela.data.rel.ro ${RELOCATING-0} : { *(.rel.data.rel.ro${RELOCATING+*}) }
d265 2
a266 2
  .init         ${RELOCATING-0} : 
  { 
d272 1
a272 1
  ${DATA_PLT-${BSS_PLT-${PLT}}}
a276 1
    KEEP (*(.text.*personality*))
d290 1
a296 2
  .eh_frame     ${RELOCATING-0} : ONLY_IF_RO { KEEP (*(.eh_frame)) }
  .gcc_except_table ${RELOCATING-0} : ONLY_IF_RO { KEEP (*(.gcc_except_table)) *(.gcc_except_table.*) }
a303 8
  /* Exception handling  */
  .eh_frame     ${RELOCATING-0} : ONLY_IF_RW { KEEP (*(.eh_frame)) }
  .gcc_except_table ${RELOCATING-0} : ONLY_IF_RW { KEEP (*(.gcc_except_table)) *(.gcc_except_table.*) }

  /* Thread Local Storage sections  */
  .tdata	${RELOCATING-0} : { *(.tdata${RELOCATING+ .tdata.* .gnu.linkonce.td.*}) }
  .tbss		${RELOCATING-0} : { *(.tbss${RELOCATING+ .tbss.* .gnu.linkonce.tb.*})${RELOCATING+ *(.tcommon)} }

a320 15
  ${RELOCATING+${CTOR}}
  ${RELOCATING+${DTOR}}
  .jcr          ${RELOCATING-0} : { KEEP (*(.jcr)) }

  ${RELOCATING+${DATARELRO}}
  ${OTHER_RELRO_SECTIONS}
  ${TEXT_DYNAMIC-${DYNAMIC}}
  ${NO_SMALL_DATA+${RELRO_NOW+${GOT}}}
  ${NO_SMALL_DATA+${RELRO_NOW-${SEPARATE_GOTPLT+${GOT}}}}
  ${NO_SMALL_DATA+${RELRO_NOW-${SEPARATE_GOTPLT+${GOTPLT}}}}
  ${RELOCATING+${DATA_SEGMENT_RELRO_END}}
  ${NO_SMALL_DATA+${RELRO_NOW-${SEPARATE_GOTPLT-${GOT}}}}

  ${DATA_PLT+${PLT_BEFORE_GOT-${PLT}}}

a324 1
    KEEP (*(.gnu.linkonce.d.*personality*))
d328 4
d334 11
a344 1
  ${DATA_PLT+${PLT_BEFORE_GOT+${PLT}}}
d346 5
a350 1
  ${NO_SMALL_DATA-${GOT}}
d352 1
d362 1
d364 1
@


1.1.2.2
log
@binutils-050108.tar.bz2
@
text
@a5 2
#	SMALL_DATA_CTOR - .ctors contains small data.
#	SMALL_DATA_DTOR - .dtors contains small data.
a18 3
#       TEXT_START_ADDR - the first byte of the text segment, after any
#               headers.
#       TEXT_BASE_ADDRESS - the first byte of the text segment.
d93 1
a93 1
    DATA_SEGMENT_RELRO_GOTPLT_END=". = DATA_SEGMENT_RELRO_END (${SEPARATE_GOTPLT}, .);"
d95 1
a95 1
    DATA_SEGMENT_RELRO_END=". = DATA_SEGMENT_RELRO_END (0, .);"
d105 1
a105 2
    GOTPLT="${RELOCATING+${DATA_SEGMENT_RELRO_GOTPLT_END}}
  .got.plt      ${RELOCATING-0} : { *(.got.plt) }"
d338 1
a338 1
  .preinit_array   ${RELOCATING-0} : { KEEP (*(.preinit_array)) }
d342 1
a342 1
  .init_array   ${RELOCATING-0} : { KEEP (*(.init_array)) }
d346 1
a346 1
  .fini_array   ${RELOCATING-0} : { KEEP (*(.fini_array)) }
d349 2
a350 2
  ${SMALL_DATA_CTOR-${RELOCATING+${CTOR}}}
  ${SMALL_DATA_DTOR-${RELOCATING+${DTOR}}}
a373 2
  ${SMALL_DATA_CTOR+${RELOCATING+${CTOR}}}
  ${SMALL_DATA_DTOR+${RELOCATING+${DTOR}}}
@


1.1.3.1
log
@Import testing binutils source into main tree
@
text
@@


1.1.3.2
log
@sync with testing_SYNC_C from testing/binutils, which apparently works
@
text
@d1 1
a1 1
# $MirBSD: testing/binutils/ld/scripttempl/elf.sc,v 1.4 2004/08/12 15:23:02 tg Exp $
a13 2
#	OTHER_RELRO_SECTIONS - other than .data.rel.ro ...
#		(e.g. PPC32 .fixup, .got[12])
a27 1
#	PLT_BEFORE_GOT - .plt just before .got when .plt is in data segement.
d30 1
a30 1
#	EMBEDDED - whether this is for an embedded system. 
a40 4
#	SEPARATE_GOTPLT - if set, .got.plt should be separate output section,
#		so that .got can be in the RELRO area.  It should be set to
#		the number of bytes in the beginning of .got.plt which can be
#		in the RELRO area as well.
a77 1
test -n "$RELRO_NOW" && unset SEPARATE_GOTPLT
a78 2
DATA_SEGMENT_RELRO_END=""
DATA_SEGMENT_RELRO_GOTPLT_END=""
a82 5
  if test -n "${SEPARATE_GOTPLT}"; then
    DATA_SEGMENT_RELRO_GOTPLT_END=". = DATA_SEGMENT_RELRO_END (. + ${SEPARATE_GOTPLT});"
  else
    DATA_SEGMENT_RELRO_END=". = DATA_SEGMENT_RELRO_END (.);"
  fi
d86 1
a86 8
if test -z "$GOT"; then
  if test -z "$SEPARATE_GOTPLT"; then
    GOT=".got          ${RELOCATING-0} : { *(.got.plt) *(.got) }"
  else
    GOT=".got          ${RELOCATING-0} : { *(.got) }"
    GOTPLT=".got.plt      ${RELOCATING-0} : { ${RELOCATING+${DATA_SEGMENT_RELRO_GOTPLT_END}} *(.got.plt) }"
  fi
fi
a88 1
DATARELRO=".data.rel.ro : { *(.data.rel.ro.local) *(.data.rel.ro*) }"
d105 1
a105 1
  .sdata        ${RELOCATING-0} : 
a118 2
else
  NO_SMALL_DATA=" "
d129 1
a129 2
test -n "$SEPARATE_GOTPLT" && SEPARATE_GOTPLT=" "
CTOR=".ctors        ${CONSTRUCTING-0} : 
a223 2
  .rel.data.rel.ro ${RELOCATING-0} : { *(.rel.data.rel.ro${RELOCATING+*}) }
  .rela.data.rel.ro ${RELOCATING-0} : { *(.rel.data.rel.ro${RELOCATING+*}) }
d265 2
a266 2
  .init         ${RELOCATING-0} : 
  { 
a276 1
    KEEP (*(.text.*personality*))
a296 2
  .eh_frame     ${RELOCATING-0} : ONLY_IF_RO { KEEP (*(.eh_frame)) }
  .gcc_except_table ${RELOCATING-0} : ONLY_IF_RO { KEEP (*(.gcc_except_table)) *(.gcc_except_table.*) }
a303 8
  /* Exception handling  */
  .eh_frame     ${RELOCATING-0} : ONLY_IF_RW { KEEP (*(.eh_frame)) }
  .gcc_except_table ${RELOCATING-0} : ONLY_IF_RW { KEEP (*(.gcc_except_table)) *(.gcc_except_table.*) }

  /* Thread Local Storage sections  */
  .tdata	${RELOCATING-0} : { *(.tdata${RELOCATING+ .tdata.* .gnu.linkonce.td.*}) }
  .tbss		${RELOCATING-0} : { *(.tbss${RELOCATING+ .tbss.* .gnu.linkonce.tb.*})${RELOCATING+ *(.tcommon)} }

a320 18
  .jcr          ${RELOCATING-0} : { KEEP (*(.jcr)) }

  ${RELOCATING+${DATARELRO}}
  ${OTHER_RELRO_SECTIONS}
  ${TEXT_DYNAMIC-${DYNAMIC}}
  ${PAD_GOT+${PAD_GOT0}}
  ${NO_SMALL_DATA+${RELRO_NOW+${GOT}}}
  ${NO_SMALL_DATA+${RELRO_NOW-${SEPARATE_GOTPLT+${GOT}}}}
  ${NO_SMALL_DATA+${RELRO_NOW-${SEPARATE_GOTPLT+${GOTPLT}}}}
  ${RELOCATING+${DATA_SEGMENT_RELRO_END}}
  ${NO_SMALL_DATA+${RELRO_NOW-${SEPARATE_GOTPLT-${GOT}}}}
  ${PAD_GOT+${PAD_GOT1}}

  /* pad GOT (and PLT if DATA_PLT) to page aligned if PAD_GOT */
  ${DATA_PLT+${PLT_BEFORE_GOT-${PAD_PLT+${PAD_PLT0}}}}
  ${DATA_PLT+${PLT_BEFORE_GOT-${PLT}}}
  ${DATA_PLT+${PLT_BEFORE_GOT-${PAD_PLT+${PAD_PLT1}}}}

a324 1
    KEEP (*(.gnu.linkonce.d.*personality*))
d328 4
d334 1
d337 1
d340 3
a342 4
  ${DATA_PLT+${PLT_BEFORE_GOT+${PAD_PLT+${PAD_PLT0}}}}
  ${DATA_PLT+${PLT_BEFORE_GOT+${PLT}}}
  ${DATA_PLT+${PLT_BEFORE_GOT+${PAD_PLT+${PAD_PLT1}}}}

d346 1
a346 1
  ${NO_SMALL_DATA-${GOT}}
@

