head	1.3;
access;
symbols
	binutils-2_15:1.1.2.2
	cvs-200406091940:1.1.1.2
	MIRBSD_7quater:1.2
	cvs-200405160640:1.1.1.1
	cvs-200401271800:1.1.1.1
	cvs-200401261630:1.1.1.1
	cvs-200401021645:1.1.1.1
	MIRBSD_7_ALPHA:1.2.0.6
	MIRBSD_7:1.2.0.4
	cvs-200312222040:1.1.1.1
	cvs-200312031730:1.1.1.1
	MIRBSD_7ter:1.2
	MIRBSD_7_DEV:1.2.0.2
	cvs-200310020700:1.1.1.1
	cvs-200309271030:1.1.1.1
	cvs-200309251530:1.1.1.1
	binutils_2_14:1.1.2.2
	binutils_2_11_2:1.1.2.1
	FSF:1.1.2
	cvs-200308302005:1.1.1.1
	cvs-200308171200:1.1.1.1
	ctm-3496:1.1.1.1
	ctm-3449:1.1.1.1
	ctm-3437:1.1.1.1
	cvs-200307191805:1.1.1.1
	ctm-3425:1.1.1.1
	cvs-200307091500:1.1.1.1
	ctm-3389:1.1.1.1
	cvs-200306291430:1.1.1.1
	ctm-3341:1.1.1.1
	MIRBSD_5:1.1.1.1
	cvs-200306082100:1.1.1.1
	ctm-3316:1.1.1.1
	ctm-3272:1.1.1.1
	ctm-3264:1.1.1.1
	cvs-200305071630:1.1.1.1
	MIRBSD_4:1.1.1.1
	ctm-3203:1.1.1.1
	cvs-20030410-1130:1.1.1.1
	ctm-3155:1.1.1.1
	ctm-3132:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.3
date	2004.06.10.22.30.27;	author tg;	state dead;
branches;
next	1.2;

1.2
date	2003.09.23.21.05.16;	author tg;	state Exp;
branches;
next	1.1;

1.1
date	2003.03.22.17.40.52;	author tg;	state Exp;
branches
	1.1.1.1
	1.1.2.1;
next	;

1.1.1.1
date	2003.03.22.17.40.52;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2004.06.09.20.30.14;	author tg;	state Exp;
branches;
next	;

1.1.2.1
date	2003.09.23.15.42.48;	author tg;	state Exp;
branches;
next	1.1.2.2;

1.1.2.2
date	2003.09.23.16.07.53;	author tg;	state Exp;
branches;
next	;


desc
@@


1.3
log
@now it builds with -Werror, has its includes synched with these
of the in-tree libiberty, and all directories are correctly
configured. Also, installed executables are now stripped.

Yay! :)
@
text
@/* A splay-tree datatype.  
   Copyright 1998, 1999, 2000, 2002 Free Software Foundation, Inc.
   Contributed by Mark Mitchell (mark@@markmitchell.com).

This file is part of GCC.
   
GCC is free software; you can redistribute it and/or modify it
under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2, or (at your option)
any later version.

GCC is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with GCC; see the file COPYING.  If not, write to
the Free Software Foundation, 59 Temple Place - Suite 330,
Boston, MA 02111-1307, USA.  */

/* For an easily readable description of splay-trees, see:

     Lewis, Harry R. and Denenberg, Larry.  Data Structures and Their
     Algorithms.  Harper-Collins, Inc.  1991.  

   The major feature of splay trees is that all basic tree operations
   are amortized O(log n) time for a tree with n nodes.  */

#ifndef _SPLAY_TREE_H
#define _SPLAY_TREE_H

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

#include "ansidecl.h"

#ifndef GTY
#define GTY(X)
#endif

/* Use typedefs for the key and data types to facilitate changing
   these types, if necessary.  These types should be sufficiently wide
   that any pointer or scalar can be cast to these types, and then
   cast back, without loss of precision.  */
typedef unsigned long int splay_tree_key;
typedef unsigned long int splay_tree_value;

/* Forward declaration for a node in the tree.  */
typedef struct splay_tree_node_s *splay_tree_node;

/* The type of a function which compares two splay-tree keys.  The
   function should return values as for qsort.  */
typedef int (*splay_tree_compare_fn) PARAMS((splay_tree_key, splay_tree_key));

/* The type of a function used to deallocate any resources associated
   with the key.  */
typedef void (*splay_tree_delete_key_fn) PARAMS((splay_tree_key));

/* The type of a function used to deallocate any resources associated
   with the value.  */
typedef void (*splay_tree_delete_value_fn) PARAMS((splay_tree_value));

/* The type of a function used to iterate over the tree.  */
typedef int (*splay_tree_foreach_fn) PARAMS((splay_tree_node, void*));

/* The type of a function used to allocate memory for tree root and
   node structures.  The first argument is the number of bytes needed;
   the second is a data pointer the splay tree functions pass through
   to the allocator.  This function must never return zero.  */
typedef PTR (*splay_tree_allocate_fn) PARAMS((int, void *));

/* The type of a function used to free memory allocated using the
   corresponding splay_tree_allocate_fn.  The first argument is the
   memory to be freed; the latter is a data pointer the splay tree
   functions pass through to the freer.  */
typedef void (*splay_tree_deallocate_fn) PARAMS((void *, void *));

/* The nodes in the splay tree.  */
struct splay_tree_node_s GTY(())
{
  /* The key.  */
  splay_tree_key GTY ((use_param1 (""))) key;

  /* The value.  */
  splay_tree_value GTY ((use_param2 (""))) value;

  /* The left and right children, respectively.  */
  splay_tree_node GTY ((use_params (""))) left;
  splay_tree_node GTY ((use_params (""))) right;
};

/* The splay tree itself.  */
struct splay_tree_s GTY(())
{
  /* The root of the tree.  */
  splay_tree_node GTY ((use_params (""))) root;

  /* The comparision function.  */
  splay_tree_compare_fn comp;

  /* The deallocate-key function.  NULL if no cleanup is necessary.  */
  splay_tree_delete_key_fn delete_key;

  /* The deallocate-value function.  NULL if no cleanup is necessary.  */
  splay_tree_delete_value_fn delete_value;

  /* Allocate/free functions, and a data pointer to pass to them.  */
  splay_tree_allocate_fn allocate;
  splay_tree_deallocate_fn deallocate;
  PTR GTY((skip (""))) allocate_data;

};
typedef struct splay_tree_s *splay_tree;

extern splay_tree splay_tree_new        PARAMS((splay_tree_compare_fn,
					        splay_tree_delete_key_fn,
					        splay_tree_delete_value_fn));
extern splay_tree splay_tree_new_with_allocator
                                        PARAMS((splay_tree_compare_fn,
					        splay_tree_delete_key_fn,
					        splay_tree_delete_value_fn,
                                                splay_tree_allocate_fn,
                                                splay_tree_deallocate_fn,
                                                void *));
extern void splay_tree_delete           PARAMS((splay_tree));
extern splay_tree_node splay_tree_insert          
		                        PARAMS((splay_tree,
					        splay_tree_key,
					        splay_tree_value));
extern void splay_tree_remove		PARAMS((splay_tree,
						splay_tree_key));
extern splay_tree_node splay_tree_lookup   
                                        PARAMS((splay_tree,
					        splay_tree_key));
extern splay_tree_node splay_tree_predecessor
                                        PARAMS((splay_tree,
						splay_tree_key));
extern splay_tree_node splay_tree_successor
                                        PARAMS((splay_tree,
						splay_tree_key));
extern splay_tree_node splay_tree_max
                                        PARAMS((splay_tree));
extern splay_tree_node splay_tree_min
                                        PARAMS((splay_tree));
extern int splay_tree_foreach           PARAMS((splay_tree,
					        splay_tree_foreach_fn,
					        void*));
extern int splay_tree_compare_ints      PARAMS((splay_tree_key,
						splay_tree_key));
extern int splay_tree_compare_pointers  PARAMS((splay_tree_key,
						splay_tree_key));
					       
#ifdef __cplusplus
}
#endif /* __cplusplus */

#endif /* _SPLAY_TREE_H */
@


1.2
log
@looks as if some sour wine (Federweiﬂer <german>, for an English
description see http://forum.leo.org/archiv/2002_11/04/20021104125717e_en.html)
could help me to bear the pain upgrading binutils to 2.14

todo:
 - test if this works at all
 - test if this works
 - test if nothing breaks
 - nuke all occurences of "false" and "true" in binutils (including gdb),
   see bfd.h "Poison" for reference
 - talk to the OpenBSD people, ask them if they could improve this
@
text
@@


1.1
log
@Initial revision
@
text
@d2 1
a2 1
   Copyright 1998, 1999, 2000 Free Software Foundation, Inc.
d5 1
a5 1
This file is part of GNU CC.
d7 1
a7 1
GNU CC is free software; you can redistribute it and/or modify it
d12 1
a12 1
GNU CC is distributed in the hope that it will be useful, but
d18 1
a18 1
along with GNU CC; see the file COPYING.  If not, write to
d37 5
a41 1
#include <ansidecl.h>
d68 12
d81 1
a81 1
struct splay_tree_node_s
d84 1
a84 1
  splay_tree_key key;
d87 1
a87 1
  splay_tree_value value;
d90 2
a91 2
  splay_tree_node left;
  splay_tree_node right;
d95 1
a95 1
typedef struct splay_tree_s
d98 1
a98 1
  splay_tree_node root;
d108 8
a115 1
} *splay_tree;
d120 7
d143 4
@


1.1.2.1
log
@vendor-branch-i-fy GNU binutils (2.11.2) to facilitate an update
@
text
@@


1.1.2.2
log
@Import GNU binutils 2.14 from the Free Software Foundation
(in case the update goes FUBAR, it can be easily backed off)
@
text
@d2 1
a2 1
   Copyright 1998, 1999, 2000, 2002 Free Software Foundation, Inc.
d5 1
a5 1
This file is part of GCC.
d7 1
a7 1
GCC is free software; you can redistribute it and/or modify it
d12 1
a12 1
GCC is distributed in the hope that it will be useful, but
d18 1
a18 1
along with GCC; see the file COPYING.  If not, write to
d37 1
a37 5
#include "ansidecl.h"

#ifndef GTY
#define GTY(X)
#endif
a63 12
/* The type of a function used to allocate memory for tree root and
   node structures.  The first argument is the number of bytes needed;
   the second is a data pointer the splay tree functions pass through
   to the allocator.  This function must never return zero.  */
typedef PTR (*splay_tree_allocate_fn) PARAMS((int, void *));

/* The type of a function used to free memory allocated using the
   corresponding splay_tree_allocate_fn.  The first argument is the
   memory to be freed; the latter is a data pointer the splay tree
   functions pass through to the freer.  */
typedef void (*splay_tree_deallocate_fn) PARAMS((void *, void *));

d65 1
a65 1
struct splay_tree_node_s GTY(())
d68 1
a68 1
  splay_tree_key GTY ((use_param1 (""))) key;
d71 1
a71 1
  splay_tree_value GTY ((use_param2 (""))) value;
d74 2
a75 2
  splay_tree_node GTY ((use_params (""))) left;
  splay_tree_node GTY ((use_params (""))) right;
d79 1
a79 1
struct splay_tree_s GTY(())
d82 1
a82 1
  splay_tree_node GTY ((use_params (""))) root;
d92 1
a92 8

  /* Allocate/free functions, and a data pointer to pass to them.  */
  splay_tree_allocate_fn allocate;
  splay_tree_deallocate_fn deallocate;
  PTR GTY((skip (""))) allocate_data;

};
typedef struct splay_tree_s *splay_tree;
a96 7
extern splay_tree splay_tree_new_with_allocator
                                        PARAMS((splay_tree_compare_fn,
					        splay_tree_delete_key_fn,
					        splay_tree_delete_value_fn,
                                                splay_tree_allocate_fn,
                                                splay_tree_deallocate_fn,
                                                void *));
a112 4
extern splay_tree_node splay_tree_max
                                        PARAMS((splay_tree));
extern splay_tree_node splay_tree_min
                                        PARAMS((splay_tree));
@


1.1.1.1
log
@Import OpenBSD 3.3 source repository from CTM 3132 the first time
This opens an OpenBSD-mirabile (aka MirBSD) repository.

### MirBSD is:
# Copyright (c) 1982-2003 by Thorsten "mirabile" Glaser <x86@@ePost.de>
# Copyright © 1968-2003  The authors of And contributors to UNIXÆ, the
#       C Language, BSD/Berkeley Unix; 386BSD, NetBSD 1.1 and OpenBSD.
#
# Anyone who obtained a copy of this work is hereby permitted to freely use,
# distribute, modify, merge, sublicence, give away or sell it as long as the
# authors are given due credit and the following notice is retained:
#
# This work is provided "as is", with no explicit or implicit warranty what-
# soever. Use it only at your own risk. In no event may an author or contri-
# butor be held liable for any damage, directly or indirectly, that origina-
# ted through or is caused by creation or modification of this work.

MirBSD is my private tree. MirBSD does not differ very much from OpenBSD
and intentionally tracks OpenBSD. That's why it _is_ OpenBSD, just not the
official one. It's like with DarrenBSD.

At time of this writing, no advertising for MirBSD must be done,
because the advertising clause has not yet been sorted out.

http://templeofhate.com/tglaser/MirBSD/index.php
@
text
@@


1.1.1.2
log
@Sync of src/gnu with OpenBSD (promised a long time ago)
@
text
@d2 1
a2 1
   Copyright 1998, 1999, 2000, 2002 Free Software Foundation, Inc.
d5 1
a5 1
This file is part of GCC.
d7 1
a7 1
GCC is free software; you can redistribute it and/or modify it
d12 1
a12 1
GCC is distributed in the hope that it will be useful, but
d18 1
a18 1
along with GCC; see the file COPYING.  If not, write to
d37 1
a37 5
#include "ansidecl.h"

#ifndef GTY
#define GTY(X)
#endif
a63 12
/* The type of a function used to allocate memory for tree root and
   node structures.  The first argument is the number of bytes needed;
   the second is a data pointer the splay tree functions pass through
   to the allocator.  This function must never return zero.  */
typedef PTR (*splay_tree_allocate_fn) PARAMS((int, void *));

/* The type of a function used to free memory allocated using the
   corresponding splay_tree_allocate_fn.  The first argument is the
   memory to be freed; the latter is a data pointer the splay tree
   functions pass through to the freer.  */
typedef void (*splay_tree_deallocate_fn) PARAMS((void *, void *));

d65 1
a65 1
struct splay_tree_node_s GTY(())
d68 1
a68 1
  splay_tree_key GTY ((use_param1 (""))) key;
d71 1
a71 1
  splay_tree_value GTY ((use_param2 (""))) value;
d74 2
a75 2
  splay_tree_node GTY ((use_params (""))) left;
  splay_tree_node GTY ((use_params (""))) right;
d79 1
a79 1
struct splay_tree_s GTY(())
d82 1
a82 1
  splay_tree_node GTY ((use_params (""))) root;
d92 1
a92 8

  /* Allocate/free functions, and a data pointer to pass to them.  */
  splay_tree_allocate_fn allocate;
  splay_tree_deallocate_fn deallocate;
  PTR GTY((skip (""))) allocate_data;

};
typedef struct splay_tree_s *splay_tree;
a96 7
extern splay_tree splay_tree_new_with_allocator
                                        PARAMS((splay_tree_compare_fn,
					        splay_tree_delete_key_fn,
					        splay_tree_delete_value_fn,
                                                splay_tree_allocate_fn,
                                                splay_tree_deallocate_fn,
                                                void *));
a112 4
extern splay_tree_node splay_tree_max
                                        PARAMS((splay_tree));
extern splay_tree_node splay_tree_min
                                        PARAMS((splay_tree));
@

