head	1.2;
access;
symbols
	binutils-2_15:1.1.2.3
	binutils_2_14:1.1.2.2
	binutils_2_11_2:1.1.2.1
	FSF:1.1.2;
locks; strict;
comment	@ * @;


1.2
date	2003.09.23.16.00.20;	author tg;	state dead;
branches;
next	1.1;

1.1
date	2003.09.23.15.43.21;	author tg;	state Exp;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2003.09.23.15.43.21;	author tg;	state Exp;
branches;
next	1.1.2.2;

1.1.2.2
date	2003.09.23.16.08.46;	author tg;	state Exp;
branches;
next	1.1.2.3;

1.1.2.3
date	2004.07.15.17.18.23;	author tg;	state Exp;
branches;
next	;


desc
@@


1.2
log
@nuke (apparently) generated files that popped up after import
@
text
@
/*  A Bison parser, made from ldgram.y
    by GNU Bison version 1.28  */

#define YYBISON 1  /* Identify Bison output.  */

#define	INT	257
#define	NAME	258
#define	LNAME	259
#define	PLUSEQ	260
#define	MINUSEQ	261
#define	MULTEQ	262
#define	DIVEQ	263
#define	LSHIFTEQ	264
#define	RSHIFTEQ	265
#define	ANDEQ	266
#define	OREQ	267
#define	OROR	268
#define	ANDAND	269
#define	EQ	270
#define	NE	271
#define	LE	272
#define	GE	273
#define	LSHIFT	274
#define	RSHIFT	275
#define	UNARY	276
#define	END	277
#define	ALIGN_K	278
#define	BLOCK	279
#define	BIND	280
#define	QUAD	281
#define	SQUAD	282
#define	LONG	283
#define	SHORT	284
#define	BYTE	285
#define	SECTIONS	286
#define	PHDRS	287
#define	SORT	288
#define	SIZEOF_HEADERS	289
#define	OUTPUT_FORMAT	290
#define	FORCE_COMMON_ALLOCATION	291
#define	OUTPUT_ARCH	292
#define	INCLUDE	293
#define	MEMORY	294
#define	DEFSYMEND	295
#define	NOLOAD	296
#define	DSECT	297
#define	COPY	298
#define	INFO	299
#define	OVERLAY	300
#define	DEFINED	301
#define	TARGET_K	302
#define	SEARCH_DIR	303
#define	MAP	304
#define	ENTRY	305
#define	NEXT	306
#define	SIZEOF	307
#define	ADDR	308
#define	LOADADDR	309
#define	MAX_K	310
#define	MIN_K	311
#define	STARTUP	312
#define	HLL	313
#define	SYSLIB	314
#define	FLOAT	315
#define	NOFLOAT	316
#define	NOCROSSREFS	317
#define	ORIGIN	318
#define	FILL	319
#define	LENGTH	320
#define	CREATE_OBJECT_SYMBOLS	321
#define	INPUT	322
#define	GROUP	323
#define	OUTPUT	324
#define	CONSTRUCTORS	325
#define	ALIGNMOD	326
#define	AT	327
#define	PROVIDE	328
#define	CHIP	329
#define	LIST	330
#define	SECT	331
#define	ABSOLUTE	332
#define	LOAD	333
#define	NEWLINE	334
#define	ENDWORD	335
#define	ORDER	336
#define	NAMEWORD	337
#define	ASSERT_K	338
#define	FORMAT	339
#define	PUBLIC	340
#define	BASE	341
#define	ALIAS	342
#define	TRUNCATE	343
#define	REL	344
#define	INPUT_SCRIPT	345
#define	INPUT_MRI_SCRIPT	346
#define	INPUT_DEFSYM	347
#define	CASE	348
#define	EXTERN	349
#define	START	350
#define	VERS_TAG	351
#define	VERS_IDENTIFIER	352
#define	GLOBAL	353
#define	LOCAL	354
#define	VERSIONK	355
#define	INPUT_VERSION_SCRIPT	356
#define	KEEP	357
#define	EXCLUDE_FILE	358

#line 22 "ldgram.y"

/*

 */

#define DONTDECLARE_MALLOC

#include "bfd.h"
#include "sysdep.h"
#include "bfdlink.h"
#include "ld.h"    
#include "ldexp.h"
#include "ldver.h"
#include "ldlang.h"
#include "ldfile.h"
#include "ldemul.h"
#include "ldmisc.h"
#include "ldmain.h"
#include "mri.h"
#include "ldctor.h"
#include "ldlex.h"

#ifndef YYDEBUG
#define YYDEBUG 1
#endif

static enum section_type sectype;

lang_memory_region_type *region;

struct wildcard_spec current_file;
boolean ldgram_want_filename = true;
boolean had_script = false;
boolean force_make_executable = false;

boolean ldgram_in_script = false;
boolean ldgram_had_equals = false;
boolean ldgram_had_keep = false;
char *ldgram_vers_current_lang = NULL;

#define ERROR_NAME_MAX 20
static char *error_names[ERROR_NAME_MAX];
static int error_index;
#define PUSH_ERROR(x) if (error_index < ERROR_NAME_MAX) error_names[error_index] = x; error_index++;
#define POP_ERROR()   error_index--;

#line 68 "ldgram.y"
typedef union {
  bfd_vma integer;
  char *name;
  const char *cname;
  struct wildcard_spec wildcard;
  struct name_list *name_list;
  int token;
  union etree_union *etree;
  struct phdr_info
    {
      boolean filehdr;
      boolean phdrs;
      union etree_union *at;
      union etree_union *flags;
    } phdr;
  struct lang_nocrossref *nocrossref;
  struct lang_output_section_phdr_list *section_phdr;
  struct bfd_elf_version_deps *deflist;
  struct bfd_elf_version_expr *versyms;
  struct bfd_elf_version_tree *versnode;
} YYSTYPE;
#include <stdio.h>

#ifndef __cplusplus
#ifndef __STDC__
#define const
#endif
#endif



#define	YYFINAL		589
#define	YYFLAG		-32768
#define	YYNTBASE	128

#define YYTRANSLATE(x) ((unsigned)(x) <= 358 ? yytranslate[x] : 233)

static const short yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,   126,     2,     2,     2,    34,    21,     2,    37,
   123,    32,    30,   121,    31,     2,    33,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,    16,   122,    24,
    10,    25,    15,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
   124,     2,   125,    20,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,    49,    19,    50,   127,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     3,     4,     5,     6,
     7,     8,     9,    11,    12,    13,    14,    17,    18,    22,
    23,    26,    27,    28,    29,    35,    36,    38,    39,    40,
    41,    42,    43,    44,    45,    46,    47,    48,    51,    52,
    53,    54,    55,    56,    57,    58,    59,    60,    61,    62,
    63,    64,    65,    66,    67,    68,    69,    70,    71,    72,
    73,    74,    75,    76,    77,    78,    79,    80,    81,    82,
    83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
    93,    94,    95,    96,    97,    98,    99,   100,   101,   102,
   103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
   113,   114,   115,   116,   117,   118,   119,   120
};

#if YYDEBUG != 0
static const short yyprhs[] = {     0,
     0,     3,     6,     9,    12,    14,    15,    20,    21,    24,
    28,    29,    32,    37,    39,    41,    44,    46,    51,    56,
    60,    63,    68,    72,    77,    82,    87,    92,    97,   100,
   103,   106,   111,   116,   119,   122,   125,   128,   129,   135,
   138,   139,   143,   146,   147,   149,   153,   155,   159,   160,
   162,   166,   168,   171,   175,   176,   179,   182,   183,   185,
   187,   189,   191,   193,   195,   197,   199,   201,   203,   208,
   213,   218,   223,   232,   237,   239,   244,   245,   251,   256,
   257,   263,   268,   273,   275,   279,   282,   284,   288,   291,
   296,   299,   302,   303,   308,   311,   313,   315,   317,   319,
   325,   330,   339,   342,   344,   346,   350,   352,   353,   358,
   359,   365,   367,   368,   374,   377,   379,   381,   383,   388,
   390,   395,   400,   403,   405,   406,   408,   410,   412,   414,
   416,   418,   421,   422,   424,   426,   428,   430,   432,   434,
   436,   438,   440,   442,   446,   450,   457,   459,   460,   466,
   469,   473,   474,   475,   483,   487,   491,   492,   496,   498,
   501,   503,   506,   511,   516,   520,   524,   526,   531,   535,
   536,   538,   540,   541,   544,   548,   549,   552,   555,   559,
   564,   567,   570,   573,   577,   581,   585,   589,   593,   597,
   601,   605,   609,   613,   617,   621,   625,   629,   633,   637,
   643,   647,   651,   656,   658,   660,   665,   670,   675,   680,
   685,   690,   692,   699,   706,   713,   717,   718,   723,   724,
   725,   726,   727,   728,   729,   746,   747,   748,   749,   750,
   751,   769,   770,   771,   779,   781,   783,   785,   787,   789,
   793,   794,   797,   801,   804,   811,   822,   825,   827,   828,
   830,   833,   834,   835,   839,   840,   841,   842,   843,   855,
   860,   861,   864,   865,   866,   873,   875,   876,   880,   886,
   887,   891,   892,   895,   896,   902,   904,   907,   913,   920,
   922,   925,   926,   929,   934,   939,   948,   950,   954,   955
};

static const short yyrhs[] = {   107,
   142,     0,   108,   132,     0,   118,   223,     0,   109,   130,
     0,     4,     0,     0,   131,     4,    10,   188,     0,     0,
   133,   134,     0,   134,   135,    96,     0,     0,    91,   188,
     0,    91,   188,   121,   188,     0,     4,     0,    92,     0,
    98,   137,     0,    97,     0,   102,     4,    10,   188,     0,
   102,     4,   121,   188,     0,   102,     4,   188,     0,   101,
     4,     0,    93,     4,   121,   188,     0,    93,     4,   188,
     0,    93,     4,    10,   188,     0,    38,     4,    10,   188,
     0,    38,     4,   121,   188,     0,    88,     4,    10,   188,
     0,    88,     4,   121,   188,     0,    94,   139,     0,    95,
   138,     0,    99,     4,     0,   104,     4,   121,     4,     0,
   104,     4,   121,     3,     0,   103,   188,     0,   105,     3,
     0,   110,   140,     0,   111,   141,     0,     0,    55,   129,
   136,   134,    36,     0,   112,     4,     0,     0,   137,   121,
     4,     0,   137,     4,     0,     0,     4,     0,   138,   121,
     4,     0,     4,     0,   139,   121,     4,     0,     0,     4,
     0,   140,   121,     4,     0,     4,     0,   141,     4,     0,
   141,   121,     4,     0,     0,   143,   144,     0,   144,   145,
     0,     0,   170,     0,   149,     0,   215,     0,   179,     0,
   180,     0,   182,     0,   184,     0,   151,     0,   225,     0,
   122,     0,    64,    37,     4,   123,     0,    65,    37,   129,
   123,     0,    86,    37,   129,   123,     0,    52,    37,     4,
   123,     0,    52,    37,     4,   121,     4,   121,     4,   123,
     0,    54,    37,     4,   123,     0,    53,     0,    84,    37,
   148,   123,     0,     0,    85,   146,    37,   148,   123,     0,
    66,    37,   129,   123,     0,     0,    55,   129,   147,   144,
    36,     0,    79,    37,   185,   123,     0,   111,    37,   141,
   123,     0,     4,     0,   148,   121,     4,     0,   148,     4,
     0,     5,     0,   148,   121,     5,     0,   148,     5,     0,
    46,    49,   150,    50,     0,   150,   191,     0,   150,   151,
     0,     0,    67,    37,     4,   123,     0,   168,   167,     0,
     4,     0,    32,     0,    15,     0,   152,     0,   120,    37,
   154,   123,   152,     0,    48,    37,   152,   123,     0,    48,
    37,   120,    37,   154,   123,   152,   123,     0,   154,   152,
     0,   152,     0,   153,     0,   155,   169,   153,     0,     4,
     0,     0,   124,   157,   155,   125,     0,     0,   153,   158,
    37,   155,   123,     0,   156,     0,     0,   119,    37,   160,
   156,   123,     0,   168,   167,     0,    83,     0,   122,     0,
    87,     0,    48,    37,    87,   123,     0,   159,     0,   164,
    37,   186,   123,     0,    81,    37,   186,   123,     0,   162,
   161,     0,   161,     0,     0,   162,     0,    41,     0,    42,
     0,    43,     0,    44,     0,    45,     0,    10,   186,     0,
     0,     6,     0,     7,     0,     8,     0,     9,     0,    11,
     0,    12,     0,    13,     0,    14,     0,   122,     0,   121,
     0,     4,    10,   186,     0,     4,   166,   186,     0,    90,
    37,     4,    10,   186,   123,     0,   121,     0,     0,    56,
    49,   172,   171,    50,     0,   171,   172,     0,   171,   121,
   172,     0,     0,     0,     4,   173,   176,    16,   174,   169,
   175,     0,    80,    10,   186,     0,    82,    10,   186,     0,
     0,    37,   177,   123,     0,   178,     0,   177,   178,     0,
     4,     0,   126,     4,     0,    74,    37,   129,   123,     0,
    75,    37,   181,   123,     0,    75,    37,   123,     0,   181,
   169,   129,     0,   129,     0,    76,    37,   183,   123,     0,
   183,   169,   129,     0,     0,    77,     0,    78,     0,     0,
     4,   185,     0,     4,   121,   185,     0,     0,   187,   188,
     0,    31,   188,     0,    37,   188,   123,     0,    68,    37,
   188,   123,     0,   126,   188,     0,    30,   188,     0,   127,
   188,     0,   188,    32,   188,     0,   188,    33,   188,     0,
   188,    34,   188,     0,   188,    30,   188,     0,   188,    31,
   188,     0,   188,    28,   188,     0,   188,    29,   188,     0,
   188,    22,   188,     0,   188,    23,   188,     0,   188,    26,
   188,     0,   188,    27,   188,     0,   188,    24,   188,     0,
   188,    25,   188,     0,   188,    21,   188,     0,   188,    20,
   188,     0,   188,    19,   188,     0,   188,    15,   188,    16,
   188,     0,   188,    18,   188,     0,   188,    17,   188,     0,
    63,    37,     4,   123,     0,     3,     0,    51,     0,    69,
    37,     4,   123,     0,    70,    37,     4,   123,     0,    71,
    37,     4,   123,     0,    94,    37,   188,   123,     0,    38,
    37,   188,   123,     0,    39,    37,   188,   123,     0,     4,
     0,    72,    37,   188,   121,   188,   123,     0,    73,    37,
   188,   121,   188,   123,     0,   100,    37,   188,   121,     4,
   123,     0,    89,    25,     4,     0,     0,    89,    37,   188,
   123,     0,     0,     0,     0,     0,     0,     0,     4,   192,
   206,   190,   193,    49,   194,   163,    50,   195,   209,   189,
   210,   165,   196,   169,     0,     0,     0,     0,     0,     0,
    62,   197,   207,   208,   190,   198,    49,   199,   211,    50,
   200,   209,   189,   210,   165,   201,   169,     0,     0,     0,
    85,   202,   206,   203,    49,   150,    50,     0,    58,     0,
    59,     0,    60,     0,    61,     0,    62,     0,    37,   204,
   123,     0,     0,    37,   123,     0,   188,   205,    16,     0,
   205,    16,     0,    40,    37,   188,   123,   205,    16,     0,
    40,    37,   188,   123,    39,    37,   188,   123,   205,    16,
     0,   188,    16,     0,    16,     0,     0,    79,     0,    25,
     4,     0,     0,     0,   210,    16,     4,     0,     0,     0,
     0,     0,   211,     4,   212,    49,   163,    50,   213,   210,
   165,   214,   169,     0,    47,    49,   216,    50,     0,     0,
   216,   217,     0,     0,     0,     4,   218,   220,   221,   219,
   122,     0,   188,     0,     0,     4,   222,   221,     0,    89,
    37,   188,   123,   221,     0,     0,    37,   188,   123,     0,
     0,   224,   227,     0,     0,   226,   117,    49,   227,    50,
     0,   228,     0,   227,   228,     0,   113,    49,   230,    50,
   122,     0,   113,    49,   230,    50,   229,   122,     0,   113,
     0,   229,   113,     0,     0,   231,   122,     0,   115,    16,
   231,   122,     0,   116,    16,   231,   122,     0,   115,    16,
   231,   122,   116,    16,   231,   122,     0,   114,     0,   231,
   122,   114,     0,     0,   111,     4,    49,   232,   231,    50,
     0
};

#endif

#if YYDEBUG != 0
static const short yyrline[] = { 0,
   153,   155,   156,   157,   161,   164,   166,   173,   179,   186,
   188,   191,   193,   194,   197,   200,   201,   202,   204,   206,
   208,   210,   212,   214,   216,   218,   220,   222,   224,   225,
   226,   228,   230,   232,   234,   236,   237,   238,   239,   240,
   242,   245,   247,   248,   251,   254,   257,   260,   264,   266,
   267,   270,   273,   275,   279,   284,   290,   292,   297,   299,
   300,   301,   302,   303,   304,   305,   306,   307,   308,   310,
   312,   314,   317,   319,   321,   323,   324,   326,   328,   330,
   331,   332,   336,   339,   343,   346,   349,   352,   355,   360,
   364,   366,   367,   370,   373,   378,   383,   387,   393,   400,
   406,   412,   422,   431,   442,   450,   459,   465,   470,   471,
   478,   481,   483,   485,   489,   491,   495,   496,   501,   506,
   507,   512,   522,   524,   527,   529,   532,   535,   537,   539,
   541,   545,   553,   558,   561,   563,   565,   567,   569,   571,
   573,   578,   578,   582,   587,   595,   602,   603,   606,   610,
   612,   613,   617,   619,   624,   632,   641,   644,   647,   649,
   652,   655,   659,   664,   666,   670,   673,   678,   680,   683,
   686,   689,   693,   698,   707,   718,   720,   723,   726,   728,
   730,   732,   734,   737,   739,   741,   743,   745,   747,   749,
   751,   753,   755,   757,   759,   761,   763,   765,   767,   769,
   771,   773,   775,   777,   779,   782,   784,   786,   788,   790,
   792,   794,   796,   798,   800,   805,   807,   810,   812,   815,
   817,   819,   825,   826,   832,   832,   834,   837,   841,   843,
   849,   849,   855,   859,   862,   864,   865,   866,   867,   870,
   872,   873,   876,   878,   879,   884,   888,   890,   893,   896,
   900,   903,   906,   911,   924,   926,   932,   934,   940,   942,
   946,   948,   951,   953,   955,   961,   991,   996,  1008,  1015,
  1020,  1028,  1034,  1042,  1046,  1052,  1054,  1057,  1062,  1068,
  1073,  1079,  1084,  1088,  1092,  1096,  1102,  1107,  1111,  1116
};
#endif


#if YYDEBUG != 0 || defined (YYERROR_VERBOSE)

static const char * const yytname[] = {   "$","error","$undefined.","INT","NAME",
"LNAME","PLUSEQ","MINUSEQ","MULTEQ","DIVEQ","'='","LSHIFTEQ","RSHIFTEQ","ANDEQ",
"OREQ","'?'","':'","OROR","ANDAND","'|'","'^'","'&'","EQ","NE","'<'","'>'","LE",
"GE","LSHIFT","RSHIFT","'+'","'-'","'*'","'/'","'%'","UNARY","END","'('","ALIGN_K",
"BLOCK","BIND","QUAD","SQUAD","LONG","SHORT","BYTE","SECTIONS","PHDRS","SORT",
"'{'","'}'","SIZEOF_HEADERS","OUTPUT_FORMAT","FORCE_COMMON_ALLOCATION","OUTPUT_ARCH",
"INCLUDE","MEMORY","DEFSYMEND","NOLOAD","DSECT","COPY","INFO","OVERLAY","DEFINED",
"TARGET_K","SEARCH_DIR","MAP","ENTRY","NEXT","SIZEOF","ADDR","LOADADDR","MAX_K",
"MIN_K","STARTUP","HLL","SYSLIB","FLOAT","NOFLOAT","NOCROSSREFS","ORIGIN","FILL",
"LENGTH","CREATE_OBJECT_SYMBOLS","INPUT","GROUP","OUTPUT","CONSTRUCTORS","ALIGNMOD",
"AT","PROVIDE","CHIP","LIST","SECT","ABSOLUTE","LOAD","NEWLINE","ENDWORD","ORDER",
"NAMEWORD","ASSERT_K","FORMAT","PUBLIC","BASE","ALIAS","TRUNCATE","REL","INPUT_SCRIPT",
"INPUT_MRI_SCRIPT","INPUT_DEFSYM","CASE","EXTERN","START","VERS_TAG","VERS_IDENTIFIER",
"GLOBAL","LOCAL","VERSIONK","INPUT_VERSION_SCRIPT","KEEP","EXCLUDE_FILE","','",
"';'","')'","'['","']'","'!'","'~'","file","filename","defsym_expr","@@1","mri_script_file",
"@@2","mri_script_lines","mri_script_command","@@3","ordernamelist","mri_load_name_list",
"mri_abs_name_list","casesymlist","extern_name_list","script_file","@@4","ifile_list",
"ifile_p1","@@5","@@6","input_list","sections","sec_or_group_p1","statement_anywhere",
"wildcard_name","wildcard_spec","exclude_name_list","file_NAME_list","input_section_spec_no_keep",
"@@7","@@8","input_section_spec","@@9","statement","statement_list","statement_list_opt",
"length","fill_opt","assign_op","end","assignment","opt_comma","memory","memory_spec_list",
"memory_spec","@@10","origin_spec","length_spec","attributes_opt","attributes_list",
"attributes_string","startup","high_level_library","high_level_library_NAME_list",
"low_level_library","low_level_library_NAME_list","floating_point_support","nocrossref_list",
"mustbe_exp","@@11","exp","memspec_at_opt","opt_at","section","@@12","@@13","@@14",
"@@15","@@16","@@17","@@18","@@19","@@20","@@21","@@22","@@23","type","atype","opt_exp_with_type",
"opt_exp_without_type","opt_nocrossrefs","memspec_opt","phdr_opt","overlay_section",
"@@24","@@25","@@26","phdrs","phdr_list","phdr","@@27","@@28","phdr_type","phdr_qualifiers",
"phdr_val","version_script_file","@@29","version","@@30","vers_nodes","vers_node",
"verdep","vers_tag","vers_defns","@@31", NULL
};
#endif

static const short yyr1[] = {     0,
   128,   128,   128,   128,   129,   131,   130,   133,   132,   134,
   134,   135,   135,   135,   135,   135,   135,   135,   135,   135,
   135,   135,   135,   135,   135,   135,   135,   135,   135,   135,
   135,   135,   135,   135,   135,   135,   135,   136,   135,   135,
   135,   137,   137,   137,   138,   138,   139,   139,   140,   140,
   140,   141,   141,   141,   143,   142,   144,   144,   145,   145,
   145,   145,   145,   145,   145,   145,   145,   145,   145,   145,
   145,   145,   145,   145,   145,   145,   146,   145,   145,   147,
   145,   145,   145,   148,   148,   148,   148,   148,   148,   149,
   150,   150,   150,   151,   151,   152,   152,   152,   153,   153,
   153,   153,   154,   154,   155,   155,   156,   157,   156,   158,
   156,   159,   160,   159,   161,   161,   161,   161,   161,   161,
   161,   161,   162,   162,   163,   163,   164,   164,   164,   164,
   164,   165,   165,   166,   166,   166,   166,   166,   166,   166,
   166,   167,   167,   168,   168,   168,   169,   169,   170,   171,
   171,   171,   173,   172,   174,   175,   176,   176,   177,   177,
   178,   178,   179,   180,   180,   181,   181,   182,   183,   183,
   184,   184,   185,   185,   185,   187,   186,   188,   188,   188,
   188,   188,   188,   188,   188,   188,   188,   188,   188,   188,
   188,   188,   188,   188,   188,   188,   188,   188,   188,   188,
   188,   188,   188,   188,   188,   188,   188,   188,   188,   188,
   188,   188,   188,   188,   188,   189,   189,   190,   190,   192,
   193,   194,   195,   196,   191,   197,   198,   199,   200,   201,
   191,   202,   203,   191,   204,   204,   204,   204,   204,   205,
   205,   205,   206,   206,   206,   206,   207,   207,   208,   208,
   209,   209,   210,   210,   211,   212,   213,   214,   211,   215,
   216,   216,   218,   219,   217,   220,   221,   221,   221,   222,
   222,   224,   223,   226,   225,   227,   227,   228,   228,   229,
   229,   230,   230,   230,   230,   230,   231,   231,   232,   231
};

static const short yyr2[] = {     0,
     2,     2,     2,     2,     1,     0,     4,     0,     2,     3,
     0,     2,     4,     1,     1,     2,     1,     4,     4,     3,
     2,     4,     3,     4,     4,     4,     4,     4,     2,     2,
     2,     4,     4,     2,     2,     2,     2,     0,     5,     2,
     0,     3,     2,     0,     1,     3,     1,     3,     0,     1,
     3,     1,     2,     3,     0,     2,     2,     0,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     4,     4,
     4,     4,     8,     4,     1,     4,     0,     5,     4,     0,
     5,     4,     4,     1,     3,     2,     1,     3,     2,     4,
     2,     2,     0,     4,     2,     1,     1,     1,     1,     5,
     4,     8,     2,     1,     1,     3,     1,     0,     4,     0,
     5,     1,     0,     5,     2,     1,     1,     1,     4,     1,
     4,     4,     2,     1,     0,     1,     1,     1,     1,     1,
     1,     2,     0,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     3,     3,     6,     1,     0,     5,     2,
     3,     0,     0,     7,     3,     3,     0,     3,     1,     2,
     1,     2,     4,     4,     3,     3,     1,     4,     3,     0,
     1,     1,     0,     2,     3,     0,     2,     2,     3,     4,
     2,     2,     2,     3,     3,     3,     3,     3,     3,     3,
     3,     3,     3,     3,     3,     3,     3,     3,     3,     5,
     3,     3,     4,     1,     1,     4,     4,     4,     4,     4,
     4,     1,     6,     6,     6,     3,     0,     4,     0,     0,
     0,     0,     0,     0,    16,     0,     0,     0,     0,     0,
    17,     0,     0,     7,     1,     1,     1,     1,     1,     3,
     0,     2,     3,     2,     6,    10,     2,     1,     0,     1,
     2,     0,     0,     3,     0,     0,     0,     0,    11,     4,
     0,     2,     0,     0,     6,     1,     0,     3,     5,     0,
     3,     0,     2,     0,     5,     1,     2,     5,     6,     1,
     2,     0,     2,     4,     4,     8,     1,     3,     0,     6
};

static const short yydefact[] = {     0,
    55,     8,     6,   272,     1,    58,     2,    11,     4,     0,
     3,     0,    56,     9,     0,     0,   273,   276,     0,     0,
     0,     0,    75,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   171,   172,     0,     0,    77,     0,     0,
     0,    68,    57,    60,    66,     0,    59,    62,    63,    64,
    65,    61,    67,     0,    14,     0,     0,     0,     0,    15,
     0,     0,     0,    17,    44,     0,     0,     0,     0,     0,
     0,    49,     0,     0,     0,     0,   282,   277,   134,   135,
   136,   137,   176,   138,   139,   140,   141,   176,    93,   261,
     0,     0,     5,    80,     0,     0,     0,     0,     0,     0,
     0,   170,   173,     0,     0,     0,     0,     0,   143,   142,
    95,     0,     0,    38,     0,   204,   212,     0,     0,     0,
     0,     0,   205,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,    12,     0,    47,    29,    45,    30,
    16,    31,    21,     0,    34,     0,    35,    50,    36,    52,
    37,    40,    10,     7,     0,   287,     0,     0,     0,     0,
   144,     0,   145,     0,     0,     0,     0,    58,   153,   152,
     0,     0,     0,     0,     0,   165,   167,   148,   148,   173,
     0,    84,    87,     0,     0,     0,     0,     0,     0,     0,
     0,    11,     0,     0,   182,   178,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   181,   183,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,    23,     0,     0,    43,     0,     0,     0,    20,
     0,     0,    53,     0,     0,     0,     0,     0,   283,   177,
   220,    90,   226,   232,    92,    91,   263,   260,   262,     0,
    72,    74,   274,   157,     0,    69,    70,    79,    94,   163,
   147,   164,     0,   168,     0,   173,   174,    82,    86,    89,
     0,    76,     0,    71,   176,    83,     0,    25,    26,    41,
    27,    28,   179,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   202,   201,   199,   198,   197,
   191,   192,   195,   196,   193,   194,   189,   190,   187,   188,
   184,   185,   186,    13,    24,    22,    48,    46,    42,    18,
    19,    33,    32,    51,    54,   289,     0,     0,   280,   278,
     0,   288,   241,     0,   241,     0,     0,    81,     0,     0,
   149,     0,   150,   166,   169,   175,    85,    88,    78,     0,
   275,    39,   210,   211,   203,   180,   206,   207,   208,     0,
     0,   209,     0,     0,     0,   284,   285,   281,   279,     0,
     0,   241,     0,   219,   248,     0,   249,   233,   266,   267,
     0,   161,     0,     0,   159,     0,   151,   146,     0,     0,
     0,   200,     0,     0,   235,   236,   237,   238,   239,   242,
     0,     0,     0,     0,   244,     0,   221,   247,   250,   219,
     0,   270,     0,   264,     0,   162,   158,   160,     0,   148,
   213,   214,   215,   290,     0,     0,   240,     0,   243,     0,
     0,   227,    93,     0,   267,     0,     0,    73,   176,     0,
     0,   241,     0,   222,     0,     0,     0,   268,     0,   265,
   155,     0,   154,   286,     0,     0,   218,   125,   228,   234,
   271,   267,   176,     0,   245,   107,    98,    97,   127,   128,
   129,   130,   131,     0,     0,   116,   118,     0,     0,   117,
   108,    99,   110,   112,   120,   124,   126,     0,     0,     0,
   255,   269,   156,     0,     0,   176,   113,     0,     0,     0,
   123,   223,   176,   115,     0,   241,    96,     0,     0,     0,
     0,     0,   104,     0,     0,   105,   148,     0,   252,     0,
   256,   229,     0,   119,     0,   101,   122,    96,     0,     0,
   103,     0,   109,     0,   148,     0,   217,   121,     0,   252,
   246,     0,   114,   100,   106,   111,   251,     0,   253,   125,
   217,     0,     0,   133,     0,   253,     0,   216,   176,     0,
   224,   257,   133,   102,   132,   254,   148,   253,   230,   225,
   133,   148,   258,   231,   148,   259,     0,     0,     0
};

static const short yydefgoto[] = {   587,
    94,     9,    10,     7,     8,    14,    75,   192,   141,   140,
   138,   149,   151,     5,     6,    13,    43,   105,   168,   184,
    44,   164,    45,   492,   493,   524,   527,   494,   509,   510,
   495,   522,   496,   497,   498,   499,   571,    88,   111,    46,
   544,    47,   265,   170,   264,   430,   463,   350,   394,   395,
    48,    49,   178,    50,   179,    51,   181,   161,   162,   197,
   559,   417,   256,   343,   441,   468,   529,   577,   344,   455,
   501,   550,   582,   345,   421,   411,   383,   384,   387,   420,
   547,   564,   515,   549,   578,   585,    52,   165,   259,   346,
   447,   390,   424,   445,    11,    12,    53,    54,    17,    18,
   341,   159,   160,   375
};

static const short yypact[] = {   -66,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,    23,
-32768,   -73,   585,   695,    53,    -4,   -73,-32768,  1276,    40,
    63,   115,-32768,   140,   179,   143,   158,   184,   191,   215,
   224,   226,   227,-32768,-32768,   228,   230,-32768,   231,   233,
   234,-32768,-32768,-32768,-32768,    -3,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,   156,-32768,   270,   179,   272,   491,-32768,
   273,   274,   275,-32768,-32768,   276,   277,   280,   491,   288,
   290,   293,   296,   297,   198,   491,    85,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
   298,   300,-32768,-32768,   301,   302,   179,   179,   303,   179,
    15,-32768,   304,   118,   281,   179,   305,   296,-32768,-32768,
-32768,   261,     6,-32768,     7,-32768,-32768,   491,   491,   491,
   282,   289,-32768,   291,   294,   295,   310,   311,   312,   313,
   314,   316,   491,   491,  1032,   252,-32768,   190,-32768,   196,
    10,-32768,-32768,   326,  1137,   206,-32768,-32768,   212,-32768,
    24,-32768,-32768,  1137,   330,-32768,   319,   339,   264,   236,
-32768,   491,-32768,    31,    29,   -20,   237,-32768,-32768,-32768,
   239,   243,   244,   246,   247,-32768,-32768,    -6,    65,    30,
   248,-32768,-32768,    61,   118,   249,   349,    68,   -73,   491,
   491,-32768,   491,   491,-32768,-32768,   581,   491,   491,   370,
   491,   371,   372,   376,   491,   491,   491,   491,-32768,-32768,
   491,   491,   491,   491,   491,   491,   491,   491,   491,   491,
   491,   491,   491,   491,   491,   491,   491,   491,   491,   491,
   491,   491,  1137,   377,   379,-32768,   380,   491,   491,  1137,
   254,   383,-32768,   386,   342,    -1,    -1,   -55,   278,  1137,
  1276,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   389,
-32768,-32768,   662,   363,     9,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,   179,-32768,   179,   304,-32768,-32768,-32768,-32768,
   255,-32768,    64,-32768,-32768,-32768,   -21,  1137,  1137,   720,
  1137,  1137,-32768,   659,   818,   284,   838,   285,   287,   292,
  1052,  1072,   858,  1092,  1199,  1156,  1175,  1234,   738,  1247,
   549,   549,   186,   186,   186,   186,   216,   216,   193,   193,
-32768,-32768,-32768,  1137,  1137,  1137,-32768,-32768,-32768,  1137,
  1137,-32768,-32768,-32768,-32768,-32768,   283,   299,-32768,-32768,
   -39,-32768,   399,   445,   399,   491,   306,-32768,     8,   388,
-32768,   301,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   308,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   491,
   491,-32768,   407,   491,    -1,   122,   278,-32768,-32768,   172,
   375,  1112,   397,   325,-32768,  1219,   338,-32768,  1137,    20,
   415,-32768,   418,     3,-32768,   343,-32768,-32768,   878,   898,
   309,  1137,   -27,   408,-32768,-32768,-32768,-32768,-32768,-32768,
   317,   491,   146,   412,-32768,   396,-32768,-32768,-32768,   325,
   385,   398,   404,-32768,   320,-32768,-32768,-32768,   432,   323,
-32768,-32768,-32768,-32768,   278,    -1,-32768,   925,-32768,   491,
   402,-32768,-32768,   491,    20,   491,   324,-32768,-32768,   374,
   332,   200,   945,-32768,   410,    35,   965,-32768,   985,-32768,
-32768,   435,-32768,   278,   420,   444,-32768,   505,-32768,-32768,
-32768,    20,-32768,   491,-32768,   331,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,   426,   427,-32768,-32768,   428,   429,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,   505,   423,   440,    -3,
-32768,-32768,-32768,  1005,    92,-32768,-32768,    21,    58,   441,
-32768,-32768,-32768,-32768,    34,   442,-32768,   357,   449,   364,
   365,    22,-32768,    16,   452,-32768,   -34,    58,   466,   378,
-32768,-32768,   481,-32768,    21,-32768,-32768,   381,   382,    21,
-32768,    73,-32768,    58,   130,   494,   411,-32768,   454,   466,
-32768,    67,-32768,-32768,-32768,-32768,-32768,   482,-32768,   505,
   411,    21,   502,    84,   460,-32768,   400,-32768,-32768,   507,
-32768,-32768,    84,-32768,-32768,-32768,   323,-32768,-32768,-32768,
    84,   323,-32768,-32768,   323,-32768,   519,   524,-32768
};

static const short yypgoto[] = {-32768,
   -51,-32768,-32768,-32768,-32768,   335,-32768,-32768,-32768,-32768,
-32768,-32768,   424,-32768,-32768,   366,-32768,-32768,-32768,   346,
-32768,    90,  -160,   -50,  -315,     0,    12,    14,-32768,-32768,
-32768,-32768,    41,-32768,   -19,-32768,  -517,-32768,    43,  -446,
  -176,-32768,-32768,  -244,-32768,-32768,-32768,-32768,-32768,   150,
-32768,-32768,-32768,-32768,-32768,-32768,  -165,   -88,-32768,   -58,
   -10,   132,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,  -372,   210,-32768,-32768,
    17,  -534,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,  -415,-32768,-32768,-32768,-32768,-32768,   367,   -12,
-32768,-32768,  -238,-32768
};


#define	YYLAST		1290


static const short yytable[] = {   163,
   135,   273,   275,   255,    78,   114,   392,   337,   338,   414,
   145,   392,   169,   236,   277,   190,   193,   154,    93,   517,
   353,   500,   434,   422,   517,   538,    15,   243,   361,   458,
   477,   573,   257,   180,   251,   477,   477,   531,   251,    16,
     1,     2,     3,   581,    77,   172,   173,   478,   175,   177,
   500,     4,   478,   478,   186,   579,   502,   339,   351,   195,
   196,   517,    76,   583,   279,   280,   340,   279,   280,   525,
   517,   243,   477,   378,   209,   210,   517,   233,   258,   466,
   252,   477,   379,   532,   470,   240,   271,   477,    89,   478,
   543,    16,   253,   569,   435,   517,   253,    30,   478,   570,
   260,    30,   261,   250,   478,   525,   477,   397,   423,   155,
   356,    90,   156,   500,   271,   254,   272,   109,   110,   254,
    40,   182,   183,   478,    40,   427,   191,   194,   393,   352,
   237,   288,   289,   393,   291,   292,   403,   176,   540,   294,
   295,   489,   297,   533,   244,   491,   301,   302,   303,   304,
   276,    91,   305,   306,   307,   308,   309,   310,   311,   312,
   313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
   323,   324,   325,   326,   116,   117,    92,   489,   518,   330,
   331,   281,    93,   282,   281,   271,   359,   274,   244,   562,
   286,    95,   519,   526,    96,   155,   360,   451,   156,   157,
   158,   118,   119,   405,   406,   407,   408,   409,   120,   121,
   122,   519,   526,   223,   224,   225,   226,   227,   228,   229,
    97,   354,   123,   355,   227,   228,   229,    98,   555,   405,
   406,   407,   408,   409,   124,   342,   413,   404,   465,   125,
   126,   127,   128,   129,   130,   225,   226,   227,   228,   229,
   271,    99,   556,   450,   116,   117,   332,   333,   357,   358,
   100,   231,   101,   102,   103,   131,   104,   106,   410,   107,
   108,   132,   112,   113,    78,   115,   136,   137,   139,   142,
   143,   118,   119,   144,   382,   386,   382,   389,   120,   121,
   122,   146,   147,   153,   410,   255,   148,   133,   134,   150,
   152,   166,   123,   167,   169,   171,   174,   180,   187,   189,
   234,   399,   400,   248,   124,   402,   235,   185,   198,   125,
   126,   127,   128,   129,   130,   199,   241,   200,   116,   117,
   201,   202,   242,   245,   246,   238,    79,    80,    81,    82,
    83,    84,    85,    86,    87,   131,   203,   204,   205,   206,
   207,   132,   208,   438,   247,   118,   119,   249,   285,   262,
   461,   266,   120,   121,   122,   267,   268,   -96,   269,   270,
   278,   284,   232,   296,   298,   299,   123,   133,   134,   300,
   327,   453,   328,   329,   503,   457,   334,   459,   124,   335,
   336,   342,   347,   125,   126,   127,   128,   129,   130,   349,
   580,   116,   117,   396,   376,   584,   365,   367,   586,   368,
   401,   412,   415,   416,   369,   504,   419,   521,   425,   131,
   377,   426,   429,   436,   530,   132,   391,   439,   118,   119,
   398,   433,   440,   443,   444,   380,   121,   122,   381,   437,
   446,   449,   448,   271,   473,   460,   239,   116,   117,   123,
   454,   133,   134,   464,   520,   462,   474,   523,   469,   475,
   385,   124,   505,   506,   507,   508,   125,   126,   127,   128,
   129,   130,   512,   541,   118,   119,   513,   528,   413,   534,
   575,   120,   121,   122,   523,   535,   536,   537,   542,   554,
   546,   520,   131,   116,   117,   123,   551,   557,   132,   558,
   548,   541,   560,  -107,   553,   568,   563,   124,   476,   572,
   576,   567,   125,   126,   127,   128,   129,   130,   588,   477,
   118,   119,   574,   589,   133,   134,   290,   120,   121,   122,
   283,   188,   456,   263,   552,   539,   478,   511,   131,   545,
   565,   123,   514,   428,   132,   479,   480,   481,   482,   483,
   566,   442,   484,   124,   388,   287,     0,     0,   125,   126,
   127,   128,   129,   130,     0,     0,   561,     0,     0,     0,
   133,   134,   219,   220,   221,   222,   223,   224,   225,   226,
   227,   228,   229,     0,   131,   485,     0,   486,    19,     0,
   132,   487,     0,     0,    40,   211,     0,   212,   213,   214,
   215,   216,   217,   218,   219,   220,   221,   222,   223,   224,
   225,   226,   227,   228,   229,     0,   133,   134,     0,     0,
     0,     0,     0,   488,   489,     0,   490,     0,   491,     0,
    20,    21,     0,     0,     0,     0,    22,    23,    24,    25,
    26,     0,     0,     0,     0,     0,     0,     0,    27,    28,
    29,    30,     0,     0,     0,     0,     0,     0,    31,    32,
    33,    34,    35,    36,     0,    19,     0,     0,    37,    38,
    39,     0,     0,   211,    40,   212,   213,   214,   215,   216,
   217,   218,   219,   220,   221,   222,   223,   224,   225,   226,
   227,   228,   229,     0,     0,    41,     0,   348,    55,     0,
     0,  -274,     0,   293,     0,     0,    42,    20,    21,     0,
     0,     0,     0,    22,    23,    24,    25,    26,     0,     0,
     0,     0,     0,    55,     0,    27,    28,    29,    30,     0,
     0,     0,    56,     0,     0,    31,    32,    33,    34,    35,
    36,     0,     0,     0,     0,    37,    38,    39,     0,    57,
     0,    40,     0,     0,     0,   362,     0,    56,   216,   217,
   218,   219,   220,   221,   222,   223,   224,   225,   226,   227,
   228,   229,    41,     0,    57,     0,     0,     0,     0,     0,
     0,   363,    58,    42,     0,    59,    60,    61,    62,    63,
   -41,    64,    65,    66,     0,    67,    68,    69,    70,    71,
     0,     0,     0,     0,    72,    73,    74,    58,     0,     0,
    59,    60,    61,    62,    63,     0,    64,    65,    66,     0,
    67,    68,    69,    70,    71,     0,     0,     0,     0,    72,
    73,    74,   211,     0,   212,   213,   214,   215,   216,   217,
   218,   219,   220,   221,   222,   223,   224,   225,   226,   227,
   228,   229,   211,     0,   212,   213,   214,   215,   216,   217,
   218,   219,   220,   221,   222,   223,   224,   225,   226,   227,
   228,   229,   211,     0,   212,   213,   214,   215,   216,   217,
   218,   219,   220,   221,   222,   223,   224,   225,   226,   227,
   228,   229,   211,     0,   212,   213,   214,   215,   216,   217,
   218,   219,   220,   221,   222,   223,   224,   225,   226,   227,
   228,   229,   211,     0,   212,   213,   214,   215,   216,   217,
   218,   219,   220,   221,   222,   223,   224,   225,   226,   227,
   228,   229,     0,     0,     0,     0,     0,     0,     0,   211,
   364,   212,   213,   214,   215,   216,   217,   218,   219,   220,
   221,   222,   223,   224,   225,   226,   227,   228,   229,   211,
   366,   212,   213,   214,   215,   216,   217,   218,   219,   220,
   221,   222,   223,   224,   225,   226,   227,   228,   229,   211,
   372,   212,   213,   214,   215,   216,   217,   218,   219,   220,
   221,   222,   223,   224,   225,   226,   227,   228,   229,   211,
   431,   212,   213,   214,   215,   216,   217,   218,   219,   220,
   221,   222,   223,   224,   225,   226,   227,   228,   229,   211,
   432,   212,   213,   214,   215,   216,   217,   218,   219,   220,
   221,   222,   223,   224,   225,   226,   227,   228,   229,     0,
     0,     0,     0,     0,     0,     0,   211,   452,   212,   213,
   214,   215,   216,   217,   218,   219,   220,   221,   222,   223,
   224,   225,   226,   227,   228,   229,   211,   467,   212,   213,
   214,   215,   216,   217,   218,   219,   220,   221,   222,   223,
   224,   225,   226,   227,   228,   229,   211,   471,   212,   213,
   214,   215,   216,   217,   218,   219,   220,   221,   222,   223,
   224,   225,   226,   227,   228,   229,   211,   472,   212,   213,
   214,   215,   216,   217,   218,   219,   220,   221,   222,   223,
   224,   225,   226,   227,   228,   229,   211,   516,   212,   213,
   214,   215,   216,   217,   218,   219,   220,   221,   222,   223,
   224,   225,   226,   227,   228,   229,     0,     0,   413,     0,
     0,   211,   230,   212,   213,   214,   215,   216,   217,   218,
   219,   220,   221,   222,   223,   224,   225,   226,   227,   228,
   229,     0,   370,   213,   214,   215,   216,   217,   218,   219,
   220,   221,   222,   223,   224,   225,   226,   227,   228,   229,
     0,     0,   371,   214,   215,   216,   217,   218,   219,   220,
   221,   222,   223,   224,   225,   226,   227,   228,   229,     0,
     0,     0,   373,   211,   374,   212,   213,   214,   215,   216,
   217,   218,   219,   220,   221,   222,   223,   224,   225,   226,
   227,   228,   229,   211,   418,   212,   213,   214,   215,   216,
   217,   218,   219,   220,   221,   222,   223,   224,   225,   226,
   227,   228,   229,   215,   216,   217,   218,   219,   220,   221,
   222,   223,   224,   225,   226,   227,   228,   229,   217,   218,
   219,   220,   221,   222,   223,   224,   225,   226,   227,   228,
   229,    79,    80,    81,    82,    83,    84,    85,    86,    87
};

static const short yycheck[] = {    88,
    59,   178,   179,   164,    17,    57,     4,   246,   247,   382,
    69,     4,     4,     4,   180,    10,    10,    76,     4,     4,
   265,   468,    50,     4,     4,     4,     4,     4,    50,   445,
    15,   566,     4,     4,     4,    15,    15,     4,     4,   113,
   107,   108,   109,   578,    49,    97,    98,    32,   100,   101,
   497,   118,    32,    32,   106,   573,   472,   113,    50,   118,
   119,     4,    10,   581,     4,     5,   122,     4,     5,    48,
     4,     4,    15,   113,   133,   134,     4,   136,    50,   452,
    50,    15,   122,    50,    50,   144,   121,    15,    49,    32,
   125,   113,    62,    10,   122,     4,    62,    67,    32,    16,
   121,    67,   123,   162,    32,    48,    15,   352,    89,   111,
   276,    49,   114,   560,   121,    85,   123,   121,   122,    85,
    90,     4,     5,    32,    90,   123,   121,   121,   126,   121,
   121,   190,   191,   126,   193,   194,   375,   123,   123,   198,
   199,   120,   201,   516,   121,   124,   205,   206,   207,   208,
   121,    37,   211,   212,   213,   214,   215,   216,   217,   218,
   219,   220,   221,   222,   223,   224,   225,   226,   227,   228,
   229,   230,   231,   232,     3,     4,    37,   120,    87,   238,
   239,   121,     4,   123,   121,   121,   123,   123,   121,   123,
   123,    49,   120,   509,    37,   111,   285,   436,   114,   115,
   116,    30,    31,    58,    59,    60,    61,    62,    37,    38,
    39,   120,   528,    28,    29,    30,    31,    32,    33,    34,
    37,   273,    51,   275,    32,    33,    34,    37,   544,    58,
    59,    60,    61,    62,    63,   114,    37,   116,    39,    68,
    69,    70,    71,    72,    73,    30,    31,    32,    33,    34,
   121,    37,   123,   430,     3,     4,     3,     4,     4,     5,
    37,    10,    37,    37,    37,    94,    37,    37,   123,    37,
    37,   100,   117,     4,   287,     4,     4,     4,     4,     4,
     4,    30,    31,     4,   343,   344,   345,   346,    37,    38,
    39,     4,     3,    96,   123,   456,     4,   126,   127,     4,
     4,     4,    51,     4,     4,     4,     4,     4,     4,    49,
   121,   370,   371,    50,    63,   374,   121,    37,    37,    68,
    69,    70,    71,    72,    73,    37,   121,    37,     3,     4,
    37,    37,   121,     4,    16,    10,     6,     7,     8,     9,
    10,    11,    12,    13,    14,    94,    37,    37,    37,    37,
    37,   100,    37,   412,    16,    30,    31,   122,    10,   123,
   449,   123,    37,    38,    39,   123,   123,    37,   123,   123,
   123,   123,   121,     4,     4,     4,    51,   126,   127,     4,
     4,   440,     4,     4,   473,   444,     4,   446,    63,     4,
    49,   114,     4,    68,    69,    70,    71,    72,    73,    37,
   577,     3,     4,    16,   122,   582,   123,   123,   585,   123,
     4,    37,    16,    89,   123,   474,    79,   506,     4,    94,
   122,     4,    80,    16,   513,   100,   121,    16,    30,    31,
   123,   123,    37,    49,    37,    37,    38,    39,    40,   123,
    37,    10,   123,   121,    10,   122,   121,     3,     4,    51,
    49,   126,   127,   122,   505,    82,    37,   508,    49,    16,
    16,    63,    37,    37,    37,    37,    68,    69,    70,    71,
    72,    73,    50,   524,    30,    31,    37,    37,    37,   123,
   569,    37,    38,    39,   535,    37,   123,   123,    37,   540,
    25,   542,    94,     3,     4,    51,    16,     4,   100,    89,
   123,   552,    49,   123,   123,     4,    25,    63,     4,    50,
     4,   562,    68,    69,    70,    71,    72,    73,     0,    15,
    30,    31,   123,     0,   126,   127,   192,    37,    38,    39,
   185,   108,   443,   168,   535,   522,    32,   497,    94,   528,
   560,    51,   500,   394,   100,    41,    42,    43,    44,    45,
   561,   420,    48,    63,   345,   189,    -1,    -1,    68,    69,
    70,    71,    72,    73,    -1,    -1,   550,    -1,    -1,    -1,
   126,   127,    24,    25,    26,    27,    28,    29,    30,    31,
    32,    33,    34,    -1,    94,    81,    -1,    83,     4,    -1,
   100,    87,    -1,    -1,    90,    15,    -1,    17,    18,    19,
    20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
    30,    31,    32,    33,    34,    -1,   126,   127,    -1,    -1,
    -1,    -1,    -1,   119,   120,    -1,   122,    -1,   124,    -1,
    46,    47,    -1,    -1,    -1,    -1,    52,    53,    54,    55,
    56,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    64,    65,
    66,    67,    -1,    -1,    -1,    -1,    -1,    -1,    74,    75,
    76,    77,    78,    79,    -1,     4,    -1,    -1,    84,    85,
    86,    -1,    -1,    15,    90,    17,    18,    19,    20,    21,
    22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
    32,    33,    34,    -1,    -1,   111,    -1,    36,     4,    -1,
    -1,   117,    -1,   123,    -1,    -1,   122,    46,    47,    -1,
    -1,    -1,    -1,    52,    53,    54,    55,    56,    -1,    -1,
    -1,    -1,    -1,     4,    -1,    64,    65,    66,    67,    -1,
    -1,    -1,    38,    -1,    -1,    74,    75,    76,    77,    78,
    79,    -1,    -1,    -1,    -1,    84,    85,    86,    -1,    55,
    -1,    90,    -1,    -1,    -1,    36,    -1,    38,    21,    22,
    23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
    33,    34,   111,    -1,    55,    -1,    -1,    -1,    -1,    -1,
    -1,   123,    88,   122,    -1,    91,    92,    93,    94,    95,
    96,    97,    98,    99,    -1,   101,   102,   103,   104,   105,
    -1,    -1,    -1,    -1,   110,   111,   112,    88,    -1,    -1,
    91,    92,    93,    94,    95,    -1,    97,    98,    99,    -1,
   101,   102,   103,   104,   105,    -1,    -1,    -1,    -1,   110,
   111,   112,    15,    -1,    17,    18,    19,    20,    21,    22,
    23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
    33,    34,    15,    -1,    17,    18,    19,    20,    21,    22,
    23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
    33,    34,    15,    -1,    17,    18,    19,    20,    21,    22,
    23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
    33,    34,    15,    -1,    17,    18,    19,    20,    21,    22,
    23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
    33,    34,    15,    -1,    17,    18,    19,    20,    21,    22,
    23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
    33,    34,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    15,
   123,    17,    18,    19,    20,    21,    22,    23,    24,    25,
    26,    27,    28,    29,    30,    31,    32,    33,    34,    15,
   123,    17,    18,    19,    20,    21,    22,    23,    24,    25,
    26,    27,    28,    29,    30,    31,    32,    33,    34,    15,
   123,    17,    18,    19,    20,    21,    22,    23,    24,    25,
    26,    27,    28,    29,    30,    31,    32,    33,    34,    15,
   123,    17,    18,    19,    20,    21,    22,    23,    24,    25,
    26,    27,    28,    29,    30,    31,    32,    33,    34,    15,
   123,    17,    18,    19,    20,    21,    22,    23,    24,    25,
    26,    27,    28,    29,    30,    31,    32,    33,    34,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    15,   123,    17,    18,
    19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
    29,    30,    31,    32,    33,    34,    15,   123,    17,    18,
    19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
    29,    30,    31,    32,    33,    34,    15,   123,    17,    18,
    19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
    29,    30,    31,    32,    33,    34,    15,   123,    17,    18,
    19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
    29,    30,    31,    32,    33,    34,    15,   123,    17,    18,
    19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
    29,    30,    31,    32,    33,    34,    -1,    -1,    37,    -1,
    -1,    15,   121,    17,    18,    19,    20,    21,    22,    23,
    24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
    34,    -1,   121,    18,    19,    20,    21,    22,    23,    24,
    25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
    -1,    -1,   121,    19,    20,    21,    22,    23,    24,    25,
    26,    27,    28,    29,    30,    31,    32,    33,    34,    -1,
    -1,    -1,   121,    15,    16,    17,    18,    19,    20,    21,
    22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
    32,    33,    34,    15,    16,    17,    18,    19,    20,    21,
    22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
    32,    33,    34,    20,    21,    22,    23,    24,    25,    26,
    27,    28,    29,    30,    31,    32,    33,    34,    22,    23,
    24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
    34,     6,     7,     8,     9,    10,    11,    12,    13,    14
};
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
#line 3 "/usr/share/bison/bison.simple"
/* This file comes from bison-1.28.  */

/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

#ifndef YYSTACK_USE_ALLOCA
#ifdef alloca
#define YYSTACK_USE_ALLOCA
#else /* alloca not defined */
#ifdef __GNUC__
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#else /* not GNU C.  */
#if (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc) || defined (__sgi) || (defined (__sun) && defined (__i386))
#define YYSTACK_USE_ALLOCA
#include <alloca.h>
#else /* not sparc */
/* We think this test detects Watcom and Microsoft C.  */
/* This used to test MSDOS, but that is a bad idea
   since that symbol is in the user namespace.  */
#if (defined (_MSDOS) || defined (_MSDOS_)) && !defined (__TURBOC__)
#if 0 /* No need for malloc.h, which pollutes the namespace;
	 instead, just don't use alloca.  */
#include <malloc.h>
#endif
#else /* not MSDOS, or __TURBOC__ */
#if defined(_AIX)
/* I don't know what this was needed for, but it pollutes the namespace.
   So I turned it off.   rms, 2 May 1997.  */
/* #include <malloc.h>  */
 #pragma alloca
#define YYSTACK_USE_ALLOCA
#else /* not MSDOS, or __TURBOC__, or _AIX */
#if 0
#ifdef __hpux /* haible@@ilog.fr says this works for HPUX 9.05 and up,
		 and on HPUX 10.  Eventually we can turn this on.  */
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#endif /* __hpux */
#endif
#endif /* not _AIX */
#endif /* not MSDOS, or __TURBOC__ */
#endif /* not sparc */
#endif /* not GNU C */
#endif /* alloca not defined */
#endif /* YYSTACK_USE_ALLOCA not defined */

#ifdef YYSTACK_USE_ALLOCA
#define YYSTACK_ALLOC alloca
#else
#define YYSTACK_ALLOC malloc
#endif

/* Note: there must be only one dollar sign in this file.
   It is replaced by the list of actions, each action
   as one case of the switch.  */

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	goto yyacceptlab
#define YYABORT 	goto yyabortlab
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    { yychar = (token), yylval = (value);			\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { yyerror ("syntax error: cannot back up"); YYERROR; }	\
while (0)

#define YYTERROR	1
#define YYERRCODE	256

#ifndef YYPURE
#define YYLEX		yylex()
#endif

#ifdef YYPURE
#ifdef YYLSP_NEEDED
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, &yylloc, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval, &yylloc)
#endif
#else /* not YYLSP_NEEDED */
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval)
#endif
#endif /* not YYLSP_NEEDED */
#endif

/* If nonreentrant, generate the variables here */

#ifndef YYPURE

int	yychar;			/*  the lookahead symbol		*/
YYSTYPE	yylval;			/*  the semantic value of the		*/
				/*  lookahead symbol			*/

#ifdef YYLSP_NEEDED
YYLTYPE yylloc;			/*  location data for the lookahead	*/
				/*  symbol				*/
#endif

int yynerrs;			/*  number of parse errors so far       */
#endif  /* not YYPURE */

#if YYDEBUG != 0
int yydebug;			/*  nonzero means print parse trace	*/
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif

/*  YYINITDEPTH indicates the initial size of the parser's stacks	*/

#ifndef	YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif

/* Define __yy_memcpy.  Note that the size argument
   should be passed with type unsigned int, because that is what the non-GCC
   definitions require.  With GCC, __builtin_memcpy takes an arg
   of type size_t, but it can handle unsigned int.  */

#if __GNUC__ > 1		/* GNU C and GNU C++ define this.  */
#define __yy_memcpy(TO,FROM,COUNT)	__builtin_memcpy(TO,FROM,COUNT)
#else				/* not GNU C or C++ */
#ifndef __cplusplus

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (to, from, count)
     char *to;
     char *from;
     unsigned int count;
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#else /* __cplusplus */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (char *to, char *from, unsigned int count)
{
  register char *t = to;
  register char *f = from;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#endif
#endif

#line 217 "/usr/share/bison/bison.simple"

/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
#ifdef __cplusplus
#define YYPARSE_PARAM_ARG void *YYPARSE_PARAM
#define YYPARSE_PARAM_DECL
#else /* not __cplusplus */
#define YYPARSE_PARAM_ARG YYPARSE_PARAM
#define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
#endif /* not __cplusplus */
#else /* not YYPARSE_PARAM */
#define YYPARSE_PARAM_ARG
#define YYPARSE_PARAM_DECL
#endif /* not YYPARSE_PARAM */

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
#ifdef YYPARSE_PARAM
int yyparse (void *);
#else
int yyparse (void);
#endif
#endif

int
yyparse(YYPARSE_PARAM_ARG)
     YYPARSE_PARAM_DECL
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YYSTYPE *yyvsp;
  int yyerrstatus;	/*  number of tokens to shift before error messages enabled */
  int yychar1 = 0;		/*  lookahead token as an internal (translated) token number */

  short	yyssa[YYINITDEPTH];	/*  the state stack			*/
  YYSTYPE yyvsa[YYINITDEPTH];	/*  the semantic value stack		*/

  short *yyss = yyssa;		/*  refer to the stacks thru separate pointers */
  YYSTYPE *yyvs = yyvsa;	/*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YYLSP_NEEDED
  YYLTYPE yylsa[YYINITDEPTH];	/*  the location stack			*/
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;
  int yyfree_stacks = 0;

#ifdef YYPURE
  int yychar;
  YYSTYPE yylval;
  int yynerrs;
#ifdef YYLSP_NEEDED
  YYLTYPE yylloc;
#endif
#endif

  YYSTYPE yyval;		/*  the variable used to return		*/
				/*  semantic values from the action	*/
				/*  routines				*/

  int yylen;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Starting parse\n");
#endif

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YYLSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
yynewstate:

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YYSTYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YYLSP_NEEDED
      YYLTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YYLSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YYLSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	  yyerror("parser stack overflow");
	  if (yyfree_stacks)
	    {
	      free (yyss);
	      free (yyvs);
#ifdef YYLSP_NEEDED
	      free (yyls);
#endif
	    }
	  return 2;
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
#ifndef YYSTACK_USE_ALLOCA
      yyfree_stacks = 1;
#endif
      yyss = (short *) YYSTACK_ALLOC (yystacksize * sizeof (*yyssp));
      __yy_memcpy ((char *)yyss, (char *)yyss1,
		   size * (unsigned int) sizeof (*yyssp));
      yyvs = (YYSTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yyvsp));
      __yy_memcpy ((char *)yyvs, (char *)yyvs1,
		   size * (unsigned int) sizeof (*yyvsp));
#ifdef YYLSP_NEEDED
      yyls = (YYLTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yylsp));
      __yy_memcpy ((char *)yyls, (char *)yyls1,
		   size * (unsigned int) sizeof (*yylsp));
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YYLSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  goto yybackup;
 yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Reading a token: ");
#endif
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(yychar);

#if YYDEBUG != 0
      if (yydebug)
	{
	  fprintf (stderr, "Next token is %d (%s", yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting token %d (%s), ", yychar, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  goto yynewstate;

/* Do the default action for the current state.  */
yydefault:

  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
yyreduce:
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YYDEBUG != 0
  if (yydebug)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


  switch (yyn) {

case 6:
#line 165 "ldgram.y"
{ ldlex_defsym(); ;
    break;}
case 7:
#line 167 "ldgram.y"
{
		  ldlex_popstate();
		  lang_add_assignment(exp_assop(yyvsp[-1].token,yyvsp[-2].name,yyvsp[0].etree));
		;
    break;}
case 8:
#line 174 "ldgram.y"
{
		  ldlex_mri_script ();
		  PUSH_ERROR (_("MRI style script"));
		;
    break;}
case 9:
#line 179 "ldgram.y"
{
		  ldlex_popstate ();
		  mri_draw_tree ();
		  POP_ERROR ();
		;
    break;}
case 14:
#line 194 "ldgram.y"
{
			einfo(_("%P%F: unrecognised keyword in MRI style script '%s'\n"),yyvsp[0].name);
			;
    break;}
case 15:
#line 197 "ldgram.y"
{
			config.map_filename = "-";
			;
    break;}
case 18:
#line 203 "ldgram.y"
{ mri_public(yyvsp[-2].name, yyvsp[0].etree); ;
    break;}
case 19:
#line 205 "ldgram.y"
{ mri_public(yyvsp[-2].name, yyvsp[0].etree); ;
    break;}
case 20:
#line 207 "ldgram.y"
{ mri_public(yyvsp[-1].name, yyvsp[0].etree); ;
    break;}
case 21:
#line 209 "ldgram.y"
{ mri_format(yyvsp[0].name); ;
    break;}
case 22:
#line 211 "ldgram.y"
{ mri_output_section(yyvsp[-2].name, yyvsp[0].etree);;
    break;}
case 23:
#line 213 "ldgram.y"
{ mri_output_section(yyvsp[-1].name, yyvsp[0].etree);;
    break;}
case 24:
#line 215 "ldgram.y"
{ mri_output_section(yyvsp[-2].name, yyvsp[0].etree);;
    break;}
case 25:
#line 217 "ldgram.y"
{ mri_align(yyvsp[-2].name,yyvsp[0].etree); ;
    break;}
case 26:
#line 219 "ldgram.y"
{ mri_align(yyvsp[-2].name,yyvsp[0].etree); ;
    break;}
case 27:
#line 221 "ldgram.y"
{ mri_alignmod(yyvsp[-2].name,yyvsp[0].etree); ;
    break;}
case 28:
#line 223 "ldgram.y"
{ mri_alignmod(yyvsp[-2].name,yyvsp[0].etree); ;
    break;}
case 31:
#line 227 "ldgram.y"
{ mri_name(yyvsp[0].name); ;
    break;}
case 32:
#line 229 "ldgram.y"
{ mri_alias(yyvsp[-2].name,yyvsp[0].name,0);;
    break;}
case 33:
#line 231 "ldgram.y"
{ mri_alias(yyvsp[-2].name,0,(int) yyvsp[0].integer);;
    break;}
case 34:
#line 233 "ldgram.y"
{ mri_base(yyvsp[0].etree); ;
    break;}
case 35:
#line 235 "ldgram.y"
{  mri_truncate((unsigned int) yyvsp[0].integer); ;
    break;}
case 38:
#line 239 "ldgram.y"
{ ldfile_open_command_file (yyvsp[0].name); ;
    break;}
case 40:
#line 241 "ldgram.y"
{ lang_add_entry (yyvsp[0].name, false); ;
    break;}
case 42:
#line 246 "ldgram.y"
{ mri_order(yyvsp[0].name); ;
    break;}
case 43:
#line 247 "ldgram.y"
{ mri_order(yyvsp[0].name); ;
    break;}
case 45:
#line 253 "ldgram.y"
{ mri_load(yyvsp[0].name); ;
    break;}
case 46:
#line 254 "ldgram.y"
{ mri_load(yyvsp[0].name); ;
    break;}
case 47:
#line 259 "ldgram.y"
{ mri_only_load(yyvsp[0].name); ;
    break;}
case 48:
#line 261 "ldgram.y"
{ mri_only_load(yyvsp[0].name); ;
    break;}
case 49:
#line 265 "ldgram.y"
{ yyval.name = NULL; ;
    break;}
case 52:
#line 272 "ldgram.y"
{ ldlang_add_undef (yyvsp[0].name); ;
    break;}
case 53:
#line 274 "ldgram.y"
{ ldlang_add_undef (yyvsp[0].name); ;
    break;}
case 54:
#line 276 "ldgram.y"
{ ldlang_add_undef (yyvsp[0].name); ;
    break;}
case 55:
#line 280 "ldgram.y"
{
	 ldlex_both();
	;
    break;}
case 56:
#line 284 "ldgram.y"
{
	ldlex_popstate();
	;
    break;}
case 69:
#line 309 "ldgram.y"
{ lang_add_target(yyvsp[-1].name); ;
    break;}
case 70:
#line 311 "ldgram.y"
{ ldfile_add_library_path (yyvsp[-1].name, false); ;
    break;}
case 71:
#line 313 "ldgram.y"
{ lang_add_output(yyvsp[-1].name, 1); ;
    break;}
case 72:
#line 315 "ldgram.y"
{ lang_add_output_format (yyvsp[-1].name, (char *) NULL,
					    (char *) NULL, 1); ;
    break;}
case 73:
#line 318 "ldgram.y"
{ lang_add_output_format (yyvsp[-5].name, yyvsp[-3].name, yyvsp[-1].name, 1); ;
    break;}
case 74:
#line 320 "ldgram.y"
{ ldfile_set_output_arch(yyvsp[-1].name); ;
    break;}
case 75:
#line 322 "ldgram.y"
{ command_line.force_common_definition = true ; ;
    break;}
case 77:
#line 325 "ldgram.y"
{ lang_enter_group (); ;
    break;}
case 78:
#line 327 "ldgram.y"
{ lang_leave_group (); ;
    break;}
case 79:
#line 329 "ldgram.y"
{ lang_add_map(yyvsp[-1].name); ;
    break;}
case 80:
#line 331 "ldgram.y"
{ ldfile_open_command_file(yyvsp[0].name); ;
    break;}
case 82:
#line 333 "ldgram.y"
{
		  lang_add_nocrossref (yyvsp[-1].nocrossref);
		;
    break;}
case 84:
#line 341 "ldgram.y"
{ lang_add_input_file(yyvsp[0].name,lang_input_file_is_search_file_enum,
				 (char *)NULL); ;
    break;}
case 85:
#line 344 "ldgram.y"
{ lang_add_input_file(yyvsp[0].name,lang_input_file_is_search_file_enum,
				 (char *)NULL); ;
    break;}
case 86:
#line 347 "ldgram.y"
{ lang_add_input_file(yyvsp[0].name,lang_input_file_is_search_file_enum,
				 (char *)NULL); ;
    break;}
case 87:
#line 350 "ldgram.y"
{ lang_add_input_file(yyvsp[0].name,lang_input_file_is_l_enum,
				 (char *)NULL); ;
    break;}
case 88:
#line 353 "ldgram.y"
{ lang_add_input_file(yyvsp[0].name,lang_input_file_is_l_enum,
				 (char *)NULL); ;
    break;}
case 89:
#line 356 "ldgram.y"
{ lang_add_input_file(yyvsp[0].name,lang_input_file_is_l_enum,
				 (char *)NULL); ;
    break;}
case 94:
#line 372 "ldgram.y"
{ lang_add_entry (yyvsp[-1].name, false); ;
    break;}
case 96:
#line 380 "ldgram.y"
{
			  yyval.cname = yyvsp[0].name;
			;
    break;}
case 97:
#line 384 "ldgram.y"
{
			  yyval.cname = "*";
			;
    break;}
case 98:
#line 388 "ldgram.y"
{
			  yyval.cname = "?";
			;
    break;}
case 99:
#line 395 "ldgram.y"
{
			  yyval.wildcard.name = yyvsp[0].cname;
			  yyval.wildcard.sorted = false;
			  yyval.wildcard.exclude_name_list = NULL;
			;
    break;}
case 100:
#line 401 "ldgram.y"
{
			  yyval.wildcard.name = yyvsp[0].cname;
			  yyval.wildcard.sorted = false;
			  yyval.wildcard.exclude_name_list = yyvsp[-2].name_list;
			;
    break;}
case 101:
#line 407 "ldgram.y"
{
			  yyval.wildcard.name = yyvsp[-1].cname;
			  yyval.wildcard.sorted = true;
			  yyval.wildcard.exclude_name_list = NULL;
			;
    break;}
case 102:
#line 413 "ldgram.y"
{
			  yyval.wildcard.name = yyvsp[-1].cname;
			  yyval.wildcard.sorted = true;
			  yyval.wildcard.exclude_name_list = yyvsp[-3].name_list;
			;
    break;}
case 103:
#line 424 "ldgram.y"
{
			  struct name_list *tmp;
			  tmp = (struct name_list *) xmalloc (sizeof *tmp);
			  tmp->name = yyvsp[0].cname;
			  tmp->next = yyvsp[-1].name_list;
			  yyval.name_list = tmp;	
			;
    break;}
case 104:
#line 433 "ldgram.y"
{
			  struct name_list *tmp;
			  tmp = (struct name_list *) xmalloc (sizeof *tmp);
			  tmp->name = yyvsp[0].cname;
			  tmp->next = NULL;
			  yyval.name_list = tmp;
			;
    break;}
case 105:
#line 444 "ldgram.y"
{
			  lang_add_wild (yyvsp[0].wildcard.name, yyvsp[0].wildcard.sorted,
					 current_file.name,
					 current_file.sorted,
					 ldgram_had_keep, yyvsp[0].wildcard.exclude_name_list);
			;
    break;}
case 106:
#line 451 "ldgram.y"
{
			  lang_add_wild (yyvsp[0].wildcard.name, yyvsp[0].wildcard.sorted,
					 current_file.name,
					 current_file.sorted,
					 ldgram_had_keep, yyvsp[0].wildcard.exclude_name_list);
			;
    break;}
case 107:
#line 461 "ldgram.y"
{
			  lang_add_wild (NULL, false, yyvsp[0].name, false,
					 ldgram_had_keep, NULL);
			;
    break;}
case 108:
#line 466 "ldgram.y"
{
			  current_file.name = NULL;
			  current_file.sorted = false;
			;
    break;}
case 110:
#line 472 "ldgram.y"
{
			  current_file = yyvsp[0].wildcard;
			  /* '*' matches any file name.  */
			  if (strcmp (current_file.name, "*") == 0)
			    current_file.name = NULL;
			;
    break;}
case 113:
#line 484 "ldgram.y"
{ ldgram_had_keep = true; ;
    break;}
case 114:
#line 486 "ldgram.y"
{ ldgram_had_keep = false; ;
    break;}
case 116:
#line 492 "ldgram.y"
{
 		lang_add_attribute(lang_object_symbols_statement_enum); 
	      	;
    break;}
case 118:
#line 497 "ldgram.y"
{
 		
		  lang_add_attribute(lang_constructors_statement_enum); 
		;
    break;}
case 119:
#line 502 "ldgram.y"
{
		  constructors_sorted = true;
		  lang_add_attribute (lang_constructors_statement_enum);
		;
    break;}
case 121:
#line 508 "ldgram.y"
{
			lang_add_data((int) yyvsp[-3].integer,yyvsp[-1].etree);
			;
    break;}
case 122:
#line 513 "ldgram.y"
{
			  lang_add_fill
			    (exp_get_value_int(yyvsp[-1].etree,
					       0,
					       "fill value",
					       lang_first_phase_enum));
			;
    break;}
case 127:
#line 534 "ldgram.y"
{ yyval.integer = yyvsp[0].token; ;
    break;}
case 128:
#line 536 "ldgram.y"
{ yyval.integer = yyvsp[0].token; ;
    break;}
case 129:
#line 538 "ldgram.y"
{ yyval.integer = yyvsp[0].token; ;
    break;}
case 130:
#line 540 "ldgram.y"
{ yyval.integer = yyvsp[0].token; ;
    break;}
case 131:
#line 542 "ldgram.y"
{ yyval.integer = yyvsp[0].token; ;
    break;}
case 132:
#line 547 "ldgram.y"
{
		  yyval.integer =	 exp_get_value_int(yyvsp[0].etree,
					   0,
					   "fill value",
					   lang_first_phase_enum);
		;
    break;}
case 133:
#line 553 "ldgram.y"
{ yyval.integer = 0; ;
    break;}
case 134:
#line 560 "ldgram.y"
{ yyval.token = '+'; ;
    break;}
case 135:
#line 562 "ldgram.y"
{ yyval.token = '-'; ;
    break;}
case 136:
#line 564 "ldgram.y"
{ yyval.token = '*'; ;
    break;}
case 137:
#line 566 "ldgram.y"
{ yyval.token = '/'; ;
    break;}
case 138:
#line 568 "ldgram.y"
{ yyval.token = LSHIFT; ;
    break;}
case 139:
#line 570 "ldgram.y"
{ yyval.token = RSHIFT; ;
    break;}
case 140:
#line 572 "ldgram.y"
{ yyval.token = '&'; ;
    break;}
case 141:
#line 574 "ldgram.y"
{ yyval.token = '|'; ;
    break;}
case 144:
#line 584 "ldgram.y"
{
		  lang_add_assignment (exp_assop (yyvsp[-1].token, yyvsp[-2].name, yyvsp[0].etree));
		;
    break;}
case 145:
#line 588 "ldgram.y"
{
		  lang_add_assignment (exp_assop ('=', yyvsp[-2].name,
						  exp_binop (yyvsp[-1].token,
							     exp_nameop (NAME,
									 yyvsp[-2].name),
							     yyvsp[0].etree)));
		;
    break;}
case 146:
#line 596 "ldgram.y"
{
		  lang_add_assignment (exp_provide (yyvsp[-3].name, yyvsp[-1].etree));
		;
    break;}
case 153:
#line 618 "ldgram.y"
{ region = lang_memory_region_lookup(yyvsp[0].name); ;
    break;}
case 155:
#line 626 "ldgram.y"
{ region->current =
		 region->origin =
		 exp_get_vma(yyvsp[0].etree, 0L,"origin", lang_first_phase_enum);
;
    break;}
case 156:
#line 634 "ldgram.y"
{ region->length = exp_get_vma(yyvsp[0].etree,
					       ~((bfd_vma)0),
					       "length",
					       lang_first_phase_enum);
		;
    break;}
case 157:
#line 643 "ldgram.y"
{ /* dummy action to avoid bison 1.25 error message */ ;
    break;}
case 161:
#line 654 "ldgram.y"
{ lang_set_flags (region, yyvsp[0].name, 0); ;
    break;}
case 162:
#line 656 "ldgram.y"
{ lang_set_flags (region, yyvsp[0].name, 1); ;
    break;}
case 163:
#line 661 "ldgram.y"
{ lang_startup(yyvsp[-1].name); ;
    break;}
case 165:
#line 667 "ldgram.y"
{ ldemul_hll((char *)NULL); ;
    break;}
case 166:
#line 672 "ldgram.y"
{ ldemul_hll(yyvsp[0].name); ;
    break;}
case 167:
#line 674 "ldgram.y"
{ ldemul_hll(yyvsp[0].name); ;
    break;}
case 169:
#line 682 "ldgram.y"
{ ldemul_syslib(yyvsp[0].name); ;
    break;}
case 171:
#line 688 "ldgram.y"
{ lang_float(true); ;
    break;}
case 172:
#line 690 "ldgram.y"
{ lang_float(false); ;
    break;}
case 173:
#line 695 "ldgram.y"
{
		  yyval.nocrossref = NULL;
		;
    break;}
case 174:
#line 699 "ldgram.y"
{
		  struct lang_nocrossref *n;

		  n = (struct lang_nocrossref *) xmalloc (sizeof *n);
		  n->name = yyvsp[-1].name;
		  n->next = yyvsp[0].nocrossref;
		  yyval.nocrossref = n;
		;
    break;}
case 175:
#line 708 "ldgram.y"
{
		  struct lang_nocrossref *n;

		  n = (struct lang_nocrossref *) xmalloc (sizeof *n);
		  n->name = yyvsp[-2].name;
		  n->next = yyvsp[0].nocrossref;
		  yyval.nocrossref = n;
		;
    break;}
case 176:
#line 718 "ldgram.y"
{ ldlex_expression(); ;
    break;}
case 177:
#line 720 "ldgram.y"
{ ldlex_popstate(); yyval.etree=yyvsp[0].etree;;
    break;}
case 178:
#line 725 "ldgram.y"
{ yyval.etree = exp_unop('-', yyvsp[0].etree); ;
    break;}
case 179:
#line 727 "ldgram.y"
{ yyval.etree = yyvsp[-1].etree; ;
    break;}
case 180:
#line 729 "ldgram.y"
{ yyval.etree = exp_unop((int) yyvsp[-3].integer,yyvsp[-1].etree); ;
    break;}
case 181:
#line 731 "ldgram.y"
{ yyval.etree = exp_unop('!', yyvsp[0].etree); ;
    break;}
case 182:
#line 733 "ldgram.y"
{ yyval.etree = yyvsp[0].etree; ;
    break;}
case 183:
#line 735 "ldgram.y"
{ yyval.etree = exp_unop('~', yyvsp[0].etree);;
    break;}
case 184:
#line 738 "ldgram.y"
{ yyval.etree = exp_binop('*', yyvsp[-2].etree, yyvsp[0].etree); ;
    break;}
case 185:
#line 740 "ldgram.y"
{ yyval.etree = exp_binop('/', yyvsp[-2].etree, yyvsp[0].etree); ;
    break;}
case 186:
#line 742 "ldgram.y"
{ yyval.etree = exp_binop('%', yyvsp[-2].etree, yyvsp[0].etree); ;
    break;}
case 187:
#line 744 "ldgram.y"
{ yyval.etree = exp_binop('+', yyvsp[-2].etree, yyvsp[0].etree); ;
    break;}
case 188:
#line 746 "ldgram.y"
{ yyval.etree = exp_binop('-' , yyvsp[-2].etree, yyvsp[0].etree); ;
    break;}
case 189:
#line 748 "ldgram.y"
{ yyval.etree = exp_binop(LSHIFT , yyvsp[-2].etree, yyvsp[0].etree); ;
    break;}
case 190:
#line 750 "ldgram.y"
{ yyval.etree = exp_binop(RSHIFT , yyvsp[-2].etree, yyvsp[0].etree); ;
    break;}
case 191:
#line 752 "ldgram.y"
{ yyval.etree = exp_binop(EQ , yyvsp[-2].etree, yyvsp[0].etree); ;
    break;}
case 192:
#line 754 "ldgram.y"
{ yyval.etree = exp_binop(NE , yyvsp[-2].etree, yyvsp[0].etree); ;
    break;}
case 193:
#line 756 "ldgram.y"
{ yyval.etree = exp_binop(LE , yyvsp[-2].etree, yyvsp[0].etree); ;
    break;}
case 194:
#line 758 "ldgram.y"
{ yyval.etree = exp_binop(GE , yyvsp[-2].etree, yyvsp[0].etree); ;
    break;}
case 195:
#line 760 "ldgram.y"
{ yyval.etree = exp_binop('<' , yyvsp[-2].etree, yyvsp[0].etree); ;
    break;}
case 196:
#line 762 "ldgram.y"
{ yyval.etree = exp_binop('>' , yyvsp[-2].etree, yyvsp[0].etree); ;
    break;}
case 197:
#line 764 "ldgram.y"
{ yyval.etree = exp_binop('&' , yyvsp[-2].etree, yyvsp[0].etree); ;
    break;}
case 198:
#line 766 "ldgram.y"
{ yyval.etree = exp_binop('^' , yyvsp[-2].etree, yyvsp[0].etree); ;
    break;}
case 199:
#line 768 "ldgram.y"
{ yyval.etree = exp_binop('|' , yyvsp[-2].etree, yyvsp[0].etree); ;
    break;}
case 200:
#line 770 "ldgram.y"
{ yyval.etree = exp_trinop('?' , yyvsp[-4].etree, yyvsp[-2].etree, yyvsp[0].etree); ;
    break;}
case 201:
#line 772 "ldgram.y"
{ yyval.etree = exp_binop(ANDAND , yyvsp[-2].etree, yyvsp[0].etree); ;
    break;}
case 202:
#line 774 "ldgram.y"
{ yyval.etree = exp_binop(OROR , yyvsp[-2].etree, yyvsp[0].etree); ;
    break;}
case 203:
#line 776 "ldgram.y"
{ yyval.etree = exp_nameop(DEFINED, yyvsp[-1].name); ;
    break;}
case 204:
#line 778 "ldgram.y"
{ yyval.etree = exp_intop(yyvsp[0].integer); ;
    break;}
case 205:
#line 780 "ldgram.y"
{ yyval.etree = exp_nameop(SIZEOF_HEADERS,0); ;
    break;}
case 206:
#line 783 "ldgram.y"
{ yyval.etree = exp_nameop(SIZEOF,yyvsp[-1].name); ;
    break;}
case 207:
#line 785 "ldgram.y"
{ yyval.etree = exp_nameop(ADDR,yyvsp[-1].name); ;
    break;}
case 208:
#line 787 "ldgram.y"
{ yyval.etree = exp_nameop(LOADADDR,yyvsp[-1].name); ;
    break;}
case 209:
#line 789 "ldgram.y"
{ yyval.etree = exp_unop(ABSOLUTE, yyvsp[-1].etree); ;
    break;}
case 210:
#line 791 "ldgram.y"
{ yyval.etree = exp_unop(ALIGN_K,yyvsp[-1].etree); ;
    break;}
case 211:
#line 793 "ldgram.y"
{ yyval.etree = exp_unop(ALIGN_K,yyvsp[-1].etree); ;
    break;}
case 212:
#line 795 "ldgram.y"
{ yyval.etree = exp_nameop(NAME,yyvsp[0].name); ;
    break;}
case 213:
#line 797 "ldgram.y"
{ yyval.etree = exp_binop (MAX_K, yyvsp[-3].etree, yyvsp[-1].etree ); ;
    break;}
case 214:
#line 799 "ldgram.y"
{ yyval.etree = exp_binop (MIN_K, yyvsp[-3].etree, yyvsp[-1].etree ); ;
    break;}
case 215:
#line 801 "ldgram.y"
{ yyval.etree = exp_assert (yyvsp[-3].etree, yyvsp[-1].name); ;
    break;}
case 216:
#line 806 "ldgram.y"
{ yyval.name = yyvsp[0].name; ;
    break;}
case 217:
#line 807 "ldgram.y"
{ yyval.name = "*default*"; ;
    break;}
case 218:
#line 811 "ldgram.y"
{ yyval.etree = yyvsp[-1].etree; ;
    break;}
case 219:
#line 812 "ldgram.y"
{ yyval.etree = 0; ;
    break;}
case 220:
#line 815 "ldgram.y"
{ ldlex_expression(); ;
    break;}
case 221:
#line 817 "ldgram.y"
{ ldlex_popstate (); ldlex_script (); ;
    break;}
case 222:
#line 819 "ldgram.y"
{
			  lang_enter_output_section_statement(yyvsp[-5].name, yyvsp[-3].etree,
							      sectype,
							      0, 0, 0, yyvsp[-2].etree);
			;
    break;}
case 223:
#line 825 "ldgram.y"
{ ldlex_popstate (); ldlex_expression (); ;
    break;}
case 224:
#line 827 "ldgram.y"
{
		  ldlex_popstate ();
		  lang_leave_output_section_statement (yyvsp[0].integer, yyvsp[-3].name, yyvsp[-1].section_phdr, yyvsp[-2].name);
		;
    break;}
case 226:
#line 833 "ldgram.y"
{ ldlex_expression (); ;
    break;}
case 227:
#line 835 "ldgram.y"
{ ldlex_popstate (); ldlex_script (); ;
    break;}
case 228:
#line 837 "ldgram.y"
{
			  lang_enter_overlay (yyvsp[-4].etree, yyvsp[-2].etree, (int) yyvsp[-3].integer);
			;
    break;}
case 229:
#line 842 "ldgram.y"
{ ldlex_popstate (); ldlex_expression (); ;
    break;}
case 230:
#line 844 "ldgram.y"
{
			  ldlex_popstate ();
			  lang_leave_overlay (yyvsp[0].integer, yyvsp[-3].name, yyvsp[-1].section_phdr, yyvsp[-2].name);
			;
    break;}
case 232:
#line 853 "ldgram.y"
{ ldlex_expression (); ;
    break;}
case 233:
#line 855 "ldgram.y"
{
		  ldlex_popstate ();
		  lang_add_assignment (exp_assop ('=', ".", yyvsp[0].etree));
		;
    break;}
case 235:
#line 863 "ldgram.y"
{ sectype = noload_section; ;
    break;}
case 236:
#line 864 "ldgram.y"
{ sectype = dsect_section; ;
    break;}
case 237:
#line 865 "ldgram.y"
{ sectype = copy_section; ;
    break;}
case 238:
#line 866 "ldgram.y"
{ sectype = info_section; ;
    break;}
case 239:
#line 867 "ldgram.y"
{ sectype = overlay_section; ;
    break;}
case 241:
#line 872 "ldgram.y"
{ sectype = normal_section; ;
    break;}
case 242:
#line 873 "ldgram.y"
{ sectype = normal_section; ;
    break;}
case 243:
#line 877 "ldgram.y"
{ yyval.etree = yyvsp[-2].etree; ;
    break;}
case 244:
#line 878 "ldgram.y"
{ yyval.etree = (etree_type *)NULL;  ;
    break;}
case 245:
#line 883 "ldgram.y"
{ yyval.etree = yyvsp[-3].etree; ;
    break;}
case 246:
#line 885 "ldgram.y"
{ yyval.etree = yyvsp[-7].etree; ;
    break;}
case 247:
#line 889 "ldgram.y"
{ yyval.etree = yyvsp[-1].etree; ;
    break;}
case 248:
#line 890 "ldgram.y"
{ yyval.etree = (etree_type *) NULL;  ;
    break;}
case 249:
#line 895 "ldgram.y"
{ yyval.integer = 0; ;
    break;}
case 250:
#line 897 "ldgram.y"
{ yyval.integer = 1; ;
    break;}
case 251:
#line 902 "ldgram.y"
{ yyval.name = yyvsp[0].name; ;
    break;}
case 252:
#line 903 "ldgram.y"
{ yyval.name = "*default*"; ;
    break;}
case 253:
#line 908 "ldgram.y"
{
		  yyval.section_phdr = NULL;
		;
    break;}
case 254:
#line 912 "ldgram.y"
{
		  struct lang_output_section_phdr_list *n;

		  n = ((struct lang_output_section_phdr_list *)
		       xmalloc (sizeof *n));
		  n->name = yyvsp[0].name;
		  n->used = false;
		  n->next = yyvsp[-2].section_phdr;
		  yyval.section_phdr = n;
		;
    break;}
case 256:
#line 928 "ldgram.y"
{
			  ldlex_script ();
			  lang_enter_overlay_section (yyvsp[0].name);
			;
    break;}
case 257:
#line 933 "ldgram.y"
{ ldlex_popstate (); ldlex_expression (); ;
    break;}
case 258:
#line 935 "ldgram.y"
{
			  ldlex_popstate ();
			  lang_leave_overlay_section (yyvsp[0].integer, yyvsp[-1].section_phdr);
			;
    break;}
case 263:
#line 952 "ldgram.y"
{ ldlex_expression (); ;
    break;}
case 264:
#line 953 "ldgram.y"
{ ldlex_popstate (); ;
    break;}
case 265:
#line 955 "ldgram.y"
{
		  lang_new_phdr (yyvsp[-5].name, yyvsp[-3].etree, yyvsp[-2].phdr.filehdr, yyvsp[-2].phdr.phdrs, yyvsp[-2].phdr.at,
				 yyvsp[-2].phdr.flags);
		;
    break;}
case 266:
#line 963 "ldgram.y"
{
		  yyval.etree = yyvsp[0].etree;

		  if (yyvsp[0].etree->type.node_class == etree_name
		      && yyvsp[0].etree->type.node_code == NAME)
		    {
		      const char *s;
		      unsigned int i;
		      static const char * const phdr_types[] =
			{
			  "PT_NULL", "PT_LOAD", "PT_DYNAMIC",
			  "PT_INTERP", "PT_NOTE", "PT_SHLIB",
			  "PT_PHDR"
			};

		      s = yyvsp[0].etree->name.name;
		      for (i = 0;
			   i < sizeof phdr_types / sizeof phdr_types[0];
			   i++)
			if (strcmp (s, phdr_types[i]) == 0)
			  {
			    yyval.etree = exp_intop (i);
			    break;
			  }
		    }
		;
    break;}
case 267:
#line 993 "ldgram.y"
{
		  memset (&yyval.phdr, 0, sizeof (struct phdr_info));
		;
    break;}
case 268:
#line 997 "ldgram.y"
{
		  yyval.phdr = yyvsp[0].phdr;
		  if (strcmp (yyvsp[-2].name, "FILEHDR") == 0 && yyvsp[-1].etree == NULL)
		    yyval.phdr.filehdr = true;
		  else if (strcmp (yyvsp[-2].name, "PHDRS") == 0 && yyvsp[-1].etree == NULL)
		    yyval.phdr.phdrs = true;
		  else if (strcmp (yyvsp[-2].name, "FLAGS") == 0 && yyvsp[-1].etree != NULL)
		    yyval.phdr.flags = yyvsp[-1].etree;
		  else
		    einfo (_("%X%P:%S: PHDRS syntax error at `%s'\n"), yyvsp[-2].name);
		;
    break;}
case 269:
#line 1009 "ldgram.y"
{
		  yyval.phdr = yyvsp[0].phdr;
		  yyval.phdr.at = yyvsp[-2].etree;
		;
    break;}
case 270:
#line 1017 "ldgram.y"
{
		  yyval.etree = NULL;
		;
    break;}
case 271:
#line 1021 "ldgram.y"
{
		  yyval.etree = yyvsp[-1].etree;
		;
    break;}
case 272:
#line 1029 "ldgram.y"
{
		  ldlex_version_file ();
		  PUSH_ERROR (_("VERSION script"));
		;
    break;}
case 273:
#line 1034 "ldgram.y"
{
		  ldlex_popstate ();
		  POP_ERROR ();
		;
    break;}
case 274:
#line 1043 "ldgram.y"
{
		  ldlex_version_script ();
		;
    break;}
case 275:
#line 1047 "ldgram.y"
{
		  ldlex_popstate ();
		;
    break;}
case 278:
#line 1059 "ldgram.y"
{
		  lang_register_vers_node (yyvsp[-4].name, yyvsp[-2].versnode, NULL);
		;
    break;}
case 279:
#line 1063 "ldgram.y"
{
		  lang_register_vers_node (yyvsp[-5].name, yyvsp[-3].versnode, yyvsp[-1].deflist);
		;
    break;}
case 280:
#line 1070 "ldgram.y"
{
		  yyval.deflist = lang_add_vers_depend (NULL, yyvsp[0].name);
		;
    break;}
case 281:
#line 1074 "ldgram.y"
{
		  yyval.deflist = lang_add_vers_depend (yyvsp[-1].deflist, yyvsp[0].name);
		;
    break;}
case 282:
#line 1081 "ldgram.y"
{
		  yyval.versnode = lang_new_vers_node (NULL, NULL);
		;
    break;}
case 283:
#line 1085 "ldgram.y"
{
		  yyval.versnode = lang_new_vers_node (yyvsp[-1].versyms, NULL);
		;
    break;}
case 284:
#line 1089 "ldgram.y"
{
		  yyval.versnode = lang_new_vers_node (yyvsp[-1].versyms, NULL);
		;
    break;}
case 285:
#line 1093 "ldgram.y"
{
		  yyval.versnode = lang_new_vers_node (NULL, yyvsp[-1].versyms);
		;
    break;}
case 286:
#line 1097 "ldgram.y"
{
		  yyval.versnode = lang_new_vers_node (yyvsp[-5].versyms, yyvsp[-1].versyms);
		;
    break;}
case 287:
#line 1104 "ldgram.y"
{
		  yyval.versyms = lang_new_vers_regex (NULL, yyvsp[0].name, ldgram_vers_current_lang);
		;
    break;}
case 288:
#line 1108 "ldgram.y"
{
		  yyval.versyms = lang_new_vers_regex (yyvsp[-2].versyms, yyvsp[0].name, ldgram_vers_current_lang);
		;
    break;}
case 289:
#line 1112 "ldgram.y"
{
			  yyval.name = ldgram_vers_current_lang;
			  ldgram_vers_current_lang = yyvsp[-1].name;
			;
    break;}
case 290:
#line 1117 "ldgram.y"
{
			  yyval.versyms = yyvsp[-1].versyms;
			  ldgram_vers_current_lang = yyvsp[-2].name;
			;
    break;}
}
   /* the action file gets copied in in place of this dollarsign */
#line 543 "/usr/share/bison/bison.simple"

  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YYLSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = yylloc.first_line;
      yylsp->first_column = yylloc.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;

yyerrlab:   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      yyerror(msg);
	      free(msg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror("parse error");
    }

  goto yyerrlab1;
yyerrlab1:   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Discarding token %d (%s).\n", yychar, yytname[yychar1]);
#endif

      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;

yyerrdefault:  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) goto yydefault;
#endif

yyerrpop:   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

yyerrhandle:

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;

 yyacceptlab:
  /* YYACCEPT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 0;

 yyabortlab:
  /* YYABORT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 1;
}
#line 1123 "ldgram.y"

void
yyerror(arg) 
     const char *arg;
{ 
  if (ldfile_assumed_script)
    einfo (_("%P:%s: file format not recognized; treating as linker script\n"),
	   ldfile_input_filename);
  if (error_index > 0 && error_index < ERROR_NAME_MAX)
     einfo ("%P%F:%S: %s in %s\n", arg, error_names[error_index-1]);
  else
     einfo ("%P%F:%S: %s\n", arg);
}
@


1.1
log
@Initial revision
@
text
@@


1.1.2.1
log
@vendor-branch-i-fy GNU binutils (2.11.2) to facilitate an update
@
text
@@


1.1.2.2
log
@Import GNU binutils 2.14 from the Free Software Foundation
(in case the update goes FUBAR, it can be easily backed off)
@
text
@d1 3
a3 2
/* A Bison parser, made from ldgram.y
   by GNU bison 1.35.  */
d7 102
a108 105
# define	INT	257
# define	NAME	258
# define	LNAME	259
# define	PLUSEQ	260
# define	MINUSEQ	261
# define	MULTEQ	262
# define	DIVEQ	263
# define	LSHIFTEQ	264
# define	RSHIFTEQ	265
# define	ANDEQ	266
# define	OREQ	267
# define	OROR	268
# define	ANDAND	269
# define	EQ	270
# define	NE	271
# define	LE	272
# define	GE	273
# define	LSHIFT	274
# define	RSHIFT	275
# define	UNARY	276
# define	END	277
# define	ALIGN_K	278
# define	BLOCK	279
# define	BIND	280
# define	QUAD	281
# define	SQUAD	282
# define	LONG	283
# define	SHORT	284
# define	BYTE	285
# define	SECTIONS	286
# define	PHDRS	287
# define	SORT	288
# define	DATA_SEGMENT_ALIGN	289
# define	DATA_SEGMENT_END	290
# define	SIZEOF_HEADERS	291
# define	OUTPUT_FORMAT	292
# define	FORCE_COMMON_ALLOCATION	293
# define	OUTPUT_ARCH	294
# define	INHIBIT_COMMON_ALLOCATION	295
# define	INCLUDE	296
# define	MEMORY	297
# define	DEFSYMEND	298
# define	NOLOAD	299
# define	DSECT	300
# define	COPY	301
# define	INFO	302
# define	OVERLAY	303
# define	DEFINED	304
# define	TARGET_K	305
# define	SEARCH_DIR	306
# define	MAP	307
# define	ENTRY	308
# define	NEXT	309
# define	SIZEOF	310
# define	ADDR	311
# define	LOADADDR	312
# define	MAX_K	313
# define	MIN_K	314
# define	STARTUP	315
# define	HLL	316
# define	SYSLIB	317
# define	FLOAT	318
# define	NOFLOAT	319
# define	NOCROSSREFS	320
# define	ORIGIN	321
# define	FILL	322
# define	LENGTH	323
# define	CREATE_OBJECT_SYMBOLS	324
# define	INPUT	325
# define	GROUP	326
# define	OUTPUT	327
# define	CONSTRUCTORS	328
# define	ALIGNMOD	329
# define	AT	330
# define	PROVIDE	331
# define	CHIP	332
# define	LIST	333
# define	SECT	334
# define	ABSOLUTE	335
# define	LOAD	336
# define	NEWLINE	337
# define	ENDWORD	338
# define	ORDER	339
# define	NAMEWORD	340
# define	ASSERT_K	341
# define	FORMAT	342
# define	PUBLIC	343
# define	BASE	344
# define	ALIAS	345
# define	TRUNCATE	346
# define	REL	347
# define	INPUT_SCRIPT	348
# define	INPUT_MRI_SCRIPT	349
# define	INPUT_DEFSYM	350
# define	CASE	351
# define	EXTERN	352
# define	START	353
# define	VERS_TAG	354
# define	VERS_IDENTIFIER	355
# define	GLOBAL	356
# define	LOCAL	357
# define	VERSIONK	358
# define	INPUT_VERSION_SCRIPT	359
# define	KEEP	360
# define	EXCLUDE_FILE	361
d121 1
a121 1
#include "ld.h"
d141 8
a148 7
bfd_boolean ldgram_want_filename = TRUE;
FILE *saved_script_handle = NULL;
bfd_boolean force_make_executable = FALSE;

bfd_boolean ldgram_in_script = FALSE;
bfd_boolean ldgram_had_equals = FALSE;
bfd_boolean ldgram_had_keep = FALSE;
d157 1
a157 2
#line 67 "ldgram.y"
#ifndef YYSTYPE
a159 6
  struct big_int
    {
      bfd_vma integer;
      char *str;
    } bigint;
  fill_type *fill;
a162 1
  struct wildcard_list *wildcard_list;
d168 2
a169 2
      bfd_boolean filehdr;
      bfd_boolean phdrs;
d178 6
a183 3
} yystype;
# define YYSTYPE yystype
# define YYSTYPE_IS_TRIVIAL 1
a184 2
#ifndef YYDEBUG
# define YYDEBUG 0
d189 1
a189 1
#define	YYFINAL		611
d191 1
a191 1
#define	YYNTBASE	131
d193 1
a193 2
/* YYTRANSLATE(YYLEX) -- Bison token number corresponding to YYLEX. */
#define YYTRANSLATE(x) ((unsigned)(x) <= 361 ? yytranslate[x] : 237)
d195 37
a231 40
/* YYTRANSLATE[YYLEX] -- Bison token number corresponding to YYLEX. */
static const short yytranslate[] =
{
       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   129,     2,     2,     2,    34,    21,     2,
      37,   126,    32,    30,   124,    31,     2,    33,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,    16,   125,
      24,    10,    25,    15,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,   127,     2,   128,    20,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,    51,    19,    52,   130,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     3,     4,     5,
       6,     7,     8,     9,    11,    12,    13,    14,    17,    18,
      22,    23,    26,    27,    28,    29,    35,    36,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    53,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
      72,    73,    74,    75,    76,    77,    78,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    95,    96,    97,    98,    99,   100,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
     122,   123
d234 31
a264 33
#if YYDEBUG
static const short yyprhs[] =
{
       0,     0,     3,     6,     9,    12,    14,    15,    20,    21,
      24,    28,    29,    32,    37,    39,    41,    44,    46,    51,
      56,    60,    63,    68,    72,    77,    82,    87,    92,    97,
     100,   103,   106,   111,   116,   119,   122,   125,   128,   129,
     135,   138,   139,   143,   146,   147,   149,   153,   155,   159,
     160,   162,   166,   168,   171,   175,   176,   179,   182,   183,
     185,   187,   189,   191,   193,   195,   197,   199,   201,   203,
     208,   213,   218,   223,   232,   237,   239,   241,   246,   247,
     253,   258,   259,   265,   270,   275,   277,   281,   284,   286,
     290,   293,   298,   301,   304,   305,   310,   313,   315,   317,
     319,   321,   327,   332,   341,   344,   346,   350,   352,   354,
     358,   363,   365,   366,   372,   375,   377,   379,   381,   386,
     388,   393,   398,   401,   403,   404,   406,   408,   410,   412,
     414,   416,   418,   421,   422,   424,   426,   428,   430,   432,
     434,   436,   438,   440,   442,   446,   450,   457,   459,   460,
     466,   469,   473,   474,   475,   483,   487,   491,   492,   496,
     498,   501,   503,   506,   511,   516,   520,   524,   526,   531,
     535,   536,   538,   540,   541,   544,   548,   549,   552,   555,
     559,   564,   567,   570,   573,   577,   581,   585,   589,   593,
     597,   601,   605,   609,   613,   617,   621,   625,   629,   633,
     637,   643,   647,   651,   656,   658,   660,   665,   670,   675,
     680,   685,   692,   697,   702,   704,   711,   718,   725,   729,
     730,   735,   736,   737,   738,   739,   740,   741,   758,   759,
     760,   761,   762,   763,   781,   782,   783,   791,   793,   795,
     797,   799,   801,   805,   806,   809,   813,   816,   823,   834,
     837,   839,   840,   842,   845,   846,   847,   851,   852,   853,
     854,   855,   867,   872,   873,   876,   877,   878,   885,   887,
     888,   892,   898,   899,   903,   904,   907,   908,   914,   916,
     919,   924,   930,   937,   939,   942,   943,   946,   951,   956,
     965,   967,   971,   972,   982,   983,   991,   992
d266 99
a364 102
static const short yyrhs[] =
{
     110,   145,     0,   111,   135,     0,   121,   225,     0,   112,
     133,     0,     4,     0,     0,   134,     4,    10,   190,     0,
       0,   136,   137,     0,   137,   138,    99,     0,     0,    94,
     190,     0,    94,   190,   124,   190,     0,     4,     0,    95,
       0,   101,   140,     0,   100,     0,   105,     4,    10,   190,
       0,   105,     4,   124,   190,     0,   105,     4,   190,     0,
     104,     4,     0,    96,     4,   124,   190,     0,    96,     4,
     190,     0,    96,     4,    10,   190,     0,    38,     4,    10,
     190,     0,    38,     4,   124,   190,     0,    91,     4,    10,
     190,     0,    91,     4,   124,   190,     0,    97,   142,     0,
      98,   141,     0,   102,     4,     0,   107,     4,   124,     4,
       0,   107,     4,   124,     3,     0,   106,   190,     0,   108,
       3,     0,   113,   143,     0,   114,   144,     0,     0,    58,
     132,   139,   137,    36,     0,   115,     4,     0,     0,   140,
     124,     4,     0,   140,     4,     0,     0,     4,     0,   141,
     124,     4,     0,     4,     0,   142,   124,     4,     0,     0,
       4,     0,   143,   124,     4,     0,     4,     0,   144,     4,
       0,   144,   124,     4,     0,     0,   146,   147,     0,   147,
     148,     0,     0,   172,     0,   152,     0,   217,     0,   181,
       0,   182,     0,   184,     0,   186,     0,   154,     0,   227,
       0,   125,     0,    67,    37,     4,   126,     0,    68,    37,
     132,   126,     0,    89,    37,   132,   126,     0,    54,    37,
       4,   126,     0,    54,    37,     4,   124,     4,   124,     4,
     126,     0,    56,    37,     4,   126,     0,    55,     0,    57,
       0,    87,    37,   151,   126,     0,     0,    88,   149,    37,
     151,   126,     0,    69,    37,   132,   126,     0,     0,    58,
     132,   150,   147,    36,     0,    82,    37,   187,   126,     0,
     114,    37,   144,   126,     0,     4,     0,   151,   124,     4,
       0,   151,     4,     0,     5,     0,   151,   124,     5,     0,
     151,     5,     0,    46,    51,   153,    52,     0,   153,   193,
       0,   153,   154,     0,     0,    70,    37,     4,   126,     0,
     170,   169,     0,     4,     0,    32,     0,    15,     0,   155,
       0,   123,    37,   157,   126,   155,     0,    48,    37,   155,
     126,     0,    48,    37,   123,    37,   157,   126,   155,   126,
       0,   157,   155,     0,   155,     0,   158,   171,   156,     0,
     156,     0,     4,     0,   127,   158,   128,     0,   156,    37,
     158,   126,     0,   159,     0,     0,   122,    37,   161,   159,
     126,     0,   170,   169,     0,    86,     0,   125,     0,    90,
       0,    48,    37,    90,   126,     0,   160,     0,   165,    37,
     188,   126,     0,    84,    37,   166,   126,     0,   163,   162,
       0,   162,     0,     0,   163,     0,    41,     0,    42,     0,
      43,     0,    44,     0,    45,     0,   188,     0,    10,   166,
       0,     0,     6,     0,     7,     0,     8,     0,     9,     0,
      11,     0,    12,     0,    13,     0,    14,     0,   125,     0,
     124,     0,     4,    10,   188,     0,     4,   168,   188,     0,
      93,    37,     4,    10,   188,   126,     0,   124,     0,     0,
      59,    51,   174,   173,    52,     0,   173,   174,     0,   173,
     124,   174,     0,     0,     0,     4,   175,   178,    16,   176,
     171,   177,     0,    83,    10,   188,     0,    85,    10,   188,
       0,     0,    37,   179,   126,     0,   180,     0,   179,   180,
       0,     4,     0,   129,     4,     0,    77,    37,   132,   126,
       0,    78,    37,   183,   126,     0,    78,    37,   126,     0,
     183,   171,   132,     0,   132,     0,    79,    37,   185,   126,
       0,   185,   171,   132,     0,     0,    80,     0,    81,     0,
       0,     4,   187,     0,     4,   124,   187,     0,     0,   189,
     190,     0,    31,   190,     0,    37,   190,   126,     0,    71,
      37,   190,   126,     0,   129,   190,     0,    30,   190,     0,
     130,   190,     0,   190,    32,   190,     0,   190,    33,   190,
       0,   190,    34,   190,     0,   190,    30,   190,     0,   190,
      31,   190,     0,   190,    28,   190,     0,   190,    29,   190,
       0,   190,    22,   190,     0,   190,    23,   190,     0,   190,
      26,   190,     0,   190,    27,   190,     0,   190,    24,   190,
       0,   190,    25,   190,     0,   190,    21,   190,     0,   190,
      20,   190,     0,   190,    19,   190,     0,   190,    15,   190,
      16,   190,     0,   190,    18,   190,     0,   190,    17,   190,
       0,    66,    37,     4,   126,     0,     3,     0,    53,     0,
      72,    37,     4,   126,     0,    73,    37,     4,   126,     0,
      74,    37,     4,   126,     0,    97,    37,   190,   126,     0,
      38,    37,   190,   126,     0,    49,    37,   190,   124,   190,
     126,     0,    50,    37,   190,   126,     0,    39,    37,   190,
     126,     0,     4,     0,    75,    37,   190,   124,   190,   126,
       0,    76,    37,   190,   124,   190,   126,     0,   103,    37,
     190,   124,     4,   126,     0,    92,    25,     4,     0,     0,
      92,    37,   190,   126,     0,     0,     0,     0,     0,     0,
       0,     4,   194,   208,   192,   195,    51,   196,   164,    52,
     197,   211,   191,   212,   167,   198,   171,     0,     0,     0,
       0,     0,     0,    65,   199,   209,   210,   192,   200,    51,
     201,   213,    52,   202,   211,   191,   212,   167,   203,   171,
       0,     0,     0,    88,   204,   208,   205,    51,   153,    52,
       0,    61,     0,    62,     0,    63,     0,    64,     0,    65,
       0,    37,   206,   126,     0,     0,    37,   126,     0,   190,
     207,    16,     0,   207,    16,     0,    40,    37,   190,   126,
     207,    16,     0,    40,    37,   190,   126,    39,    37,   190,
     126,   207,    16,     0,   190,    16,     0,    16,     0,     0,
      82,     0,    25,     4,     0,     0,     0,   212,    16,     4,
       0,     0,     0,     0,     0,   213,     4,   214,    51,   164,
      52,   215,   212,   167,   216,   171,     0,    47,    51,   218,
      52,     0,     0,   218,   219,     0,     0,     0,     4,   220,
     222,   223,   221,   125,     0,   190,     0,     0,     4,   224,
     223,     0,    92,    37,   190,   126,   223,     0,     0,    37,
     190,   126,     0,     0,   226,   229,     0,     0,   228,   120,
      51,   229,    52,     0,   230,     0,   229,   230,     0,    51,
     232,    52,   125,     0,   116,    51,   232,    52,   125,     0,
     116,    51,   232,    52,   231,   125,     0,   116,     0,   231,
     116,     0,     0,   233,   125,     0,   118,    16,   233,   125,
       0,   119,    16,   233,   125,     0,   118,    16,   233,   125,
     119,    16,   233,   125,     0,   117,     0,   233,   125,   117,
       0,     0,   233,   125,   114,     4,    51,   234,   233,   236,
      52,     0,     0,   114,     4,    51,   235,   233,   236,    52,
       0,     0,   125,     0
d369 31
a399 34
#if YYDEBUG
/* YYRLINE[YYN] -- source line where rule number YYN was defined. */
static const short yyrline[] =
{
       0,   161,   163,   164,   165,   169,   172,   172,   182,   182,
     195,   197,   200,   202,   203,   206,   209,   210,   211,   213,
     215,   217,   219,   221,   223,   225,   227,   229,   231,   233,
     234,   235,   237,   239,   241,   243,   245,   246,   247,   247,
     251,   253,   256,   258,   259,   262,   265,   268,   271,   275,
     277,   278,   281,   284,   286,   290,   290,   301,   303,   308,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     321,   323,   325,   328,   330,   332,   334,   336,   337,   337,
     341,   343,   343,   347,   351,   354,   358,   361,   364,   367,
     370,   375,   379,   381,   382,   385,   388,   393,   398,   402,
     408,   415,   421,   427,   435,   444,   455,   464,   475,   484,
     488,   494,   496,   496,   502,   504,   508,   509,   514,   519,
     520,   525,   531,   533,   536,   538,   541,   544,   546,   548,
     550,   554,   564,   567,   570,   573,   575,   577,   579,   581,
     583,   585,   590,   590,   594,   599,   607,   614,   615,   618,
     622,   624,   625,   629,   629,   636,   644,   653,   656,   659,
     661,   664,   667,   671,   676,   678,   682,   685,   690,   692,
     695,   698,   701,   705,   710,   719,   730,   730,   735,   738,
     740,   742,   744,   746,   749,   751,   753,   755,   757,   759,
     761,   763,   765,   767,   769,   771,   773,   775,   777,   779,
     781,   783,   785,   787,   789,   791,   794,   796,   798,   800,
     802,   804,   806,   808,   810,   812,   814,   816,   821,   823,
     826,   828,   831,   831,   831,   831,   831,   831,   849,   849,
     849,   849,   849,   849,   867,   867,   867,   880,   882,   883,
     884,   885,   888,   890,   891,   894,   896,   897,   902,   906,
     908,   911,   914,   918,   921,   924,   929,   942,   944,   944,
     944,   944,   960,   964,   966,   969,   969,   969,   979,  1021,
    1026,  1038,  1045,  1050,  1058,  1058,  1072,  1072,  1082,  1084,
    1087,  1092,  1096,  1102,  1107,  1113,  1118,  1122,  1126,  1130,
    1136,  1141,  1145,  1145,  1155,  1155,  1167,  1169
d404 1
a404 1
#if (YYDEBUG) || defined YYERROR_VERBOSE
d406 30
a435 46
/* YYTNAME[TOKEN_NUM] -- String name of the token TOKEN_NUM. */
static const char *const yytname[] =
{
  "$", "error", "$undefined.", "INT", "NAME", "LNAME", "PLUSEQ", "MINUSEQ", 
  "MULTEQ", "DIVEQ", "'='", "LSHIFTEQ", "RSHIFTEQ", "ANDEQ", "OREQ", 
  "'?'", "':'", "OROR", "ANDAND", "'|'", "'^'", "'&'", "EQ", "NE", "'<'", 
  "'>'", "LE", "GE", "LSHIFT", "RSHIFT", "'+'", "'-'", "'*'", "'/'", 
  "'%'", "UNARY", "END", "'('", "ALIGN_K", "BLOCK", "BIND", "QUAD", 
  "SQUAD", "LONG", "SHORT", "BYTE", "SECTIONS", "PHDRS", "SORT", 
  "DATA_SEGMENT_ALIGN", "DATA_SEGMENT_END", "'{'", "'}'", 
  "SIZEOF_HEADERS", "OUTPUT_FORMAT", "FORCE_COMMON_ALLOCATION", 
  "OUTPUT_ARCH", "INHIBIT_COMMON_ALLOCATION", "INCLUDE", "MEMORY", 
  "DEFSYMEND", "NOLOAD", "DSECT", "COPY", "INFO", "OVERLAY", "DEFINED", 
  "TARGET_K", "SEARCH_DIR", "MAP", "ENTRY", "NEXT", "SIZEOF", "ADDR", 
  "LOADADDR", "MAX_K", "MIN_K", "STARTUP", "HLL", "SYSLIB", "FLOAT", 
  "NOFLOAT", "NOCROSSREFS", "ORIGIN", "FILL", "LENGTH", 
  "CREATE_OBJECT_SYMBOLS", "INPUT", "GROUP", "OUTPUT", "CONSTRUCTORS", 
  "ALIGNMOD", "AT", "PROVIDE", "CHIP", "LIST", "SECT", "ABSOLUTE", "LOAD", 
  "NEWLINE", "ENDWORD", "ORDER", "NAMEWORD", "ASSERT_K", "FORMAT", 
  "PUBLIC", "BASE", "ALIAS", "TRUNCATE", "REL", "INPUT_SCRIPT", 
  "INPUT_MRI_SCRIPT", "INPUT_DEFSYM", "CASE", "EXTERN", "START", 
  "VERS_TAG", "VERS_IDENTIFIER", "GLOBAL", "LOCAL", "VERSIONK", 
  "INPUT_VERSION_SCRIPT", "KEEP", "EXCLUDE_FILE", "','", "';'", "')'", 
  "'['", "']'", "'!'", "'~'", "file", "filename", "defsym_expr", "@@1", 
  "mri_script_file", "@@2", "mri_script_lines", "mri_script_command", "@@3", 
  "ordernamelist", "mri_load_name_list", "mri_abs_name_list", 
  "casesymlist", "extern_name_list", "script_file", "@@4", "ifile_list", 
  "ifile_p1", "@@5", "@@6", "input_list", "sections", "sec_or_group_p1", 
  "statement_anywhere", "wildcard_name", "wildcard_spec", 
  "exclude_name_list", "file_NAME_list", "input_section_spec_no_keep", 
  "input_section_spec", "@@7", "statement", "statement_list", 
  "statement_list_opt", "length", "fill_exp", "fill_opt", "assign_op", 
  "end", "assignment", "opt_comma", "memory", "memory_spec_list", 
  "memory_spec", "@@8", "origin_spec", "length_spec", "attributes_opt", 
  "attributes_list", "attributes_string", "startup", "high_level_library", 
  "high_level_library_NAME_list", "low_level_library", 
  "low_level_library_NAME_list", "floating_point_support", 
  "nocrossref_list", "mustbe_exp", "@@9", "exp", "memspec_at_opt", 
  "opt_at", "section", "@@10", "@@11", "@@12", "@@13", "@@14", "@@15", "@@16", 
  "@@17", "@@18", "@@19", "@@20", "@@21", "type", "atype", "opt_exp_with_type", 
  "opt_exp_without_type", "opt_nocrossrefs", "memspec_opt", "phdr_opt", 
  "overlay_section", "@@22", "@@23", "@@24", "phdrs", "phdr_list", "phdr", 
  "@@25", "@@26", "phdr_type", "phdr_qualifiers", "phdr_val", 
  "version_script_file", "@@27", "version", "@@28", "vers_nodes", 
  "vers_node", "verdep", "vers_tag", "vers_defns", "@@29", "@@30", 
  "opt_semicolon", 0
d439 30
a468 33
/* YYR1[YYN] -- Symbol number of symbol that rule YYN derives. */
static const short yyr1[] =
{
       0,   131,   131,   131,   131,   132,   134,   133,   136,   135,
     137,   137,   138,   138,   138,   138,   138,   138,   138,   138,
     138,   138,   138,   138,   138,   138,   138,   138,   138,   138,
     138,   138,   138,   138,   138,   138,   138,   138,   139,   138,
     138,   138,   140,   140,   140,   141,   141,   142,   142,   143,
     143,   143,   144,   144,   144,   146,   145,   147,   147,   148,
     148,   148,   148,   148,   148,   148,   148,   148,   148,   148,
     148,   148,   148,   148,   148,   148,   148,   148,   149,   148,
     148,   150,   148,   148,   148,   151,   151,   151,   151,   151,
     151,   152,   153,   153,   153,   154,   154,   155,   155,   155,
     156,   156,   156,   156,   157,   157,   158,   158,   159,   159,
     159,   160,   161,   160,   162,   162,   162,   162,   162,   162,
     162,   162,   163,   163,   164,   164,   165,   165,   165,   165,
     165,   166,   167,   167,   168,   168,   168,   168,   168,   168,
     168,   168,   169,   169,   170,   170,   170,   171,   171,   172,
     173,   173,   173,   175,   174,   176,   177,   178,   178,   179,
     179,   180,   180,   181,   182,   182,   183,   183,   184,   185,
     185,   186,   186,   187,   187,   187,   189,   188,   190,   190,
     190,   190,   190,   190,   190,   190,   190,   190,   190,   190,
     190,   190,   190,   190,   190,   190,   190,   190,   190,   190,
     190,   190,   190,   190,   190,   190,   190,   190,   190,   190,
     190,   190,   190,   190,   190,   190,   190,   190,   191,   191,
     192,   192,   194,   195,   196,   197,   198,   193,   199,   200,
     201,   202,   203,   193,   204,   205,   193,   206,   206,   206,
     206,   206,   207,   207,   207,   208,   208,   208,   208,   209,
     209,   210,   210,   211,   211,   212,   212,   213,   214,   215,
     216,   213,   217,   218,   218,   220,   221,   219,   222,   223,
     223,   223,   224,   224,   226,   225,   228,   227,   229,   229,
     230,   230,   230,   231,   231,   232,   232,   232,   232,   232,
     233,   233,   234,   233,   235,   233,   236,   236
d471 30
a500 33
/* YYR2[YYN] -- Number of symbols composing right hand side of rule YYN. */
static const short yyr2[] =
{
       0,     2,     2,     2,     2,     1,     0,     4,     0,     2,
       3,     0,     2,     4,     1,     1,     2,     1,     4,     4,
       3,     2,     4,     3,     4,     4,     4,     4,     4,     2,
       2,     2,     4,     4,     2,     2,     2,     2,     0,     5,
       2,     0,     3,     2,     0,     1,     3,     1,     3,     0,
       1,     3,     1,     2,     3,     0,     2,     2,     0,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     4,
       4,     4,     4,     8,     4,     1,     1,     4,     0,     5,
       4,     0,     5,     4,     4,     1,     3,     2,     1,     3,
       2,     4,     2,     2,     0,     4,     2,     1,     1,     1,
       1,     5,     4,     8,     2,     1,     3,     1,     1,     3,
       4,     1,     0,     5,     2,     1,     1,     1,     4,     1,
       4,     4,     2,     1,     0,     1,     1,     1,     1,     1,
       1,     1,     2,     0,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     3,     3,     6,     1,     0,     5,
       2,     3,     0,     0,     7,     3,     3,     0,     3,     1,
       2,     1,     2,     4,     4,     3,     3,     1,     4,     3,
       0,     1,     1,     0,     2,     3,     0,     2,     2,     3,
       4,     2,     2,     2,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       5,     3,     3,     4,     1,     1,     4,     4,     4,     4,
       4,     6,     4,     4,     1,     6,     6,     6,     3,     0,
       4,     0,     0,     0,     0,     0,     0,    16,     0,     0,
       0,     0,     0,    17,     0,     0,     7,     1,     1,     1,
       1,     1,     3,     0,     2,     3,     2,     6,    10,     2,
       1,     0,     1,     2,     0,     0,     3,     0,     0,     0,
       0,    11,     4,     0,     2,     0,     0,     6,     1,     0,
       3,     5,     0,     3,     0,     2,     0,     5,     1,     2,
       4,     5,     6,     1,     2,     0,     2,     4,     4,     8,
       1,     3,     0,     9,     0,     7,     0,     1
d503 60
a562 67
/* YYDEFACT[S] -- default rule to reduce with in state S when YYTABLE
   doesn't specify something else to do.  Zero means the default is an
   error. */
static const short yydefact[] =
{
       0,    55,     8,     6,   274,     1,    58,     2,    11,     4,
       0,     3,     0,    56,     9,     0,   285,     0,   275,   278,
       0,     0,     0,     0,    75,     0,    76,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   171,   172,     0,     0,
      78,     0,     0,     0,    68,    57,    60,    66,     0,    59,
      62,    63,    64,    65,    61,    67,     0,    14,     0,     0,
       0,     0,    15,     0,     0,     0,    17,    44,     0,     0,
       0,     0,     0,     0,    49,     0,     0,     0,     0,     0,
     290,     0,     0,     0,     0,   285,   279,   134,   135,   136,
     137,   176,   138,   139,   140,   141,   176,    94,   263,     0,
       0,     5,    81,     0,     0,     0,     0,     0,     0,     0,
     170,   173,     0,     0,     0,     0,     0,   143,   142,    96,
       0,     0,    38,     0,   204,   214,     0,     0,     0,     0,
       0,     0,     0,   205,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    12,     0,    47,    29,    45,
      30,    16,    31,    21,     0,    34,     0,    35,    50,    36,
      52,    37,    40,    10,     7,     0,     0,     0,     0,   286,
       0,   144,     0,   145,     0,     0,     0,     0,    58,   153,
     152,     0,     0,     0,     0,     0,   165,   167,   148,   148,
     173,     0,    85,    88,     0,     0,     0,     0,     0,     0,
       0,     0,    11,     0,     0,   182,   178,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   181,   183,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    23,     0,     0,    43,     0,
       0,     0,    20,     0,     0,    53,     0,   294,     0,     0,
     280,     0,   291,     0,   177,   222,    91,   228,   234,    93,
      92,   265,   262,   264,     0,    72,    74,   276,   157,     0,
      69,    70,    80,    95,   163,   147,   164,     0,   168,     0,
     173,   174,    83,    87,    90,     0,    77,     0,    71,   176,
      84,     0,    25,    26,    41,    27,    28,   179,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   202,   201,   199,   198,   197,   191,   192,   195,
     196,   193,   194,   189,   190,   187,   188,   184,   185,   186,
      13,    24,    22,    48,    46,    42,    18,    19,    33,    32,
      51,    54,     0,   287,   288,     0,   283,   281,     0,   243,
       0,   243,     0,     0,    82,     0,     0,   149,     0,   150,
     166,   169,   175,    86,    89,    79,     0,   277,    39,   210,
     213,     0,   212,   203,   180,   206,   207,   208,     0,     0,
     209,     0,     0,   296,     0,   292,   284,   282,     0,     0,
     243,     0,   221,   250,     0,   251,   235,   268,   269,     0,
     161,     0,     0,   159,     0,   151,   146,     0,     0,     0,
       0,   200,   297,     0,     0,     0,   237,   238,   239,   240,
     241,   244,     0,     0,     0,     0,   246,     0,   223,   249,
     252,   221,     0,   272,     0,   266,     0,   162,   158,   160,
       0,   148,   211,   215,   216,   217,   295,     0,   296,   242,
       0,   245,     0,     0,   229,    94,     0,   269,     0,     0,
      73,   176,     0,   289,     0,   243,     0,   224,     0,     0,
       0,   270,     0,   267,   155,     0,   154,   293,     0,     0,
     220,   124,   230,   236,   273,   269,   176,     0,   247,   108,
      99,    98,   126,   127,   128,   129,   130,     0,     0,   115,
     117,     0,     0,   116,     0,   100,     0,   111,   119,   123,
     125,     0,     0,     0,   257,   271,   156,     0,     0,   176,
     112,     0,    97,     0,   107,   148,     0,   122,   225,   176,
     114,     0,   243,     0,     0,     0,     0,   131,     0,   105,
       0,     0,   109,     0,   148,   254,     0,   258,   231,     0,
     118,     0,   102,   121,    97,     0,     0,   104,   106,   110,
       0,   219,   120,     0,   254,   248,     0,   113,   101,   253,
       0,   255,   124,   219,     0,     0,   133,     0,   255,     0,
     218,   176,     0,   226,   259,   133,   103,   132,   256,   148,
     255,   232,   227,   133,   148,   260,   233,   148,   261,     0,
       0,     0
d565 12
a576 13
static const short yydefgoto[] =
{
     609,   102,     9,    10,     7,     8,    14,    77,   202,   151,
     150,   148,   159,   161,     5,     6,    13,    45,   113,   178,
     194,    46,   174,    47,   515,   516,   550,   535,   517,   518,
     548,   519,   520,   521,   522,   546,   593,    96,   119,    48,
     553,    49,   279,   180,   278,   451,   486,   366,   412,   413,
      50,    51,   188,    52,   189,    53,   191,   547,   172,   207,
     581,   438,   270,   359,   463,   491,   555,   599,   360,   478,
     524,   574,   604,   361,   442,   432,   401,   402,   405,   441,
     571,   586,   541,   573,   600,   607,    54,   175,   273,   362,
     469,   408,   445,   467,    11,    12,    55,    56,    18,    19,
     358,    83,    84,   425,   352,   423
d579 60
a638 64
static const short yypact[] =
{
      -4,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
      57,-32768,   -14,   658,   744,    64,    82,    54,   -14,-32768,
     346,    58,    95,    44,-32768,    78,-32768,   129,   154,   173,
     197,   211,   212,   216,   218,   219,-32768,-32768,   223,   225,
  -32768,   227,   238,   240,-32768,-32768,-32768,-32768,   -82,-32768,
  -32768,-32768,-32768,-32768,-32768,-32768,   156,-32768,   274,   129,
     281,   557,-32768,   283,   284,   286,-32768,-32768,   288,   289,
     290,   557,   291,   293,   294,   299,   300,   207,   557,   303,
  -32768,   292,   296,   245,   185,    82,-32768,-32768,-32768,-32768,
  -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   309,
     310,-32768,-32768,   313,   314,   129,   129,   315,   129,    10,
  -32768,   316,    87,   287,   129,   319,   299,-32768,-32768,-32768,
     275,     5,-32768,     7,-32768,-32768,   557,   557,   557,   298,
     302,   304,   307,-32768,   308,   311,   326,   327,   329,   330,
     331,   332,   333,   557,   557,   646,   312,-32768,   201,-32768,
     206,    65,-32768,-32768,   394,  1308,   209,-32768,-32768,   222,
  -32768,    68,-32768,-32768,  1308,   276,   104,   104,   215,   106,
     279,-32768,   557,-32768,    25,    18,   -28,   210,-32768,-32768,
  -32768,   221,   246,   248,   249,   250,-32768,-32768,     6,    98,
      69,   251,-32768,-32768,    21,    87,   253,   361,    61,   -14,
     557,   557,-32768,   557,   557,-32768,-32768,   870,   557,   557,
     557,   557,   377,   557,   378,   385,   386,   557,   557,   557,
     557,-32768,-32768,   557,   557,   557,   557,   557,   557,   557,
     557,   557,   557,   557,   557,   557,   557,   557,   557,   557,
     557,   557,   557,   557,   557,  1308,   387,   388,-32768,   389,
     557,   557,  1308,   194,   390,-32768,   391,-32768,   271,   278,
  -32768,   395,-32768,   -67,  1308,   346,-32768,-32768,-32768,-32768,
  -32768,-32768,-32768,-32768,   396,-32768,-32768,   707,   364,    37,
  -32768,-32768,-32768,-32768,-32768,-32768,-32768,   129,-32768,   129,
     316,-32768,-32768,-32768,-32768,   239,-32768,    30,-32768,-32768,
  -32768,   -19,  1308,  1308,   769,  1308,  1308,-32768,   890,   910,
    1170,   930,   285,   950,   297,   301,   320,  1200,  1220,   980,
    1240,  1350,  1327,  1258,  1385,  1399,   786,  1410,  1410,   199,
     199,   199,   199,   183,   183,    88,    88,-32768,-32768,-32768,
    1308,  1308,  1308,-32768,-32768,-32768,  1308,  1308,-32768,-32768,
  -32768,-32768,   104,    90,   106,   356,-32768,-32768,   -37,   455,
     506,   455,   557,   295,-32768,     9,   398,-32768,   313,-32768,
  -32768,-32768,-32768,-32768,-32768,-32768,   335,-32768,-32768,-32768,
  -32768,   557,-32768,-32768,-32768,-32768,-32768,-32768,   557,   557,
  -32768,   406,   557,   305,   400,-32768,-32768,-32768,   208,   375,
    1278,   401,   328,-32768,  1370,   340,-32768,  1308,    24,   422,
  -32768,   424,     8,-32768,   351,-32768,-32768,  1000,  1020,  1040,
     336,  1308,   106,   383,   104,   104,-32768,-32768,-32768,-32768,
  -32768,-32768,   337,   557,    62,   413,-32768,   402,-32768,-32768,
  -32768,   328,   420,   403,   408,-32768,   338,-32768,-32768,-32768,
     428,   348,-32768,-32768,-32768,-32768,-32768,   349,   305,-32768,
    1060,-32768,   557,   425,-32768,-32768,   557,    24,   557,   350,
  -32768,-32768,   392,   106,   421,   203,  1090,-32768,   427,   198,
    1110,-32768,  1130,-32768,-32768,   469,-32768,-32768,   444,   466,
  -32768,   607,-32768,-32768,-32768,    24,-32768,   557,-32768,   443,
  -32768,-32768,-32768,-32768,-32768,-32768,-32768,   446,   447,-32768,
  -32768,   450,   451,-32768,    32,-32768,   452,-32768,-32768,-32768,
     607,   438,   459,   -82,-32768,-32768,-32768,  1150,    96,-32768,
  -32768,    67,-32768,   461,-32768,   -69,    32,-32768,-32768,-32768,
  -32768,    26,   462,   374,   464,   376,   380,-32768,    12,-32768,
      16,    72,-32768,    32,   128,   478,   381,-32768,-32768,   495,
  -32768,    67,-32768,-32768,   393,   399,    67,-32768,-32768,-32768,
     508,   423,-32768,   463,   478,-32768,    36,-32768,-32768,-32768,
     488,-32768,   607,   423,    67,   512,    29,   465,-32768,   407,
  -32768,-32768,   516,-32768,-32768,    29,-32768,-32768,-32768,   348,
  -32768,-32768,-32768,    29,   348,-32768,-32768,   348,-32768,   532,
     534,-32768
d641 12
a652 13
static const short yypgoto[] =
{
  -32768,   -52,-32768,-32768,-32768,-32768,   339,-32768,-32768,-32768,
  -32768,-32768,-32768,   419,-32768,-32768,   360,-32768,-32768,-32768,
     344,-32768,    75,  -170,  -325,  -490,   -15,    11,    -6,-32768,
  -32768,    28,-32768,   -33,-32768,   -41,  -502,-32768,    31,  -468,
    -186,-32768,-32768,  -258,-32768,-32768,-32768,-32768,-32768,   139,
  -32768,-32768,-32768,-32768,-32768,-32768,  -171,   -91,-32768,   -60,
     -30,   116,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  -32768,-32768,-32768,-32768,-32768,-32768,  -390,   202,-32768,-32768,
     -10,  -550,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  -32768,-32768,  -392,-32768,-32768,-32768,-32768,-32768,   363,   -12,
  -32768,   480,  -158,-32768,-32768,   108
d656 1
a656 1
#define	YYLAST		1444
d659 130
a788 147
static const short yytable[] =
{
     171,   145,   287,   289,   269,   173,    86,   122,   258,   259,
     435,   155,   410,   410,   101,   200,   564,   203,   164,   291,
     532,   369,   271,   523,   534,   293,   294,   500,   443,   265,
     557,   500,    16,   377,   293,   294,   532,    16,   595,   591,
     532,   179,   117,   118,   501,   592,   534,   500,   501,   356,
     603,   500,   523,   182,   183,   285,   185,   187,   357,   552,
     533,    15,   196,   568,   501,   255,   205,   206,   501,   248,
     272,   532,   255,   190,    78,   481,   532,   266,   558,   396,
     533,    99,   500,   221,   222,   489,   245,   500,   397,   367,
     267,   192,   193,   601,   252,    32,   274,    17,   275,   501,
     532,   605,    17,   525,   501,    85,     1,     2,     3,    97,
     415,   500,   264,   268,   523,   100,   444,     4,    42,   372,
     239,   240,   241,   426,   427,   428,   429,   430,   501,   201,
     285,   204,   286,   101,   448,   512,   186,   411,   411,   514,
     302,   303,   566,   305,   306,   295,    98,   296,   308,   309,
     310,   311,   559,   313,   295,   512,   375,   317,   318,   319,
     320,   368,   584,   321,   322,   323,   324,   325,   326,   327,
     328,   329,   330,   331,   332,   333,   334,   335,   336,   337,
     338,   339,   340,   341,   342,   256,   543,   300,   431,   249,
     346,   347,   256,   290,   393,   544,    79,   348,   349,    80,
      81,    82,   265,   545,   261,   103,   549,   262,   376,   394,
     104,   124,   125,   237,   238,   239,   240,   241,    79,   544,
     261,    80,   285,   262,   288,   567,   545,   235,   236,   237,
     238,   239,   240,   241,   105,   370,   549,   371,   126,   127,
     434,   578,   488,   373,   374,   128,   129,   130,   106,   107,
     493,   567,   285,   108,   569,   109,   110,   131,   132,   589,
     111,   133,   112,   267,   114,   472,   457,   458,    32,   426,
     427,   428,   429,   430,   134,   115,   120,   116,   121,   135,
     136,   137,   138,   139,   140,   123,   268,   146,   147,    86,
     149,    42,   152,   153,   154,   156,   157,   168,   158,   400,
     404,   400,   407,   160,   162,   141,   163,   165,   166,   269,
     169,   142,   167,   176,   177,   124,   125,   179,   181,   184,
     190,   417,   243,   197,   195,   246,   199,   257,   418,   419,
     247,   263,   421,   253,   431,   208,   276,   143,   144,   209,
     260,   210,   126,   127,   211,   212,   254,   280,   213,   128,
     129,   130,    87,    88,    89,    90,    91,    92,    93,    94,
      95,   131,   132,   214,   215,   133,   216,   217,   218,   219,
     220,   299,   281,   460,   282,   283,   284,   292,   134,   298,
     484,   312,   314,   135,   136,   137,   138,   139,   140,   315,
     316,   343,   344,   345,   350,   351,   353,   124,   125,   355,
     363,   365,   476,   354,   250,   526,   480,   395,   482,   141,
     420,   383,   433,   602,   414,   142,   424,   436,   606,   409,
     437,   608,   440,   385,   126,   127,   446,   386,   447,   461,
     422,   128,   129,   130,   450,   456,   244,   527,   471,   462,
     466,   143,   144,   131,   132,   468,   387,   133,   556,    87,
      88,    89,    90,    91,    92,    93,    94,    95,   124,   125,
     134,   416,   455,   459,   470,   135,   136,   137,   138,   139,
     140,   465,   285,   487,   473,   483,   477,   485,   492,   496,
     -97,   497,   498,   528,   529,   126,   127,   530,   531,   536,
     538,   141,   398,   129,   130,   399,   539,   142,   551,   434,
     560,   561,   562,   570,   131,   132,   563,   572,   133,   124,
     125,   575,   579,   585,   582,   580,   590,   594,   251,  -108,
     598,   134,   403,   143,   144,   577,   135,   136,   137,   138,
     139,   140,   610,   596,   611,   198,   126,   127,   277,   297,
     479,   304,   565,   128,   129,   130,   576,   554,   537,   587,
     597,   449,   141,   588,   540,   131,   132,   464,   142,   133,
     124,   125,   301,   406,   583,   170,   474,     0,     0,     0,
       0,     0,   134,     0,     0,     0,     0,   135,   136,   137,
     138,   139,   140,     0,   143,   144,     0,   126,   127,     0,
       0,     0,     0,     0,   128,   129,   130,     0,     0,     0,
       0,     0,     0,   141,     0,     0,   131,   132,     0,   142,
     133,   499,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   500,   134,     0,     0,     0,     0,   135,   136,
     137,   138,   139,   140,     0,   143,   144,     0,     0,   501,
       0,     0,     0,     0,     0,     0,     0,     0,   502,   503,
     504,   505,   506,     0,   141,   507,     0,     0,     0,     0,
     142,   223,    20,   224,   225,   226,   227,   228,   229,   230,
     231,   232,   233,   234,   235,   236,   237,   238,   239,   240,
     241,     0,     0,     0,     0,     0,   143,   144,     0,     0,
       0,   508,     0,   509,     0,     0,     0,   510,     0,     0,
      42,     0,     0,     0,    21,    22,     0,     0,     0,     0,
       0,    20,    23,    24,    25,    26,    27,    28,     0,     0,
       0,     0,     0,     0,     0,    29,    30,    31,    32,   511,
     512,     0,   513,     0,   514,    33,    34,    35,    36,    37,
      38,     0,     0,   364,     0,    39,    40,    41,    57,     0,
       0,    42,     0,    21,    22,     0,     0,     0,     0,     0,
       0,    23,    24,    25,    26,    27,    28,     0,     0,     0,
     242,     0,    43,    57,    29,    30,    31,    32,  -276,     0,
       0,     0,    58,    44,    33,    34,    35,    36,    37,    38,
       0,     0,     0,     0,    39,    40,    41,     0,     0,     0,
      42,     0,    59,     0,     0,   378,     0,    58,   229,   230,
     231,   232,   233,   234,   235,   236,   237,   238,   239,   240,
     241,    43,     0,     0,     0,     0,     0,    59,     0,     0,
       0,     0,    44,     0,     0,    60,     0,     0,    61,    62,
      63,    64,    65,   -41,    66,    67,    68,     0,    69,    70,
      71,    72,    73,     0,     0,     0,     0,    74,    75,    76,
      60,     0,     0,    61,    62,    63,    64,    65,     0,    66,
      67,    68,     0,    69,    70,    71,    72,    73,     0,     0,
       0,     0,    74,    75,    76,   223,     0,   224,   225,   226,
     227,   228,   229,   230,   231,   232,   233,   234,   235,   236,
     237,   238,   239,   240,   241,   223,     0,   224,   225,   226,
     227,   228,   229,   230,   231,   232,   233,   234,   235,   236,
     237,   238,   239,   240,   241,   223,     0,   224,   225,   226,
     227,   228,   229,   230,   231,   232,   233,   234,   235,   236,
     237,   238,   239,   240,   241,   223,     0,   224,   225,   226,
     227,   228,   229,   230,   231,   232,   233,   234,   235,   236,
     237,   238,   239,   240,   241,   223,     0,   224,   225,   226,
     227,   228,   229,   230,   231,   232,   233,   234,   235,   236,
     237,   238,   239,   240,   241,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   223,   307,   224,   225,   226,
     227,   228,   229,   230,   231,   232,   233,   234,   235,   236,
     237,   238,   239,   240,   241,   223,   379,   224,   225,   226,
     227,   228,   229,   230,   231,   232,   233,   234,   235,   236,
     237,   238,   239,   240,   241,   223,   380,   224,   225,   226,
     227,   228,   229,   230,   231,   232,   233,   234,   235,   236,
     237,   238,   239,   240,   241,   223,   382,   224,   225,   226,
     227,   228,   229,   230,   231,   232,   233,   234,   235,   236,
     237,   238,   239,   240,   241,   223,   384,   224,   225,   226,
     227,   228,   229,   230,   231,   232,   233,   234,   235,   236,
     237,   238,   239,   240,   241,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   223,   390,   224,   225,   226,
     227,   228,   229,   230,   231,   232,   233,   234,   235,   236,
     237,   238,   239,   240,   241,   223,   452,   224,   225,   226,
     227,   228,   229,   230,   231,   232,   233,   234,   235,   236,
     237,   238,   239,   240,   241,   223,   453,   224,   225,   226,
     227,   228,   229,   230,   231,   232,   233,   234,   235,   236,
     237,   238,   239,   240,   241,   223,   454,   224,   225,   226,
     227,   228,   229,   230,   231,   232,   233,   234,   235,   236,
     237,   238,   239,   240,   241,   223,   475,   224,   225,   226,
     227,   228,   229,   230,   231,   232,   233,   234,   235,   236,
     237,   238,   239,   240,   241,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   223,   490,   224,   225,   226,
     227,   228,   229,   230,   231,   232,   233,   234,   235,   236,
     237,   238,   239,   240,   241,   223,   494,   224,   225,   226,
     227,   228,   229,   230,   231,   232,   233,   234,   235,   236,
     237,   238,   239,   240,   241,   223,   495,   224,   225,   226,
     227,   228,   229,   230,   231,   232,   233,   234,   235,   236,
     237,   238,   239,   240,   241,     0,   542,   226,   227,   228,
     229,   230,   231,   232,   233,   234,   235,   236,   237,   238,
     239,   240,   241,   223,   381,   224,   225,   226,   227,   228,
     229,   230,   231,   232,   233,   234,   235,   236,   237,   238,
     239,   240,   241,     0,     0,   434,     0,     0,     0,     0,
       0,     0,     0,   223,   388,   224,   225,   226,   227,   228,
     229,   230,   231,   232,   233,   234,   235,   236,   237,   238,
     239,   240,   241,     0,   389,   225,   226,   227,   228,   229,
     230,   231,   232,   233,   234,   235,   236,   237,   238,   239,
     240,   241,     0,     0,   391,   223,   392,   224,   225,   226,
     227,   228,   229,   230,   231,   232,   233,   234,   235,   236,
     237,   238,   239,   240,   241,   223,   439,   224,   225,   226,
     227,   228,   229,   230,   231,   232,   233,   234,   235,   236,
     237,   238,   239,   240,   241,   227,   228,   229,   230,   231,
     232,   233,   234,   235,   236,   237,   238,   239,   240,   241,
     228,   229,   230,   231,   232,   233,   234,   235,   236,   237,
     238,   239,   240,   241,   231,   232,   233,   234,   235,   236,
     237,   238,   239,   240,   241
d791 130
a920 147
static const short yycheck[] =
{
      91,    61,   188,   189,   174,    96,    18,    59,   166,   167,
     400,    71,     4,     4,     4,    10,     4,    10,    78,   190,
       4,   279,     4,   491,   514,     4,     5,    15,     4,     4,
       4,    15,    51,    52,     4,     5,     4,    51,   588,    10,
       4,     4,   124,   125,    32,    16,   536,    15,    32,   116,
     600,    15,   520,   105,   106,   124,   108,   109,   125,   128,
      48,     4,   114,   553,    32,     4,   126,   127,    32,     4,
      52,     4,     4,     4,    10,   467,     4,    52,    52,   116,
      48,    37,    15,   143,   144,   475,   146,    15,   125,    52,
      65,     4,     5,   595,   154,    70,   124,   116,   126,    32,
       4,   603,   116,   495,    32,    51,   110,   111,   112,    51,
     368,    15,   172,    88,   582,    37,    92,   121,    93,   290,
      32,    33,    34,    61,    62,    63,    64,    65,    32,   124,
     124,   124,   126,     4,   126,   123,   126,   129,   129,   127,
     200,   201,   126,   203,   204,   124,    51,   126,   208,   209,
     210,   211,   542,   213,   124,   123,   126,   217,   218,   219,
     220,   124,   126,   223,   224,   225,   226,   227,   228,   229,
     230,   231,   232,   233,   234,   235,   236,   237,   238,   239,
     240,   241,   242,   243,   244,   124,    90,   126,   126,   124,
     250,   251,   124,   124,   352,   123,   114,     3,     4,   117,
     118,   119,     4,   528,   114,    51,   531,   117,   299,   119,
      37,     3,     4,    30,    31,    32,    33,    34,   114,   123,
     114,   117,   124,   117,   126,   550,   551,    28,    29,    30,
      31,    32,    33,    34,    37,   287,   561,   289,    30,    31,
      37,   566,    39,     4,     5,    37,    38,    39,    37,    37,
      52,   576,   124,    37,   126,    37,    37,    49,    50,   584,
      37,    53,    37,    65,    37,   451,   424,   425,    70,    61,
      62,    63,    64,    65,    66,    37,   120,    37,     4,    71,
      72,    73,    74,    75,    76,     4,    88,     4,     4,   301,
       4,    93,     4,     4,     4,     4,     3,    52,     4,   359,
     360,   361,   362,     4,     4,    97,    99,     4,    16,   479,
     125,   103,    16,     4,     4,     3,     4,     4,     4,     4,
       4,   381,    10,     4,    37,   124,    51,    51,   388,   389,
     124,    52,   392,   124,   126,    37,   126,   129,   130,    37,
     125,    37,    30,    31,    37,    37,   124,   126,    37,    37,
      38,    39,     6,     7,     8,     9,    10,    11,    12,    13,
      14,    49,    50,    37,    37,    53,    37,    37,    37,    37,
      37,    10,   126,   433,   126,   126,   126,   126,    66,   126,
     471,     4,     4,    71,    72,    73,    74,    75,    76,     4,
       4,     4,     4,     4,     4,     4,   125,     3,     4,     4,
       4,    37,   462,   125,    10,   496,   466,    51,   468,    97,
       4,   126,    37,   599,    16,   103,    16,    16,   604,   124,
      92,   607,    82,   126,    30,    31,     4,   126,     4,    16,
     125,    37,    38,    39,    83,    52,   124,   497,    10,    37,
      37,   129,   130,    49,    50,    37,   126,    53,   539,     6,
       7,     8,     9,    10,    11,    12,    13,    14,     3,     4,
      66,   126,   126,   126,   126,    71,    72,    73,    74,    75,
      76,    51,   124,    52,   125,   125,    51,    85,    51,    10,
      37,    37,    16,    37,    37,    30,    31,    37,    37,    37,
      52,    97,    37,    38,    39,    40,    37,   103,    37,    37,
     126,    37,   126,    25,    49,    50,   126,   126,    53,     3,
       4,    16,     4,    25,    51,    92,     4,    52,   124,   126,
       4,    66,    16,   129,   130,   126,    71,    72,    73,    74,
      75,    76,     0,   126,     0,   116,    30,    31,   178,   195,
     465,   202,   548,    37,    38,    39,   561,   536,   520,   582,
     591,   412,    97,   583,   523,    49,    50,   441,   103,    53,
       3,     4,   199,   361,   574,    85,   458,    -1,    -1,    -1,
      -1,    -1,    66,    -1,    -1,    -1,    -1,    71,    72,    73,
      74,    75,    76,    -1,   129,   130,    -1,    30,    31,    -1,
      -1,    -1,    -1,    -1,    37,    38,    39,    -1,    -1,    -1,
      -1,    -1,    -1,    97,    -1,    -1,    49,    50,    -1,   103,
      53,     4,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    15,    66,    -1,    -1,    -1,    -1,    71,    72,
      73,    74,    75,    76,    -1,   129,   130,    -1,    -1,    32,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    41,    42,
      43,    44,    45,    -1,    97,    48,    -1,    -1,    -1,    -1,
     103,    15,     4,    17,    18,    19,    20,    21,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
      34,    -1,    -1,    -1,    -1,    -1,   129,   130,    -1,    -1,
      -1,    84,    -1,    86,    -1,    -1,    -1,    90,    -1,    -1,
      93,    -1,    -1,    -1,    46,    47,    -1,    -1,    -1,    -1,
      -1,     4,    54,    55,    56,    57,    58,    59,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    67,    68,    69,    70,   122,
     123,    -1,   125,    -1,   127,    77,    78,    79,    80,    81,
      82,    -1,    -1,    36,    -1,    87,    88,    89,     4,    -1,
      -1,    93,    -1,    46,    47,    -1,    -1,    -1,    -1,    -1,
      -1,    54,    55,    56,    57,    58,    59,    -1,    -1,    -1,
     124,    -1,   114,     4,    67,    68,    69,    70,   120,    -1,
      -1,    -1,    38,   125,    77,    78,    79,    80,    81,    82,
      -1,    -1,    -1,    -1,    87,    88,    89,    -1,    -1,    -1,
      93,    -1,    58,    -1,    -1,    36,    -1,    38,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
      34,   114,    -1,    -1,    -1,    -1,    -1,    58,    -1,    -1,
      -1,    -1,   125,    -1,    -1,    91,    -1,    -1,    94,    95,
      96,    97,    98,    99,   100,   101,   102,    -1,   104,   105,
     106,   107,   108,    -1,    -1,    -1,    -1,   113,   114,   115,
      91,    -1,    -1,    94,    95,    96,    97,    98,    -1,   100,
     101,   102,    -1,   104,   105,   106,   107,   108,    -1,    -1,
      -1,    -1,   113,   114,   115,    15,    -1,    17,    18,    19,
      20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    33,    34,    15,    -1,    17,    18,    19,
      20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    33,    34,    15,    -1,    17,    18,    19,
      20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    33,    34,    15,    -1,    17,    18,    19,
      20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    33,    34,    15,    -1,    17,    18,    19,
      20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    15,   126,    17,    18,    19,
      20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    33,    34,    15,   126,    17,    18,    19,
      20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    33,    34,    15,   126,    17,    18,    19,
      20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    33,    34,    15,   126,    17,    18,    19,
      20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    33,    34,    15,   126,    17,    18,    19,
      20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    15,   126,    17,    18,    19,
      20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    33,    34,    15,   126,    17,    18,    19,
      20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    33,    34,    15,   126,    17,    18,    19,
      20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    33,    34,    15,   126,    17,    18,    19,
      20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    33,    34,    15,   126,    17,    18,    19,
      20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    15,   126,    17,    18,    19,
      20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    33,    34,    15,   126,    17,    18,    19,
      20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    33,    34,    15,   126,    17,    18,    19,
      20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    33,    34,    -1,   126,    19,    20,    21,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
      32,    33,    34,    15,   124,    17,    18,    19,    20,    21,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
      32,    33,    34,    -1,    -1,    37,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    15,   124,    17,    18,    19,    20,    21,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
      32,    33,    34,    -1,   124,    18,    19,    20,    21,    22,
      23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
      33,    34,    -1,    -1,   124,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    33,    34,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    33,    34,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    33,    34,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    33,    34
d923 2
a924 1
#line 3 "/usr/share/bison-1.35/bison.simple"
d927 1
a927 3

   Copyright (C) 1984, 1989, 1990, 2000, 2001, 2002 Free Software
   Foundation, Inc.
d949 46
a994 57
/* This is the parser code that is written into each bison parser when
   the %semantic_parser declaration is not specified in the grammar.
   It was written by Richard Stallman by simplifying the hairy parser
   used when %semantic_parser is specified.  */

/* All symbols defined below should begin with yy or YY, to avoid
   infringing on user name space.  This should be done even for local
   variables, as they might otherwise be expanded by user macros.
   There are some unavoidable exceptions within include files to
   define necessary library symbols; they are noted "INFRINGES ON
   USER NAME SPACE" below.  */

#if ! defined (yyoverflow) || defined (YYERROR_VERBOSE)

/* The parser invokes alloca or malloc; define the necessary symbols.  */

# if YYSTACK_USE_ALLOCA
#  define YYSTACK_ALLOC alloca
# else
#  ifndef YYSTACK_USE_ALLOCA
#   if defined (alloca) || defined (_ALLOCA_H)
#    define YYSTACK_ALLOC alloca
#   else
#    ifdef __GNUC__
#     define YYSTACK_ALLOC __builtin_alloca
#    endif
#   endif
#  endif
# endif

# ifdef YYSTACK_ALLOC
   /* Pacify GCC's `empty if-body' warning. */
#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (0)
# else
#  if defined (__STDC__) || defined (__cplusplus)
#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#   define YYSIZE_T size_t
#  endif
#  define YYSTACK_ALLOC malloc
#  define YYSTACK_FREE free
# endif
#endif /* ! defined (yyoverflow) || defined (YYERROR_VERBOSE) */


#if (! defined (yyoverflow) \
     && (! defined (__cplusplus) \
	 || (YYLTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL)))

/* A type that is properly aligned for any stack member.  */
union yyalloc
{
  short yyss;
  YYSTYPE yyvs;
# if YYLSP_NEEDED
  YYLTYPE yyls;
# endif
};
d996 5
a1000 2
/* The size of the maximum gap between one aligned stack and the next.  */
# define YYSTACK_GAP_MAX (sizeof (union yyalloc) - 1)
d1002 3
a1004 64
/* The size of an array large to enough to hold all stacks, each with
   N elements.  */
# if YYLSP_NEEDED
#  define YYSTACK_BYTES(N) \
     ((N) * (sizeof (short) + sizeof (YYSTYPE) + sizeof (YYLTYPE))	\
      + 2 * YYSTACK_GAP_MAX)
# else
#  define YYSTACK_BYTES(N) \
     ((N) * (sizeof (short) + sizeof (YYSTYPE))				\
      + YYSTACK_GAP_MAX)
# endif

/* Copy COUNT objects from FROM to TO.  The source and destination do
   not overlap.  */
# ifndef YYCOPY
#  if 1 < __GNUC__
#   define YYCOPY(To, From, Count) \
      __builtin_memcpy (To, From, (Count) * sizeof (*(From)))
#  else
#   define YYCOPY(To, From, Count)		\
      do					\
	{					\
	  register YYSIZE_T yyi;		\
	  for (yyi = 0; yyi < (Count); yyi++)	\
	    (To)[yyi] = (From)[yyi];		\
	}					\
      while (0)
#  endif
# endif

/* Relocate STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.  */
# define YYSTACK_RELOCATE(Stack)					\
    do									\
      {									\
	YYSIZE_T yynewbytes;						\
	YYCOPY (&yyptr->Stack, Stack, yysize);				\
	Stack = &yyptr->Stack;						\
	yynewbytes = yystacksize * sizeof (*Stack) + YYSTACK_GAP_MAX;	\
	yyptr += yynewbytes / sizeof (*yyptr);				\
      }									\
    while (0)

#endif


#if ! defined (YYSIZE_T) && defined (__SIZE_TYPE__)
# define YYSIZE_T __SIZE_TYPE__
#endif
#if ! defined (YYSIZE_T) && defined (size_t)
# define YYSIZE_T size_t
#endif
#if ! defined (YYSIZE_T)
# if defined (__STDC__) || defined (__cplusplus)
#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  define YYSIZE_T size_t
# endif
#endif
#if ! defined (YYSIZE_T)
# define YYSIZE_T unsigned int
#endif
d1013 3
a1015 2
/* Like YYERROR except do call yyerror.  This remains here temporarily
   to ease the transition to the new meaning of YYERROR, for GCC.
d1019 1
a1019 1
#define YYBACKUP(Token, Value)					\
d1022 1
a1022 3
    {								\
      yychar = (Token);						\
      yylval = (Value);						\
d1028 1
a1028 4
    { 								\
      yyerror ("syntax error: cannot back up");			\
      YYERROR;							\
    }								\
d1034 23
d1058 3
a1060 2
/* YYLLOC_DEFAULT -- Compute the default location (before the actions
   are run).
d1062 3
a1064 8
   When YYLLOC_DEFAULT is run, CURRENT is set the location of the
   first token.  By default, to implement support for ranges, extend
   its range to the last symbol.  */

#ifndef YYLLOC_DEFAULT
# define YYLLOC_DEFAULT(Current, Rhs, N)       	\
   Current.last_line   = Rhs[N].last_line;	\
   Current.last_column = Rhs[N].last_column;
d1067 2
d1070 7
a1076 40
/* YYLEX -- calling `yylex' with the right arguments.  */

#if YYPURE
# if YYLSP_NEEDED
#  ifdef YYLEX_PARAM
#   define YYLEX		yylex (&yylval, &yylloc, YYLEX_PARAM)
#  else
#   define YYLEX		yylex (&yylval, &yylloc)
#  endif
# else /* !YYLSP_NEEDED */
#  ifdef YYLEX_PARAM
#   define YYLEX		yylex (&yylval, YYLEX_PARAM)
#  else
#   define YYLEX		yylex (&yylval)
#  endif
# endif /* !YYLSP_NEEDED */
#else /* !YYPURE */
# define YYLEX			yylex ()
#endif /* !YYPURE */


/* Enable debugging if requested.  */
#if YYDEBUG

# ifndef YYFPRINTF
#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
#  define YYFPRINTF fprintf
# endif

# define YYDPRINTF(Args)			\
do {						\
  if (yydebug)					\
    YYFPRINTF Args;				\
} while (0)
/* Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.  */
int yydebug;
#else /* !YYDEBUG */
# define YYDPRINTF(Args)
#endif /* !YYDEBUG */
a1077 1
/* YYINITDEPTH -- initial size of the parser's stacks.  */
d1079 1
a1079 1
# define YYINITDEPTH 200
d1082 2
a1083 6
/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   SIZE_MAX < YYSTACK_BYTES (YYMAXDEPTH)
   evaluated with infinite-precision integer arithmetic.  */
d1086 1
a1086 1
# undef YYMAXDEPTH
d1090 1
a1090 1
# define YYMAXDEPTH 10000
d1093 21
a1113 16
#ifdef YYERROR_VERBOSE

# ifndef yystrlen
#  if defined (__GLIBC__) && defined (_STRING_H)
#   define yystrlen strlen
#  else
/* Return the length of YYSTR.  */
static YYSIZE_T
#   if defined (__STDC__) || defined (__cplusplus)
yystrlen (const char *yystr)
#   else
yystrlen (yystr)
     const char *yystr;
#   endif
{
  register const char *yys = yystr;
d1115 2
a1116 4
  while (*yys++ != '\0')
    continue;

  return yys - yystr - 1;
a1117 2
#  endif
# endif
d1119 1
a1119 17
# ifndef yystpcpy
#  if defined (__GLIBC__) && defined (_STRING_H) && defined (_GNU_SOURCE)
#   define yystpcpy stpcpy
#  else
/* Copy YYSRC to YYDEST, returning the address of the terminating '\0' in
   YYDEST.  */
static char *
#   if defined (__STDC__) || defined (__cplusplus)
yystpcpy (char *yydest, const char *yysrc)
#   else
yystpcpy (yydest, yysrc)
     char *yydest;
     const char *yysrc;
#   endif
{
  register char *yyd = yydest;
  register const char *yys = yysrc;
d1121 8
a1128 2
  while ((*yyd++ = *yys++) != '\0')
    continue;
d1130 2
a1131 1
  return yyd - 1;
d1133 2
a1134 2
#  endif
# endif
d1137 1
a1137 2
#line 315 "/usr/share/bison-1.35/bison.simple"

d1146 11
a1156 11
# if defined (__STDC__) || defined (__cplusplus)
#  define YYPARSE_PARAM_ARG void *YYPARSE_PARAM
#  define YYPARSE_PARAM_DECL
# else
#  define YYPARSE_PARAM_ARG YYPARSE_PARAM
#  define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
# endif
#else /* !YYPARSE_PARAM */
# define YYPARSE_PARAM_ARG
# define YYPARSE_PARAM_DECL
#endif /* !YYPARSE_PARAM */
d1160 1
a1160 1
# ifdef YYPARSE_PARAM
d1162 1
a1162 1
# else
a1163 1
# endif
a1164 23

/* YY_DECL_VARIABLES -- depending whether we use a pure parser,
   variables are global, or local to YYPARSE.  */

#define YY_DECL_NON_LSP_VARIABLES			\
/* The lookahead symbol.  */				\
int yychar;						\
							\
/* The semantic value of the lookahead symbol. */	\
YYSTYPE yylval;						\
							\
/* Number of parse errors so far.  */			\
int yynerrs;

#if YYLSP_NEEDED
# define YY_DECL_VARIABLES			\
YY_DECL_NON_LSP_VARIABLES			\
						\
/* Location data for the lookahead symbol.  */	\
YYLTYPE yylloc;
#else
# define YY_DECL_VARIABLES			\
YY_DECL_NON_LSP_VARIABLES
a1166 7

/* If nonreentrant, generate the variables here. */

#if !YYPURE
YY_DECL_VARIABLES
#endif  /* !YYPURE */

d1168 1
a1168 1
yyparse (YYPARSE_PARAM_ARG)
a1170 5
  /* If reentrant, generate the variables here. */
#if YYPURE
  YY_DECL_VARIABLES
#endif  /* !YYPURE */

a1172 17
  int yyresult;
  /* Number of tokens to shift before error messages enabled.  */
  int yyerrstatus;
  /* Lookahead token as an internal (translated) token number.  */
  int yychar1 = 0;

  /* Three stacks and their tools:
     `yyss': related to states,
     `yyvs': related to semantic values,
     `yyls': related to locations.

     Refer to the stacks thru separate pointers, to allow yyoverflow
     to reallocate them elsewhere.  */

  /* The state stack. */
  short	yyssa[YYINITDEPTH];
  short *yyss = yyssa;
d1174 3
d1178 5
a1182 4
  /* The semantic value stack.  */
  YYSTYPE yyvsa[YYINITDEPTH];
  YYSTYPE *yyvs = yyvsa;
  register YYSTYPE *yyvsp;
d1184 2
a1185 3
#if YYLSP_NEEDED
  /* The location stack.  */
  YYLTYPE yylsa[YYINITDEPTH];
a1187 1
#endif
d1189 1
a1189 2
#if YYLSP_NEEDED
# define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
d1191 1
a1191 1
# define YYPOPSTACK   (yyvsp--, yyssp--)
d1194 2
a1195 1
  YYSIZE_T yystacksize = YYINITDEPTH;
d1197 8
d1206 3
a1208 6
  /* The variables used to return semantic value and location from the
     action routines.  */
  YYSTYPE yyval;
#if YYLSP_NEEDED
  YYLTYPE yyloc;
#endif
a1209 2
  /* When reducing, the number of symbols on the RHS of the reduced
     rule. */
d1212 4
a1215 1
  YYDPRINTF ((stderr, "Starting parse\n"));
d1227 1
a1227 1
  yyssp = yyss;
d1229 1
a1229 1
#if YYLSP_NEEDED
a1231 1
  goto yysetstate;
d1233 4
a1236 8
/*------------------------------------------------------------.
| yynewstate -- Push a new state, which is found in yystate.  |
`------------------------------------------------------------*/
 yynewstate:
  /* In all cases, when you get here, the value and location stacks
     have just been pushed. so pushing a state here evens the stacks.
     */
  yyssp++;
d1238 1
a1238 2
 yysetstate:
  *yyssp = yystate;
d1242 8
d1251 1
a1251 1
      YYSIZE_T yysize = yyssp - yyss + 1;
d1254 21
a1274 28
      {
	/* Give user a chance to reallocate the stack. Use copies of
	   these so that the &'s don't force the real ones into
	   memory.  */
	YYSTYPE *yyvs1 = yyvs;
	short *yyss1 = yyss;

	/* Each stack pointer address is followed by the size of the
	   data in use in that stack, in bytes.  */
# if YYLSP_NEEDED
	YYLTYPE *yyls1 = yyls;
	/* This used to be a conditional around just the two extra args,
	   but that might be undefined if yyoverflow is a macro.  */
	yyoverflow ("parser stack overflow",
		    &yyss1, yysize * sizeof (*yyssp),
		    &yyvs1, yysize * sizeof (*yyvsp),
		    &yyls1, yysize * sizeof (*yylsp),
		    &yystacksize);
	yyls = yyls1;
# else
	yyoverflow ("parser stack overflow",
		    &yyss1, yysize * sizeof (*yyssp),
		    &yyvs1, yysize * sizeof (*yyvsp),
		    &yystacksize);
# endif
	yyss = yyss1;
	yyvs = yyvs1;
      }
a1275 3
# ifndef YYSTACK_RELOCATE
      goto yyoverflowlab;
# else
d1278 12
a1289 1
	goto yyoverflowlab;
d1293 14
a1306 17

      {
	short *yyss1 = yyss;
	union yyalloc *yyptr =
	  (union yyalloc *) YYSTACK_ALLOC (YYSTACK_BYTES (yystacksize));
	if (! yyptr)
	  goto yyoverflowlab;
	YYSTACK_RELOCATE (yyss);
	YYSTACK_RELOCATE (yyvs);
# if YYLSP_NEEDED
	YYSTACK_RELOCATE (yyls);
# endif
# undef YYSTACK_RELOCATE
	if (yyss1 != yyssa)
	  YYSTACK_FREE (yyss1);
      }
# endif
d1309 4
a1312 4
      yyssp = yyss + yysize - 1;
      yyvsp = yyvs + yysize - 1;
#if YYLSP_NEEDED
      yylsp = yyls + yysize - 1;
d1315 4
a1318 2
      YYDPRINTF ((stderr, "Stack size increased to %lu\n",
		  (unsigned long int) yystacksize));
d1324 4
a1327 1
  YYDPRINTF ((stderr, "Entering state %d\n", yystate));
d1330 1
a1330 6


/*-----------.
| yybackup.  |
`-----------*/
yybackup:
d1349 4
a1352 1
      YYDPRINTF ((stderr, "Reading a token: "));
d1363 4
a1366 1
      YYDPRINTF ((stderr, "Now at end of input.\n"));
d1370 1
a1370 1
      yychar1 = YYTRANSLATE (yychar);
d1372 1
a1372 3
#if YYDEBUG
     /* We have to keep this `#if YYDEBUG', since we use variables
	which are defined only if `YYDEBUG' is set.  */
d1375 4
a1378 5
	  YYFPRINTF (stderr, "Next token is %d (%s",
		     yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise
	     meaning of a token, for further debugging info.  */
# ifdef YYPRINT
d1380 2
a1381 2
# endif
	  YYFPRINTF (stderr, ")\n");
d1413 5
a1417 2
  YYDPRINTF ((stderr, "Shifting token %d (%s), ",
	      yychar, yytname[yychar1]));
d1424 1
a1424 1
#if YYLSP_NEEDED
d1428 2
a1429 4
  /* Count tokens shifted since error; after three, turn off error
     status.  */
  if (yyerrstatus)
    yyerrstatus--;
d1434 2
a1436 4
/*-----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`-----------------------------------------------------------*/
yydefault:
a1439 2
  goto yyreduce;

d1441 1
a1441 3
/*-----------------------------.
| yyreduce -- Do a reduction.  |
`-----------------------------*/
a1442 1
  /* yyn is the number of a rule to reduce with.  */
d1444 2
d1447 1
a1447 20
  /* If YYLEN is nonzero, implement the default value of the action:
     `$$ = $1'.

     Otherwise, the following line sets YYVAL to the semantic value of
     the lookahead token.  This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.  */
  yyval = yyvsp[1-yylen];

#if YYLSP_NEEDED
  /* Similarly for the default location.  Let the user run additional
     commands if for instance locations are ranges.  */
  yyloc = yylsp[1-yylen];
  YYLLOC_DEFAULT (yyloc, (yylsp - yylen), yylen);
#endif

#if YYDEBUG
  /* We have to keep this `#if YYDEBUG', since we use variables which
     are defined only if `YYDEBUG' is set.  */
d1450 1
a1450 1
      int yyi;
d1452 2
a1453 2
      YYFPRINTF (stderr, "Reducing via rule %d (line %d), ",
		 yyn, yyrline[yyn]);
d1456 3
a1458 3
      for (yyi = yyprhs[yyn]; yyrhs[yyi] > 0; yyi++)
	YYFPRINTF (stderr, "%s ", yytname[yyrhs[yyi]]);
      YYFPRINTF (stderr, " -> %s\n", yytname[yyr1[yyn]]);
d1462 1
d1466 3
a1468 3
#line 173 "ldgram.y"
{ ldlex_defsym(); }
    break;
d1470 1
a1470 1
#line 175 "ldgram.y"
d1474 2
a1475 2
		}
    break;
d1477 1
a1477 1
#line 183 "ldgram.y"
d1481 2
a1482 2
		}
    break;
d1484 1
a1484 1
#line 188 "ldgram.y"
d1489 2
a1490 2
		}
    break;
d1492 1
a1492 1
#line 203 "ldgram.y"
d1495 2
a1496 2
			}
    break;
d1498 1
a1498 1
#line 206 "ldgram.y"
d1501 2
a1502 2
			}
    break;
d1504 3
a1506 3
#line 212 "ldgram.y"
{ mri_public(yyvsp[-2].name, yyvsp[0].etree); }
    break;
d1508 3
a1510 3
#line 214 "ldgram.y"
{ mri_public(yyvsp[-2].name, yyvsp[0].etree); }
    break;
d1512 3
a1514 3
#line 216 "ldgram.y"
{ mri_public(yyvsp[-1].name, yyvsp[0].etree); }
    break;
d1516 3
a1518 3
#line 218 "ldgram.y"
{ mri_format(yyvsp[0].name); }
    break;
d1520 3
a1522 3
#line 220 "ldgram.y"
{ mri_output_section(yyvsp[-2].name, yyvsp[0].etree);}
    break;
d1524 3
a1526 3
#line 222 "ldgram.y"
{ mri_output_section(yyvsp[-1].name, yyvsp[0].etree);}
    break;
d1528 3
a1530 3
#line 224 "ldgram.y"
{ mri_output_section(yyvsp[-2].name, yyvsp[0].etree);}
    break;
d1532 3
a1534 3
#line 226 "ldgram.y"
{ mri_align(yyvsp[-2].name,yyvsp[0].etree); }
    break;
d1536 3
a1538 3
#line 228 "ldgram.y"
{ mri_align(yyvsp[-2].name,yyvsp[0].etree); }
    break;
d1540 3
a1542 3
#line 230 "ldgram.y"
{ mri_alignmod(yyvsp[-2].name,yyvsp[0].etree); }
    break;
d1544 3
a1546 3
#line 232 "ldgram.y"
{ mri_alignmod(yyvsp[-2].name,yyvsp[0].etree); }
    break;
d1548 3
a1550 3
#line 236 "ldgram.y"
{ mri_name(yyvsp[0].name); }
    break;
d1552 3
a1554 3
#line 238 "ldgram.y"
{ mri_alias(yyvsp[-2].name,yyvsp[0].name,0);}
    break;
d1556 3
a1558 3
#line 240 "ldgram.y"
{ mri_alias (yyvsp[-2].name, 0, (int) yyvsp[0].bigint.integer); }
    break;
d1560 3
a1562 3
#line 242 "ldgram.y"
{ mri_base(yyvsp[0].etree); }
    break;
d1564 3
a1566 3
#line 244 "ldgram.y"
{ mri_truncate ((unsigned int) yyvsp[0].bigint.integer); }
    break;
d1568 3
a1570 7
#line 248 "ldgram.y"
{ ldlex_script (); ldfile_open_command_file(yyvsp[0].name); }
    break;
case 39:
#line 250 "ldgram.y"
{ ldlex_popstate (); }
    break;
d1572 3
a1574 3
#line 252 "ldgram.y"
{ lang_add_entry (yyvsp[0].name, FALSE); }
    break;
d1576 3
a1578 3
#line 257 "ldgram.y"
{ mri_order(yyvsp[0].name); }
    break;
d1580 3
a1582 3
#line 258 "ldgram.y"
{ mri_order(yyvsp[0].name); }
    break;
d1584 3
a1586 3
#line 264 "ldgram.y"
{ mri_load(yyvsp[0].name); }
    break;
d1588 3
a1590 3
#line 265 "ldgram.y"
{ mri_load(yyvsp[0].name); }
    break;
d1592 3
a1594 3
#line 270 "ldgram.y"
{ mri_only_load(yyvsp[0].name); }
    break;
d1596 3
a1598 3
#line 272 "ldgram.y"
{ mri_only_load(yyvsp[0].name); }
    break;
d1600 3
a1602 3
#line 276 "ldgram.y"
{ yyval.name = NULL; }
    break;
d1604 3
a1606 3
#line 283 "ldgram.y"
{ ldlang_add_undef (yyvsp[0].name); }
    break;
d1608 3
a1610 3
#line 285 "ldgram.y"
{ ldlang_add_undef (yyvsp[0].name); }
    break;
d1612 3
a1614 3
#line 287 "ldgram.y"
{ ldlang_add_undef (yyvsp[0].name); }
    break;
d1616 1
a1616 1
#line 291 "ldgram.y"
d1619 2
a1620 2
	}
    break;
d1622 1
a1622 1
#line 295 "ldgram.y"
d1625 2
a1626 2
	}
    break;
d1628 3
a1630 3
#line 320 "ldgram.y"
{ lang_add_target(yyvsp[-1].name); }
    break;
d1632 3
a1634 3
#line 322 "ldgram.y"
{ ldfile_add_library_path (yyvsp[-1].name, FALSE); }
    break;
d1636 3
a1638 3
#line 324 "ldgram.y"
{ lang_add_output(yyvsp[-1].name, 1); }
    break;
d1640 1
a1640 1
#line 326 "ldgram.y"
d1642 2
a1643 2
					    (char *) NULL, 1); }
    break;
d1645 3
a1647 3
#line 329 "ldgram.y"
{ lang_add_output_format (yyvsp[-5].name, yyvsp[-3].name, yyvsp[-1].name, 1); }
    break;
d1649 3
a1651 3
#line 331 "ldgram.y"
{ ldfile_set_output_arch(yyvsp[-1].name); }
    break;
d1653 7
a1659 7
#line 333 "ldgram.y"
{ command_line.force_common_definition = TRUE ; }
    break;
case 76:
#line 335 "ldgram.y"
{ command_line.inhibit_common_definition = TRUE ; }
    break;
d1661 3
a1663 3
#line 338 "ldgram.y"
{ lang_enter_group (); }
    break;
d1665 3
a1667 3
#line 340 "ldgram.y"
{ lang_leave_group (); }
    break;
d1669 3
a1671 7
#line 342 "ldgram.y"
{ lang_add_map(yyvsp[-1].name); }
    break;
case 81:
#line 344 "ldgram.y"
{ ldlex_script (); ldfile_open_command_file(yyvsp[0].name); }
    break;
d1673 1
a1673 5
#line 346 "ldgram.y"
{ ldlex_popstate (); }
    break;
case 83:
#line 348 "ldgram.y"
d1676 7
a1682 2
		}
    break;
d1684 1
a1684 1
#line 356 "ldgram.y"
d1686 2
a1687 2
				 (char *)NULL); }
    break;
d1689 1
a1689 1
#line 359 "ldgram.y"
d1691 2
a1692 2
				 (char *)NULL); }
    break;
d1694 4
a1697 4
#line 362 "ldgram.y"
{ lang_add_input_file(yyvsp[0].name,lang_input_file_is_search_file_enum,
				 (char *)NULL); }
    break;
d1699 1
a1699 1
#line 365 "ldgram.y"
d1701 2
a1702 2
				 (char *)NULL); }
    break;
d1704 1
a1704 6
#line 368 "ldgram.y"
{ lang_add_input_file(yyvsp[0].name,lang_input_file_is_l_enum,
				 (char *)NULL); }
    break;
case 90:
#line 371 "ldgram.y"
d1706 8
a1713 8
				 (char *)NULL); }
    break;
case 95:
#line 387 "ldgram.y"
{ lang_add_entry (yyvsp[-1].name, FALSE); }
    break;
case 97:
#line 395 "ldgram.y"
d1716 4
a1719 4
			}
    break;
case 98:
#line 399 "ldgram.y"
d1722 4
a1725 4
			}
    break;
case 99:
#line 403 "ldgram.y"
d1728 4
a1731 4
			}
    break;
case 100:
#line 410 "ldgram.y"
d1734 1
a1734 1
			  yyval.wildcard.sorted = FALSE;
d1736 4
a1739 4
			}
    break;
case 101:
#line 416 "ldgram.y"
d1742 1
a1742 1
			  yyval.wildcard.sorted = FALSE;
d1744 4
a1747 4
			}
    break;
case 102:
#line 422 "ldgram.y"
d1750 1
a1750 1
			  yyval.wildcard.sorted = TRUE;
d1752 4
a1755 4
			}
    break;
case 103:
#line 428 "ldgram.y"
d1758 1
a1758 1
			  yyval.wildcard.sorted = TRUE;
d1760 4
a1763 4
			}
    break;
case 104:
#line 437 "ldgram.y"
d1769 5
a1773 5
			  yyval.name_list = tmp;
			}
    break;
case 105:
#line 446 "ldgram.y"
d1780 11
a1790 2
			}
    break;
d1792 1
a1792 1
#line 457 "ldgram.y"
d1794 6
a1799 7
			  struct wildcard_list *tmp;
			  tmp = (struct wildcard_list *) xmalloc (sizeof *tmp);
			  tmp->next = yyvsp[-2].wildcard_list;
			  tmp->spec = yyvsp[0].wildcard;
			  yyval.wildcard_list = tmp;
			}
    break;
d1801 1
a1801 1
#line 466 "ldgram.y"
d1803 4
a1806 7
			  struct wildcard_list *tmp;
			  tmp = (struct wildcard_list *) xmalloc (sizeof *tmp);
			  tmp->next = NULL;
			  tmp->spec = yyvsp[0].wildcard;
			  yyval.wildcard_list = tmp;
			}
    break;
d1808 1
a1808 1
#line 477 "ldgram.y"
d1810 4
a1813 13
			  struct wildcard_spec tmp;
			  tmp.name = yyvsp[0].name;
			  tmp.exclude_name_list = NULL;
			  tmp.sorted = FALSE;
			  lang_add_wild (&tmp, NULL, ldgram_had_keep);
			}
    break;
case 109:
#line 485 "ldgram.y"
{
			  lang_add_wild (NULL, yyvsp[-1].wildcard_list, ldgram_had_keep);
			}
    break;
d1815 1
a1815 1
#line 489 "ldgram.y"
d1817 21
a1837 4
			  lang_add_wild (&yyvsp[-3].wildcard, yyvsp[-1].wildcard_list, ldgram_had_keep);
			}
    break;
case 112:
a1838 14
{ ldgram_had_keep = TRUE; }
    break;
case 113:
#line 499 "ldgram.y"
{ ldgram_had_keep = FALSE; }
    break;
case 115:
#line 505 "ldgram.y"
{
 		lang_add_attribute(lang_object_symbols_statement_enum);
	      	}
    break;
case 117:
#line 510 "ldgram.y"
d1840 6
a1845 6

		  lang_add_attribute(lang_constructors_statement_enum);
		}
    break;
case 118:
#line 515 "ldgram.y"
d1847 1
a1847 1
		  constructors_sorted = TRUE;
d1849 2
a1850 8
		}
    break;
case 120:
#line 521 "ldgram.y"
{
			  lang_add_data ((int) yyvsp[-3].integer, yyvsp[-1].etree);
			}
    break;
d1852 1
a1852 1
#line 526 "ldgram.y"
d1854 13
a1866 7
			  lang_add_fill (yyvsp[-1].fill);
			}
    break;
case 126:
#line 543 "ldgram.y"
{ yyval.integer = yyvsp[0].token; }
    break;
d1868 3
a1870 3
#line 545 "ldgram.y"
{ yyval.integer = yyvsp[0].token; }
    break;
d1872 3
a1874 3
#line 547 "ldgram.y"
{ yyval.integer = yyvsp[0].token; }
    break;
d1876 3
a1878 3
#line 549 "ldgram.y"
{ yyval.integer = yyvsp[0].token; }
    break;
d1880 3
a1882 3
#line 551 "ldgram.y"
{ yyval.integer = yyvsp[0].token; }
    break;
d1884 5
a1888 1
#line 556 "ldgram.y"
d1890 6
a1895 10
		  yyval.fill = exp_get_fill (yyvsp[0].etree,
				     0,
				     "fill value",
				     lang_first_phase_enum);
		}
    break;
case 132:
#line 566 "ldgram.y"
{ yyval.fill = yyvsp[0].fill; }
    break;
d1897 3
a1899 3
#line 567 "ldgram.y"
{ yyval.fill = (fill_type *) 0; }
    break;
d1901 3
a1903 3
#line 572 "ldgram.y"
{ yyval.token = '+'; }
    break;
d1905 3
a1907 3
#line 574 "ldgram.y"
{ yyval.token = '-'; }
    break;
d1909 3
a1911 3
#line 576 "ldgram.y"
{ yyval.token = '*'; }
    break;
d1913 3
a1915 3
#line 578 "ldgram.y"
{ yyval.token = '/'; }
    break;
d1917 3
a1919 3
#line 580 "ldgram.y"
{ yyval.token = LSHIFT; }
    break;
d1921 3
a1923 3
#line 582 "ldgram.y"
{ yyval.token = RSHIFT; }
    break;
d1925 3
a1927 3
#line 584 "ldgram.y"
{ yyval.token = '&'; }
    break;
d1929 3
a1931 3
#line 586 "ldgram.y"
{ yyval.token = '|'; }
    break;
d1933 1
a1933 1
#line 596 "ldgram.y"
d1936 2
a1937 2
		}
    break;
d1939 1
a1939 1
#line 600 "ldgram.y"
d1946 2
a1947 2
		}
    break;
d1949 1
a1949 1
#line 608 "ldgram.y"
d1952 2
a1953 2
		}
    break;
d1955 3
a1957 7
#line 630 "ldgram.y"
{ region = lang_memory_region_lookup(yyvsp[0].name); }
    break;
case 154:
#line 633 "ldgram.y"
{}
    break;
d1959 1
a1959 1
#line 638 "ldgram.y"
d1963 2
a1964 2
}
    break;
d1966 1
a1966 1
#line 646 "ldgram.y"
d1971 2
a1972 2
		}
    break;
d1974 3
a1976 3
#line 655 "ldgram.y"
{ /* dummy action to avoid bison 1.25 error message */ }
    break;
d1978 3
a1980 3
#line 666 "ldgram.y"
{ lang_set_flags (region, yyvsp[0].name, 0); }
    break;
d1982 3
a1984 3
#line 668 "ldgram.y"
{ lang_set_flags (region, yyvsp[0].name, 1); }
    break;
d1986 3
a1988 3
#line 673 "ldgram.y"
{ lang_startup(yyvsp[-1].name); }
    break;
d1990 3
a1992 3
#line 679 "ldgram.y"
{ ldemul_hll((char *)NULL); }
    break;
d1994 3
a1996 3
#line 684 "ldgram.y"
{ ldemul_hll(yyvsp[0].name); }
    break;
d1998 3
a2000 3
#line 686 "ldgram.y"
{ ldemul_hll(yyvsp[0].name); }
    break;
d2002 3
a2004 3
#line 694 "ldgram.y"
{ ldemul_syslib(yyvsp[0].name); }
    break;
d2006 3
a2008 3
#line 700 "ldgram.y"
{ lang_float(TRUE); }
    break;
d2010 3
a2012 3
#line 702 "ldgram.y"
{ lang_float(FALSE); }
    break;
d2014 1
a2014 1
#line 707 "ldgram.y"
d2017 2
a2018 2
		}
    break;
d2020 1
a2020 1
#line 711 "ldgram.y"
d2028 2
a2029 2
		}
    break;
d2031 1
a2031 1
#line 720 "ldgram.y"
d2039 2
a2040 2
		}
    break;
d2042 3
a2044 3
#line 730 "ldgram.y"
{ ldlex_expression(); }
    break;
d2046 3
a2048 3
#line 732 "ldgram.y"
{ ldlex_popstate(); yyval.etree=yyvsp[0].etree;}
    break;
d2050 3
a2052 3
#line 737 "ldgram.y"
{ yyval.etree = exp_unop('-', yyvsp[0].etree); }
    break;
d2054 3
a2056 3
#line 739 "ldgram.y"
{ yyval.etree = yyvsp[-1].etree; }
    break;
d2058 3
a2060 3
#line 741 "ldgram.y"
{ yyval.etree = exp_unop((int) yyvsp[-3].integer,yyvsp[-1].etree); }
    break;
d2062 3
a2064 3
#line 743 "ldgram.y"
{ yyval.etree = exp_unop('!', yyvsp[0].etree); }
    break;
d2066 3
a2068 3
#line 745 "ldgram.y"
{ yyval.etree = yyvsp[0].etree; }
    break;
d2070 3
a2072 3
#line 747 "ldgram.y"
{ yyval.etree = exp_unop('~', yyvsp[0].etree);}
    break;
d2074 3
a2076 3
#line 750 "ldgram.y"
{ yyval.etree = exp_binop('*', yyvsp[-2].etree, yyvsp[0].etree); }
    break;
d2078 3
a2080 3
#line 752 "ldgram.y"
{ yyval.etree = exp_binop('/', yyvsp[-2].etree, yyvsp[0].etree); }
    break;
d2082 3
a2084 3
#line 754 "ldgram.y"
{ yyval.etree = exp_binop('%', yyvsp[-2].etree, yyvsp[0].etree); }
    break;
d2086 3
a2088 3
#line 756 "ldgram.y"
{ yyval.etree = exp_binop('+', yyvsp[-2].etree, yyvsp[0].etree); }
    break;
d2090 3
a2092 3
#line 758 "ldgram.y"
{ yyval.etree = exp_binop('-' , yyvsp[-2].etree, yyvsp[0].etree); }
    break;
d2094 3
a2096 3
#line 760 "ldgram.y"
{ yyval.etree = exp_binop(LSHIFT , yyvsp[-2].etree, yyvsp[0].etree); }
    break;
d2098 3
a2100 3
#line 762 "ldgram.y"
{ yyval.etree = exp_binop(RSHIFT , yyvsp[-2].etree, yyvsp[0].etree); }
    break;
d2102 3
a2104 3
#line 764 "ldgram.y"
{ yyval.etree = exp_binop(EQ , yyvsp[-2].etree, yyvsp[0].etree); }
    break;
d2106 3
a2108 3
#line 766 "ldgram.y"
{ yyval.etree = exp_binop(NE , yyvsp[-2].etree, yyvsp[0].etree); }
    break;
d2110 3
a2112 3
#line 768 "ldgram.y"
{ yyval.etree = exp_binop(LE , yyvsp[-2].etree, yyvsp[0].etree); }
    break;
d2114 3
a2116 3
#line 770 "ldgram.y"
{ yyval.etree = exp_binop(GE , yyvsp[-2].etree, yyvsp[0].etree); }
    break;
d2118 3
a2120 3
#line 772 "ldgram.y"
{ yyval.etree = exp_binop('<' , yyvsp[-2].etree, yyvsp[0].etree); }
    break;
d2122 3
a2124 3
#line 774 "ldgram.y"
{ yyval.etree = exp_binop('>' , yyvsp[-2].etree, yyvsp[0].etree); }
    break;
d2126 3
a2128 3
#line 776 "ldgram.y"
{ yyval.etree = exp_binop('&' , yyvsp[-2].etree, yyvsp[0].etree); }
    break;
d2130 3
a2132 3
#line 778 "ldgram.y"
{ yyval.etree = exp_binop('^' , yyvsp[-2].etree, yyvsp[0].etree); }
    break;
d2134 3
a2136 3
#line 780 "ldgram.y"
{ yyval.etree = exp_binop('|' , yyvsp[-2].etree, yyvsp[0].etree); }
    break;
d2138 3
a2140 3
#line 782 "ldgram.y"
{ yyval.etree = exp_trinop('?' , yyvsp[-4].etree, yyvsp[-2].etree, yyvsp[0].etree); }
    break;
d2142 3
a2144 3
#line 784 "ldgram.y"
{ yyval.etree = exp_binop(ANDAND , yyvsp[-2].etree, yyvsp[0].etree); }
    break;
d2146 3
a2148 3
#line 786 "ldgram.y"
{ yyval.etree = exp_binop(OROR , yyvsp[-2].etree, yyvsp[0].etree); }
    break;
d2150 3
a2152 3
#line 788 "ldgram.y"
{ yyval.etree = exp_nameop(DEFINED, yyvsp[-1].name); }
    break;
d2154 3
a2156 3
#line 790 "ldgram.y"
{ yyval.etree = exp_bigintop (yyvsp[0].bigint.integer, yyvsp[0].bigint.str); }
    break;
d2158 3
a2160 3
#line 792 "ldgram.y"
{ yyval.etree = exp_nameop(SIZEOF_HEADERS,0); }
    break;
d2162 3
a2164 3
#line 795 "ldgram.y"
{ yyval.etree = exp_nameop(SIZEOF,yyvsp[-1].name); }
    break;
d2166 3
a2168 3
#line 797 "ldgram.y"
{ yyval.etree = exp_nameop(ADDR,yyvsp[-1].name); }
    break;
d2170 3
a2172 3
#line 799 "ldgram.y"
{ yyval.etree = exp_nameop(LOADADDR,yyvsp[-1].name); }
    break;
d2174 3
a2176 3
#line 801 "ldgram.y"
{ yyval.etree = exp_unop(ABSOLUTE, yyvsp[-1].etree); }
    break;
d2178 3
a2180 3
#line 803 "ldgram.y"
{ yyval.etree = exp_unop(ALIGN_K,yyvsp[-1].etree); }
    break;
d2182 3
a2184 3
#line 805 "ldgram.y"
{ yyval.etree = exp_binop (DATA_SEGMENT_ALIGN, yyvsp[-3].etree, yyvsp[-1].etree); }
    break;
d2186 3
a2188 3
#line 807 "ldgram.y"
{ yyval.etree = exp_unop(DATA_SEGMENT_END, yyvsp[-1].etree); }
    break;
d2190 3
a2192 3
#line 809 "ldgram.y"
{ yyval.etree = exp_unop(ALIGN_K,yyvsp[-1].etree); }
    break;
d2194 3
a2196 3
#line 811 "ldgram.y"
{ yyval.etree = exp_nameop(NAME,yyvsp[0].name); }
    break;
d2198 3
a2200 3
#line 813 "ldgram.y"
{ yyval.etree = exp_binop (MAX_K, yyvsp[-3].etree, yyvsp[-1].etree ); }
    break;
d2202 3
a2204 3
#line 815 "ldgram.y"
{ yyval.etree = exp_binop (MIN_K, yyvsp[-3].etree, yyvsp[-1].etree ); }
    break;
d2206 3
a2208 3
#line 817 "ldgram.y"
{ yyval.etree = exp_assert (yyvsp[-3].etree, yyvsp[-1].name); }
    break;
d2210 3
a2212 3
#line 822 "ldgram.y"
{ yyval.name = yyvsp[0].name; }
    break;
d2214 3
a2216 3
#line 823 "ldgram.y"
{ yyval.name = 0; }
    break;
d2218 3
a2220 3
#line 827 "ldgram.y"
{ yyval.etree = yyvsp[-1].etree; }
    break;
d2222 3
a2224 3
#line 828 "ldgram.y"
{ yyval.etree = 0; }
    break;
d2226 1
a2226 9
#line 831 "ldgram.y"
{ ldlex_expression(); }
    break;
case 223:
#line 833 "ldgram.y"
{ ldlex_popstate (); ldlex_script (); }
    break;
case 224:
#line 835 "ldgram.y"
d2231 8
a2238 8
			}
    break;
case 225:
#line 841 "ldgram.y"
{ ldlex_popstate (); ldlex_expression (); }
    break;
case 226:
#line 843 "ldgram.y"
d2241 7
a2247 3
		  lang_leave_output_section_statement (yyvsp[0].fill, yyvsp[-3].name, yyvsp[-1].section_phdr, yyvsp[-2].name);
		}
    break;
d2249 3
a2251 3
#line 848 "ldgram.y"
{}
    break;
d2253 5
a2257 3
#line 850 "ldgram.y"
{ ldlex_expression (); }
    break;
d2259 3
a2261 3
#line 852 "ldgram.y"
{ ldlex_popstate (); ldlex_script (); }
    break;
d2263 1
a2263 1
#line 854 "ldgram.y"
d2265 4
a2268 7
			  lang_enter_overlay (yyvsp[-4].etree);
			}
    break;
case 231:
#line 859 "ldgram.y"
{ ldlex_popstate (); ldlex_expression (); }
    break;
d2270 5
a2274 13
#line 861 "ldgram.y"
{
			  ldlex_popstate ();
			  lang_leave_overlay (yyvsp[-10].etree, (int) yyvsp[-11].integer,
					      yyvsp[0].fill, yyvsp[-3].name, yyvsp[-1].section_phdr, yyvsp[-2].name);
			}
    break;
case 234:
#line 871 "ldgram.y"
{ ldlex_expression (); }
    break;
case 235:
#line 873 "ldgram.y"
d2278 10
a2287 2
		}
    break;
d2289 3
a2291 3
#line 881 "ldgram.y"
{ sectype = noload_section; }
    break;
d2293 3
a2295 3
#line 882 "ldgram.y"
{ sectype = dsect_section; }
    break;
d2297 3
a2299 7
#line 883 "ldgram.y"
{ sectype = copy_section; }
    break;
case 240:
#line 884 "ldgram.y"
{ sectype = info_section; }
    break;
d2301 7
a2307 3
#line 885 "ldgram.y"
{ sectype = overlay_section; }
    break;
d2309 3
a2311 3
#line 890 "ldgram.y"
{ sectype = normal_section; }
    break;
d2313 3
a2315 3
#line 891 "ldgram.y"
{ sectype = normal_section; }
    break;
d2317 3
a2319 3
#line 895 "ldgram.y"
{ yyval.etree = yyvsp[-2].etree; }
    break;
d2321 3
a2323 3
#line 896 "ldgram.y"
{ yyval.etree = (etree_type *)NULL;  }
    break;
d2325 3
a2327 3
#line 901 "ldgram.y"
{ yyval.etree = yyvsp[-3].etree; }
    break;
d2329 3
a2331 3
#line 903 "ldgram.y"
{ yyval.etree = yyvsp[-7].etree; }
    break;
d2333 3
a2335 3
#line 907 "ldgram.y"
{ yyval.etree = yyvsp[-1].etree; }
    break;
d2337 3
a2339 3
#line 908 "ldgram.y"
{ yyval.etree = (etree_type *) NULL;  }
    break;
d2341 3
a2343 3
#line 913 "ldgram.y"
{ yyval.integer = 0; }
    break;
d2345 3
a2347 3
#line 915 "ldgram.y"
{ yyval.integer = 1; }
    break;
d2349 1
a2349 9
#line 920 "ldgram.y"
{ yyval.name = yyvsp[0].name; }
    break;
case 254:
#line 921 "ldgram.y"
{ yyval.name = "*default*"; }
    break;
case 255:
#line 926 "ldgram.y"
d2352 4
a2355 4
		}
    break;
case 256:
#line 930 "ldgram.y"
d2362 1
a2362 1
		  n->used = FALSE;
d2365 4
a2368 4
		}
    break;
case 258:
#line 946 "ldgram.y"
d2372 8
a2379 8
			}
    break;
case 259:
#line 951 "ldgram.y"
{ ldlex_popstate (); ldlex_expression (); }
    break;
case 260:
#line 953 "ldgram.y"
d2382 11
a2392 3
			  lang_leave_overlay_section (yyvsp[0].fill, yyvsp[-1].section_phdr);
			}
    break;
d2394 1
a2394 9
#line 970 "ldgram.y"
{ ldlex_expression (); }
    break;
case 266:
#line 971 "ldgram.y"
{ ldlex_popstate (); }
    break;
case 267:
#line 973 "ldgram.y"
d2398 4
a2401 4
		}
    break;
case 268:
#line 981 "ldgram.y"
d2414 1
a2414 1
			  "PT_PHDR", "PT_TLS"
a2425 12
		      if (i == sizeof phdr_types / sizeof phdr_types[0])
			{
			  if (strcmp (s, "PT_GNU_EH_FRAME") == 0)
			    yyval.etree = exp_intop (0x6474e550);
			  else
			    {
			      einfo (_("\
%X%P:%S: unknown phdr type `%s' (try integer literal)\n"),
				     s);
			      yyval.etree = exp_intop (0);
			    }
			}
d2427 4
a2430 4
		}
    break;
case 269:
#line 1023 "ldgram.y"
d2433 4
a2436 4
		}
    break;
case 270:
#line 1027 "ldgram.y"
d2440 1
a2440 1
		    yyval.phdr.filehdr = TRUE;
d2442 1
a2442 1
		    yyval.phdr.phdrs = TRUE;
d2447 4
a2450 4
		}
    break;
case 271:
#line 1039 "ldgram.y"
d2454 4
a2457 4
		}
    break;
case 272:
#line 1047 "ldgram.y"
d2460 4
a2463 4
		}
    break;
case 273:
#line 1051 "ldgram.y"
d2466 4
a2469 4
		}
    break;
case 274:
#line 1059 "ldgram.y"
d2473 4
a2476 4
		}
    break;
case 275:
#line 1064 "ldgram.y"
d2480 4
a2483 4
		}
    break;
case 276:
#line 1073 "ldgram.y"
d2486 4
a2489 4
		}
    break;
case 277:
#line 1077 "ldgram.y"
d2492 4
a2495 10
		}
    break;
case 280:
#line 1089 "ldgram.y"
{
		  lang_register_vers_node (NULL, yyvsp[-2].versnode, NULL);
		}
    break;
case 281:
#line 1093 "ldgram.y"
d2498 4
a2501 4
		}
    break;
case 282:
#line 1097 "ldgram.y"
d2504 4
a2507 4
		}
    break;
case 283:
#line 1104 "ldgram.y"
d2510 4
a2513 4
		}
    break;
case 284:
#line 1108 "ldgram.y"
d2516 4
a2519 4
		}
    break;
case 285:
#line 1115 "ldgram.y"
d2522 4
a2525 4
		}
    break;
case 286:
#line 1119 "ldgram.y"
d2528 4
a2531 4
		}
    break;
case 287:
#line 1123 "ldgram.y"
d2534 4
a2537 4
		}
    break;
case 288:
#line 1127 "ldgram.y"
d2540 4
a2543 4
		}
    break;
case 289:
#line 1131 "ldgram.y"
d2546 4
a2549 4
		}
    break;
case 290:
#line 1138 "ldgram.y"
d2551 5
a2555 5
		  yyval.versyms = lang_new_vers_pattern (NULL, yyvsp[0].name, ldgram_vers_current_lang);
		}
    break;
case 291:
#line 1142 "ldgram.y"
d2557 5
a2561 5
		  yyval.versyms = lang_new_vers_pattern (yyvsp[-2].versyms, yyvsp[0].name, ldgram_vers_current_lang);
		}
    break;
case 292:
#line 1146 "ldgram.y"
d2565 4
a2568 11
			}
    break;
case 293:
#line 1151 "ldgram.y"
{
			  yyval.versyms = yyvsp[-2].versyms;
			  ldgram_vers_current_lang = yyvsp[-3].name;
			}
    break;
case 294:
#line 1156 "ldgram.y"
d2570 4
a2573 11
			  yyval.name = ldgram_vers_current_lang;
			  ldgram_vers_current_lang = yyvsp[-1].name;
			}
    break;
case 295:
#line 1161 "ldgram.y"
{
			  yyval.versyms = yyvsp[-2].versyms;
			  ldgram_vers_current_lang = yyvsp[-3].name;
			}
    break;
d2575 2
a2576 3

#line 705 "/usr/share/bison-1.35/bison.simple"

d2580 1
a2580 1
#if YYLSP_NEEDED
d2584 1
a2584 1
#if YYDEBUG
d2587 5
a2591 5
      short *yyssp1 = yyss - 1;
      YYFPRINTF (stderr, "state stack now");
      while (yyssp1 != yyssp)
	YYFPRINTF (stderr, " %d", *++yyssp1);
      YYFPRINTF (stderr, "\n");
d2596 16
a2611 2
#if YYLSP_NEEDED
  *++yylsp = yyloc;
d2614 4
a2617 3
  /* Now `shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  */
d2629 1
d2631 2
a2632 6
/*------------------------------------.
| yyerrlab -- here on detecting error |
`------------------------------------*/
yyerrlab:
  /* If not already recovering from an error, report this error.  */
  if (!yyerrstatus)
d2641 12
a2652 15
	  YYSIZE_T yysize = 0;
	  char *yymsg;
	  int yyx, yycount;

	  yycount = 0;
	  /* Start YYX at -YYN if negative to avoid negative indexes in
	     YYCHECK.  */
	  for (yyx = yyn < 0 ? -yyn : 0;
	       yyx < (int) (sizeof (yytname) / sizeof (char *)); yyx++)
	    if (yycheck[yyx + yyn] == yyx)
	      yysize += yystrlen (yytname[yyx]) + 15, yycount++;
	  yysize += yystrlen ("parse error, unexpected ") + 1;
	  yysize += yystrlen (yytname[YYTRANSLATE (yychar)]);
	  yymsg = (char *) YYSTACK_ALLOC (yysize);
	  if (yymsg != 0)
d2654 1
a2654 2
	      char *yyp = yystpcpy (yymsg, "parse error, unexpected ");
	      yyp = yystpcpy (yyp, yytname[YYTRANSLATE (yychar)]);
d2656 1
a2656 1
	      if (yycount < 5)
d2658 4
a2661 5
		  yycount = 0;
		  for (yyx = yyn < 0 ? -yyn : 0;
		       yyx < (int) (sizeof (yytname) / sizeof (char *));
		       yyx++)
		    if (yycheck[yyx + yyn] == yyx)
d2663 4
a2666 4
			const char *yyq = ! yycount ? ", expecting " : " or ";
			yyp = yystpcpy (yyp, yyq);
			yyp = yystpcpy (yyp, yytname[yyx]);
			yycount++;
d2669 2
a2670 2
	      yyerror (yymsg);
	      YYSTACK_FREE (yymsg);
d2673 1
a2673 1
	    yyerror ("parse error; also virtual memory exhausted");
d2676 2
a2677 2
#endif /* defined (YYERROR_VERBOSE) */
	yyerror ("parse error");
d2679 1
d2681 1
a2682 5

/*--------------------------------------------------.
| yyerrlab1 -- error raised explicitly by an action |
`--------------------------------------------------*/
yyerrlab1:
d2685 1
a2685 2
      /* If just tried and failed to reuse lookahead token after an
	 error, discard it.  */
d2690 6
a2695 2
      YYDPRINTF ((stderr, "Discarding token %d (%s).\n",
		  yychar, yytname[yychar1]));
d2699 2
a2700 2
  /* Else will try to reuse lookahead token after shifting the error
     token.  */
d2706 1
a2707 5
/*-------------------------------------------------------------------.
| yyerrdefault -- current state does not do anything special for the |
| error token.                                                       |
`-------------------------------------------------------------------*/
yyerrdefault:
d2711 2
a2712 5

  /* If its default is to accept any token, ok.  Otherwise pop it.  */
  yyn = yydefact[yystate];
  if (yyn)
    goto yydefault;
d2715 1
d2717 1
a2717 7
/*---------------------------------------------------------------.
| yyerrpop -- pop the current state because it cannot handle the |
| error token                                                    |
`---------------------------------------------------------------*/
yyerrpop:
  if (yyssp == yyss)
    YYABORT;
d2720 1
a2720 1
#if YYLSP_NEEDED
d2724 1
a2724 1
#if YYDEBUG
d2727 5
a2731 5
      short *yyssp1 = yyss - 1;
      YYFPRINTF (stderr, "Error: state stack now");
      while (yyssp1 != yyssp)
	YYFPRINTF (stderr, " %d", *++yyssp1);
      YYFPRINTF (stderr, "\n");
a2734 3
/*--------------.
| yyerrhandle.  |
`--------------*/
d2736 1
d2759 4
a2762 1
  YYDPRINTF ((stderr, "Shifting error token, "));
d2765 1
a2765 1
#if YYLSP_NEEDED
d2772 11
d2784 8
a2791 26
/*-------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`-------------------------------------*/
yyacceptlab:
  yyresult = 0;
  goto yyreturn;

/*-----------------------------------.
| yyabortlab -- YYABORT comes here.  |
`-----------------------------------*/
yyabortlab:
  yyresult = 1;
  goto yyreturn;

/*---------------------------------------------.
| yyoverflowab -- parser overflow comes here.  |
`---------------------------------------------*/
yyoverflowlab:
  yyerror ("parser stack overflow");
  yyresult = 2;
  /* Fall through.  */

yyreturn:
#ifndef yyoverflow
  if (yyss != yyssa)
    YYSTACK_FREE (yyss);
d2793 2
a2794 1
  return yyresult;
d2796 1
a2796 1
#line 1172 "ldgram.y"
d2799 1
a2799 1
yyerror(arg)
d2801 1
a2801 1
{
@


1.1.2.3
log
@GNU Binutils, version 2.15
@
text
@d80 31
a110 32
# define	SUBALIGN	331
# define	PROVIDE	332
# define	CHIP	333
# define	LIST	334
# define	SECT	335
# define	ABSOLUTE	336
# define	LOAD	337
# define	NEWLINE	338
# define	ENDWORD	339
# define	ORDER	340
# define	NAMEWORD	341
# define	ASSERT_K	342
# define	FORMAT	343
# define	PUBLIC	344
# define	BASE	345
# define	ALIAS	346
# define	TRUNCATE	347
# define	REL	348
# define	INPUT_SCRIPT	349
# define	INPUT_MRI_SCRIPT	350
# define	INPUT_DEFSYM	351
# define	CASE	352
# define	EXTERN	353
# define	START	354
# define	VERS_TAG	355
# define	VERS_IDENTIFIER	356
# define	GLOBAL	357
# define	LOCAL	358
# define	VERSIONK	359
# define	INPUT_VERSION_SCRIPT	360
# define	KEEP	361
# define	EXCLUDE_FILE	362
d197 1
a197 1
#define	YYFINAL		627
d199 1
a199 1
#define	YYNTBASE	132
d202 1
a202 1
#define YYTRANSLATE(x) ((unsigned)(x) <= 362 ? yytranslate[x] : 240)
d210 3
a212 3
       2,     2,     2,   130,     2,     2,     2,    34,    21,     2,
      37,   127,    32,    30,   125,    31,     2,    33,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,    16,   126,
d216 1
a216 1
       2,   128,     2,   129,    20,     2,     2,     2,     2,     2,
d219 1
a219 1
       2,     2,     2,    51,    19,    52,   131,     2,     2,     2,
d243 1
a243 1
     122,   123,   124
d258 21
a278 22
     290,   293,   298,   301,   304,   305,   310,   313,   314,   322,
     324,   326,   328,   330,   336,   341,   350,   353,   355,   359,
     361,   363,   367,   372,   374,   375,   381,   384,   386,   388,
     390,   395,   397,   402,   407,   410,   412,   413,   415,   417,
     419,   421,   423,   425,   427,   430,   431,   433,   435,   437,
     439,   441,   443,   445,   447,   449,   451,   455,   459,   466,
     468,   469,   475,   478,   482,   483,   484,   492,   496,   500,
     501,   505,   507,   510,   512,   515,   520,   525,   529,   533,
     535,   540,   544,   545,   547,   549,   550,   553,   557,   558,
     561,   564,   568,   573,   576,   579,   582,   586,   590,   594,
     598,   602,   606,   610,   614,   618,   622,   626,   630,   634,
     638,   642,   646,   652,   656,   660,   665,   667,   669,   674,
     679,   684,   689,   694,   701,   708,   713,   718,   720,   727,
     734,   741,   745,   746,   751,   752,   757,   758,   759,   760,
     761,   762,   763,   781,   782,   783,   784,   785,   786,   805,
     806,   807,   815,   817,   819,   821,   823,   825,   829,   830,
     833,   837,   840,   847,   858,   861,   863,   864,   866,   869,
     870,   871,   875,   876,   877,   878,   879,   891,   896,   897,
     900,   901,   902,   909,   911,   912,   916,   922,   923,   927,
     928,   931,   932,   938,   940,   943,   948,   954,   961,   963,
     966,   967,   970,   975,   980,   989,   991,   995,   996,  1006,
    1007,  1015,  1016
d282 100
a381 102
     111,   146,     0,   112,   136,     0,   122,   228,     0,   113,
     134,     0,     4,     0,     0,   135,     4,    10,   192,     0,
       0,   137,   138,     0,   138,   139,   100,     0,     0,    95,
     192,     0,    95,   192,   125,   192,     0,     4,     0,    96,
       0,   102,   141,     0,   101,     0,   106,     4,    10,   192,
       0,   106,     4,   125,   192,     0,   106,     4,   192,     0,
     105,     4,     0,    97,     4,   125,   192,     0,    97,     4,
     192,     0,    97,     4,    10,   192,     0,    38,     4,    10,
     192,     0,    38,     4,   125,   192,     0,    91,     4,    10,
     192,     0,    91,     4,   125,   192,     0,    98,   143,     0,
      99,   142,     0,   103,     4,     0,   108,     4,   125,     4,
       0,   108,     4,   125,     3,     0,   107,   192,     0,   109,
       3,     0,   114,   144,     0,   115,   145,     0,     0,    58,
     133,   140,   138,    36,     0,   116,     4,     0,     0,   141,
     125,     4,     0,   141,     4,     0,     0,     4,     0,   142,
     125,     4,     0,     4,     0,   143,   125,     4,     0,     0,
       4,     0,   144,   125,     4,     0,     4,     0,   145,     4,
       0,   145,   125,     4,     0,     0,   147,   148,     0,   148,
     149,     0,     0,   174,     0,   153,     0,   220,     0,   183,
       0,   184,     0,   186,     0,   188,     0,   155,     0,   230,
       0,   126,     0,    67,    37,     4,   127,     0,    68,    37,
     133,   127,     0,    89,    37,   133,   127,     0,    54,    37,
       4,   127,     0,    54,    37,     4,   125,     4,   125,     4,
     127,     0,    56,    37,     4,   127,     0,    55,     0,    57,
       0,    87,    37,   152,   127,     0,     0,    88,   150,    37,
     152,   127,     0,    69,    37,   133,   127,     0,     0,    58,
     133,   151,   148,    36,     0,    82,    37,   189,   127,     0,
     115,    37,   145,   127,     0,     4,     0,   152,   125,     4,
       0,   152,     4,     0,     5,     0,   152,   125,     5,     0,
     152,     5,     0,    46,    51,   154,    52,     0,   154,   196,
       0,   154,   155,     0,     0,    70,    37,     4,   127,     0,
     172,   171,     0,     0,   104,   156,    37,   192,   125,     4,
     127,     0,     4,     0,    32,     0,    15,     0,   157,     0,
     124,    37,   159,   127,   157,     0,    48,    37,   157,   127,
       0,    48,    37,   124,    37,   159,   127,   157,   127,     0,
     159,   157,     0,   157,     0,   160,   173,   158,     0,   158,
       0,     4,     0,   128,   160,   129,     0,   158,    37,   160,
     127,     0,   161,     0,     0,   123,    37,   163,   161,   127,
       0,   172,   171,     0,    86,     0,   126,     0,    90,     0,
      48,    37,    90,   127,     0,   162,     0,   167,    37,   190,
     127,     0,    84,    37,   168,   127,     0,   165,   164,     0,
     164,     0,     0,   165,     0,    41,     0,    42,     0,    43,
       0,    44,     0,    45,     0,   190,     0,    10,   168,     0,
       0,     6,     0,     7,     0,     8,     0,     9,     0,    11,
       0,    12,     0,    13,     0,    14,     0,   126,     0,   125,
       0,     4,    10,   190,     0,     4,   170,   190,     0,    94,
      37,     4,    10,   190,   127,     0,   125,     0,     0,    59,
      51,   176,   175,    52,     0,   175,   176,     0,   175,   125,
     176,     0,     0,     0,     4,   177,   180,    16,   178,   173,
     179,     0,    83,    10,   190,     0,    85,    10,   190,     0,
       0,    37,   181,   127,     0,   182,     0,   181,   182,     0,
       4,     0,   130,     4,     0,    77,    37,   133,   127,     0,
      78,    37,   185,   127,     0,    78,    37,   127,     0,   185,
     173,   133,     0,   133,     0,    79,    37,   187,   127,     0,
     187,   173,   133,     0,     0,    80,     0,    81,     0,     0,
       4,   189,     0,     4,   125,   189,     0,     0,   191,   192,
       0,    31,   192,     0,    37,   192,   127,     0,    71,    37,
     192,   127,     0,   130,   192,     0,    30,   192,     0,   131,
     192,     0,   192,    32,   192,     0,   192,    33,   192,     0,
     192,    34,   192,     0,   192,    30,   192,     0,   192,    31,
     192,     0,   192,    28,   192,     0,   192,    29,   192,     0,
     192,    22,   192,     0,   192,    23,   192,     0,   192,    26,
     192,     0,   192,    27,   192,     0,   192,    24,   192,     0,
     192,    25,   192,     0,   192,    21,   192,     0,   192,    20,
     192,     0,   192,    19,   192,     0,   192,    15,   192,    16,
     192,     0,   192,    18,   192,     0,   192,    17,   192,     0,
      66,    37,     4,   127,     0,     3,     0,    53,     0,    72,
      37,     4,   127,     0,    73,    37,     4,   127,     0,    74,
      37,     4,   127,     0,    98,    37,   192,   127,     0,    38,
      37,   192,   127,     0,    38,    37,   192,   125,   192,   127,
       0,    49,    37,   192,   125,   192,   127,     0,    50,    37,
     192,   127,     0,    39,    37,   192,   127,     0,     4,     0,
      75,    37,   192,   125,   192,   127,     0,    76,    37,   192,
     125,   192,   127,     0,   104,    37,   192,   125,     4,   127,
       0,    92,    25,     4,     0,     0,    92,    37,   192,   127,
       0,     0,    93,    37,   192,   127,     0,     0,     0,     0,
       0,     0,     0,     4,   197,   211,   194,   195,   198,    51,
     199,   166,    52,   200,   214,   193,   215,   169,   201,   173,
       0,     0,     0,     0,     0,     0,    65,   202,   212,   213,
     194,   195,   203,    51,   204,   216,    52,   205,   214,   193,
     215,   169,   206,   173,     0,     0,     0,    88,   207,   211,
     208,    51,   154,    52,     0,    61,     0,    62,     0,    63,
       0,    64,     0,    65,     0,    37,   209,   127,     0,     0,
      37,   127,     0,   192,   210,    16,     0,   210,    16,     0,
      40,    37,   192,   127,   210,    16,     0,    40,    37,   192,
     127,    39,    37,   192,   127,   210,    16,     0,   192,    16,
       0,    16,     0,     0,    82,     0,    25,     4,     0,     0,
       0,   215,    16,     4,     0,     0,     0,     0,     0,   216,
       4,   217,    51,   166,    52,   218,   215,   169,   219,   173,
       0,    47,    51,   221,    52,     0,     0,   221,   222,     0,
       0,     0,     4,   223,   225,   226,   224,   126,     0,   192,
       0,     0,     4,   227,   226,     0,    92,    37,   192,   127,
     226,     0,     0,    37,   192,   127,     0,     0,   229,   232,
       0,     0,   231,   121,    51,   232,    52,     0,   233,     0,
     232,   233,     0,    51,   235,    52,   126,     0,   117,    51,
     235,    52,   126,     0,   117,    51,   235,    52,   234,   126,
       0,   117,     0,   234,   117,     0,     0,   236,   126,     0,
     119,    16,   236,   126,     0,   120,    16,   236,   126,     0,
     119,    16,   236,   126,   120,    16,   236,   126,     0,   118,
       0,   236,   126,   118,     0,     0,   236,   126,   115,     4,
      51,   237,   236,   239,    52,     0,     0,   115,     4,    51,
     238,   236,   239,    52,     0,     0,   126,     0
d399 21
a419 22
     370,   375,   379,   381,   382,   385,   388,   389,   389,   396,
     401,   405,   411,   418,   424,   430,   438,   447,   458,   467,
     478,   487,   491,   497,   499,   499,   505,   507,   511,   512,
     517,   522,   523,   528,   534,   536,   539,   541,   544,   547,
     549,   551,   553,   557,   567,   570,   573,   576,   578,   580,
     582,   584,   586,   588,   593,   593,   597,   602,   610,   617,
     618,   621,   625,   627,   628,   632,   632,   639,   647,   656,
     659,   662,   664,   667,   670,   674,   679,   681,   685,   688,
     693,   695,   698,   701,   704,   708,   713,   722,   733,   733,
     738,   741,   743,   745,   747,   749,   752,   754,   756,   758,
     760,   762,   764,   766,   768,   770,   772,   774,   776,   778,
     780,   782,   784,   786,   788,   790,   792,   794,   797,   799,
     801,   803,   805,   807,   809,   811,   813,   815,   817,   819,
     821,   826,   828,   831,   833,   836,   838,   841,   841,   841,
     841,   841,   841,   860,   860,   860,   860,   860,   860,   878,
     878,   878,   891,   893,   894,   895,   896,   899,   901,   902,
     905,   907,   908,   913,   917,   919,   922,   925,   929,   932,
     935,   940,   953,   955,   955,   955,   955,   971,   975,   977,
     980,   980,   980,   990,  1034,  1039,  1051,  1058,  1063,  1071,
    1071,  1085,  1085,  1095,  1097,  1100,  1105,  1109,  1115,  1120,
    1126,  1131,  1135,  1139,  1143,  1149,  1154,  1158,  1158,  1168,
    1168,  1180,  1182
d443 5
a447 5
  "ALIGNMOD", "AT", "SUBALIGN", "PROVIDE", "CHIP", "LIST", "SECT", 
  "ABSOLUTE", "LOAD", "NEWLINE", "ENDWORD", "ORDER", "NAMEWORD", 
  "ASSERT_K", "FORMAT", "PUBLIC", "BASE", "ALIAS", "TRUNCATE", "REL", 
  "INPUT_SCRIPT", "INPUT_MRI_SCRIPT", "INPUT_DEFSYM", "CASE", "EXTERN", 
  "START", "VERS_TAG", "VERS_IDENTIFIER", "GLOBAL", "LOCAL", "VERSIONK", 
d454 1
a454 1
  "statement_anywhere", "@@7", "wildcard_name", "wildcard_spec", 
d456 1
a456 1
  "input_section_spec", "@@8", "statement", "statement_list", 
d459 1
a459 1
  "memory_spec", "@@9", "origin_spec", "length_spec", "attributes_opt", 
d463 9
a471 9
  "nocrossref_list", "mustbe_exp", "@@10", "exp", "memspec_at_opt", 
  "opt_at", "opt_subalign", "section", "@@11", "@@12", "@@13", "@@14", "@@15", 
  "@@16", "@@17", "@@18", "@@19", "@@20", "@@21", "@@22", "type", "atype", 
  "opt_exp_with_type", "opt_exp_without_type", "opt_nocrossrefs", 
  "memspec_opt", "phdr_opt", "overlay_section", "@@23", "@@24", "@@25", 
  "phdrs", "phdr_list", "phdr", "@@26", "@@27", "phdr_type", 
  "phdr_qualifiers", "phdr_val", "version_script_file", "@@28", "version", 
  "@@29", "vers_nodes", "vers_node", "verdep", "vers_tag", "vers_defns", 
  "@@30", "@@31", "opt_semicolon", 0
d478 30
a507 31
       0,   132,   132,   132,   132,   133,   135,   134,   137,   136,
     138,   138,   139,   139,   139,   139,   139,   139,   139,   139,
     139,   139,   139,   139,   139,   139,   139,   139,   139,   139,
     139,   139,   139,   139,   139,   139,   139,   139,   140,   139,
     139,   139,   141,   141,   141,   142,   142,   143,   143,   144,
     144,   144,   145,   145,   145,   147,   146,   148,   148,   149,
     149,   149,   149,   149,   149,   149,   149,   149,   149,   149,
     149,   149,   149,   149,   149,   149,   149,   149,   150,   149,
     149,   151,   149,   149,   149,   152,   152,   152,   152,   152,
     152,   153,   154,   154,   154,   155,   155,   156,   155,   157,
     157,   157,   158,   158,   158,   158,   159,   159,   160,   160,
     161,   161,   161,   162,   163,   162,   164,   164,   164,   164,
     164,   164,   164,   164,   165,   165,   166,   166,   167,   167,
     167,   167,   167,   168,   169,   169,   170,   170,   170,   170,
     170,   170,   170,   170,   171,   171,   172,   172,   172,   173,
     173,   174,   175,   175,   175,   177,   176,   178,   179,   180,
     180,   181,   181,   182,   182,   183,   184,   184,   185,   185,
     186,   187,   187,   188,   188,   189,   189,   189,   191,   190,
     192,   192,   192,   192,   192,   192,   192,   192,   192,   192,
     192,   192,   192,   192,   192,   192,   192,   192,   192,   192,
     192,   192,   192,   192,   192,   192,   192,   192,   192,   192,
     192,   192,   192,   192,   192,   192,   192,   192,   192,   192,
     192,   193,   193,   194,   194,   195,   195,   197,   198,   199,
     200,   201,   196,   202,   203,   204,   205,   206,   196,   207,
     208,   196,   209,   209,   209,   209,   209,   210,   210,   210,
     211,   211,   211,   211,   212,   212,   213,   213,   214,   214,
     215,   215,   216,   217,   218,   219,   216,   220,   221,   221,
     223,   224,   222,   225,   226,   226,   226,   227,   227,   229,
     228,   231,   230,   232,   232,   233,   233,   233,   234,   234,
     235,   235,   235,   235,   235,   236,   236,   237,   236,   238,
     236,   239,   239
d522 10
a531 10
       2,     4,     2,     2,     0,     4,     2,     0,     7,     1,
       1,     1,     1,     5,     4,     8,     2,     1,     3,     1,
       1,     3,     4,     1,     0,     5,     2,     1,     1,     1,
       4,     1,     4,     4,     2,     1,     0,     1,     1,     1,
       1,     1,     1,     1,     2,     0,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     3,     3,     6,     1,
       0,     5,     2,     3,     0,     0,     7,     3,     3,     0,
       3,     1,     2,     1,     2,     4,     4,     3,     3,     1,
       4,     3,     0,     1,     1,     0,     2,     3,     0,     2,
       2,     3,     4,     2,     2,     2,     3,     3,     3,     3,
d533 10
a542 11
       3,     3,     5,     3,     3,     4,     1,     1,     4,     4,
       4,     4,     4,     6,     6,     4,     4,     1,     6,     6,
       6,     3,     0,     4,     0,     4,     0,     0,     0,     0,
       0,     0,    17,     0,     0,     0,     0,     0,    18,     0,
       0,     7,     1,     1,     1,     1,     1,     3,     0,     2,
       3,     2,     6,    10,     2,     1,     0,     1,     2,     0,
       0,     3,     0,     0,     0,     0,    11,     4,     0,     2,
       0,     0,     6,     1,     0,     3,     5,     0,     3,     0,
       2,     0,     5,     1,     2,     4,     5,     6,     1,     2,
       0,     2,     4,     4,     8,     1,     3,     0,     9,     0,
       7,     0,     1
d550 2
a551 2
       0,    55,     8,     6,   279,     1,    58,     2,    11,     4,
       0,     3,     0,    56,     9,     0,   290,     0,   280,   283,
d553 18
a570 18
       0,     0,     0,     0,     0,     0,   173,   174,     0,     0,
      78,     0,     0,    97,     0,    68,    57,    60,    66,     0,
      59,    62,    63,    64,    65,    61,    67,     0,    14,     0,
       0,     0,     0,    15,     0,     0,     0,    17,    44,     0,
       0,     0,     0,     0,     0,    49,     0,     0,     0,     0,
       0,   295,     0,     0,     0,     0,   290,   284,   136,   137,
     138,   139,   178,   140,   141,   142,   143,   178,    94,   268,
       0,     0,     5,    81,     0,     0,     0,     0,     0,     0,
       0,   172,   175,     0,     0,     0,     0,     0,     0,   145,
     144,    96,     0,     0,    38,     0,   206,   217,     0,     0,
       0,     0,     0,     0,     0,   207,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    12,     0,    47,
      29,    45,    30,    16,    31,    21,     0,    34,     0,    35,
      50,    36,    52,    37,    40,    10,     7,     0,     0,     0,
       0,   291,     0,   146,     0,   147,     0,     0,     0,     0,
      58,   155,   154,     0,     0,     0,     0,     0,   167,   169,
     150,   150,   175,     0,    85,    88,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    11,     0,     0,   184,   180,
d572 1
a572 1
       0,     0,     0,     0,   183,   185,     0,     0,     0,     0,
d574 38
a611 39
       0,     0,     0,     0,     0,     0,     0,     0,    23,     0,
       0,    43,     0,     0,     0,    20,     0,     0,    53,     0,
     299,     0,     0,   285,     0,   296,     0,   179,   227,    91,
     233,   239,    93,    92,   270,   267,   269,     0,    72,    74,
     281,   159,     0,    69,    70,    80,    95,   165,   149,   166,
       0,   170,     0,   175,   176,    83,    87,    90,     0,    77,
       0,    71,   178,     0,    84,     0,    25,    26,    41,    27,
      28,   181,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   204,   203,   201,   200,
     199,   193,   194,   197,   198,   195,   196,   191,   192,   189,
     190,   186,   187,   188,    13,    24,    22,    48,    46,    42,
      18,    19,    33,    32,    51,    54,     0,   292,   293,     0,
     288,   286,     0,   248,     0,   248,     0,     0,    82,     0,
       0,   151,     0,   152,   168,   171,   177,    86,    89,    79,
       0,     0,   282,    39,     0,   212,   216,     0,   215,   205,
     182,   208,   209,   210,     0,     0,   211,     0,     0,   301,
       0,   297,   289,   287,     0,     0,   248,     0,   224,   255,
       0,   256,   240,   273,   274,     0,   163,     0,     0,   161,
       0,   153,   148,     0,     0,     0,     0,     0,     0,   202,
     302,     0,     0,     0,   242,   243,   244,   245,   246,   249,
       0,     0,     0,     0,   251,     0,   226,   254,   257,   224,
       0,   277,     0,   271,     0,   164,   160,   162,     0,   150,
      98,   213,   214,   218,   219,   220,   300,     0,   301,   247,
       0,   250,     0,     0,   228,   226,    94,     0,   274,     0,
       0,    73,   178,     0,   294,     0,   248,     0,     0,     0,
     234,     0,     0,   275,     0,   272,   157,     0,   156,   298,
       0,     0,   223,     0,   229,     0,   241,   278,   274,   178,
       0,   252,   225,   126,   235,   276,   158,     0,   110,   101,
     100,   128,   129,   130,   131,   132,     0,     0,   117,   119,
       0,     0,   118,     0,   102,     0,   113,   121,   125,   127,
       0,     0,     0,   262,   248,     0,   178,   114,     0,    99,
       0,   109,   150,     0,   124,   230,   178,   116,     0,     0,
       0,     0,     0,     0,   133,     0,   107,     0,     0,   111,
       0,   150,   259,     0,   263,   236,   253,   120,     0,   104,
     123,    99,     0,     0,   106,   108,   112,     0,   222,   122,
       0,   259,     0,   115,   103,   258,     0,   260,   126,   222,
       0,     0,   135,     0,   260,     0,   221,   178,     0,   231,
     264,   135,   105,   134,   261,   150,   260,   237,   232,   135,
     150,   265,   238,   150,   266,     0,     0,     0
d616 11
a626 11
     625,   103,     9,    10,     7,     8,    14,    78,   205,   153,
     152,   150,   161,   163,     5,     6,    13,    46,   114,   180,
     196,    47,   176,    48,   117,   534,   535,   567,   552,   536,
     537,   565,   538,   539,   540,   541,   563,   609,    97,   121,
      49,   570,    50,   282,   182,   281,   459,   498,   370,   418,
     419,    51,    52,   190,    53,   191,    54,   193,   564,   174,
     210,   597,   446,   474,   273,   363,   489,   513,   572,   615,
     364,   505,   543,   591,   620,   365,   450,   440,   407,   408,
     411,   449,   588,   602,   558,   590,   616,   623,    55,   177,
     276,   366,   480,   414,   453,   478,    11,    12,    56,    57,
      18,    19,   362,    84,    85,   433,   356,   431
d631 62
a692 63
     114,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
      48,-32768,   -20,   585,   699,    50,   113,    43,   -20,-32768,
     467,    52,   106,   158,-32768,   162,-32768,   204,   163,   180,
     184,   193,   218,   231,   245,   247,-32768,-32768,   250,   251,
  -32768,   253,   254,-32768,   255,-32768,-32768,-32768,-32768,   145,
  -32768,-32768,-32768,-32768,-32768,-32768,-32768,   173,-32768,   291,
     204,   293,   520,-32768,   294,   295,   296,-32768,-32768,   302,
     304,   305,   520,   315,   319,   320,   321,   323,   228,   520,
     325,-32768,   314,   316,   279,   209,   113,-32768,-32768,-32768,
  -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
     332,   334,-32768,-32768,   335,   338,   204,   204,   339,   204,
      17,-32768,   340,   271,   308,   204,   342,   313,   321,-32768,
  -32768,-32768,   300,     5,-32768,    23,-32768,-32768,   520,   520,
     520,   317,   324,   327,   328,-32768,   329,   330,   333,   337,
     341,   350,   351,   352,   355,   520,   520,  1180,    33,-32768,
     227,-32768,   232,    16,-32768,-32768,   310,  1398,   233,-32768,
  -32768,   237,-32768,    31,-32768,-32768,  1398,   318,   -71,   -71,
     230,    10,   301,-32768,   520,-32768,    28,    26,    -4,   244,
  -32768,-32768,-32768,   248,   252,   266,   267,   268,-32768,-32768,
       2,    93,    65,   269,-32768,-32768,    22,   271,   282,   362,
     520,    73,   -20,   520,   520,-32768,   520,   520,-32768,-32768,
     847,   520,   520,   520,   520,   373,   520,   406,   408,   409,
     520,   520,   520,   520,-32768,-32768,   520,   520,   520,   520,
     520,   520,   520,   520,   520,   520,   520,   520,   520,   520,
     520,   520,   520,   520,   520,   520,   520,   520,  1398,   411,
     417,-32768,   418,   520,   520,  1398,   275,   419,-32768,   420,
  -32768,   299,   306,-32768,   422,-32768,   -88,  1398,   467,-32768,
  -32768,-32768,-32768,-32768,-32768,-32768,-32768,   426,-32768,-32768,
     666,   394,    62,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
     204,-32768,   204,   340,-32768,-32768,-32768,-32768,   276,-32768,
      69,-32768,-32768,  1200,-32768,     7,  1398,  1398,   725,  1398,
    1398,-32768,   827,   867,  1220,   887,   307,   907,   311,   312,
     343,  1240,  1289,   938,  1309,  1352,   582,  1269,  1415,  1429,
    1442,  1029,  1029,   429,   429,   429,   429,   210,   210,   220,
     220,-32768,-32768,-32768,  1398,  1398,  1398,-32768,-32768,-32768,
    1398,  1398,-32768,-32768,-32768,-32768,   -71,   -39,    10,   386,
  -32768,-32768,   -78,   416,   468,   416,   520,   326,-32768,     4,
     427,-32768,   335,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
     356,   438,-32768,-32768,   520,-32768,-32768,   520,-32768,-32768,
  -32768,-32768,-32768,-32768,   520,   520,-32768,   440,   520,   322,
     434,-32768,-32768,-32768,   185,   415,  1329,   451,   353,-32768,
    1372,   403,-32768,  1398,    19,   464,-32768,   482,     8,-32768,
     410,-32768,-32768,   367,   958,   978,   998,  1018,   368,  1398,
      10,   444,   -71,   -71,-32768,-32768,-32768,-32768,-32768,-32768,
     370,   520,   142,   484,-32768,   465,   423,-32768,-32768,   353,
     450,   466,   471,-32768,   377,-32768,-32768,-32768,   499,   385,
  -32768,-32768,-32768,-32768,-32768,-32768,-32768,   387,   322,-32768,
    1049,-32768,   520,   474,-32768,   423,-32768,   520,    19,   520,
     389,-32768,-32768,   437,    10,   460,   225,  1069,   520,   475,
  -32768,   303,  1089,-32768,  1109,-32768,-32768,   509,-32768,-32768,
     488,   511,-32768,  1129,-32768,   477,-32768,-32768,    19,-32768,
     520,-32768,-32768,   533,-32768,-32768,-32768,  1160,   392,-32768,
  -32768,-32768,-32768,-32768,-32768,-32768,   492,   493,-32768,-32768,
     494,   495,-32768,   197,-32768,   496,-32768,-32768,-32768,   533,
     483,   501,   145,-32768,   508,   187,-32768,-32768,    86,-32768,
     512,-32768,   -64,   197,-32768,-32768,-32768,-32768,    36,   536,
     428,   516,   433,   435,-32768,    85,-32768,     9,    87,-32768,
     197,   140,   529,   436,-32768,-32768,-32768,-32768,    86,-32768,
  -32768,   441,   452,    86,-32768,-32768,-32768,   532,   469,-32768,
     505,   529,    13,-32768,-32768,-32768,   539,-32768,   533,   469,
      86,   563,   110,   519,-32768,   453,-32768,-32768,   578,-32768,
  -32768,   110,-32768,-32768,-32768,   385,-32768,-32768,-32768,   110,
     385,-32768,-32768,   385,-32768,   583,   584,-32768
d697 11
a707 11
  -32768,   -53,-32768,-32768,-32768,-32768,   380,-32768,-32768,-32768,
  -32768,-32768,-32768,   470,-32768,-32768,   407,-32768,-32768,-32768,
     393,-32768,   121,  -174,-32768,  -282,  -478,    42,    68,    57,
  -32768,-32768,    89,-32768,    27,-32768,    29,  -569,-32768,    84,
    -488,  -187,-32768,-32768,  -260,-32768,-32768,-32768,-32768,-32768,
     211,-32768,-32768,-32768,-32768,-32768,-32768,  -178,   -92,-32768,
     -61,    34,   181,   159,-32768,-32768,-32768,-32768,-32768,-32768,
  -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,  -390,   270,
  -32768,-32768,    46,  -570,-32768,-32768,-32768,-32768,-32768,-32768,
  -32768,-32768,-32768,-32768,  -459,-32768,-32768,-32768,-32768,-32768,
     443,   -12,-32768,   552,  -159,-32768,-32768,   178
d711 1
a711 1
#define	YYLAST		1476
d716 67
a782 111
     173,   147,   272,   290,   292,   175,    87,   124,   416,   261,
     262,   157,   416,   549,   294,   203,   443,   549,   166,   493,
     251,   102,   373,   451,   519,   542,   296,   297,   519,   360,
     274,    16,   268,   206,   611,   258,   126,   127,   361,   402,
     574,   520,   617,   246,    80,   520,   619,    81,   403,   515,
     621,   542,    15,   184,   185,   551,   187,   189,    16,   382,
      79,   288,   198,   128,   129,   569,   181,   208,   209,   192,
     130,   131,   132,   296,   297,   551,   264,   258,   275,   265,
     269,   400,   133,   134,   224,   225,   135,   248,   575,   581,
     549,   549,   585,   270,    86,   255,   501,    17,    32,   136,
     519,   519,   519,    98,   137,   138,   139,   140,   141,   142,
     542,   452,   421,   267,   371,   376,   271,   520,   520,   520,
     607,   277,    42,   278,    17,   264,   608,   288,   265,   289,
     204,   143,    43,   550,   417,   456,   583,   144,   417,   303,
     600,   252,   306,   307,   188,   309,   310,   298,   207,   299,
     312,   313,   314,   315,   559,   317,   259,    99,   247,   321,
     322,   323,   324,   145,   146,   325,   326,   327,   328,   329,
     330,   331,   332,   333,   334,   335,   336,   337,   338,   339,
     340,   341,   342,   343,   344,   345,   346,   372,   126,   127,
     293,   549,   350,   351,   298,   100,   379,   399,   259,   101,
     304,   549,   519,   434,   435,   436,   437,   438,   102,   531,
     380,   561,   519,   533,   104,   128,   129,   105,   288,   520,
     291,   106,   130,   131,   132,     1,     2,     3,    80,   520,
     107,    81,    82,    83,   133,   134,     4,   374,   135,   375,
     240,   241,   242,   243,   244,   550,   434,   435,   436,   437,
     438,   136,   242,   243,   244,   108,   137,   138,   139,   140,
     141,   142,   442,   562,   500,   288,   566,   586,   109,   439,
     119,   120,   483,   467,   468,   194,   195,   560,   352,   353,
     377,   378,   110,   143,   111,   584,   562,   112,   113,   144,
     115,   116,   118,    87,   122,   123,   566,   125,   148,   149,
     151,   594,   406,   410,   406,   413,   154,   268,   155,   156,
     584,   561,   439,   126,   127,   145,   146,   272,   605,   158,
     253,   531,   159,   424,   160,   162,   425,   164,   165,   167,
     168,   170,   169,   426,   427,   171,   178,   429,   179,   181,
     128,   129,   183,   186,   192,   197,   199,   130,   131,   132,
     200,   202,   249,   266,   211,   506,   263,   250,   256,   133,
     134,   212,   257,   135,   213,   214,   215,   216,   270,   260,
     217,   279,   302,    32,   218,   283,   136,   316,   219,   284,
     470,   137,   138,   139,   140,   141,   142,   220,   221,   222,
     496,   271,   223,   285,   286,   287,   295,    42,    88,    89,
      90,    91,    92,    93,    94,    95,    96,    43,   143,   301,
     318,   487,   319,   320,   144,   347,   492,   516,   494,   126,
     127,   348,   349,   354,   355,   357,   359,   503,   618,   -99,
     367,   369,   358,   622,   389,   254,   624,   401,   391,   392,
     145,   146,   423,   420,   428,   445,   128,   129,   430,   517,
     432,   415,   441,   404,   131,   132,   405,   238,   239,   240,
     241,   242,   243,   244,   573,   133,   134,   444,   454,   135,
     393,   126,   127,    88,    89,    90,    91,    92,    93,    94,
      95,    96,   136,   422,   409,   448,   455,   137,   138,   139,
     140,   141,   142,   458,   460,   465,   466,   469,   128,   129,
     471,   476,   472,   477,   481,   130,   131,   132,   479,   482,
     288,   488,   499,   484,   143,   495,   473,   133,   134,   509,
     144,   135,   497,   126,   127,   510,   504,   511,   514,   545,
     546,   547,   548,   553,   136,   555,   595,   518,   556,   137,
     138,   139,   140,   141,   142,   442,   145,   146,   519,   568,
     128,   129,   576,   578,   587,   577,   598,   130,   131,   132,
     579,   596,   580,   589,   601,   520,   143,   606,  -110,   133,
     134,   610,   144,   135,   521,   522,   523,   524,   525,   593,
     612,   526,   614,   626,   627,   308,   136,   280,   201,    20,
     300,   137,   138,   139,   140,   141,   142,   491,   145,   146,
     228,   229,   230,   231,   232,   233,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   527,   143,   528,
     592,   571,   582,   529,   144,   603,   557,    42,   554,   457,
     475,    21,    22,   604,   490,   412,   613,   599,   172,    23,
      24,    25,    26,    27,    28,   305,   485,     0,     0,     0,
     145,   146,    29,    30,    31,    32,   530,   531,     0,   532,
       0,   533,    33,    34,    35,    36,    37,    38,     0,     0,
      20,     0,    39,    40,    41,     0,     0,     0,     0,    42,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    43,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      44,     0,   368,    58,     0,     0,  -281,     0,     0,     0,
       0,    45,    21,    22,     0,     0,     0,     0,     0,     0,
      23,    24,    25,    26,    27,    28,     0,     0,     0,    58,
       0,     0,     0,    29,    30,    31,    32,    59,     0,     0,
       0,     0,     0,    33,    34,    35,    36,    37,    38,     0,
       0,     0,     0,    39,    40,    41,     0,    60,     0,     0,
      42,   383,     0,    59,     0,     0,     0,     0,     0,     0,
      43,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    44,     0,    60,     0,     0,     0,     0,     0,     0,
      61,     0,    45,     0,    62,    63,    64,    65,    66,   -41,
      67,    68,    69,     0,    70,    71,    72,    73,    74,     0,
       0,     0,     0,    75,    76,    77,    61,     0,     0,     0,
      62,    63,    64,    65,    66,     0,    67,    68,    69,     0,
      70,    71,    72,    73,    74,     0,     0,     0,     0,    75,
      76,    77,   226,     0,   227,   228,   229,   230,   231,   232,
     233,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   226,     0,   227,   228,   229,   230,   231,   232,
     233,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   226,     0,   227,   228,   229,   230,   231,   232,
     233,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   226,     0,   227,   228,   229,   230,   231,   232,
     233,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   226,     0,   227,   228,   229,   230,   231,   232,
     233,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   384,   226,   385,   227,   228,   229,   230,   231,
     232,   233,   234,   235,   236,   237,   238,   239,   240,   241,
     242,   243,   244,   226,   311,   227,   228,   229,   230,   231,
     232,   233,   234,   235,   236,   237,   238,   239,   240,   241,
     242,   243,   244,   226,   386,   227,   228,   229,   230,   231,
     232,   233,   234,   235,   236,   237,   238,   239,   240,   241,
     242,   243,   244,   226,   388,   227,   228,   229,   230,   231,
     232,   233,   234,   235,   236,   237,   238,   239,   240,   241,
     242,   243,   244,   226,   390,   227,   228,   229,   230,   231,
     232,   233,   234,   235,   236,   237,   238,   239,   240,   241,
     242,   243,   244,   234,   235,   236,   237,   238,   239,   240,
     241,   242,   243,   244,   226,   396,   227,   228,   229,   230,
     231,   232,   233,   234,   235,   236,   237,   238,   239,   240,
     241,   242,   243,   244,   226,   461,   227,   228,   229,   230,
     231,   232,   233,   234,   235,   236,   237,   238,   239,   240,
     241,   242,   243,   244,   226,   462,   227,   228,   229,   230,
d784 13
a796 1
     241,   242,   243,   244,   226,   463,   227,   228,   229,   230,
d798 53
a850 4
     241,   242,   243,   244,   226,   464,   227,   228,   229,   230,
     231,   232,   233,   234,   235,   236,   237,   238,   239,   240,
     241,   242,   243,   244,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   226,   486,   227,   228,   229,
d852 6
a857 18
     240,   241,   242,   243,   244,   226,   502,   227,   228,   229,
     230,   231,   232,   233,   234,   235,   236,   237,   238,   239,
     240,   241,   242,   243,   244,   226,   507,   227,   228,   229,
     230,   231,   232,   233,   234,   235,   236,   237,   238,   239,
     240,   241,   242,   243,   244,   226,   508,   227,   228,   229,
     230,   231,   232,   233,   234,   235,   236,   237,   238,   239,
     240,   241,   242,   243,   244,   226,   512,   227,   228,   229,
     230,   231,   232,   233,   234,   235,   236,   237,   238,   239,
     240,   241,   242,   243,   244,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   544,   229,   230,
     231,   232,   233,   234,   235,   236,   237,   238,   239,   240,
     241,   242,   243,   244,   226,   245,   227,   228,   229,   230,
     231,   232,   233,   234,   235,   236,   237,   238,   239,   240,
     241,   242,   243,   244,   226,   381,   227,   228,   229,   230,
     231,   232,   233,   234,   235,   236,   237,   238,   239,   240,
     241,   242,   243,   244,   226,   387,   227,   228,   229,   230,
     231,   232,   233,   234,   235,   236,   237,   238,   239,   240,
     241,   242,   243,   244,     0,   394,   442,   226,   398,   227,
d859 2
a860 10
     238,   239,   240,   241,   242,   243,   244,   226,   447,   227,
     228,   229,   230,   231,   232,   233,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,     0,     0,     0,
       0,     0,     0,   226,   395,   227,   228,   229,   230,   231,
     232,   233,   234,   235,   236,   237,   238,   239,   240,   241,
     242,   243,   244,     0,   397,   230,   231,   232,   233,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     231,   232,   233,   234,   235,   236,   237,   238,   239,   240,
     241,   242,   243,   244,   232,   233,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244
d865 111
a975 118
      92,    62,   176,   190,   191,    97,    18,    60,     4,   168,
     169,    72,     4,     4,   192,    10,   406,     4,    79,   478,
       4,     4,   282,     4,    15,   513,     4,     5,    15,   117,
       4,    51,     4,    10,   604,     4,     3,     4,   126,   117,
       4,    32,   611,    10,   115,    32,   616,   118,   126,   508,
     619,   539,     4,   106,   107,   533,   109,   110,    51,    52,
      10,   125,   115,    30,    31,   129,     4,   128,   129,     4,
      37,    38,    39,     4,     5,   553,   115,     4,    52,   118,
      52,   120,    49,    50,   145,   146,    53,   148,    52,     4,
       4,     4,   570,    65,    51,   156,   486,   117,    70,    66,
      15,    15,    15,    51,    71,    72,    73,    74,    75,    76,
     598,    92,   372,   174,    52,   293,    88,    32,    32,    32,
      10,   125,    94,   127,   117,   115,    16,   125,   118,   127,
     125,    98,   104,    48,   130,   127,   127,   104,   130,   200,
     127,   125,   203,   204,   127,   206,   207,   125,   125,   127,
     211,   212,   213,   214,   544,   216,   125,    51,   125,   220,
     221,   222,   223,   130,   131,   226,   227,   228,   229,   230,
     231,   232,   233,   234,   235,   236,   237,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   125,     3,     4,
     125,     4,   253,   254,   125,    37,   127,   356,   125,    37,
     127,     4,    15,    61,    62,    63,    64,    65,     4,   124,
     302,   124,    15,   128,    51,    30,    31,    37,   125,    32,
     127,    37,    37,    38,    39,   111,   112,   113,   115,    32,
      37,   118,   119,   120,    49,    50,   122,   290,    53,   292,
      30,    31,    32,    33,    34,    48,    61,    62,    63,    64,
      65,    66,    32,    33,    34,    37,    71,    72,    73,    74,
      75,    76,    37,   545,    39,   125,   548,   127,    37,   127,
     125,   126,   459,   432,   433,     4,     5,    90,     3,     4,
       4,     5,    37,    98,    37,   567,   568,    37,    37,   104,
      37,    37,    37,   305,   121,     4,   578,     4,     4,     4,
       4,   583,   363,   364,   365,   366,     4,     4,     4,     4,
     592,   124,   127,     3,     4,   130,   131,   491,   600,     4,
      10,   124,     3,   384,     4,     4,   387,     4,   100,     4,
      16,    52,    16,   394,   395,   126,     4,   398,     4,     4,
      30,    31,     4,     4,     4,    37,     4,    37,    38,    39,
      37,    51,   125,    52,    37,    52,   126,   125,   125,    49,
      50,    37,   125,    53,    37,    37,    37,    37,    65,    51,
      37,   127,    10,    70,    37,   127,    66,     4,    37,   127,
     441,    71,    72,    73,    74,    75,    76,    37,    37,    37,
     482,    88,    37,   127,   127,   127,   127,    94,     6,     7,
       8,     9,    10,    11,    12,    13,    14,   104,    98,   127,
       4,   472,     4,     4,   104,     4,   477,   509,   479,     3,
       4,     4,     4,     4,     4,   126,     4,   488,   615,    37,
       4,    37,   126,   620,   127,   125,   623,    51,   127,   127,
     130,   131,     4,    16,     4,    92,    30,    31,   126,   510,
      16,   125,    37,    37,    38,    39,    40,    28,    29,    30,
      31,    32,    33,    34,   556,    49,    50,    16,     4,    53,
     127,     3,     4,     6,     7,     8,     9,    10,    11,    12,
      13,    14,    66,   127,    16,    82,     4,    71,    72,    73,
      74,    75,    76,    83,   127,   127,    52,   127,    30,    31,
      16,    51,    37,    37,   127,    37,    38,    39,    37,    10,
     125,    37,    52,   126,    98,   126,    93,    49,    50,    10,
     104,    53,    85,     3,     4,    37,    51,    16,    51,    37,
      37,    37,    37,    37,    66,    52,     4,     4,    37,    71,
      72,    73,    74,    75,    76,    37,   130,   131,    15,    37,
      30,    31,    16,    37,    25,   127,    51,    37,    38,    39,
     127,    92,   127,   127,    25,    32,    98,     4,   127,    49,
      50,    52,   104,    53,    41,    42,    43,    44,    45,   127,
     127,    48,     4,     0,     0,   205,    66,   180,   118,     4,
     197,    71,    72,    73,    74,    75,    76,   476,   130,   131,
      18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    33,    34,    84,    98,    86,
     578,   553,   565,    90,   104,   598,   542,    94,   539,   418,
     449,    46,    47,   599,   475,   365,   607,   591,    86,    54,
      55,    56,    57,    58,    59,   202,   468,    -1,    -1,    -1,
     130,   131,    67,    68,    69,    70,   123,   124,    -1,   126,
      -1,   128,    77,    78,    79,    80,    81,    82,    -1,    -1,
       4,    -1,    87,    88,    89,    -1,    -1,    -1,    -1,    94,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   104,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     115,    -1,    36,     4,    -1,    -1,   121,    -1,    -1,    -1,
      -1,   126,    46,    47,    -1,    -1,    -1,    -1,    -1,    -1,
      54,    55,    56,    57,    58,    59,    -1,    -1,    -1,     4,
      -1,    -1,    -1,    67,    68,    69,    70,    38,    -1,    -1,
      -1,    -1,    -1,    77,    78,    79,    80,    81,    82,    -1,
      -1,    -1,    -1,    87,    88,    89,    -1,    58,    -1,    -1,
      94,    36,    -1,    38,    -1,    -1,    -1,    -1,    -1,    -1,
     104,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   115,    -1,    58,    -1,    -1,    -1,    -1,    -1,    -1,
      91,    -1,   126,    -1,    95,    96,    97,    98,    99,   100,
     101,   102,   103,    -1,   105,   106,   107,   108,   109,    -1,
      -1,    -1,    -1,   114,   115,   116,    91,    -1,    -1,    -1,
      95,    96,    97,    98,    99,    -1,   101,   102,   103,    -1,
     105,   106,   107,   108,   109,    -1,    -1,    -1,    -1,   114,
     115,   116,    15,    -1,    17,    18,    19,    20,    21,    22,
      23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
      33,    34,    15,    -1,    17,    18,    19,    20,    21,    22,
      23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
      33,    34,    15,    -1,    17,    18,    19,    20,    21,    22,
      23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
      33,    34,    15,    -1,    17,    18,    19,    20,    21,    22,
      23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
      33,    34,    15,    -1,    17,    18,    19,    20,    21,    22,
      23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
      33,    34,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   125,    15,   127,    17,    18,    19,    20,    21,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
      32,    33,    34,    15,   127,    17,    18,    19,    20,    21,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
      32,    33,    34,    15,   127,    17,    18,    19,    20,    21,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
      32,    33,    34,    15,   127,    17,    18,    19,    20,    21,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
      32,    33,    34,    15,   127,    17,    18,    19,    20,    21,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
      32,    33,    34,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    33,    34,    15,   127,    17,    18,    19,    20,
      21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    33,    34,    15,   127,    17,    18,    19,    20,
      21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    33,    34,    15,   127,    17,    18,    19,    20,
      21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    33,    34,    15,   127,    17,    18,    19,    20,
      21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    33,    34,    15,   127,    17,    18,    19,    20,
      21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    15,   127,    17,    18,    19,
d977 1
a977 1
      30,    31,    32,    33,    34,    15,   127,    17,    18,    19,
d979 1
a979 1
      30,    31,    32,    33,    34,    15,   127,    17,    18,    19,
d981 1
a981 1
      30,    31,    32,    33,    34,    15,   127,    17,    18,    19,
d983 1
a983 1
      30,    31,    32,    33,    34,    15,   127,    17,    18,    19,
d986 12
a997 14
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   127,    19,    20,
      21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    33,    34,    15,   125,    17,    18,    19,    20,
      21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    33,    34,    15,   125,    17,    18,    19,    20,
      21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    33,    34,    15,   125,    17,    18,    19,    20,
      21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    33,    34,    -1,   125,    37,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    33,    34,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    33,    34,    -1,    -1,    -1,
      -1,    -1,    -1,    15,   125,    17,    18,    19,    20,    21,
d999 7
a1005 1
      32,    33,    34,    -1,   125,    20,    21,    22,    23,    24,
d1008 2
a1009 2
      31,    32,    33,    34,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    33,    34
d1907 1
a1907 1
{ ldfile_set_output_arch (yyvsp[-1].name, bfd_arch_unknown); }
d1978 1
a1978 10
#line 389 "ldgram.y"
{ldlex_expression ();}
    break;
case 98:
#line 390 "ldgram.y"
{ ldlex_popstate ();
		  lang_add_assignment (exp_assert (yyvsp[-3].etree, yyvsp[-1].name)); }
    break;
case 99:
#line 398 "ldgram.y"
d1983 2
a1984 2
case 100:
#line 402 "ldgram.y"
d1989 2
a1990 2
case 101:
#line 406 "ldgram.y"
d1995 2
a1996 2
case 102:
#line 413 "ldgram.y"
d2003 2
a2004 2
case 103:
#line 419 "ldgram.y"
d2011 2
a2012 2
case 104:
#line 425 "ldgram.y"
d2019 2
a2020 2
case 105:
#line 431 "ldgram.y"
d2027 2
a2028 2
case 106:
#line 440 "ldgram.y"
d2037 2
a2038 2
case 107:
#line 449 "ldgram.y"
d2047 2
a2048 2
case 108:
#line 460 "ldgram.y"
d2057 2
a2058 2
case 109:
#line 469 "ldgram.y"
d2067 2
a2068 2
case 110:
#line 480 "ldgram.y"
d2077 2
a2078 2
case 111:
#line 488 "ldgram.y"
d2083 2
a2084 2
case 112:
#line 492 "ldgram.y"
d2089 2
a2090 2
case 114:
#line 500 "ldgram.y"
d2093 2
a2094 2
case 115:
#line 502 "ldgram.y"
d2097 2
a2098 2
case 117:
#line 508 "ldgram.y"
d2103 2
a2104 2
case 119:
#line 513 "ldgram.y"
d2110 2
a2111 2
case 120:
#line 518 "ldgram.y"
d2117 2
a2118 2
case 122:
#line 524 "ldgram.y"
d2123 2
a2124 2
case 123:
#line 529 "ldgram.y"
d2129 8
d2138 1
a2138 1
#line 546 "ldgram.y"
d2142 1
a2142 1
#line 548 "ldgram.y"
d2146 1
a2146 1
#line 550 "ldgram.y"
d2150 1
a2150 9
#line 552 "ldgram.y"
{ yyval.integer = yyvsp[0].token; }
    break;
case 132:
#line 554 "ldgram.y"
{ yyval.integer = yyvsp[0].token; }
    break;
case 133:
#line 559 "ldgram.y"
d2158 2
a2159 2
case 134:
#line 569 "ldgram.y"
d2162 2
a2163 2
case 135:
#line 570 "ldgram.y"
d2166 2
a2167 2
case 136:
#line 575 "ldgram.y"
d2170 2
a2171 2
case 137:
#line 577 "ldgram.y"
d2174 2
a2175 2
case 138:
#line 579 "ldgram.y"
d2178 2
a2179 2
case 139:
#line 581 "ldgram.y"
d2182 2
a2183 2
case 140:
#line 583 "ldgram.y"
d2186 2
a2187 2
case 141:
#line 585 "ldgram.y"
d2190 2
a2191 2
case 142:
#line 587 "ldgram.y"
d2194 2
a2195 2
case 143:
#line 589 "ldgram.y"
d2198 2
a2199 2
case 146:
#line 599 "ldgram.y"
d2204 2
a2205 2
case 147:
#line 603 "ldgram.y"
d2214 2
a2215 2
case 148:
#line 611 "ldgram.y"
d2220 5
a2224 1
case 155:
a2225 4
{ region = lang_memory_region_lookup (yyvsp[0].name, TRUE); }
    break;
case 156:
#line 636 "ldgram.y"
d2228 2
a2229 2
case 157:
#line 641 "ldgram.y"
d2235 2
a2236 2
case 158:
#line 649 "ldgram.y"
d2243 2
a2244 2
case 159:
#line 658 "ldgram.y"
d2247 2
a2248 2
case 163:
#line 669 "ldgram.y"
d2251 2
a2252 2
case 164:
#line 671 "ldgram.y"
d2255 2
a2256 2
case 165:
#line 676 "ldgram.y"
d2259 2
a2260 2
case 167:
#line 682 "ldgram.y"
d2263 2
a2264 2
case 168:
#line 687 "ldgram.y"
d2267 2
a2268 2
case 169:
#line 689 "ldgram.y"
d2271 2
a2272 2
case 171:
#line 697 "ldgram.y"
d2275 2
a2276 2
case 173:
#line 703 "ldgram.y"
d2279 2
a2280 2
case 174:
#line 705 "ldgram.y"
d2283 2
a2284 2
case 175:
#line 710 "ldgram.y"
d2289 2
a2290 2
case 176:
#line 714 "ldgram.y"
d2300 2
a2301 2
case 177:
#line 723 "ldgram.y"
d2311 2
a2312 2
case 178:
#line 733 "ldgram.y"
d2315 2
a2316 2
case 179:
#line 735 "ldgram.y"
d2319 2
a2320 2
case 180:
#line 740 "ldgram.y"
d2323 2
a2324 2
case 181:
#line 742 "ldgram.y"
d2327 2
a2328 2
case 182:
#line 744 "ldgram.y"
d2331 2
a2332 2
case 183:
#line 746 "ldgram.y"
d2335 2
a2336 2
case 184:
#line 748 "ldgram.y"
d2339 2
a2340 2
case 185:
#line 750 "ldgram.y"
d2343 2
a2344 2
case 186:
#line 753 "ldgram.y"
d2347 2
a2348 2
case 187:
#line 755 "ldgram.y"
d2351 2
a2352 2
case 188:
#line 757 "ldgram.y"
d2355 2
a2356 2
case 189:
#line 759 "ldgram.y"
d2359 2
a2360 2
case 190:
#line 761 "ldgram.y"
d2363 2
a2364 2
case 191:
#line 763 "ldgram.y"
d2367 2
a2368 2
case 192:
#line 765 "ldgram.y"
d2371 2
a2372 2
case 193:
#line 767 "ldgram.y"
d2375 2
a2376 2
case 194:
#line 769 "ldgram.y"
d2379 2
a2380 2
case 195:
#line 771 "ldgram.y"
d2383 2
a2384 2
case 196:
#line 773 "ldgram.y"
d2387 2
a2388 2
case 197:
#line 775 "ldgram.y"
d2391 2
a2392 2
case 198:
#line 777 "ldgram.y"
d2395 2
a2396 2
case 199:
#line 779 "ldgram.y"
d2399 2
a2400 2
case 200:
#line 781 "ldgram.y"
d2403 2
a2404 2
case 201:
#line 783 "ldgram.y"
d2407 2
a2408 2
case 202:
#line 785 "ldgram.y"
d2411 2
a2412 2
case 203:
#line 787 "ldgram.y"
d2415 2
a2416 2
case 204:
#line 789 "ldgram.y"
d2419 2
a2420 2
case 205:
#line 791 "ldgram.y"
d2423 2
a2424 2
case 206:
#line 793 "ldgram.y"
d2427 2
a2428 2
case 207:
#line 795 "ldgram.y"
d2431 2
a2432 2
case 208:
#line 798 "ldgram.y"
d2435 2
a2436 2
case 209:
#line 800 "ldgram.y"
d2439 2
a2440 2
case 210:
#line 802 "ldgram.y"
d2443 2
a2444 2
case 211:
#line 804 "ldgram.y"
d2447 2
a2448 2
case 212:
#line 806 "ldgram.y"
d2451 2
a2452 6
case 213:
#line 808 "ldgram.y"
{ yyval.etree = exp_binop(ALIGN_K,yyvsp[-3].etree,yyvsp[-1].etree); }
    break;
case 214:
#line 810 "ldgram.y"
d2455 2
a2456 2
case 215:
#line 812 "ldgram.y"
d2459 2
a2460 2
case 216:
#line 814 "ldgram.y"
d2463 2
a2464 2
case 217:
#line 816 "ldgram.y"
d2467 2
a2468 2
case 218:
#line 818 "ldgram.y"
d2471 2
a2472 2
case 219:
#line 820 "ldgram.y"
d2475 2
a2476 2
case 220:
#line 822 "ldgram.y"
d2479 2
a2480 2
case 221:
#line 827 "ldgram.y"
d2483 2
a2484 2
case 222:
#line 828 "ldgram.y"
d2487 2
a2488 2
case 223:
#line 832 "ldgram.y"
d2491 2
a2492 2
case 224:
#line 833 "ldgram.y"
d2495 2
a2496 10
case 225:
#line 837 "ldgram.y"
{ yyval.etree = yyvsp[-1].etree; }
    break;
case 226:
#line 838 "ldgram.y"
{ yyval.etree = 0; }
    break;
case 227:
#line 841 "ldgram.y"
d2499 2
a2500 2
case 228:
#line 844 "ldgram.y"
d2503 2
a2504 2
case 229:
#line 846 "ldgram.y"
d2506 1
a2506 1
			  lang_enter_output_section_statement(yyvsp[-6].name, yyvsp[-4].etree,
d2508 1
a2508 1
							      0, yyvsp[-2].etree, yyvsp[-3].etree);
d2511 2
a2512 2
case 230:
#line 852 "ldgram.y"
d2515 2
a2516 2
case 231:
#line 854 "ldgram.y"
d2522 2
a2523 2
case 232:
#line 859 "ldgram.y"
d2526 2
a2527 2
case 233:
#line 861 "ldgram.y"
d2530 2
a2531 2
case 234:
#line 863 "ldgram.y"
d2534 2
a2535 2
case 235:
#line 865 "ldgram.y"
d2537 1
a2537 1
			  lang_enter_overlay (yyvsp[-5].etree, yyvsp[-2].etree);
d2540 2
a2541 2
case 236:
#line 870 "ldgram.y"
d2544 2
a2545 2
case 237:
#line 872 "ldgram.y"
d2548 1
a2548 1
			  lang_leave_overlay (yyvsp[-11].etree, (int) yyvsp[-12].integer,
d2552 2
a2553 2
case 239:
#line 882 "ldgram.y"
d2556 2
a2557 2
case 240:
#line 884 "ldgram.y"
d2563 2
a2564 2
case 242:
#line 892 "ldgram.y"
d2567 2
a2568 2
case 243:
#line 893 "ldgram.y"
d2571 2
a2572 2
case 244:
#line 894 "ldgram.y"
d2575 2
a2576 2
case 245:
#line 895 "ldgram.y"
d2579 2
a2580 2
case 246:
#line 896 "ldgram.y"
d2583 2
a2584 2
case 248:
#line 901 "ldgram.y"
d2587 2
a2588 2
case 249:
#line 902 "ldgram.y"
d2591 2
a2592 2
case 250:
#line 906 "ldgram.y"
d2595 2
a2596 2
case 251:
#line 907 "ldgram.y"
d2599 2
a2600 2
case 252:
#line 912 "ldgram.y"
d2603 2
a2604 2
case 253:
#line 914 "ldgram.y"
d2607 2
a2608 2
case 254:
#line 918 "ldgram.y"
d2611 2
a2612 2
case 255:
#line 919 "ldgram.y"
d2615 2
a2616 2
case 256:
#line 924 "ldgram.y"
d2619 2
a2620 2
case 257:
#line 926 "ldgram.y"
d2623 2
a2624 2
case 258:
#line 931 "ldgram.y"
d2627 3
a2629 3
case 259:
#line 932 "ldgram.y"
{ yyval.name = DEFAULT_MEMORY_REGION; }
d2631 2
a2632 2
case 260:
#line 937 "ldgram.y"
d2637 2
a2638 2
case 261:
#line 941 "ldgram.y"
d2650 2
a2651 2
case 263:
#line 957 "ldgram.y"
d2657 2
a2658 2
case 264:
#line 962 "ldgram.y"
d2661 2
a2662 2
case 265:
#line 964 "ldgram.y"
d2668 2
a2669 2
case 270:
#line 981 "ldgram.y"
d2672 2
a2673 2
case 271:
#line 982 "ldgram.y"
d2676 2
a2677 2
case 272:
#line 984 "ldgram.y"
d2683 2
a2684 2
case 273:
#line 992 "ldgram.y"
a2712 2
			  else if (strcmp (s, "PT_GNU_STACK") == 0)
			    yyval.etree = exp_intop (0x6474e551);
d2724 2
a2725 2
case 274:
#line 1036 "ldgram.y"
d2730 2
a2731 2
case 275:
#line 1040 "ldgram.y"
d2744 2
a2745 2
case 276:
#line 1052 "ldgram.y"
d2751 2
a2752 2
case 277:
#line 1060 "ldgram.y"
d2757 2
a2758 2
case 278:
#line 1064 "ldgram.y"
d2763 2
a2764 2
case 279:
#line 1072 "ldgram.y"
d2770 2
a2771 2
case 280:
#line 1077 "ldgram.y"
d2777 2
a2778 2
case 281:
#line 1086 "ldgram.y"
d2783 2
a2784 2
case 282:
#line 1090 "ldgram.y"
d2789 2
a2790 2
case 285:
#line 1102 "ldgram.y"
d2795 2
a2796 2
case 286:
#line 1106 "ldgram.y"
d2801 2
a2802 2
case 287:
#line 1110 "ldgram.y"
d2807 2
a2808 2
case 288:
#line 1117 "ldgram.y"
d2813 2
a2814 2
case 289:
#line 1121 "ldgram.y"
d2819 2
a2820 2
case 290:
#line 1128 "ldgram.y"
d2825 2
a2826 2
case 291:
#line 1132 "ldgram.y"
d2831 2
a2832 2
case 292:
#line 1136 "ldgram.y"
d2837 2
a2838 2
case 293:
#line 1140 "ldgram.y"
d2843 2
a2844 2
case 294:
#line 1144 "ldgram.y"
d2849 2
a2850 2
case 295:
#line 1151 "ldgram.y"
d2855 2
a2856 2
case 296:
#line 1155 "ldgram.y"
d2861 2
a2862 2
case 297:
#line 1159 "ldgram.y"
d2868 2
a2869 2
case 298:
#line 1164 "ldgram.y"
d2875 2
a2876 2
case 299:
#line 1169 "ldgram.y"
d2882 2
a2883 2
case 300:
#line 1174 "ldgram.y"
d3122 1
a3122 1
#line 1185 "ldgram.y"
@


