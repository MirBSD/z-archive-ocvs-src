head	1.4;
access;
symbols
	binutils-2_15:1.1.2.3
	cvs-200406091940:1.1.1.2
	MIRBSD_7quater:1.2
	cvs-200405160640:1.1.1.1
	cvs-200401271800:1.1.1.1
	cvs-200401261630:1.1.1.1
	cvs-200401021645:1.1.1.1
	MIRBSD_7_ALPHA:1.2.0.6
	MIRBSD_7:1.2.0.4
	cvs-200312222040:1.1.1.1
	cvs-200312031730:1.1.1.1
	MIRBSD_7ter:1.2
	MIRBSD_7_DEV:1.2.0.2
	cvs-200310020700:1.1.1.1
	cvs-200309271030:1.1.1.1
	cvs-200309251530:1.1.1.1
	binutils_2_14:1.1.2.2
	binutils_2_11_2:1.1.2.1
	FSF:1.1.2
	cvs-200308302005:1.1.1.1
	cvs-200308171200:1.1.1.1
	ctm-3496:1.1.1.1
	ctm-3449:1.1.1.1
	ctm-3437:1.1.1.1
	cvs-200307191805:1.1.1.1
	ctm-3425:1.1.1.1
	cvs-200307091500:1.1.1.1
	ctm-3389:1.1.1.1
	cvs-200306291430:1.1.1.1
	ctm-3341:1.1.1.1
	MIRBSD_5:1.1.1.1
	cvs-200306082100:1.1.1.1
	ctm-3316:1.1.1.1
	ctm-3272:1.1.1.1
	ctm-3264:1.1.1.1
	cvs-200305071630:1.1.1.1
	ctm-3255:1.1.1.1
	MIRBSD_4:1.1.1.1
	ctm-3203:1.1.1.1
	cvs-20030410-1130:1.1.1.1
	ctm-3155:1.1.1.1
	ctm-3132:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.4
date	2004.08.11.21.20.06;	author tg;	state dead;
branches;
next	1.3;

1.3
date	2004.06.10.19.03.39;	author tg;	state Exp;
branches;
next	1.2;

1.2
date	2003.09.23.21.05.32;	author tg;	state Exp;
branches;
next	1.1;

1.1
date	2003.03.22.17.41.00;	author tg;	state Exp;
branches
	1.1.1.1
	1.1.2.1;
next	;

1.1.1.1
date	2003.03.22.17.41.00;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2004.06.09.20.25.06;	author tg;	state Exp;
branches;
next	;

1.1.2.1
date	2003.09.23.15.43.19;	author tg;	state Exp;
branches;
next	1.1.2.2;

1.1.2.2
date	2003.09.23.16.08.41;	author tg;	state Exp;
branches;
next	1.1.2.3;

1.1.2.3
date	2004.07.15.17.18.13;	author tg;	state Exp;
branches;
next	;


desc
@@


1.4
log
@remove old binutils
@
text
@/* ld.h -- general linker header file
   Copyright 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2002
   Free Software Foundation, Inc.

   This file is part of GLD, the Gnu Linker.

   GLD is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   GLD is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with GLD; see the file COPYING.  If not, write to the Free
   Software Foundation, 59 Temple Place - Suite 330, Boston, MA
   02111-1307, USA.  */

#ifndef LD_H
#define LD_H

#ifdef HAVE_LOCALE_H
# include <locale.h>
#endif

#ifdef ENABLE_NLS
# include <libintl.h>
# define _(String) gettext (String)
# ifdef gettext_noop
#  define N_(String) gettext_noop (String)
# else
#  define N_(String) (String)
# endif
#else
# define gettext(Msgid) (Msgid)
# define dgettext(Domainname, Msgid) (Msgid)
# define dcgettext(Domainname, Msgid, Category) (Msgid)
# define textdomain(Domainname) while (0) /* nothing */
# define bindtextdomain(Domainname, Dirname) while (0) /* nothing */
# define _(String) (String)
# define N_(String) (String)
#endif

#ifdef __OpenBSD__
#include <stdbool.h>
#define boolean bool
#endif

#include "bin-bugs.h"

/* Look in this environment name for the linker to pretend to be */
#define EMULATION_ENVIRON "LDEMULATION"
/* If in there look for the strings: */

/* Look in this variable for a target format */
#define TARGET_ENVIRON "GNUTARGET"

/* Input sections which are put in a section of this name are actually
   discarded.  */
#define DISCARD_SECTION_NAME "/DISCARD/"

/* A file name list */
typedef struct name_list {
  const char *name;
  struct name_list *next;
}
name_list;

/* A wildcard specification.  This is only used in ldgram.y, but it
   winds up in ldgram.h, so we need to define it outside.  */

struct wildcard_spec {
  const char *name;
  struct name_list *exclude_name_list;
  bfd_boolean sorted;
};

struct wildcard_list {
  struct wildcard_list *next;
  struct wildcard_spec spec;
};

/* Extra information we hold on sections */
typedef struct user_section_struct {
  /* Pointer to the section where this data will go */
  struct lang_input_statement_struct *file;
} section_userdata_type;

#define get_userdata(x) ((x)->userdata)

#define BYTE_SIZE	(1)
#define SHORT_SIZE	(2)
#define LONG_SIZE	(4)
#define QUAD_SIZE	(8)

typedef struct {
  /* 1 => assign space to common symbols even if `relocatable_output'.  */
  bfd_boolean force_common_definition;

  /* 1 => do not assign addresses to common symbols.  */
  bfd_boolean inhibit_common_definition;
  bfd_boolean relax;

  /* Name of runtime interpreter to invoke.  */
  char *interpreter;

  /* Name to give runtime libary from the -soname argument.  */
  char *soname;

  /* Runtime library search path from the -rpath argument.  */
  char *rpath;

  /* Link time runtime library search path from the -rpath-link
     argument.  */
  char *rpath_link;

  /* Big or little endian as set on command line.  */
  enum { ENDIAN_UNSET = 0, ENDIAN_BIG, ENDIAN_LITTLE } endian;

  /* If TRUE, build MIPS embedded PIC relocation tables in the output
     file.  */
  bfd_boolean embedded_relocs;

  /* If TRUE, force generation of a file with a .exe file.  */
  bfd_boolean force_exe_suffix;

  /* If TRUE, generate a cross reference report.  */
  bfd_boolean cref;

  /* If TRUE (which is the default), warn about mismatched input
     files.  */
  bfd_boolean warn_mismatch;

  /* Remove unreferenced sections?  */
  bfd_boolean gc_sections;

  /* Name of shared object whose symbol table should be filtered with
     this shared object.  From the --filter option.  */
  char *filter_shlib;

  /* Name of shared object for whose symbol table this shared object
     is an auxiliary filter.  From the --auxiliary option.  */
  char **auxiliary_filters;

  /* A version symbol to be applied to the symbol names found in the
     .exports sections.  */
  char *version_exports_section;

  /* If TRUE (the default) check section addresses, once compute,
     fpor overlaps.  */
  bfd_boolean check_section_addresses;

  /* If TRUE allow the linking of input files in an unknown architecture
     assuming that the user knows what they are doing.  This was the old
     behaviour of the linker.  The new default behaviour is to reject such
     input files.  */
  bfd_boolean accept_unknown_input_arch;

} args_type;

extern args_type command_line;

typedef int token_code_type;

typedef struct {
  bfd_size_type specified_data_size;
  bfd_boolean magic_demand_paged;
  bfd_boolean make_executable;

  /* If TRUE, doing a dynamic link.  */
  bfd_boolean dynamic_link;

  /* If TRUE, -shared is supported.  */
  /* ??? A better way to do this is perhaps to define this in the
     ld_emulation_xfer_struct since this is really a target dependent
     parameter.  */
  bfd_boolean has_shared;

  /* If TRUE, build constructors.  */
  bfd_boolean build_constructors;

  /* If TRUE, warn about any constructors.  */
  bfd_boolean warn_constructors;

  /* If TRUE, warn about merging common symbols with others.  */
  bfd_boolean warn_common;

  /* If TRUE, only warn once about a particular undefined symbol.  */
  bfd_boolean warn_once;

  /* If TRUE, warn if multiple global-pointers are needed (Alpha
     only).  */
  bfd_boolean warn_multiple_gp;

  /* If TRUE, warn if the starting address of an output section
     changes due to the alignment of an input section.  */
  bfd_boolean warn_section_align;

  /* If TRUE, warning messages are fatal */
  bfd_boolean fatal_warnings;

  bfd_boolean sort_common;

  bfd_boolean text_read_only;

  /* Classic ELF executable which has data and bss next to each
     other with no padding for GOT/PLT. */
  bfd_boolean data_bss_contig;

  char *map_filename;
  FILE *map_file;

  bfd_boolean stats;

  /* If set, orphan input sections will be mapped to separate output
     sections.  */
  bfd_boolean unique_orphan_sections;

  unsigned int split_by_reloc;
  bfd_size_type split_by_file;

  /* If set, only search library directories explicitly selected
     on the command line.  */
  bfd_boolean only_cmd_line_lib_dirs;
} ld_config_type;

extern ld_config_type config;

typedef enum {
  lang_first_phase_enum,
  lang_allocating_phase_enum,
  lang_final_phase_enum
} lang_phase_type;

extern FILE * saved_script_handle;
extern bfd_boolean force_make_executable;

/* Non-zero if we are processing a --defsym from the command line.  */
extern int parsing_defsym;

extern int yyparse PARAMS ((void));

extern void add_cref PARAMS ((const char *, bfd *, asection *, bfd_vma));
extern void output_cref PARAMS ((FILE *));
extern void check_nocrossrefs PARAMS ((void));

extern void ld_abort PARAMS ((const char *, int, const char *))
     ATTRIBUTE_NORETURN;

/* If gcc >= 2.6, we can give a function name, too.  */
#if __GNUC__ < 2 || (__GNUC__ == 2 && __GNUC_MINOR__ < 6)
#define __PRETTY_FUNCTION__  ((char*) NULL)
#endif

#undef abort
#define abort() ld_abort (__FILE__, __LINE__, __PRETTY_FUNCTION__)

#endif
@


1.3
log
@first foolish attempt to merge the last piece
won't probably work, but I want it backed up,
since there's a lot of work and time in it
@
text
@@


1.2
log
@looks as if some sour wine (Federweißer <german>, for an English
description see http://forum.leo.org/archiv/2002_11/04/20021104125717e_en.html)
could help me to bear the pain upgrading binutils to 2.14

todo:
 - test if this works at all
 - test if this works
 - test if nothing breaks
 - nuke all occurences of "false" and "true" in binutils (including gdb),
   see bfd.h "Poison" for reference
 - talk to the OpenBSD people, ask them if they could improve this
@
text
@d211 1
a211 1
  boolean data_bss_contig;
@


1.1
log
@Initial revision
@
text
@d2 1
a2 1
   Copyright 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000
d47 5
d78 6
a83 1
  boolean sorted;
a98 8
/* ALIGN macro changed to ALIGN_N to avoid	*/
/* conflict in /usr/include/machine/machparam.h */
/* WARNING: If THIS is a 64 bit address and BOUNDARY is a 32 bit int,
   you must coerce boundary to the same type as THIS.
   ??? Is there a portable way to avoid this.  */
#define ALIGN_N(this, boundary) \
  ((( (this) + ((boundary) -1)) & (~((boundary)-1))))

d101 5
a105 2
  boolean force_common_definition;
  boolean relax;
d123 1
a123 5
  /* If true, export all symbols in the dynamic symbol table of an ELF
     executable.  */
  boolean export_dynamic;

  /* If true, build MIPS embedded PIC relocation tables in the output
d125 1
a125 1
  boolean embedded_relocs;
d127 2
a128 2
  /* If true, force generation of a file with a .exe file.  */
  boolean force_exe_suffix;
d130 2
a131 2
  /* If true, generate a cross reference report.  */
  boolean cref;
d133 1
a133 1
  /* If true (which is the default), warn about mismatched input
d135 1
a135 1
  boolean warn_mismatch;
d138 1
a138 1
  boolean gc_sections;
d152 1
a152 1
  /* If true (the default) check section addresses, once compute,
d154 7
a160 1
  boolean check_section_addresses;
d170 2
a171 2
  boolean magic_demand_paged;
  boolean make_executable;
d173 2
a174 2
  /* If true, doing a dynamic link.  */
  boolean dynamic_link;
d176 1
a176 1
  /* If true, -shared is supported.  */
d180 1
a180 1
  boolean has_shared;
d182 2
a183 2
  /* If true, build constructors.  */
  boolean build_constructors;
d185 2
a186 2
  /* If true, warn about any constructors.  */
  boolean warn_constructors;
d188 2
a189 2
  /* If true, warn about merging common symbols with others.  */
  boolean warn_common;
d191 2
a192 2
  /* If true, only warn once about a particular undefined symbol.  */
  boolean warn_once;
d194 1
a194 1
  /* If true, warn if multiple global-pointers are needed (Alpha
d196 1
a196 1
  boolean warn_multiple_gp;
d198 1
a198 1
  /* If true, warn if the starting address of an output section
d200 1
a200 1
  boolean warn_section_align;
d202 2
a203 1
  boolean sort_common;
d205 3
a207 1
  boolean text_read_only;
d216 1
a216 1
  boolean stats;
d220 1
a220 1
  boolean unique_orphan_sections;
d224 4
d238 2
a239 2
extern boolean had_script;
extern boolean force_make_executable;
@


1.1.2.1
log
@vendor-branch-i-fy GNU binutils (2.11.2) to facilitate an update
@
text
@d199 4
@


1.1.2.2
log
@Import GNU binutils 2.14 from the Free Software Foundation
(in case the update goes FUBAR, it can be easily backed off)
@
text
@d2 1
a2 1
   Copyright 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2002
d73 1
a73 6
  bfd_boolean sorted;
};

struct wildcard_list {
  struct wildcard_list *next;
  struct wildcard_spec spec;
d89 8
d99 2
a100 5
  bfd_boolean force_common_definition;

  /* 1 => do not assign addresses to common symbols.  */
  bfd_boolean inhibit_common_definition;
  bfd_boolean relax;
d118 5
a122 1
  /* If TRUE, build MIPS embedded PIC relocation tables in the output
d124 1
a124 1
  bfd_boolean embedded_relocs;
d126 2
a127 2
  /* If TRUE, force generation of a file with a .exe file.  */
  bfd_boolean force_exe_suffix;
d129 2
a130 2
  /* If TRUE, generate a cross reference report.  */
  bfd_boolean cref;
d132 1
a132 1
  /* If TRUE (which is the default), warn about mismatched input
d134 1
a134 1
  bfd_boolean warn_mismatch;
d137 1
a137 1
  bfd_boolean gc_sections;
d151 1
a151 1
  /* If TRUE (the default) check section addresses, once compute,
d153 1
a153 7
  bfd_boolean check_section_addresses;

  /* If TRUE allow the linking of input files in an unknown architecture
     assuming that the user knows what they are doing.  This was the old
     behaviour of the linker.  The new default behaviour is to reject such
     input files.  */
  bfd_boolean accept_unknown_input_arch;
d163 2
a164 2
  bfd_boolean magic_demand_paged;
  bfd_boolean make_executable;
d166 2
a167 2
  /* If TRUE, doing a dynamic link.  */
  bfd_boolean dynamic_link;
d169 1
a169 1
  /* If TRUE, -shared is supported.  */
d173 1
a173 1
  bfd_boolean has_shared;
d175 2
a176 2
  /* If TRUE, build constructors.  */
  bfd_boolean build_constructors;
d178 2
a179 2
  /* If TRUE, warn about any constructors.  */
  bfd_boolean warn_constructors;
d181 2
a182 2
  /* If TRUE, warn about merging common symbols with others.  */
  bfd_boolean warn_common;
d184 2
a185 2
  /* If TRUE, only warn once about a particular undefined symbol.  */
  bfd_boolean warn_once;
d187 1
a187 1
  /* If TRUE, warn if multiple global-pointers are needed (Alpha
d189 1
a189 1
  bfd_boolean warn_multiple_gp;
d191 1
a191 1
  /* If TRUE, warn if the starting address of an output section
d193 1
a193 1
  bfd_boolean warn_section_align;
d195 1
a195 2
  /* If TRUE, warning messages are fatal */
  bfd_boolean fatal_warnings;
d197 1
a197 3
  bfd_boolean sort_common;

  bfd_boolean text_read_only;
d202 1
a202 1
  bfd_boolean stats;
d206 1
a206 1
  bfd_boolean unique_orphan_sections;
a209 4

  /* If set, only search library directories explicitly selected
     on the command line.  */
  bfd_boolean only_cmd_line_lib_dirs;
d220 2
a221 2
extern FILE * saved_script_handle;
extern bfd_boolean force_make_executable;
@


1.1.2.3
log
@GNU Binutils, version 2.15
@
text
@d235 8
a242 5
extern int yyparse (void);
extern void add_cref (const char *, bfd *, asection *, bfd_vma);
extern void output_cref (FILE *);
extern void check_nocrossrefs (void);
extern void ld_abort (const char *, int, const char *) ATTRIBUTE_NORETURN;
d246 1
a246 1
#define __PRETTY_FUNCTION__  NULL
@


1.1.1.1
log
@Import OpenBSD 3.3 source repository from CTM 3132 the first time
This opens an OpenBSD-mirabile (aka MirBSD) repository.

### MirBSD is:
# Copyright (c) 1982-2003 by Thorsten "mirabile" Glaser <x86@@ePost.de>
# Copyright © 1968-2003  The authors of And contributors to UNIX®, the
#       C Language, BSD/Berkeley Unix; 386BSD, NetBSD 1.1 and OpenBSD.
#
# Anyone who obtained a copy of this work is hereby permitted to freely use,
# distribute, modify, merge, sublicence, give away or sell it as long as the
# authors are given due credit and the following notice is retained:
#
# This work is provided "as is", with no explicit or implicit warranty what-
# soever. Use it only at your own risk. In no event may an author or contri-
# butor be held liable for any damage, directly or indirectly, that origina-
# ted through or is caused by creation or modification of this work.

MirBSD is my private tree. MirBSD does not differ very much from OpenBSD
and intentionally tracks OpenBSD. That's why it _is_ OpenBSD, just not the
official one. It's like with DarrenBSD.

At time of this writing, no advertising for MirBSD must be done,
because the advertising clause has not yet been sorted out.

http://templeofhate.com/tglaser/MirBSD/index.php
@
text
@@


1.1.1.2
log
@Sync of src/gnu with OpenBSD (promised a long time ago)
@
text
@d2 1
a2 1
   Copyright 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2002
d73 1
a73 6
  bfd_boolean sorted;
};

struct wildcard_list {
  struct wildcard_list *next;
  struct wildcard_spec spec;
d89 8
d99 2
a100 5
  bfd_boolean force_common_definition;

  /* 1 => do not assign addresses to common symbols.  */
  bfd_boolean inhibit_common_definition;
  bfd_boolean relax;
d118 5
a122 1
  /* If TRUE, build MIPS embedded PIC relocation tables in the output
d124 1
a124 1
  bfd_boolean embedded_relocs;
d126 2
a127 2
  /* If TRUE, force generation of a file with a .exe file.  */
  bfd_boolean force_exe_suffix;
d129 2
a130 2
  /* If TRUE, generate a cross reference report.  */
  bfd_boolean cref;
d132 1
a132 1
  /* If TRUE (which is the default), warn about mismatched input
d134 1
a134 1
  bfd_boolean warn_mismatch;
d137 1
a137 1
  bfd_boolean gc_sections;
d151 1
a151 1
  /* If TRUE (the default) check section addresses, once compute,
d153 1
a153 7
  bfd_boolean check_section_addresses;

  /* If TRUE allow the linking of input files in an unknown architecture
     assuming that the user knows what they are doing.  This was the old
     behaviour of the linker.  The new default behaviour is to reject such
     input files.  */
  bfd_boolean accept_unknown_input_arch;
d163 2
a164 2
  bfd_boolean magic_demand_paged;
  bfd_boolean make_executable;
d166 2
a167 2
  /* If TRUE, doing a dynamic link.  */
  bfd_boolean dynamic_link;
d169 1
a169 1
  /* If TRUE, -shared is supported.  */
d173 1
a173 1
  bfd_boolean has_shared;
d175 2
a176 2
  /* If TRUE, build constructors.  */
  bfd_boolean build_constructors;
d178 2
a179 2
  /* If TRUE, warn about any constructors.  */
  bfd_boolean warn_constructors;
d181 2
a182 2
  /* If TRUE, warn about merging common symbols with others.  */
  bfd_boolean warn_common;
d184 2
a185 2
  /* If TRUE, only warn once about a particular undefined symbol.  */
  bfd_boolean warn_once;
d187 1
a187 1
  /* If TRUE, warn if multiple global-pointers are needed (Alpha
d189 1
a189 1
  bfd_boolean warn_multiple_gp;
d191 1
a191 1
  /* If TRUE, warn if the starting address of an output section
d193 1
a193 1
  bfd_boolean warn_section_align;
d195 1
a195 2
  /* If TRUE, warning messages are fatal */
  bfd_boolean fatal_warnings;
d197 1
a197 3
  bfd_boolean sort_common;

  bfd_boolean text_read_only;
d201 1
a201 1
  bfd_boolean data_bss_contig;
d206 1
a206 1
  bfd_boolean stats;
d210 1
a210 1
  bfd_boolean unique_orphan_sections;
a213 4

  /* If set, only search library directories explicitly selected
     on the command line.  */
  bfd_boolean only_cmd_line_lib_dirs;
d224 2
a225 2
extern FILE * saved_script_handle;
extern bfd_boolean force_make_executable;
@

