head	1.3;
access;
symbols
	binutils-2_15:1.1.2.3
	cvs-200406091940:1.1.1.2
	MIRBSD_7quater:1.2
	cvs-200405160640:1.1.1.1
	cvs-200401271800:1.1.1.1
	cvs-200401261630:1.1.1.1
	cvs-200401021645:1.1.1.1
	MIRBSD_7_ALPHA:1.2.0.6
	MIRBSD_7:1.2.0.4
	cvs-200312222040:1.1.1.1
	cvs-200312031730:1.1.1.1
	MIRBSD_7ter:1.2
	MIRBSD_7_DEV:1.2.0.2
	cvs-200310020700:1.1.1.1
	cvs-200309271030:1.1.1.1
	cvs-200309251530:1.1.1.1
	binutils_2_14:1.1.2.2
	binutils_2_11_2:1.1.2.1
	FSF:1.1.2
	cvs-200308302005:1.1.1.1
	cvs-200308171200:1.1.1.1
	ctm-3496:1.1.1.1
	ctm-3449:1.1.1.1
	ctm-3437:1.1.1.1
	cvs-200307191805:1.1.1.1
	ctm-3425:1.1.1.1
	cvs-200307091500:1.1.1.1
	ctm-3389:1.1.1.1
	cvs-200306291430:1.1.1.1
	ctm-3341:1.1.1.1
	MIRBSD_5:1.1.1.1
	cvs-200306082100:1.1.1.1
	ctm-3316:1.1.1.1
	ctm-3272:1.1.1.1
	ctm-3264:1.1.1.1
	cvs-200305071630:1.1.1.1
	ctm-3255:1.1.1.1
	MIRBSD_4:1.1.1.1
	ctm-3203:1.1.1.1
	cvs-20030410-1130:1.1.1.1
	ctm-3155:1.1.1.1
	ctm-3132:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.3
date	2004.08.11.21.20.11;	author tg;	state dead;
branches;
next	1.2;

1.2
date	2003.09.23.21.05.33;	author tg;	state Exp;
branches;
next	1.1;

1.1
date	2003.03.22.17.41.01;	author tg;	state Exp;
branches
	1.1.1.1
	1.1.2.1;
next	;

1.1.1.1
date	2003.03.22.17.41.01;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2004.06.09.20.25.08;	author tg;	state Exp;
branches;
next	;

1.1.2.1
date	2003.09.23.15.43.20;	author tg;	state Exp;
branches;
next	1.1.2.2;

1.1.2.2
date	2003.09.23.16.08.42;	author tg;	state Exp;
branches;
next	1.1.2.3;

1.1.2.3
date	2004.07.15.17.18.17;	author tg;	state Exp;
branches;
next	;


desc
@@


1.3
log
@remove old binutils
@
text
@/* ldemul.c -- clearing house for ld emulation states
   Copyright 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 2000, 2002, 2003
   Free Software Foundation, Inc.

This file is part of GLD, the Gnu Linker.

GLD is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2, or (at your option)
any later version.

GLD is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with GLD; see the file COPYING.  If not, write to the Free
Software Foundation, 59 Temple Place - Suite 330, Boston, MA
02111-1307, USA.  */

#include "bfd.h"
#include "sysdep.h"
#include "getopt.h"

#include "ld.h"
#include "ldmisc.h"
#include "ldexp.h"
#include "ldlang.h"
#include "ldfile.h"
#include "ldemul.h"
#include "ldmain.h"
#include "ldemul-list.h"

ld_emulation_xfer_type *ld_emulation;

void
ldemul_hll (name)
     char *name;
{
  ld_emulation->hll (name);
}

void
ldemul_syslib (name)
     char *name;
{
  ld_emulation->syslib (name);
}

void
ldemul_after_parse ()
{
  ld_emulation->after_parse ();
}

void
ldemul_before_parse ()
{
  ld_emulation->before_parse ();
}

void
ldemul_after_open ()
{
  ld_emulation->after_open ();
}

void
ldemul_after_allocation ()
{
  ld_emulation->after_allocation ();
}

void
ldemul_before_allocation ()
{
  if (ld_emulation->before_allocation)
    ld_emulation->before_allocation ();
}

void
ldemul_set_output_arch ()
{
  ld_emulation->set_output_arch ();
}

void
ldemul_finish ()
{
  if (ld_emulation->finish)
    ld_emulation->finish ();
}

void
ldemul_set_symbols ()
{
  if (ld_emulation->set_symbols)
    ld_emulation->set_symbols ();
}

void
ldemul_create_output_section_statements ()
{
  if (ld_emulation->create_output_section_statements)
    ld_emulation->create_output_section_statements ();
}

char *
ldemul_get_script (isfile)
     int *isfile;
{
  return ld_emulation->get_script (isfile);
}

bfd_boolean
ldemul_open_dynamic_archive (arch, search, entry)
     const char *arch;
     search_dirs_type *search;
     lang_input_statement_type *entry;
{
  if (ld_emulation->open_dynamic_archive)
    return (*ld_emulation->open_dynamic_archive) (arch, search, entry);
  return FALSE;
}

bfd_boolean
ldemul_place_orphan (file, s)
     lang_input_statement_type *file;
     asection *s;
{
  if (ld_emulation->place_orphan)
    return (*ld_emulation->place_orphan) (file, s);
  return FALSE;
}

void
ldemul_add_options (ns, shortopts, nl, longopts, nrl, really_longopts)
     int ns;
     char **shortopts;
     int nl;
     struct option **longopts;
     int nrl;
     struct option **really_longopts;
{
  if (ld_emulation->add_options)
    (*ld_emulation->add_options) (ns, shortopts, nl, longopts,
				  nrl, really_longopts);
}

bfd_boolean
ldemul_handle_option (optc)
     int optc;
{
  if (ld_emulation->handle_option)
    return (*ld_emulation->handle_option) (optc);
  return FALSE;
}

bfd_boolean
ldemul_parse_args (argc, argv)
     int argc;
     char **argv;
{
  /* Try and use the emulation parser if there is one.  */
  if (ld_emulation->parse_args)
    return (*ld_emulation->parse_args) (argc, argv);
  return FALSE;
}

/* Let the emulation code handle an unrecognized file.  */

bfd_boolean
ldemul_unrecognized_file (entry)
     lang_input_statement_type *entry;
{
  if (ld_emulation->unrecognized_file)
    return (*ld_emulation->unrecognized_file) (entry);
  return FALSE;
}

/* Let the emulation code handle a recognized file.  */

bfd_boolean
ldemul_recognized_file (entry)
     lang_input_statement_type *entry;
{
  if (ld_emulation->recognized_file)
    return (*ld_emulation->recognized_file) (entry);
  return FALSE;
}

char *
ldemul_choose_target (argc, argv)
     int argc;
     char **argv;
{
  return ld_emulation->choose_target (argc, argv);
}


/* The default choose_target function.  */

char *
ldemul_default_target (argc, argv)
     int argc ATTRIBUTE_UNUSED;
     char **argv ATTRIBUTE_UNUSED;
{
  char *from_outside = getenv (TARGET_ENVIRON);
  if (from_outside != (char *) NULL)
    return from_outside;
  return ld_emulation->target_name;
}

void
after_parse_default ()
{
}

void
after_open_default ()
{
}

void
after_allocation_default ()
{
}

void
before_allocation_default ()
{
}

void
set_output_arch_default ()
{
  /* Set the output architecture and machine if possible.  */
  bfd_set_arch_mach (output_bfd,
		     ldfile_output_architecture, ldfile_output_machine);
}

void
syslib_default (ignore)
     char *ignore ATTRIBUTE_UNUSED;
{
  info_msg (_("%S SYSLIB ignored\n"));
}

void
hll_default (ignore)
     char *ignore ATTRIBUTE_UNUSED;
{
  info_msg (_("%S HLL ignored\n"));
}

ld_emulation_xfer_type *ld_emulations[] = { EMULATION_LIST };

void
ldemul_choose_mode (target)
     char *target;
{
  ld_emulation_xfer_type **eptr = ld_emulations;
  /* Ignore "gld" prefix.  */
  if (target[0] == 'g' && target[1] == 'l' && target[2] == 'd')
    target += 3;
  for (; *eptr; eptr++)
    {
      if (strcmp (target, (*eptr)->emulation_name) == 0)
	{
	  ld_emulation = *eptr;
	  return;
	}
    }
  einfo (_("%P: unrecognised emulation mode: %s\n"), target);
  einfo (_("Supported emulations: "));
  ldemul_list_emulations (stderr);
  einfo ("%F\n");
}

void
ldemul_list_emulations (f)
     FILE *f;
{
  ld_emulation_xfer_type **eptr = ld_emulations;
  bfd_boolean first = TRUE;

  for (; *eptr; eptr++)
    {
      if (first)
	first = FALSE;
      else
	fprintf (f, " ");
      fprintf (f, "%s", (*eptr)->emulation_name);
    }
}

void
ldemul_list_emulation_options (f)
     FILE *f;
{
  ld_emulation_xfer_type **eptr;
  int options_found = 0;

  for (eptr = ld_emulations; *eptr; eptr++)
    {
      ld_emulation_xfer_type *emul = *eptr;

      if (emul->list_options)
	{
	  fprintf (f, "%s: \n", emul->emulation_name);

	  emul->list_options (f);

	  options_found = 1;
	}
    }

  if (! options_found)
    fprintf (f, _("  no emulation specific options.\n"));
}

int
ldemul_find_potential_libraries (name, entry)
     char *name;
     lang_input_statement_type *entry;
{
  if (ld_emulation->find_potential_libraries)
    return ld_emulation->find_potential_libraries (name, entry);

  return 0;
}

struct bfd_elf_version_expr *
ldemul_new_vers_pattern (entry)
     struct bfd_elf_version_expr *entry;
{
  if (ld_emulation->new_vers_pattern)
    entry = (*ld_emulation->new_vers_pattern) (entry);
  return entry;
}
@


1.2
log
@looks as if some sour wine (Federweiﬂer <german>, for an English
description see http://forum.leo.org/archiv/2002_11/04/20021104125717e_en.html)
could help me to bear the pain upgrading binutils to 2.14

todo:
 - test if this works at all
 - test if this works
 - test if nothing breaks
 - nuke all occurences of "false" and "true" in binutils (including gdb),
   see bfd.h "Poison" for reference
 - talk to the OpenBSD people, ask them if they could improve this
@
text
@@


1.1
log
@Initial revision
@
text
@d2 1
a2 1
   Copyright 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 2000
d24 1
d116 1
a116 1
boolean
d124 1
a124 1
  return false;
d127 1
a127 1
boolean
d134 1
a134 1
  return false;
d137 24
a160 1
int
d167 2
a168 4
    {
      return ld_emulation->parse_args (argc, argv);
    }
  return 0;
d173 1
a173 1
boolean
d179 1
a179 1
  return false;
d184 1
a184 1
boolean
d190 1
a190 1
  return false;
d194 3
a196 1
ldemul_choose_target ()
d198 1
a198 1
  return ld_emulation->choose_target ();
d201 1
d205 3
a207 1
ldemul_default_target ()
d286 1
a286 1
  boolean first = true;
d291 1
a291 1
	first = false;
d332 9
@


1.1.2.1
log
@vendor-branch-i-fy GNU binutils (2.11.2) to facilitate an update
@
text
@@


1.1.2.2
log
@Import GNU binutils 2.14 from the Free Software Foundation
(in case the update goes FUBAR, it can be easily backed off)
@
text
@d2 1
a2 1
   Copyright 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 2000, 2002, 2003
a23 1
#include "getopt.h"
d115 1
a115 1
bfd_boolean
d123 1
a123 1
  return FALSE;
d126 1
a126 1
bfd_boolean
d133 1
a133 1
  return FALSE;
d136 1
a136 24
void
ldemul_add_options (ns, shortopts, nl, longopts, nrl, really_longopts)
     int ns;
     char **shortopts;
     int nl;
     struct option **longopts;
     int nrl;
     struct option **really_longopts;
{
  if (ld_emulation->add_options)
    (*ld_emulation->add_options) (ns, shortopts, nl, longopts,
				  nrl, really_longopts);
}

bfd_boolean
ldemul_handle_option (optc)
     int optc;
{
  if (ld_emulation->handle_option)
    return (*ld_emulation->handle_option) (optc);
  return FALSE;
}

bfd_boolean
d143 4
a146 2
    return (*ld_emulation->parse_args) (argc, argv);
  return FALSE;
d151 1
a151 1
bfd_boolean
d157 1
a157 1
  return FALSE;
d162 1
a162 1
bfd_boolean
d168 1
a168 1
  return FALSE;
d172 1
a172 3
ldemul_choose_target (argc, argv)
     int argc;
     char **argv;
d174 1
a174 1
  return ld_emulation->choose_target (argc, argv);
a176 1

d180 1
a180 3
ldemul_default_target (argc, argv)
     int argc ATTRIBUTE_UNUSED;
     char **argv ATTRIBUTE_UNUSED;
d259 1
a259 1
  bfd_boolean first = TRUE;
d264 1
a264 1
	first = FALSE;
a304 9
}

struct bfd_elf_version_expr *
ldemul_new_vers_pattern (entry)
     struct bfd_elf_version_expr *entry;
{
  if (ld_emulation->new_vers_pattern)
    entry = (*ld_emulation->new_vers_pattern) (entry);
  return entry;
@


1.1.2.3
log
@GNU Binutils, version 2.15
@
text
@d38 2
a39 1
ldemul_hll (char *name)
d45 2
a46 1
ldemul_syslib (char *name)
d52 1
a52 1
ldemul_after_parse (void)
d58 1
a58 1
ldemul_before_parse (void)
d64 1
a64 1
ldemul_after_open (void)
d70 1
a70 1
ldemul_after_allocation (void)
d76 1
a76 1
ldemul_before_allocation (void)
d83 1
a83 1
ldemul_set_output_arch (void)
d89 1
a89 1
ldemul_finish (void)
d96 1
a96 1
ldemul_set_symbols (void)
d103 1
a103 1
ldemul_create_output_section_statements (void)
d110 2
a111 1
ldemul_get_script (int *isfile)
d117 4
a120 2
ldemul_open_dynamic_archive (const char *arch, search_dirs_type *search,
			     lang_input_statement_type *entry)
d128 3
a130 1
ldemul_place_orphan (lang_input_statement_type *file, asection *s)
d138 7
a144 3
ldemul_add_options (int ns, char **shortopts, int nl,
		    struct option **longopts, int nrl,
		    struct option **really_longopts)
d152 2
a153 1
ldemul_handle_option (int optc)
d161 3
a163 1
ldemul_parse_args (int argc, char **argv)
d174 2
a175 1
ldemul_unrecognized_file (lang_input_statement_type *entry)
d185 2
a186 1
ldemul_recognized_file (lang_input_statement_type *entry)
d194 3
a196 1
ldemul_choose_target (int argc, char **argv)
d205 3
a207 1
ldemul_default_target (int argc ATTRIBUTE_UNUSED, char **argv ATTRIBUTE_UNUSED)
d216 1
a216 1
after_parse_default (void)
d221 1
a221 1
after_open_default (void)
d226 1
a226 1
after_allocation_default (void)
d231 1
a231 1
before_allocation_default (void)
d236 1
a236 1
set_output_arch_default (void)
d244 2
a245 1
syslib_default (char *ignore ATTRIBUTE_UNUSED)
d251 2
a252 1
hll_default (char *ignore ATTRIBUTE_UNUSED)
d260 2
a261 1
ldemul_choose_mode (char *target)
d282 2
a283 1
ldemul_list_emulations (FILE *f)
d299 2
a300 1
ldemul_list_emulation_options (FILE *f)
d324 3
a326 1
ldemul_find_potential_libraries (char *name, lang_input_statement_type *entry)
d335 2
a336 1
ldemul_new_vers_pattern (struct bfd_elf_version_expr *entry)
@


1.1.1.1
log
@Import OpenBSD 3.3 source repository from CTM 3132 the first time
This opens an OpenBSD-mirabile (aka MirBSD) repository.

### MirBSD is:
# Copyright (c) 1982-2003 by Thorsten "mirabile" Glaser <x86@@ePost.de>
# Copyright © 1968-2003  The authors of And contributors to UNIXÆ, the
#       C Language, BSD/Berkeley Unix; 386BSD, NetBSD 1.1 and OpenBSD.
#
# Anyone who obtained a copy of this work is hereby permitted to freely use,
# distribute, modify, merge, sublicence, give away or sell it as long as the
# authors are given due credit and the following notice is retained:
#
# This work is provided "as is", with no explicit or implicit warranty what-
# soever. Use it only at your own risk. In no event may an author or contri-
# butor be held liable for any damage, directly or indirectly, that origina-
# ted through or is caused by creation or modification of this work.

MirBSD is my private tree. MirBSD does not differ very much from OpenBSD
and intentionally tracks OpenBSD. That's why it _is_ OpenBSD, just not the
official one. It's like with DarrenBSD.

At time of this writing, no advertising for MirBSD must be done,
because the advertising clause has not yet been sorted out.

http://templeofhate.com/tglaser/MirBSD/index.php
@
text
@@


1.1.1.2
log
@Sync of src/gnu with OpenBSD (promised a long time ago)
@
text
@d2 1
a2 1
   Copyright 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 2000, 2002, 2003
a23 1
#include "getopt.h"
d115 1
a115 1
bfd_boolean
d123 1
a123 1
  return FALSE;
d126 1
a126 1
bfd_boolean
d133 1
a133 1
  return FALSE;
d136 1
a136 24
void
ldemul_add_options (ns, shortopts, nl, longopts, nrl, really_longopts)
     int ns;
     char **shortopts;
     int nl;
     struct option **longopts;
     int nrl;
     struct option **really_longopts;
{
  if (ld_emulation->add_options)
    (*ld_emulation->add_options) (ns, shortopts, nl, longopts,
				  nrl, really_longopts);
}

bfd_boolean
ldemul_handle_option (optc)
     int optc;
{
  if (ld_emulation->handle_option)
    return (*ld_emulation->handle_option) (optc);
  return FALSE;
}

bfd_boolean
d143 4
a146 2
    return (*ld_emulation->parse_args) (argc, argv);
  return FALSE;
d151 1
a151 1
bfd_boolean
d157 1
a157 1
  return FALSE;
d162 1
a162 1
bfd_boolean
d168 1
a168 1
  return FALSE;
d172 1
a172 3
ldemul_choose_target (argc, argv)
     int argc;
     char **argv;
d174 1
a174 1
  return ld_emulation->choose_target (argc, argv);
a176 1

d180 1
a180 3
ldemul_default_target (argc, argv)
     int argc ATTRIBUTE_UNUSED;
     char **argv ATTRIBUTE_UNUSED;
d259 1
a259 1
  bfd_boolean first = TRUE;
d264 1
a264 1
	first = FALSE;
a304 9
}

struct bfd_elf_version_expr *
ldemul_new_vers_pattern (entry)
     struct bfd_elf_version_expr *entry;
{
  if (ld_emulation->new_vers_pattern)
    entry = (*ld_emulation->new_vers_pattern) (entry);
  return entry;
@

