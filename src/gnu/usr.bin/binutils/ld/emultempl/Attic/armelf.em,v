head	1.3;
access;
symbols
	binutils-2_15:1.1.2.3
	cvs-200406091940:1.1.1.2
	MIRBSD_7quater:1.2
	cvs-200405160640:1.1.1.1
	cvs-200401271800:1.1.1.1
	cvs-200401261630:1.1.1.1
	cvs-200401021645:1.1.1.1
	MIRBSD_7_ALPHA:1.2.0.6
	MIRBSD_7:1.2.0.4
	cvs-200312222040:1.1.1.1
	cvs-200312031730:1.1.1.1
	MIRBSD_7ter:1.2
	MIRBSD_7_DEV:1.2.0.2
	cvs-200310020700:1.1.1.1
	cvs-200309271030:1.1.1.1
	cvs-200309251530:1.1.1.1
	binutils_2_14:1.1.2.2
	binutils_2_11_2:1.1.2.1
	FSF:1.1.2
	cvs-200308302005:1.1.1.1
	cvs-200308171200:1.1.1.1
	ctm-3496:1.1.1.1
	ctm-3449:1.1.1.1
	ctm-3437:1.1.1.1
	cvs-200307191805:1.1.1.1
	ctm-3425:1.1.1.1
	cvs-200307091500:1.1.1.1
	ctm-3389:1.1.1.1
	cvs-200306291430:1.1.1.1
	ctm-3341:1.1.1.1
	MIRBSD_5:1.1.1.1
	cvs-200306082100:1.1.1.1
	ctm-3316:1.1.1.1
	ctm-3272:1.1.1.1
	ctm-3264:1.1.1.1
	cvs-200305071630:1.1.1.1
	ctm-3255:1.1.1.1
	MIRBSD_4:1.1.1.1
	ctm-3203:1.1.1.1
	cvs-20030410-1130:1.1.1.1
	ctm-3155:1.1.1.1
	ctm-3132:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@# @;


1.3
date	2004.08.11.21.22.35;	author tg;	state dead;
branches;
next	1.2;

1.2
date	2003.09.23.21.05.52;	author tg;	state Exp;
branches;
next	1.1;

1.1
date	2003.03.22.17.41.05;	author tg;	state Exp;
branches
	1.1.1.1
	1.1.2.1;
next	;

1.1.1.1
date	2003.03.22.17.41.05;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2004.06.09.20.25.30;	author tg;	state Exp;
branches;
next	;

1.1.2.1
date	2003.09.23.15.43.25;	author tg;	state Exp;
branches;
next	1.1.2.2;

1.1.2.2
date	2003.09.23.16.08.50;	author tg;	state Exp;
branches;
next	1.1.2.3;

1.1.2.3
date	2004.07.15.17.18.52;	author tg;	state Exp;
branches;
next	;


desc
@@


1.3
log
@remove old binutils
@
text
@# This shell script emits a C file. -*- C -*-
#   Copyright 1991, 1993, 1996, 1997, 1998, 1999, 2000, 2002, 2003
#   Free Software Foundation, Inc.
#
# This file is part of GLD, the Gnu Linker.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
#

# This file is sourced from elf32.em, and defines extra arm-elf
# specific routines.
#
cat >>e${EMULATION_NAME}.c <<EOF

static int no_pipeline_knowledge = 0;
static char *thumb_entry_symbol = NULL;
static bfd *bfd_for_interwork;


static void
gld${EMULATION_NAME}_before_parse ()
{
#ifndef TARGET_			/* I.e., if not generic.  */
  ldfile_set_output_arch ("`echo ${ARCH}`");
#endif /* not TARGET_ */
  config.dynamic_link = ${DYNAMIC_LINK-TRUE};
  config.has_shared = `if test -n "$GENERATE_SHLIB_SCRIPT" ; then echo TRUE ; else echo FALSE ; fi`;
}

static void arm_elf_after_open PARAMS ((void));

static void
arm_elf_after_open ()
{
  if (strstr (bfd_get_target (output_bfd), "arm") == NULL)
    {
      /* The arm backend needs special fields in the output hash structure.
	 These will only be created if the output format is an arm format,
	 hence we do not support linking and changing output formats at the
	 same time.  Use a link followed by objcopy to change output formats.  */
      einfo ("%F%X%P: error: cannot change output format whilst linking ARM binaries\n");
      return;
    }

  {
    LANG_FOR_EACH_INPUT_STATEMENT (is)
      {
	bfd_elf32_arm_add_glue_sections_to_bfd (is->the_bfd, & link_info);
      }
  }

  /* Call the standard elf routine.  */
  gld${EMULATION_NAME}_after_open ();
}

static void arm_elf_set_bfd_for_interworking
  PARAMS ((lang_statement_union_type *));

static void
arm_elf_set_bfd_for_interworking (statement)
     lang_statement_union_type *statement;
{
  if (statement->header.type == lang_input_section_enum
      && !statement->input_section.ifile->just_syms_flag)
    {
      asection *i = statement->input_section.section;
      asection *output_section = i->output_section;

      ASSERT (output_section->owner == output_bfd);

      if ((output_section->flags & SEC_HAS_CONTENTS) != 0
	  && (i->flags & SEC_NEVER_LOAD) == 0
	  && ! i->owner->output_has_begun)
	{
	  bfd_for_interwork = i->owner;
	  bfd_for_interwork->output_has_begun = TRUE;
	}
    }
}

static void arm_elf_before_allocation PARAMS ((void));

static void
arm_elf_before_allocation ()
{
  bfd *tem;

  /* Call the standard elf routine.  */
  gld${EMULATION_NAME}_before_allocation ();

  if (link_info.input_bfds != NULL)
    {
      /* The interworking bfd must be the last one in the link.  */
      bfd_for_interwork = NULL;
      for (tem = link_info.input_bfds; tem != NULL; tem = tem->link_next)
	tem->output_has_begun = FALSE;

      lang_for_each_statement (arm_elf_set_bfd_for_interworking);
      for (tem = link_info.input_bfds; tem != NULL; tem = tem->link_next)
	tem->output_has_begun = FALSE;

      /* If bfd_for_interwork is NULL, then there are no loadable sections
	 with real contents to be linked, so we are not going to have to
	 create any interworking stubs, so it is OK not to call
	 bfd_elf32_arm_get_bfd_for_interworking.  */
      if (bfd_for_interwork != NULL)
	bfd_elf32_arm_get_bfd_for_interworking (bfd_for_interwork, &link_info);
    }
  /* We should be able to set the size of the interworking stub section.  */

  /* Here we rummage through the found bfds to collect glue information.  */
  /* FIXME: should this be based on a command line option? krk@@cygnus.com  */
  {
    LANG_FOR_EACH_INPUT_STATEMENT (is)
      {
	if (!bfd_elf32_arm_process_before_allocation (is->the_bfd, & link_info,
						      no_pipeline_knowledge))
	  {
	    /* xgettext:c-format */
	    einfo (_("Errors encountered processing file %s"), is->filename);
	  }
      }
  }

  /* We have seen it all. Allocate it, and carry on.  */
  bfd_elf32_arm_allocate_interworking_sections (& link_info);
}

static void arm_elf_finish PARAMS ((void));

static void
arm_elf_finish ()
{
  struct bfd_link_hash_entry * h;

  /* Call the elf32.em routine.  */
  gld${EMULATION_NAME}_finish ();

  if (thumb_entry_symbol == NULL)
    return;
  
  h = bfd_link_hash_lookup (link_info.hash, thumb_entry_symbol,
			    FALSE, FALSE, TRUE);

  if (h != (struct bfd_link_hash_entry *) NULL
      && (h->type == bfd_link_hash_defined
	  || h->type == bfd_link_hash_defweak)
      && h->u.def.section->output_section != NULL)
    {
      static char buffer[32];
      bfd_vma val;
      
      /* Special procesing is required for a Thumb entry symbol.  The
	 bottom bit of its address must be set.  */
      val = (h->u.def.value
	     + bfd_get_section_vma (output_bfd,
				    h->u.def.section->output_section)
	     + h->u.def.section->output_offset);
      
      val |= 1;

      /* Now convert this value into a string and store it in entry_symbol
         where the lang_finish() function will pick it up.  */
      buffer[0] = '0';
      buffer[1] = 'x';
      
      sprintf_vma (buffer + 2, val);

      if (entry_symbol.name != NULL && entry_from_cmdline)
	einfo (_("%P: warning: '--thumb-entry %s' is overriding '-e %s'\n"),
	       thumb_entry_symbol, entry_symbol.name);
      entry_symbol.name = buffer;
    }
  else
    einfo (_("%P: warning: connot find thumb start symbol %s\n"),
	   thumb_entry_symbol);
}

EOF

# Define some shell vars to insert bits of code into the standard elf
# parse_args and list_options functions.
#
PARSE_AND_LIST_PROLOGUE='
#define OPTION_THUMB_ENTRY		301
'

PARSE_AND_LIST_SHORTOPTS=p

PARSE_AND_LIST_LONGOPTS='
  { "no-pipeline-knowledge", no_argument, NULL, '\'p\''},
  { "thumb-entry", required_argument, NULL, OPTION_THUMB_ENTRY},
'

PARSE_AND_LIST_OPTIONS='
  fprintf (file, _("  -p --no-pipeline-knowledge  Stop the linker knowing about the pipeline length\n"));
  fprintf (file, _("     --thumb-entry=<sym>      Set the entry point to be Thumb symbol <sym>\n"));
'

PARSE_AND_LIST_ARGS_CASES='
    case '\'p\'':
      no_pipeline_knowledge = 1;
      break;

    case OPTION_THUMB_ENTRY:
      thumb_entry_symbol = optarg;
      break;
'

# We have our own after_open and before_allocation functions, but they call
# the standard routines, so give them a different name.
LDEMUL_AFTER_OPEN=arm_elf_after_open
LDEMUL_BEFORE_ALLOCATION=arm_elf_before_allocation

# Replace the elf before_parse function with our own.
LDEMUL_BEFORE_PARSE=gld"${EMULATION_NAME}"_before_parse

# Call the extra arm-elf function
LDEMUL_FINISH=arm_elf_finish
@


1.2
log
@looks as if some sour wine (Federweiﬂer <german>, for an English
description see http://forum.leo.org/archiv/2002_11/04/20021104125717e_en.html)
could help me to bear the pain upgrading binutils to 2.14

todo:
 - test if this works at all
 - test if this works
 - test if nothing breaks
 - nuke all occurences of "false" and "true" in binutils (including gdb),
   see bfd.h "Poison" for reference
 - talk to the OpenBSD people, ask them if they could improve this
@
text
@@


1.1
log
@Initial revision
@
text
@d2 1
a2 1
#   Copyright 1991, 1993, 1996, 1997, 1998, 1999, 2000
d29 1
d38 2
a39 2
  config.dynamic_link = ${DYNAMIC_LINK-true};
  config.has_shared = `if test -n "$GENERATE_SHLIB_SCRIPT" ; then echo true ; else echo false ; fi`;
d42 1
a42 2

static void arm_elf_after_open PARAMS((void));
d60 1
a60 3
	/* The interworking bfd must be the last one to be processed */
	if (!is->next)
	  bfd_elf32_arm_get_bfd_for_interworking (is->the_bfd, & link_info);
d68 24
d98 2
d103 19
a121 1
  /* We should be able to set the size of the interworking stub section */
d123 2
a124 2
  /* Here we rummage through the found bfds to collect glue information */
  /* FIXME: should this be based on a command line option? krk@@cygnus.com */
d137 1
a137 1
  /* We have seen it all. Allocate it, and carry on */
d141 1
a141 2

static void gld${EMULATION_NAME}_finish PARAMS ((void));
d144 1
a144 1
gld${EMULATION_NAME}_finish PARAMS((void))
d148 3
d155 1
a155 1
			    false, false, true);
d181 1
a181 1
      if (entry_symbol != NULL && entry_from_cmdline)
d183 2
a184 2
	       thumb_entry_symbol, entry_symbol);
      entry_symbol = buffer;
d231 1
a231 1
LDEMUL_FINISH=gld${EMULATION_NAME}_finish
@


1.1.2.1
log
@vendor-branch-i-fy GNU binutils (2.11.2) to facilitate an update
@
text
@@


1.1.2.2
log
@Import GNU binutils 2.14 from the Free Software Foundation
(in case the update goes FUBAR, it can be easily backed off)
@
text
@d2 1
a2 1
#   Copyright 1991, 1993, 1996, 1997, 1998, 1999, 2000, 2002, 2003
a28 1
static bfd *bfd_for_interwork;
d37 2
a38 2
  config.dynamic_link = ${DYNAMIC_LINK-TRUE};
  config.has_shared = `if test -n "$GENERATE_SHLIB_SCRIPT" ; then echo TRUE ; else echo FALSE ; fi`;
d41 2
a42 1
static void arm_elf_after_open PARAMS ((void));
d60 3
a62 1
	bfd_elf32_arm_add_glue_sections_to_bfd (is->the_bfd, & link_info);
a69 24
static void arm_elf_set_bfd_for_interworking
  PARAMS ((lang_statement_union_type *));

static void
arm_elf_set_bfd_for_interworking (statement)
     lang_statement_union_type *statement;
{
  if (statement->header.type == lang_input_section_enum
      && !statement->input_section.ifile->just_syms_flag)
    {
      asection *i = statement->input_section.section;
      asection *output_section = i->output_section;

      ASSERT (output_section->owner == output_bfd);

      if ((output_section->flags & SEC_HAS_CONTENTS) != 0
	  && (i->flags & SEC_NEVER_LOAD) == 0
	  && ! i->owner->output_has_begun)
	{
	  bfd_for_interwork = i->owner;
	  bfd_for_interwork->output_has_begun = TRUE;
	}
    }
}
a75 2
  bfd *tem;

d79 1
a79 19
  if (link_info.input_bfds != NULL)
    {
      /* The interworking bfd must be the last one in the link.  */
      bfd_for_interwork = NULL;
      for (tem = link_info.input_bfds; tem != NULL; tem = tem->link_next)
	tem->output_has_begun = FALSE;

      lang_for_each_statement (arm_elf_set_bfd_for_interworking);
      for (tem = link_info.input_bfds; tem != NULL; tem = tem->link_next)
	tem->output_has_begun = FALSE;

      /* If bfd_for_interwork is NULL, then there are no loadable sections
	 with real contents to be linked, so we are not going to have to
	 create any interworking stubs, so it is OK not to call
	 bfd_elf32_arm_get_bfd_for_interworking.  */
      if (bfd_for_interwork != NULL)
	bfd_elf32_arm_get_bfd_for_interworking (bfd_for_interwork, &link_info);
    }
  /* We should be able to set the size of the interworking stub section.  */
d81 2
a82 2
  /* Here we rummage through the found bfds to collect glue information.  */
  /* FIXME: should this be based on a command line option? krk@@cygnus.com  */
d95 1
a95 1
  /* We have seen it all. Allocate it, and carry on.  */
d99 2
a100 1
static void arm_elf_finish PARAMS ((void));
d103 1
a103 1
arm_elf_finish ()
a106 3
  /* Call the elf32.em routine.  */
  gld${EMULATION_NAME}_finish ();

d111 1
a111 1
			    FALSE, FALSE, TRUE);
d137 1
a137 1
      if (entry_symbol.name != NULL && entry_from_cmdline)
d139 2
a140 2
	       thumb_entry_symbol, entry_symbol.name);
      entry_symbol.name = buffer;
d187 1
a187 1
LDEMUL_FINISH=arm_elf_finish
@


1.1.2.3
log
@GNU Binutils, version 2.15
@
text
@d2 1
a2 1
#   Copyright 1991, 1993, 1996, 1997, 1998, 1999, 2000, 2002, 2003, 2004
d31 1
d33 1
a33 1
gld${EMULATION_NAME}_before_parse (void)
d36 1
a36 1
  ldfile_set_output_arch ("`echo ${ARCH}`", bfd_arch_unknown);
d42 2
d45 1
a45 1
arm_elf_after_open (void)
d68 3
d72 2
a73 1
arm_elf_set_bfd_for_interworking (lang_statement_union_type *statement)
d93 2
d96 1
a96 1
arm_elf_before_allocation (void)
d141 2
d144 1
a144 1
arm_elf_finish (void)
d153 1
a153 1

d164 1
a164 1

d171 1
a171 1

d175 1
a175 1
	 where the lang_finish() function will pick it up.  */
d178 1
a178 1

@


1.1.1.1
log
@Import OpenBSD 3.3 source repository from CTM 3132 the first time
This opens an OpenBSD-mirabile (aka MirBSD) repository.

### MirBSD is:
# Copyright (c) 1982-2003 by Thorsten "mirabile" Glaser <x86@@ePost.de>
# Copyright © 1968-2003  The authors of And contributors to UNIXÆ, the
#       C Language, BSD/Berkeley Unix; 386BSD, NetBSD 1.1 and OpenBSD.
#
# Anyone who obtained a copy of this work is hereby permitted to freely use,
# distribute, modify, merge, sublicence, give away or sell it as long as the
# authors are given due credit and the following notice is retained:
#
# This work is provided "as is", with no explicit or implicit warranty what-
# soever. Use it only at your own risk. In no event may an author or contri-
# butor be held liable for any damage, directly or indirectly, that origina-
# ted through or is caused by creation or modification of this work.

MirBSD is my private tree. MirBSD does not differ very much from OpenBSD
and intentionally tracks OpenBSD. That's why it _is_ OpenBSD, just not the
official one. It's like with DarrenBSD.

At time of this writing, no advertising for MirBSD must be done,
because the advertising clause has not yet been sorted out.

http://templeofhate.com/tglaser/MirBSD/index.php
@
text
@@


1.1.1.2
log
@Sync of src/gnu with OpenBSD (promised a long time ago)
@
text
@d2 1
a2 1
#   Copyright 1991, 1993, 1996, 1997, 1998, 1999, 2000, 2002, 2003
a28 1
static bfd *bfd_for_interwork;
d37 2
a38 2
  config.dynamic_link = ${DYNAMIC_LINK-TRUE};
  config.has_shared = `if test -n "$GENERATE_SHLIB_SCRIPT" ; then echo TRUE ; else echo FALSE ; fi`;
d41 2
a42 1
static void arm_elf_after_open PARAMS ((void));
d60 3
a62 1
	bfd_elf32_arm_add_glue_sections_to_bfd (is->the_bfd, & link_info);
a69 24
static void arm_elf_set_bfd_for_interworking
  PARAMS ((lang_statement_union_type *));

static void
arm_elf_set_bfd_for_interworking (statement)
     lang_statement_union_type *statement;
{
  if (statement->header.type == lang_input_section_enum
      && !statement->input_section.ifile->just_syms_flag)
    {
      asection *i = statement->input_section.section;
      asection *output_section = i->output_section;

      ASSERT (output_section->owner == output_bfd);

      if ((output_section->flags & SEC_HAS_CONTENTS) != 0
	  && (i->flags & SEC_NEVER_LOAD) == 0
	  && ! i->owner->output_has_begun)
	{
	  bfd_for_interwork = i->owner;
	  bfd_for_interwork->output_has_begun = TRUE;
	}
    }
}
a75 2
  bfd *tem;

d79 1
a79 19
  if (link_info.input_bfds != NULL)
    {
      /* The interworking bfd must be the last one in the link.  */
      bfd_for_interwork = NULL;
      for (tem = link_info.input_bfds; tem != NULL; tem = tem->link_next)
	tem->output_has_begun = FALSE;

      lang_for_each_statement (arm_elf_set_bfd_for_interworking);
      for (tem = link_info.input_bfds; tem != NULL; tem = tem->link_next)
	tem->output_has_begun = FALSE;

      /* If bfd_for_interwork is NULL, then there are no loadable sections
	 with real contents to be linked, so we are not going to have to
	 create any interworking stubs, so it is OK not to call
	 bfd_elf32_arm_get_bfd_for_interworking.  */
      if (bfd_for_interwork != NULL)
	bfd_elf32_arm_get_bfd_for_interworking (bfd_for_interwork, &link_info);
    }
  /* We should be able to set the size of the interworking stub section.  */
d81 2
a82 2
  /* Here we rummage through the found bfds to collect glue information.  */
  /* FIXME: should this be based on a command line option? krk@@cygnus.com  */
d95 1
a95 1
  /* We have seen it all. Allocate it, and carry on.  */
d99 2
a100 1
static void arm_elf_finish PARAMS ((void));
d103 1
a103 1
arm_elf_finish ()
a106 3
  /* Call the elf32.em routine.  */
  gld${EMULATION_NAME}_finish ();

d111 1
a111 1
			    FALSE, FALSE, TRUE);
d137 1
a137 1
      if (entry_symbol.name != NULL && entry_from_cmdline)
d139 2
a140 2
	       thumb_entry_symbol, entry_symbol.name);
      entry_symbol.name = buffer;
d187 1
a187 1
LDEMUL_FINISH=arm_elf_finish
@

