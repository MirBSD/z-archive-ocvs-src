head	1.3;
access;
symbols
	binutils-2_15:1.1.2.3
	cvs-200406091940:1.1.1.2
	MIRBSD_7quater:1.2
	cvs-200405160640:1.1.1.1
	cvs-200401271800:1.1.1.1
	cvs-200401261630:1.1.1.1
	cvs-200401021645:1.1.1.1
	MIRBSD_7_ALPHA:1.2.0.6
	MIRBSD_7:1.2.0.4
	cvs-200312222040:1.1.1.1
	cvs-200312031730:1.1.1.1
	MIRBSD_7ter:1.2
	MIRBSD_7_DEV:1.2.0.2
	cvs-200310020700:1.1.1.1
	cvs-200309271030:1.1.1.1
	cvs-200309251530:1.1.1.1
	binutils_2_14:1.1.2.2
	binutils_2_11_2:1.1.2.1
	FSF:1.1.2
	cvs-200308302005:1.1.1.1
	cvs-200308171200:1.1.1.1
	ctm-3496:1.1.1.1
	ctm-3449:1.1.1.1
	ctm-3437:1.1.1.1
	cvs-200307191805:1.1.1.1
	ctm-3425:1.1.1.1
	cvs-200307091500:1.1.1.1
	ctm-3389:1.1.1.1
	cvs-200306291430:1.1.1.1
	ctm-3341:1.1.1.1
	MIRBSD_5:1.1.1.1
	cvs-200306082100:1.1.1.1
	ctm-3316:1.1.1.1
	ctm-3272:1.1.1.1
	ctm-3264:1.1.1.1
	cvs-200305071630:1.1.1.1
	ctm-3255:1.1.1.1
	MIRBSD_4:1.1.1.1
	ctm-3203:1.1.1.1
	cvs-20030410-1130:1.1.1.1
	ctm-3155:1.1.1.1
	ctm-3132:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@# @;


1.3
date	2004.08.11.21.22.52;	author tg;	state dead;
branches;
next	1.2;

1.2
date	2003.09.23.21.05.58;	author tg;	state Exp;
branches;
next	1.1;

1.1
date	2003.03.22.17.41.05;	author tg;	state Exp;
branches
	1.1.1.1
	1.1.2.1;
next	;

1.1.1.1
date	2003.03.22.17.41.05;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2004.06.09.20.25.33;	author tg;	state Exp;
branches;
next	;

1.1.2.1
date	2003.09.23.15.43.27;	author tg;	state Exp;
branches;
next	1.1.2.2;

1.1.2.2
date	2003.09.23.16.08.51;	author tg;	state Exp;
branches;
next	1.1.2.3;

1.1.2.3
date	2004.07.15.17.18.59;	author tg;	state Exp;
branches;
next	;


desc
@@


1.3
log
@remove old binutils
@
text
@# This shell script emits a C file. -*- C -*-
# It does some substitutions.
(echo;echo;echo;echo)>e${EMULATION_NAME}.c # there, now line numbers match ;-)
cat >>e${EMULATION_NAME}.c <<EOF
/* This file is part of GLD, the Gnu Linker.
   Copyright 1999, 2000, 2002, 2003 Free Software Foundation, Inc.

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */

/* For TI COFF */
/* Need to determine load and run pages for output sections */ 
  
#define TARGET_IS_${EMULATION_NAME}

#include "bfd.h"
#include "sysdep.h"
#include "bfdlink.h"
#include "getopt.h"

#include "ld.h"
#include "ldmain.h"
#include "ldmisc.h"
#include "ldexp.h"
#include "ldlang.h"
#include "ldfile.h"
#include "ldemul.h"

static int coff_version;

static void gld_${EMULATION_NAME}_before_parse PARAMS ((void));
static char *gld_${EMULATION_NAME}_get_script PARAMS ((int *));
static void gld${EMULATION_NAME}_add_options
  PARAMS ((int, char **, int, struct option **, int, struct option **));
static bfd_boolean gld${EMULATION_NAME}_handle_option PARAMS ((int));
static void gld_${EMULATION_NAME}_list_options PARAMS ((FILE *));

/* TI COFF extra command line options */
#define OPTION_COFF_FORMAT		(300 + 1)

static void
gld${EMULATION_NAME}_add_options (ns, shortopts, nl, longopts, nrl, really_longopts)
     int ns ATTRIBUTE_UNUSED;
     char **shortopts ATTRIBUTE_UNUSED;
     int nl;
     struct option **longopts;
     int nrl ATTRIBUTE_UNUSED;
     struct option **really_longopts ATTRIBUTE_UNUSED;
{
  static const struct option xtra_long[] = {
    /* TI COFF options */
    {"format", required_argument, NULL, OPTION_COFF_FORMAT },
    {NULL, no_argument, NULL, 0}
  };

  *longopts = (struct option *)
    xrealloc (*longopts, nl * sizeof (struct option) + sizeof (xtra_long));
  memcpy (*longopts + nl, &xtra_long, sizeof (xtra_long));
}

static void
gld_${EMULATION_NAME}_list_options (file)
    FILE * file;
{
  fprintf (file, _("  --format 0|1|2         Specify which COFF version to use"));
}				  

static bfd_boolean
gld${EMULATION_NAME}_handle_option (optc)
     int optc;
{
  switch (optc)
    {
    default:
      return FALSE;

    case OPTION_COFF_FORMAT:
      if ((*optarg == '0' || *optarg == '1' || *optarg == '2')
          && optarg[1] == '\0')
      {
        extern void lang_add_output_format
          PARAMS ((const char *, const char *, const char *, int));
        static char buf[] = "coffX-${OUTPUT_FORMAT_TEMPLATE}";
        coff_version = *optarg - '0';
        buf[4] = *optarg;
	lang_add_output_format (buf, NULL, NULL, 0);	
      }
      else
        {
	  einfo (_("%P%F: invalid COFF format version %s\n"), optarg);
        }
      break;
    }
  return FALSE;
}

static void
gld_${EMULATION_NAME}_before_parse()
{
#ifndef TARGET_			/* I.e., if not generic.  */
  ldfile_set_output_arch ("`echo ${ARCH}`");
#endif /* not TARGET_ */
}

static char *
gld_${EMULATION_NAME}_get_script (isfile)
     int *isfile;
EOF
if test -n "$COMPILE_IN"
then
# Scripts compiled in.

# sed commands to quote an ld script as a C string.
sc='s/["\\]/\\&/g
s/$/\\n\\/
1s/^/"/
$s/$/n"/
'
cat >>e${EMULATION_NAME}.c <<EOF
{			     
  *isfile = 0;
  if (link_info.relocateable && config.build_constructors)
    return `sed "$sc" ldscripts/${EMULATION_NAME}.xu`;
  else if (link_info.relocateable)
    return `sed "$sc" ldscripts/${EMULATION_NAME}.xr`;
  else if (!config.text_read_only)
    return `sed "$sc" ldscripts/${EMULATION_NAME}.xbn`;
  else if (!config.magic_demand_paged)
    return `sed "$sc" ldscripts/${EMULATION_NAME}.xn`;
  else
    return `sed "$sc" ldscripts/${EMULATION_NAME}.x`;
}
EOF

else
# Scripts read from the filesystem.

cat >>e${EMULATION_NAME}.c <<EOF
{			     
  *isfile = 1;

  if (link_info.relocateable && config.build_constructors)
    return "ldscripts/${EMULATION_NAME}.xu";
  else if (link_info.relocateable)
    return "ldscripts/${EMULATION_NAME}.xr";
  else if (!config.text_read_only)
    return "ldscripts/${EMULATION_NAME}.xbn";
  else if (!config.magic_demand_paged)
    return "ldscripts/${EMULATION_NAME}.xn";
  else
    return "ldscripts/${EMULATION_NAME}.x";
}
EOF

fi

cat >>e${EMULATION_NAME}.c <<EOF
struct ld_emulation_xfer_struct ld_${EMULATION_NAME}_emulation = 
{
  gld_${EMULATION_NAME}_before_parse,
  syslib_default,
  hll_default,
  after_parse_default,
  after_open_default,
  after_allocation_default,
  set_output_arch_default,
  ldemul_default_target,
  before_allocation_default,
  gld_${EMULATION_NAME}_get_script,
  "${EMULATION_NAME}",
  "${OUTPUT_FORMAT}",
  NULL, /* finish */
  NULL, /* create output section statements */
  NULL, /* open dynamic archive */
  NULL, /* place orphan */
  NULL, /* set_symbols */
  NULL, /* parse_args */
  gld${EMULATION_NAME}_add_options,
  gld${EMULATION_NAME}_handle_option,
  NULL, /* unrecognized_file */
  gld_${EMULATION_NAME}_list_options,
  NULL, /* recognized file */
  NULL,	/* find_potential_libraries */
  NULL	/* new_vers_pattern */
};
EOF
@


1.2
log
@looks as if some sour wine (Federweißer <german>, for an English
description see http://forum.leo.org/archiv/2002_11/04/20021104125717e_en.html)
could help me to bear the pain upgrading binutils to 2.14

todo:
 - test if this works at all
 - test if this works
 - test if nothing breaks
 - nuke all occurences of "false" and "true" in binutils (including gdb),
   see bfd.h "Poison" for reference
 - talk to the OpenBSD people, ask them if they could improve this
@
text
@@


1.1
log
@Initial revision
@
text
@d6 1
a6 1
   Copyright 1999, 2000 Free Software Foundation, Inc.
d30 1
a34 1

a39 2
#include "getopt.h"

d44 3
a46 1
static int gld_${EMULATION_NAME}_parse_args PARAMS ((int, char **));
d52 8
a59 1
static struct option longopts[] = 
d61 10
a70 4
  /* TI COFF options */
  {"format", required_argument, NULL, OPTION_COFF_FORMAT },
  {NULL, no_argument, NULL, 0}
};
d79 3
a81 4
static int
gld_${EMULATION_NAME}_parse_args(argc, argv)
     int argc;
     char **argv;
a82 16
  int longind;
  int optc;
  int prevoptind = optind;
  int prevopterr = opterr;
  int wanterror;
  static int lastoptind = -1;

  if (lastoptind != optind)
    opterr = 0;
  wanterror = opterr;

  lastoptind = optind;

  optc = getopt_long_only (argc, argv, "-", longopts, &longind);
  opterr = prevopterr;

d86 1
a86 4
      if (wanterror)
	xexit (1);
      optind =  prevoptind;
      return 0;
a101 1

d105 1
a105 1
  return 1;
d133 1
a133 1
  if (link_info.relocateable == true && config.build_constructors == true)
d135 1
a135 1
  else if (link_info.relocateable == true)
d153 1
a153 1
  if (link_info.relocateable == true && config.build_constructors == true)
d155 1
a155 1
  else if (link_info.relocateable == true)
d188 3
a190 1
  gld_${EMULATION_NAME}_parse_args,
d194 2
a195 1
  NULL 	/* find_potential_libraries */
@


1.1.2.1
log
@vendor-branch-i-fy GNU binutils (2.11.2) to facilitate an update
@
text
@@


1.1.2.2
log
@Import GNU binutils 2.14 from the Free Software Foundation
(in case the update goes FUBAR, it can be easily backed off)
@
text
@d6 1
a6 1
   Copyright 1999, 2000, 2002, 2003 Free Software Foundation, Inc.
a29 1
#include "getopt.h"
d34 1
d40 2
d46 1
a46 3
static void gld${EMULATION_NAME}_add_options
  PARAMS ((int, char **, int, struct option **, int, struct option **));
static bfd_boolean gld${EMULATION_NAME}_handle_option PARAMS ((int));
d52 1
a52 8
static void
gld${EMULATION_NAME}_add_options (ns, shortopts, nl, longopts, nrl, really_longopts)
     int ns ATTRIBUTE_UNUSED;
     char **shortopts ATTRIBUTE_UNUSED;
     int nl;
     struct option **longopts;
     int nrl ATTRIBUTE_UNUSED;
     struct option **really_longopts ATTRIBUTE_UNUSED;
d54 4
a57 10
  static const struct option xtra_long[] = {
    /* TI COFF options */
    {"format", required_argument, NULL, OPTION_COFF_FORMAT },
    {NULL, no_argument, NULL, 0}
  };

  *longopts = (struct option *)
    xrealloc (*longopts, nl * sizeof (struct option) + sizeof (xtra_long));
  memcpy (*longopts + nl, &xtra_long, sizeof (xtra_long));
}
d66 4
a69 3
static bfd_boolean
gld${EMULATION_NAME}_handle_option (optc)
     int optc;
d71 16
d90 4
a93 1
      return FALSE;
d109 1
d113 1
a113 1
  return FALSE;
d141 1
a141 1
  if (link_info.relocateable && config.build_constructors)
d143 1
a143 1
  else if (link_info.relocateable)
d161 1
a161 1
  if (link_info.relocateable && config.build_constructors)
d163 1
a163 1
  else if (link_info.relocateable)
d196 1
a196 3
  NULL, /* parse_args */
  gld${EMULATION_NAME}_add_options,
  gld${EMULATION_NAME}_handle_option,
d200 1
a200 2
  NULL,	/* find_potential_libraries */
  NULL	/* new_vers_pattern */
@


1.1.2.3
log
@GNU Binutils, version 2.15
@
text
@d6 1
a6 1
   Copyright 1999, 2000, 2002, 2003, 2004 Free Software Foundation, Inc.
d23 2
a24 2
/* Need to determine load and run pages for output sections */

d42 7
d53 7
a59 4
gld${EMULATION_NAME}_add_options
  (int ns ATTRIBUTE_UNUSED, char **shortopts ATTRIBUTE_UNUSED, int nl,
   struct option **longopts, int nrl ATTRIBUTE_UNUSED,
   struct option **really_longopts ATTRIBUTE_UNUSED)
d73 2
a74 1
gld_${EMULATION_NAME}_list_options (FILE * file)
d76 2
a77 2
  fprintf (file, _("  --format 0|1|2         Specify which COFF version to use\n"));
}
d80 2
a81 1
gld${EMULATION_NAME}_handle_option (int optc)
d92 2
d97 1
a97 1
	lang_add_output_format (buf, NULL, NULL, 0);
d109 1
a109 1
gld_${EMULATION_NAME}_before_parse(void)
d112 1
a112 1
  ldfile_set_output_arch ("`echo ${ARCH}`", bfd_arch_unknown);
d117 2
a118 1
gld_${EMULATION_NAME}_get_script (int *isfile)
d131 1
a131 1
{
d133 1
a133 1
  if (link_info.relocatable && config.build_constructors)
d135 1
a135 1
  else if (link_info.relocatable)
d150 1
a150 1
{
d153 1
a153 1
  if (link_info.relocatable && config.build_constructors)
d155 1
a155 1
  else if (link_info.relocatable)
d169 1
a169 1
struct ld_emulation_xfer_struct ld_${EMULATION_NAME}_emulation =
@


1.1.1.1
log
@Import OpenBSD 3.3 source repository from CTM 3132 the first time
This opens an OpenBSD-mirabile (aka MirBSD) repository.

### MirBSD is:
# Copyright (c) 1982-2003 by Thorsten "mirabile" Glaser <x86@@ePost.de>
# Copyright © 1968-2003  The authors of And contributors to UNIX®, the
#       C Language, BSD/Berkeley Unix; 386BSD, NetBSD 1.1 and OpenBSD.
#
# Anyone who obtained a copy of this work is hereby permitted to freely use,
# distribute, modify, merge, sublicence, give away or sell it as long as the
# authors are given due credit and the following notice is retained:
#
# This work is provided "as is", with no explicit or implicit warranty what-
# soever. Use it only at your own risk. In no event may an author or contri-
# butor be held liable for any damage, directly or indirectly, that origina-
# ted through or is caused by creation or modification of this work.

MirBSD is my private tree. MirBSD does not differ very much from OpenBSD
and intentionally tracks OpenBSD. That's why it _is_ OpenBSD, just not the
official one. It's like with DarrenBSD.

At time of this writing, no advertising for MirBSD must be done,
because the advertising clause has not yet been sorted out.

http://templeofhate.com/tglaser/MirBSD/index.php
@
text
@@


1.1.1.2
log
@Sync of src/gnu with OpenBSD (promised a long time ago)
@
text
@d6 1
a6 1
   Copyright 1999, 2000, 2002, 2003 Free Software Foundation, Inc.
a29 1
#include "getopt.h"
d34 1
d40 2
d46 1
a46 3
static void gld${EMULATION_NAME}_add_options
  PARAMS ((int, char **, int, struct option **, int, struct option **));
static bfd_boolean gld${EMULATION_NAME}_handle_option PARAMS ((int));
d52 1
a52 8
static void
gld${EMULATION_NAME}_add_options (ns, shortopts, nl, longopts, nrl, really_longopts)
     int ns ATTRIBUTE_UNUSED;
     char **shortopts ATTRIBUTE_UNUSED;
     int nl;
     struct option **longopts;
     int nrl ATTRIBUTE_UNUSED;
     struct option **really_longopts ATTRIBUTE_UNUSED;
d54 4
a57 10
  static const struct option xtra_long[] = {
    /* TI COFF options */
    {"format", required_argument, NULL, OPTION_COFF_FORMAT },
    {NULL, no_argument, NULL, 0}
  };

  *longopts = (struct option *)
    xrealloc (*longopts, nl * sizeof (struct option) + sizeof (xtra_long));
  memcpy (*longopts + nl, &xtra_long, sizeof (xtra_long));
}
d66 4
a69 3
static bfd_boolean
gld${EMULATION_NAME}_handle_option (optc)
     int optc;
d71 16
d90 4
a93 1
      return FALSE;
d109 1
d113 1
a113 1
  return FALSE;
d141 1
a141 1
  if (link_info.relocateable && config.build_constructors)
d143 1
a143 1
  else if (link_info.relocateable)
d161 1
a161 1
  if (link_info.relocateable && config.build_constructors)
d163 1
a163 1
  else if (link_info.relocateable)
d196 1
a196 3
  NULL, /* parse_args */
  gld${EMULATION_NAME}_add_options,
  gld${EMULATION_NAME}_handle_option,
d200 1
a200 2
  NULL,	/* find_potential_libraries */
  NULL	/* new_vers_pattern */
@

