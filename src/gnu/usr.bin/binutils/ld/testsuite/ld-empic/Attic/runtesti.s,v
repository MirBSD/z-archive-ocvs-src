head	1.2;
access;
symbols
	binutils-2_15:1.1.2.1
	cvs-200405160640:1.1.1.1
	cvs-200401271800:1.1.1.1
	cvs-200401261630:1.1.1.1
	cvs-200401021645:1.1.1.1
	cvs-200312222040:1.1.1.1
	cvs-200312031730:1.1.1.1
	cvs-200310020700:1.1.1.1
	cvs-200309271030:1.1.1.1
	cvs-200309251530:1.1.1.1
	binutils_2_14:1.1.2.1
	binutils_2_11_2:1.1.2.1
	FSF:1.1.2
	cvs-200308302005:1.1.1.1
	cvs-200308171200:1.1.1.1
	ctm-3496:1.1.1.1
	ctm-3449:1.1.1.1
	ctm-3437:1.1.1.1
	cvs-200307191805:1.1.1.1
	ctm-3425:1.1.1.1
	cvs-200307091500:1.1.1.1
	ctm-3389:1.1.1.1
	cvs-200306291430:1.1.1.1
	ctm-3341:1.1.1.1
	cvs-200306082100:1.1.1.1
	ctm-3316:1.1.1.1
	ctm-3272:1.1.1.1
	ctm-3264:1.1.1.1
	cvs-200305071630:1.1.1.1
	ctm-3255:1.1.1.1
	MIRBSD_4:1.1.1.1
	ctm-3203:1.1.1.1
	cvs-20030410-1130:1.1.1.1
	ctm-3155:1.1.1.1
	ctm-3132:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@# @;


1.2
date	2003.05.16.17.43.24;	author tg;	state dead;
branches;
next	1.1;

1.1
date	2003.03.22.17.41.08;	author tg;	state Exp;
branches
	1.1.1.1
	1.1.2.1;
next	;

1.1.1.1
date	2003.03.22.17.41.08;	author tg;	state Exp;
branches;
next	;

1.1.2.1
date	2003.09.23.15.43.30;	author tg;	state Exp;
branches;
next	;


desc
@@


1.2
log
@remove the FSF changelog files and other unused files; use cvsweb or anoncvs to retrieve them
@
text
@# Assembler initialization code for actual execution test.
	
# This code becomes the start of the execution test program.  It is
# responsible for initializing the static data, invoking the C code,
# and returning the result.  It is called as though it were a C
# function with an argument of the address of the data segment.

# We need to know the value of _ftext and _fdata at link time, but we
# have no way to actually get that at runtime.  This is because when
# this code is compiled with -membedded-pic, the la instruction will
# be turned into an addiu $gp instruction.  We work around this by
# storing the information in words in the .data section.  We then load
# the values of these words *before* doing the runtime relocation.
	.sdata
text_start:
	.word	_ftext
data_start:
	.word	_fdata

	.globl	start
	.text
start:
	# Grab some space on the stack, just as though we were a real
	# function.
	addiu	$sp,$sp,-8
	sw	$31,0($sp)

	# Save the $gp register, and set it up for our data section.
	sw	$gp,4($sp)

	addu	$gp,$4,0x8000		# macro

	# The start of the data segment is in $4.

	# Get the address of start into $5 in a position independent
	# fashion.
	.set	noreorder
	$LF1 = . + 8
	bal	$LF1
	la	$5,start-$LF1		# macro
	.set	reorder
	addu	$5,$5,$31

	# Now get the address of _ftext into $6.
	la	$6,_ftext-start		# macro
	addu	$6,$6,$5

	# Get the value of _ftext used to link into $7.
	lw	$7,text_start		# macro

	# Get the value of _fdata used to link into $8.
	lw	$8,data_start		# macro

	# Get the address of __runtime_reloc_start into $9.
	la	$9,__runtime_reloc_start-start	# macro
	addu	$9,$9,$5

	# Get the address of __runtime_reloc_stop into $10.
	la	$10,__runtime_reloc_stop-start	# macro
	addu	$10,$10,$5

	# The words between $9 and $10 are the runtime initialization
	# instructions.  Step through and relocate them.  First set
	# $11 and $12 to the values to add to text and data sections,
	# respectively.
	subu	$11,$6,$7
	subu	$12,$4,$8

1:	
	bge	$9,$10,3f		# macro
	lw	$13,0($9)
	and	$14,$13,0xfffffffe	# macro
	move	$15,$11
	beq	$13,$14,2f
	move	$15,$12
2:	
	addu	$14,$14,$4
	lw	$24,0($14)
	addu	$24,$24,$15
	sw	$24,0($14)
	addiu	$9,$9,4
	b	1b
3:	

	# Now the statically initialized data has been relocated
	# correctly, and we can call the C code which does the actual
	# testing.
	bal	foo

	# We return the value returned by the C code.
	lw	$31,0($sp)
	lw	$gp,4($sp)
	addu	$sp,$sp,8
	j	$31
@


1.1
log
@Initial revision
@
text
@@


1.1.2.1
log
@vendor-branch-i-fy GNU binutils (2.11.2) to facilitate an update
@
text
@@


1.1.1.1
log
@Import OpenBSD 3.3 source repository from CTM 3132 the first time
This opens an OpenBSD-mirabile (aka MirBSD) repository.

### MirBSD is:
# Copyright (c) 1982-2003 by Thorsten "mirabile" Glaser <x86@@ePost.de>
# Copyright © 1968-2003  The authors of And contributors to UNIX®, the
#       C Language, BSD/Berkeley Unix; 386BSD, NetBSD 1.1 and OpenBSD.
#
# Anyone who obtained a copy of this work is hereby permitted to freely use,
# distribute, modify, merge, sublicence, give away or sell it as long as the
# authors are given due credit and the following notice is retained:
#
# This work is provided "as is", with no explicit or implicit warranty what-
# soever. Use it only at your own risk. In no event may an author or contri-
# butor be held liable for any damage, directly or indirectly, that origina-
# ted through or is caused by creation or modification of this work.

MirBSD is my private tree. MirBSD does not differ very much from OpenBSD
and intentionally tracks OpenBSD. That's why it _is_ OpenBSD, just not the
official one. It's like with DarrenBSD.

At time of this writing, no advertising for MirBSD must be done,
because the advertising clause has not yet been sorted out.

http://templeofhate.com/tglaser/MirBSD/index.php
@
text
@@
