head	1.3;
access;
symbols
	binutils-2_15:1.1.2.3
	cvs-200406091940:1.1.1.2
	MIRBSD_7quater:1.2
	cvs-200405160640:1.1.1.1
	cvs-200401271800:1.1.1.1
	cvs-200401261630:1.1.1.1
	cvs-200401021645:1.1.1.1
	MIRBSD_7_ALPHA:1.2.0.6
	MIRBSD_7:1.2.0.4
	cvs-200312222040:1.1.1.1
	cvs-200312031730:1.1.1.1
	MIRBSD_7ter:1.2
	MIRBSD_7_DEV:1.2.0.2
	cvs-200310020700:1.1.1.1
	cvs-200309271030:1.1.1.1
	cvs-200309251530:1.1.1.1
	binutils_2_14:1.1.2.2
	binutils_2_11_2:1.1.2.1
	FSF:1.1.2
	cvs-200308302005:1.1.1.1
	cvs-200308171200:1.1.1.1
	ctm-3496:1.1.1.1
	ctm-3449:1.1.1.1
	ctm-3437:1.1.1.1
	cvs-200307191805:1.1.1.1
	ctm-3425:1.1.1.1
	cvs-200307091500:1.1.1.1
	ctm-3389:1.1.1.1
	cvs-200306291430:1.1.1.1
	ctm-3341:1.1.1.1
	MIRBSD_5:1.1.1.1
	cvs-200306082100:1.1.1.1
	ctm-3316:1.1.1.1
	ctm-3272:1.1.1.1
	ctm-3264:1.1.1.1
	cvs-200305071630:1.1.1.1
	MIRBSD_4:1.1.1.1
	ctm-3203:1.1.1.1
	cvs-20030410-1130:1.1.1.1
	ctm-3155:1.1.1.1
	ctm-3132:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@# @;


1.3
date	2004.08.11.20.55.13;	author tg;	state dead;
branches;
next	1.2;

1.2
date	2003.09.23.21.00.53;	author tg;	state Exp;
branches;
next	1.1;

1.1
date	2003.03.22.17.39.12;	author tg;	state Exp;
branches
	1.1.1.1
	1.1.2.1;
next	;

1.1.1.1
date	2003.03.22.17.39.12;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2004.06.09.20.27.29;	author tg;	state Exp;
branches;
next	;

1.1.2.1
date	2003.09.23.15.41.02;	author tg;	state Exp;
branches;
next	1.1.2.2;

1.1.2.2
date	2003.09.23.16.04.47;	author tg;	state Exp;
branches;
next	1.1.2.3;

1.1.2.3
date	2004.07.15.17.09.02;	author tg;	state Exp;
branches;
next	;


desc
@@


1.3
log
@remove old binutils
@
text
@@@section File caching
The file caching mechanism is embedded within BFD and allows
the application to open as many BFDs as it wants without
regard to the underlying operating system's file descriptor
limit (often as low as 20 open files).  The module in
@@code{cache.c} maintains a least recently used list of
@@code{BFD_CACHE_MAX_OPEN} files, and exports the name
@@code{bfd_cache_lookup}, which runs around and makes sure that
the required BFD is open. If not, then it chooses a file to
close, closes it and opens the one wanted, returning its file
handle.

@@findex BFD_CACHE_MAX_OPEN macro
@@subsubsection @@code{BFD_CACHE_MAX_OPEN macro}
@@strong{Description}@@*
The maximum number of files which the cache will keep open at
one time.
@@example
#define BFD_CACHE_MAX_OPEN 10
@@end example

@@findex bfd_last_cache
@@subsubsection @@code{bfd_last_cache}
@@strong{Synopsis}
@@example
extern bfd *bfd_last_cache;
@@end example
@@strong{Description}@@*
Zero, or a pointer to the topmost BFD on the chain.  This is
used by the @@code{bfd_cache_lookup} macro in @@file{libbfd.h} to
determine when it can avoid a function call.

@@findex bfd_cache_lookup
@@subsubsection @@code{bfd_cache_lookup}
@@strong{Description}@@*
Check to see if the required BFD is the same as the last one
looked up. If so, then it can use the stream in the BFD with
impunity, since it can't have changed since the last lookup;
otherwise, it has to perform the complicated lookup function.
@@example
#define bfd_cache_lookup(x) \
    ((x)==bfd_last_cache? \
      (FILE*) (bfd_last_cache->iostream): \
       bfd_cache_lookup_worker(x))
@@end example

@@findex bfd_cache_init
@@subsubsection @@code{bfd_cache_init}
@@strong{Synopsis}
@@example
bfd_boolean bfd_cache_init (bfd *abfd);
@@end example
@@strong{Description}@@*
Add a newly opened BFD to the cache.

@@findex bfd_cache_close
@@subsubsection @@code{bfd_cache_close}
@@strong{Synopsis}
@@example
bfd_boolean bfd_cache_close (bfd *abfd);
@@end example
@@strong{Description}@@*
Remove the BFD @@var{abfd} from the cache. If the attached file is open,
then close it too.

@@strong{Returns}@@*
@@code{FALSE} is returned if closing the file fails, @@code{TRUE} is
returned if all is well.

@@findex bfd_open_file
@@subsubsection @@code{bfd_open_file}
@@strong{Synopsis}
@@example
FILE* bfd_open_file(bfd *abfd);
@@end example
@@strong{Description}@@*
Call the OS to open a file for @@var{abfd}.  Return the @@code{FILE *}
(possibly @@code{NULL}) that results from this operation.  Set up the
BFD so that future accesses know the file is open. If the @@code{FILE *}
returned is @@code{NULL}, then it won't have been put in the
cache, so it won't have to be removed from it.

@@findex bfd_cache_lookup_worker
@@subsubsection @@code{bfd_cache_lookup_worker}
@@strong{Synopsis}
@@example
FILE *bfd_cache_lookup_worker(bfd *abfd);
@@end example
@@strong{Description}@@*
Called when the macro @@code{bfd_cache_lookup} fails to find a
quick answer.  Find a file descriptor for @@var{abfd}.  If
necessary, it open it.  If there are already more than
@@code{BFD_CACHE_MAX_OPEN} files open, it tries to close one first, to
avoid running out of file descriptors.

@


1.2
log
@looks as if some sour wine (Federweiﬂer <german>, for an English
description see http://forum.leo.org/archiv/2002_11/04/20021104125717e_en.html)
could help me to bear the pain upgrading binutils to 2.14

todo:
 - test if this works at all
 - test if this works
 - test if nothing breaks
 - nuke all occurences of "false" and "true" in binutils (including gdb),
   see bfd.h "Poison" for reference
 - talk to the OpenBSD people, ask them if they could improve this
@
text
@@


1.1
log
@Initial revision
@
text
@d51 1
a51 1
boolean bfd_cache_init (bfd *abfd);
d60 1
a60 1
boolean bfd_cache_close (bfd *abfd);
d67 1
a67 1
@@code{false} is returned if closing the file fails, @@code{true} is
@


1.1.2.1
log
@vendor-branch-i-fy GNU binutils (2.11.2) to facilitate an update
@
text
@@


1.1.2.2
log
@Import GNU binutils 2.14 from the Free Software Foundation
(in case the update goes FUBAR, it can be easily backed off)
@
text
@d51 1
a51 1
bfd_boolean bfd_cache_init (bfd *abfd);
d60 1
a60 1
bfd_boolean bfd_cache_close (bfd *abfd);
d67 1
a67 1
@@code{FALSE} is returned if closing the file fails, @@code{TRUE} is
@


1.1.2.3
log
@GNU Binutils, version 2.15
@
text
@d74 1
a74 1
FILE* bfd_open_file (bfd *abfd);
d87 1
a87 1
FILE *bfd_cache_lookup_worker (bfd *abfd);
@


1.1.1.1
log
@Import OpenBSD 3.3 source repository from CTM 3132 the first time
This opens an OpenBSD-mirabile (aka MirBSD) repository.

### MirBSD is:
# Copyright (c) 1982-2003 by Thorsten "mirabile" Glaser <x86@@ePost.de>
# Copyright © 1968-2003  The authors of And contributors to UNIXÆ, the
#       C Language, BSD/Berkeley Unix; 386BSD, NetBSD 1.1 and OpenBSD.
#
# Anyone who obtained a copy of this work is hereby permitted to freely use,
# distribute, modify, merge, sublicence, give away or sell it as long as the
# authors are given due credit and the following notice is retained:
#
# This work is provided "as is", with no explicit or implicit warranty what-
# soever. Use it only at your own risk. In no event may an author or contri-
# butor be held liable for any damage, directly or indirectly, that origina-
# ted through or is caused by creation or modification of this work.

MirBSD is my private tree. MirBSD does not differ very much from OpenBSD
and intentionally tracks OpenBSD. That's why it _is_ OpenBSD, just not the
official one. It's like with DarrenBSD.

At time of this writing, no advertising for MirBSD must be done,
because the advertising clause has not yet been sorted out.

http://templeofhate.com/tglaser/MirBSD/index.php
@
text
@@


1.1.1.2
log
@Sync of src/gnu with OpenBSD (promised a long time ago)
@
text
@d51 1
a51 1
bfd_boolean bfd_cache_init (bfd *abfd);
d60 1
a60 1
bfd_boolean bfd_cache_close (bfd *abfd);
d67 1
a67 1
@@code{FALSE} is returned if closing the file fails, @@code{TRUE} is
@

