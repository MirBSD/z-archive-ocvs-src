head	1.3;
access;
symbols
	binutils-2_15:1.1.2.2
	cvs-200406091940:1.1.1.2
	MIRBSD_7quater:1.2
	cvs-200405160640:1.1.1.1
	cvs-200401271800:1.1.1.1
	cvs-200401261630:1.1.1.1
	cvs-200401021645:1.1.1.1
	MIRBSD_7_ALPHA:1.2.0.6
	MIRBSD_7:1.2.0.4
	cvs-200312222040:1.1.1.1
	cvs-200312031730:1.1.1.1
	MIRBSD_7ter:1.2
	MIRBSD_7_DEV:1.2.0.2
	cvs-200310020700:1.1.1.1
	cvs-200309271030:1.1.1.1
	cvs-200309251530:1.1.1.1
	binutils_2_14:1.1.2.2
	binutils_2_11_2:1.1.2.1
	FSF:1.1.2
	cvs-200308302005:1.1.1.1
	cvs-200308171200:1.1.1.1
	ctm-3496:1.1.1.1
	ctm-3449:1.1.1.1
	ctm-3437:1.1.1.1
	cvs-200307191805:1.1.1.1
	ctm-3425:1.1.1.1
	cvs-200307091500:1.1.1.1
	ctm-3389:1.1.1.1
	cvs-200306291430:1.1.1.1
	ctm-3341:1.1.1.1
	MIRBSD_5:1.1.1.1
	cvs-200306082100:1.1.1.1
	ctm-3316:1.1.1.1
	ctm-3272:1.1.1.1
	ctm-3264:1.1.1.1
	cvs-200305071630:1.1.1.1
	MIRBSD_4:1.1.1.1
	ctm-3203:1.1.1.1
	cvs-20030410-1130:1.1.1.1
	ctm-3155:1.1.1.1
	ctm-3132:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@# @;


1.3
date	2004.08.11.20.54.56;	author tg;	state dead;
branches;
next	1.2;

1.2
date	2003.09.23.21.00.52;	author tg;	state Exp;
branches;
next	1.1;

1.1
date	2003.03.22.17.39.11;	author tg;	state Exp;
branches
	1.1.1.1
	1.1.2.1;
next	;

1.1.1.1
date	2003.03.22.17.39.11;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2004.06.09.20.27.28;	author tg;	state Exp;
branches;
next	;

1.1.2.1
date	2003.09.23.15.41.01;	author tg;	state Exp;
branches;
next	1.1.2.2;

1.1.2.2
date	2003.09.23.16.04.47;	author tg;	state Exp;
branches;
next	;


desc
@@


1.3
log
@remove old binutils
@
text
@@@section a.out backends


@@strong{Description}@@*
BFD supports a number of different flavours of a.out format,
though the major differences are only the sizes of the
structures on disk, and the shape of the relocation
information.

The support is split into a basic support file @@file{aoutx.h}
and other files which derive functions from the base. One
derivation file is @@file{aoutf1.h} (for a.out flavour 1), and
adds to the basic a.out functions support for sun3, sun4, 386
and 29k a.out files, to create a target jump vector for a
specific target.

This information is further split out into more specific files
for each machine, including @@file{sunos.c} for sun3 and sun4,
@@file{newsos3.c} for the Sony NEWS, and @@file{demo64.c} for a
demonstration of a 64 bit a.out format.

The base file @@file{aoutx.h} defines general mechanisms for
reading and writing records to and from disk and various
other methods which BFD requires. It is included by
@@file{aout32.c} and @@file{aout64.c} to form the names
@@code{aout_32_swap_exec_header_in}, @@code{aout_64_swap_exec_header_in}, etc.

As an example, this is what goes on to make the back end for a
sun4, from @@file{aout32.c}:

@@example
       #define ARCH_SIZE 32
       #include "aoutx.h"
@@end example

Which exports names:

@@example
       ...
       aout_32_canonicalize_reloc
       aout_32_find_nearest_line
       aout_32_get_lineno
       aout_32_get_reloc_upper_bound
       ...
@@end example

from @@file{sunos.c}:

@@example
       #define TARGET_NAME "a.out-sunos-big"
       #define VECNAME    sunos_big_vec
       #include "aoutf1.h"
@@end example

requires all the names from @@file{aout32.c}, and produces the jump vector

@@example
       sunos_big_vec
@@end example

The file @@file{host-aout.c} is a special case.  It is for a large set
of hosts that use ``more or less standard'' a.out files, and
for which cross-debugging is not interesting.  It uses the
standard 32-bit a.out support routines, but determines the
file offsets and addresses of the text, data, and BSS
sections, the machine architecture and machine type, and the
entry point address, in a host-dependent manner.  Once these
values have been determined, generic code is used to handle
the  object file.

When porting it to run on a new system, you must supply:

@@example
        HOST_PAGE_SIZE
        HOST_SEGMENT_SIZE
        HOST_MACHINE_ARCH       (optional)
        HOST_MACHINE_MACHINE    (optional)
        HOST_TEXT_START_ADDR
        HOST_STACK_END_ADDR
@@end example

in the file @@file{../include/sys/h-@@var{XXX}.h} (for your host).  These
values, plus the structures and macros defined in @@file{a.out.h} on
your host system, will produce a BFD target that will access
ordinary a.out files on your host. To configure a new machine
to use @@file{host-aout.c}, specify:

@@example
       TDEFAULTS = -DDEFAULT_VECTOR=host_aout_big_vec
       TDEPFILES= host-aout.o trad-core.o
@@end example

in the @@file{config/@@var{XXX}.mt} file, and modify @@file{configure.in}
to use the
@@file{@@var{XXX}.mt} file (by setting "@@code{bfd_target=XXX}") when your
configuration is selected.

@@subsection Relocations


@@strong{Description}@@*
The file @@file{aoutx.h} provides for both the @@emph{standard}
and @@emph{extended} forms of a.out relocation records.

The standard records contain only an
address, a symbol index, and a type field. The extended records
(used on 29ks and sparcs) also have a full integer for an
addend.

@@subsection Internal entry points


@@strong{Description}@@*
@@file{aoutx.h} exports several routines for accessing the
contents of an a.out file, which are gathered and exported in
turn by various format specific files (eg sunos.c).

@@findex aout_@@var{size}_swap_exec_header_in
@@subsubsection @@code{aout_@@var{size}_swap_exec_header_in}
@@strong{Synopsis}
@@example
void aout_@@var{size}_swap_exec_header_in,
   (bfd *abfd,
    struct external_exec *raw_bytes,
    struct internal_exec *execp);
@@end example
@@strong{Description}@@*
Swap the information in an executable header @@var{raw_bytes} taken
from a raw byte stream memory image into the internal exec header
structure @@var{execp}.

@@findex aout_@@var{size}_swap_exec_header_out
@@subsubsection @@code{aout_@@var{size}_swap_exec_header_out}
@@strong{Synopsis}
@@example
void aout_@@var{size}_swap_exec_header_out
   (bfd *abfd,
    struct internal_exec *execp,
    struct external_exec *raw_bytes);
@@end example
@@strong{Description}@@*
Swap the information in an internal exec header structure
@@var{execp} into the buffer @@var{raw_bytes} ready for writing to disk.

@@findex aout_@@var{size}_some_aout_object_p
@@subsubsection @@code{aout_@@var{size}_some_aout_object_p}
@@strong{Synopsis}
@@example
const bfd_target *aout_@@var{size}_some_aout_object_p
   (bfd *abfd,
    const bfd_target *(*callback_to_real_object_p) ());
@@end example
@@strong{Description}@@*
Some a.out variant thinks that the file open in @@var{abfd}
checking is an a.out file.  Do some more checking, and set up
for access if it really is.  Call back to the calling
environment's "finish up" function just before returning, to
handle any last-minute setup.

@@findex aout_@@var{size}_mkobject
@@subsubsection @@code{aout_@@var{size}_mkobject}
@@strong{Synopsis}
@@example
bfd_boolean aout_@@var{size}_mkobject, (bfd *abfd);
@@end example
@@strong{Description}@@*
Initialize BFD @@var{abfd} for use with a.out files.

@@findex aout_@@var{size}_machine_type
@@subsubsection @@code{aout_@@var{size}_machine_type}
@@strong{Synopsis}
@@example
enum machine_type  aout_@@var{size}_machine_type
   (enum bfd_architecture arch,
    unsigned long machine));
@@end example
@@strong{Description}@@*
Keep track of machine architecture and machine type for
a.out's. Return the @@code{machine_type} for a particular
architecture and machine, or @@code{M_UNKNOWN} if that exact architecture
and machine can't be represented in a.out format.

If the architecture is understood, machine type 0 (default)
is always understood.

@@findex aout_@@var{size}_set_arch_mach
@@subsubsection @@code{aout_@@var{size}_set_arch_mach}
@@strong{Synopsis}
@@example
bfd_boolean aout_@@var{size}_set_arch_mach,
   (bfd *,
    enum bfd_architecture arch,
    unsigned long machine));
@@end example
@@strong{Description}@@*
Set the architecture and the machine of the BFD @@var{abfd} to the
values @@var{arch} and @@var{machine}.  Verify that @@var{abfd}'s format
can support the architecture required.

@@findex aout_@@var{size}_new_section_hook
@@subsubsection @@code{aout_@@var{size}_new_section_hook}
@@strong{Synopsis}
@@example
bfd_boolean aout_@@var{size}_new_section_hook,
   (bfd *abfd,
    asection *newsect));
@@end example
@@strong{Description}@@*
Called by the BFD in response to a @@code{bfd_make_section}
request.

@


1.2
log
@looks as if some sour wine (Federweiﬂer <german>, for an English
description see http://forum.leo.org/archiv/2002_11/04/20021104125717e_en.html)
could help me to bear the pain upgrading binutils to 2.14

todo:
 - test if this works at all
 - test if this works
 - test if nothing breaks
 - nuke all occurences of "false" and "true" in binutils (including gdb),
   see bfd.h "Poison" for reference
 - talk to the OpenBSD people, ask them if they could improve this
@
text
@@


1.1
log
@Initial revision
@
text
@d164 1
a164 1
boolean aout_@@var{size}_mkobject, (bfd *abfd);
d190 1
a190 1
boolean aout_@@var{size}_set_arch_mach,
d204 1
a204 1
boolean aout_@@var{size}_new_section_hook,
@


1.1.2.1
log
@vendor-branch-i-fy GNU binutils (2.11.2) to facilitate an update
@
text
@@


1.1.2.2
log
@Import GNU binutils 2.14 from the Free Software Foundation
(in case the update goes FUBAR, it can be easily backed off)
@
text
@d164 1
a164 1
bfd_boolean aout_@@var{size}_mkobject, (bfd *abfd);
d190 1
a190 1
bfd_boolean aout_@@var{size}_set_arch_mach,
d204 1
a204 1
bfd_boolean aout_@@var{size}_new_section_hook,
@


1.1.1.1
log
@Import OpenBSD 3.3 source repository from CTM 3132 the first time
This opens an OpenBSD-mirabile (aka MirBSD) repository.

### MirBSD is:
# Copyright (c) 1982-2003 by Thorsten "mirabile" Glaser <x86@@ePost.de>
# Copyright © 1968-2003  The authors of And contributors to UNIXÆ, the
#       C Language, BSD/Berkeley Unix; 386BSD, NetBSD 1.1 and OpenBSD.
#
# Anyone who obtained a copy of this work is hereby permitted to freely use,
# distribute, modify, merge, sublicence, give away or sell it as long as the
# authors are given due credit and the following notice is retained:
#
# This work is provided "as is", with no explicit or implicit warranty what-
# soever. Use it only at your own risk. In no event may an author or contri-
# butor be held liable for any damage, directly or indirectly, that origina-
# ted through or is caused by creation or modification of this work.

MirBSD is my private tree. MirBSD does not differ very much from OpenBSD
and intentionally tracks OpenBSD. That's why it _is_ OpenBSD, just not the
official one. It's like with DarrenBSD.

At time of this writing, no advertising for MirBSD must be done,
because the advertising clause has not yet been sorted out.

http://templeofhate.com/tglaser/MirBSD/index.php
@
text
@@


1.1.1.2
log
@Sync of src/gnu with OpenBSD (promised a long time ago)
@
text
@d164 1
a164 1
bfd_boolean aout_@@var{size}_mkobject, (bfd *abfd);
d190 1
a190 1
bfd_boolean aout_@@var{size}_set_arch_mach,
d204 1
a204 1
bfd_boolean aout_@@var{size}_new_section_hook,
@

