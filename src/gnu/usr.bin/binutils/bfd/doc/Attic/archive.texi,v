head	1.3;
access;
symbols
	binutils-2_15:1.1.2.3
	cvs-200406091940:1.1.1.2
	MIRBSD_7quater:1.2
	cvs-200405160640:1.1.1.1
	cvs-200401271800:1.1.1.1
	cvs-200401261630:1.1.1.1
	cvs-200401021645:1.1.1.1
	MIRBSD_7_ALPHA:1.2.0.6
	MIRBSD_7:1.2.0.4
	cvs-200312222040:1.1.1.1
	cvs-200312031730:1.1.1.1
	MIRBSD_7ter:1.2
	MIRBSD_7_DEV:1.2.0.2
	cvs-200310020700:1.1.1.1
	cvs-200309271030:1.1.1.1
	cvs-200309251530:1.1.1.1
	binutils_2_14:1.1.2.2
	binutils_2_11_2:1.1.2.1
	FSF:1.1.2
	cvs-200308302005:1.1.1.1
	cvs-200308171200:1.1.1.1
	ctm-3496:1.1.1.1
	ctm-3449:1.1.1.1
	ctm-3437:1.1.1.1
	cvs-200307191805:1.1.1.1
	ctm-3425:1.1.1.1
	cvs-200307091500:1.1.1.1
	ctm-3389:1.1.1.1
	cvs-200306291430:1.1.1.1
	ctm-3341:1.1.1.1
	MIRBSD_5:1.1.1.1
	cvs-200306082100:1.1.1.1
	ctm-3316:1.1.1.1
	ctm-3272:1.1.1.1
	ctm-3264:1.1.1.1
	cvs-200305071630:1.1.1.1
	MIRBSD_4:1.1.1.1
	ctm-3203:1.1.1.1
	cvs-20030410-1130:1.1.1.1
	ctm-3155:1.1.1.1
	ctm-3132:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@# @;


1.3
date	2004.08.11.20.54.58;	author tg;	state dead;
branches;
next	1.2;

1.2
date	2003.09.23.21.00.52;	author tg;	state Exp;
branches;
next	1.1;

1.1
date	2003.03.22.17.39.11;	author tg;	state Exp;
branches
	1.1.1.1
	1.1.2.1;
next	;

1.1.1.1
date	2003.03.22.17.39.11;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2004.06.09.20.27.28;	author tg;	state Exp;
branches;
next	;

1.1.2.1
date	2003.09.23.15.41.01;	author tg;	state Exp;
branches;
next	1.1.2.2;

1.1.2.2
date	2003.09.23.16.04.47;	author tg;	state Exp;
branches;
next	1.1.2.3;

1.1.2.3
date	2004.07.15.17.09.00;	author tg;	state Exp;
branches;
next	;


desc
@@


1.3
log
@remove old binutils
@
text
@@@section Archives


@@strong{Description}@@*
An archive (or library) is just another BFD.  It has a symbol
table, although there's not much a user program will do with it.

The big difference between an archive BFD and an ordinary BFD
is that the archive doesn't have sections.  Instead it has a
chain of BFDs that are considered its contents.  These BFDs can
be manipulated like any other.  The BFDs contained in an
archive opened for reading will all be opened for reading.  You
may put either input or output BFDs into an archive opened for
output; they will be handled correctly when the archive is closed.

Use @@code{bfd_openr_next_archived_file} to step through
the contents of an archive opened for input.  You don't
have to read the entire archive if you don't want
to!  Read it until you find what you want.

Archive contents of output BFDs are chained through the
@@code{next} pointer in a BFD.  The first one is findable through
the @@code{archive_head} slot of the archive.  Set it with
@@code{bfd_set_archive_head} (q.v.).  A given BFD may be in only one
open output archive at a time.

As expected, the BFD archive code is more general than the
archive code of any given environment.  BFD archives may
contain files of different formats (e.g., a.out and coff) and
even different architectures.  You may even place archives
recursively into archives!

This can cause unexpected confusion, since some archive
formats are more expressive than others.  For instance, Intel
COFF archives can preserve long filenames; SunOS a.out archives
cannot.  If you move a file from the first to the second
format and back again, the filename may be truncated.
Likewise, different a.out environments have different
conventions as to how they truncate filenames, whether they
preserve directory names in filenames, etc.  When
interoperating with native tools, be sure your files are
homogeneous.

Beware: most of these formats do not react well to the
presence of spaces in filenames.  We do the best we can, but
can't always handle this case due to restrictions in the format of
archives.  Many Unix utilities are braindead in regards to
spaces and such in filenames anyway, so this shouldn't be much
of a restriction.

Archives are supported in BFD in @@code{archive.c}.

@@findex bfd_get_next_mapent
@@subsubsection @@code{bfd_get_next_mapent}
@@strong{Synopsis}
@@example
symindex bfd_get_next_mapent(bfd *abfd, symindex previous, carsym **sym);
@@end example
@@strong{Description}@@*
Step through archive @@var{abfd}'s symbol table (if it
has one).  Successively update @@var{sym} with the next symbol's
information, returning that symbol's (internal) index into the
symbol table.

Supply @@code{BFD_NO_MORE_SYMBOLS} as the @@var{previous} entry to get
the first one; returns @@code{BFD_NO_MORE_SYMBOLS} when you've already
got the last one.

A @@code{carsym} is a canonical archive symbol.  The only
user-visible element is its name, a null-terminated string.

@@findex bfd_set_archive_head
@@subsubsection @@code{bfd_set_archive_head}
@@strong{Synopsis}
@@example
bfd_boolean bfd_set_archive_head(bfd *output, bfd *new_head);
@@end example
@@strong{Description}@@*
Set the head of the chain of
BFDs contained in the archive @@var{output} to @@var{new_head}.

@@findex bfd_openr_next_archived_file
@@subsubsection @@code{bfd_openr_next_archived_file}
@@strong{Synopsis}
@@example
bfd *bfd_openr_next_archived_file(bfd *archive, bfd *previous);
@@end example
@@strong{Description}@@*
Provided a BFD, @@var{archive}, containing an archive and NULL, open
an input BFD on the first contained element and returns that.
Subsequent calls should pass
the archive and the previous return value to return a created
BFD to the next contained element. NULL is returned when there
are no more.

@


1.2
log
@looks as if some sour wine (Federweiﬂer <german>, for an English
description see http://forum.leo.org/archiv/2002_11/04/20021104125717e_en.html)
could help me to bear the pain upgrading binutils to 2.14

todo:
 - test if this works at all
 - test if this works
 - test if nothing breaks
 - nuke all occurences of "false" and "true" in binutils (including gdb),
   see bfd.h "Poison" for reference
 - talk to the OpenBSD people, ask them if they could improve this
@
text
@@


1.1
log
@Initial revision
@
text
@d76 1
a76 1
boolean bfd_set_archive_head(bfd *output, bfd *new_head);
@


1.1.2.1
log
@vendor-branch-i-fy GNU binutils (2.11.2) to facilitate an update
@
text
@@


1.1.2.2
log
@Import GNU binutils 2.14 from the Free Software Foundation
(in case the update goes FUBAR, it can be easily backed off)
@
text
@d76 1
a76 1
bfd_boolean bfd_set_archive_head(bfd *output, bfd *new_head);
@


1.1.2.3
log
@GNU Binutils, version 2.15
@
text
@d57 1
a57 2
symindex bfd_get_next_mapent
   (bfd *abfd, symindex previous, carsym **sym);
d76 1
a76 1
bfd_boolean bfd_set_archive_head (bfd *output, bfd *new_head);
d86 1
a86 1
bfd *bfd_openr_next_archived_file (bfd *archive, bfd *previous);
@


1.1.1.1
log
@Import OpenBSD 3.3 source repository from CTM 3132 the first time
This opens an OpenBSD-mirabile (aka MirBSD) repository.

### MirBSD is:
# Copyright (c) 1982-2003 by Thorsten "mirabile" Glaser <x86@@ePost.de>
# Copyright © 1968-2003  The authors of And contributors to UNIXÆ, the
#       C Language, BSD/Berkeley Unix; 386BSD, NetBSD 1.1 and OpenBSD.
#
# Anyone who obtained a copy of this work is hereby permitted to freely use,
# distribute, modify, merge, sublicence, give away or sell it as long as the
# authors are given due credit and the following notice is retained:
#
# This work is provided "as is", with no explicit or implicit warranty what-
# soever. Use it only at your own risk. In no event may an author or contri-
# butor be held liable for any damage, directly or indirectly, that origina-
# ted through or is caused by creation or modification of this work.

MirBSD is my private tree. MirBSD does not differ very much from OpenBSD
and intentionally tracks OpenBSD. That's why it _is_ OpenBSD, just not the
official one. It's like with DarrenBSD.

At time of this writing, no advertising for MirBSD must be done,
because the advertising clause has not yet been sorted out.

http://templeofhate.com/tglaser/MirBSD/index.php
@
text
@@


1.1.1.2
log
@Sync of src/gnu with OpenBSD (promised a long time ago)
@
text
@d76 1
a76 1
bfd_boolean bfd_set_archive_head(bfd *output, bfd *new_head);
@

