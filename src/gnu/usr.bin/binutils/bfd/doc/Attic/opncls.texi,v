head	1.3;
access;
symbols
	binutils-2_15:1.1.2.3
	cvs-200406091940:1.1.1.2
	MIRBSD_7quater:1.2
	cvs-200405160640:1.1.1.1
	cvs-200401271800:1.1.1.1
	cvs-200401261630:1.1.1.1
	cvs-200401021645:1.1.1.1
	MIRBSD_7_ALPHA:1.2.0.6
	MIRBSD_7:1.2.0.4
	cvs-200312222040:1.1.1.1
	cvs-200312031730:1.1.1.1
	MIRBSD_7ter:1.2
	MIRBSD_7_DEV:1.2.0.2
	cvs-200310020700:1.1.1.1
	cvs-200309271030:1.1.1.1
	cvs-200309251530:1.1.1.1
	binutils_2_14:1.1.2.2
	binutils_2_11_2:1.1.2.1
	FSF:1.1.2
	cvs-200308302005:1.1.1.1
	cvs-200308171200:1.1.1.1
	ctm-3496:1.1.1.1
	ctm-3449:1.1.1.1
	ctm-3437:1.1.1.1
	cvs-200307191805:1.1.1.1
	ctm-3425:1.1.1.1
	cvs-200307091500:1.1.1.1
	ctm-3389:1.1.1.1
	cvs-200306291430:1.1.1.1
	ctm-3341:1.1.1.1
	MIRBSD_5:1.1.1.1
	cvs-200306082100:1.1.1.1
	ctm-3316:1.1.1.1
	ctm-3272:1.1.1.1
	ctm-3264:1.1.1.1
	cvs-200305071630:1.1.1.1
	MIRBSD_4:1.1.1.1
	ctm-3203:1.1.1.1
	cvs-20030410-1130:1.1.1.1
	ctm-3155:1.1.1.1
	ctm-3132:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@# @;


1.3
date	2004.08.11.20.55.21;	author tg;	state dead;
branches;
next	1.2;

1.2
date	2003.09.23.21.00.55;	author tg;	state Exp;
branches;
next	1.1;

1.1
date	2003.03.22.17.39.12;	author tg;	state Exp;
branches
	1.1.1.1
	1.1.2.1;
next	;

1.1.1.1
date	2003.03.22.17.39.12;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2004.06.09.20.27.30;	author tg;	state Exp;
branches;
next	;

1.1.2.1
date	2003.09.23.15.41.02;	author tg;	state Exp;
branches;
next	1.1.2.2;

1.1.2.2
date	2003.09.23.16.04.47;	author tg;	state Exp;
branches;
next	1.1.2.3;

1.1.2.3
date	2004.07.15.17.09.04;	author tg;	state Exp;
branches;
next	;


desc
@@


1.3
log
@remove old binutils
@
text
@@@section Opening and closing BFDs


@@findex bfd_openr
@@subsubsection @@code{bfd_openr}
@@strong{Synopsis}
@@example
bfd *bfd_openr(const char *filename, const char *target);
@@end example
@@strong{Description}@@*
Open the file @@var{filename} (using @@code{fopen}) with the target
@@var{target}.  Return a pointer to the created BFD.

Calls @@code{bfd_find_target}, so @@var{target} is interpreted as by
that function.

If @@code{NULL} is returned then an error has occured.   Possible errors
are @@code{bfd_error_no_memory}, @@code{bfd_error_invalid_target} or
@@code{system_call} error.

@@findex bfd_fdopenr
@@subsubsection @@code{bfd_fdopenr}
@@strong{Synopsis}
@@example
bfd *bfd_fdopenr(const char *filename, const char *target, int fd);
@@end example
@@strong{Description}@@*
@@code{bfd_fdopenr} is to @@code{bfd_fopenr} much like @@code{fdopen} is to
@@code{fopen}.  It opens a BFD on a file already described by the
@@var{fd} supplied.

When the file is later @@code{bfd_close}d, the file descriptor will
be closed.  If the caller desires that this file descriptor be
cached by BFD (opened as needed, closed as needed to free
descriptors for other opens), with the supplied @@var{fd} used as
an initial file descriptor (but subject to closure at any time),
call bfd_set_cacheable(bfd, 1) on the returned BFD.  The default
is to assume no cacheing; the file descriptor will remain open
until @@code{bfd_close}, and will not be affected by BFD operations
on other files.

Possible errors are @@code{bfd_error_no_memory},
@@code{bfd_error_invalid_target} and @@code{bfd_error_system_call}.

@@findex bfd_openstreamr
@@subsubsection @@code{bfd_openstreamr}
@@strong{Synopsis}
@@example
bfd *bfd_openstreamr(const char *, const char *, PTR);
@@end example
@@strong{Description}@@*
Open a BFD for read access on an existing stdio stream.  When
the BFD is passed to @@code{bfd_close}, the stream will be closed.

@@findex bfd_openw
@@subsubsection @@code{bfd_openw}
@@strong{Synopsis}
@@example
bfd *bfd_openw(const char *filename, const char *target);
@@end example
@@strong{Description}@@*
Create a BFD, associated with file @@var{filename}, using the
file format @@var{target}, and return a pointer to it.

Possible errors are @@code{bfd_error_system_call}, @@code{bfd_error_no_memory},
@@code{bfd_error_invalid_target}.

@@findex bfd_close
@@subsubsection @@code{bfd_close}
@@strong{Synopsis}
@@example
bfd_boolean bfd_close (bfd *abfd);
@@end example
@@strong{Description}@@*
Close a BFD. If the BFD was open for writing, then pending
operations are completed and the file written out and closed.
If the created file is executable, then @@code{chmod} is called
to mark it as such.

All memory attached to the BFD is released.

The file descriptor associated with the BFD is closed (even
if it was passed in to BFD by @@code{bfd_fdopenr}).

@@strong{Returns}@@*
@@code{TRUE} is returned if all is ok, otherwise @@code{FALSE}.

@@findex bfd_close_all_done
@@subsubsection @@code{bfd_close_all_done}
@@strong{Synopsis}
@@example
bfd_boolean bfd_close_all_done (bfd *);
@@end example
@@strong{Description}@@*
Close a BFD.  Differs from @@code{bfd_close} since it does not
complete any pending operations.  This routine would be used
if the application had just used BFD for swapping and didn't
want to use any of the writing code.

If the created file is executable, then @@code{chmod} is called
to mark it as such.

All memory attached to the BFD is released.

@@strong{Returns}@@*
@@code{TRUE} is returned if all is ok, otherwise @@code{FALSE}.

@@findex bfd_create
@@subsubsection @@code{bfd_create}
@@strong{Synopsis}
@@example
bfd *bfd_create(const char *filename, bfd *templ);
@@end example
@@strong{Description}@@*
Create a new BFD in the manner of @@code{bfd_openw}, but without
opening a file. The new BFD takes the target from the target
used by @@var{template}. The format is always set to @@code{bfd_object}.

@@findex bfd_make_writable
@@subsubsection @@code{bfd_make_writable}
@@strong{Synopsis}
@@example
bfd_boolean bfd_make_writable (bfd *abfd);
@@end example
@@strong{Description}@@*
Takes a BFD as created by @@code{bfd_create} and converts it
into one like as returned by @@code{bfd_openw}.  It does this
by converting the BFD to BFD_IN_MEMORY.  It's assumed that
you will call @@code{bfd_make_readable} on this bfd later.

@@strong{Returns}@@*
@@code{TRUE} is returned if all is ok, otherwise @@code{FALSE}.

@@findex bfd_make_readable
@@subsubsection @@code{bfd_make_readable}
@@strong{Synopsis}
@@example
bfd_boolean bfd_make_readable (bfd *abfd);
@@end example
@@strong{Description}@@*
Takes a BFD as created by @@code{bfd_create} and
@@code{bfd_make_writable} and converts it into one like as
returned by @@code{bfd_openr}.  It does this by writing the
contents out to the memory buffer, then reversing the
direction.

@@strong{Returns}@@*
@@code{TRUE} is returned if all is ok, otherwise @@code{FALSE}.

@@findex bfd_alloc
@@subsubsection @@code{bfd_alloc}
@@strong{Synopsis}
@@example
PTR bfd_alloc (bfd *abfd, size_t wanted);
@@end example
@@strong{Description}@@*
Allocate a block of @@var{wanted} bytes of memory attached to
@@code{abfd} and return a pointer to it.

@@findex calc_crc32
@@subsubsection @@code{calc_crc32}
@@strong{Synopsis}
@@example
unsigned long calc_crc32 (unsigned long crc, const unsigned char *buf, size_t len);
@@end example
@@strong{Description}@@*
Advance the CRC32 given by @@var{crc} through @@var{len}
bytes of @@var{buf}. Return the updated CRC32 value.

@@findex get_debug_link_info
@@subsubsection @@code{get_debug_link_info}
@@strong{Synopsis}
@@example
char *get_debug_link_info (bfd *abfd, unsigned long *crc32_out)
@@end example
@@strong{Description}@@*
fetch the filename and CRC32 value for any separate debuginfo
associated with @@var{abfd}. Return NULL if no such info found,
otherwise return filename and update @@var{crc32_out}.

@@findex separate_debug_file_exists
@@subsubsection @@code{separate_debug_file_exists}
@@strong{Synopsis}
@@example
bfd_boolean separate_debug_file_exists (char * name, unsigned long crc32)
@@end example
@@strong{Description}@@*
Checks to see if @@var{name} is a file and if its contents
match @@var{crc32}.

@@findex find_separate_debug_file
@@subsubsection @@code{find_separate_debug_file}
@@strong{Synopsis}
@@example
char * find_separate_debug_file (bfd *abfd)
@@end example
@@strong{Description}@@*
Searches @@var{abfd} for a reference to separate debugging
information, scans various locations in the filesystem, including
the file tree rooted at @@var{debug_file_directory}, and returns a
filename of such debugging information if the file is found and has
matching CRC32.  Returns NULL if no reference to debugging file
exists, or file cannot be found.

@@findex bfd_follow_gnu_debuglink
@@subsubsection @@code{bfd_follow_gnu_debuglink}
@@strong{Synopsis}
@@example
char * bfd_follow_gnu_debuglink(bfd *abfd, const char *dir);
@@end example
@@strong{Description}@@*
Takes a BFD and searches it for a .gnu_debuglink section.  If this
section is found, examines the section for the name and checksum of
a '.debug' file containing auxiliary debugging
information. Searches filesystem for .debug file in some standard
locations, including the directory tree rooted at @@var{dir}, and if
found returns the full filename. If @@var{dir} is NULL, will search
default path configured into libbfd at build time.

@@strong{Returns}@@*
@@code{NULL} on any errors or failure to locate the .debug file,
otherwise a pointer to a heap-allocated string containing the
filename. The caller is responsible for freeing this string.

@


1.2
log
@looks as if some sour wine (Federweiﬂer <german>, for an English
description see http://forum.leo.org/archiv/2002_11/04/20021104125717e_en.html)
could help me to bear the pain upgrading binutils to 2.14

todo:
 - test if this works at all
 - test if this works
 - test if nothing breaks
 - nuke all occurences of "false" and "true" in binutils (including gdb),
   see bfd.h "Poison" for reference
 - talk to the OpenBSD people, ask them if they could improve this
@
text
@@


1.1
log
@Initial revision
@
text
@d8 1
a8 1
bfd *bfd_openr(CONST char *filename, CONST char *target);
d18 2
a19 1
are @@code{bfd_error_no_memory}, @@code{bfd_error_invalid_target} or @@code{system_call} error.
d25 1
a25 1
bfd *bfd_fdopenr(CONST char *filename, CONST char *target, int fd);
d28 13
a40 3
@@code{bfd_fdopenr} is to @@code{bfd_fopenr} much like @@code{fdopen} is to @@code{fopen}.
It opens a BFD on a file already described by the @@var{fd}
supplied.
d42 2
a43 12
When the file is later @@code{bfd_close}d, the file descriptor will be closed.

If the caller desires that this file descriptor be cached by BFD
(opened as needed, closed as needed to free descriptors for
other opens), with the supplied @@var{fd} used as an initial
file descriptor (but subject to closure at any time), call
bfd_set_cacheable(bfd, 1) on the returned BFD.  The default is to
assume no cacheing; the file descriptor will remain open until
@@code{bfd_close}, and will not be affected by BFD operations on other
files.

Possible errors are @@code{bfd_error_no_memory}, @@code{bfd_error_invalid_target} and @@code{bfd_error_system_call}.
d59 1
a59 1
bfd *bfd_openw(CONST char *filename, CONST char *target);
d72 1
a72 1
boolean bfd_close(bfd *abfd);
d75 4
a78 4
Close a BFD. If the BFD was open for writing,
then pending operations are completed and the file written out
and closed. If the created file is executable, then
@@code{chmod} is called to mark it as such.
d86 1
a86 1
@@code{true} is returned if all is ok, otherwise @@code{false}.
d92 1
a92 1
boolean bfd_close_all_done(bfd *);
d95 4
a98 4
Close a BFD.  Differs from @@code{bfd_close}
since it does not complete any pending operations.  This
routine would be used if the application had just used BFD for
swapping and didn't want to use any of the writing code.
d106 1
a106 1
@@code{true} is returned if all is ok, otherwise @@code{false}.
d112 1
a112 1
bfd *bfd_create(CONST char *filename, bfd *templ);
d115 3
a117 4
Create a new BFD in the manner of
@@code{bfd_openw}, but without opening a file. The new BFD
takes the target from the target used by @@var{template}. The
format is always set to @@code{bfd_object}.
d123 1
a123 1
boolean bfd_make_writable(bfd *abfd);
d132 1
a132 1
@@code{true} is returned if all is ok, otherwise @@code{false}.
d138 1
a138 1
boolean bfd_make_readable(bfd *abfd);
d148 1
a148 1
@@code{true} is returned if all is ok, otherwise @@code{false}.
d159 65
@


1.1.2.1
log
@vendor-branch-i-fy GNU binutils (2.11.2) to facilitate an update
@
text
@@


1.1.2.2
log
@Import GNU binutils 2.14 from the Free Software Foundation
(in case the update goes FUBAR, it can be easily backed off)
@
text
@d8 1
a8 1
bfd *bfd_openr(const char *filename, const char *target);
d18 1
a18 2
are @@code{bfd_error_no_memory}, @@code{bfd_error_invalid_target} or
@@code{system_call} error.
d24 1
a24 1
bfd *bfd_fdopenr(const char *filename, const char *target, int fd);
d27 3
a29 13
@@code{bfd_fdopenr} is to @@code{bfd_fopenr} much like @@code{fdopen} is to
@@code{fopen}.  It opens a BFD on a file already described by the
@@var{fd} supplied.

When the file is later @@code{bfd_close}d, the file descriptor will
be closed.  If the caller desires that this file descriptor be
cached by BFD (opened as needed, closed as needed to free
descriptors for other opens), with the supplied @@var{fd} used as
an initial file descriptor (but subject to closure at any time),
call bfd_set_cacheable(bfd, 1) on the returned BFD.  The default
is to assume no cacheing; the file descriptor will remain open
until @@code{bfd_close}, and will not be affected by BFD operations
on other files.
d31 12
a42 2
Possible errors are @@code{bfd_error_no_memory},
@@code{bfd_error_invalid_target} and @@code{bfd_error_system_call}.
d58 1
a58 1
bfd *bfd_openw(const char *filename, const char *target);
d71 1
a71 1
bfd_boolean bfd_close (bfd *abfd);
d74 4
a77 4
Close a BFD. If the BFD was open for writing, then pending
operations are completed and the file written out and closed.
If the created file is executable, then @@code{chmod} is called
to mark it as such.
d85 1
a85 1
@@code{TRUE} is returned if all is ok, otherwise @@code{FALSE}.
d91 1
a91 1
bfd_boolean bfd_close_all_done (bfd *);
d94 4
a97 4
Close a BFD.  Differs from @@code{bfd_close} since it does not
complete any pending operations.  This routine would be used
if the application had just used BFD for swapping and didn't
want to use any of the writing code.
d105 1
a105 1
@@code{TRUE} is returned if all is ok, otherwise @@code{FALSE}.
d111 1
a111 1
bfd *bfd_create(const char *filename, bfd *templ);
d114 4
a117 3
Create a new BFD in the manner of @@code{bfd_openw}, but without
opening a file. The new BFD takes the target from the target
used by @@var{template}. The format is always set to @@code{bfd_object}.
d123 1
a123 1
bfd_boolean bfd_make_writable (bfd *abfd);
d132 1
a132 1
@@code{TRUE} is returned if all is ok, otherwise @@code{FALSE}.
d138 1
a138 1
bfd_boolean bfd_make_readable (bfd *abfd);
d148 1
a148 1
@@code{TRUE} is returned if all is ok, otherwise @@code{FALSE}.
a158 65

@@findex calc_crc32
@@subsubsection @@code{calc_crc32}
@@strong{Synopsis}
@@example
unsigned long calc_crc32 (unsigned long crc, const unsigned char *buf, size_t len);
@@end example
@@strong{Description}@@*
Advance the CRC32 given by @@var{crc} through @@var{len}
bytes of @@var{buf}. Return the updated CRC32 value.

@@findex get_debug_link_info
@@subsubsection @@code{get_debug_link_info}
@@strong{Synopsis}
@@example
char *get_debug_link_info (bfd *abfd, unsigned long *crc32_out)
@@end example
@@strong{Description}@@*
fetch the filename and CRC32 value for any separate debuginfo
associated with @@var{abfd}. Return NULL if no such info found,
otherwise return filename and update @@var{crc32_out}.

@@findex separate_debug_file_exists
@@subsubsection @@code{separate_debug_file_exists}
@@strong{Synopsis}
@@example
bfd_boolean separate_debug_file_exists (char * name, unsigned long crc32)
@@end example
@@strong{Description}@@*
Checks to see if @@var{name} is a file and if its contents
match @@var{crc32}.

@@findex find_separate_debug_file
@@subsubsection @@code{find_separate_debug_file}
@@strong{Synopsis}
@@example
char * find_separate_debug_file (bfd *abfd)
@@end example
@@strong{Description}@@*
Searches @@var{abfd} for a reference to separate debugging
information, scans various locations in the filesystem, including
the file tree rooted at @@var{debug_file_directory}, and returns a
filename of such debugging information if the file is found and has
matching CRC32.  Returns NULL if no reference to debugging file
exists, or file cannot be found.

@@findex bfd_follow_gnu_debuglink
@@subsubsection @@code{bfd_follow_gnu_debuglink}
@@strong{Synopsis}
@@example
char * bfd_follow_gnu_debuglink(bfd *abfd, const char *dir);
@@end example
@@strong{Description}@@*
Takes a BFD and searches it for a .gnu_debuglink section.  If this
section is found, examines the section for the name and checksum of
a '.debug' file containing auxiliary debugging
information. Searches filesystem for .debug file in some standard
locations, including the directory tree rooted at @@var{dir}, and if
found returns the full filename. If @@var{dir} is NULL, will search
default path configured into libbfd at build time.

@@strong{Returns}@@*
@@code{NULL} on any errors or failure to locate the .debug file,
otherwise a pointer to a heap-allocated string containing the
filename. The caller is responsible for freeing this string.
@


1.1.2.3
log
@GNU Binutils, version 2.15
@
text
@d8 1
a8 1
bfd *bfd_openr (const char *filename, const char *target);
d25 1
a25 1
bfd *bfd_fdopenr (const char *filename, const char *target, int fd);
d38 1
a38 1
is to assume no caching; the file descriptor will remain open
d49 1
a49 1
bfd *bfd_openstreamr (const char *, const char *, void *);
d59 1
a59 1
bfd *bfd_openw (const char *filename, const char *target);
d112 1
a112 1
bfd *bfd_create (const char *filename, bfd *templ);
d154 1
a154 1
void *bfd_alloc (bfd *abfd, size_t wanted);
d160 2
a161 2
@@findex bfd_calc_gnu_debuglink_crc32
@@subsubsection @@code{bfd_calc_gnu_debuglink_crc32}
d164 1
a164 2
unsigned long bfd_calc_gnu_debuglink_crc32
   (unsigned long crc, const unsigned char *buf, bfd_size_type len);
d167 2
a168 6
Computes a CRC value as used in the .gnu_debuglink section.
Advances the previously computed @@var{crc} value by computing
and adding in the crc32 for @@var{len} bytes of @@var{buf}.

@@strong{Returns}@@*
Return the updated CRC32 value.
d174 1
a174 1
char *get_debug_link_info (bfd *abfd, unsigned long *crc32_out);
d185 1
a185 2
bfd_boolean separate_debug_file_exists
   (char *name, unsigned long crc32);
d195 1
a195 1
char *find_separate_debug_file (bfd *abfd);
d209 1
a209 1
char *bfd_follow_gnu_debuglink (bfd *abfd, const char *dir);
d213 3
a215 3
section is found, it examines the section for the name and checksum
of a '.debug' file containing auxiliary debugging information.  It
then searches the filesystem for this .debug file in some standard
d217 2
a218 5
found returns the full filename.

If @@var{dir} is NULL, it will search a default path configured into
libbfd at build time.  [XXX this feature is not currently
implemented].
d223 1
a223 33
filename.  The caller is responsible for freeing this string.

@@findex bfd_create_gnu_debuglink_section
@@subsubsection @@code{bfd_create_gnu_debuglink_section}
@@strong{Synopsis}
@@example
struct bfd_section *bfd_create_gnu_debuglink_section
   (bfd *abfd, const char *filename);
@@end example
@@strong{Description}@@*
Takes a @@var{BFD} and adds a .gnu_debuglink section to it.  The section is sized
to be big enough to contain a link to the specified @@var{filename}.

@@strong{Returns}@@*
A pointer to the new section is returned if all is ok.  Otherwise @@code{NULL} is
returned and bfd_error is set.

@@findex bfd_fill_in_gnu_debuglink_section
@@subsubsection @@code{bfd_fill_in_gnu_debuglink_section}
@@strong{Synopsis}
@@example
bfd_boolean bfd_fill_in_gnu_debuglink_section
   (bfd *abfd, struct bfd_section *sect, const char *filename);
@@end example
@@strong{Description}@@*
Takes a @@var{BFD} and containing a .gnu_debuglink section @@var{SECT}
and fills in the contents of the section to contain a link to the
specified @@var{filename}.  The filename should be relative to the
current directory.

@@strong{Returns}@@*
@@code{TRUE} is returned if all is ok.  Otherwise @@code{FALSE} is returned
and bfd_error is set.
@


1.1.1.1
log
@Import OpenBSD 3.3 source repository from CTM 3132 the first time
This opens an OpenBSD-mirabile (aka MirBSD) repository.

### MirBSD is:
# Copyright (c) 1982-2003 by Thorsten "mirabile" Glaser <x86@@ePost.de>
# Copyright © 1968-2003  The authors of And contributors to UNIXÆ, the
#       C Language, BSD/Berkeley Unix; 386BSD, NetBSD 1.1 and OpenBSD.
#
# Anyone who obtained a copy of this work is hereby permitted to freely use,
# distribute, modify, merge, sublicence, give away or sell it as long as the
# authors are given due credit and the following notice is retained:
#
# This work is provided "as is", with no explicit or implicit warranty what-
# soever. Use it only at your own risk. In no event may an author or contri-
# butor be held liable for any damage, directly or indirectly, that origina-
# ted through or is caused by creation or modification of this work.

MirBSD is my private tree. MirBSD does not differ very much from OpenBSD
and intentionally tracks OpenBSD. That's why it _is_ OpenBSD, just not the
official one. It's like with DarrenBSD.

At time of this writing, no advertising for MirBSD must be done,
because the advertising clause has not yet been sorted out.

http://templeofhate.com/tglaser/MirBSD/index.php
@
text
@@


1.1.1.2
log
@Sync of src/gnu with OpenBSD (promised a long time ago)
@
text
@d8 1
a8 1
bfd *bfd_openr(const char *filename, const char *target);
d18 1
a18 2
are @@code{bfd_error_no_memory}, @@code{bfd_error_invalid_target} or
@@code{system_call} error.
d24 1
a24 1
bfd *bfd_fdopenr(const char *filename, const char *target, int fd);
d27 3
a29 13
@@code{bfd_fdopenr} is to @@code{bfd_fopenr} much like @@code{fdopen} is to
@@code{fopen}.  It opens a BFD on a file already described by the
@@var{fd} supplied.

When the file is later @@code{bfd_close}d, the file descriptor will
be closed.  If the caller desires that this file descriptor be
cached by BFD (opened as needed, closed as needed to free
descriptors for other opens), with the supplied @@var{fd} used as
an initial file descriptor (but subject to closure at any time),
call bfd_set_cacheable(bfd, 1) on the returned BFD.  The default
is to assume no cacheing; the file descriptor will remain open
until @@code{bfd_close}, and will not be affected by BFD operations
on other files.
d31 12
a42 2
Possible errors are @@code{bfd_error_no_memory},
@@code{bfd_error_invalid_target} and @@code{bfd_error_system_call}.
d58 1
a58 1
bfd *bfd_openw(const char *filename, const char *target);
d71 1
a71 1
bfd_boolean bfd_close (bfd *abfd);
d74 4
a77 4
Close a BFD. If the BFD was open for writing, then pending
operations are completed and the file written out and closed.
If the created file is executable, then @@code{chmod} is called
to mark it as such.
d85 1
a85 1
@@code{TRUE} is returned if all is ok, otherwise @@code{FALSE}.
d91 1
a91 1
bfd_boolean bfd_close_all_done (bfd *);
d94 4
a97 4
Close a BFD.  Differs from @@code{bfd_close} since it does not
complete any pending operations.  This routine would be used
if the application had just used BFD for swapping and didn't
want to use any of the writing code.
d105 1
a105 1
@@code{TRUE} is returned if all is ok, otherwise @@code{FALSE}.
d111 1
a111 1
bfd *bfd_create(const char *filename, bfd *templ);
d114 4
a117 3
Create a new BFD in the manner of @@code{bfd_openw}, but without
opening a file. The new BFD takes the target from the target
used by @@var{template}. The format is always set to @@code{bfd_object}.
d123 1
a123 1
bfd_boolean bfd_make_writable (bfd *abfd);
d132 1
a132 1
@@code{TRUE} is returned if all is ok, otherwise @@code{FALSE}.
d138 1
a138 1
bfd_boolean bfd_make_readable (bfd *abfd);
d148 1
a148 1
@@code{TRUE} is returned if all is ok, otherwise @@code{FALSE}.
a158 65

@@findex calc_crc32
@@subsubsection @@code{calc_crc32}
@@strong{Synopsis}
@@example
unsigned long calc_crc32 (unsigned long crc, const unsigned char *buf, size_t len);
@@end example
@@strong{Description}@@*
Advance the CRC32 given by @@var{crc} through @@var{len}
bytes of @@var{buf}. Return the updated CRC32 value.

@@findex get_debug_link_info
@@subsubsection @@code{get_debug_link_info}
@@strong{Synopsis}
@@example
char *get_debug_link_info (bfd *abfd, unsigned long *crc32_out)
@@end example
@@strong{Description}@@*
fetch the filename and CRC32 value for any separate debuginfo
associated with @@var{abfd}. Return NULL if no such info found,
otherwise return filename and update @@var{crc32_out}.

@@findex separate_debug_file_exists
@@subsubsection @@code{separate_debug_file_exists}
@@strong{Synopsis}
@@example
bfd_boolean separate_debug_file_exists (char * name, unsigned long crc32)
@@end example
@@strong{Description}@@*
Checks to see if @@var{name} is a file and if its contents
match @@var{crc32}.

@@findex find_separate_debug_file
@@subsubsection @@code{find_separate_debug_file}
@@strong{Synopsis}
@@example
char * find_separate_debug_file (bfd *abfd)
@@end example
@@strong{Description}@@*
Searches @@var{abfd} for a reference to separate debugging
information, scans various locations in the filesystem, including
the file tree rooted at @@var{debug_file_directory}, and returns a
filename of such debugging information if the file is found and has
matching CRC32.  Returns NULL if no reference to debugging file
exists, or file cannot be found.

@@findex bfd_follow_gnu_debuglink
@@subsubsection @@code{bfd_follow_gnu_debuglink}
@@strong{Synopsis}
@@example
char * bfd_follow_gnu_debuglink(bfd *abfd, const char *dir);
@@end example
@@strong{Description}@@*
Takes a BFD and searches it for a .gnu_debuglink section.  If this
section is found, examines the section for the name and checksum of
a '.debug' file containing auxiliary debugging
information. Searches filesystem for .debug file in some standard
locations, including the directory tree rooted at @@var{dir}, and if
found returns the full filename. If @@var{dir} is NULL, will search
default path configured into libbfd at build time.

@@strong{Returns}@@*
@@code{NULL} on any errors or failure to locate the .debug file,
otherwise a pointer to a heap-allocated string containing the
filename. The caller is responsible for freeing this string.
@

