head	1.3;
access;
symbols
	binutils-2_15:1.1.2.3
	cvs-200406091940:1.1.1.2
	MIRBSD_7quater:1.2
	cvs-200405160640:1.1.1.1
	cvs-200401271800:1.1.1.1
	cvs-200401261630:1.1.1.1
	cvs-200401021645:1.1.1.1
	MIRBSD_7_ALPHA:1.2.0.6
	MIRBSD_7:1.2.0.4
	cvs-200312222040:1.1.1.1
	cvs-200312031730:1.1.1.1
	MIRBSD_7ter:1.2
	MIRBSD_7_DEV:1.2.0.2
	cvs-200310020700:1.1.1.1
	cvs-200309271030:1.1.1.1
	cvs-200309251530:1.1.1.1
	binutils_2_14:1.1.2.2
	binutils_2_11_2:1.1.2.1
	FSF:1.1.2
	cvs-200308302005:1.1.1.1
	cvs-200308171200:1.1.1.1
	ctm-3496:1.1.1.1
	ctm-3449:1.1.1.1
	ctm-3437:1.1.1.1
	cvs-200307191805:1.1.1.1
	ctm-3425:1.1.1.1
	cvs-200307091500:1.1.1.1
	ctm-3389:1.1.1.1
	cvs-200306291430:1.1.1.1
	ctm-3341:1.1.1.1
	MIRBSD_5:1.1.1.1
	cvs-200306082100:1.1.1.1
	ctm-3316:1.1.1.1
	ctm-3272:1.1.1.1
	ctm-3264:1.1.1.1
	cvs-200305071630:1.1.1.1
	MIRBSD_4:1.1.1.1
	ctm-3203:1.1.1.1
	cvs-20030410-1130:1.1.1.1
	ctm-3155:1.1.1.1
	ctm-3132:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@# @;


1.3
date	2004.08.11.20.55.17;	author tg;	state dead;
branches;
next	1.2;

1.2
date	2003.09.23.21.00.53;	author tg;	state Exp;
branches;
next	1.1;

1.1
date	2003.03.22.17.39.12;	author tg;	state Exp;
branches
	1.1.1.1
	1.1.2.1;
next	;

1.1.1.1
date	2003.03.22.17.39.12;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2004.06.09.20.27.30;	author tg;	state Exp;
branches;
next	;

1.1.2.1
date	2003.09.23.15.41.02;	author tg;	state Exp;
branches;
next	1.1.2.2;

1.1.2.2
date	2003.09.23.16.04.47;	author tg;	state Exp;
branches;
next	1.1.2.3;

1.1.2.3
date	2004.07.15.17.09.03;	author tg;	state Exp;
branches;
next	;


desc
@@


1.3
log
@remove old binutils
@
text
@@@section File formats
A format is a BFD concept of high level file contents type. The
formats supported by BFD are:

@@itemize @@bullet

@@item
@@code{bfd_object}
@@end itemize
The BFD may contain data, symbols, relocations and debug info.

@@itemize @@bullet

@@item
@@code{bfd_archive}
@@end itemize
The BFD contains other BFDs and an optional index.

@@itemize @@bullet

@@item
@@code{bfd_core}
@@end itemize
The BFD contains the result of an executable core dump.

@@findex bfd_check_format
@@subsubsection @@code{bfd_check_format}
@@strong{Synopsis}
@@example
bfd_boolean bfd_check_format (bfd *abfd, bfd_format format);
@@end example
@@strong{Description}@@*
Verify if the file attached to the BFD @@var{abfd} is compatible
with the format @@var{format} (i.e., one of @@code{bfd_object},
@@code{bfd_archive} or @@code{bfd_core}).

If the BFD has been set to a specific target before the
call, only the named target and format combination is
checked. If the target has not been set, or has been set to
@@code{default}, then all the known target backends is
interrogated to determine a match.  If the default target
matches, it is used.  If not, exactly one target must recognize
the file, or an error results.

The function returns @@code{TRUE} on success, otherwise @@code{FALSE}
with one of the following error codes:

@@itemize @@bullet

@@item
@@code{bfd_error_invalid_operation} -
if @@code{format} is not one of @@code{bfd_object}, @@code{bfd_archive} or
@@code{bfd_core}.

@@item
@@code{bfd_error_system_call} -
if an error occured during a read - even some file mismatches
can cause bfd_error_system_calls.

@@item
@@code{file_not_recognised} -
none of the backends recognised the file format.

@@item
@@code{bfd_error_file_ambiguously_recognized} -
more than one backend recognised the file format.
@@end itemize

@@findex bfd_check_format_matches
@@subsubsection @@code{bfd_check_format_matches}
@@strong{Synopsis}
@@example
bfd_boolean bfd_check_format_matches (bfd *abfd, bfd_format format,
    char ***matching);
@@end example
@@strong{Description}@@*
Like @@code{bfd_check_format}, except when it returns FALSE with
@@code{bfd_errno} set to @@code{bfd_error_file_ambiguously_recognized}.  In that
case, if @@var{matching} is not NULL, it will be filled in with
a NULL-terminated list of the names of the formats that matched,
allocated with @@code{malloc}.
Then the user may choose a format and try again.

When done with the list that @@var{matching} points to, the caller
should free it.

@@findex bfd_set_format
@@subsubsection @@code{bfd_set_format}
@@strong{Synopsis}
@@example
bfd_boolean bfd_set_format (bfd *abfd, bfd_format format);
@@end example
@@strong{Description}@@*
This function sets the file format of the BFD @@var{abfd} to the
format @@var{format}. If the target set in the BFD does not
support the format requested, the format is invalid, or the BFD
is not open for writing, then an error occurs.

@@findex bfd_format_string
@@subsubsection @@code{bfd_format_string}
@@strong{Synopsis}
@@example
const char *bfd_format_string (bfd_format format);
@@end example
@@strong{Description}@@*
Return a pointer to a const string
@@code{invalid}, @@code{object}, @@code{archive}, @@code{core}, or @@code{unknown},
depending upon the value of @@var{format}.

@


1.2
log
@looks as if some sour wine (Federweiﬂer <german>, for an English
description see http://forum.leo.org/archiv/2002_11/04/20021104125717e_en.html)
could help me to bear the pain upgrading binutils to 2.14

todo:
 - test if this works at all
 - test if this works
 - test if nothing breaks
 - nuke all occurences of "false" and "true" in binutils (including gdb),
   see bfd.h "Poison" for reference
 - talk to the OpenBSD people, ask them if they could improve this
@
text
@@


1.1
log
@Initial revision
@
text
@d30 1
a30 1
boolean bfd_check_format(bfd *abfd, bfd_format format);
d45 1
a45 1
The function returns @@code{true} on success, otherwise @@code{false}
d73 2
a74 1
boolean bfd_check_format_matches(bfd *abfd, bfd_format format, char ***matching);
d77 1
a77 1
Like @@code{bfd_check_format}, except when it returns false with
d91 1
a91 1
boolean bfd_set_format(bfd *abfd, bfd_format format);
d103 1
a103 1
CONST char *bfd_format_string(bfd_format format);
@


1.1.2.1
log
@vendor-branch-i-fy GNU binutils (2.11.2) to facilitate an update
@
text
@@


1.1.2.2
log
@Import GNU binutils 2.14 from the Free Software Foundation
(in case the update goes FUBAR, it can be easily backed off)
@
text
@d30 1
a30 1
bfd_boolean bfd_check_format (bfd *abfd, bfd_format format);
d45 1
a45 1
The function returns @@code{TRUE} on success, otherwise @@code{FALSE}
d73 1
a73 2
bfd_boolean bfd_check_format_matches (bfd *abfd, bfd_format format,
    char ***matching);
d76 1
a76 1
Like @@code{bfd_check_format}, except when it returns FALSE with
d90 1
a90 1
bfd_boolean bfd_set_format (bfd *abfd, bfd_format format);
d102 1
a102 1
const char *bfd_format_string (bfd_format format);
@


1.1.2.3
log
@GNU Binutils, version 2.15
@
text
@d73 2
a74 2
bfd_boolean bfd_check_format_matches
   (bfd *abfd, bfd_format format, char ***matching);
@


1.1.1.1
log
@Import OpenBSD 3.3 source repository from CTM 3132 the first time
This opens an OpenBSD-mirabile (aka MirBSD) repository.

### MirBSD is:
# Copyright (c) 1982-2003 by Thorsten "mirabile" Glaser <x86@@ePost.de>
# Copyright © 1968-2003  The authors of And contributors to UNIXÆ, the
#       C Language, BSD/Berkeley Unix; 386BSD, NetBSD 1.1 and OpenBSD.
#
# Anyone who obtained a copy of this work is hereby permitted to freely use,
# distribute, modify, merge, sublicence, give away or sell it as long as the
# authors are given due credit and the following notice is retained:
#
# This work is provided "as is", with no explicit or implicit warranty what-
# soever. Use it only at your own risk. In no event may an author or contri-
# butor be held liable for any damage, directly or indirectly, that origina-
# ted through or is caused by creation or modification of this work.

MirBSD is my private tree. MirBSD does not differ very much from OpenBSD
and intentionally tracks OpenBSD. That's why it _is_ OpenBSD, just not the
official one. It's like with DarrenBSD.

At time of this writing, no advertising for MirBSD must be done,
because the advertising clause has not yet been sorted out.

http://templeofhate.com/tglaser/MirBSD/index.php
@
text
@@


1.1.1.2
log
@Sync of src/gnu with OpenBSD (promised a long time ago)
@
text
@d30 1
a30 1
bfd_boolean bfd_check_format (bfd *abfd, bfd_format format);
d45 1
a45 1
The function returns @@code{TRUE} on success, otherwise @@code{FALSE}
d73 1
a73 2
bfd_boolean bfd_check_format_matches (bfd *abfd, bfd_format format,
    char ***matching);
d76 1
a76 1
Like @@code{bfd_check_format}, except when it returns FALSE with
d90 1
a90 1
bfd_boolean bfd_set_format (bfd *abfd, bfd_format format);
d102 1
a102 1
const char *bfd_format_string (bfd_format format);
@

