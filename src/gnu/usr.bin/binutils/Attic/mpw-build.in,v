head	1.2;
access;
symbols
	cvs-200406091940:1.1.1.1
	cvs-200405160640:1.1.1.1
	cvs-200401271800:1.1.1.1
	cvs-200401261630:1.1.1.1
	cvs-200401021645:1.1.1.1
	cvs-200312222040:1.1.1.1
	cvs-200312031730:1.1.1.1
	cvs-200310020700:1.1.1.1
	cvs-200309271030:1.1.1.1
	cvs-200309251530:1.1.1.1
	binutils_2_14:1.1.2.1
	binutils_2_11_2:1.1.2.1
	FSF:1.1.2
	cvs-200308302005:1.1.1.1
	cvs-200308171200:1.1.1.1
	ctm-3496:1.1.1.1
	ctm-3449:1.1.1.1
	ctm-3437:1.1.1.1
	cvs-200307191805:1.1.1.1
	ctm-3425:1.1.1.1
	cvs-200307091500:1.1.1.1
	ctm-3389:1.1.1.1
	cvs-200306291430:1.1.1.1
	ctm-3341:1.1.1.1
	cvs-200306082100:1.1.1.1
	ctm-3316:1.1.1.1
	ctm-3272:1.1.1.1
	ctm-3264:1.1.1.1
	cvs-200305071630:1.1.1.1
	MIRBSD_4:1.1.1.1
	ctm-3203:1.1.1.1
	cvs-20030410-1130:1.1.1.1
	ctm-3155:1.1.1.1
	ctm-3132:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@# @;


1.2
date	2003.05.16.17.41.24;	author tg;	state dead;
branches;
next	1.1;

1.1
date	2003.03.22.17.38.51;	author tg;	state Exp;
branches
	1.1.1.1
	1.1.2.1;
next	;

1.1.1.1
date	2003.03.22.17.38.51;	author tg;	state Exp;
branches;
next	;

1.1.2.1
date	2003.09.23.15.39.52;	author tg;	state Exp;
branches;
next	;


desc
@@


1.2
log
@remove the FSF changelog files and other unused files; use cvsweb or anoncvs to retrieve them
@
text
@# Top-level script fragment to build everything for MPW.

Set savedir "`Directory`"

#Set Echo 1

Set ThisScript "{0}"

Set objdir ":"

Set verify 0

Set BuildTarget "none"

# Parse arguments.

Loop
	Break If {#} == 0
		If "{BuildTarget}" =~ /none/
			Set BuildTarget "{1}"
		Else
			Echo Only one build target allowed, ignoring "{1}"
		End If
	Shift 1
End Loop

If "{BuildTarget}" =~ /none/
	Set BuildTarget "all"
End If

If {verify} == 1
	Echo "#" Doing "{ThisScript}" "{BuildTarget}" in "`Directory`" ... 
End If

Set ranmake 0

If "`Exists Makefile`" != ""
	Echo "Set Echo 1" >{BuildTarget}.makeout
	Make -f Makefile {BuildTarget} >>{BuildTarget}.makeout
	{BuildTarget}.makeout
	Delete {BuildTarget}.makeout
	Set ranmake 1
End If

If "`Exists Makefile.PPC`" != ""
	Echo "Set Echo 1" >{BuildTarget}.makeout.ppc
	Make -f Makefile.PPC {BuildTarget} >>{BuildTarget}.makeout.ppc
	{BuildTarget}.makeout.ppc
	Delete {BuildTarget}.makeout.ppc
	Set ranmake 1
End If

If {ranmake} == 1
	Exit
End If

# Dispatch on various pseudo-targets.

If "{BuildTarget}" =~ /all/
	Echo Started `Date`
	"{ThisScript}" all-gcc
	"{ThisScript}" all-gdb
	Echo Finished `Date`
Else If "{BuildTarget}" =~ /all-libiberty/
	"{ThisScript}" do-libiberty
Else If "{BuildTarget}" =~ /all-bfd/
	"{ThisScript}" do-bfd
Else If "{BuildTarget}" =~ /all-opcodes/
	"{ThisScript}" do-opcodes
Else If "{BuildTarget}" =~ /all-byacc/
	"{ThisScript}" do-byacc
Else If "{BuildTarget}" =~ /all-flex/
	"{ThisScript}" all-libiberty
	"{ThisScript}" do-flex
Else If "{BuildTarget}" =~ /all-binutils/
	"{ThisScript}" all-libiberty
	"{ThisScript}" all-bfd
	"{ThisScript}" all-opcodes
	"{ThisScript}" do-binutils
Else If "{BuildTarget}" =~ /all-gas/
	"{ThisScript}" all-libiberty
	"{ThisScript}" all-bfd
	"{ThisScript}" all-opcodes
	"{ThisScript}" do-gas
Else If "{BuildTarget}" =~ /all-gcc/
	"{ThisScript}" all-libiberty
	"{ThisScript}" all-gas
	"{ThisScript}" all-binutils
	"{ThisScript}" all-ld
	"{ThisScript}" do-gcc
Else If "{BuildTarget}" =~ /all-gdb/
	"{ThisScript}" all-libiberty
	"{ThisScript}" all-bfd
	"{ThisScript}" all-opcodes
	"{ThisScript}" do-gdb
Else If "{BuildTarget}" =~ /all-grez/
	"{ThisScript}" all-libiberty
	"{ThisScript}" all-bfd
	"{ThisScript}" do-grez
Else If "{BuildTarget}" =~ /all-ld/
	"{ThisScript}" all-libiberty
	"{ThisScript}" all-bfd
	"{ThisScript}" all-opcodes
	"{ThisScript}" do-ld
Else If "{BuildTarget}" =~ /do-byacc/
	SetDirectory :byacc:
	::mpw-build all
Else If "{BuildTarget}" =~ /do-flex/
	SetDirectory :flex:
	::mpw-build _bootstrap
	::mpw-build all
Else If "{BuildTarget}" =~ /do-bfd/
	SetDirectory :bfd:
	::mpw-build all
Else If "{BuildTarget}" =~ /do-libiberty/
	SetDirectory :libiberty:
	::mpw-build all
Else If "{BuildTarget}" =~ /do-opcodes/
	SetDirectory :opcodes:
	::mpw-build all
Else If "{BuildTarget}" =~ /do-binutils/
	SetDirectory :binutils:
	::mpw-build stamps
	::mpw-build all
Else If "{BuildTarget}" =~ /do-gas/
	SetDirectory :gas:
	::mpw-build stamps
	::mpw-build all
Else If "{BuildTarget}" =~ /do-gcc/
	SetDirectory :gcc:
	:mpw-build all
Else If "{BuildTarget}" =~ /do-gdb/
	SetDirectory :gdb:
	::mpw-build all
Else If "{BuildTarget}" =~ /do-grez/
	SetDirectory :grez:
	::mpw-build all
Else If "{BuildTarget}" =~ /do-ld/
	SetDirectory :ld:
	::mpw-build all
Else If "{BuildTarget}" =~ /do-newlib/
	SetDirectory :newlib:
	::mpw-build all
Else If "{BuildTarget}" =~ /install/
	"{ThisScript}" install-only-top
	"{ThisScript}" install-binutils
	"{ThisScript}" install-gas
	"{ThisScript}" install-gcc
	"{ThisScript}" install-ld
	"{ThisScript}" install-gdb
Else If "{BuildTarget}" =~ /install-binutils/
	SetDirectory :binutils:
	::mpw-build install
Else If "{BuildTarget}" =~ /install-gas/
	SetDirectory :gas:
	::mpw-build install
Else If "{BuildTarget}" =~ /install-gcc/
	SetDirectory :gcc:
	:mpw-build install
Else If "{BuildTarget}" =~ /install-gdb/
	SetDirectory :gdb:
	::mpw-build install
Else If "{BuildTarget}" =~ /install-grez/
	SetDirectory :grez:
	::mpw-build install
Else If "{BuildTarget}" =~ /install-ld/
	SetDirectory :ld:
	::mpw-build install
Else If "{BuildTarget}" =~ /install-only/
	"{ThisScript}" install-only-top
	"{ThisScript}" install-only-binutils
	"{ThisScript}" install-only-gas
	"{ThisScript}" install-only-gcc
	"{ThisScript}" install-only-gdb
	"{ThisScript}" install-only-ld
Else If "{BuildTarget}" =~ /install-only-binutils/
	SetDirectory :binutils:
	::mpw-build install-only
Else If "{BuildTarget}" =~ /install-only-gas/
	SetDirectory :gas:
	::mpw-build install-only
Else If "{BuildTarget}" =~ /install-only-gcc/
	SetDirectory :gcc:
	:mpw-build install-only
Else If "{BuildTarget}" =~ /install-only-gdb/
	SetDirectory :gdb:
	::mpw-build install-only
Else If "{BuildTarget}" =~ /install-only-grez/
	SetDirectory :grez:
	::mpw-build install-only
Else If "{BuildTarget}" =~ /install-only-ld/
	SetDirectory :ld:
	::mpw-build install-only
Else If "{BuildTarget}" =~ /install-only-top/
	NewFolderRecursive "{prefix}"
	If "{prefix}" != "`Directory`"
		Duplicate -y 'Read Me for MPW' "{prefix}"'Read Me for MPW'
		Duplicate -y Install "{prefix}"Install
	End If
Else
	Echo {BuildTarget} not understood, ignoring
End If

SetDirectory "{savedir}"
@


1.1
log
@Initial revision
@
text
@@


1.1.2.1
log
@vendor-branch-i-fy GNU binutils (2.11.2) to facilitate an update
@
text
@@


1.1.1.1
log
@Import OpenBSD 3.3 source repository from CTM 3132 the first time
This opens an OpenBSD-mirabile (aka MirBSD) repository.

### MirBSD is:
# Copyright (c) 1982-2003 by Thorsten "mirabile" Glaser <x86@@ePost.de>
# Copyright © 1968-2003  The authors of And contributors to UNIX®, the
#       C Language, BSD/Berkeley Unix; 386BSD, NetBSD 1.1 and OpenBSD.
#
# Anyone who obtained a copy of this work is hereby permitted to freely use,
# distribute, modify, merge, sublicence, give away or sell it as long as the
# authors are given due credit and the following notice is retained:
#
# This work is provided "as is", with no explicit or implicit warranty what-
# soever. Use it only at your own risk. In no event may an author or contri-
# butor be held liable for any damage, directly or indirectly, that origina-
# ted through or is caused by creation or modification of this work.

MirBSD is my private tree. MirBSD does not differ very much from OpenBSD
and intentionally tracks OpenBSD. That's why it _is_ OpenBSD, just not the
official one. It's like with DarrenBSD.

At time of this writing, no advertising for MirBSD must be done,
because the advertising clause has not yet been sorted out.

http://templeofhate.com/tglaser/MirBSD/index.php
@
text
@@
