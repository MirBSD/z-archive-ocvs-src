head	1.2;
access;
symbols
	cvs-200405160640:1.1.1.1
	cvs-200401271800:1.1.1.1
	cvs-200401261630:1.1.1.1
	cvs-200401021645:1.1.1.1
	cvs-200312222040:1.1.1.1
	cvs-200312031730:1.1.1.1
	cvs-200310020700:1.1.1.1
	cvs-200309271030:1.1.1.1
	cvs-200309251530:1.1.1.1
	cvs-200308302005:1.1.1.1
	cvs-200308171200:1.1.1.1
	ctm-3496:1.1.1.1
	ctm-3449:1.1.1.1
	ctm-3437:1.1.1.1
	cvs-200307191805:1.1.1.1
	ctm-3425:1.1.1.1
	cvs-200307091500:1.1.1.1
	ctm-3389:1.1.1.1
	cvs-200306291430:1.1.1.1
	ctm-3341:1.1.1.1
	cvs-200306082100:1.1.1.1
	ctm-3316:1.1.1.1
	ctm-3272:1.1.1.1
	ctm-3264:1.1.1.1
	cvs-200305071630:1.1.1.1
	MIRBSD_4:1.1.1.1
	ctm-3203:1.1.1.1
	cvs-20030410-1130:1.1.1.1
	ctm-3155:1.1.1.1
	ctm-3132:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@# @;


1.2
date	2003.05.16.17.42.57;	author tg;	state dead;
branches;
next	1.1;

1.1
date	2003.03.22.17.40.44;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.03.22.17.40.44;	author tg;	state Exp;
branches;
next	;


desc
@@


1.2
log
@remove the FSF changelog files and other unused files; use cvsweb or anoncvs to retrieve them
@
text
@#   Copyright (C) 1993 Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */

# Please email any bugs, comments, and/or additions to this file to:
# DejaGnu@@cygnus.com

# This file was written by Ian Lance Taylor <ian@@cygnus.com>.

# GDB support routines for a board using the MIPS remote debugging
# protocol.  These are actually pretty generic.

# DejaGnu currently assumes that debugging is being done over the main
# console port.  It would probably be more convenient for people using
# IDT boards to permit the debugging port and the connected port to be
# different, since an IDT board has two ports.  This would require
# extending some of the tests in a fashion similar to that done for
# VxWorks, because the test output would appear on the other port,
# rather than being displayed by gdb.

load_lib remote.exp
load_lib gdb.exp

#
# gdb_version -- extract and print the version number of gdb
#
proc gdb_version {} {
    global GDB
    global GDBFLAGS
    global prompt
    set tmp [exec echo "q" | $GDB]
    set version [lindex $tmp [lsearch $tmp "\[0-9\]*"]]
    set version [string range $version 0 [expr [string length $version]-2]]
    clone_output "[which $GDB] version $version $GDBFLAGS\n"
}

#
# gdb_load -- load a file into the GDB. 
#             Returns a 0 if there was an error,
#                       1 if it load successfully.
#
proc gdb_load { arg } {
    global verbose
    global loadpath
    global loadfile
    global prompt
    global spawn_id
    global GDB
    global expect_out
    global targetname

    set loadfile [file tail $arg]
    set loadpath [file dirname $arg]

    send "file $arg\n"
    expect {
	-re "A program is being debugged already..*Kill it.*y or n. $" {
	    send "y\n"
	    exp_continue
	}
	-re "Reading symbols from.*done..*$prompt $" {}
	-re "$prompt $" { perror "GDB couldn't read file" }
	timeout { perror "(timeout) read symbol file" ; return -1 }
    }

    send "target mips $targetname\n"
    set timeout 60
    verbose "Timeout is now $timeout seconds" 2
    expect {
	-re "Remote MIPS debugging.*$prompt $"	{
	    if $verbose>1 then {
		send_user "Set target to $targetname\n"
	    }
	}
	timeout { 
	    perror "Couldn't set MIPS target."
	    set timeout 10
	    verbose "Timeout is now $timeout seconds" 2
	    return -1
	}
    }
    
    send "load $arg\n"
    if $verbose>1 then {
	send_user "Loading $arg into $GDB\n"
    }
    set timeout 2400
    verbose "Timeout is now $timeout seconds" 2
    expect {
	-re "Loading.*$prompt $" {
	    if $verbose>1 then {
		send_user "Loaded $arg into $GDB\n"
	    }
	    set timeout 30
	    verbose "Timeout is now $timeout seconds" 2
	}
	-re "$prompt $"     {
	    if $verbose>1 then {
		 perror "GDB couldn't load."
	    }
	}
	timeout {
	    if $verbose>1 then {
		 perror "Timed out trying to load $arg."
	    }
	}
    }
    set timeout 10
    verbose "Timeout is now $timeout seconds" 2
    if [info exists expect_out(buffer)] then {
	send_log $expect_out(buffer)
    }
    return 0
}

#
# gdb_start -- start GDB running.
#
proc gdb_start { } {
    global GDB
    global GDBFLAGS
    global spawn_id
    global shell_id
    global prompt
    global verbose
    global targetname
    global connectmode
    global reboot
    global baud

    # reboot the board to get a clean start
    if $reboot then {
	if ![info exists connectmode] then {
	    set connectmode "kermit"
	}	
	if ![info exists baud] then {
	    set baud 9600
	}
	set shell_id [ eval $connectmode "$targetname" ]
	send -i $shell_id "\n"
	expect {
	    -i $shell_id -re "<IDT>$" { }
	    timeout {
		send -i $shell_id "\CC"
		expect {
		    -i $shell_id -re "<IDT>$" { }
		    timeout {
		 perror "(timeout) board did not come up."; return -1
		    }
		}
	    }
	}
	send -i $shell_id "go 0xbfc00000\n"
	expect {
	    -i $shell_id -re "<IDT>$" { }
	    timeout     { perror "(timeout) board did not come up."; return -1 }
	}
	verbose "about to exit kermit"
	exit_remote_shell $shell_id
    }

    set GDB [which $GDB]
    # start GDB
    if [ llength $GDBFLAGS ] then {
	spawn $GDB $GDBFLAGS
    } else {
	spawn $GDB
    }
    expect  {
	-re ".*\r\n$prompt $" {
	    verbose "GDB initialized."
	}
	-re "$prompt $"	{
	    perror "GDB never initialized."
	    return -1
	}
	timeout		{
	    perror "(timeout) GDB never initialized."
	    return -1
	}
    }

    # force the height to "unlimited", so no pagers get used
    send "set height 0\n"
    expect -re ".*$prompt $" {}
    # force the width to "unlimited", so no wraparound occurs
    send "set width 0\n"
    expect -re ".*$prompt $" {}

    # Don't use floating point instructions, in case the board doesn't
    # support them.
    send "set mipsfpu off\n"
    expect -re ".*$prompt $" {}

#    if $verbose>1 then {
#	send_user "Setting up target, please wait...\n"
#    }
#    send "target mips $targetname\n"
#    set timeout 60
#    verbose "Timeout is now $timeout seconds" 2
#    expect {
#	-re "Remote MIPS debugging.*$prompt $"	{
#	    if $verbose>1 then {
#		send_user "Set target to $targetname\n"
#	    }
#	}
#	timeout { 
#	    perror "Couldn't set MIPS target."
#	    set timeout 10
#	    verbose "Timeout is now $timeout seconds" 2
#	    return -1
#	}
#    }
    set timeout 10
    verbose "Timeout is now $timeout seconds" 2
}

expect_after {
    "<return>"		   { send "\n"; perror "Window too small." }
    -re "\(y or n\) " 	   { send "n\n"; perror "Got interactive prompt." }
    full_buffer		   { perror "internal buffer is full." }
    eof			   { perror "eof -- pty is hosed." }
    timeout			   { perror "timeout." }
    "virtual memory exhausted" { perror "virtual memory exhausted." }
    "Undefined command"	   { perror "send string probably wrong." }
}

proc gdb_exit { } {
    catch default_gdb_exit
}

gdb_start

# make sure gdb has actually started, otherwise if the first test
# timesout, DejaGnu crashes
send "\n"
expect {
    -re "$prompt"
    }
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Import OpenBSD 3.3 source repository from CTM 3132 the first time
This opens an OpenBSD-mirabile (aka MirBSD) repository.

### MirBSD is:
# Copyright (c) 1982-2003 by Thorsten "mirabile" Glaser <x86@@ePost.de>
# Copyright © 1968-2003  The authors of And contributors to UNIX®, the
#       C Language, BSD/Berkeley Unix; 386BSD, NetBSD 1.1 and OpenBSD.
#
# Anyone who obtained a copy of this work is hereby permitted to freely use,
# distribute, modify, merge, sublicence, give away or sell it as long as the
# authors are given due credit and the following notice is retained:
#
# This work is provided "as is", with no explicit or implicit warranty what-
# soever. Use it only at your own risk. In no event may an author or contri-
# butor be held liable for any damage, directly or indirectly, that origina-
# ted through or is caused by creation or modification of this work.

MirBSD is my private tree. MirBSD does not differ very much from OpenBSD
and intentionally tracks OpenBSD. That's why it _is_ OpenBSD, just not the
official one. It's like with DarrenBSD.

At time of this writing, no advertising for MirBSD must be done,
because the advertising clause has not yet been sorted out.

http://templeofhate.com/tglaser/MirBSD/index.php
@
text
@@
