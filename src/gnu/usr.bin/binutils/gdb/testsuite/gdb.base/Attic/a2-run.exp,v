head	1.2;
access;
symbols
	cvs-200406091940:1.1.1.2
	cvs-200405160640:1.1.1.1
	cvs-200401271800:1.1.1.1
	cvs-200401261630:1.1.1.1
	cvs-200401021645:1.1.1.1
	cvs-200312222040:1.1.1.1
	cvs-200312031730:1.1.1.1
	cvs-200310020700:1.1.1.1
	cvs-200309271030:1.1.1.1
	cvs-200309251530:1.1.1.1
	cvs-200308302005:1.1.1.1
	cvs-200308171200:1.1.1.1
	ctm-3496:1.1.1.1
	ctm-3449:1.1.1.1
	ctm-3437:1.1.1.1
	cvs-200307191805:1.1.1.1
	ctm-3425:1.1.1.1
	cvs-200307091500:1.1.1.1
	ctm-3389:1.1.1.1
	cvs-200306291430:1.1.1.1
	ctm-3341:1.1.1.1
	cvs-200306082100:1.1.1.1
	ctm-3316:1.1.1.1
	ctm-3272:1.1.1.1
	ctm-3264:1.1.1.1
	cvs-200305071630:1.1.1.1
	MIRBSD_4:1.1.1.1
	ctm-3203:1.1.1.1
	cvs-20030410-1130:1.1.1.1
	ctm-3155:1.1.1.1
	ctm-3132:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@# @;


1.2
date	2003.05.16.17.43.01;	author tg;	state dead;
branches;
next	1.1;

1.1
date	2003.03.22.17.40.44;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.03.22.17.40.44;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2004.06.09.20.29.41;	author tg;	state Exp;
branches;
next	;


desc
@@


1.2
log
@remove the FSF changelog files and other unused files; use cvsweb or anoncvs to retrieve them
@
text
@#   Copyright (C) 1988, 1990, 1991, 1992, 1994 Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */

# Please email any bugs, comments, and/or additions to this file to:
# bug-gdb@@prep.ai.mit.edu

# This file was written by Rob Savoye. (rob@@cygnus.com)

# These tests don't work for targets can't take arguments...

if $noargs then {
	verbose "Skipping a2-run.exp because of noargs."
	return
	}

if $tracelevel then {
	strace $tracelevel
	}

#
# test running programs
#
set prms_id 0
set bug_id 0

set testfile "run"
set srcfile ${testfile}.c
set binfile ${objdir}/${subdir}/${testfile}
if  { [compile "${srcdir}/${subdir}/${srcfile} -g -o ${binfile}"] != "" } {
    perror "Couldn't compile ${srcfile}"
    return -1
}

gdb_exit
gdb_start
gdb_reinitialize_dir $srcdir/$subdir
gdb_load ${binfile}

# Run with no arguments.
# On VxWorks this justs make sure the program was run.
send "run\n"
expect -re "run\[\r\n\]+" {}
if [istarget "*-*-vxworks*"] then {
    set timeout 120
    verbose "Timeout is now $timeout seconds" 2
    expect {
	-i $shell_id "Program exited normally" {
	    unresolved "run \"$testfile\" with no args"
	}
	-i $shell_id -re "usage:  factorial <number>" {
	    pass "run \"$testfile\" with no args"
	}
	timeout	{
	    fail "(timeout) run \"$testfile\" with no args"
	}
    }
    set timeout 10
    verbose "Timeout is now $timeout seconds" 2
    expect -re "$prompt $" {}
} else {
    expect {
	-re "Starting program.*usage:  factorial <number>.*Program exited with code 01.*$prompt $" {
	    pass "run \"$testfile\" with no args"
	}
	-re ".*$prompt $" {
	    fail "run \"$testfile\" with no args"
	}
	timeout	{
	    fail "(timeout) run \"$testfile\" no args"
	}
    }
}

# Now run with some arguments
if [istarget "*-*-vxworks*"] then {
    send "run vxmain \"5\"\n"
    expect -re "run vxmain \"5\"\r\n" {}
    set timeout 120
    verbose "Timeout is now $timeout seconds" 2
    expect {
	-i $shell_id "Program exited normally" {
	    unresolved "run \"$testfile\" with arg"
	}
	-i $shell_id "120" {
	    pass "run \"$testfile\" with arg"
	}
	timeout {
	    fail "(timeout) run \"$testfile\" with arg"
	}
    }
    set timeout 10
    verbose "Timeout is now $timeout seconds" 2
    expect -re "$prompt $" {}
} else {
	setup_xfail "mips-idt-*"
	send "run 5\n"
	expect {
	    -re "Starting program.*$testfile.*120.*$prompt $"\
				{ pass "run \"$testfile\" with arg" }
	    -re ".*$prompt $"	{ fail "run \"$testfile\" with arg" }
	    timeout		{ fail "(timeout) run \"$testfile\" with arg" }
	}
}

# Run again with same arguments.
setup_xfail "mips-idt-*"
send "run\n"
expect -re "run\[\r\n\]+" {}
if [istarget "*-*-vxworks*"] then {
    set timeout 120
    verbose "Timeout is now $timeout seconds" 2
    expect {
	-i $shell_id "Program exited normally" {
	    unresolved "run \"$testfile\" again with same args"
	}
	-i $shell_id "120" { pass "run \"$testfile\" again with same args" }
	timeout { fail "(timeout) run \"$testfile\" again with same args" }
    }
    set timeout 10
    verbose "Timeout is now $timeout seconds" 2
    expect -re "$prompt $" {}
} else {
    expect {
	    -re "Starting program.*120.*$prompt $"\
				{ pass "run \"$testfile\" again with same args" }
	    -re ".*$prompt $"	{ fail "run \"$testfile\" again with same args" }
	    timeout		{ fail "(timeout) run \"$testfile\" again with same args" }
	}
}

# Use "set args" command to specify no arguments as default and run again.
if [istarget "*-*-vxworks*"] then {
    send "set args main\n"
} else {
    send "set args\n"
}
expect -re "$prompt $"

send "run\n"
expect -re "run\[\r\n\]+" {}
if [istarget "*-*-vxworks*"] then {
    set timeout 120
    verbose "Timeout is now $timeout seconds" 2
    expect {
	-i $shell_id "Program exited normally" {
	    unresolved "run after setting args to nil"
	}
	-i $shell_id "usage:  factorial <number>" {
	    pass "run after setting args to nil"
	}
	timeout {
	    fail "(timeout) run after setting args to nil"
	}
    }
    set timeout 10
    verbose "Timeout is now $timeout seconds" 2
    expect -re "$prompt $" {}
} else {
    expect {
	-re "Starting program.*usage:  factorial <number>.*$prompt $" {
	    pass "run after setting args to nil"
	}
	-re ".*$prompt $" {
	    fail "run after setting args to nil"
	}
	timeout {
	    fail "(timeout) run after setting args to nil"
	}
    }
}

# Use "set args" command to specify an argument and run again.
setup_xfail "mips-idt-*"
if [istarget "*-*-vxworks*"] then {
   send "set args vxmain \"6\"\n"
} else {
	send "set args 6\n"
}
expect -re "$prompt $"
send "run\n"
expect -re "run\[\r\n\]+" {}
if [istarget "*-*-vxworks*"] then {
    set timeout 120
    verbose "Timeout is now $timeout seconds" 2
    expect {
	-i $shell_id "Program exited normally" {
	    unresolved "run \"$testfile\" again after setting args"
	}
	-i $shell_id "720" {
	    pass "run \"$testfile\" again after setting args"
	}
	timeout {
	    fail "(timeout) run \"$testfile\" again after setting args"
	}
    }
    set timeout 10
    verbose "Timeout is now $timeout seconds" 2
    expect -re "$prompt $" {}
} else {
    expect {
	    -re "Starting program.*720.*$prompt $" {
		pass "run \"$testfile\" again after setting args"
	    }
	    -re ".*$prompt $" {
		fail "run \"$testfile\" again after setting args"
	    }
	    timeout {
		fail "(timeout) run \"$testfile\" again after setting args"
	    }
	}
}

# GOAL: Test that shell is being used with "run".  For remote debugging
# targets, there is no guarantee that a "shell" (whatever that is) is used.
if [isnative] then {
    send "run `echo 8`\n"
    expect {
	-re "Starting program.*40320.*$prompt $" {
	    pass "run \"$testfile\" with shell"
	}
	-re ".*$prompt $" {
	    fail "run \"$testfile\" with shell"
	}
	timeout	{
	    fail "(timeout) run \"$testfile\" with shell"
	}
    }
}

# Reset the default arguments for VxWorks
if [istarget "*-*-vxworks*"] then {
    send "set args main\n"
    expect -re ".*$prompt $" {}
}

@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Import OpenBSD 3.3 source repository from CTM 3132 the first time
This opens an OpenBSD-mirabile (aka MirBSD) repository.

### MirBSD is:
# Copyright (c) 1982-2003 by Thorsten "mirabile" Glaser <x86@@ePost.de>
# Copyright © 1968-2003  The authors of And contributors to UNIX®, the
#       C Language, BSD/Berkeley Unix; 386BSD, NetBSD 1.1 and OpenBSD.
#
# Anyone who obtained a copy of this work is hereby permitted to freely use,
# distribute, modify, merge, sublicence, give away or sell it as long as the
# authors are given due credit and the following notice is retained:
#
# This work is provided "as is", with no explicit or implicit warranty what-
# soever. Use it only at your own risk. In no event may an author or contri-
# butor be held liable for any damage, directly or indirectly, that origina-
# ted through or is caused by creation or modification of this work.

MirBSD is my private tree. MirBSD does not differ very much from OpenBSD
and intentionally tracks OpenBSD. That's why it _is_ OpenBSD, just not the
official one. It's like with DarrenBSD.

At time of this writing, no advertising for MirBSD must be done,
because the advertising clause has not yet been sorted out.

http://templeofhate.com/tglaser/MirBSD/index.php
@
text
@@


1.1.1.2
log
@Sync of src/gnu with OpenBSD (promised a long time ago)
@
text
@d1 1
a1 2
#   Copyright 1988, 1990, 1991, 1992, 1994, 1995, 1996, 1997, 1999, 2000
#   Free Software Foundation, Inc.
d15 1
a15 1
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  
d24 4
a27 9
if [target_info exists noargs] then {
    verbose "Skipping a2-run.exp because of noargs."
    return
}

# Can't do this test without stdio support.
if [gdb_skip_stdio_test "a2run.exp"] {
    return
}
d30 2
a31 2
    strace $tracelevel
}
d42 3
a44 2
if  { [gdb_compile "${srcdir}/${subdir}/${srcfile}" "${binfile}" executable {debug}] != "" } {
    gdb_suppress_entire_file "Testcase compile failed, so all tests in this file will automatically fail."
d54 2
a55 2
gdb_run_cmd

d59 2
a60 2
    gdb_expect {
	 "Program exited normally" {
d63 1
a63 1
	 -re "usage:  factorial <number>" {
d72 1
a72 1
    gdb_expect -re "$gdb_prompt $" {}
d74 2
a75 2
    gdb_expect {
	-re ".*usage:  factorial <number>.*Program exited with code 01.*$gdb_prompt $" {
d78 1
a78 4
	-re ".*usage:  factorial <number>.* EXIT code 1.*Program exited normally.*$gdb_prompt $" {
	    pass "run \"$testfile\" with no args (exit wrapper)"
	}
	-re ".*$gdb_prompt $" {
a79 1
	    verbose "expect_out is $expect_out(buffer)" 2
d86 1
d89 2
a90 2
    send_gdb "run vxmain \"5\"\n"
    gdb_expect -re "run vxmain \"5\"\r\n" {}
d93 2
a94 2
    gdb_expect {
	 "Program exited normally" {
d97 1
a97 1
	 "120" {
d106 1
a106 1
    gdb_expect -re "$gdb_prompt $" {}
d108 4
a111 4
	setup_xfail "mips-idt-*" "arm-*-coff strongarm-*-coff"
	gdb_run_cmd 5
	gdb_expect {
	    -re ".*120.*$gdb_prompt $"\
d113 1
a113 1
	    -re ".*$gdb_prompt $"	{ fail "run \"$testfile\" with arg" }
d120 2
a121 2
gdb_run_cmd

d125 2
a126 2
    gdb_expect {
	 "Program exited normally" {
d129 1
a129 1
	 "120" { pass "run \"$testfile\" again with same args" }
d134 1
a134 1
    gdb_expect -re "$gdb_prompt $" {}
d136 2
a137 3
    setup_xfail "arm-*-coff strongarm-*-coff"
    gdb_expect {
	    -re ".*120.*$gdb_prompt $"\
d139 1
a139 1
	    -re ".*$gdb_prompt $"	{ fail "run \"$testfile\" again with same args" }
d146 1
a146 1
    send_gdb "set args main\n"
d148 1
a148 1
    send_gdb "set args\n"
d150 1
a150 3
gdb_expect -re "$gdb_prompt $"

gdb_run_cmd
d152 2
d157 2
a158 2
    gdb_expect {
	 "Program exited normally" {
d161 1
a161 1
	 "usage:  factorial <number>" {
d170 1
a170 1
    gdb_expect -re "$gdb_prompt $" {}
d172 2
a173 2
    gdb_expect {
	-re ".*usage:  factorial <number>.*$gdb_prompt $" {
d176 1
a176 1
	-re ".*$gdb_prompt $" {
d188 1
a188 1
   send_gdb "set args vxmain \"6\"\n"
d190 1
a190 1
	send_gdb "set args 6\n"
d192 3
a194 3
gdb_expect -re "$gdb_prompt $"
gdb_run_cmd

d198 2
a199 2
    gdb_expect {
	 "Program exited normally" {
d202 1
a202 1
	 "720" {
d211 1
a211 1
    gdb_expect -re "$gdb_prompt $" {}
d213 2
a214 3
    setup_xfail "arm-*-coff strongarm-*-coff"
    gdb_expect {
	    -re ".*720.*$gdb_prompt $" {
d217 1
a217 1
	    -re ".*$gdb_prompt $" {
d228 4
a231 4
if ![is_remote target] then {
    send_gdb "run `echo 8`\n"
    gdb_expect {
	-re "Starting program.*40320.*$gdb_prompt $" {
d234 1
a234 1
	-re ".*$gdb_prompt $" {
d245 2
a246 2
    send_gdb "set args main\n"
    gdb_expect -re ".*$gdb_prompt $" {}
d248 1
@

