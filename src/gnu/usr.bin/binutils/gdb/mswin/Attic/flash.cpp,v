head	1.2;
access;
symbols
	MIRBSD_7quater:1.1.1.1
	cvs-200405160640:1.1.1.1
	cvs-200401271800:1.1.1.1
	cvs-200401261630:1.1.1.1
	cvs-200401021645:1.1.1.1
	MIRBSD_7_ALPHA:1.1.1.1.0.6
	MIRBSD_7:1.1.1.1.0.4
	cvs-200312222040:1.1.1.1
	cvs-200312031730:1.1.1.1
	MIRBSD_7ter:1.1.1.1
	MIRBSD_7_DEV:1.1.1.1.0.2
	cvs-200310020700:1.1.1.1
	cvs-200309271030:1.1.1.1
	cvs-200309251530:1.1.1.1
	cvs-200308302005:1.1.1.1
	cvs-200308171200:1.1.1.1
	ctm-3496:1.1.1.1
	ctm-3449:1.1.1.1
	ctm-3437:1.1.1.1
	cvs-200307191805:1.1.1.1
	ctm-3425:1.1.1.1
	cvs-200307091500:1.1.1.1
	ctm-3389:1.1.1.1
	cvs-200306291430:1.1.1.1
	ctm-3341:1.1.1.1
	MIRBSD_5:1.1.1.1
	cvs-200306082100:1.1.1.1
	ctm-3316:1.1.1.1
	ctm-3272:1.1.1.1
	ctm-3264:1.1.1.1
	cvs-200305071630:1.1.1.1
	MIRBSD_4:1.1.1.1
	ctm-3203:1.1.1.1
	cvs-20030410-1130:1.1.1.1
	ctm-3155:1.1.1.1
	ctm-3132:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@// @;


1.2
date	2004.06.10.19.01.53;	author tg;	state dead;
branches;
next	1.1;

1.1
date	2003.03.22.17.40.33;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.03.22.17.40.33;	author tg;	state Exp;
branches;
next	;


desc
@@


1.2
log
@first foolish attempt to merge the last piece
won't probably work, but I want it backed up,
since there's a lot of work and time in it
@
text
@#if 0
// flash.cpp : implementation file
//

#include "stdafx.h"
#include "flash.h"
#include "aboutbox.h"
#ifdef _DEBUG
#undef THIS_FILE
static char BASED_CODE THIS_FILE[] = __FILE__;
#endif

static CFontInfo fontinfo  ("Flash");
/////////////////////////////////////////////////////////////////////////////
// CFlash

IMPLEMENT_DYNCREATE(CFlash, CView)

static char *string = 0;
CFlash *last = 0;
CFlash::CFlash()
{
last = this;
}

CFlash::~CFlash()
{
last = 0;
}


BEGIN_MESSAGE_MAP(CFlash, CView)
	//{{AFX_MSG_MAP(CFlash)
	ON_WM_CREATE()
	ON_WM_SIZE()
	ON_COMMAND(ID_REAL_CMD_BUTTON_SET_FONT, OnSetFont)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()


/////////////////////////////////////////////////////////////////////////////
// CFlash drawing

void CFlash::OnDraw(CDC* pDC)
{
	CDocument* pDoc = GetDocument();

if (string) {
pDC->TextOut(0,0,string);
}
}


/////////////////////////////////////////////////////////////////////////////
// CFlash message handlers

void CFlash::Initialize()
{
  fontinfo.Initialize();
}

void CFlash::Terminate()
{
  fontinfo.Terminate();
}
BOOL CFlash::PreCreateWindow(CREATESTRUCT& cs) 
{
 // TODO: Add your specialized code here and/or call the base class

  return CView::PreCreateWindow(cs);
}

void CFlash::OnUpdate(CView* pSender, LPARAM lHint, CObject* pHint) 
{
	// TODO: Add your specialized code here and/or call the base class

}

extern CGuiApp theApp;
void CFlash::Flash(const char *name)
{
  if (string)
    free(string);
  string = strdup (name);
  if (!last) {
    theApp.m_flashTemplate->OpenDocumentFile(NULL);
  }
  /* Trim off any non symbol stuff */
  char *p = string;
  const char *q;
  
  while (*p && !isalpha(*p))
    p++;
  char*s = p;
  
  /* Then go till it's no longer an id */
  while (*s) 
    {
      if (!isalpha(*s) 	&& ! isdigit(*s) && *s != '_'&& *s != '.') {
	*s = 0;
	break;
      }
      s++;
    }
  
  
  q = p;
  last->m_data.AddString(strdup(q));
  last->Invalidate();
}

BOOL CFlash::Create(LPCTSTR lpszClassName, LPCTSTR lpszWindowName, DWORD dwStyle, const RECT& rect, CWnd* pParentWnd, UINT nID, CCreateContext* pContext) 
{
  // TODO: Add your specialized code here and/or call the base class
  
  return CWnd::Create(lpszClassName, lpszWindowName, dwStyle, rect, pParentWnd, nID, pContext);
}

int CFlash::OnCreate(LPCREATESTRUCT lpCreateStruct) 
{
  if (CView::OnCreate(lpCreateStruct) == -1)
    return -1;
  
  m_data.Create(LBS_OWNERDRAWFIXED|WS_HSCROLL|WS_BORDER|WS_CHILD|WS_VISIBLE|WS_VSCROLL,
		CRect(0,0,0,0), this, 0);
  return 0;
}

void CFlash::OnSize(UINT nType, int cx, int cy) 
{
  CView::OnSize(nType, cx, cy);
  

  CRect cl;
  GetClientRect(cl);
  m_data.SetWindowPos(NULL,
		      cl.left, cl.top ,
		      cl.right - cl.left,
		      cl.bottom - cl.top ,
		      SWP_DRAWFRAME|SWP_NOZORDER);
}
/////////////////////////////////////////////////////////////////////////////
// CFlashItem

CFlashItem::CFlashItem()
{
}

CFlashItem::~CFlashItem()
{
}


BEGIN_MESSAGE_MAP(CFlashItem, CListBox)
     //{{AFX_MSG_MAP(CFlashItem)
     // NOTE - the ClassWizard will add and remove mapping macros here.
     //}}AFX_MSG_MAP
     END_MESSAGE_MAP()
     
     
     /////////////////////////////////////////////////////////////////////////////
     // CFlashItem message handlers
void showsymbol(CDC *p,int x, int y, GdbSymbol *symbol);     
 void CFlashItem::DrawItem(LPDRAWITEMSTRUCT lp)
{
  char bu[200];	
  union gui_symtab *ppp;
  CDC* pDC = CDC::FromHandle(lp->hDC);	
  pDC->SelectObject(&fontinfo.m_font);
  int x = lp->rcItem.left;
  int y = lp->rcItem.top;
  CString p = (char  *)GetItemData(lp->itemID);	
  pDC->TextOut(x,y,p);
   const char *s = p;
  GdbSymbol *sym = GdbSymbol::Lookup(s);
if (sym) {
showsymbol(pDC,x,y,sym);
}
else {
  sprintf(bu,"%s not available", s);
  pDC->TextOut(x,y,bu);
}
}

void CFlashItem::MeasureItem(LPMEASUREITEMSTRUCT lpMeasureItemStruct) 
{
  // TODO: Add your code to determine the size of specified item
  
}

void CFlash::OnInitialUpdate() 
{
  // TODO: Add your specialized code here and/or call the base class
  //  fontinfo.HadInitialUpdate(this);
  CView::OnInitialUpdate();
}

void CFlash::OnSetFont() 
{
  fontinfo.OnChooseFont();
}
/////////////////////////////////////////////////////////////////////////////
// CFlashFrame

IMPLEMENT_DYNCREATE(CFlashFrame, CMDIChildWnd)

CFlashFrame::CFlashFrame()
{
}

CFlashFrame::~CFlashFrame()
{
}


BEGIN_MESSAGE_MAP(CFlashFrame, CMDIChildWnd)
	//{{AFX_MSG_MAP(CFlashFrame)
	ON_WM_SIZE()
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()


/////////////////////////////////////////////////////////////////////////////
// CFlashFrame message handlers

BOOL CFlashFrame::PreCreateWindow(CREATESTRUCT& cs) 
{
	// TODO: Add your specialized code here and/or call the base class
  fontinfo.SetUp(cs);			
	return CMDIChildWnd::PreCreateWindow(cs);
}

void CFlashFrame::OnSize(UINT nType, int cx, int cy) 
{
	CMDIChildWnd::OnSize(nType, cx, cy);
    fontinfo.RememberSize(this);
	// TODO: Add your message handler code here
	
}
#endif
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Import OpenBSD 3.3 source repository from CTM 3132 the first time
This opens an OpenBSD-mirabile (aka MirBSD) repository.

### MirBSD is:
# Copyright (c) 1982-2003 by Thorsten "mirabile" Glaser <x86@@ePost.de>
# Copyright © 1968-2003  The authors of And contributors to UNIX®, the
#       C Language, BSD/Berkeley Unix; 386BSD, NetBSD 1.1 and OpenBSD.
#
# Anyone who obtained a copy of this work is hereby permitted to freely use,
# distribute, modify, merge, sublicence, give away or sell it as long as the
# authors are given due credit and the following notice is retained:
#
# This work is provided "as is", with no explicit or implicit warranty what-
# soever. Use it only at your own risk. In no event may an author or contri-
# butor be held liable for any damage, directly or indirectly, that origina-
# ted through or is caused by creation or modification of this work.

MirBSD is my private tree. MirBSD does not differ very much from OpenBSD
and intentionally tracks OpenBSD. That's why it _is_ OpenBSD, just not the
official one. It's like with DarrenBSD.

At time of this writing, no advertising for MirBSD must be done,
because the advertising clause has not yet been sorted out.

http://templeofhate.com/tglaser/MirBSD/index.php
@
text
@@
