head	1.2;
access;
symbols
	MIRBSD_7quater:1.1.1.1
	cvs-200405160640:1.1.1.1
	cvs-200401271800:1.1.1.1
	cvs-200401261630:1.1.1.1
	cvs-200401021645:1.1.1.1
	MIRBSD_7_ALPHA:1.1.1.1.0.6
	MIRBSD_7:1.1.1.1.0.4
	cvs-200312222040:1.1.1.1
	cvs-200312031730:1.1.1.1
	MIRBSD_7ter:1.1.1.1
	MIRBSD_7_DEV:1.1.1.1.0.2
	cvs-200310020700:1.1.1.1
	cvs-200309271030:1.1.1.1
	cvs-200309251530:1.1.1.1
	cvs-200308302005:1.1.1.1
	cvs-200308171200:1.1.1.1
	ctm-3496:1.1.1.1
	ctm-3449:1.1.1.1
	ctm-3437:1.1.1.1
	cvs-200307191805:1.1.1.1
	ctm-3425:1.1.1.1
	cvs-200307091500:1.1.1.1
	ctm-3389:1.1.1.1
	cvs-200306291430:1.1.1.1
	ctm-3341:1.1.1.1
	MIRBSD_5:1.1.1.1
	cvs-200306082100:1.1.1.1
	ctm-3316:1.1.1.1
	ctm-3272:1.1.1.1
	ctm-3264:1.1.1.1
	cvs-200305071630:1.1.1.1
	MIRBSD_4:1.1.1.1
	ctm-3203:1.1.1.1
	cvs-20030410-1130:1.1.1.1
	ctm-3155:1.1.1.1
	ctm-3132:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.2
date	2004.06.10.19.02.00;	author tg;	state dead;
branches;
next	1.1;

1.1
date	2003.03.22.17.40.39;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.03.22.17.40.39;	author tg;	state Exp;
branches;
next	;


desc
@@


1.2
log
@first foolish attempt to merge the last piece
won't probably work, but I want it backed up,
since there's a lot of work and time in it
@
text
@/*
 * ser.c:
 *    stand-alone program to test gdb's serial communication under win32s.
 *    
 *    mode com1:9600,n,7,1,-
 *    
 * SERIAL data and defines:
 *    SERIAL
 *    SERIAL_1_AND_A_HALF_STOPBITS 2 
 *    SERIAL_1_STOPBITS              
 *    SERIAL_2_STOPBITS 3
 *    SERIAL_BREAK, 0);
 *    SERIAL_COPY_TTY_STATE
 *    SERIAL_EOF
 *    SERIAL_ERROR -1         
 *    SERIAL_H
 *    SERIAL_T
 *    SERIAL_TIMEOUT
 * 
 * SERIAL functionss:
 *    SERIAL_CLOSE(st2000_desc);
 *    SERIAL_FDOPEN (0);
 *    SERIAL_FLUSH_INPUT (wiggler_desc);
 *    SERIAL_FLUSH_OUTPUT (mips_desc);
 *    SERIAL_GET_TTY_STATE(monitor_desc);
 *    SERIAL_NOFLUSH_SET_TTY_STATE (stdin_serial, our_ttystate,
 *    SERIAL_OPEN(dev_name);
 *    SERIAL_PRINT_TTY_STATE (stdin_serial, inferior_ttystate);
 *    SERIAL_RAW (desc);
 *    SERIAL_READCHAR
 *    SERIAL_RESTORE(0, &ttystate);
 *    SERIAL_SEND_BREAK (mips_desc);
 *    SERIAL_SETBAUDRATE (desc, baud_rate)) {
 *    SERIAL_SETSTOPBITS (monitor_desc, mon_ops->stopbits);
 *    SERIAL_SET_TTY_STATE (args->serial, args->state);
 *    SERIAL_UN_FDOPEN (gdb_stdout_serial);
 *    SERIAL_WAIT_2 (tty_desc, port_desc, -1);
 *    SERIAL_WRITE(tty_desc, &cx, 1);
*/


#include "defs.h"
#include "debugo.h"
#include "serial.h"
#include <stdio.h>
#include <stdlib.h>
#include <string.h>


/* 
 * Set these as needed to reflect effective mode command
 */
char dev_name[] = "com1";
  int baud_rate=9600;
  int timeout = 50;

/* 
 * Descriptor for I/O to remote machine.  Initialize it to NULL so that
 * array_open knows that we don't have a file open when the program starts.
 */
serial_t desc = NULL;
void _initialize_ser_win32s(void);

static int ser_readchar(int timeout)
{
  int c;
  c = SERIAL_READCHAR(desc, timeout);
  if (c >= 0)
    return c & 0x7f;
  if (c == SERIAL_TIMEOUT) {
    if (timeout <= 0)
      return c;		/* Polls shouldn't generate timeout errors */
    error("error:Timeout reading from remote system.\n");
  }
  error("error:ser_readchar\n");
}

static int ser_connect(char* dev_name, int baud_rate)
{
  if (desc == NULL)
    error("error:dev_name=%s\n",dev_name);
  if (baud_rate != -1) {
    if (SERIAL_SETBAUDRATE (desc, baud_rate)) {
      SERIAL_CLOSE (desc);
      error("error:dev_name=%s\n",dev_name);
    }
  }
  SERIAL_RAW(desc);
  printf("Remote target %s ser_connected \n", dev_name);
  return 1;
}

/*
 * ser_write -- send raw data to monitor.
 */
static void ser_write(data, len)
     char data[];
     int len;
{
  if (SERIAL_WRITE(desc, data, len))
    fprintf(stderr, "SERIAL_WRITE failed: %s\n", safe_strerror(errno));
  *(data + len+1) = '\0';
  printf("Sending: \"%s\".", data);

}
 

void main(void)
{
  int i;
  char buf[]="\n\rsomething \nto say\r\n";
  extern int write_dos_tick_delay;

  _initialize_ser_win32s();

  write_dos_tick_delay = 10;

  desc = SERIAL_OPEN(dev_name);
  ser_connect(dev_name, baud_rate);

  ser_write(buf, strlen(buf));

  for (i=0; i < 20; i++) 
  {
    unsigned int c = ser_readchar(timeout);
    if (c >= 'A' && c <= 'Z' || c >= 'a' && c <= 'z')
      printf("%d read char %c\n",i,c);
    else
      printf("%d read char 0x%x\n",i,c);
  }

  SERIAL_CLOSE(desc);
  desc=0;
}
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Import OpenBSD 3.3 source repository from CTM 3132 the first time
This opens an OpenBSD-mirabile (aka MirBSD) repository.

### MirBSD is:
# Copyright (c) 1982-2003 by Thorsten "mirabile" Glaser <x86@@ePost.de>
# Copyright © 1968-2003  The authors of And contributors to UNIX®, the
#       C Language, BSD/Berkeley Unix; 386BSD, NetBSD 1.1 and OpenBSD.
#
# Anyone who obtained a copy of this work is hereby permitted to freely use,
# distribute, modify, merge, sublicence, give away or sell it as long as the
# authors are given due credit and the following notice is retained:
#
# This work is provided "as is", with no explicit or implicit warranty what-
# soever. Use it only at your own risk. In no event may an author or contri-
# butor be held liable for any damage, directly or indirectly, that origina-
# ted through or is caused by creation or modification of this work.

MirBSD is my private tree. MirBSD does not differ very much from OpenBSD
and intentionally tracks OpenBSD. That's why it _is_ OpenBSD, just not the
official one. It's like with DarrenBSD.

At time of this writing, no advertising for MirBSD must be done,
because the advertising clause has not yet been sorted out.

http://templeofhate.com/tglaser/MirBSD/index.php
@
text
@@
