head	1.2;
access;
symbols
	MIRBSD_7quater:1.1.1.1
	cvs-200405160640:1.1.1.1
	cvs-200401271800:1.1.1.1
	cvs-200401261630:1.1.1.1
	cvs-200401021645:1.1.1.1
	MIRBSD_7_ALPHA:1.1.1.1.0.6
	MIRBSD_7:1.1.1.1.0.4
	cvs-200312222040:1.1.1.1
	cvs-200312031730:1.1.1.1
	MIRBSD_7ter:1.1.1.1
	MIRBSD_7_DEV:1.1.1.1.0.2
	cvs-200310020700:1.1.1.1
	cvs-200309271030:1.1.1.1
	cvs-200309251530:1.1.1.1
	cvs-200308302005:1.1.1.1
	cvs-200308171200:1.1.1.1
	ctm-3496:1.1.1.1
	ctm-3449:1.1.1.1
	ctm-3437:1.1.1.1
	cvs-200307191805:1.1.1.1
	ctm-3425:1.1.1.1
	cvs-200307091500:1.1.1.1
	ctm-3389:1.1.1.1
	cvs-200306291430:1.1.1.1
	ctm-3341:1.1.1.1
	MIRBSD_5:1.1.1.1
	cvs-200306082100:1.1.1.1
	ctm-3316:1.1.1.1
	ctm-3272:1.1.1.1
	ctm-3264:1.1.1.1
	cvs-200305071630:1.1.1.1
	MIRBSD_4:1.1.1.1
	ctm-3203:1.1.1.1
	cvs-20030410-1130:1.1.1.1
	ctm-3155:1.1.1.1
	ctm-3132:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@// @;


1.2
date	2004.06.10.19.01.52;	author tg;	state dead;
branches;
next	1.1;

1.1
date	2003.03.22.17.40.33;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.03.22.17.40.33;	author tg;	state Exp;
branches;
next	;


desc
@@


1.2
log
@first foolish attempt to merge the last piece
won't probably work, but I want it backed up,
since there's a lot of work and time in it
@
text
@// bpt.cpp : implementation file
//

#include "stdafx.h"
 
#include "bpt.h"

#ifdef _DEBUG
#undef THIS_FILE
static char BASED_CODE THIS_FILE[] = __FILE__;
#endif

/////////////////////////////////////////////////////////////////////////////
// CBpt

IMPLEMENT_DYNCREATE(CBpt, CView)
/* There is only one of these, perhaps it should belong
   to the app  ? */
CBreakInfoList the_breakinfo_list;

extern CGuiApp theApp;
void redraw_allbptwins()
{ 
  redraw_allwins(theApp.m_bptTemplate);
}


CFontInfo bptfontinfo ("BptFont", redraw_allbptwins);
CFontInfo buttonfontinfo ("ButtonFont", redraw_allbptwins);
CBpt::CBpt()
{
 inchanged = 0;
}

CBpt::~CBpt()
{
}


BEGIN_MESSAGE_MAP(CBpt, CView)
	//{{AFX_MSG_MAP(CBpt)
	ON_WM_ERASEBKGND()
	ON_WM_SIZE()
	ON_WM_CREATE()
	ON_COMMAND(ID_REAL_CMD_BUTTON_SET_BREAKPOINT, OnSetBreak)
	ON_UPDATE_COMMAND_UI(ID_REAL_CMD_BUTTON_SET_BREAKPOINT, OnUpdateSetBreak)
     ON_BN_CLICKED(ID_CMD_BUTTON_CLEAR_ALL, OnClearAll)
     ON_LBN_SELCHANGE(ID_CMD_BUTTON_BREAKPOINT_LIST, on_list_changed)
     ON_LBN_DBLCLK(ID_CMD_BUTTON_BREAKPOINT_LIST, OnDblclkBreakpointList)
     ON_BN_CLICKED(ID_CMD_BUTTON_CLEAR_BREAKPOINT, OnClearBreakpoint)
     ON_EN_CHANGE(ID_CMD_BUTTON_BREAKPOINT, on_edit_changed)
     ON_BN_CLICKED(ID_CMD_BUTTON_DISABLE, OnDisable)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()


/////////////////////////////////////////////////////////////////////////////
// CBpt drawing

void CBpt::OnDraw(CDC* pDC)
{
  CDocument* pDoc = GetDocument();
  list.SetFont(&bptfontinfo.m_font, TRUE);
  edit.SetFont(&bptfontinfo.m_font, TRUE);
  for (int i= 0; i < 4; i++)
    buttons[i].SetFont(&buttonfontinfo.m_font, TRUE);
}


/////////////////////////////////////////////////////////////////////////////
// CBpt message handlers

BOOL CBpt::Create(LPCTSTR lpszClassName, LPCTSTR lpszWindowName, DWORD dwStyle, const RECT& rect, CWnd* pParentWnd, UINT nID, CCreateContext* pContext) 
{
	// TODO: Add your specialized code here and/or call the base class
	
	return CWnd::Create(lpszClassName, lpszWindowName, dwStyle, rect, pParentWnd, nID, pContext);
}

BOOL CBpt::DestroyWindow() 
{
	// TODO: Add your specialized code here and/or call the base class
	
	return CView::DestroyWindow();
}

BOOL CBpt::OnEraseBkgnd(CDC* pDC) 
{
 // TODO: Add your message handler code here and/or call default
 CBrush b (RGB(192,192,192));
 CBrush *old = pDC->SelectObject(&b);
 CRect rect;
 pDC->GetClipBox(&rect);
 pDC->PatBlt(rect.left, rect.top,rect.Width(), rect.Height(), PATCOPY);
 pDC->SelectObject(old);
 return TRUE;	
}

#define R(x) x.left, x.top, x.Width(), x.Height()
void CBpt::OnSize(UINT nType, int cx, int cy) 
{
  CRect wholebox;
  CRect shrunkbox;
  int dx = bptfontinfo.dunits.cx;
  int dy = bptfontinfo.dunits.cy;
 
  int bx = buttonfontinfo.dunits.cx;
  int by = buttonfontinfo.dunits.cy;
 
  int hgap = dy ;
  int indent = dx;
  GetClientRect(wholebox);
  shrunkbox = wholebox;
  shrunkbox.InflateRect(-indent, -hgap);
 
  CRect editbox = shrunkbox;
  editbox.bottom = editbox.top + dy *2;
  edit.SetWindowPos (NULL, R(editbox), 0);
 
  CRect listbox = shrunkbox;
  int bwidth = bx * 14;
  listbox.top    = editbox.bottom + hgap;
  listbox.right = shrunkbox.right - bwidth;
  listbox.bottom = shrunkbox.bottom;
  list.SetWindowPos (NULL, R(listbox), 0);
 
  /* Set, clear, disable, clearall on the bottom row */
  CRect boxx = listbox;
  boxx.left = shrunkbox.right - bwidth +hgap;
  boxx.right = shrunkbox.right;
  int boxheight = by * 2;
  int boxgap = by * 3;
  for (int i = 0; i < 4; i++) 
    {
      boxx.top = listbox.top + i * boxgap;
      boxx.bottom = boxx.top + boxheight;
      buttons[i].SetWindowPos(0,R(boxx),0);
    }
}

int CBpt::OnCreate(LPCREATESTRUCT lpCreateStruct) 
{
  CRect rc (10,10,100,100);
 
  if (CView::OnCreate(lpCreateStruct) == -1)
    return -1;
 
  int i;
  buttons[0].Create("&Set",WS_TABSTOP| BS_DEFPUSHBUTTON|WS_CHILD|WS_VISIBLE,	rc, this, ID_REAL_CMD_BUTTON_SET_BREAKPOINT);	
  buttons[1].Create("&Clear",WS_TABSTOP|WS_CHILD|WS_VISIBLE,	rc, this, ID_CMD_BUTTON_CLEAR_BREAKPOINT);	
  buttons[2].Create("&Disable",WS_TABSTOP|WS_CHILD|WS_VISIBLE,	rc, this, ID_CMD_BUTTON_DISABLE);	
  buttons[3].Create("Clear &All",WS_TABSTOP|WS_CHILD|WS_VISIBLE ,	rc, this, ID_CMD_BUTTON_CLEAR_ALL);
 
  list.Create(WS_CHILD | WS_VISIBLE | WS_VSCROLL | WS_HSCROLL
	      |WS_BORDER
	      | LBS_DISABLENOSCROLL | LBS_USETABSTOPS | WS_TABSTOP
	      | LBS_NOTIFY,
	      rc,
	      this,
	      ID_CMD_BUTTON_BREAKPOINT_LIST);
 
  edit.Create(WS_TABSTOP|WS_CHILD|WS_VISIBLE|WS_BORDER, rc, this, ID_CMD_BUTTON_BREAKPOINT);  
 
  return 0;
}

void CBpt::OnSetBreak() 
{
  CString c;
  edit.GetWindowText(c);
  togdb_bpt_set ((const char *)c);
	  edit.SetWindowText("");
  update_list();
  update_buttons();
}

void CBpt::OnUpdateSetBreak(CCmdUI* pCmdUI) 
{
  pCmdUI->Enable(togdb_target_has_execution());	
}

void CBpt::Initialize()
{
  bptfontinfo.Initialize();
  buttonfontinfo.Initialize();
}
void CBpt::Terminate()
{
  bptfontinfo.Terminate();
  buttonfontinfo.Terminate();
}

void CBpt::update_list()
{
  char buf[200];
  
  int cursel = list.GetCurSel();

  static int tstops[] = {10,20,30,40};

  list.ResetContent();	
  list.SetTabStops (4,tstops);
  int i;
  int size = the_breakinfo_list.GetSize();
  for (i = 0; i < size; i++) {
    char buf[200];
    CBreakInfo *bi = the_breakinfo_list.GetAt(i);
    if (bi->GetAddress()) {
      sprintf(buf,"%s\t%d\t%s\t%s",
	      bi->GetEnable() ? "+" : "-",
	      i,
	      paddr(bi->GetAddress()),
	      bi->GetAddrString());
      list.AddString(buf);
    }
  }
  list.SetCurSel(cursel);  

  if (cursel >= 0 && cursel < list.GetCount())
    {
      CBreakInfo *bi = the_breakinfo_list.GetAt(cursel);
      sprintf(buf,"%s:%d",
	      the_breakinfo_list.GetAt(cursel)->GetSourceFile(),
	      the_breakinfo_list.GetAt(cursel)->GetLineNumber());
      edit.SetWindowText(buf);
    }
}

void CBpt::OnUpdate(CView* pSender, LPARAM lHint, CObject* pHint) 
{
  update_list();
  update_buttons();
}

void CBpt::update_buttons()
{
  /* Set the set button correctly */
  CString c;
  int cursel = list.GetCurSel();
  edit.GetWindowText(c);
  const char *s = (const char *)c;
  buttons[B_SETBUTTON].EnableWindow (strlen(s));
  buttons[B_DISABLE].EnableWindow(cursel >= 0);
  buttons[B_CLEAR].EnableWindow(cursel >= 0);
  buttons[B_CLEARALL].EnableWindow(the_breakinfo_list.GetSize() > 0);

  if (cursel >= 0) {
    CBreakInfo *bi = the_breakinfo_list.GetAt(cursel);
    if (bi->GetEnable())
      buttons[B_DISABLE].SetWindowText("&Disable");
    else
      buttons[B_DISABLE].SetWindowText("&Enable");
  }
}

void CBpt::on_edit_changed()
{
  update_buttons();
}
void CBpt::on_list_changed()
{
update_list();
  update_buttons();
}


void CBpt::OnDblclkBreakpointList() 
{
  int cursel = list.GetCurSel();
  if (cursel >= 0) {
    CBreakInfo *bi = the_breakinfo_list.GetAt(cursel);
    /* goto where this line is */
    theApp_show_at (bi->GetAddress());
  }
}
void CBpt::OnClearAll() 
{
  the_breakinfo_list.DeleteAll();
  update_list();
  update_buttons();
}

void CBpt::OnClearBreakpoint() 
{
  int cursel = list.GetCurSel();
  if (cursel >= 0) {
    the_breakinfo_list.Delete(cursel);
    if (cursel < list.GetCount()) {
    list.SetCurSel(cursel);
  }
  }
  update_list();
  update_buttons();
}

void CBpt::OnDisable() 
{
  int cursel =list.GetCurSel();
  if (cursel >= 0) 
    {
      CBreakInfo *bi = the_breakinfo_list.GetAt(cursel);
      if (bi->GetEnable())
	the_breakinfo_list.Disable(cursel);
      else
	the_breakinfo_list.Enable(cursel);
    }
  update_list();
  update_buttons();
}

void CBpt::OnInitialUpdate() 
{
 GetParentFrame()->SetWindowPos(0,0,0,
				bptfontinfo.dunits.cx * 45,
				bptfontinfo.dunits.cy * 30,
				SWP_NOMOVE);
 CView::OnInitialUpdate();
}

@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Import OpenBSD 3.3 source repository from CTM 3132 the first time
This opens an OpenBSD-mirabile (aka MirBSD) repository.

### MirBSD is:
# Copyright (c) 1982-2003 by Thorsten "mirabile" Glaser <x86@@ePost.de>
# Copyright © 1968-2003  The authors of And contributors to UNIX®, the
#       C Language, BSD/Berkeley Unix; 386BSD, NetBSD 1.1 and OpenBSD.
#
# Anyone who obtained a copy of this work is hereby permitted to freely use,
# distribute, modify, merge, sublicence, give away or sell it as long as the
# authors are given due credit and the following notice is retained:
#
# This work is provided "as is", with no explicit or implicit warranty what-
# soever. Use it only at your own risk. In no event may an author or contri-
# butor be held liable for any damage, directly or indirectly, that origina-
# ted through or is caused by creation or modification of this work.

MirBSD is my private tree. MirBSD does not differ very much from OpenBSD
and intentionally tracks OpenBSD. That's why it _is_ OpenBSD, just not the
official one. It's like with DarrenBSD.

At time of this writing, no advertising for MirBSD must be done,
because the advertising clause has not yet been sorted out.

http://templeofhate.com/tglaser/MirBSD/index.php
@
text
@@
