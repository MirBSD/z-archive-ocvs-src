head	1.2;
access;
symbols
	MIRBSD_7quater:1.1.1.1
	cvs-200405160640:1.1.1.1
	cvs-200401271800:1.1.1.1
	cvs-200401261630:1.1.1.1
	cvs-200401021645:1.1.1.1
	MIRBSD_7_ALPHA:1.1.1.1.0.6
	MIRBSD_7:1.1.1.1.0.4
	cvs-200312222040:1.1.1.1
	cvs-200312031730:1.1.1.1
	MIRBSD_7ter:1.1.1.1
	MIRBSD_7_DEV:1.1.1.1.0.2
	cvs-200310020700:1.1.1.1
	cvs-200309271030:1.1.1.1
	cvs-200309251530:1.1.1.1
	cvs-200308302005:1.1.1.1
	cvs-200308171200:1.1.1.1
	ctm-3496:1.1.1.1
	ctm-3449:1.1.1.1
	ctm-3437:1.1.1.1
	cvs-200307191805:1.1.1.1
	ctm-3425:1.1.1.1
	cvs-200307091500:1.1.1.1
	ctm-3389:1.1.1.1
	cvs-200306291430:1.1.1.1
	ctm-3341:1.1.1.1
	MIRBSD_5:1.1.1.1
	cvs-200306082100:1.1.1.1
	ctm-3316:1.1.1.1
	ctm-3272:1.1.1.1
	ctm-3264:1.1.1.1
	cvs-200305071630:1.1.1.1
	MIRBSD_4:1.1.1.1
	ctm-3203:1.1.1.1
	cvs-20030410-1130:1.1.1.1
	ctm-3155:1.1.1.1
	ctm-3132:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.2
date	2004.06.10.19.01.57;	author tg;	state dead;
branches;
next	1.1;

1.1
date	2003.03.22.17.40.34;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.03.22.17.40.34;	author tg;	state Exp;
branches;
next	;


desc
@@


1.2
log
@first foolish attempt to merge the last piece
won't probably work, but I want it backed up,
since there's a lot of work and time in it
@
text
@// infofram.h : header file
//

/////////////////////////////////////////////////////////////////////////////
// CGnuInfoFrame frame

class CGnuInfoHist 
{
 public:
  class  CGnuInfoNode *node;
  CGnuInfoHist *prev;
  CGnuInfoHist *next;
  CGnuInfoHist (CGnuInfoNode *v, CGnuInfoHist *prev);
};



/////////////////////////////////////////////////////////////////////////////

// infoframe.h : header file
//

/////////////////////////////////////////////////////////////////////////////

class CMySplitterWnd : public CSplitterWnd
{
	DECLARE_DYNCREATE(CMySplitterWnd)
	public:
	CMySplitterWnd();           // protected constructor used by dynamic creation

// Attributes
protected:

public:
int inited;
// Operations
public:

// Overrides
	// ClassWizard generated virtual function overrides
	//{{AFX_VIRTUAL(CMySplitterWnd)
	public:

	//}}AFX_VIRTUAL

// Implementation
public:
	virtual ~CMySplitterWnd();

	// Generated message map functions
	//{{AFX_MSG(CMySplitterWnd)
	afx_msg void OnSize(UINT nType, int cx, int cy);
	//}}AFX_MSG
	DECLARE_MESSAGE_MAP()
};

/////////////////////////////////////////////////////////////////////////////

class CGnuInfoFrame : public CMDIChildWnd
{
  DECLARE_DYNCREATE(CGnuInfoFrame)
 protected:
  CGnuInfoFrame();			// protected constructor used by dynamic creation
  
  // Attributes
public:
  
  int OkNode(class CGnuInfoNode *);
  CToolBar toolbar;
  CToolBar toolbar1;
  class CGnuInfoDoc *doc();
  class CGnuInfoNode *GetCurrentNode();
  class CGnuInfoNode *current;
  class CMySplitterWnd  text_view;
  class CGnuInfoSView *scroll_view;
  class CGnuInfoList *list_view;
  class CGnuInfoHist *history_head;  
  class CGnuInfoHist *history_root;  
  class CGnuInfoHist *history_ptr;  
  int okpage(int);
  void wantpage(int);
  // Operations
public:
  void GotoNode(CString name);
  static void Initialize();
  static void Terminate();
  void SetCurrent (CGnuInfoNode *c, int remember);  
  void Prev();
  void splitdo(int x);
  void Next();
  void Up();
  // Overrides
  // ClassWizard generated virtual function overrides
  //{{AFX_VIRTUAL(CGnuInfoFrame)
public:
  virtual void RecalcLayout(BOOL bNotify = TRUE);
protected:
  virtual BOOL OnCreateClient(LPCREATESTRUCT lpcs, CCreateContext* pContext);
  //}}AFX_VIRTUAL
  
  // Implementation
protected:
  virtual ~CGnuInfoFrame();
  
  
  
  void RememberPage(CGnuInfoNode *);
  // Generated message map functions
  //{{AFX_MSG(CGnuInfoFrame)
  afx_msg int OnCreate(LPCREATESTRUCT lpCreateStruct);
  afx_msg void OnActionsBackward();
  afx_msg void OnActionsForward();
  afx_msg void OnActionsNext();
  afx_msg void OnActionsPrev();
  afx_msg void OnActionsUp();
  afx_msg void OnUpdateBackward(CCmdUI* pCmdUI);
  afx_msg void OnUpdateForward(CCmdUI* pCmdUI);
  afx_msg void OnUpdateNext(CCmdUI* pCmdUI);
  afx_msg void OnUpdatePrev(CCmdUI* pCmdUI);
  afx_msg void OnUpdateUp(CCmdUI* pCmdUI);
  afx_msg void OnViewSetFont();  
  afx_msg void OnActionsViewBoth();
  afx_msg void OnActionsViewPage();
  afx_msg void OnActionsViewContents();
  afx_msg void OnActionsNextPage();
  afx_msg void OnUpdateActionsNextPage(CCmdUI* pCmdUI);
  afx_msg void OnActionsPrevPage();
  afx_msg void OnUpdateActionsPrevPage(CCmdUI* pCmdUI);

  //}}AFX_MSG
  DECLARE_MESSAGE_MAP()
  };

/////////////////////////////////////////////////////////////////////////////







// infosvie.h : header file
//

/////////////////////////////////////////////////////////////////////////////
// CGnuInfoSView view

class CHotSpots
{
 public:
  short int line;
  CString name;
};

class CGnuInfoSView : public CScrollView
{
 protected:
  CGnuInfoSView();
  DECLARE_DYNCREATE(CGnuInfoSView)
    
    // Attributes
  public:
int maxcx;
int maxcy;
void ParseNode (const char *,int,  char *,char *, char *,int *);
  class CGnuInfoFrame *frame;
  class CGnuInfoNode *intext_node;
  class CGnuInfoNode *GetCurrentNode() ;
  CString FindSpot (int line);
  class CGnuInfoDoc *doc() 
    { return (CGnuInfoDoc *)GetDocument();}
#define MAXHOTS 100
  int n_hotspots;
  CHotSpots hotspots[MAXHOTS];
  void AddSpot(int, const char *);
  void PrintAHotSpot(int li, CDC *p, int x, int y, const CString &s);
  
  CStringArray text;
  int last_page;
  // Operations
public:
  int  font_height;
  // Overrides
  // ClassWizard generated virtual function overrides
  //{{AFX_VIRTUAL(CGnuInfoSView)
protected:
  virtual void OnDraw(CDC* pDC); // overridden to draw this view
  virtual void OnInitialUpdate(); // first time after construct
  //}}AFX_VIRTUAL
  
  // Implementation
protected:
  virtual ~CGnuInfoSView();
  
  // Generated message map functions
  //{{AFX_MSG(CGnuInfoSView)
  afx_msg void OnKeyDown(UINT nChar, UINT nRepCnt, UINT nFlags);
  
  afx_msg void OnLButtonDown(UINT nFlags, CPoint point);
  //}}AFX_MSG
  DECLARE_MESSAGE_MAP()
  };

/////////////////////////////////////////////////////////////////////////////

// infolist.h : header file
//

/////////////////////////////////////////////////////////////////////////////
// CGnuInfoList view

class CGnuInfoList : public CScrollView
{
 public:
  int font_height;
  class CGnuInfoFrame *frame;
void Sync();
 private:
  class CGnuInfoDoc *doc() { return (CGnuInfoDoc *)GetDocument();}
class CGnuInfoNode *GetCurrentNode();
protected:

	CGnuInfoList();           // protected constructor used by dynamic creation
	DECLARE_DYNCREATE(CGnuInfoList)

// Attributes
public:

// Operations
public:

// Overrides
	// ClassWizard generated virtual function overrides
	//{{AFX_VIRTUAL(CGnuInfoList)
	protected:
	virtual void OnDraw(CDC* pDC);      // overridden to draw this view
	virtual void OnInitialUpdate();     // first time after construct
	//}}AFX_VIRTUAL

// Implementation
protected:
	virtual ~CGnuInfoList();

	// Generated message map functions
	//{{AFX_MSG(CGnuInfoList)
		// NOTE - the ClassWizard will add and remove member functions here.
  afx_msg void OnLButtonDown(UINT nFlags, CPoint point);
	//}}AFX_MSG
	DECLARE_MESSAGE_MAP()
};
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Import OpenBSD 3.3 source repository from CTM 3132 the first time
This opens an OpenBSD-mirabile (aka MirBSD) repository.

### MirBSD is:
# Copyright (c) 1982-2003 by Thorsten "mirabile" Glaser <x86@@ePost.de>
# Copyright © 1968-2003  The authors of And contributors to UNIX®, the
#       C Language, BSD/Berkeley Unix; 386BSD, NetBSD 1.1 and OpenBSD.
#
# Anyone who obtained a copy of this work is hereby permitted to freely use,
# distribute, modify, merge, sublicence, give away or sell it as long as the
# authors are given due credit and the following notice is retained:
#
# This work is provided "as is", with no explicit or implicit warranty what-
# soever. Use it only at your own risk. In no event may an author or contri-
# butor be held liable for any damage, directly or indirectly, that origina-
# ted through or is caused by creation or modification of this work.

MirBSD is my private tree. MirBSD does not differ very much from OpenBSD
and intentionally tracks OpenBSD. That's why it _is_ OpenBSD, just not the
official one. It's like with DarrenBSD.

At time of this writing, no advertising for MirBSD must be done,
because the advertising clause has not yet been sorted out.

http://templeofhate.com/tglaser/MirBSD/index.php
@
text
@@
