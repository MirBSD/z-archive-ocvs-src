head	1.2;
access;
symbols
	MIRBSD_7quater:1.1.1.1
	cvs-200405160640:1.1.1.1
	cvs-200401271800:1.1.1.1
	cvs-200401261630:1.1.1.1
	cvs-200401021645:1.1.1.1
	MIRBSD_7_ALPHA:1.1.1.1.0.6
	MIRBSD_7:1.1.1.1.0.4
	cvs-200312222040:1.1.1.1
	cvs-200312031730:1.1.1.1
	MIRBSD_7ter:1.1.1.1
	MIRBSD_7_DEV:1.1.1.1.0.2
	cvs-200310020700:1.1.1.1
	cvs-200309271030:1.1.1.1
	cvs-200309251530:1.1.1.1
	cvs-200308302005:1.1.1.1
	cvs-200308171200:1.1.1.1
	ctm-3496:1.1.1.1
	ctm-3449:1.1.1.1
	ctm-3437:1.1.1.1
	cvs-200307191805:1.1.1.1
	ctm-3425:1.1.1.1
	cvs-200307091500:1.1.1.1
	ctm-3389:1.1.1.1
	cvs-200306291430:1.1.1.1
	ctm-3341:1.1.1.1
	MIRBSD_5:1.1.1.1
	cvs-200306082100:1.1.1.1
	ctm-3316:1.1.1.1
	ctm-3272:1.1.1.1
	ctm-3264:1.1.1.1
	cvs-200305071630:1.1.1.1
	MIRBSD_4:1.1.1.1
	ctm-3203:1.1.1.1
	cvs-20030410-1130:1.1.1.1
	ctm-3155:1.1.1.1
	ctm-3132:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@// @;


1.2
date	2004.06.10.19.01.58;	author tg;	state dead;
branches;
next	1.1;

1.1
date	2003.03.22.17.40.34;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.03.22.17.40.34;	author tg;	state Exp;
branches;
next	;


desc
@@


1.2
log
@first foolish attempt to merge the last piece
won't probably work, but I want it backed up,
since there's a lot of work and time in it
@
text
@// logview.cpp : implementation file

/* We save the logview as a standard editview, and we buffer
   up text from gdb until we get to an idle.  If we see a return
   from the user, then we suck up that line and treat it as input */

#include "stdafx.h"
#include "log.h"

extern CGuiApp theApp;

static void redraw_allcmdlogwins()
{ 
  redraw_allwins(theApp.m_CmdLogTemplate);
}
static void redraw_alliologwins()
{ 
  redraw_allwins(theApp.m_IOLogTemplate);
}

CFontInfo cmdlogview_fontinfo ("Command", redraw_allcmdlogwins);
CFontInfo iologview_fontinfo  ("IO", redraw_alliologwins);

IMPLEMENT_DYNCREATE(CGenericLogView, CEditView)



CIOLogView *iowinptr;
CCmdLogView *cmdwinptr;


CGenericLogView::CGenericLogView()
{
  *(getptr) = this;
  getfontinfo->MakeFont();
}

CGenericLogView::~CGenericLogView()
{
  *(getptr) = 0;
}


BEGIN_MESSAGE_MAP(CGenericLogView, CEditView)
	//{{AFX_MSG_MAP(CGenericLogView)
	ON_COMMAND(ID_REAL_CMD_BUTTON_SET_FONT, OnSetFont)
	ON_EN_CHANGE(AFX_IDW_PANE_FIRST, OnEditChange)
	ON_WM_SHOWWINDOW()
	ON_WM_KEYDOWN()
	ON_WM_DESTROY()
     ON_WM_SIZE()
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()



void CGenericLogView::add(const char *s)
{
pending += s;
}

void CGenericLogView::OnDraw(CDC* pDC)
{
	CDocument* pDoc = GetDocument();
}



void CGenericLogView::OnSetFont() 
{
  getfontinfo ->OnChooseFont();	
  SetFont(&(getfontinfo ->m_font));

}

BOOL CGenericLogView::PreCreateWindow(CREATESTRUCT& cs) 
{
  return CEditView::PreCreateWindow(cs);
}

void CGenericLogView::OnInitialUpdate() 
{
  SetFont(&(getfontinfo ->m_font));
  CEditView::OnInitialUpdate();
  load_where(GetParentFrame(), getfontinfo->windowname);
}


void CGenericLogView::OnDestroy() 
{
	save_where(GetParentFrame(), getfontinfo->windowname);
	CEditView::OnDestroy();
}

void CGenericLogView::OnShowWindow(BOOL bShow, UINT nStatus) 
{
  CEditView::OnShowWindow(bShow, nStatus);
}

static char line[100];
int lc;
int nl = 0;

void CGenericLogView::OnEditChange()
{
  CEditView::OnEditChange();
  if (nl) {
    char buf[200];
    static int j;
    nl = 0;
    lc = 0;
    sprintf(buf,"(gdb)  ", j++);
    togdb_command_from_tty(line+6);


    add (buf);
//	togdb_force_update ();
  }
}

void CGenericLogView::OnKeyDown(UINT nChar, UINT nRepCnt, UINT nFlags) 
{
  doidle();
  int i = GetEditCtrl().GetLineCount();
  int z = GetEditCtrl().GetLine(i-1,line, sizeof(line));
  
  if (isalpha(nChar))
    {
      int idx = GetEditCtrl().LineIndex(i-1);
      GetEditCtrl(). SetSel (idx + z, idx+z, TRUE);
    }
  CEditView::OnKeyDown(nChar, nRepCnt, nFlags);
  if (nChar == VK_RETURN)
    {
      /* Suck off last line */
      line[z] = 0;
      nl = 1;
    }
}

void CGenericLogView::OnIdle() 
{
/*	if (*getptr())
	getptr()->doidle();*/
}

void CGenericLogView::doidle()
{
  if (pending.GetLength()) 
    { 
      WINDOWPLACEMENT wnp;
      GetWindowPlacement (&wnp); 
      if (wnp.showCmd != SW_SHOWMINIMIZED) 
	{ 
	  int i;
	  while (pending.GetLength()) {
	    i = pending.Find('\n');
	    if (i >= 0)
	      {
		CString l = pending.Left(i);
		GetEditCtrl().SetSel(-1,-1,FALSE); 
		GetEditCtrl().ReplaceSel(l);
		GetEditCtrl().ReplaceSel("\r"); 
		GetEditCtrl().ReplaceSel("\n"); 
		pending = pending.Mid(i+1);
	      }
	    else {
	      /* Scan look for the newlines and change them */
	      GetEditCtrl().ReplaceSel(pending); 
	      pending ="";
	      return ;
	    }
	  }
	} 
    }
}


IMPLEMENT_DYNCREATE(CIOLogView, CGenericLogView)
IMPLEMENT_DYNCREATE(CCmdLogView, CGenericLogView)


void CCmdLogView::Initialize()
{
  cmdlogview_fontinfo.Initialize();
}
void CCmdLogView::Terminate() 
{
  cmdlogview_fontinfo.Terminate();
}

void CIOLogView::Initialize()
{
  iologview_fontinfo.Initialize();
}
void CIOLogView::Terminate() 
{
  iologview_fontinfo.Terminate();
}
		  


CGenericLogView::CGenericLogView(CGenericLogView **p, CFontInfo *f) 

{ 
*p = this; 
getptr = p; 
getfontinfo = f;}

CIOLogView::CIOLogView() 
: CGenericLogView ((CGenericLogView **)&iowinptr,   &iologview_fontinfo) 
{}
CCmdLogView::CCmdLogView() : CGenericLogView ((CGenericLogView **)&cmdwinptr, &cmdlogview_fontinfo)  {}



void CIOLogView_output (const char *s)
{
  if (!iowinptr)
    {
      /* Window doesn't exist!! make one */
	theApp.OnNewIOLogWin(); 
    }

  if (iowinptr)
    {
      iowinptr->add (s);
      iowinptr->doidle ();
    }
}
void CGenericLogView::OnSize(UINT nType, int cx, int cy) 
{
//  ::OnSize(nType, cx, cy);
  // TODO: Add your message handler code here
  GetWindowRect (&getfontinfo->where);
  SetFont(&(getfontinfo ->m_font));
}

@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Import OpenBSD 3.3 source repository from CTM 3132 the first time
This opens an OpenBSD-mirabile (aka MirBSD) repository.

### MirBSD is:
# Copyright (c) 1982-2003 by Thorsten "mirabile" Glaser <x86@@ePost.de>
# Copyright © 1968-2003  The authors of And contributors to UNIX®, the
#       C Language, BSD/Berkeley Unix; 386BSD, NetBSD 1.1 and OpenBSD.
#
# Anyone who obtained a copy of this work is hereby permitted to freely use,
# distribute, modify, merge, sublicence, give away or sell it as long as the
# authors are given due credit and the following notice is retained:
#
# This work is provided "as is", with no explicit or implicit warranty what-
# soever. Use it only at your own risk. In no event may an author or contri-
# butor be held liable for any damage, directly or indirectly, that origina-
# ted through or is caused by creation or modification of this work.

MirBSD is my private tree. MirBSD does not differ very much from OpenBSD
and intentionally tracks OpenBSD. That's why it _is_ OpenBSD, just not the
official one. It's like with DarrenBSD.

At time of this writing, no advertising for MirBSD must be done,
because the advertising clause has not yet been sorted out.

http://templeofhate.com/tglaser/MirBSD/index.php
@
text
@@
