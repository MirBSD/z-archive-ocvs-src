head	1.2;
access;
symbols
	MIRBSD_7quater:1.1.1.1
	cvs-200405160640:1.1.1.1
	cvs-200401271800:1.1.1.1
	cvs-200401261630:1.1.1.1
	cvs-200401021645:1.1.1.1
	MIRBSD_7_ALPHA:1.1.1.1.0.6
	MIRBSD_7:1.1.1.1.0.4
	cvs-200312222040:1.1.1.1
	cvs-200312031730:1.1.1.1
	MIRBSD_7ter:1.1.1.1
	MIRBSD_7_DEV:1.1.1.1.0.2
	cvs-200310020700:1.1.1.1
	cvs-200309271030:1.1.1.1
	cvs-200309251530:1.1.1.1
	cvs-200308302005:1.1.1.1
	cvs-200308171200:1.1.1.1
	ctm-3496:1.1.1.1
	ctm-3449:1.1.1.1
	ctm-3437:1.1.1.1
	cvs-200307191805:1.1.1.1
	ctm-3425:1.1.1.1
	cvs-200307091500:1.1.1.1
	ctm-3389:1.1.1.1
	cvs-200306291430:1.1.1.1
	ctm-3341:1.1.1.1
	MIRBSD_5:1.1.1.1
	cvs-200306082100:1.1.1.1
	ctm-3316:1.1.1.1
	ctm-3272:1.1.1.1
	ctm-3264:1.1.1.1
	cvs-200305071630:1.1.1.1
	MIRBSD_4:1.1.1.1
	ctm-3203:1.1.1.1
	cvs-20030410-1130:1.1.1.1
	ctm-3155:1.1.1.1
	ctm-3132:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.2
date	2004.06.10.19.01.54;	author tg;	state dead;
branches;
next	1.1;

1.1
date	2003.03.22.17.40.34;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.03.22.17.40.34;	author tg;	state Exp;
branches;
next	;


desc
@@


1.2
log
@first foolish attempt to merge the last piece
won't probably work, but I want it backed up,
since there's a lot of work and time in it
@
text
@#ifdef __cplusplus
extern "C" {
#endif
#define atof atof
#undef const
#define const const
#undef max
#undef min
#include "../defs.h"
extern char gdb_dirbuf[];


#include "../gdbtypes.h"
#include "../symtab.h"
#include "../breakpoint.h"
#include "../value.h"
#include "../frame.h"
#include "../serial.h"

// Stuff in gdb we need 

struct block *togdb_get_frame_block(struct frame_info *s);
const int togdb_pcreg();
const int togdb_ccrreg();
const int togdb_maxregs();
void togdb_eval_as_string_worker(const char *);
void togdb_command(const char *);

void togdb_command_from_tty (const char *)		 ;
void togdb_force_update();
const char*togdb_symtab_to_filename(struct symtab *);
const char*togdb_symtab_to_fullname(struct symtab *);
void togdb_symtab_search_for_fullname(struct symtab *);
struct symbol *togdb_block_getblocksym(struct block *, int i);
struct symbol *togdb_block_getfunction(struct block *p);
struct block *togdb_block_getsuperblock(struct block *p);
int togdb_block_getnsyms(struct block *p);
void togdb_do_cleanups_ALL_CLEANUPS();
void togdb_restore_cleanups(void *p);
const char *doing_something (const char *s);
int togdb_target_has_registers();
struct symbol *togdb_get_block_sym(struct frame_info *, int i);
int togdb_find_pc_partial_function (CORE_ADDR pc,
				     char **name,
				     CORE_ADDR *low,
				     CORE_ADDR *high);

int togdb_searchpath (char *path, int try_cwd_first, const char *string, char **filename_opened);

const char*togdb_get_source_path();
void togdb_set_source_path(const char *);

char *togdb_get_info_path (void);
void togdb_set_info_path (const char *);

extern struct frame_info *selected_frame;
struct symbol *my_lookup_symbol(const char *);

struct tregs 
  {
      int regs[18];
      int changed[18];
  };

struct lineinfo 
  {
  int line;
  CORE_ADDR pc;
  };



struct frame_annotated_info {
  int called_by;
#define CALLED_BY_GDB 1
#define CALLED_BY_SIGNAL 2
#define CALLED_BY_PROG 3
  char *funcname;
  char *filename;
  int line;
  struct symtab *symtab;

};

void togdb_annotate_info(struct frame_info *, struct frame_annotated_info*);
struct gui_symtab_file *gdbwin_list_symbols (const char *, int);
void gdbwin_list_symbols_free(struct gui_symtab_file *);

int catch_errors (int (*)(char *), void *, char *, int);

struct lineinfo *togdb_lineinfo(const char *filename);
void togdb_free_lineinfo (struct lineinfo *p);
CORE_ADDR togdb_fetchreg(int rn);
CORE_ADDR togdb_fetchpc();
int togdb_target_has_execution();
void togdb_fetchloc(CORE_ADDR pc, char ** filename, int *line,
		    struct symtab **s);
void togdb_set_breakpoint_sal (struct symtab *, int);
void *togdb_breakinfo_i_next(void*);
void *togdb_breakinfo_i_init();
int togdb_disassemble (CORE_ADDR, char *);
void togdb_bpt_set(const char *s);

int  bi_type(void *);
int  bi_disposition(void *);
int  bi_enable(void *);
CORE_ADDR  bi_address(void *);
int  bi_linenumber(void *);
const char*  bi_sourcefile(void *);
const char*  bi_condstring(void *);
const char*  bi_expstring(void *);
const char*  bi_addrstring(void *);
int bi_number(void *);
int bi_hitcount(void *);
void bi_delete_breakpoint(void *);
void bi_delete_all();
void bi_disable_bpt(void *);
void bi_enable_bpt(void *);

const char *togdb_symtab_filename(struct symtab *);
//const char *togdb_symbol_name(struct symbol *);
char *const togdb_symbol_value(struct symbol *);
const int  togdb_symbol_line(struct symbol *);

CORE_ADDR togdb_lineinfo_getpc(struct lineinfo *);
int  togdb_lineinfo_getline(struct lineinfo *);
CORE_ADDR togdb_frameinfo_frameaddr(struct frame_info *);
CORE_ADDR togdb_frameinfo_framepc(struct frame_info *);
struct frame_info *togdb_frameinfo_prevframe(struct frame_info *);
struct frame_info *togdb_frameinfo_getcurrentframe();
/* Other crap */

int re_exec(const char *);
#ifdef __cplusplus
};

class CBreakInfo : public breakpoint
{
  void *m_fake;
 public:
    int GetNumber() { return number;}
  enum bptype GetType() { return type;}
  enum bpdisp GetDisposition() { return disposition;}
  enum enable GetEnable() { return enable;}
  CORE_ADDR GetAddress() { return address;}
  int GetLineNumber() { return line_number;}
  const char *GetSourceFile() { return source_file;}
  const char *GetCondString() { return cond_string;}
  const char *GetExpString() { return exp_string;}
  const char *GetAddrString() { return addr_string;}
  int GetHitCount() {  return hit_count; }


  CBreakInfo() {};
  void DoDelete();
  void DoDisable();
  void togdb_bpt_set (const char *p);

};

#if 1
class CBreakInfoList {
 public:
    CPtrArray m_info;
    CBreakInfoList();
    CBreakInfo *GetAt(int idx);
    int GetSize();
    int GetPCIdx(  CORE_ADDR addr);
    void Delete(int idx);
    void Disable(int idx);
    void Enable(int idx);
    void Update();
    void DeleteAll();
};

#endif

class CBlock : public block
{
 public:

  class CSymbol *GetBlockSym(int i)  { return (CSymbol *)BLOCK_SYM(this,i);}
  class CSymbol *GetFunction() { return (CSymbol *)BLOCK_FUNCTION(this);}
  class CBlock *GetSuperBlock() { return (CBlock *)BLOCK_SUPERBLOCK(this);}
  int GetNSyms() { return BLOCK_NSYMS(this);}
};
class CFrameInfo : public frame_info {

 public:

  class CFrameInfo *get_prev_frame() { return (CFrameInfo *)::get_prev_frame(this);}
  CORE_ADDR GetFrameAddr();
    CORE_ADDR GetFramePC() { return pc;}

  class CBlock *GetFrameBlock()  { return (CBlock *) togdb_get_frame_block(this);}
  class CSymbol *GetBlockSym(int i) { return (CSymbol *) togdb_get_block_sym(this, i);}
  static CFrameInfo *GetCurrentFrame() { return (CFrameInfo *)get_current_frame();}
};

class CSymbol :public symbol 
{
 public:
   enum address_class GetSymbolClass() { return aclass;}
     const  char *GetName()  { return SYMBOL_NAME(this);}
const   int GetLine();
CORE_ADDR  GetValue();
   CORE_ADDR GetSymbolValueAddress() {return SYMBOL_VALUE_ADDRESS(this);}

   class CType *GetType() { return (CType *) type;}
     static CSymbol *Lookup(const char *name);
       class CValue *ReadVarValue(class CFrameInfo *frame)
	 { return (CValue *)read_var_value(this, frame);}
 };
class CLineInfo:  public lineinfo
 {
 public:
  CORE_ADDR getpc();
  int getline();
};

class CLineInfoArray {
 CString filename;
 public:
  CLineInfoArray (CString name);
  class CLineInfo *ptr;
};

class CSymtab 	  : public symtab
{

 public:

 void search_for_fullname() { togdb_symtab_search_for_fullname(this);}
  const char *to_fullname() { return togdb_symtab_to_fullname(this);}
  const char *to_filename() { return togdb_symtab_to_filename(this);}
  const  char *get_filename()  { return filename;}
  CLineInfo *calc_lineinfo();

};
int togdb_updatebptinfo(CBreakInfoList *);
void togdb_fillbptlistbox(CListBox &listbox);
CString togdb_eval_as_string (const char *);

class CValue : public value
{
 public:
  CORE_ADDR GetAddress() { return VALUE_ADDRESS(this);}
  LONGEST GetInt() { return unpack_long (VALUE_TYPE(this), VALUE_CONTENTS(this));}
  const char *GetEnumName ();
  int GetRegno() { return (int)VALUE_ADDRESS(this); }
  enum lval_type  GetLVal() { return VALUE_LVAL(this);}
};


class CType  : public type
{
 public:	 ;

};


#endif


#if 1
/* Communication between gdb symtabs and gui */
#define GUI_FILE 1
#define GUI_ITEM 2
struct gui_symtab_item
{
  int type;
  struct gui_symtab_item *next_item;
#ifdef __cplusplus
  CSymbol *sym;
#else
  struct symbol *sym;
#endif
  struct gui_symtab_file *parent;
};
struct gui_symtab_file
{
  int type;
  struct gui_symtab_file *next_file;
  struct gui_symtab_item *items;
#ifdef __cplusplus
  CSymtab *tab;
#else
  struct symtab *tab;
#endif
  int opened;
};
union gui_symtab
{
  int type;
  struct gui_symtab_file as_file;
  struct gui_symtab_item as_item;
};








/*struct cleanup *my_make_cleanup  (void *fptr, void *arg);*/
#endif
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Import OpenBSD 3.3 source repository from CTM 3132 the first time
This opens an OpenBSD-mirabile (aka MirBSD) repository.

### MirBSD is:
# Copyright (c) 1982-2003 by Thorsten "mirabile" Glaser <x86@@ePost.de>
# Copyright © 1968-2003  The authors of And contributors to UNIX®, the
#       C Language, BSD/Berkeley Unix; 386BSD, NetBSD 1.1 and OpenBSD.
#
# Anyone who obtained a copy of this work is hereby permitted to freely use,
# distribute, modify, merge, sublicence, give away or sell it as long as the
# authors are given due credit and the following notice is retained:
#
# This work is provided "as is", with no explicit or implicit warranty what-
# soever. Use it only at your own risk. In no event may an author or contri-
# butor be held liable for any damage, directly or indirectly, that origina-
# ted through or is caused by creation or modification of this work.

MirBSD is my private tree. MirBSD does not differ very much from OpenBSD
and intentionally tracks OpenBSD. That's why it _is_ OpenBSD, just not the
official one. It's like with DarrenBSD.

At time of this writing, no advertising for MirBSD must be done,
because the advertising clause has not yet been sorted out.

http://templeofhate.com/tglaser/MirBSD/index.php
@
text
@@
