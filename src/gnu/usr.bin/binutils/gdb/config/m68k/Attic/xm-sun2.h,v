head	1.2;
access;
symbols
	cvs-200406091940:1.1.1.2
	MIRBSD_7quater:1.1.1.1
	cvs-200405160640:1.1.1.1
	cvs-200401271800:1.1.1.1
	cvs-200401261630:1.1.1.1
	cvs-200401021645:1.1.1.1
	MIRBSD_7_ALPHA:1.1.1.1.0.6
	MIRBSD_7:1.1.1.1.0.4
	cvs-200312222040:1.1.1.1
	cvs-200312031730:1.1.1.1
	MIRBSD_7ter:1.1.1.1
	MIRBSD_7_DEV:1.1.1.1.0.2
	cvs-200310020700:1.1.1.1
	cvs-200309271030:1.1.1.1
	cvs-200309251530:1.1.1.1
	cvs-200308302005:1.1.1.1
	cvs-200308171200:1.1.1.1
	ctm-3496:1.1.1.1
	ctm-3449:1.1.1.1
	ctm-3437:1.1.1.1
	cvs-200307191805:1.1.1.1
	ctm-3425:1.1.1.1
	cvs-200307091500:1.1.1.1
	ctm-3389:1.1.1.1
	cvs-200306291430:1.1.1.1
	ctm-3341:1.1.1.1
	MIRBSD_5:1.1.1.1
	cvs-200306082100:1.1.1.1
	ctm-3316:1.1.1.1
	ctm-3272:1.1.1.1
	ctm-3264:1.1.1.1
	cvs-200305071630:1.1.1.1
	MIRBSD_4:1.1.1.1
	ctm-3203:1.1.1.1
	cvs-20030410-1130:1.1.1.1
	ctm-3155:1.1.1.1
	ctm-3132:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.2
date	2004.08.11.21.15.28;	author tg;	state dead;
branches;
next	1.1;

1.1
date	2003.03.22.17.40.29;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.03.22.17.40.29;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2004.06.09.20.29.18;	author tg;	state Exp;
branches;
next	;


desc
@@


1.2
log
@remove old binutils
@
text
@/* Parameters for execution on a Sun, for GDB, the GNU debugger.
   Copyright (C) 1986, 1987, 1989, 1996 Free Software Foundation, Inc.

This file is part of GDB.

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */

#define HOST_BYTE_ORDER BIG_ENDIAN

/* This is the amount to subtract from u.u_ar0
   to get the offset in the core file of the register values.  */

#define KERNEL_U_ADDR 0x2800


/* Interface definitions for kernel debugger KDB.  */

/* Map machine fault codes into signal numbers.
   First subtract 0, divide by 4, then index in a table.
   Faults for which the entry in this table is 0
   are not handled by KDB; the program's own trap handler
   gets to handle then.  */

#define FAULT_CODE_ORIGIN 0
#define FAULT_CODE_UNITS 4
#define FAULT_TABLE    \
{ 0, 0, 0, 0, SIGTRAP, 0, 0, 0, \
  0, SIGTRAP, 0, 0, 0, 0, 0, SIGKILL, \
  0, 0, 0, 0, 0, 0, 0, 0, \
  SIGILL }

/* Start running with a stack stretching from BEG to END.
   BEG and END should be symbols meaningful to the assembler.
   This is used only for kdb.  */

#define INIT_STACK(beg, end)  \
{ asm (".globl end");         \
  asm ("movel $ end, sp");      \
  asm ("clrl fp"); }

/* Push the frame pointer register on the stack.  */
#define PUSH_FRAME_PTR        \
  asm ("movel fp, -(sp)");

/* Copy the top-of-stack to the frame pointer register.  */
#define POP_FRAME_PTR  \
  asm ("movl (sp), fp");

/* After KDB is entered by a fault, push all registers
   that GDB thinks about (all NUM_REGS of them),
   so that they appear in order of ascending GDB register number.
   The fault code will be on the stack beyond the last register.  */

#define PUSH_REGISTERS        \
{ asm ("clrw -(sp)");	      \
  asm ("pea 10(sp)");	      \
  asm ("movem $ 0xfffe,-(sp)"); }

/* Assuming the registers (including processor status) have been
   pushed on the stack in order of ascending GDB register number,
   restore them and return to the address in the saved PC register.  */

#define POP_REGISTERS          \
{ asm ("subil $8,28(sp)");     \
  asm ("movem (sp),$ 0xffff"); \
  asm ("rte"); }
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Import OpenBSD 3.3 source repository from CTM 3132 the first time
This opens an OpenBSD-mirabile (aka MirBSD) repository.

### MirBSD is:
# Copyright (c) 1982-2003 by Thorsten "mirabile" Glaser <x86@@ePost.de>
# Copyright © 1968-2003  The authors of And contributors to UNIX®, the
#       C Language, BSD/Berkeley Unix; 386BSD, NetBSD 1.1 and OpenBSD.
#
# Anyone who obtained a copy of this work is hereby permitted to freely use,
# distribute, modify, merge, sublicence, give away or sell it as long as the
# authors are given due credit and the following notice is retained:
#
# This work is provided "as is", with no explicit or implicit warranty what-
# soever. Use it only at your own risk. In no event may an author or contri-
# butor be held liable for any damage, directly or indirectly, that origina-
# ted through or is caused by creation or modification of this work.

MirBSD is my private tree. MirBSD does not differ very much from OpenBSD
and intentionally tracks OpenBSD. That's why it _is_ OpenBSD, just not the
official one. It's like with DarrenBSD.

At time of this writing, no advertising for MirBSD must be done,
because the advertising clause has not yet been sorted out.

http://templeofhate.com/tglaser/MirBSD/index.php
@
text
@@


1.1.1.2
log
@Sync of src/gnu with OpenBSD (promised a long time ago)
@
text
@d1 78
a78 77
// OBSOLETE /* Parameters for execution on a Sun, for GDB, the GNU debugger.
// OBSOLETE    Copyright 1986, 1987, 1989, 1996 Free Software Foundation, Inc.
// OBSOLETE 
// OBSOLETE    This file is part of GDB.
// OBSOLETE 
// OBSOLETE    This program is free software; you can redistribute it and/or modify
// OBSOLETE    it under the terms of the GNU General Public License as published by
// OBSOLETE    the Free Software Foundation; either version 2 of the License, or
// OBSOLETE    (at your option) any later version.
// OBSOLETE 
// OBSOLETE    This program is distributed in the hope that it will be useful,
// OBSOLETE    but WITHOUT ANY WARRANTY; without even the implied warranty of
// OBSOLETE    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// OBSOLETE    GNU General Public License for more details.
// OBSOLETE 
// OBSOLETE    You should have received a copy of the GNU General Public License
// OBSOLETE    along with this program; if not, write to the Free Software
// OBSOLETE    Foundation, Inc., 59 Temple Place - Suite 330,
// OBSOLETE    Boston, MA 02111-1307, USA.  */
// OBSOLETE 
// OBSOLETE /* This is the amount to subtract from u.u_ar0
// OBSOLETE    to get the offset in the core file of the register values.  */
// OBSOLETE 
// OBSOLETE #define KERNEL_U_ADDR 0x2800
// OBSOLETE 
// OBSOLETE 
// OBSOLETE /* Interface definitions for kernel debugger KDB.  */
// OBSOLETE 
// OBSOLETE /* Map machine fault codes into signal numbers.
// OBSOLETE    First subtract 0, divide by 4, then index in a table.
// OBSOLETE    Faults for which the entry in this table is 0
// OBSOLETE    are not handled by KDB; the program's own trap handler
// OBSOLETE    gets to handle then.  */
// OBSOLETE 
// OBSOLETE #define FAULT_CODE_ORIGIN 0
// OBSOLETE #define FAULT_CODE_UNITS 4
// OBSOLETE #define FAULT_TABLE    \
// OBSOLETE { 0, 0, 0, 0, SIGTRAP, 0, 0, 0, \
// OBSOLETE   0, SIGTRAP, 0, 0, 0, 0, 0, SIGKILL, \
// OBSOLETE   0, 0, 0, 0, 0, 0, 0, 0, \
// OBSOLETE   SIGILL }
// OBSOLETE 
// OBSOLETE /* Start running with a stack stretching from BEG to END.
// OBSOLETE    BEG and END should be symbols meaningful to the assembler.
// OBSOLETE    This is used only for kdb.  */
// OBSOLETE 
// OBSOLETE #define INIT_STACK(beg, end)  \
// OBSOLETE { asm (".globl end");         \
// OBSOLETE   asm ("movel $ end, sp");      \
// OBSOLETE   asm ("clrl fp"); }
// OBSOLETE 
// OBSOLETE /* Push the frame pointer register on the stack.  */
// OBSOLETE #define PUSH_FRAME_PTR        \
// OBSOLETE   asm ("movel fp, -(sp)");
// OBSOLETE 
// OBSOLETE /* Copy the top-of-stack to the frame pointer register.  */
// OBSOLETE #define POP_FRAME_PTR  \
// OBSOLETE   asm ("movl (sp), fp");
// OBSOLETE 
// OBSOLETE /* After KDB is entered by a fault, push all registers
// OBSOLETE    that GDB thinks about (all NUM_REGS of them),
// OBSOLETE    so that they appear in order of ascending GDB register number.
// OBSOLETE    The fault code will be on the stack beyond the last register.  */
// OBSOLETE 
// OBSOLETE #define PUSH_REGISTERS        \
// OBSOLETE { asm ("clrw -(sp)");	      \
// OBSOLETE   asm ("pea 10(sp)");	      \
// OBSOLETE   asm ("movem $ 0xfffe,-(sp)"); }
// OBSOLETE 
// OBSOLETE /* Assuming the registers (including processor status) have been
// OBSOLETE    pushed on the stack in order of ascending GDB register number,
// OBSOLETE    restore them and return to the address in the saved PC register.  */
// OBSOLETE 
// OBSOLETE #define POP_REGISTERS          \
// OBSOLETE { asm ("subil $8,28(sp)");     \
// OBSOLETE   asm ("movem (sp),$ 0xffff"); \
// OBSOLETE   asm ("rte"); }
@

