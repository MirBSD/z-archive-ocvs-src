head	1.2;
access;
symbols
	gcc-3_2_3:1.1.2.1 FSF:1.1.2;
locks; strict;
comment	@# @;


1.2
date	2003.11.04.17.23.45;	author tg;	state dead;
branches;
next	1.1;

1.1
date	2003.10.27.19.29.51;	author tg;	state Exp;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2003.10.27.19.29.51;	author tg;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Yours sincerely, licence auditor, strikes again.


Remove stuff under the so-called "GNU Free Documentation License".

You are actually even breaching the licence when you are
storing GFDL-licenced documents on an encrypted filesystem,
or "even  storing  it  on  a  file-sharing  system  with
non-world-readable permissions", according to the information
found at http://home.twcny.rr.com/nerode/neroden/fdl.html
via Slashdot.

I am thinking whether to adopt the (amended) Debian Social
Contract, and either the DFSG or the OSD (or both) for MirOS.
(see the /. story)

src/gnu/libstdc++:

| The Docs: FDL
|
|    The documentation shipped with the library and made available over the
|    web,   including   the  pages  generated  from  source  comments,  are
|    copyrighted  by  the  Free  Software  Foundation, and placed under the
|    [3]GNU   Free   Documentation   License  version  1.1.  There  are  no
|    Front-Cover Texts, no Back-Cover Texts, and no Invariant Sections.

Of course this doesn't apply to documentation for libstdc++ generated by
ourselfes from GPL'd or LGPL'd files, because the GFDL is incompatible
with both of them.


Hint: if you can dig out older versions of the GNU tools man pages, such
as gcc 3.0 and binutils 2.12/2.13 (for example), which are not yet GFDL
licenced, please give me a hint (I'm not actively searching myself now)
or mail them to me, and be sure I'll commit them, together with a warning
about inactuality.
@
text
@
The approach I've been using for a given header is to recursively do each
of the "bits" headers which make up the standard header.  So, e.g., while
there are four headers making up <algorithm>, three of them were already
documented in the course of doing other headers.

"Untouched" means I've deliberately skipped it for various reasons, or
haven't gotten to it yet.  It /will/ be done (by somebody, eventually.)

If you document an area and need to skip (for whatever reason) a non-trivial
entity (i.e., one that should be documented), go ahead and add the comment
markup, and use the homegrown @@doctodo tag.  See include/bits/stl_iterator.h
for examples of this.  Doing so will at least cause doxygen to consider the
entitiy as documented and include it in the output.  It will also add the
entity to the generated TODO page.


 Area           Still needs to be doxygen-documented
-----------------------------------------------------------

c17             FINISHED (Nothing in Clause 17 "exists" in terms of code.)
c18             <limits>, Note A
c19             Note A
c20             Note A
c21             Untouched, Note B
c22             Untouched
c23             See doxygroups.cc and Note B.  Notes on what invalidates
                iterators need to be added.  std::list-specific memfns need
                to be filled out.
c24             stl_iterator.h (__normal_iterator, other small TODO bits)
                stream iterators
c25             stl_algo.h (lots of stuff)
c26             <complex>, <valarray>, stl_numeric.h[26.4], Note A
c27             ios_base callbacks and local storage
                basic_ios::copyfmt()
                std_streambuf.h's __copy_streambufs()
                    " "           _M_* protected memfns (data has been done)
                fstream and sstream protected members

backward/*      Not scanned by doxygen.  Should it be?  Doubtful.

ext/*           Some of the SGI algorithm/functional extensions.
                All of rope/hashing/slist need docs.

__gnu_cxx       Tricky.  Right now ext/* are in this namespace.

-----------------------------------------------------------

NOTES:

A)  So far I have not tried to document any of the <c*> headers.  So entities
such as atexit() are undocumented throughout the library.  Since we usually
do not have the C code (to which the doxygen comments would be attached),
this would need to be done in entirely separate files, a la doxygroups.cc.

B)  Huge chunks of containers and strings are described in common "Tables"
in the standard.  These are pseudo-duplicated in tables.html.  We can
use doxygen hooks like @@pre and @@see to reference the tables.  Then the
individual classes do like the standard does, and only document members for
which additional info is available.


STYLE:
stl_deque.h, stl_pair.h, and stl_algobase.h have good examples of what I've
been using for class, namespace-scope, and function documentation, respectively.
These should serve as starting points.  /Please/ maintain the inter-word and
inter-sentence spacing, as this might be generated and/or scanned in the
future.


vim:ts=4:et:
@


1.1
log
@Initial revision
@
text
@@


1.1.2.1
log
@tg@@odem:/home/tg $ bzip2 -dc /data/gcc-3.2.3.tar.bz2 | tar xf -
tg@@odem:/home/tg $ cd gcc-3.2.3/
tg@@odem:/home/tg/gcc-3.2.3 $ find . -name .cvsignore | xargs rm
tg@@odem:/home/tg/gcc-3.2.3 $ rm -rf libjava gcc/java
tg@@odem:/home/tg/gcc-3.2.3 $ rm -rf boehm-gc fastjar libffi libiberty zlib
tg@@odem:/home/tg/gcc-3.2.3 $ cvs -qz6 -d tg@@herc:/cvs import -I ! -I CVS -b 1.1.2 src/gnu/gcc FSF gcc-3_2_3

We'll try it again. Not gcc 3.3 this time.
@
text
@@
