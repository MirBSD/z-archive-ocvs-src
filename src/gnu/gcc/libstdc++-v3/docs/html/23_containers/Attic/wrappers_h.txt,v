head	1.2;
access;
symbols
	gcc-3_2_3:1.1.2.1 FSF:1.1.2;
locks; strict;
comment	@# @;


1.2
date	2003.11.04.17.24.19;	author tg;	state dead;
branches;
next	1.1;

1.1
date	2003.10.27.19.29.56;	author tg;	state Exp;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2003.10.27.19.29.56;	author tg;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Yours sincerely, licence auditor, strikes again.


Remove stuff under the so-called "GNU Free Documentation License".

You are actually even breaching the licence when you are
storing GFDL-licenced documents on an encrypted filesystem,
or "even  storing  it  on  a  file-sharing  system  with
non-world-readable permissions", according to the information
found at http://home.twcny.rr.com/nerode/neroden/fdl.html
via Slashdot.

I am thinking whether to adopt the (amended) Debian Social
Contract, and either the DFSG or the OSD (or both) for MirOS.
(see the /. story)

src/gnu/libstdc++:

| The Docs: FDL
|
|    The documentation shipped with the library and made available over the
|    web,   including   the  pages  generated  from  source  comments,  are
|    copyrighted  by  the  Free  Software  Foundation, and placed under the
|    [3]GNU   Free   Documentation   License  version  1.1.  There  are  no
|    Front-Cover Texts, no Back-Cover Texts, and no Invariant Sections.

Of course this doesn't apply to documentation for libstdc++ generated by
ourselfes from GPL'd or LGPL'd files, because the GFDL is incompatible
with both of them.


Hint: if you can dig out older versions of the GNU tools man pages, such
as gcc 3.0 and binutils 2.12/2.13 (for example), which are not yet GFDL
licenced, please give me a hint (I'm not actively searching myself now)
or mail them to me, and be sure I'll commit them, together with a warning
about inactuality.
@
text
@
/*****************************************************************
 * Functions to help treat arrays in a uniform manner.  These were
 * inspired by a thread on comp.lang.c++.moderated, started by Dietmar
 * Kuehl and contributed to by the rest of the entire planet.
 *
 * beginof (x), endof (x), lengthof (x) now accompany sizeof, where x
 * can be either a container (currently only sequences) or a builtin
 * array (/not/ a pointer).  The beginof/endof are intended for use in
 * the algorithms library, and lengthof is a "sizing" function.
 *
 * Note example:
 *       char  an_array [17];
 *       cerr << lengthof(an_array) << endl;
 * produces assembly code of
 *       mov 17,register0
 *       call ofstream_put
 * i.e., the template function inlining really does work; g++
 * requires -O3 (or -finline-functions) before it does this, though.
 *
 * pedwards 13Nov98
*/
// beginof
template <class T>
  inline typename vector<T>::iterator beginof (vector<T> &v)
  { return v.begin(); }

template <class T, unsigned int sz>
  inline T* beginof (T (&array)[sz]) { return array; }


// endof
template <class T>
  inline typename vector<T>::iterator endof (vector<T> &v)
  { return v.end(); }

template <class T, unsigned int sz>
  inline T* endof (T (&array)[sz]) { return array + sz; }


// lengthof
template <class T>
  inline typename vector<T>::size_type lengthof (vector<T> &v)
  { return v.size(); }

template <class T, unsigned int sz>
  inline unsigned int lengthof (T (&)[sz]) { return sz; }

@


1.1
log
@Initial revision
@
text
@@


1.1.2.1
log
@tg@@odem:/home/tg $ bzip2 -dc /data/gcc-3.2.3.tar.bz2 | tar xf -
tg@@odem:/home/tg $ cd gcc-3.2.3/
tg@@odem:/home/tg/gcc-3.2.3 $ find . -name .cvsignore | xargs rm
tg@@odem:/home/tg/gcc-3.2.3 $ rm -rf libjava gcc/java
tg@@odem:/home/tg/gcc-3.2.3 $ rm -rf boehm-gc fastjar libffi libiberty zlib
tg@@odem:/home/tg/gcc-3.2.3 $ cvs -qz6 -d tg@@herc:/cvs import -I ! -I CVS -b 1.1.2 src/gnu/gcc FSF gcc-3_2_3

We'll try it again. Not gcc 3.3 this time.
@
text
@@
