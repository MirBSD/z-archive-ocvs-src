head	1.2;
access;
symbols
	gcc-3_2_3:1.1.2.1 FSF:1.1.2;
locks; strict;
comment	@# @;


1.2
date	2003.11.04.17.23.54;	author tg;	state dead;
branches;
next	1.1;

1.1
date	2003.10.27.19.29.52;	author tg;	state Exp;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2003.10.27.19.29.52;	author tg;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Yours sincerely, licence auditor, strikes again.


Remove stuff under the so-called "GNU Free Documentation License".

You are actually even breaching the licence when you are
storing GFDL-licenced documents on an encrypted filesystem,
or "even  storing  it  on  a  file-sharing  system  with
non-world-readable permissions", according to the information
found at http://home.twcny.rr.com/nerode/neroden/fdl.html
via Slashdot.

I am thinking whether to adopt the (amended) Debian Social
Contract, and either the DFSG or the OSD (or both) for MirOS.
(see the /. story)

src/gnu/libstdc++:

| The Docs: FDL
|
|    The documentation shipped with the library and made available over the
|    web,   including   the  pages  generated  from  source  comments,  are
|    copyrighted  by  the  Free  Software  Foundation, and placed under the
|    [3]GNU   Free   Documentation   License  version  1.1.  There  are  no
|    Front-Cover Texts, no Back-Cover Texts, and no Invariant Sections.

Of course this doesn't apply to documentation for libstdc++ generated by
ourselfes from GPL'd or LGPL'd files, because the GFDL is incompatible
with both of them.


Hint: if you can dig out older versions of the GNU tools man pages, such
as gcc 3.0 and binutils 2.12/2.13 (for example), which are not yet GFDL
licenced, please give me a hint (I'm not actively searching myself now)
or mail them to me, and be sure I'll commit them, together with a warning
about inactuality.
@
text
@# Take apart bits of HTML and puts them back together again in new and
# fascinating ways.  Copyright (C) 2002 Free Software Foundation, Inc.
# Contributed by Phil Edwards <pme@@gcc.gnu.org>.  Simple two-state automaton
# inspired by Richard Henderson's gcc/mkmap-symver.awk.

# 'file' is the name of the file on stdin
# 'title' is the text to print at the start of the list

BEGIN {
  state = "looking";
  entries = 0;
  printf ("   <li>%s\n", title);
  printf ("   <ul>\n");
}

# Searching for the little table of contents at the top.
state == "looking" && /^<h1>Contents/ {
  state = "entries";
  next;
}

# Ignore everything else up to that point.
state == "looking" {
  next;
}

# An entry in the table of contents.  Pull that line apart.
state == "entries" && /<li>/ {
  extract_info($0);
  next;
}

# End of the list.  Don't bother reading the rest of the file.  (It could
# also contain more <li>'s, so that would be incorrect as well as wasteful.)
state == "entries" && /^<\/ul>/ {
  exit;
}

END {
  for (i = 0; i < entries; i++)
    printf ("     %s\n", entry[i]);
  printf ("   </ul>\n   </li>\n\n");
}

function extract_info(line) {
  # thistarget will be things like "#5" or "elsewhere.html"
  match(line,"href=\".*\"");
  thistarget = substr(line,RSTART+6,RLENGTH-7);

  # take apart the filename
  split(file,X,"/");
  if (thistarget ~ /^#/) {
    # local name, use directory and filename
    target = file thistarget
  } else {
    # different file, only use directory
    target = X[1] "/" thistarget
  }

  # visible text
  gsub("</a></li>","",line);
  start = index(line,"\">") + 2;
  thistext = substr(line,start);

  # Assemble and store the HTML for later output.
  entry[entries++] = "<li><a href=\"" target "\">" thistext "</a></li>"
}

# vim:sw=2
@


1.1
log
@Initial revision
@
text
@@


1.1.2.1
log
@tg@@odem:/home/tg $ bzip2 -dc /data/gcc-3.2.3.tar.bz2 | tar xf -
tg@@odem:/home/tg $ cd gcc-3.2.3/
tg@@odem:/home/tg/gcc-3.2.3 $ find . -name .cvsignore | xargs rm
tg@@odem:/home/tg/gcc-3.2.3 $ rm -rf libjava gcc/java
tg@@odem:/home/tg/gcc-3.2.3 $ rm -rf boehm-gc fastjar libffi libiberty zlib
tg@@odem:/home/tg/gcc-3.2.3 $ cvs -qz6 -d tg@@herc:/cvs import -I ! -I CVS -b 1.1.2 src/gnu/gcc FSF gcc-3_2_3

We'll try it again. Not gcc 3.3 this time.
@
text
@@
