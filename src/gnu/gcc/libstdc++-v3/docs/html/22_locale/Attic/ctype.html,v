head	1.2;
access;
symbols
	gcc-3_2_3:1.1.2.1 FSF:1.1.2;
locks; strict;
comment	@# @;


1.2
date	2003.11.04.17.24.14;	author tg;	state dead;
branches;
next	1.1;

1.1
date	2003.10.27.19.29.56;	author tg;	state Exp;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2003.10.27.19.29.56;	author tg;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Yours sincerely, licence auditor, strikes again.


Remove stuff under the so-called "GNU Free Documentation License".

You are actually even breaching the licence when you are
storing GFDL-licenced documents on an encrypted filesystem,
or "even  storing  it  on  a  file-sharing  system  with
non-world-readable permissions", according to the information
found at http://home.twcny.rr.com/nerode/neroden/fdl.html
via Slashdot.

I am thinking whether to adopt the (amended) Debian Social
Contract, and either the DFSG or the OSD (or both) for MirOS.
(see the /. story)

src/gnu/libstdc++:

| The Docs: FDL
|
|    The documentation shipped with the library and made available over the
|    web,   including   the  pages  generated  from  source  comments,  are
|    copyrighted  by  the  Free  Software  Foundation, and placed under the
|    [3]GNU   Free   Documentation   License  version  1.1.  There  are  no
|    Front-Cover Texts, no Back-Cover Texts, and no Invariant Sections.

Of course this doesn't apply to documentation for libstdc++ generated by
ourselfes from GPL'd or LGPL'd files, because the GFDL is incompatible
with both of them.


Hint: if you can dig out older versions of the GNU tools man pages, such
as gcc 3.0 and binutils 2.12/2.13 (for example), which are not yet GFDL
licenced, please give me a hint (I'm not actively searching myself now)
or mail them to me, and be sure I'll commit them, together with a warning
about inactuality.
@
text
@<?xml version="1.0" encoding="ISO-8859-1"?>
<!DOCTYPE html
          PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
          "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
   <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1" />
   <meta name="AUTHOR" content="bkoz@@redhat.com (Benjamin Kosnik)" />
   <meta name="KEYWORDS" content="HOWTO, libstdc++, GCC, g++, libg++, STL" />
   <meta name="DESCRIPTION" content="Notes on the ctype implementation." />
   <title>Notes on the ctype implementation.</title>
<link rel="StyleSheet" href="../lib3styles.css" />
</head>
<body>
  <h1>
  Notes on the ctype implementation.
  </h1>
<em>
prepared by Benjamin Kosnik (bkoz@@redhat.com) on August 30, 2000
</em>

<h2>
1. Abstract
</h2>
<p>
Woe is me.
</p>

<h2>
2. What the standard says
</h2>


<h2>
3. Problems with &quot;C&quot; ctype : global locales, termination.
</h2>

<p>
For the required specialization codecvt&lt;wchar_t, char, mbstate_t&gt; ,
conversions are made between the internal character set (always UCS4
on GNU/Linux) and whatever the currently selected locale for the
LC_CTYPE category implements.
</p>

<h2>
4. Design
</h2>
The two required specializations are implemented as follows:

<p>
<code>
ctype&lt;char&gt;
</code>
</p>
<p>
This is simple specialization. Implementing this was a piece of cake.
</p>

<p>
<code>
ctype&lt;wchar_t&gt;
</code>
</p>
<p>
This specialization, by specifying all the template parameters, pretty
much ties the hands of implementors. As such, the implementation is
straightforward, involving mcsrtombs for the conversions between char
to wchar_t and wcsrtombs for conversions between wchar_t and char.
</p>

<p>
Neither of these two required specializations deals with Unicode
characters. As such, libstdc++-v3 implements 
</p>

<h2>
5.  Examples
</h2>

<pre>
  typedef ctype&lt;char&gt; cctype;
</pre>

More information can be found in the following testcases:
<ul>
<li> testsuite/22_locale/ctype_char_members.cc    </li>
<li> testsuite/22_locale/ctype_wchar_t_members.cc </li>
</ul>

<h2>
6.  Unresolved Issues
</h2>

<ul>
   <li> how to deal with the global locale issue? </li>

   <li> how to deal with different types than char, wchar_t? </li>

   <li> codecvt/ctype overlap: narrow/widen </li>

   <li> mask typedef in codecvt_base, argument types in codecvt.
   what is know about this type? </li>

   <li> why mask* argument in codecvt? </li>
   
   <li> can this be made (more) generic? is there a simple way to
   straighten out the configure-time mess that is a by-product of
   this class? </li>

   <li> get the ctype&lt;wchar_t&gt;::mask stuff under control. Need to
   make some kind of static table, and not do lookup evertime
   somebody hits the do_is... functions. Too bad we can't just
   redefine mask for ctype&lt;wchar_t&gt; </li>
   
   <li> rename abstract base class. See if just smash-overriding
   is a better approach. Clarify, add sanity to naming. </li>

</ul>


<h2>
7. Acknowledgments
</h2>
Ulrich Drepper for patient answering of late-night questions, skeletal
examples, and C language expertise.

<h2>
8. Bibliography / Referenced Documents
</h2>

Drepper, Ulrich, GNU libc (glibc) 2.2 manual. In particular, Chapters &quot;6. Character Set Handling&quot; and &quot;7 Locales and Internationalization&quot;

<p>
Drepper, Ulrich, Numerous, late-night email correspondence
</p>

<p>
ISO/IEC 14882:1998 Programming languages - C++
</p>

<p>
ISO/IEC 9899:1999 Programming languages - C
</p>

<p>
Langer, Angelika and Klaus Kreft, Standard C++ IOStreams and Locales, Advanced Programmer's Guide and Reference, Addison Wesley Longman, Inc. 2000
</p>

<p>
Stroustrup, Bjarne, Appendix D, The C++ Programming Language, Special Edition, Addison Wesley, Inc. 2000
</p>

<p>
System Interface Definitions, Issue 6 (IEEE Std. 1003.1-200x)
The Open Group/The Institute of Electrical and Electronics Engineers, Inc.
http://www.opennc.org/austin/docreg.html
</p>

</body>
</html>
@


1.1
log
@Initial revision
@
text
@@


1.1.2.1
log
@tg@@odem:/home/tg $ bzip2 -dc /data/gcc-3.2.3.tar.bz2 | tar xf -
tg@@odem:/home/tg $ cd gcc-3.2.3/
tg@@odem:/home/tg/gcc-3.2.3 $ find . -name .cvsignore | xargs rm
tg@@odem:/home/tg/gcc-3.2.3 $ rm -rf libjava gcc/java
tg@@odem:/home/tg/gcc-3.2.3 $ rm -rf boehm-gc fastjar libffi libiberty zlib
tg@@odem:/home/tg/gcc-3.2.3 $ cvs -qz6 -d tg@@herc:/cvs import -I ! -I CVS -b 1.1.2 src/gnu/gcc FSF gcc-3_2_3

We'll try it again. Not gcc 3.3 this time.
@
text
@@
