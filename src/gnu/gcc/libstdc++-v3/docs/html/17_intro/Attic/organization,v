head	1.2;
access;
symbols
	gcc-3_2_3:1.1.2.1 FSF:1.1.2;
locks; strict;
comment	@# @;


1.2
date	2003.11.04.17.24.06;	author tg;	state dead;
branches;
next	1.1;

1.1
date	2003.10.27.19.29.55;	author tg;	state Exp;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2003.10.27.19.29.55;	author tg;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Yours sincerely, licence auditor, strikes again.


Remove stuff under the so-called "GNU Free Documentation License".

You are actually even breaching the licence when you are
storing GFDL-licenced documents on an encrypted filesystem,
or "even  storing  it  on  a  file-sharing  system  with
non-world-readable permissions", according to the information
found at http://home.twcny.rr.com/nerode/neroden/fdl.html
via Slashdot.

I am thinking whether to adopt the (amended) Debian Social
Contract, and either the DFSG or the OSD (or both) for MirOS.
(see the /. story)

src/gnu/libstdc++:

| The Docs: FDL
|
|    The documentation shipped with the library and made available over the
|    web,   including   the  pages  generated  from  source  comments,  are
|    copyrighted  by  the  Free  Software  Foundation, and placed under the
|    [3]GNU   Free   Documentation   License  version  1.1.  There  are  no
|    Front-Cover Texts, no Back-Cover Texts, and no Invariant Sections.

Of course this doesn't apply to documentation for libstdc++ generated by
ourselfes from GPL'd or LGPL'd files, because the GFDL is incompatible
with both of them.


Hint: if you can dig out older versions of the GNU tools man pages, such
as gcc 3.0 and binutils 2.12/2.13 (for example), which are not yet GFDL
licenced, please give me a hint (I'm not actively searching myself now)
or mail them to me, and be sure I'll commit them, together with a warning
about inactuality.
@
text
@20 [lib.utilities]
	<utility>
		namespace rel_ops { operators !=, >, <=, >= }
		struct pair;
		pair binary operators { operators ==, <, !=, >, >=, <= }
	<functional>
		// function objects, or objects with operator() defined
	<memory>
		template<T> class allocator;
		template<> class allocator<void>;
		template<OutI, T> class raw_storage_iterator;
		temporary buffers
		specialized algorithms for uninitialized_{copy, fill, fill_n}
		template<T> class auto_ptr;
	<ctime>
	<cstdlib>
	<cstring>

21 [lib.strings]
	<string>
		template<T> struct char_traits
		template<> struct char_traits<char>
		template<> struct char_traits<wchar_t>
		template<C, T=c_t<T>, A=a<T> > class basic_string;

		typedef basic_string<char> string;
		typedef basic_string<wchar_t> wstring;
		
		template<C, T, A> void swap(string&, string&)
		template<C, T, A> istream& operator>>(istream&, string&);
		template<C, T, A> istream& getline(istream&, string&, C);
		template<C, T, A> istream& getline(istream&, string&);
		template<C, T, A> ostream& operator<<(ostream&, string&);
	<cctype>
	<cwctype>
	<cstring>
	<cwchar>
	<cstdlib>

23 [lib.containers]
	<deque>
	<list>
	<queue>
	<stack>
	<vector>
	<map>
	<set>
	<bitset>

24 [lib.iterators]
	<iterator>

25 [lib.algorithms]
	<algorithm>
		non-modifying sequence operations 
			for_each, find, find_if, find_end, find_first_of, 
			adjacent_find, count, count_if, mismatch, equal, 
			search, search_n
		modifying sequence operations
			copy, copy_backward, swap, swap_ranges, iter_swap, 
			transform, replace, replace_if, replace_copy,
			replace_copy_if, fill, fill_n, generate, generate_n, 
			remove, remove_if, remove_copy, remove_copy_if, unique,
			unique_copy, reverse, reverse_copy, rotate, 
			rotate_copy, random_shuffle
		sorting and related operations
			sort, stable_sort, partial_sort, partial_sort_copy, 
			nth_element, lower_bound, upper_bound, equal_range, 
			binary_search, merge, inplace_merge, includes, 
			set_union, set_intersection, set_difference, 
			set_symmetric_difference, push_heap, pop_heap, 
			make_heap, sort_heap, min, max, min_element, 
			max_element, lexicographical_compare, next_permutation,
			prev_permutation
	<cstdlib>









@


1.1
log
@Initial revision
@
text
@@


1.1.2.1
log
@tg@@odem:/home/tg $ bzip2 -dc /data/gcc-3.2.3.tar.bz2 | tar xf -
tg@@odem:/home/tg $ cd gcc-3.2.3/
tg@@odem:/home/tg/gcc-3.2.3 $ find . -name .cvsignore | xargs rm
tg@@odem:/home/tg/gcc-3.2.3 $ rm -rf libjava gcc/java
tg@@odem:/home/tg/gcc-3.2.3 $ rm -rf boehm-gc fastjar libffi libiberty zlib
tg@@odem:/home/tg/gcc-3.2.3 $ cvs -qz6 -d tg@@herc:/cvs import -I ! -I CVS -b 1.1.2 src/gnu/gcc FSF gcc-3_2_3

We'll try it again. Not gcc 3.3 this time.
@
text
@@
