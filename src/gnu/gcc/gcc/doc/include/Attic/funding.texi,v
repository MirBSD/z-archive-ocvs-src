head	1.3;
access;
symbols
	gcc-3_2_3:1.1.2.1 FSF:1.1.2;
locks; strict;
comment	@# @;


1.3
date	2003.11.04.17.23.36;	author tg;	state dead;
branches;
next	1.2;

1.2
date	2003.10.27.21.09.33;	author tg;	state Exp;
branches;
next	1.1;

1.1
date	2003.10.27.19.24.36;	author tg;	state Exp;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2003.10.27.19.24.36;	author tg;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Yours sincerely, licence auditor, strikes again.


Remove stuff under the so-called "GNU Free Documentation License".

You are actually even breaching the licence when you are
storing GFDL-licenced documents on an encrypted filesystem,
or "even  storing  it  on  a  file-sharing  system  with
non-world-readable permissions", according to the information
found at http://home.twcny.rr.com/nerode/neroden/fdl.html
via Slashdot.

I am thinking whether to adopt the (amended) Debian Social
Contract, and either the DFSG or the OSD (or both) for MirOS.
(see the /. story)

src/gnu/libstdc++:

| The Docs: FDL
|
|    The documentation shipped with the library and made available over the
|    web,   including   the  pages  generated  from  source  comments,  are
|    copyrighted  by  the  Free  Software  Foundation, and placed under the
|    [3]GNU   Free   Documentation   License  version  1.1.  There  are  no
|    Front-Cover Texts, no Back-Cover Texts, and no Invariant Sections.

Of course this doesn't apply to documentation for libstdc++ generated by
ourselfes from GPL'd or LGPL'd files, because the GFDL is incompatible
with both of them.


Hint: if you can dig out older versions of the GNU tools man pages, such
as gcc 3.0 and binutils 2.12/2.13 (for example), which are not yet GFDL
licenced, please give me a hint (I'm not actively searching myself now)
or mail them to me, and be sure I'll commit them, together with a warning
about inactuality.
@
text
@The section on FSF funding has been removed.
Please refer to the website of the Free Software Foundation
for further reference:

http://www.fsfeurope.org/

http://www.fsf.org/
@


1.2
log
@no need to have more than one copy of the licences in the tree.

(legalese: the files have not been modified, but rewritten.)
@
text
@@


1.1
log
@Initial revision
@
text
@d1 3
a3 11
@@ignore
@@c Set file name and title for man page.
@@setfilename fsf-funding
@@settitle Funding Free Software
@@c man begin SEEALSO
gpl(7), gfdl(7).
@@c man end
@@end ignore
@@node Funding
@@c man begin DESCRIPTION
@@unnumbered Funding Free Software
d5 1
a5 4
If you want to have more free software a few years from now, it makes
sense for you to help encourage people to contribute funds for its
development.  The most effective approach known is to encourage
commercial redistributors to donate.
d7 1
a7 43
Users of free software systems can boost the pace of development by
encouraging for-a-fee distributors to donate part of their selling price
to free software developers---the Free Software Foundation, and others.

The way to convince distributors to do this is to demand it and expect
it from them.  So when you compare distributors, judge them partly by
how much they give to free software development.  Show distributors
they must compete to be the one who gives the most.

To make this approach work, you must insist on numbers that you can
compare, such as, ``We will donate ten dollars to the Frobnitz project
for each disk sold.''  Don't be satisfied with a vague promise, such as
``A portion of the profits are donated,'' since it doesn't give a basis
for comparison.

Even a precise fraction ``of the profits from this disk'' is not very
meaningful, since creative accounting and unrelated business decisions
can greatly alter what fraction of the sales price counts as profit.
If the price you pay is $50, ten percent of the profit is probably
less than a dollar; it might be a few cents, or nothing at all.

Some redistributors do development work themselves.  This is useful too;
but to keep everyone honest, you need to inquire how much they do, and
what kind.  Some kinds of development make much more long-term
difference than others.  For example, maintaining a separate version of
a program contributes very little; maintaining the standard version of a
program for the whole community contributes much.  Easy new ports
contribute little, since someone else would surely do them; difficult
ports such as adding a new CPU to the GNU Compiler Collection contribute more;
major new features or packages contribute the most.

By establishing the idea that supporting further development is ``the
proper thing to do'' when distributing free software for a fee, we can
assure a steady flow of resources into making more free software.
@@c man end

@@display
@@c man begin COPYRIGHT
Copyright @@copyright{} 1994 Free Software Foundation, Inc.
Verbatim copying and redistribution of this section is permitted
without royalty; alteration is not permitted.
@@c man end
@@end display
@


1.1.2.1
log
@tg@@odem:/home/tg $ bzip2 -dc /data/gcc-3.2.3.tar.bz2 | tar xf -
tg@@odem:/home/tg $ cd gcc-3.2.3/
tg@@odem:/home/tg/gcc-3.2.3 $ find . -name .cvsignore | xargs rm
tg@@odem:/home/tg/gcc-3.2.3 $ rm -rf libjava gcc/java
tg@@odem:/home/tg/gcc-3.2.3 $ rm -rf boehm-gc fastjar libffi libiberty zlib
tg@@odem:/home/tg/gcc-3.2.3 $ cvs -qz6 -d tg@@herc:/cvs import -I ! -I CVS -b 1.1.2 src/gnu/gcc FSF gcc-3_2_3

We'll try it again. Not gcc 3.3 this time.
@
text
@@
