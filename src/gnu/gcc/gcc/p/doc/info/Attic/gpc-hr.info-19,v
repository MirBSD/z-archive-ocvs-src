head	1.2;
access;
symbols
	gpc-20030830:1.1.2.1 FSF:1.1.2;
locks; strict;
comment	@# @;


1.2
date	2004.01.11.18.16.29;	author tg;	state dead;
branches;
next	1.1;

1.1
date	2004.01.11.18.01.11;	author tg;	state Exp;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2004.01.11.18.01.11;	author tg;	state Exp;
branches;
next	;


desc
@@


1.2
log
@nuke some unused, redundant or generated files
@
text
@This is ../p/doc/info/gpc-hr.info, produced by makeinfo version 4.1
from gpc.texi.

INFO-DIR-SECTION GNU programski alati
START-INFO-DIR-ENTRY
* GPC: (gpc-hr).                GNU Pascal prevodilac (compiler).
END-INFO-DIR-ENTRY
INFO-DIR-SECTION Pojedini alati
START-INFO-DIR-ENTRY
* GPC: (gpc-hr)Pozivanje GPC-a. GNU Pascal prevodilac (compiler).
END-INFO-DIR-ENTRY

   Ova datoteka dokumentira GPC prevodilac (engl. compiler).

   Permission is granted to make and distribute verbatim copies of this
manual provided the copyright notice and this permission notice are
preserved on all copies.

   Copyright (C) 1988-2003 Free Software Foundation, Inc.

   Permission is granted to copy and distribute modified versions of
this manual under the conditions for verbatim copying, provided also
that the sections entitled "GNU General Public License", "The GNU
Project", "The GNU Manifesto" and "Funding for free Software" are
included exactly as in the original, and provided that the entire
resulting derived work is distributed under the terms of a permission
notice identical to this one.

   Permission is granted to copy and distribute translations of this
manual into another language, under the above conditions for modified
versions, except that the sections entitled "GNU General Public
License", "The GNU Project", "The GNU Manifesto" and "Funding for Free
Software" and this permission notice, may be included in translations
approved by the Free Software Foundation instead of in the original
English.


File: gpc-hr.info,  Node: virtual,  Next: Void,  Prev: view,  Up: Reference

virtual
=======

   (Under construction.)

Synopsis
--------

Description
-----------

   Virtual object method declaration.

Conforming to
-------------

   `virtual' is an Object Pascal and a Borland Pascal extension.

Example
-------

See also
--------

   *Note Keywords::.


File: gpc-hr.info,  Node: Void,  Next: while,  Prev: virtual,  Up: Reference

Void
====

   (Under construction.)

Synopsis
--------

     type
       Void  { built-in type }

Description
-----------

Conforming to
-------------

   `Void' is a GNU Pascal extension.

Example
-------

     program VoidDemo;
     
     procedure p (var x: Void);
     begin
     end;
     
     var
       i: Integer;
       s: String (42);
     
     begin
       p (i);
       p (s)
     end.

See also
--------


File: gpc-hr.info,  Node: while,  Next: with,  Prev: Void,  Up: Reference

while
=====

Synopsis
--------

     while BOOLEAN_EXPRESSION do
       STATEMENT

Description
-----------

   The `while' statement declares a loop. For further description see
*Note while Statement::.

Conforming to
-------------

   `while' is defined in ISO 7185 Pascal and supported by all known
Pascal variants.

Example
-------

     program WhileDemo;
     var
       Foo, Bar: Integer;
     begin
       WriteLn ('Enter an descending series of integer numbers.');
       WriteLn ('Terminate by breaking this rule.');
       WriteLn ('Enter start number: ');
       Bar := MaxInt;
       ReadLn (Foo);
       while Foo < Bar do
         begin
           Bar := Foo;
           ReadLn (Foo)
         end;
       WriteLn ('The last number of your series was: ', Bar)
     end.

See also
--------

   *Note Keywords::, *Note repeat Statement::, *Note for Statement::.


File: gpc-hr.info,  Node: with,  Next: Word,  Prev: while,  Up: Reference

with
====

   (Under construction.)

Synopsis
--------

Description
-----------

   Automatic `record' or object field access.

Conforming to
-------------

   `with' is defined in ISO 7185 Pascal and supported by all known
Pascal variants.

Example
-------

   ...

   { Note bar is overwritten by foo.bar }  ...

See also
--------

   *Note Keywords::.


File: gpc-hr.info,  Node: Word,  Next: WordBool,  Prev: with,  Up: Reference

Word
====

Synopsis
--------

     type
       Word = Cardinal;

Description
-----------

   `Word' is the "natural" unsigned integer type in GNU Pascal.  On
most platforms it is 32 bits wide and thus has a range of
`0..4294967295'. It is the same as *Note Cardinal::, introduced for
compatibility with other Pascal compilers.

   `Word' in GNU Pascal is compatible to `unsigned int' in GNU C.

   There are lots of other integer types in GPC, see *Note Integer
Types::.

Conforming to
-------------

   ISO Pascal does not define `Cardinal'.  (However see *Note Subrange
Types::.)

   The `Word' type appears in Borland Pascal and Delphi, too, where it
is a 16-bit unsigned integer type.

Example
-------

     program WordDemo;
     var
       a: Word;
     begin
       a := 42;
       WriteLn (a)
     end.

See also
--------

   *Note Integer Types::, *Note Subrange Types::.


File: gpc-hr.info,  Node: WordBool,  Next: Write,  Prev: Word,  Up: Reference

WordBool
========

Synopsis
--------

     type
       WordBool = Boolean attribute (Size = BitSizeOf (Word));

Description
-----------

   The intrinsic `WordBool' represents boolean values, but occupies the
same memory space as a `Word'.  It is used when you need to define a
parameter or record that conforms to some external library or system
specification.

Conforming to
-------------

   `WordBool' is a Borland Pascal extension.

Example
-------

     program WordBoolDemo;
     var
       a: WordBool;
     begin
       Word (a) := 1;
       if a then WriteLn ('Ord (True) = 1')
     end.

See also
--------

   *Note Boolean (Intrinsic)::, *Note Boolean::, *Note True::, *Note
False::, *Note CBoolean::, *Note ByteBool::, *Note ShortBool::, *Note
MedBool::, *Note LongBool::, *Note LongestBool::.


File: gpc-hr.info,  Node: Write,  Next: WriteLn,  Prev: WordBool,  Up: Reference

Write
=====

   (Under construction.)

Synopsis
--------

     procedure Write (var F: TYPED_FILE; VARIABLE);
   or
     procedure Write (var F: Text; VALUES_AND_FORMAT_SPECIFICATIONS);
   or
     procedure Write (VALUES_AND_FORMAT_SPECIFICATIONS);

Description
-----------

Conforming to
-------------

   `Write' is defined in ISO 7185 Pascal and supported by all known
Pascal variants.

Example
-------

See also
--------


File: gpc-hr.info,  Node: WriteLn,  Next: WriteStr,  Prev: Write,  Up: Reference

WriteLn
=======

   (Under construction.)

Synopsis
--------

     procedure WriteLn (var F: Text; VALUES_AND_FORMAT_SPECIFICATIONS);
   or
     procedure WriteLn (VALUES_AND_FORMAT_SPECIFICATIONS);

Description
-----------

Conforming to
-------------

   `WriteLn' is defined in ISO 7185 Pascal and supported by all known
Pascal variants.

Example
-------

See also
--------


File: gpc-hr.info,  Node: WriteStr,  Next: xor,  Prev: WriteLn,  Up: Reference

WriteStr
========

   (Under construction.)

Synopsis
--------

     procedure WriteStr (var Dest: String; VALUES_AND_FORMAT_SPECIFICATIONS);

Description
-----------

Conforming to
-------------

   `WriteStr' is an ISO 10206 Extended Pascal extension.

Example
-------

See also
--------


File: gpc-hr.info,  Node: xor,  Prev: WriteStr,  Up: Reference

xor
===

Synopsis
--------

     operator xor (operand1, operand2: Boolean) = Result: Boolean;
   or
     operator xor (operand1, operand2: INTEGER_TYPE) = Result: INTEGER_TYPE;
   or
     procedure xor (var operand1: INTEGER_TYPE; operand2: INTEGER_TYPE);

Description
-----------

   In GNU Pascal, `xor' has three built-in meanings:

  1. Logical "exclusive or" between two `Boolean'-type expressions. The
     result of the operation is of `Boolean' type.  (Logical `foo xor
     bar' in fact has the same effect as `foo <> bar'.)

  2. Bitwise "exclusive or" between two integer-type expressions.  The
     result is of the common integer type of both expressions.

  3. Use as a "procedure": `operand1' is "xor"ed bitwise with
     `operand2'; the result is stored in `operand1'.


Conforming to
-------------

   ISO Pascal does not define the `xor' operator; Borland Pascal and
Delphi do.

   Use of `xor' as a "procedure" is a GNU Pascal extension.

Example
-------

     program XorDemo;
     var
       a, b, c: Integer;
     begin
       if (a = 0) xor (b = 0) then
         c := 1  { happens if either `a' or `b' is zero,    }
                 { but not if both are zero or both nonzero }
       else if (a xor b) = 0 then  { bitwise xor }
         c := 2  { happens if a = b }
       else
         xor (c, a)  { same as `c := c xor a' }
     end.

See also
--------

   *Note Keywords::, *Note and::, *Note or::, *Note Operators::.


File: gpc-hr.info,  Node: Keywords,  Next: Support,  Prev: Reference,  Up: Top

Pascalove kljuène rijeèi i operatori podr¾ani u GNU Pascalu.
************************************************************

   Ovo poglavlje daje popis svih kljuènih rijeèi koje GNU Pascal
razumije.

   Kljuène rijeèi su preuzete iz slijedeæih standarda:

   * ISO 7185 Pascal (CP)

   * ISO 10206 Extended Pascal (EP)

   * ANSI preliminarni Object Pascal (OP)

   * Borland Pascal 7.0 (BP)

   * Borland Delphi (BD)

   * Pascal-SC (PXSC, Pascal eXtensions for Scientific Calculations -
     Pascal pro¹irenja za znanstvene proraèune)

   * VAX Pascal (VP)

   * Sun Pascal (SP)

   * Traditional Macintosh Pascal (MP)

   * GNU Pascal pro¹irenja (GPC)

   Tablica ni¾e navodi sve poznate kljuène rijeèi s kratkim opisom
svake.  Link pokazuje prema duljem opisu u referentnom priruèniku.

   Inicijalno (uz kori¹tenje GPC ekstenzija) su sve rijeèi omoguæene.
Samo one oznaèene sa `GPC' su ispravne _samo_ u GPC ekstenzijama.

   Sve kljuène rijeèi koje su specifiène za neke dijalekte (odnosno nisu
oznaèene sa "svi" mogu se takoðer koristiti kao identifikatori (uz
nekoliko izuzetaka, vidi ni¾e). Ipak, one se opæenito vi¹e ne mogu
koristiti kao kljuène rijeèi nakon toga. Tako mo¾ete prevoditi kod iz
dijalekata koji ih koriste kao kljuène rijeèi i kod koji ih koristi kao
identifikatore, tj. ne morate modificirati va¹e korektne ISO 7185
programe da biste ih preveli s GPC-om bez ijedne opcije za dijalekt.
Neke rijeèi se èak mogu koristiti kao kljuène rijeèi i kao
identifikatori paralelno, ukljuèujuæi `forward' (prema ISO 7185
Pascalu), te `near' i `far' (prema Borland Pascalu).

   Izuzeci su:

   bullet `Operator' ne mo¾e biti kori¹ten kao tip, netipizirana
     konstanta niti kao eksportirano suèelje, tj. tamo gdje bi bio `='
     iza njega (ako nije zabranjen kao kljuèna rijeè ili opcijom
     dijalekta, vidi ni¾e).  Ovo je zbog konflikta s definicijom
     operatora `='. (Mo¾e se koristiti kao tipizirana konstanta, ali bi
     moglo stvoriti konfuziju ako je poslije uèinite netipiziranom,
     dakle koristiti vrlo pa¾ljivo.)

   bullet Prva naredba nakon `initialization' (Delphi-specifièna
     inicijalizacija) ne smije zapoèeti sa `('. (Naredbe koje zapoèinju
     s `(' su ionako rijetke, ali ne i nemoguæe.) Ovo ne ogranièava
     kori¹tenje `Initialization' kao identifikatora.

   bullet Slijedeæe kljuène rijeèi ne mogu biti kori¹tene _neposredno_
     nakon `import' dijela: `uses', `implementation', `operator',
     `constructor', `destructor'. Tu poma¾e kori¹tenje `uses' umjesto
     `import', ili stavljanje druge deklaracije izmeðu `import' i
     problematiène kljuène rijeèi.


   Opcija dijalekta onemoguæuje sve kljuène rijeèi koje ne pripadaju
dotiènom dijalektu. Osim toga, svaka kljuèna rijeè mo¾e biti omoguæena
i onemoguæena opcijama prevodioca `{$enable-keyword}' i
`{$disable-keyword}'.

   (Napomena: Tablica nije prevedena jer se generira automatski, kao i
zbog struènosti termina i izraza, za koje je te¹ko pronaæi adekvatni
prijevod).

absolute (BP, BD) (*note absolute::)
     overloaded variable declaration

abstract (OP) (*note abstract::)
     abstract object type or method declaration

all (all) (*note all::)
     `export' (*note export::) extension (`export foo = all')

and (any) (*note and::)
     Boolean or bitwise `and' operator or part of the `and then' (*note
     and then::) operator

and_then (EP, OP) (*note and_then::)
     short-circuit Boolean `and' (*note and::) operator

array (any) (*note array::)
     array type declaration

as (OP, BD) (*note as::)
     object type membership test and conversion

asm (BP, BD) (*note asm::)
     GNU style inline assembler code

asmname (GPC) (*note asmname::)
     DEPRECATED! linker name of routines and variables

attribute (GPC) (*note attribute::)
     attributes of routines and variables

begin (any) (*note begin::)
     begin of a code block, part of a `to begin do' (*note to begin
     do::) module constructor

bindable (EP, OP) (*note bindable::)
     external bindability of files

c (GPC) (*note c::)
     DEPRECATED! declaration of external routine

case (any) (*note case::)
     multi-branch conditional statement or variant `record' (*note
     record::) type

c_language (GPC) (*note c_language::)
     DEPRECATED! declaration of external routine

class (OP, BD) (*note class::)
     OOE/Delphi style object class (not yet implemented)

const (any) (*note const::)
     constant declaration or constant parameter declaration

constructor (OP, BP, BD) (*note constructor::)
     object constructor

destructor (OP, BP, BD) (*note destructor::)
     object destructor

div (any) (*note div::)
     integer division operator

do (any) (*note do::)
     part of a `while' (*note while::) or `for' (*note for::) loop, a
     `with' (*note with::) statement, or a `to begin do' (*note to
     begin do::) or `to end do' (*note to end do::) module constructor
     or destructor

downto (any) (*note downto::)
     part of a `for' (*note for::) loop counting downwards

else (any) (*note else::)
     alternative part of an `if' (*note if::) statement, default `case'
     (*note case::) branch or part of the `or else' (*note or else::)
     operator

end (any) (*note end::)
     end of a code block, end of a `case' (*note case::) statement, end
     of a `record' (*note record::) or object declaration, part of a
     `to end do' (*note to end do::) module destructor

export (export) (*note export::)
     module interface export

exports (BP, BD) (*note exports::)
     library export (not yet implemented)

external (UCSD, BP, BD, MP) (*note external::)
     declaration of external object

far (BP, BD) (*note far::)
     BP directive (ignored)

file (any) (*note file::)
     non-text file type declaration

finalization (BD) (*note finalization::)
     unit finalization

for (any) (*note for::)
     loop statement where the number of loops is known in advance

forward (any) (*note forward::)
     declaration of a routine whose definition follows below

function (any) (*note function::)
     function declaration

goto (any) (*note goto::)
     statement to jump to a `label' (*note label::)

if (any) (*note if::)
     conditional statement

implementation (all except CP) (*note implementation::)
     module or unit implementation part

import (EP, OP) (*note import::)
     module interface import

in (any) (*note in::)
     set membership test or part of a `for' (*note for::) loop
     iterating through sets

inherited (OP, BP, BD, MP) (*note inherited::)
     reference to methods of ancestor object types

initialization (BD) (*note initialization::)
     unit initialization

interface (interface) (*note interface::)
     module or unit interface part

interrupt (BP, BD) (*note interrupt::)
     interrupt handler declaration (not yet implemented)

is (OP, BD) (*note is::)
     object type membership test

label (any) (*note label::)
     label declaration for a `goto' (*note goto::) statement

library (BP, BD) (*note library::)
     library declaration (not yet implemented)

mod (any) (*note mod::)
     integer remainder operator

module (module) (*note module::)
     EP style or PXSC style module

name (name) (*note name::)
     linker name

near (BP, BD) (*note near::)
     BP directive (ignored)

nil (any) (*note nil::)
     reserved value for unassigned pointers

not (any) (*note not::)
     Boolean or bitwise negation operator

object (BP, BD, MP) (*note object::)
     BP style object declaration

of (any) (*note of::)
     part of an `array' (*note array::), `set' (*note set::) or typed
     `file' (*note file::) type declaration, a `case' (*note case::)
     statement, a variant `record' (*note record::) type or a `type of'
     (*note type of::) type inquiry

only (EP, OP) (*note only::)
     import specification

operator (PXSC) (*note operator::)
     operator declaration

or (any) (*note or::)
     Boolean or bitwise `or' operator or part of the `or else' (*note
     or else::) operator

or_else (EP, OP) (*note or_else::)
     short-circuit Boolean `or' (*note or::) operator

otherwise (EP, OP, MP) (*note otherwise::)
     default `case' (*note case::) branch

packed (any) (*note packed::)
     declaration of packed `record' (*note record::) or `array' (*note
     array::) types, also packed ordinal subranges

pow (EP, OP) (*note pow::)
     exponentiation operator with integer exponent

private (private) (*note private::)
     private object fields

procedure (any) (*note procedure::)
     procedure declaration

program (any) (*note program::)
     start of a Pascal program

property (OP, BD) (*note property::)
     object properties (not yet implemented)

protected (protected) (*note protected::)
     read-only formal parameters or module export and protected object
     fields

public (public) (*note public::)
     public object fields

published (published) (*note published::)
     published object fields

qualified (qualified) (*note qualified::)
     import specification

record (any) (*note record::)
     structured type declaration

repeat (any) (*note repeat::)
     loop statement

resident (BP, BD) (*note resident::)
     library export specification (not yet implemented)

restricted (EP, OP) (*note restricted::)
     restricted type specification

segment (UCSD) (*note segment::)
     segment specification (not yet implemented)

set (any) (*note set::)
     set type declaration

shl (BP, BD, MP) (*note shl::)
     bitwise left shift operator

shr (BP, BD, MP) (*note shr::)
     bitwise right shift operator

then (any) (*note then::)
     part of an `if' (*note if::) statement or part of the `and then'
     (*note and then::) operator

to (any) (*note to::)
     part of a `for' (*note for::) loop counting upwards or a `to begin
     do' (*note to begin do::) or `to end do' (*note to end do::)
     module constructor or destructor

type (any) (*note type::)
     type declaration or part of a `type of' (*note type of::) type
     inquiry

unit (UCSD, BP, BD, MP) (*note unit::)
     UCSD and BP style unit declaration

until (any) (*note until::)
     end of a `repeat' (*note repeat::) statement

uses (UCSD, BP, BD, MP) (*note uses::)
     unit import

value (EP, OP) (*note value::)
     variable/type initializer

var (any) (*note var::)
     variable declaration or reference parameter declaration

view (OP) (*note view::)
     object class view (not yet implemented)

virtual (OP, BP, BD, MP) (*note virtual::)
     virtual object method declaration

while (any) (*note while::)
     loop statement

with (any) (*note with::)
     automatic `record' (*note record::) or object field access

xor (BP, BD, MP) (*note xor::)
     Boolean or bitwise `exclusive or' operator


File: gpc-hr.info,  Node: Support,  Next: To Do,  Prev: Keywords,  Up: Top

Gdje dobiti podr¹ku za GNU Pascal; kako prijaviti bugove
********************************************************

   (Podr¹ka)

   Ovdje mo¾ete pronaæi informaciju o tome gdje potra¾iti najsvje¾ije
informacije o GPC-u, kako dobiti podr¹ku (profesionalnu ili
dobrovoljnu), kako koristiti GPC-ovu test kolekciju, i kako
prijavljivati nove bugove s na koje bi mogli naiæi.

   Ako imate problema s GNU Pascalom, molimo pogledajte relevantne
dijelove GPC priruènika. Najnovija verzija priruènika je na
raspolaganju na adresi `http://www.gnu-pascal.de/gpc-hr/index.html' za
online pregledavanje.  Takoðer mo¾ete napraviti download kompletnog
priruènika u HTML formatu (tar.bz2) (`gpc-html.tar.bz2' on GPC's WWW
home page).  Ovaj je priruènik takoðer dostupan i u DVI formatu (bzip2)
(`gpc.dvi.bz2' on GPC's WWW home page) i PostScript formatu (bzip2)
(`gpc.ps.bz2' on GPC's WWW home page) za ispis na ¹tampaè.

   Ako vam priruènik ne poma¾e, evo ¹to vam predla¾emo:

*Note FAQ::                Provjerite u GPC FAQ-u

* Menu:

* Mailing List::           Pridru¾ite se GPC mailing listi
* Arhive mailing listi::   Pogledajte u arhivama mailing liste
* Newsgroups::             Pitajte na newsgroupi (grupa vijesti na USENETu)
* Profesionalna podr¹ka::  Potra¾ite individualnu podr¹ku za GPC
* Krahovi prevodioca::     Kad se compiler skr¹i ...
* Reporting Bugs::         Pronaðite kako prijaviti GPC bugove
* Testing::                Testiranje - ako imate GPC source, nauèite kako
                           pokrenuti Test Suite (kolekciju testova)
                           da testirate bugove koje prijavljujete.


File: gpc-hr.info,  Node: Mailing List,  Next: Arhive mailing listi,  Up: Support

GPC mailing lista
=================

   (Mailing lista)

   Postoji posebna mailing lista posveæena GNU Pascalu. Mo¾ete pisati
na listu, npr. ako imate probleme s instaliranjem GPC-a ili ako ste
na¹li problem u vezi s GPC-om (molim pogledajte *Note Reporting Bugs::).
Mo¾ete takoðer diskutirati i davati sugestije za pobolj¹anje GPC-a i,
vrlo dobrodo¹li, ponuditi svoju pomoæ ili doprinijeti kod,
dokumentaciju ili drugi rad. Poruke na listu bi trebale biti na
engleskom.

   Da biste se pretplatili na listu, po¹aljite naredbu
     subscribe gpc va¹a@@email.adresa
   u tijelu poruke na <majordomo@@gnu.de> (*ne* na `gpc@@gnu.de'!).
Subject: polje poruke se ignorira. (Molimo zamijenite
`va¹a@@email.adresa' va¹om pravom email adresom.)  Za vi¹e informacija,
po¹aljite redak `help' na <majordomo@@gnu.de>.

   Nakon prijavljivanja na listu, mo¾ete poslati poruku na mailing listu
¹aljuæi email na adresu liste <gpc@@gnu.de> kao da je rijeè o osobi.

   Za napu¹tanje mailing liste, po¹aljite naredbu
     unsubscribe gpc va¹a@@email.adresa
   na <majordomo@@gnu.de>.

   Postoji posebna lista za diskutiranje o GPC dokumentaciji,
<gpc-doc@@gnu.de>. Za prijavljivanje, po¹aljite naredbu
     subscribe gpc-doc your@@email.address
   na <majordomo@@gnu.de>.

   Postoji jo¹ jedna (malog prometa) najavna lista,
<gpc-announce@@gnu.de> na koju se mo¾ete pretplatiti da biste ostali
informirani. Da se pretplatite na listu, napi¹ite email s
     subscribe gpc-announce va¹a@@email.adresa
   u tijelu poruke na <majordomo@@gnu.de>. Ako biste ¾eljeli najaviti
doprinos, servis ili dogaðaj u relaciji s GPC-om, pozvani ste da
¹aljete na ovu listu radije nego na `gpc@@gnu.de', ali molimo vas ne
koristite najavnu listu za pitanja ili diskusije.  Molimo uoèite da se
sva po¹ta pristigla na najavnu listu preusmjerava takoðer i na
regularnu listu, tako da se neæete morati pretplatiti na obje liste u
sluèaju da ne ¾elite ni¹ta propustiti. Zbog istog razloga, molimo ne
cross-postajte poruke na obje liste.

   Postoji i mailing lista za njemaèko govorno podruèje,
<gpc-de@@gnu.de>. Za pretplaæivanje po¹aljite naredbu
     subscribe gpc-de va¹a@@email.adresa
   u tijelu poruke na <majordomo@@gnu.de> (vrijede natuknice odozgo).

   Ljudskog moderatora mo¾ete kontaktirati na _gpc-owner@@gnu.de_.


File: gpc-hr.info,  Node: Arhive mailing listi,  Next: Newsgroups,  Prev: Mailing List,  Up: Support

Arhive GPC mailing listi
========================

   Mo¾da se o va¹em problemu veæ diskutiralo na listi. Postoji
pretra¾iva arhiva mailing liste na WWW-u. Mo¾e se pregledavati ili
pretra¾ivati na
     `http://www.gnu-pascal.de/crystal/gpc/en/' (engleski)

   Arhiva liste o dokumentaciji je na
     `http://www.gnu-pascal.de/crystal/gpc-doc/en/'

   Arhiva liste najavne liste je na
     `http://www.gnu-pascal.de/crystal/gpc-announce/en/'

   Arhiva njemaèke GPC liste je na
     `http://www.gnu-pascal.de/crystal/gpc-de/de/' (njemaèki)


File: gpc-hr.info,  Node: Newsgroups,  Next: Profesionalna podr¹ka,  Prev: Arhive mailing listi,  Up: Support

Newsgroupe (grupe USENET vijesti) relevantne za GPC
===================================================

   Za dobivanje podr¹ke, mo¾ete takoðer pitati Usenet grupu vijesti za
pomoæ. Postoji vi¹e grupa u vezi s Pascalom, ali nijedna nije
specijalizirana samo za GNU Pascal, pa koristite onu koja najbolje
odgovara va¹em problemu. Za opæa pitanja o Pascalu, preporuèujemo
slijedeæu:

`news://comp.lang.pascal.misc'       Pascal in general and ungrouped
                                     Pascals.

   Pitanja glede Pascal sintakse mogu biti zgodna u:

`news://comp.lang.pascal.ansi-iso'   Pascal according to ANSI and ISO
                                     standards.

   Slijedeæa grupa je skloni¹te za poèetnike, odgovarajuæi pitanja koja
se mogu primijeniti za gotovo bilo koji Pascal. Meðutim, ako imate
GPC-specifièno pitanje ne postavljajte ga tamo - koristite GPC mailing
listu. A i kada ste u nedoumici koristite GPC maling listu.

`news://comp.lang.pascal.borland'    Borland Pascal questions.

   Ne zaboravite vratiti nazad ¹to ste pribavili. Nitko od nas ne
dobiva novac za odgovaranje na va¹a pitanja (ukoliko nas sami ne
platite). Molimo dajte svoj udio odgovarajuæi na pitanja drugih.


File: gpc-hr.info,  Node: Profesionalna podr¹ka,  Next: Krahovi prevodioca,  Prev: Newsgroups,  Up: Support

Gdje naæi profesionalnu podr¹ku za GPC
======================================

   GPC je slobodan software i dolazi *bez ikakve garancije*.

   Ako ¾elite potra¾iti profesionalnu podr¹ku, mo¾ete unajmiti pojedinca
ili poduzeæe koja pru¾a takvu uslugu.

   G-N-U GmbH (http://www.g-n-u.de) izvodi velike dijelove razvoja GNU
Pascala. Ova kompanija nudi specijalnu podr¹ku za GPC i mo¾e se
kontaktirati na <info@@g-n-u.de>.

   Vi¹e opæenito, za pronala¾enje kompanije ili pojedinca koji nudi
podr¹ku i ostale savjetodavne usluge za free software, pogledajte u GNU
Service Directory (http://www.gnu.org/prep/service.html).


File: gpc-hr.info,  Node: Krahovi prevodioca,  Next: Reporting Bugs,  Prev: Profesionalna podr¹ka,  Up: Support

Kad se compiler skr¹i ...
=========================

   Ako se prevodilac skr¹i u radu, otkrili ste bug. Pouzdan prevodilac
se nikad ne ru¹i. Da biste ljudima koji odr¾avaju pomogli ispraviti
bug, va¾no je da nam po¹aljete problem report.

   Ako ste na Unixu, mo¾ete pronaæi gdje se prevodilac sru¹io ako
omoguæite coredumpove, zatim uèitate prevodilac (`gpc1') plus core
datoteku u debugger (`gdb /va¹_put_ovdje/gpc1 core'), da bi se dobio
ispis stoga (engl. stacktrace). Ukljuèite ovaj ispis stoga u svoju
prijavu buga.


File: gpc-hr.info,  Node: Reporting Bugs,  Next: Testing,  Prev: Krahovi prevodioca,  Up: Support

Kako prijaviti GPC bug
======================

   (Prijava bugova)

   Ako se susretnete s bugom u GPC-u, molimo provjerite da li je to
jedan od veæ poznatih bugova (*note Known Bugs::). Ako nije, molimo
prijavite ga na GNU Pascal mailing listu (*note Mailing List::). Na taj
naèin, oni uvijek sti¾u odr¾avateljima. Molimo primijetite slijedeæe
toèke.

   * Molimo vas po¹aljite deskripciju problema. Nastojte dati koliko
     god je vi¹e informacija moguæe, s punim tekstom eventualnih poruka
     o gre¹kama s kojima ste se susreli, ili opisom kako se neki izlaz
     razlikuje od oèekivanoga. Uvijek specificirajte operacijski sustav
     i tip stroja (npr. izlaz `uname -a' ako niste sigurni) kao i
     verziju GPC-a koju æete dobiti ako otkucate `gpc -v'.

   * Dobar èlanak o podno¹enju prijave buga mo¾e se naæi na
     `http://www.chiark.greenend.org.uk/~sgtatham/bugs.html' ili
     `http://freshmeat.net/news/2000/02/26/951627540.html'

     Jo¹ jedan dobar èlanak "How To Ask Questions The Smart Way"
     (Postavljati pitanja na mudar naèin) je na raspolaganju na adresi
     `http://www.catb.org/~esr/faqs/smart-questions.html'


   Ako je problem u samom prevodiocu, ne u procesu instalacije ili
neèem poput toga, molimo prilo¾ite test program koji reproducira
problem, i uoèite donje natuknice. Mo¾ete takoðer slati test programe
za moguænosti koje rade u GPC-u kako bi osigurali da se neæe pokvariti
u buduæim izdanjima.

   * Test program treba biti ¹to je moguæe kraæi, ali *u svakom
     sluèaju*, molimo po¹aljite *kompletan* program i *uèinite
     sigurnim* da isti jo¹ uvijek reproducira problem prije nego ¹to
     nam ga po¹aljete. Preèesto, korisnici su nam slali kod koji je
     sadr¾avao oèite sintaksne pogre¹ke daleko prije aktualnog
     problema, ili samo fragmente koda o kojima smo mogli samo izdaleka
     nagaðati. To je neproduktivno za nas, a i vama ne poma¾e da
     rije¹ite svoj problem.


   Preferirani oblik test programa je forma koju automatizirani GPC
Test Suite razumije. Molimo, ako je ikako moguæe, ¹aljite svoje test
programe u ovoj formi ¹to bi trebalo biti lako za uèiniti, kako mi ne
bi morali gubiti vrijeme da ih prilagodimo toj formi, te da se mo¾emo
koncentrirati na rje¹enje problema.

   * Datoteka koja sadr¾i glavni program _mora_ imati ime koje zavr¹ava
     sa `.pas' i mora sadr¾avati rijeè `program' (case-insensitive, tj.
     veliko i odgovarajuæe malo slovo se smatraju istim) te `;' u istom
     retku da uopæe bude prepoznata od test skripte. Ostale datoteke
     koje zavr¹avaju sa `.pas' (npr. moduli i jedinice ili podatke koje
     program treba) ne smiju to sadr¾avati.

   * Kako Test Suite mora raditi vrlo ... hmph ... èudnim operacijskim
     sustavima, takoðer imena se datoteka moraju razlikovati u prvih
     osam (8) znakova (case-insensitive) i ne bi smjela sadr¾avati
     ni¹ta osim slova, znamenki, crtice, podvlake (engl. underscore) i
     jedne toèke. Dalje, sve pomoæne datoteke (jedinice (unit), moduli,
     include i podatkovne datoteke) ne smije imati imena du¾a od "8+3"
     znakova; isto se odnosi i na imena suèelja jedinica/modula (jer æe
     GPC kreirati `.gpi' imena datoteka bazirana na njihovim imenima).
     Èesto je dobra ideja koristiti vlastito ime, nadimak ili inicijale
     iza èega slijedi broj kao ime datoteke.

   * Ako va¹ test program zahtijeva nake jedinice (units) ili module,
     nemojte im davati (odnosno njihovim 'interface' suèeljima u sluèaju
     modula) uobièajena imena puput `Test', `Foo' ili `MyUnit', osim
     ako imate vrlo posebne razloge za to, buduæi da bi se mogli
     pojaviti suptilni problemi ako nekoliko testnih programa koristi
     isto ime. Umjesto toga, preporuèen pristup je da se imenima
     jedinica/modula/interface-a nadoda prefiks (predmetak) - ime
     glavnog testnog programa ili njegova skraæenica (to je neophodno
     zbog restrikcija na imenima datoteka). Nadalje, molimo
     izbjegavajte kori¹tenje jedinica i modula uopæe, ako bug nije
     specifièan za njih; kako bi se test odr¾avao ¹to je moguæe
     jednostavnijim.

   * Test program, kada se izvr¹ava, treba proizvesti liniju izlaza
     koja se sastoji od niza `OK' (praæenog znakom za novi red,
     newline) ako je sve pro¹lo kao ¹to je oèekivano, ili bilo ¹to
     drugo (npr. `failed', potencijalno praæeno razlogom pada na testu)
     ako je ne¹to po¹lo krivo. U tom posljednjem sluèaju mogli biste
     po¾eljeti ispisati dodatnu informaciju kao ¹to su vrijednosti
     va¾nih varijabli ili indikaciju u kom je dijelu do¹lo do pogre¹ke
     u programu ako se to moglo desiti na nekoliko moguæih mjesta.

   * Meðutim, ako je program namijenjen da provjeri da li GPC prepoznaje
     (namjernu) gre¹ku u programu, stavite niz `WRONG' negdje u test
     programu, najbolje u komentaru u retku koji sadr¾i namjernu
     pogre¹ku. `WRONG' testovi æe biti pokrenuti s opcijom `-w' da se
     potisnu sva upozorenja, tako da æe samo prave pogre¹ke biti
     detektirane.

     *Primijeti:* Dok je moguæe kombinirati nekoliko `OK' testova u
     jednom test programu (ako uèinite sigurnim da ispisuje `OK' samo
     ako svi testovi uspje¹no proðu), ne mo¾ete staviti nekoliko
     `WRONG' testova u isti program. Razlog tome je ¹to prevodilac neæe
     uspjeti prevoðenje (i test æe se smatrati uspje¹nim) veæ i kad se
     pojavi samo `jedna' od oèekivanih gre¹aka. Dakle, za `WRONG'
     testove, postavite samo jednu provjeru u testni program. Takoðer,
     nastojite odr¾avati takav test program ¹to je moguæe
     jednostavnijim, zbog izbjegavanja moguænosti da ne bi pao zbog
     drugih problema (i zbog toga bi test pogre¹no bio smatran
     uspje¹nim).

   * Ako bi test trebao samo provocirati GPC upozorenje, koristite
     `WARN' umjesto `WRONG'. Ovo æe pokrenuti test bez `-w', ali sa
     `-Werror'. Meðutim, ovakvi testovi æe se takoðer èiniti uspje¹nim
     i ako proizvode gre¹ku kod prevoðenja, ne samo kod upozorenja.
     Stoga, kod provjeravanja za upozorenja, èesto je dobra ideja
     prilo¾iti komplemetarni test (za kojeg se oèekuje da uspije) i sa
     `-w' u `FLAG' ili direktivi prevodioca `{$W-}' da bi se osiguralo
     da je rijeè zaista samo o upozorenju, a ne o pogre¹ci.

   * Za test koji reproducira postojeæi problem (za koji se ne oèekuje
     da æe se brzo rije¹iti), molimo stavite komentar na vrh datoteke
     koji opisuje problem u par rijeèi, i zapoènite ga sa `BUG'. Ovo se
     ne tra¾i od test skripti, to je samo da se uèini lak¹im onima koji
     æe poku¹ati rije¹iti problem kako bi se isprve i odmah vidjelo ¹to
     test ¾eli pokazati. Testovi za nove (planirane) znaèajke ne bi
     smjeli reæi `BUG'.


   Slijedeæe specijalne moguænosti testne aplikacije mogu biti korisne
za konstruiranje pone¹to neuobièajenih testova:

   * Ako je oèekivani ispis programa ne¹to osim `OK', stavite to u
     datoteku `<basename>.out' (gdje je `<basename>' ime testnog
     programa bez `.pas' nastavka).

   * Ako program oèekuje neki ulaz, stavite ga u datoteku
     `<basename>.in'. Biti æe automatski preusmjerena na standardni
     ulaz programa.

   * Ako test treba neke specijalne opcije proslijeðene GPC naredbenoj
     liniji, stavite ih u komentar sa prefiksom `FLAG', npr.

          { FLAG --extended-pascal -Werror }

   * Ime izvorne datoteke test programa bit æe proslijeðeno kao prvi
     argument naredbene linije do test programa koji se izvr¹ava.

   * Ako test treba biti pokrenut na specijalan naèin, mo¾ete popratiti
     program sa skriptom `<basename>.run' koja æe pokrenuti stvarni
     test nakon ¹to je testni program preveden. Ova skripta æe biti
     pokrenuta od `sh' (bez obzira na prvu liniju). Da bi bila
     prenosiva, trebala bi koristiti samo standardne alate i znaèajke
     prisutne u svim `sh' kompatibilnim ljuskama (npr. `ash', `bash',
     ali ne neophodno i `csh'). Ime izvorne datoteke test programa æe
     biti proslijeðeno kao prvi argument komandnoj liniji za izvr¹enje
     skripte u tom sluèaju. Prevedena datoteka se uvijek naziva
     `./a.out' na veæini sistema, ali, npr. `./a.exe' na Cygwin
     platformi. Environment varijabla `A_OUT' sadr¾i ime (npr. `a.out'
     ili `a.exe', tako da uvijek mo¾ete pozvati program sa
     `./"$A_OUT"').

   * Ako test treba biti preveden na specijalan naèin (npr. da se odluèi
     da li preskoèiti test), smjestite naredbe u skriptu (najbolje
     nazvanu `<basename>.cmp'), i staviti ime datoteke sa skriptom u
     komentar ispred èega dolazi `COMPILE-CMD:' u source test programa.
     Skripta za prevoðenje æe biti pokrenuta *umjesto* prevodioca i
     bilo koje druge akcije poduzete za taj test program, tako da vam
     to daje maksimalnu fleksibilnost u èemu god ¹to trebate napraviti.
     Skripta æe biti pokrenuta od `sh' (bez obzira na njenu prvu
     liniju). Da bi bila prenosiva, najbolje da koristi samo standardne
     alatke i znaèajke `sh' kompatibilnih ljusaka (vidi gore).  Prvi
     argument naredbene linije proslijeðen skripti za prevoðenje bit æe
     prevodilac kojeg treba koristiti, ukljuèivo sve opcije. Drugi
     argument bit æe ime izvorne datoteke sa test programom.  Za neke
     tipiène testove postoje standardne skripte za prevoðenje, npr.
     `asm.cmp' koje æe preskoèiti test osim ako se pokrene na platformi
     podr¾anoj za nekoliko testova koji æe sadr¾avati `asm' naredbe.
     Naravno, opæenito je bolje izbjegavati situaciju da se mora
     koristiti takve skripte kad je god moguæe.

   * U nekim biste sluèajevima mogli po¾eljeti napisati "posluèajene"
     testove.  Ovo se u normalnim uvjetima ne preporuèa, jer èini
     probleme te¾im za reproducirati, ali ponekad mo¾e biti korisno
     (npr. kad ¾elimo pokriti velik raspon parametara). U takvim
     sluèajevima mo¾e se koristiti slijedeæa strategija:

          ...
          
          uses GPC;
          
          var
            RandomSeed: Integer;
          
          begin
            RandomSeed := Random (MaxInt);
            SeedRandom (RandomSeed);
          
            ... { va¹i normalni testovi ovdje }
          
            { kad se ispisuje poruka o gre¹ci: }
            if ... then
              begin
                WriteLn ('failed (', RandomSeed, ') ',
                         ... { mo¾ebitne dodatne informacije } );
                Halt
              end
          end.

     Ovo je pomalo neprirodno jer se pseudo-sluèajni broj koristi za
     (ponovno) postavi 'sjeme' (inicijalno stanje) pseudo-sluèajnog
     generatora, ali trenutno nema naèina da se dobavi interno stanje
     istog (i zapravo niti nije predstavljeno jednim brojem, veæ stanjem
     jednog polja).

     Dajuæi vrijednost `RandomSeed' u poruci o gre¹ci, bit æe lako
     reproducirati problem stavljajuæi ovu vrijednost umesto `Random
     (MaxInt)'.  Samo budite sigurni da ste ispisali ovu vrijednost u
     *svakoj* poruci o bugu koju test program mo¾e proizvesti.



File: gpc-hr.info,  Node: Testing,  Prev: Reporting Bugs,  Up: Support

Pokretanje GPC Test Suite kolekcije testova
===========================================

   (Testiranje).

   _Opaska:_ Ako imate instaliranu binarnu distribuciju, obièno nemate
Test Suite instaliran (mo¾ete napraviti download source distribucije da
ga pribavite, meðutim), tako da se ovaj odlomak ne odnosi na vas. Ipak,
jo¹ uvijek mo¾ete pronaæi u odlomku `Prilaganje programa u Test Suite'
kako prijaviti GPC bugove u obliku novih test programa kako bismo ih
mogli ispraviti ¹to je prije moguæe.

   Datoteke u test direktoriju i podstablima slu¾e samo za testiranje
GPC-a i ne bi se smjele koristiti za druge svrhe.

   Opaska: Neki od testova nemaju smisla na svim sistemima. Oni su
opremljeni provjerama i bit æe preskoèeni ako pronaðu sistem
nepogodnim. Preskoèeni testovi *ne znaèe* GPC bug, osim ako mislite da
bi pojedini test imao smisla na va¹em sistemu.

   * Da se pokrene èitava test kolekcija, otipkajte `make' u test
     direktoriju (ili `make check' u `p' objektnom direktoriju nakon
     izgradnje GPC-a).

   * Ispis æe pokazati sve uoèene gre¹ke (po¾eljno nijednu) i preskoèene
     testove, i konaèno sa¾etak dajuæi broj uspje¹nih, testova s
     gre¹kom i preskoèenih testova. Svaki test s gre¹kom znaèi bug u
     GPC-u koji bi trebao biti prijavljen na GPC mailing listu,
     <gpc@@gnu.de>.  Ne zaboravite napomenuti operacijski sustav na
     kojem ste pokrenuli testove i ostale relevantne informacije o tome
     ¹to ste radili.

   * Takoðer mo¾ete otipkati `make pascal.check-long' da dobijete dugi
     ispis koji je niz imena datoteka praæenih sa `OK' za uspje¹ne
     testove, `SKIPPED' za preskoèene testove (oboje velikim slovima),
     i ni¹ta dodatno za testove koji su pali.

   * Da pokrenete samo odreðene testove, mo¾ete otipkati ne¹to poput
     `make MASK="foo[1-7]*.pas"' ili `make MASK="foo42.pas"
     pascal.check-long'.

   * Da poèistite rezultate testova, otipkajte `make clean'.



File: gpc-hr.info,  Node: To Do,  Next: Internals,  Prev: Support,  Up: Top

The GNU Pascal To-Do List.
**************************

   This is the To-Do list for the GNU Pascal Compiler.

   The GNU Pascal development team is constantly working on making GNU
Pascal more reliable and more comfortable. However, there are some
known bugs which will take some time to be fixed (any help welcome!),
and we do not want to hide them from you. You might also be interested
to know what features are planned to be implemented in the future. This
list is meant to keep track of the known bugs and wanted features of
GPC.

   If you want to report a new bug or suggest a new feature, the best
way to do it is in the mailing list. This way, other GPC users can
provide additional ideas, perhaps work-arounds for bugs, and the GPC
maintainers can sooner start to think about how to solve the problem.
The GPC mailing list is <gpc@@gnu.de>. To subscribe, send the command
`subscribe gpc your@@email.address' in the body of a mail to
<majordomo@@gnu.de> (the subject is ignored). An archive of the mailing
list can be found at `http://www.gnu-pascal.de/crystal/gpc/en/'.

   The list changes regularly. The present version refers to the
current GPC snapshot, 20030830.

   This list is part of the GNU Pascal Manual, included in GPC
distributions and snapshots. You can always browse the most current
version of the list on GPC's WWW page. If you check the To-Do list
regularly you can decide if and when to try a new snapshort.

* Menu:

* Known Bugs::        Known bugs in GPC
* Planned Features::  Features planned for GPC
* Fixed Bugs::        Fixed bugs


File: gpc-hr.info,  Node: Known Bugs,  Next: Planned Features,  Up: To Do

Known bugs in GPC
=================

   In this section, you can find information about GPC bugs that are
known to the developers.

   If you encounter a bug with GPC, please check whether it is one of
the known bugs. If not, report it to the GNU Pascal mailing list.  (But
always report if you solve the problem! :-)

   Solved problems are moved to "Fixed Bugs" (*note Fixed Bugs::), and
implemented features to the "News" chapter (*note News::).

   A message ID (like `<42@@foo.bar>') refers to a message in the GPC
mailing list or a newsgroup where the topic was discussed (often a bug
report). A note of the form `(xy20001231)' refers to an internal
message of the GPC developers. A file name like `(foo42.pas)' refers to
the according program in the GPC test suite included in the GPC source
distribution.

   * `setlimit' is applied when it shouldn't be ((a) variable/constant
     declarations, (b) `set of ShortCard', (c) constant sets)

   * problem with string operations and `goto' (contourbug.pas,
     martin1.pas, berend3.pas)

   * initializers of packed arrays (emil5.pas) and variant records
     don't work

   * global variables of dynamic size don't work (john1.pas)

   * declaring a procedure in the implementation with the same name as
     an imported procedure doesn't work (chief18.pas), detect name
     collisions between imported EP modules (mod9.pas)

   * dynamic sets don't work

   * there are some bugs with mathematical functions; GPC fails, for
     example, the Paranoia test

   * check `goto' targets more strictly
     <261020020000077022%gpaeper@@empirenet.com>,
     <Pine.LNX.4.44.0210281004000.31943-100000@@duch.mimuw.edu.pl>
     (fjf701*.pas)

   * AIX: `ReturnAddress' doesn't work after use of dynmamic variables
     (gcc-2 bug, maybe fixed in gcc-3) (build with
     `CFLAGS=-DRETADDR_BUG' to aviod crashing)


File: gpc-hr.info,  Node: Planned Features,  Next: Fixed Bugs,  Prev: Known Bugs,  Up: To Do

Features planned for GPC
========================

   In the following sections, you can find informations about features
which have been suggested and/or discussed for inclusion into GPC,
usually in the GPC mailing list. The division into the sections and the
names of the sections may change when this seems useful. The entries
within each section are in no particular order.

   Some of the entries may be a bit difficult to read. Double question
marks (`??') within the entries mean that it's not yet clear how to do
the thing. Triple question marks (`???') mean that it's not clear
whether to do it at all. ;-)

* Menu:

* Planned - Strings::            String types
* Planned - Records/arrays::     Record and array types
* Planned - Files::              Files
* Planned - Other types::        Other types
* Planned - OOP::                Object oriented programming extensions
* Planned - Misc::               Miscellaneous GPC topics
* Planned - Utilities::          Useful utilities for GPC


File: gpc-hr.info,  Node: Planned - Strings,  Next: Planned - Records/arrays,  Up: Planned Features

Planned features: Strings
-------------------------

   * const/var `AnyString' parameters and pointers (records internally,
     cf. gpc.pas) (GetCapacity; only for var parameters)

   * `SetLength' for non-Pascal string types; use truncate-flag

   * make work on all string types: string functions from
     rts/string*.pas, Concat/+ (function with conformant array;
     Optimize `s := s + ch') (fh19971105)

   * new option `--arrays-of-char-as-cstrings={none,zero-based,all}' to
     allow assigning [zero-based] arrays of char to cstring variables
     (warning otherwise) (cstrini2.pas); make padding of those arrays
     in initialized variables and in assignments dependent on this
     switch (fh19970921) (fjf57.pas, ok) and if the length matches
     exactly, give a warning (fh19971013) (cstrassign.pas); pass those
     arrays as cstrings in read*, write*, str (P_*STRING; current
     length=-1 in two places); compile time warning (and treatment as
     non-zero-based) if it's not clear at compile time if a conformant
     array or schema is zero-based or not, and an operation depends on
     this in the zero-based state

   * Short strings (Length, Capacity) and switches
     (tc19980326.2,tc19980327); allow `type x=string' (undiscriminated)
     when switch is set so that strings don't default to length 255
     (fh19971113) (fjf97.pas, ok); don't add a #0 terminator when
     passing as a CString parameter (automatically use String2CString)

   * automatically convert CStrings to Strings?

   * general switch `--bp-strings'

   * wide characters

   * open array/string parameters (`$P', `$V' in BP; undocumented
     `OpenString' identifier in BP)

   * variables of type undiscriminated schema/strings -> remove
     pointers to string constants; functions returning undiscriminated
     schemata (pg19980813.3)


File: gpc-hr.info,  Node: Planned - Records/arrays,  Next: Planned - Files,  Prev: Planned - Strings,  Up: Planned Features

Planned features: Records/arrays
--------------------------------

   * variant records: EP: check that all values of tag-type have
     exactly one matching variant

   * ISO structured constants (constdef.pas); variant records
     <C1256791.0021F002.00@@synln01.synstar.de>;
     <200106170346.f5H3ksj22229@@mail.bcpl.net>; (note structured values
     and `const' parameters)

   * initialized types in records/arrays (inirec[24].pas)

   * when applying `New' to a variant record type with a selector
     given, only allocate the space necessary for the selected variant
     (varrec2.pas) ???

   * Oregon and Vax Pascal structured constants
     <80256540.005E7D08.00@@buffer1.quantel.com> ???

   * automatically detected upper array bounds in structured
     constants/intialized variables (-> PXSC)

   * transpose arrays (Fortran)? <918557$mke$1@@nnrp1.deja.com>


File: gpc-hr.info,  Node: Planned - Files,  Next: Planned - Other types,  Prev: Planned - Records/arrays,  Up: Planned Features

Planned features: Files
-----------------------

   * keep files in FDRList while they live, not only while they're
     open, so `DoneFDR' can be applied to all of them

   * packed files (EP) ??

   * improve TFDDs

   * read/write operators ???


File: gpc-hr.info,  Node: Planned - Other types,  Next: Planned - OOP,  Prev: Planned - Files,  Up: Planned Features

Planned features: Other types
-----------------------------

   * UCSD Pascal's `Integer[n]' ??? BCD?

   * enum/record type extensions (syntax??)

   * check for dereferencing nil pointers

   * general subtypes ???

   * type-cast operators ???

   * make `SizeOf' work on specially declared untyped var and const
     parameters (`AnyType'?)

   * sparse sets; sets of arbitrary types ?? ???

   * initalization and finalization code for arbitrary types (e.g. GMP
     types)

   * `SELECTED_REAL_KIND' for real types (cf. Fortran, drf) ?? ???

   * resize schemata (cf. `SetLength' in Delphi)

   * `ShortComplex', `LongComplex'
     <Pine.GSO.4.44.0207151258290.5058-100000@@bonsai.fernuni-hagen.de>


File: gpc-hr.info,  Node: Planned - OOP,  Next: Planned - Misc,  Prev: Planned - Other types,  Up: Planned Features

Planned features: OOP
---------------------

   * `ProcVar := Obj.Method' {$X+}; method pointers
     (`procedure/function of object') (-> Delphi) ???

   * destructor: reset VMT link to 0 ???

   * checks: `@@Obj <> nil', `TypeOf (Obj) <> nil', `TypeOf (Obj)^.Size
     = -TypeOf (Obj)^.NegatedSize'; separate switches; function
     initialized (that does these 3 tests) ???

   * `CLASS is CLASS' (implemented in Pascal with `Parent')

   * BP compatible dynamic method dispatcher ?? ???

   * `class' (reference to an object type); allow classes and object
     types to inherit from each other; OOE;
     <01BD7A3A.6B187A20.prucha@@helicon.co.at>; obpascal.zip

   * `New': Delphi syntax; Dispose?? (automatically?; set references
     automatically to nil) (-> FPC)

   * `--base-class=foo', `--base-object=bar' ???

   * properties <01BD7A3A.6B187A20.prucha@@helicon.co.at>,
     <16131.199805071354@@potter.cc.keele.ac.uk>

   * VMTs (also for local classes (EP modules???)!) in GPI files,
     written to assembler file by main program; `--cfiles=foo': .s file
     with VMTs for C/assembler??? (also .h???)

   * method overloading ??? ??

   * interfaces (cf. OOE, Java); `OBJ is INTERFACE' (not so easy?) ???;
     variables of type pointer to more than one interface [and class]
     (also possible!); VMT problem with interfaces (my solution??? also
     with dynamic linking???)

   * virtual constructors; in interfaces (load)???

   * VMT: ClassID (64/128 bits?) default 0, error when duplicated,
     warning when 0 and inherited from class with <>0 ?, not allowed
     for abstract classes!; ClassName (also for abstract classes?); [];
     ProgrammerID, BaseClassID at beginning of unit (redeclarable?) ???

   * VMT: Children: list of pVMT

   * find class by ClassID/ClassName (implementable in Pascal with
     `Child')

   * object constants, class variables (-> other name for `VMT');
     virtual/static

   * store in GPI: whether ClassID used, ClassName used, which classes
     are instantiated

@


1.1
log
@Initial revision
@
text
@@


1.1.2.1
log
@Import an alpha version of GNU Pascal Compiler into the tree
(not to be connected to the build before the upgrade to gcc 3.3).

We couldn't use gpc 2.1 because it's too old and doesn't support
gcc 3.x at all.
@
text
@@
