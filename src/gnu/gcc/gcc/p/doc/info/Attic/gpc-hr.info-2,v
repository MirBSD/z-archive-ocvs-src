head	1.2;
access;
symbols
	gpc-20030830:1.1.2.1 FSF:1.1.2;
locks; strict;
comment	@# @;


1.2
date	2004.01.11.18.16.30;	author tg;	state dead;
branches;
next	1.1;

1.1
date	2004.01.11.18.01.07;	author tg;	state Exp;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2004.01.11.18.01.07;	author tg;	state Exp;
branches;
next	;


desc
@@


1.2
log
@nuke some unused, redundant or generated files
@
text
@This is ../p/doc/info/gpc-hr.info, produced by makeinfo version 4.1
from gpc.texi.

INFO-DIR-SECTION GNU programski alati
START-INFO-DIR-ENTRY
* GPC: (gpc-hr).                GNU Pascal prevodilac (compiler).
END-INFO-DIR-ENTRY
INFO-DIR-SECTION Pojedini alati
START-INFO-DIR-ENTRY
* GPC: (gpc-hr)Pozivanje GPC-a. GNU Pascal prevodilac (compiler).
END-INFO-DIR-ENTRY

   Ova datoteka dokumentira GPC prevodilac (engl. compiler).

   Permission is granted to make and distribute verbatim copies of this
manual provided the copyright notice and this permission notice are
preserved on all copies.

   Copyright (C) 1988-2003 Free Software Foundation, Inc.

   Permission is granted to copy and distribute modified versions of
this manual under the conditions for verbatim copying, provided also
that the sections entitled "GNU General Public License", "The GNU
Project", "The GNU Manifesto" and "Funding for free Software" are
included exactly as in the original, and provided that the entire
resulting derived work is distributed under the terms of a permission
notice identical to this one.

   Permission is granted to copy and distribute translations of this
manual into another language, under the above conditions for modified
versions, except that the sections entitled "GNU General Public
License", "The GNU Project", "The GNU Manifesto" and "Funding for Free
Software" and this permission notice, may be included in translations
approved by the Free Software Foundation instead of in the original
English.


File: gpc-hr.info,  Node: Instaliranje GPC-a na DJGPP,  Next: DJGPP Info reader,  Prev: DJGPP download,  Up: GPC na DJGPP-u

Kako instalirati prevodilac?
----------------------------

   Ako nemate DJGPP instaliran na svom hard disku, kreirajte direktorij
za GNU Pascal (`c:\gpc'), i raspakirajte arhive. Pazite da saèuvate
strukturu direktorija (koristite npr. `pkunzip -d'). Sada, dodajte
direktorij gdje se nalazi `gpc.exe' (`c:\gpc\bin') va¹em putu (`$PATH'),
zatim postavite DJGPP environment varijablu tako da pokazuje na va¹u
`djgpp.env' datoteku:

     set DJGPP=c:\gpc\djgpp.env

   Zatim, dodajte ovo u va¹u `djgpp.env' datoteku:

     ---------------------------------------------------------
     [gpcpp]
     C_INCLUDE_PATH=%/>;C_INCLUDE_PATH%%DJDIR%/lang/pascal;%DJDIR%/include
     
     [gpc]
     COMPILER_PATH=%/>;COMPILER_PATH%%DJDIR%/bin
     LIBRARY_PATH=%/>;LIBRARY_PATH%%DJDIR%/lib;%DJDIR%/contrib/grx20/lib
     ---------------------------------------------------------

   GPC online dokumentacija je u GNU info formatu; potreban vam je
info-reader (`txi390b.zip') da ga proèitate, ili koristite ugraðeni
info-reader iz RHIDE ili PENG IDE. Da biste dodali GPC dokumentaciju u
info "directory" datoteku, editirajte datoteku `c:\gpc\info\dir', i
naðite slijedeæi odlomak:

     ---------------------------------------------------------
     * GCC: (gcc.inf).
     The GNU C, C++, and Objective-C Compiler
     
     * GDB: (gdb.inf).
     The GNU Debugger (gdb and gdb-dpmi).
     
     ---------------------------------------------------------

   Da biste dodali GPC, promijenite ove retke tako da izgledaju ovako:

     ---------------------------------------------------------
     * GCC: (gcc.inf).
     The GNU C, C++, and Objective-C Compiler
     
     * GPC: (gpc.inf).
     The GNU Pascal Compiler
     
     * GDB: (gdb.inf).
     The GNU Debugger (gdb and gdb-dpmi).
     
     ---------------------------------------------------------

   Specifiène informacije za situacije s malo memorije i jo¹ vi¹e toga
mogu se pronaæi u DJGPP FAQ i dokumentaciji.


File: gpc-hr.info,  Node: DJGPP Info reader,  Next: DJGPP DPMI server,  Prev: Instaliranje GPC-a na DJGPP,  Up: GPC na DJGPP-u

Ne mogu èitati info dokumentaciju!
----------------------------------

   Da biste èitali Info dokumentaciju, potreban vam je `info' program,
`txi390b.zip' ili neka integrirana razvojna okolina (IDE) poput RHIDE
ili PENG.


File: gpc-hr.info,  Node: DJGPP DPMI server,  Next: Asemblerska sintaksa,  Prev: DJGPP Info reader,  Up: GPC na DJGPP-u

GPC ka¾e: no DPMI
-----------------

   Nemate instaliran DPMI server, a DJGPP v2 zatijeva da je on pokrenut.
Mo¾ete ili koristiti neki od komercijalnih DPMI servera (npr.
pokreæite `gpc' u DOS prozoru pod MS-Windowsima), ili download-ajte i
instalirajte CWSDPMI (`csdpmi3b.zip') koji je free DPMI server napisan
za DJGPP.


File: gpc-hr.info,  Node: Asemblerska sintaksa,  Next: DJGPP-specifièan kod,  Prev: DJGPP DPMI server,  Up: GPC na DJGPP-u

Imam problema s asemblerskim kodom ...
--------------------------------------

   GNU asembler (`as.exe'), ili `gas', kojeg poziva GCC prihvaæa "AT&T"
sintaksu koja je razlièita od "Intel" sintakse.  Razlike su poja¹njene
u odlomku 17.1 DJGPP FAQ-a.

   Na rapolaganju je vodiè kojeg je napisao Brennan Mr. Wacko Underwood
<brennan@@mack.rt66.com>, a opisuje kako koristiti "inline" asemblerske
instrukcije s DJGPP-om, na ovom URL-u:
`http://www.delorie.com/djgpp/doc/brennan/brennan_att_inline_djgpp.html'

   Postoji takoðer i GPC asemblerski vodiè, na adresi
`http://www.gnu-pascal.de/contrib/misc/gpcasm.zip'

   Odlomak 17.3 DJGPP FAQ-a opisuje neke metode pretvaranja "Intel"
sintakse u "AT&T" sintaksu.

   Meðutim, molimo primijetite da asemlerski kod nije prenosiv, tj.
radit æe na IA32 ("x86") i kompatibilnim procesorima, ali neæe se èak
ni prevesti na drugim procesorima. Dakle umeæuæi asemblerske
instrukcije u svoje programe, znatno æete smanjiti njihovu korisnost.

   Ako mislite da zaiste "trebate" asemblerski kod radi brzine - i
provjerili ste da se asemblerski kod zaista vrti br¾e nego Pascal kod
sa prikladnim optimizacijama - mogli biste po¾eljeti oboje, i Pascal i
asemblersku verziju, i dozvoliti npr. da jedan `{$ifdef i386}' odluèuje
koju æe koristiti. Na ovaj naèin, program æe se barem prevesti na svim
procesorima.


File: gpc-hr.info,  Node: DJGPP-specifièan kod,  Next: Velièina stoga (stack),  Prev: Asemblerska sintaksa,  Up: GPC na DJGPP-u

Reci mi kako da koristim DPMI, BIOS i ostale stvari povezane s DOS-om
---------------------------------------------------------------------

   DPMI, BIOS i ostale funkcije ne razlikuju se od ostalih sistemskih
funkcija. Pogledajte u GPC priruènik kako pristupiti C biblioteci svog
sustava. Ovaj mali primjer pokazuje kako koristiti DPMI, kopirajuæi
neke strukture i prototipove iz `<dpmi.h>':

     program DPMIDemo;
     
     { Samo za DJGPP }
     
     {$X+}
     
     { `Byte' je `unsigned char' u C-u,
       `ShortCard' je `unsigned short' u C-u,
       `MedCard' je `unsigned long' u C-u,
       `Word' je `unsigned' u C-u,
       itd. (svi ovi tipovi su ``built-in''). }
     
     type
       TDpmiVersionRet = record
         Major     : Byte;
         Minor     : Byte;
         Flags     : ShortCard;
         CPU       : Byte;
         Master_PIC: Byte;
         Slave_PIC : Byte;
       end;
     
     type
       TDpmiFreeMemInfo = record
         LargestAvailableFreeBlockInBytes,
         MaximumUnlockedPageAllocationInPages,
         MaximumLockedPageAllocationInPages,
         LinearAddressSpaceSizeInPages,
         TotalNumberOfUnlockedPages,
         TotalNumberOfFreePages,
         TotalNumberOfPhysicalPages,
         FreeLinearAddressSpaceInPages,
         SizeOfPagingFilePartitionInPages,
         Reserved1,
         Reserved2,
         Reserved3: MedCard;
       end;
     
     function DpmiGetVersion (var Version: TDpmiVersionRet): Integer;
              external name '__dpmi_get_version';
     
     function DpmiGetFreeMemoryInformation
              (var MemInfo: TDpmiFreeMemInfo): Integer;
              external name '__dpmi_get_free_memory_information';
     
     var
       Version: TDpmiVersionRet;
       MemInfo: TDpmiFreeMemInfo;
     
     begin
       if DpmiGetVersion (Version) = 0 then
         begin
           WriteLn ('CPU type:       ', Version.CPU, '86');
           WriteLn ('DPMI major:       ', Version.Major);
           WriteLn ('DPMI minor:       ', Version.Minor);
         end
       else
         WriteLn ('Error in DpmiGetVersion');
       if DpmiGetFreeMemoryInformation (MemInfo) = 0 then
         WriteLn ('Free DPMI memory: ',
                  MemInfo.TotalNumberOfFreePages, ' pages.')
       else
         WriteLn ('Error in DpmiGetMemoryInformation');
     end.


File: gpc-hr.info,  Node: Velièina stoga (stack),  Prev: DJGPP-specifièan kod,  Up: GPC na DJGPP-u

Dobio sam "exception" kod pristupanja `array [1 .. 4000000] of Byte'
--------------------------------------------------------------------

   Po "default-u", maksimalna velièina stoga DJGPP aplikacije je 256K.
Ako trebate vi¹e, to trebate podesiti sa stubedit programom, npr.

     stubedit your_app.exe minstack=5000K

   Drugaèiji naèin je da dodate slijedeæi kod va¹em programu kako bi
definirali minimalnu velièinu stoga (ovdje: 2 MB). Ova æe vrijednost
biti po¹tovana èak i ako korisnik postavi manje vrijednosti koristeæi
stubedit, tako da bi ova metoda mogla biti ne¹to sigurnija. (Ime
linkera `_stklen' je esencijalno; ime kori¹teno u Pascalu nije od
znaèaja. Konstanta se ne mora koristiti bilo gdje u programu.
Preporuèuje se da ovu deklaraciju stavite u glavnu programsku datoteku,
ne u beku jedinicu/modul, tako da programi koji koriste modul/jedinicu
mogu postaviti koji god limit im je potreban.)

     {$ifdef __GO32__}
     const
       MinStackSize: Cardinal = $200000; attribute (name = '_stklen');
     {$endif}

   Svejedno, mogla bi biti dobra ideja koristiti pokazivaèe ("pointer")
na velike strukture, i alocirati memoriju dinamièki za vrijeme
izvr¹avanja.

   DJGPP mora alocirati stog u fizièkoj memoriji za vrijeme pokretanja
programa, dakle treba biti oprezan s prevelikim pro¹irenjima stoga.
Veæina drugih sistema alocira stranice stoga "on demand", kada ih
program tra¾i, pa je jedini razlog da se uopæe postavi ogranièenje taj
da se sprijeèi da podivljala rekurzija pojede svu memoriju ...

   Na Unix-olikim sustavima, mo¾ete postaviti "resource limit", ali to
obièno ne radite u normalnim programima, nego radije u postavkama
ljuske (bash: `ulimit'; csh: `limit'; sistemski poziv: `setrlimit'(2)).


File: gpc-hr.info,  Node: Znakovni nizovi u GPC-u,  Next: Tra¾enje pomoæi,  Prev: GPC na DJGPP-u,  Up: FAQ

Nizovi
======

* Menu:

* String schema::                       Èemu sva ta zbrka oko nizova?
* Nizovi u variant record-ima::         Preklapanje nizova u variant record-ima
* Bajt za duljinu::                     Za¹to `s[0]' ne sadr¾ava duljinu?
* Nizovi kao parametri po vrijednosti:: Pa¾nja sa znakovnim nizovima kao
                                          parametrima
* Kratki znakovni nizovi::              Podr¹ka za BP kompatibilne kratke
                                          znakovne nizove
* C znakovni nizovi::                   ©to sa C znakovnim nizovima?


File: gpc-hr.info,  Node: String schema,  Next: Nizovi u variant record-ima,  Up: Znakovni nizovi u GPC-u

Èemu sva ta zbrka oko nizova?
-----------------------------

   Znakovni nizovi u Turbo Pascalu imaju bajt koji oznaèava duljinu, na
samom poèetku. Kako je vrijednost bajta u opsegu 0 .. 255, to ogranièava
znakovne nizove na 255 znakova. Meðutim, u Pascal shemi znakovni niz je,
kao ¹to je definirano odlomkom 6.4.3.3.3 ISO 10206 Extended Pascal
standarda, "schema record":

     type
       String (Capacity: Integer) = record
         Length: 0 .. Capacity;
         String: packed array [1 .. Capacity + 1] of Char
       end;

   Ovaj `+ 1' je GPC ekstenzija da bi se uèinilo moguæim da se
automatski dodaje `#0' "terminator" kad se proslijeðuje ili ih se
dodjeljuje CString-ovima. Tako uz tro¹ak od malo dodatne kompleksnosti
(mora se deklarirati kapacitet niza, ne koristite `GetMem' bez
eksplicitne inicijalizacije èlana `Capacity', i dodatnog zahtjeva na
prostor) sada mo¾ete imati vrlo dugaèke znakovne nizove.


File: gpc-hr.info,  Node: Nizovi u variant record-ima,  Next: Bajt za duljinu,  Prev: String schema,  Up: Znakovni nizovi u GPC-u

Preklapanje nizova u variant record-ima
---------------------------------------

   Q: Da li bi razlièite varijante u varijant record-u trebale zapadati
u istu memorijsku lokaciju? Prethodni Pascali koje sam koristio su ovo
garantirali, i napisao sam low-level kod koji se oslanja na to.
Varijante nisu iste duljine, niti je bila namjera da budu.

   A: Ne, namjerno je uèinjeno da diskriminante nisu preklopljene u
memoriji, da bi se one mogle biti ispravno inicijalizirati prije svega.
Razmotrite:

     record
     case Boolean of
       False: (s1: String (42));
       True:  (s2: String (99));
     end;

   Ako bi se nizovi preklapali, posebno bi njihove diskriminante
zauzimale isto mjesto u memoriji. Kako bi onda trebale biti
inicijalizirane? Na bilo koji naèin, bilo bi krivo za barem jednu od
varijanti ...

   Dakle, nakon diskusije u ISO Pascal newsgroup-i
(news:comp.lang.pascal.ansi-iso) gdje se ovo pitanje pojavilo u vezi s
varijablama (koje takoðer zahtijevaju ne¹to automatske inicijalizacije
i finalizacije), odluèili smo da napravimo ovo u GPC-u za sve tipove s
automatskom inicijalizacijom i finalizacijom (trenutno datoteke,
objekti i sheme (schemata), ukljuèujuæi i znakovne nizove, u buduænosti
bi to takoðer mogle biti i Delphi kompatibilne klase i finalizirani
tipovi), buduæi da standard ionako ne garantira za iste da su u
preklapanom memorijskom podruèju (engl. overlay) ...

   Postoje dva naèina u GPC-u da se dobije garantirano preklapanje
memorije (oba nestandardna, naravno, buduæi da standard ne pretpostavlja
ni¹ta o internim reprezentacijama; ali su oba BP-kompatibilna),
`absolute' deklaracije i varijabilno dodjeljivanje tipova (variable
type casts). Npr. da bi se preklapalo polje bajtova `b' sa varijablom
`v':

     var
       b: array [1 .. SizeOf (v)] of Byte absolute v;

   Ili mo¾ete koristiti dodjelu tipa:

     type
       t = array [1 .. SizeOf (v)] of Byte;

   nakon èega `t (v)' mo¾e biti kori¹ten kao polje preklopljeno (u
memoriji se nalazi na istom mjestu) sa `v'.


File: gpc-hr.info,  Node: Bajt za duljinu,  Next: Nizovi kao parametri po vrijednosti,  Prev: Nizovi u variant record-ima,  Up: Znakovni nizovi u GPC-u

Za¹to `s[0]' ne sadr¾ava duljinu?
---------------------------------

   Q: U standardnom Pascalu mo¾ete oèekivati da se `s[1]' podudara sa
pozicijom prvog znaka u nizu `s' i tako jedan znak ulijevo je duljina
od `s'. Tako je `s[0]' jednak duljini od `s'.  Istina?

   A: Ovo stoji za UCSD/BP znakovne nizove (koje GPC jo¹ ne
implementira, ali to je u planu). Jedini nizovi koje Standard Pascal
podr¾ava su polja znakova bez ikakvog polja za duljinu.

   GPC takoðer podr¾ava Extended Pascal znakovnu shemu (*note String
schema::), ali one takoðer nemaju bajt koji sadr¾i duljinu na "poziciji
0", nego radije jedan `Length' èlan (koji je veæi od jednog bajta).


File: gpc-hr.info,  Node: Nizovi kao parametri po vrijednosti,  Next: Kratki znakovni nizovi,  Prev: Bajt za duljinu,  Up: Znakovni nizovi u GPC-u

Pa¾nja sa znakovnim nizovima kao parametrima
--------------------------------------------

   Q: Postoje li neki skriveni problemi s parametrima - znakovnim
nizovima?

   A: Budite oprezni kad prosljeðujete znakovne nizove potprogramima
koje prihvaæaju znakovni niz kao parametar po vrijednosti i onda
interno modificiraju vrijednost parametra. Unutar rutine, parametar po
vrijednosti dobiva fiksan kapacitet - duljinu znakovnog niza u
navodnicima koja mi je proslijeðena. Bilo kakav poku¹aj da se dodijeli
du¾a vrijednost neæe uspjeti.

   Ovo vrijedi samo ako je parametar po vrijednosti deklariran kao
`String'. Ako je deklariran kao znakovni niz sa danim kapacitetom (npr.
`String (255)'), tada dobiva ovaj kapacitet unutar rutine.


File: gpc-hr.info,  Node: Kratki znakovni nizovi,  Next: C znakovni nizovi,  Prev: Nizovi kao parametri po vrijednosti,  Up: Znakovni nizovi u GPC-u

Podr¹ka za BP kompatibilne kratke znakovne nizove
-------------------------------------------------

   Q: Dvije razlièite vrste znakovnih nizova nose isto ime - `String' -
to radi malo konfuzije. Mo¾da bi znakovni nizovi u starom stilu trebali
biti preimenovani u `short string'?

   A: Kada implementiramo kratke nizove, morat æemo napraviti ovakvu
razliku. Na¹ trenutaèan plan ide ovako:

   `String (N)': string shema (EP kompatibilna)

   `String [N]': kratki znakovni niz (UCSD/BP kompatibilan, gdje N mora
biti <= 255)

   `String': zavisno od prekidaèa i zastavica prevodioca, po defaultu
shema bez diskriminante, ali u BP modu (ili sa specijalnim prekidaèem)
kratki niz kapaciteta 255 (UCSD/BP kompatibilan).

   Q: Kada æe ti kratki nizovi biti na raspolaganju?

   A: Planira se veæ du¾e od godine. Zaka¹njenje je uzrokovano
problemima koji su vi¹e pritiskali tim.


File: gpc-hr.info,  Node: C znakovni nizovi,  Prev: Kratki znakovni nizovi,  Up: Znakovni nizovi u GPC-u

©to sa C znakovnim nizovima?
----------------------------

   C znakovni niz (`char *') je polje znakova, zavr¹eno s `#0' znakom.

   Funkcije C biblioteke zahtijevaju C, ne Pascal string argumente.
Meðutim, znakovni nizovi u Pascal stilu se automatski pretvaraju u one
u C stilu kada se prosljeðuju rutinama koje oèekuju znakovne nizove u C
stilu. Ovo radi jedino ako rutina samo èita iz znakovnog niza, ne ako
ga ona modificira.

   Npr. to je naèin kako æete pozvati `system()' poziv u va¹oj C
biblioteci (¹to vi¹e nije neophodno, otkad je veæ ugraðen `Execute'):

     program SysCall;
     
     function System (CmdLine: CString): Integer; external name 'system';
     
     var
       Result: Integer;
     
     begin
       Result := System ('ls -l');
       WriteLn ('system() call returned: ', Result)
     end.

   Mogli biste koristiti tip `PChar' umjesto `CString'. I `CString' i
`PChar' su oboje definirani kao `^Char' - iako mi preporuèujemo
`CString' jer to èini jasnijim da govorimo o nekakvom nizu prije nego o
jednom jedinom znaku.

   Mnogo rutina iz biblioteke u Pascalu za mnoge aplikacije postoji u
GPC jedinici i u nekim drugim jedinicama. Kad god je to moguæe, trebalo
bi ove koristiti (npr. `Execute' radije nego `system()', i tada se ne
trebate brinuti o `CString'-ovima.

   Molimo *NE* prosljeðivati C znakovne nizove kao `const' ili `var'
parametar ako C prototip ka¾e `const char *' ili æete vjerojatno dobiti
"Segmentation fault" pogre¹ku.


File: gpc-hr.info,  Node: Tra¾enje pomoæi,  Next: FAQ "Razno",  Prev: Znakovni nizovi u GPC-u,  Up: FAQ

Tra¾enje pomoæi
===============

   Molimo proèitajte GPC priruènik (info datoteke ili drugi format) kao
i `README' i `BUGS' datoteke koje dolaze s GPC-om (obièno instalirane u
direktoriju `/usr/local/doc/gpc'), plus ostalu dokumentaciju koja bi
mogla pomoæi (DJGPP FAQ ako koristite DJGPP, i sl.) prije nego
po¹aljete email timu za odr¾avanje ili na mailing listu.

   Posebno, `BUGS' datoteka sadr¾i informacije kako poslati prijavu
buga na najefikasniji naèin.

   `Support' poglavlje GPC priruènika reæi æe vam gdje da naðete vi¹e
informacija o GPC-u u kako kontaktirati GPC razvojni tim.  (*note
Support::)


File: gpc-hr.info,  Node: FAQ "Razno",  Prev: Tra¾enje pomoæi,  Up: FAQ

Razno
=====

* Menu:

* Suradnja na projektu::   ®elio bih doprinijeti projektu; ¹to sad?
* GPC web poslu¾itelj::    Gdje je GNU Pascal web poslu¾itelj?
* O ovom FAQ-u::           O ovom FAQ-u.


File: gpc-hr.info,  Node: Suradnja na projektu,  Next: GPC web poslu¾itelj,  Up: FAQ "Razno"

®elio bih doprinijeti projektu; ¹to sad?
----------------------------------------

   Ako biste ¾eljeli suraðivati na projektu, molimo pi¹ite na mailing
listu, *Note Mailing List::.


File: gpc-hr.info,  Node: GPC web poslu¾itelj,  Next: O ovom FAQ-u,  Prev: Suradnja na projektu,  Up: FAQ "Razno"

Gdje je GNU Pascal web poslu¾itelj?
-----------------------------------

   GPC homepage na webu, za informacije i download, je na
`http://www.gnu-pascal.de'.

   GPC "To-Do" lista, sa najnovijim moguænostima i ispravljenim
bugovima mo¾e se naæi tamo.


File: gpc-hr.info,  Node: O ovom FAQ-u,  Prev: GPC web poslu¾itelj,  Up: FAQ "Razno"

O ovom FAQ-u
------------

   Trenutno odr¾ava: Russ Whitaker, <russ@@ashlandhome.net>

   Ovo je druga inkarnacija GNU Pascal FAQ liste, bazirano na prethodnom
FAQ-u kojeg je napisao J.J. van der Heijden. Komentari, sugestije ili
korekcije ovoj listi èesto postavljanih pitanja su uvijek dobrodo¹le.

   Molimo ukljuèite u svoju email poruku i broj verzije dokumenta na
koji se va¹i komentari odnose (mo¾ete naæi broj verzije na poèetku ove
FAQ liste).

   Mnogi su ljudi doprinijeli ovom FAQ-u, samo neki od njih su
spomenuti gore. Mnogo informacija u njemu, kao i inspiracija za ovu FAQ
listu su uzeta s prometa GPC mailing liste, tako da ste mogli (a da
niste niti znali) doprinijeti ovoj listi.


File: gpc-hr.info,  Node: Installation,  Next: Invoking GPC,  Prev: FAQ,  Up: Top

How to download, compile and install GNU Pascal.
************************************************

* Menu:

* Download::              Where and what to download
* Binary Distributions::  How to install a binary distribution
* Compiling GPC::         How to compile GPC
* Compilation Notes::     Compilation notes for specific platforms
* Cross-Compilers::       Building and Installing a cross-compiler
* Crossbuilding::         Crossbuilding a compiler


File: gpc-hr.info,  Node: Download,  Next: Binary Distributions,  Up: Installation

Where and what to download
==========================

   You can download the source code of the current GNU Pascal release
from
     `http://www.gnu-pascal.de/current/'
   and binaries for some platforms from
     `http://www.gnu-pascal.de/binary/'

   The binary archive files are named `gpc-VERSION.PLATFORM.EXTENSION'
- for example `gpc-2.1.alpha-unknown-linux-gnu.tar.gz' for GPC version
2.1 on an Alpha workstation running the Linux kernel with GNU C
Library, or `gpc-20000616.i386-pc-msdosdjgpp' for GPC version 20000616
on an Intel IA32 compatible PC running DOS with DJGPP.

   After you have downloaded the correct archive file for your
platform, please read the installation notes on how to install such a
binary distribution.

   If you are running Dos or MS Windows, you will need additional tools
- see "What else to download and where" below.

Current snapshots
-----------------

   GNU Pascal is subject to steady development. Alpha and beta
snapshots (source only, use at your own risk) can be found at:

     `http://www.gnu-pascal.de/alpha/'
     `http://www.gnu-pascal.de/beta/'

What else to download and where
-------------------------------

   When you are using GNU Pascal on a DOS system, you will need either
the DJGPP or the EMX development environment (see below). On an OS/2
system, you will need EMX. On an MS Windows 95/98/NT system you will
need either the CygWin or the mingw32 environment.

   GNU Pascal uses the compiler back-end from the GNU Compiler
Collection, GNU CC or GCC. If you want to compile GPC, you will need
the source of GCC as well as the source of GPC itself. From the same
place as GPC, please download GCC `2.8.1, 2.95.x or 3.2.1'. (It is also
available from any GNU mirror; see `http://www.gnu.org/software/gcc/'.)

Libraries
---------

   For some of GPC's units, you will need some standard libraries. In
particular:

Unit             Platform              Library
CRT              Unix/terminal         ncurses >= 5.0 (1), (2)
CRT              Unix/X11              PDCurses (2)
CRT              Dos, MS-Windows       PDCurses (3)
GMP              any                   gmp
RegEx            any                   rx
(debugging)      Unix, MS-Windows      ElectricFence (4)

   Notes:

   (1) ncurses version 5.0 or newer is strongly recommended because
older versions contain a bug that severely affects CRT programs.

   (2) You can install both ncurses and PDCurses on a Unix system, and
choose at compile time whether to generate a terminal or X11 version of
your program.

   (3) ncurses also runs under MS-Windows with CygWin (not mingw32,
however), but doesn't appear to behave much differently from PDCurses
on that platform.

   (4) ElectricFence is not used by any unit, but can be used for
debugging memory allocation bugs by simply linking it (see the
accompanying documentation).

   You can find those libraries on many places on the Net. Also, many
GNU/Linux distributions, DJGPP mirrors and other OS distributions
already contain some of the libraries. In any case, you can find the
sources of the libraries (sometimes together with patches that you
should apply before building if you choose to build from the sources)
and binaries for some platforms in

     `http://www.gnu-pascal.de/libs/'

   For more information and descriptions of these libraries, see *Note
Libraries::.

DJGPP
-----

   DJGPP (http://www.delorie.com/djgpp/) is available from any SimTel
mirror in the `gnu/djgpp' subdirectory; for addresses look into the
DJGPP FAQ (http://www.delorie.com/djgpp/v2faq/).  To use GNU Pascal you
need at least

   - the C library, `v2/djdev201.zip', and

   - `binutils' (assembler, etc.), `v2gnu/bnu270b.zip'.

   We also recommend you to get:

   - the `make' utility, `v2gnu/mak375b.zip'

   - the GNU debugger, `v2gnu/gdb416b.zip'

   - the DJGPP FAQ, `v2faq/faq211b.zip'

   - the GRX graphics library, `http://www.gnu.de/software/GRX/'

   - PENG, `http://fjf.gnu.de/peng/', an integrated development
     environment, similar to BP's one, written in GNU Pascal, or

   - RHIDE, `v2app/rhide.zip', another integrated development
     environment, or

   - DevPascal, `http://www.bloodshed.net/devpascal.html', an
     integrated development environment for mingw32.

EMX
---

   EMX is an environment for creating 32-bit applications for DOS and
OS/2.  It is available from:

     `http://www.leo.org/pub/comp/os/os2/leo/gnu/emx+gcc/index.html'

   To develop EMX programs with GNU Pascal you need at least

   - the EMX runtime package, `emxrt.zip',

   - the EMX development system, `emxdev*.zip', and

   - the GNU development tools, `gnudev*.zip'.

   If your DOS box has DPMI (it does if you are using MS Windows or
OS/2) you will also need RSX, available from the same sites as EMX in
the subdirectory `rsxnt'.

   The GNU development tools contain the GNU C compiler which is in fact
not needed to use GNU Pascal. However, the C library _is_ needed.

CygWin
------

   CygWin is an environment which implements a POSIX layer under MS
Windows, giving it large parts of the functionality of Unix. CygWin
contains development tools such as an assembler, a linker, etc. GPC
needs for operation. More information about CygWin can be found at
     `http://cygwin.com'

mingw32
-------

   The Minimalists' GNU Win32 environment, mingw32, allows a large
number of Unix programs - including GPC and GCC - to run under MS
Windows 95/98/NT using native MS libraries. mingw32 ressources can be
found at
     `http://www.mingw.org'


File: gpc-hr.info,  Node: Binary Distributions,  Next: Compiling GPC,  Prev: Download,  Up: Installation

Installation instructions for a GPC binary distribution
=======================================================

   To install a binary distribution, `cd' to the root directory and
unpack the archive while preserving the stored directory structure.
Under a Unix compatible system with GNU `tar' installed, the following
(performed as `root') will do the job:

     # cd /
     # tar xzf ARCHIVE.tar.gz

   If you are using a `tar' utility other than GNU `tar', it might be
necessary to do the above in an explicit pipe:

     # cd /
     # gzip -c -d ARCHIVE.tar.gz | tar xf -

   If you want to install a GPC binary distribution in another directory
than it was prepared for (for example, if you do not have root access
to the computer and want to install GPC somewhere under your home
directory), you can do the following:

   - Unpack the archive file in a directory of your choice (see above).

   - `cd' to the "prefix" directory of the distribution (for instance
     `usr/local').

   - Run the script `install-gpc-binary', available from
     `http://www.gnu-pascal.de/binary/'.

   - Follow the instructions in the script.

   To install a ZIP archive under DOS with `PKunzip', `cd' to the
appropriate directory (usually `\' for EMX, `\DJGPP' for DJGPP), then
call `PKunzip' with the `-d' option:

     C:\> cd djgpp
     C:\DJGPP> pkunzip -d ARCHIVE.zip

   where `ARCHIVE.zip' is the name of the distribution file.

   For DJGPP you must edit your `djgpp.env' in the `DJGPP' directory to
complete the installation: Please copy the entries from `[gcc]' to
create a new `[gpc]' section. The result may look as follows:

     [gcc]
     COMPILER_PATH=%/>;COMPILER_PATH%%DJDIR%/bin
     LIBRARY_PATH=%/>;LIBRARY_PATH%%DJDIR%/lib
     
     [gpc]
     COMPILER_PATH=%/>;COMPILER_PATH%%DJDIR%/bin
     LIBRARY_PATH=%/>;LIBRARY_PATH%%DJDIR%/lib

   If you are using the DJGPP version of GPC but do not have a `DJGPP'
directory, please download and install DJGPP (*note Download::).

   Binary distributions include `libgcc.a' and `specs', files that are
normally part of GCC. If you have GCC installed, they will be replaced
unless you manually install the archive.


File: gpc-hr.info,  Node: Compiling GPC,  Next: Compilation Notes,  Prev: Binary Distributions,  Up: Installation

Compiling GPC
=============

   The preferred way to distribute GNU software is distribution of the
source code. However, it can be a non-trivial exercise to build GNU
Pascal on some non-Unix systems, so we also provide ready-to-run
binaries for a number of platforms. (See *Note Binary Distributions::
for how to install a binary distribution.)

   GPC is based on the GNU Compiler Collection, GNU CC or GCC. You will
need the GCC sources to build it. It must be the same version as the
one GPC is implemented with - `2.8.1, 2.95.x or 3.2.1' as of this
writing. Although you need GCC to build the GNU Pascal compiler, you
don't need GCC to compile Pascal programs once GNU Pascal is installed.
(However, using certain libraries will require compiling C wrappers, so
it is a good idea to install the C compiler as well.)

   Because GNU Pascal shares its back-end with GCC, it should run on any
system supported by GCC. A full list of platforms supported by GCC can
be found in *Note the GCC installation instructions: (gcc)Installation.

   The GCC source can be obtained from any mirror of the GNU FTP site,
`ftp://ftp.gnu.org/gnu/gcc/'. The "core" distribution is sufficient for
GPC.

   Here is the generic procedure for installing GNU Pascal on a Unix
system. See *Note Compilation Notes:: for extra information needed to
install GPC on DOS-like platforms.

  1. Checking the prerequisites

     Make sure that GNU make is installed and that you use it in the
     following steps. When unsure, you can try `make --version' and/or
     `gmake --version'. It should tell you that it is GNU make. If you
     don't have it, you can obtain it from
     `http://www.gnu.org/software/make/'.

     (In the following, we will simply speak of `make' when invoking
     GNU make; you might need to call `gmake' instead.)

     For extracting the example programs from the documentation to the
     `doc/docdemos' directory a non-crippled `sed' is needed.  GNU sed
     is known to work.

     If you have downloaded a "minimal" source distribution, most
     derived files have to be rebuilt. This happens automatically, but
     you need additional tools: `bash', `bzip2', *GNU* `sed', GNU `awk',
     GNU `m4', `bison' (at least version 1.875), `flex', `autoconf'
     (version 2.12), `help2man', `texinfo' (at least version 4.2).
     Make sure that these are installed. The minimal distributions are
     compressed with `bzip2' instead of `gzip', so substitute it in the
     instructions below.

     If you want to build the GPC WWW pages you will also need a TeX
     distribution (including `pdftex' and `dvips').

     If you run into trouble during the installation process, please
     check whether you are using outdated versions of the required
     utilities and upgrade if necessary.

     The GNU versions of the packages above are available from
     `http://www.gnu.org/software/', in a subdirectory whose name is
     the name of the package.

  2. Unpacking the source

     From a directory of your choice (e.g. `/home/fred'), unpack the
     GCC and GNU Pascal source distributions. This will create separate
     subdirectories for GCC and GPC. Let us assume `gcc-2.95.3' and
     `gpc-20030209' in this example.
          % cd /home/fred
          % gzip -c -d gcc-core-2.95.3.tar.gz | tar xf -
          % gzip -c -d gpc-20030209.tar.gz | tar xf -

     `cd' to the GPC directory and move the contents (a subdirectory
     `p') to the subdirectory `gcc' of the GCC directory:

          % mv /home/fred/gpc-20030209/p /home/fred/gcc-2.95.3/gcc/

     Instead of moving the directory, it is now also possible to make a
     symbolic link (if the OS supports symlinks). This is useful if you
     want to build GPC with several different GCC versions:

          % ln -s /home/fred/gpc-20030209/p /home/fred/gcc-2.95.3/gcc/p

     It is recommended, though not required, to use a separate
     directory for building the compiler, rather than compiling in the
     source directory. In this example, let us create
     `/home/fred/gpc-build' for this purpose:

          % mkdir /home/fred/gpc-build

     If you use a separate directory, you do not need to write into the
     GCC source directory once you have patched the GCC source (see
     below), and can build GPC for more than one platform from the same
     source tree.

     In case you are re-using a directory where you have already built
     GCC and/or GPC for a different target machine, do `make distclean'
     to delete all files that might be invalid. One of the files this
     deletes is `Makefile'; if `make distclean' complains that
     `Makefile' does not exist, it probably means that the directory is
     already suitably clean.

  3. Configuring and building GCC

     GNU Pascal is automatically configured with GCC. Configuration of
     GCC is treated in depth in *Note the GCC installation
     instructions: (gcc)Installation.  The normal procedure is as
     follows:

     `cd' to the GPC build directory. From there, run the `configure'
     script in the GCC source directory:

          % cd /home/fred/gpc-build
          % /home/fred/gcc-2.95.3/configure --enable-languages=pascal

     This creates all the necessary config files, links and Makefile in
     the GCC object directory.

     Note 1: The configuration will prompt you for patching the GCC
     source for GPC support, so you need write access to that
     directory. All changes to GCC are surrounded by `#ifdef GPC ...
     #endif', so they should not interfere when you build a C compiler
     from this source tree.

     Note 2: The `--enable-languages=pascal' option means that we only
     want to build the Pascal compiler and not, for instance, the C++
     compiler.

     Note 3: The standard base directory for installing GCC and GPC is
     `/usr/local'. If you want to install files to an alternate
     directory DIR, specify `--prefix=DIR' when you run `configure'.
     For installing into a system directory such as `/usr/local' you
     will, of course, need appropriate permissions (often root).
     Therefore, if you want to install GPC on a system where you don't
     have those permissions, you must specify a prefix (e.g.,
     `$HOME/usr').

  4. Putting other GNU tools in place

     Some environments require other GNU tools (such as the GNU
     assembler or linker) instead of the standard system tools for GCC
     to work. (See the GCC installation instructions for details.) If
     this is the case for your system, install the required tools in
     the GPC build directory under the names `as', `ld', or whatever is
     appropriate. This will enable the compiler to find the proper
     tools for compilation of the program `enquire' (a part of GCC) and
     to install the GNU tools to a place where they are found by GCC
     but do not interfere with the standard system tools.

     Alternatively, you can do subsequent compilation using a value of
     the `PATH' environment variable such that the necessary GNU tools
     come before the standard system tools.

  5. Compiling GPC

     Once you are satisfied with the configuration as determined by
     `configure', you can build the compiler:

          % make

     Notice that this procedure will build the C compiler (and maybe
     some other compilers) too, because that is used to compile the GPC
     runtime library.

     Optionally, you may supply CFLAGS, LDFLAGS or RTSFLAGS. CFLAGS is
     used for compiler and RTS, RTSFLAGS are for RTS only, i.e.: `make
     CFLAGS="-O2" RTSFLAGS=-Wall'

     *Note*: The documentation may fail to build from *.texi sources if
     GCC 2.95.x tries to use an older version of `makeinfo' supplied in
     GCC package itself. This can be prevented by supplying explicit
     instruction to use your system's `makeinfo':

          % make MAKEINFO=`which makeinfo`

     optionally followed by the rest of arguments.

  6. Completing the installation

     When everything has been compiled, you can check the installation
     process with:

          % make -n install

     To complete the installation, run the command `make install'. You
     need write access to the target directories (`/usr/local/bin',
     `/usr/local/lib', `/usr/local/info', `/usr/local/doc', and
     `/usr/local/man' in this example), so this is usually done as
     `root':

          % su -c "make install"

     If you want to install _only_ the Pascal compiler (for example if
     you already have the correct version of GCC installed), `cd' to the
     `gcc' subdirectory of the build directory (e.g.
     `/home/fred/gpc-build/gcc') and run `make pascal.install'. This
     installation process does *not* overwrite existing copies of
     `libgcc.a' or `specs', should they exist.

     However, if you do not have the exactly matching GCC version
     installed, you might need some additional files (otherwise GPC will
     complain about missing files at runtime). You can install them by
     doing `make pascal.install-with-gcc' in the `gcc' subdirectory of
     the build directory.

     There is a (partial) translation of the GPC manual into Croatian
     available now. It is not installed by default. If you want to
     install it, do a `pascal.install-hr' in the `gcc' directory. This
     will install the manpage `gpc-hr.1' and the info documentation
     `gpc-hr.info*'. Other formats like PS, PDF and HTML can be built
     manually (it's also easy to add appropriate make targets for them
     when needed).

     Also from the `gcc' subdirectory you can do some more "exotic"
     builds. For instance, you can build the GPC WWW pages by typing
     `make pascal.html' or a binary distribution by typing `make
     pascal.bindist'. See the `Makefile' in that directory for more
     examples.


File: gpc-hr.info,  Node: Compilation Notes,  Next: Cross-Compilers,  Prev: Compiling GPC,  Up: Installation

Compilation notes for specific platforms
========================================

* Menu:

* MS-DOS with DJGPP::        The DJGPP port of GNU compilers to MS-DOS.
* MS-DOS or OS/2 with EMX::  The EMX port of GNU compilers to MS-DOS and OS/2.
* MS Windows 95/98/NT::      Installation on a Windows 95/98/NT system.


File: gpc-hr.info,  Node: MS-DOS with DJGPP,  Next: MS-DOS or OS/2 with EMX,  Up: Compilation Notes

MS-DOS with DJGPP
-----------------

   The only compiler that is capable of compiling the GNU Compiler
Collection (GNU CC or GCC) under MS-DOS is GCC itself. In order to
compile GPC or GCC for MS-DOS with DJGPP you will therefore need either
a working copy of DJGPP installed, or you will have to cross-build from
a non-MS-DOS system.

   Building GPC under MS-DOS with DJGPP follows the same scheme as
building GPC under a Unix-like system: Place the `p' subdirectory in the
`gcc' directory and follow the instructions for compiling GCC. This
requires `bash' and many other tools installed, and you must be very
careful at many places to circumvent the limitations of the DOS
platform.

   Our preferred way to build GPC for DJGPP is to cross-build it from a
Unix-like platform - which is much easier. For instructions, see *Note
Cross-Compilers:: and *Note Crossbuilding::.


File: gpc-hr.info,  Node: MS-DOS or OS/2 with EMX,  Next: MS Windows 95/98/NT,  Prev: MS-DOS with DJGPP,  Up: Compilation Notes

MS-DOS or OS/2 with EMX
-----------------------

   EMX is a free 32-bit DOS extender which adds some properties of Unix
to MS-compatible DOS and IBM's OS/2 operating systems.

   As of this writing, we are not aware of current versions of GCC for
EMX, and EMX support in GPC has not been maintained. Please contact us
if you know about recent development in EMX and are interested in
continuing EMX support in GPC.


File: gpc-hr.info,  Node: MS Windows 95/98/NT,  Prev: MS-DOS or OS/2 with EMX,  Up: Compilation Notes

MS Windows 95/98/NT
-------------------

   There are two ports of the GNU development tools to MS Windows
95/98/NT: CygWin and mingw32.

   The CygWin environment implements a POSIX layer under MS Windows,
giving it large parts of the functionality of Unix. Thus, compiling GCC
and GPC under the CygWin environment can be done following the
instructions for compiling it under a Unix-like system (see *Note
Compiling GPC::).

   The Minimalists' GNU Win32 environment, mingw32, uses the native
`crtdll.dll' library of MS Windows. It is much smaller than CygWin, but
it is not self-hosting and must be crossbuilt from another system (see
*Note Crossbuilding::).


File: gpc-hr.info,  Node: Cross-Compilers,  Next: Crossbuilding,  Prev: Compilation Notes,  Up: Installation

Building and Installing a cross-compiler
========================================

   GNU Pascal can function as a cross-compiler for many machines.
Information about GNU tools in a cross-configuration can be found at
`ftp://ftp.cygnus.com/pub/embedded/crossgcc/'.

   Since GNU Pascal generates assembler code, you need a cross-assembler
that GNU Pascal can run, in order to produce object files. If you want
to link on other than the target machine, you need a cross-linker as
well. It is straightforward to install the GNU binutils to act as
cross-tools - see the installation instructions of the GNU binutils for
details.

   You also need header files and libraries suitable for the target
machine that you can install on the host machine. Please install them
under `PREFIX/PLATFORM/include/', for instance
`/usr/local/i386-pc-msdosdjgpp/include/' for a cross-compiler from a
typical Unix-like environment to MS-DOS with DJGPP.

   Configuration and compilation of the compiler can then be done using
the scripts `cfgpc' and `mkgpc' which are included in the source
distribution in the subdirectory `p/script'. Please call them with the
`-h' option for instructions.


File: gpc-hr.info,  Node: Crossbuilding,  Prev: Cross-Compilers,  Up: Installation

Crossbuilding a compiler
========================

   Using a cross-compiler to build GNU Pascal results in a compiler
binary that runs on the cross-target platform. This is called
"crossbuilding". A possible reason why anybody would want to do this,
is when the platform on which you want to run the GNU Pascal compiler
is not self-hosting. An example is mingw32.

   To crossbuild GNU Pascal, you have to install a cross-compiler for
your target first, see *Note Cross-Compilers::.

   As when building a cross-compiler, configuration and compilation of
the compiler can be done using the scripts `cfgpc' and `mkgpc' which
are included in the source distribution in the subdirectory `p/script'.
Please call them with the `-h' option for instructions.


File: gpc-hr.info,  Node: Invoking GPC,  Next: Programming,  Prev: Installation,  Up: Top

Opcije u naredbenoj liniji koje podr¾ava GNU Pascal.
****************************************************

   (Pozivanje GPC-a).

   GPC je prevodilac (engl. compiler) koji se poziva iz naredbene
(komandne) linije tj. potrebno je pozvati `gpc' prosljeðujuæi mu ime
datoteke koju ¾elite da prevede, plus (eventualne) opcije.

   GPC podr¾ava sve opcije komandne linije (engl. command-line options)
koje poznaje GCC prevodilac, osim velikog broja opcija za preprocesor.
Za kompletni referentni popis i opis svih opcija pogledajte *Note GCC
Command Options: (gcc)Invoking GCC.  Ni¾e æete naæi listu dodatnih
opcija koje GPC podr¾ava, kao i listu najva¾nijih opcija koje GPC
podr¾ava (ukljuèujuæi i neke on onih koje podr¾ava jednako i GCC).

   Moguæe je mije¹ati opcije i imena datoteka u komandnoj liniji. U
veæini sluèajeva poredak nije bitan. Poredak postaje bitan npr. kad
koristite vi¹e opcija istog tipa; za primjer, ako navedete `-L' vi¹e
nego jednom, direktoriji (kazala) se pretra¾uju u poretku u kojem su
specificirani.  _Note:_ Kako mnoge opcije imaju vi¹eslovna imena,
vi¹estruke jednoslovne opcije _ne_ mogu se grupirati na naèin koji je
moguæ u mnogim drugim programima: `-dr' je vrlo razlièito od `-d -r'.

   Mnoge opcije imaju duga imena koja zapoèinju sa `--' ili, potpuno
ekvivalentno `-f'. Npr. `--mixed-comments' je isto ¹to i
`-fmixed-comments'. Neke opcije upuæuju GPC da daje upozorenja (engl.
warnings) tj. dijagnostièke poruke koje izvje¹tavaju o konstrukcijama
koje nisu same u sebi pogre¹ne, ali su riziène; ili mo¾e sugerirati da
je mo¾da do¹lo do pogre¹ke. Te opcije zapoèinju s `-W'.

   Veæina za GPC specifiènih opcija mogu takoðer biti promijenjene
tijekom jedne kompilacije kori¹tenjem naredbi prevodiocu (engl.
compiler directives) u izvornom kodu (engl. source), npr. `{$X+}' ili
`{$extended-syntax}' za `--extended-syntax' (*note Compiler
Directives::).

   GPC razumije iste varijable okoline (engl. environment variables)
koje razumije i GCC (*note Environment Variables Affecting GCC:
(gcc)Environment variables.).  Dodatno, GPC prepoznaje
`GPC_EXEC_PREFIX' sa istim znaèenjem koje `GCC_EXEC_PREFIX' ima za GCC.
GPC takoðer prepoznaje `GCC_EXEC_PREFIX', ali `GPC_EXEC_PREFIX' ima
veæi prioritet.

   Neke od dugih opcija (npr. `--unit-path') trebaju argument
(parametar).  Ovaj je parametar odvojen jednim `=' znakom, npr.

     --unit-path=/home/foo/units

* Menu:

* GPC Command Line Options::    GPC opcije komandne linije osim GCC-ovih.
* GPC Options::                 Najèe¹æe kori¹tene opcije GPC-a.

   (Napomena: naslovi poglavlja su neprevedeni zbog unakrsnih referenci
iz neprevedenih poglavlja priruènika i prema njima.)

@


1.1
log
@Initial revision
@
text
@@


1.1.2.1
log
@Import an alpha version of GNU Pascal Compiler into the tree
(not to be connected to the build before the upgrade to gcc 3.3).

We couldn't use gpc 2.1 because it's too old and doesn't support
gcc 3.x at all.
@
text
@@
