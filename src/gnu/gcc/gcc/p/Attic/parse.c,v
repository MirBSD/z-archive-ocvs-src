head	1.5;
access;
symbols
	gpc-20030830:1.1.2.1 FSF:1.1.2;
locks; strict;
comment	@ * @;


1.5
date	2004.08.13.04.53.24;	author tg;	state dead;
branches;
next	1.4;

1.4
date	2004.03.07.21.17.50;	author tg;	state Exp;
branches;
next	1.3;

1.3
date	2004.02.29.18.08.03;	author tg;	state Exp;
branches;
next	1.2;

1.2
date	2004.01.20.20.29.35;	author tg;	state dead;
branches;
next	1.1;

1.1
date	2004.01.11.18.00.24;	author tg;	state Exp;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2004.01.11.18.00.24;	author tg;	state Exp;
branches;
next	;


desc
@@


1.5
log
@no C++, Java(TM), Pascal, Objective C or Fortran 77 for a while
as discussed on the mailing list
@
text
@/* $MirBSD: src/gnu/gcc/gcc/p/parse.c,v 1.4 2004/03/07 21:17:50 tg Exp $
 * hand-edited: vsprintf -> vsnprintf
 */

/* A Bison parser, made by GNU Bison 1.875b.  */

/* Skeleton parser for GLR parsing with Bison,
   Copyright (C) 2002, 2003 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */

/* This is the parser code for GLR (Generalized LR) parser. */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdarg.h>
#include <setjmp.h>

/* Identify Bison output.  */
#define YYBISON 1

/* Skeleton name.  */
#define YYSKELETON_NAME "glr.c"

/* Pure parsers.  */
#define YYPURE 0

/* Using locations.  */
#define YYLSP_NEEDED 1



/* Tokens.  */
#ifndef YYTOKENTYPE
# define YYTOKENTYPE
   /* Put the tokens into the symbol table, so that GDB and other debuggers
      know about them.  */
   enum yytokentype {
     prec_if = 258,
     prec_lower_than_error = 259,
     prec_import = 260,
     p_operator = 261,
     p_destructor = 262,
     p_constructor = 263,
     p_implementation = 264,
     p_uses = 265,
     p_else = 266,
     p_and = 267,
     p_array = 268,
     p_begin = 269,
     p_case = 270,
     p_div = 271,
     p_do = 272,
     p_downto = 273,
     p_end = 274,
     p_file = 275,
     p_for = 276,
     p_function = 277,
     p_goto = 278,
     p_if = 279,
     p_in = 280,
     p_label = 281,
     p_mod = 282,
     p_nil = 283,
     p_not = 284,
     p_of = 285,
     p_or = 286,
     p_packed = 287,
     p_procedure = 288,
     p_to = 289,
     p_program = 290,
     p_record = 291,
     p_repeat = 292,
     p_set = 293,
     p_then = 294,
     p_type = 295,
     p_until = 296,
     p_var = 297,
     p_while = 298,
     p_with = 299,
     p_absolute = 300,
     p_abstract = 301,
     p_and_then = 302,
     p_as = 303,
     p_asm = 304,
     p_attribute = 305,
     p_bindable = 306,
     p_const = 307,
     p_external = 308,
     p_far = 309,
     p_finalization = 310,
     p_forward = 311,
     p_import = 312,
     p_inherited = 313,
     p_initialization = 314,
     p_is = 315,
     p_near = 316,
     p_object = 317,
     p_only = 318,
     p_otherwise = 319,
     p_or_else = 320,
     p_pow = 321,
     p_restricted = 322,
     p_shl = 323,
     p_shr = 324,
     p_unit = 325,
     p_value = 326,
     p_virtual = 327,
     p_xor = 328,
     p_asmname = 329,
     p_c = 330,
     p_c_language = 331,
     p_Addr = 332,
     p_Assigned = 333,
     p_Dispose = 334,
     p_FormatString = 335,
     p_New = 336,
     p_Return = 337,
     LEX_ID = 338,
     LEX_BUILTIN_PROCEDURE = 339,
     LEX_BUILTIN_PROCEDURE_WRITE = 340,
     LEX_BUILTIN_FUNCTION = 341,
     LEX_BUILTIN_FUNCTION_VT = 342,
     LEX_BUILTIN_VARIABLE = 343,
     LEX_INTCONST = 344,
     LEX_INTCONST_BASE = 345,
     LEX_STRCONST = 346,
     LEX_REALCONST = 347,
     LEX_CARET_WHITE = 348,
     LEX_CARET_LETTER = 349,
     BOGUS = 350,
     LEX_CONST_EQUAL = 351,
     LEX_RPAR = 352,
     LEX_BPPLUS = 353,
     LEX_BPMINUS = 354,
     LEX_RANGE = 355,
     LEX_ELLIPSIS = 356,
     LEX_RENAME = 357,
     LEX_SYMDIFF = 358,
     LEX_ASSIGN = 359,
     LEX_NE = 360,
     LEX_GE = 361,
     LEX_LE = 362,
     LEX_POWER = 363,
     LEX_CEIL_PLUS = 364,
     LEX_CEIL_MINUS = 365,
     LEX_FLOOR_PLUS = 366,
     LEX_FLOOR_MINUS = 367,
     LEX_CEIL_MULT = 368,
     LEX_CEIL_DIV = 369,
     LEX_FLOOR_MULT = 370,
     LEX_FLOOR_DIV = 371
   };
#endif
#define prec_if 258
#define prec_lower_than_error 259
#define prec_import 260
#define p_operator 261
#define p_destructor 262
#define p_constructor 263
#define p_implementation 264
#define p_uses 265
#define p_else 266
#define p_and 267
#define p_array 268
#define p_begin 269
#define p_case 270
#define p_div 271
#define p_do 272
#define p_downto 273
#define p_end 274
#define p_file 275
#define p_for 276
#define p_function 277
#define p_goto 278
#define p_if 279
#define p_in 280
#define p_label 281
#define p_mod 282
#define p_nil 283
#define p_not 284
#define p_of 285
#define p_or 286
#define p_packed 287
#define p_procedure 288
#define p_to 289
#define p_program 290
#define p_record 291
#define p_repeat 292
#define p_set 293
#define p_then 294
#define p_type 295
#define p_until 296
#define p_var 297
#define p_while 298
#define p_with 299
#define p_absolute 300
#define p_abstract 301
#define p_and_then 302
#define p_as 303
#define p_asm 304
#define p_attribute 305
#define p_bindable 306
#define p_const 307
#define p_external 308
#define p_far 309
#define p_finalization 310
#define p_forward 311
#define p_import 312
#define p_inherited 313
#define p_initialization 314
#define p_is 315
#define p_near 316
#define p_object 317
#define p_only 318
#define p_otherwise 319
#define p_or_else 320
#define p_pow 321
#define p_restricted 322
#define p_shl 323
#define p_shr 324
#define p_unit 325
#define p_value 326
#define p_virtual 327
#define p_xor 328
#define p_asmname 329
#define p_c 330
#define p_c_language 331
#define p_Addr 332
#define p_Assigned 333
#define p_Dispose 334
#define p_FormatString 335
#define p_New 336
#define p_Return 337
#define LEX_ID 338
#define LEX_BUILTIN_PROCEDURE 339
#define LEX_BUILTIN_PROCEDURE_WRITE 340
#define LEX_BUILTIN_FUNCTION 341
#define LEX_BUILTIN_FUNCTION_VT 342
#define LEX_BUILTIN_VARIABLE 343
#define LEX_INTCONST 344
#define LEX_INTCONST_BASE 345
#define LEX_STRCONST 346
#define LEX_REALCONST 347
#define LEX_CARET_WHITE 348
#define LEX_CARET_LETTER 349
#define BOGUS 350
#define LEX_CONST_EQUAL 351
#define LEX_RPAR 352
#define LEX_BPPLUS 353
#define LEX_BPMINUS 354
#define LEX_RANGE 355
#define LEX_ELLIPSIS 356
#define LEX_RENAME 357
#define LEX_SYMDIFF 358
#define LEX_ASSIGN 359
#define LEX_NE 360
#define LEX_GE 361
#define LEX_LE 362
#define LEX_POWER 363
#define LEX_CEIL_PLUS 364
#define LEX_CEIL_MINUS 365
#define LEX_FLOOR_PLUS 366
#define LEX_FLOOR_MINUS 367
#define LEX_CEIL_MULT 368
#define LEX_CEIL_DIV 369
#define LEX_FLOOR_MULT 370
#define LEX_FLOOR_DIV 371




/* Copy the first part of user declarations.  */
#line 66 "parse.y"

#include "gpc.h"

/* A few keywords of some dialects can be parsed as regular identifiers
   and checked from the parser actions => fewer special tokens. */
#define ASSERT_ID(id, location, pseudo_keyword) \
  do if (!IDENTIFIER_IS_BUILT_IN (id, pseudo_keyword) || !PD_ACTIVE (IDENTIFIER_BUILT_IN_VALUE (id))) \
    { yyerror_id (id, &location); YYERROR; } while (0)

/* Keep track of parenthesized expressions in case they're actually
   structured initializers. */
static int parentheses_count = 0;
static void iso_no_parentheses PARAMS ((tree));

enum { od_none, od_uses, od_label, od_const, od_type, od_var, od_routine };
static int check_decl_order PARAMS ((int, int));

extern int main_yyparse PARAMS ((void));
#define yyparse main_yyparse

union yyGLRStackItem;
static void locations PARAMS ((YYLTYPE *, union yyGLRStackItem*, int));
#define YYLLOC_DEFAULT(DEST, SRC, N) locations (&DEST, SRC, N)
#define LOCATION_NOTE(LOC) if (current_function_decl) emit_line_note ((LOC).first_file, (LOC).first_line)
#define COPYLOC(D, S) (* (YYLTYPE *) memcpy (&(D), &(S), sizeof (YYLTYPE)))

#define YYASSERT assert
#define YYMALLOC xmalloc
#define YYREALLOC xrealloc


/* Enabling traces.  */
#ifndef YYDEBUG
# define YYDEBUG 1
#endif

/* Enabling verbose error messages.  */
#ifdef YYERROR_VERBOSE
# undef YYERROR_VERBOSE
# define YYERROR_VERBOSE 1
#else
# define YYERROR_VERBOSE 0
#endif

#if ! defined (YYSTYPE) && ! defined (YYSTYPE_IS_DECLARED)
#line 103 "parse.y"
typedef union YYSTYPE {
  enum tree_code code;
  long itype;
  tree ttype;
} YYSTYPE;
/* Line 187 of glr.c.  */
#line 338 "parse.c"
# define YYSTYPE_IS_DECLARED 1
# define YYSTYPE_IS_TRIVIAL 1
#endif

#if ! defined (YYLTYPE) && ! defined (YYLTYPE_IS_DECLARED)
typedef struct YYLTYPE
{

  int first_line;
  int first_column;
  int last_line;
  int last_column;

} YYLTYPE;
# define YYLTYPE_IS_DECLARED 1
# define YYLTYPE_IS_TRIVIAL 1
#endif

/* Default (constant) values used for initialization for null
   right-hand sides.  Unlike the standard yacc.c template,
   here we set the default values of $$ and $@@ to zeroed-out
   values.  Since the default value of these quantities is undefined,
   this behavior is technically correct. */
static YYSTYPE yyval_default;
static YYLTYPE yyloc_default;

/* Copy the second part of user declarations.  */


/* Line 217 of glr.c.  */
#line 369 "parse.c"

#ifdef __cplusplus
   typedef bool yybool;
#else
   typedef unsigned char yybool;
#endif
#define yytrue 1
#define yyfalse 0

/*-----------------.
| GCC extensions.  |
`-----------------*/

#ifndef __attribute__
/* This feature is available in gcc versions 2.5 and later.  */
# if !defined (__GNUC__) || __GNUC__ < 2 || \
(__GNUC__ == 2 && __GNUC_MINOR__ < 5) || __STRICT_ANSI__
#  define __attribute__(Spec) /* empty */
# endif
#endif

#ifndef YYASSERT
# define YYASSERT(condition) ((void) ((condition) || (abort (), 0)))
#endif

#ifndef YYMALLOC
# define YYMALLOC malloc
#endif
#ifndef YYREALLOC
# define YYREALLOC realloc
#endif
#ifndef YYFREE
# define YYFREE free
#endif

#ifdef YYSTACK_USE_ALLOCA
# if YYSTACK_USE_ALLOCA
#  define YYSTACK_ALLOC alloca
# endif
#else
# if defined (alloca) || defined (_ALLOCA_H)
#  define YYSTACK_ALLOC alloca
# else
#  ifdef __GNUC__
#   define YYSTACK_ALLOC __builtin_alloca
#  endif
# endif
#endif

#ifdef YYSTACK_ALLOC
  /* Pacify GCC's `empty if-body' warning. */
# define YYSTACK_FREE(Ptr) do { /* empty */; } while (0)
#else
# if defined (__STDC__) || defined (__cplusplus)
#  include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#  define YYSIZE_T size_t
# endif
# define YYSTACK_ALLOC YYMALLOC
# define YYSTACK_FREE YYFREE
#endif

#ifndef ATTRIBUTE_UNUSED
# define ATTRIBUTE_UNUSED __attribute__ ((__unused__))
#endif

/* YYFINAL -- State number of the termination state. */
#define YYFINAL  68
/* YYLAST -- Last index in YYTABLE.  */
#define YYLAST   7961

/* YYNTOKENS -- Number of terminals. */
#define YYNTOKENS  134
/* YYNNTS -- Number of nonterminals. */
#define YYNNTS  307
/* YYNRULES -- Number of rules. */
#define YYNRULES  817
/* YYNRULES -- Number of states. */
#define YYNSTATES  1334
/* YYMAXRHS -- Maximum number of symbols on right-hand side of rule. */
#define YYMAXRHS 12
/* YYMAXLEFT -- Maximum number of symbols to the left of a handle
   accessed by $0, $-1, etc., in any rule. */
#define YYMAXLEFT 0

/* YYTRANSLATE(X) -- Bison symbol number corresponding to X.  */
#define YYUNDEFTOK  2
#define YYMAXUTOK   371

#define YYTRANSLATE(YYX) 						\
  ((YYX <= 0) ? YYEOF :							\
   (unsigned)(YYX) <= YYMAXUTOK ? yytranslate[YYX] : YYUNDEFTOK)

/* YYTRANSLATE[YYLEX] -- Bison symbol number corresponding to YYLEX.  */
static const unsigned char yytranslate[] =
{
       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     118,   123,   128,   126,   119,   127,   122,   129,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,   120,   117,
     130,   131,   132,     2,   133,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,   124,     2,   125,   121,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     2,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116
};

#if YYDEBUG
/* YYPRHS[YYN] -- Index of the first RHS symbol of rule number YYN in
   YYRHS.  */
static const unsigned short yyprhs[] =
{
       0,     0,     3,     4,     6,     7,     8,    17,    19,    20,
      25,    30,    31,    34,    36,    38,    39,    42,    43,    46,
      50,    52,    55,    58,    59,    64,    67,    68,    69,    82,
      84,    86,    87,    91,    92,    93,   103,   104,   111,   112,
     113,   122,   123,   131,   132,   140,   141,   145,   147,   151,
     153,   156,   157,   160,   162,   164,   166,   167,   170,   172,
     173,   176,   178,   179,   180,   187,   188,   191,   193,   195,
     196,   203,   204,   211,   212,   215,   218,   221,   222,   228,
     230,   232,   236,   238,   240,   244,   248,   252,   255,   257,
     261,   263,   267,   269,   273,   277,   281,   282,   284,   288,
     290,   295,   297,   299,   303,   305,   309,   313,   316,   320,
     324,   326,   329,   330,   331,   336,   338,   342,   346,   350,
     352,   356,   360,   365,   366,   368,   370,   374,   379,   381,
     384,   386,   390,   392,   396,   400,   403,   405,   409,   411,
     415,   419,   422,   424,   426,   428,   430,   432,   434,   437,
     439,   444,   453,   455,   457,   459,   461,   463,   465,   467,
     469,   471,   473,   475,   477,   480,   482,   484,   486,   488,
     490,   492,   494,   496,   498,   500,   502,   504,   506,   508,
     510,   512,   514,   516,   518,   521,   523,   527,   529,   533,
     537,   540,   546,   547,   554,   558,   559,   569,   573,   577,
     579,   583,   587,   591,   594,   598,   600,   603,   605,   608,
     610,   613,   615,   618,   621,   623,   625,   627,   629,   631,
     634,   636,   638,   640,   644,   648,   650,   654,   656,   660,
     664,   666,   668,   672,   676,   680,   682,   684,   686,   688,
     690,   692,   694,   696,   700,   704,   708,   711,   713,   716,
     719,   722,   725,   727,   731,   735,   740,   743,   746,   749,
     753,   755,   757,   759,   762,   766,   767,   771,   777,   781,
     783,   787,   791,   796,   802,   806,   811,   814,   816,   818,
     820,   822,   824,   826,   833,   835,   839,   841,   845,   849,
     852,   854,   856,   858,   863,   865,   867,   871,   875,   879,
     883,   884,   887,   891,   893,   895,   899,   903,   907,   910,
     914,   921,   925,   929,   931,   933,   935,   936,   942,   944,
     948,   952,   954,   957,   963,   965,   969,   973,   977,   980,
     982,   986,   990,   994,   998,  1000,  1002,  1004,  1008,  1012,
    1014,  1017,  1019,  1021,  1024,  1028,  1032,  1036,  1042,  1046,
    1050,  1052,  1055,  1057,  1059,  1061,  1064,  1065,  1074,  1076,
    1078,  1082,  1084,  1087,  1088,  1094,  1096,  1100,  1103,  1105,
    1110,  1112,  1116,  1118,  1120,  1122,  1126,  1131,  1138,  1140,
    1142,  1144,  1146,  1149,  1152,  1154,  1155,  1159,  1162,  1163,
    1166,  1168,  1170,  1174,  1176,  1178,  1182,  1184,  1186,  1188,
    1190,  1194,  1198,  1202,  1204,  1206,  1208,  1210,  1214,  1218,
    1220,  1224,  1228,  1232,  1234,  1236,  1239,  1242,  1246,  1250,
    1251,  1252,  1261,  1263,  1265,  1269,  1275,  1281,  1287,  1295,
    1301,  1307,  1309,  1311,  1315,  1318,  1322,  1323,  1330,  1337,
    1344,  1348,  1351,  1354,  1356,  1360,  1364,  1366,  1368,  1370,
    1372,  1374,  1377,  1379,  1380,  1382,  1385,  1387,  1389,  1392,
    1394,  1396,  1400,  1406,  1410,  1414,  1416,  1420,  1424,  1428,
    1432,  1437,  1442,  1446,  1448,  1452,  1458,  1460,  1462,  1463,
    1466,  1468,  1470,  1472,  1474,  1481,  1489,  1491,  1493,  1495,
    1499,  1503,  1507,  1513,  1517,  1519,  1521,  1527,  1529,  1533,
    1537,  1541,  1542,  1544,  1546,  1548,  1551,  1554,  1556,  1558,
    1560,  1562,  1564,  1566,  1568,  1570,  1572,  1574,  1576,  1579,
    1582,  1585,  1590,  1592,  1596,  1598,  1602,  1606,  1608,  1612,
    1613,  1619,  1621,  1622,  1627,  1628,  1629,  1639,  1640,  1645,
    1647,  1649,  1651,  1655,  1657,  1661,  1665,  1666,  1673,  1674,
    1675,  1684,  1685,  1686,  1695,  1696,  1708,  1709,  1719,  1721,
    1723,  1725,  1726,  1730,  1732,  1735,  1737,  1740,  1742,  1744,
    1747,  1749,  1754,  1759,  1760,  1768,  1770,  1773,  1775,  1776,
    1781,  1783,  1787,  1789,  1793,  1795,  1799,  1803,  1807,  1809,
    1813,  1819,  1825,  1833,  1843,  1855,  1856,  1858,  1860,  1862,
    1864,  1868,  1873,  1875,  1879,  1881,  1883,  1885,  1889,  1891,
    1893,  1896,  1900,  1904,  1905,  1910,  1911,  1916,  1918,  1922,
    1926,  1927,  1932,  1933,  1938,  1940,  1944,  1948,  1952,  1956,
    1960,  1963,  1966,  1968,  1970,  1972,  1974,  1977,  1979,  1981,
    1983,  1986,  1990,  1994,  1997,  2002,  2003,  2009,  2014,  2019,
    2020,  2026,  2031,  2036,  2041,  2042,  2050,  2052,  2054,  2056,
    2060,  2062,  2066,  2070,  2072,  2076,  2079,  2083,  2085,  2089,
    2093,  2097,  2099,  2103,  2105,  2107,  2109,  2111,  2113,  2115,
    2117,  2119,  2121,  2123,  2125,  2127,  2129,  2131,  2133,  2135,
    2137,  2139,  2141,  2143,  2145,  2147,  2150,  2152,  2154,  2156,
    2158,  2160,  2162,  2164,  2166,  2168,  2170,  2172,  2175,  2177,
    2179,  2181,  2183,  2185,  2187,  2189,  2191,  2193,  2195,  2197,
    2199,  2201,  2203,  2205,  2207,  2209,  2211,  2213,  2215,  2217,
    2219,  2221,  2223,  2225,  2227,  2229,  2231,  2233,  2235,  2237,
    2239,  2241,  2243,  2245,  2247,  2249,  2251,  2253,  2255,  2257,
    2259,  2261,  2263,  2265,  2267,  2269,  2271,  2273,  2275,  2277,
    2279,  2281,  2283,  2285,  2287,  2289,  2291,  2293,  2295,  2297,
    2299,  2301,  2303,  2305,  2307,  2309,  2311,  2313,  2315,  2317,
    2319,  2321,  2323,  2325,  2327,  2329,  2331,  2333,  2335,  2337,
    2339,  2341,  2343,  2345,  2347,  2349,  2351,  2353,  2355,  2356,
    2357,  2358,  2359,  2361,  2362,  2364,  2366,  2368,  2370,  2372,
    2374,  2376,  2378,  2380,  2382,  2384,  2386,  2387
};

/* YYRHS -- A `-1'-separated list of the rules' RHS. */
static const short yyrhs[] =
{
     135,     0,    -1,    -1,   136,    -1,    -1,    -1,   139,   165,
     137,   195,   140,   138,   333,   438,    -1,   148,    -1,    -1,
      35,   419,   183,   117,    -1,    35,     1,   183,   117,    -1,
      -1,   140,   141,    -1,   198,    -1,   143,    -1,    -1,   142,
     143,    -1,    -1,   144,   145,    -1,    26,   206,   117,    -1,
     303,    -1,   430,   146,    -1,    52,   210,    -1,    -1,    40,
     147,   220,   117,    -1,    42,   275,    -1,    -1,    -1,    70,
     419,   117,   165,    83,   149,   195,   166,   150,   162,    19,
     438,    -1,   155,    -1,   160,    -1,    -1,   155,   151,   160,
      -1,    -1,    -1,   163,   419,   164,   152,   158,   117,   153,
     171,   438,    -1,    -1,   163,   419,   164,   154,   171,   438,
      -1,    -1,    -1,   163,   419,    83,   156,   164,   157,   158,
     438,    -1,    -1,    83,   159,   187,   117,   195,   166,    19,
      -1,    -1,   163,   419,     9,   117,   161,   171,   438,    -1,
      -1,     9,   140,   181,    -1,    83,    -1,   183,   117,   165,
      -1,   439,    -1,   283,   117,    -1,    -1,   166,   167,    -1,
     198,    -1,   145,    -1,   302,    -1,    -1,   168,   169,    -1,
     198,    -1,    -1,   170,   145,    -1,   303,    -1,    -1,    -1,
     172,   195,   168,   173,   174,    19,    -1,    -1,   175,   177,
      -1,   175,    -1,   177,    -1,    -1,    34,    14,    17,   176,
     336,   117,    -1,    -1,    34,    19,    17,   178,   336,   117,
      -1,    -1,   180,   334,    -1,    14,   179,    -1,    59,   179,
      -1,    -1,    59,   179,    55,   182,   334,    -1,   174,    -1,
     439,    -1,   118,   184,   437,    -1,   185,    -1,   419,    -1,
     185,   119,   419,    -1,   185,     1,   419,    -1,   185,   119,
       1,    -1,   185,     1,    -1,   423,    -1,   186,   119,   423,
      -1,   188,    -1,   187,   117,   188,    -1,     1,    -1,   187,
       1,   188,    -1,   187,   117,     1,    -1,   423,   189,   190,
      -1,    -1,   435,    -1,   118,   192,   436,    -1,   191,    -1,
     191,   118,   192,   436,    -1,    83,    -1,   193,    -1,   192,
     119,   193,    -1,     1,    -1,   192,     1,   193,    -1,   192,
     119,     1,    -1,   419,   194,    -1,   419,   100,   419,    -1,
     432,   419,   194,    -1,   439,    -1,   102,   419,    -1,    -1,
      -1,   196,    57,   197,   117,    -1,   200,    -1,   197,   117,
     200,    -1,   197,     1,   200,    -1,    10,   199,   117,    -1,
     200,    -1,   199,   119,   200,    -1,   199,     1,   200,    -1,
     419,   201,   202,   203,    -1,    -1,    83,    -1,   439,    -1,
     118,   204,   436,    -1,    63,   118,   204,   436,    -1,   439,
      -1,    25,   387,    -1,   205,    -1,   204,   119,   205,    -1,
       1,    -1,   204,     1,   205,    -1,   204,   119,     1,    -1,
     419,   194,    -1,   207,    -1,   206,   119,   207,    -1,     1,
      -1,   206,     1,   207,    -1,   206,   119,     1,    -1,   206,
       1,    -1,   209,    -1,   419,    -1,   209,    -1,   426,    -1,
      89,    -1,   211,    -1,   210,   211,    -1,     1,    -1,   423,
     435,   384,   117,    -1,   423,   431,   120,   227,    96,   290,
     281,   117,    -1,   213,    -1,    92,    -1,    89,    -1,    90,
      -1,   215,    -1,   212,    -1,    28,    -1,   219,    -1,   439,
      -1,   215,    -1,    91,    -1,    93,    -1,   121,   218,    -1,
      94,    -1,   119,    -1,   122,    -1,   120,    -1,   117,    -1,
     118,    -1,   123,    -1,   124,    -1,   125,    -1,   126,    -1,
     127,    -1,   128,    -1,   129,    -1,   130,    -1,   131,    -1,
     132,    -1,   133,    -1,   121,    -1,   217,    -1,   219,   217,
      -1,   221,    -1,   220,   117,   221,    -1,     1,    -1,   220,
       1,   221,    -1,   220,   117,     1,    -1,   220,     1,    -1,
     423,   431,   435,   227,   287,    -1,    -1,   421,   224,   435,
     222,   227,   287,    -1,   421,   224,     1,    -1,    -1,   423,
     431,   435,   223,   270,    62,   271,   272,    19,    -1,   118,
     225,   436,    -1,   118,     1,   436,    -1,   226,    -1,   225,
     117,   226,    -1,   225,     1,   226,    -1,   225,   117,     1,
      -1,   225,     1,    -1,   184,   120,   234,    -1,   229,    -1,
     227,   283,    -1,   229,    -1,   430,   230,    -1,   231,    -1,
      51,   231,    -1,   233,    -1,    67,   233,    -1,   234,   235,
      -1,   269,    -1,   237,    -1,   243,    -1,   245,    -1,   249,
      -1,   232,   249,    -1,    32,    -1,   234,    -1,   426,    -1,
     118,   236,   436,    -1,   124,   387,   125,    -1,   387,    -1,
     236,   119,   387,    -1,     1,    -1,   236,     1,   387,    -1,
     236,   119,     1,    -1,   238,    -1,   242,    -1,   118,   240,
     123,    -1,   118,   239,    95,    -1,   118,     1,   436,    -1,
      83,    -1,   427,    -1,    54,    -1,    61,    -1,    56,    -1,
      86,    -1,    88,    -1,   419,    -1,   240,   119,   419,    -1,
     240,     1,   419,    -1,   240,   119,     1,    -1,   240,     1,
      -1,   425,    -1,   409,   425,    -1,   409,   212,    -1,   408,
     425,    -1,   408,   212,    -1,   214,    -1,   118,   387,    97,
      -1,   241,   100,   387,    -1,   232,   387,   100,   387,    -1,
     133,   244,    -1,   121,   244,    -1,    93,   244,    -1,   434,
      52,   244,    -1,   419,    -1,   245,    -1,   254,    -1,    33,
     246,    -1,    22,   246,   319,    -1,    -1,   118,   101,   436,
      -1,   118,   247,   117,   101,   436,    -1,   118,   247,   436,
      -1,   248,    -1,   247,   117,   248,    -1,   184,   120,   332,
      -1,   432,   184,   120,   332,    -1,   324,    42,   184,   120,
     332,    -1,   324,    42,   184,    -1,    52,   184,   120,   332,
      -1,    52,   184,    -1,     1,    -1,   250,    -1,   253,    -1,
     256,    -1,   257,    -1,   440,    -1,    13,   124,   251,   125,
      30,   228,    -1,   252,    -1,   251,   119,   252,    -1,     1,
      -1,   251,     1,   252,    -1,   251,   119,     1,    -1,   251,
       1,    -1,   237,    -1,   234,    -1,   254,    -1,    20,   255,
      30,   228,    -1,    20,    -1,   439,    -1,   124,   252,   125,
      -1,    38,    30,   228,    -1,    36,   258,    19,    -1,    36,
       1,    19,    -1,    -1,   259,   433,    -1,   259,   117,   261,
      -1,   261,    -1,   260,    -1,   259,   117,   260,    -1,   259,
       1,   260,    -1,   259,   117,     1,    -1,   259,     1,    -1,
     184,   120,   228,    -1,    15,   262,    30,   265,   433,   264,
      -1,   419,   120,   234,    -1,   419,   120,   263,    -1,   426,
      -1,   263,    -1,   237,    -1,    -1,   352,   118,   258,   436,
     433,    -1,   266,    -1,   265,   117,   266,    -1,   265,     1,
     266,    -1,     1,    -1,   265,     1,    -1,   267,   120,   118,
     258,   436,    -1,   268,    -1,   267,   119,   268,    -1,   267,
     119,     1,    -1,   267,     1,   268,    -1,   267,     1,    -1,
     384,    -1,   384,   100,   384,    -1,   384,     1,   384,    -1,
     384,   100,     1,    -1,    40,    30,   387,    -1,   439,    -1,
      46,    -1,   439,    -1,   118,   234,   436,    -1,   118,     1,
     436,    -1,   273,    -1,   273,   274,    -1,     1,    -1,   439,
      -1,   273,    83,    -1,   273,   274,   117,    -1,   184,   120,
     228,    -1,    33,   419,   320,    -1,    22,   419,   320,   316,
     319,    -1,     8,   419,   320,    -1,     7,   419,   320,    -1,
      72,    -1,    72,   387,    -1,    46,    -1,   283,    -1,   276,
      -1,   275,   276,    -1,    -1,   186,   431,   120,   227,   277,
     288,   278,   117,    -1,     1,    -1,   439,    -1,   278,   117,
     279,    -1,   282,    -1,    53,   216,    -1,    -1,    53,   216,
      83,   280,   387,    -1,   439,    -1,   281,   117,   282,    -1,
      74,   387,    -1,   283,    -1,    50,   118,   284,   436,    -1,
     285,    -1,   284,   119,   285,    -1,   439,    -1,    52,    -1,
     419,    -1,   419,   435,   387,    -1,   419,   118,   387,   436,
      -1,   419,   118,   426,   119,   387,   436,    -1,    71,    -1,
     104,    -1,    96,    -1,   439,    -1,   286,   290,    -1,   286,
       1,    -1,   287,    -1,    -1,    45,   289,   387,    -1,    45,
       1,    -1,    -1,   291,   292,    -1,   293,    -1,   298,    -1,
     118,   294,   436,    -1,   387,    -1,   439,    -1,   118,   294,
     436,    -1,   295,    -1,   298,    -1,   300,    -1,     1,    -1,
     297,   296,   297,    -1,   295,   296,   297,    -1,   295,     1,
     297,    -1,   117,    -1,   119,    -1,   292,    -1,   300,    -1,
     124,   299,   125,    -1,   124,     1,   125,    -1,   300,    -1,
     299,   117,   300,    -1,   299,     1,   300,    -1,   301,   120,
     292,    -1,   419,    -1,   213,    -1,   409,   213,    -1,   408,
     213,    -1,   307,   117,   309,    -1,   306,   117,   310,    -1,
      -1,    -1,   306,   117,   313,   304,   142,   305,   333,   117,
      -1,   307,    -1,   308,    -1,    33,   419,   320,    -1,    22,
     419,   320,   316,   319,    -1,     6,   315,   320,   318,   319,
      -1,    33,   419,   122,   419,   320,    -1,    22,   419,   122,
     419,   320,   316,   319,    -1,     8,   419,   122,   419,   320,
      -1,     7,   419,   122,   419,   320,    -1,   313,    -1,   310,
      -1,   313,   311,   313,    -1,    56,   117,    -1,    53,   216,
     117,    -1,    -1,    53,   216,    83,   312,   387,   117,    -1,
      53,   216,   117,    74,   387,   117,    -1,    74,   387,   117,
      53,   216,   117,    -1,    74,   387,   117,    -1,    75,   117,
      -1,    76,   117,    -1,   439,    -1,   313,   283,   117,    -1,
     313,   314,   117,    -1,    54,    -1,    61,    -1,   419,    -1,
     418,    -1,   439,    -1,   317,   419,    -1,   435,    -1,    -1,
     419,    -1,   435,   419,    -1,   439,    -1,   335,    -1,   120,
     233,    -1,   440,    -1,   439,    -1,   118,   321,   436,    -1,
     118,   321,   117,   101,   436,    -1,   118,   101,   436,    -1,
     118,     1,   436,    -1,   322,    -1,   321,   117,   322,    -1,
     321,     1,   322,    -1,   321,   117,     1,    -1,   184,   120,
     326,    -1,   432,   184,   120,   326,    -1,   324,    42,   184,
     325,    -1,    52,   184,   325,    -1,   323,    -1,    33,   419,
     320,    -1,    22,   419,   320,   316,   319,    -1,   439,    -1,
     432,    -1,    -1,   120,   326,    -1,   332,    -1,   269,    -1,
     327,    -1,   331,    -1,    13,   124,   329,   125,    30,   328,
      -1,   232,    13,   124,   330,   125,    30,   234,    -1,   234,
      -1,   327,    -1,   330,    -1,   329,   117,   330,    -1,   329,
       1,   330,    -1,   329,   117,     1,    -1,   419,   100,   419,
     120,   234,    -1,    13,    30,   332,    -1,   234,    -1,   254,
      -1,    14,   428,   334,   429,    19,    -1,   336,    -1,   334,
     117,   336,    -1,   334,     1,   336,    -1,   334,   117,     1,
      -1,    -1,   335,    -1,   337,    -1,   339,    -1,   339,   338,
      -1,   340,   336,    -1,   338,    -1,   333,    -1,   366,    -1,
     371,    -1,   378,    -1,   341,    -1,   346,    -1,   348,    -1,
     356,    -1,   359,    -1,   362,    -1,    23,   208,    -1,   208,
     120,    -1,    42,   276,    -1,    44,   342,    17,   336,    -1,
     343,    -1,   342,   119,   343,    -1,     1,    -1,   342,     1,
     343,    -1,   342,   119,     1,    -1,   386,    -1,   386,   120,
     419,    -1,    -1,    24,   385,    39,   345,   336,    -1,   344,
      -1,    -1,   344,    11,   347,   336,    -1,    -1,    -1,    15,
     387,    30,   349,   353,   433,   350,   351,    19,    -1,    -1,
     352,   428,   334,   429,    -1,    11,    -1,    64,    -1,   354,
      -1,   353,   117,   354,    -1,     1,    -1,   353,     1,   354,
      -1,   353,   117,     1,    -1,    -1,   267,   120,   355,   428,
     336,   429,    -1,    -1,    -1,    37,   357,   428,   334,    41,
     358,   385,   429,    -1,    -1,    -1,    43,   360,   428,   385,
     361,    17,   336,   429,    -1,    -1,    21,   396,   370,   387,
     365,   387,   363,    17,   428,   336,   429,    -1,    -1,    21,
     396,    25,   387,   364,    17,   428,   336,   429,    -1,    34,
      -1,    18,    -1,     1,    -1,    -1,   368,   367,   369,    -1,
     397,    -1,   133,   397,    -1,   439,    -1,   370,   387,    -1,
     104,    -1,   435,    -1,   417,   373,    -1,    85,    -1,    85,
     118,   376,   437,    -1,    79,   118,   387,   437,    -1,    -1,
      79,   118,   387,   119,   372,   375,   437,    -1,    82,    -1,
      82,   387,    -1,   439,    -1,    -1,   374,   118,   375,   437,
      -1,   387,    -1,   375,   119,   387,    -1,     1,    -1,   375,
     119,     1,    -1,   377,    -1,   376,   119,   377,    -1,   376,
       1,   377,    -1,   376,   119,     1,    -1,   387,    -1,   387,
     120,   387,    -1,   387,   120,   387,   120,   387,    -1,    49,
     379,   118,   219,   436,    -1,    49,   379,   118,   219,   120,
     380,   436,    -1,    49,   379,   118,   219,   120,   380,   120,
     380,   436,    -1,    49,   379,   118,   219,   120,   380,   120,
     380,   120,   383,   436,    -1,    -1,    83,    -1,   439,    -1,
     381,    -1,   382,    -1,   381,   119,   382,    -1,   215,   118,
     387,   436,    -1,   215,    -1,   383,   119,   215,    -1,   387,
      -1,   387,    -1,   387,    -1,   388,   410,   388,    -1,   388,
      -1,   391,    -1,   408,   391,    -1,   388,   411,   391,    -1,
     388,   412,   391,    -1,    -1,   388,    31,   389,   391,    -1,
      -1,   388,   413,   390,   391,    -1,   394,    -1,   391,   414,
     394,    -1,   391,   415,   394,    -1,    -1,   391,    12,   392,
     394,    -1,    -1,   391,   416,   393,   394,    -1,   395,    -1,
     394,   426,   395,    -1,   395,    66,   395,    -1,   395,   108,
     395,    -1,   394,    60,   234,    -1,   394,    48,   234,    -1,
     409,   395,    -1,   133,   395,    -1,   214,    -1,   405,    -1,
     397,    -1,   397,    -1,    86,   373,    -1,    88,    -1,   398,
      -1,   425,    -1,    58,   419,    -1,   396,   122,   419,    -1,
     118,   387,   436,    -1,   396,   434,    -1,   396,   124,   403,
     125,    -1,    -1,   398,   118,   399,   375,   437,    -1,   254,
     118,   387,   436,    -1,    80,   118,   376,   436,    -1,    -1,
      78,   400,   118,   387,   436,    -1,    77,   118,   397,   436,
      -1,    87,   118,   402,   436,    -1,    81,   118,   402,   436,
      -1,    -1,    81,   118,   402,   119,   401,   375,   436,    -1,
     397,    -1,   254,    -1,   404,    -1,   403,   119,   404,    -1,
       1,    -1,   403,     1,   404,    -1,   403,   119,     1,    -1,
     387,    -1,   387,   100,   387,    -1,   124,   125,    -1,   124,
     406,   125,    -1,   407,    -1,   406,   119,   407,    -1,   406,
       1,   407,    -1,   406,   119,     1,    -1,   387,    -1,   387,
     100,   387,    -1,   126,    -1,   127,    -1,    98,    -1,    99,
      -1,    29,    -1,   105,    -1,   107,    -1,   106,    -1,   131,
      -1,   130,    -1,   132,    -1,    25,    -1,   126,    -1,    98,
      -1,   127,    -1,    99,    -1,    73,    -1,   103,    -1,   109,
      -1,   110,    -1,   111,    -1,   112,    -1,    31,    11,    -1,
      65,    -1,   128,    -1,   129,    -1,    16,    -1,    27,    -1,
      68,    -1,    69,    -1,   113,    -1,   114,    -1,   115,    -1,
     116,    -1,    12,    39,    -1,    47,    -1,    84,    -1,    12,
      -1,    31,    -1,    29,    -1,    73,    -1,    68,    -1,    69,
      -1,   126,    -1,    98,    -1,   127,    -1,    99,    -1,   128,
      -1,   129,    -1,    16,    -1,    27,    -1,   108,    -1,    25,
      -1,   130,    -1,   435,    -1,   132,    -1,   105,    -1,   106,
      -1,   107,    -1,    12,    -1,    31,    -1,   103,    -1,   415,
      -1,   412,    -1,   420,    -1,   422,    -1,     8,    -1,     7,
      -1,    53,    -1,     9,    -1,    57,    -1,    59,    -1,     6,
      -1,    10,    -1,   422,    -1,   423,    -1,    74,    -1,    50,
      -1,   424,    -1,    83,    -1,   427,    -1,    54,    -1,    56,
      -1,    61,    -1,    86,    -1,    88,    -1,    84,    -1,    85,
      -1,    87,    -1,    82,    -1,    77,    -1,    78,    -1,    81,
      -1,    79,    -1,    80,    -1,    45,    -1,    46,    -1,    47,
      -1,    48,    -1,    49,    -1,    51,    -1,    75,    -1,    76,
      -1,    55,    -1,    58,    -1,    60,    -1,    62,    -1,    63,
      -1,    65,    -1,    64,    -1,    66,    -1,    67,    -1,    68,
      -1,    69,    -1,    70,    -1,    71,    -1,    72,    -1,    73,
      -1,   426,    -1,    83,    -1,   427,    -1,    54,    -1,    56,
      -1,    61,    -1,    94,    -1,    -1,    -1,    -1,    -1,    83,
      -1,    -1,   117,    -1,   121,    -1,    93,    -1,   133,    -1,
     131,    -1,    96,    -1,   123,    -1,    97,    -1,   436,    -1,
       1,    -1,   122,    -1,     1,    -1,    -1,     1,    -1
};

/* YYRLINE[YYN] -- source line where rule number YYN was defined.  */
static const unsigned short yyrline[] =
{
       0,   237,   237,   238,   250,   252,   249,   255,   261,   262,
     264,   270,   271,   276,   277,   282,   283,   288,   288,   291,
     293,   298,   308,   311,   310,   314,   320,   322,   319,   330,
     331,   333,   332,   344,   346,   343,   352,   351,   358,   360,
     357,   367,   366,   374,   373,   379,   380,   384,   389,   394,
     395,   400,   401,   406,   407,   408,   414,   415,   420,   421,
     421,   424,   429,   431,   429,   435,   437,   438,   439,   444,
     443,   451,   450,   457,   457,   463,   464,   466,   465,   469,
     473,   474,   479,   498,   500,   502,   508,   510,   514,   516,
     521,   522,   524,   526,   528,   533,   539,   540,   544,   546,
     547,   552,   557,   558,   560,   562,   564,   569,   571,   573,
     581,   582,   588,   589,   589,   594,   595,   596,   601,   606,
     607,   608,   613,   619,   620,   625,   626,   628,   633,   634,
     639,   640,   642,   644,   646,   651,   658,   660,   662,   664,
     666,   668,   672,   673,   680,   681,   685,   692,   693,   694,
     698,   700,   709,   710,   714,   715,   719,   720,   721,   726,
     731,   732,   736,   737,   738,   743,   744,   744,   744,   744,
     744,   744,   744,   744,   745,   745,   745,   745,   745,   745,
     745,   745,   745,   749,   751,   758,   759,   761,   762,   764,
     766,   770,   781,   780,   792,   795,   794,   817,   819,   824,
     825,   827,   829,   831,   835,   840,   841,   846,   856,   866,
     867,   876,   877,   887,   889,   890,   891,   892,   894,   895,
     903,   908,   920,   934,   936,   944,   949,   954,   956,   962,
     969,   970,   976,   978,   980,   985,   986,   987,   988,   989,
     990,   991,   995,   997,   999,  1001,  1003,  1007,  1008,  1010,
    1012,  1014,  1016,  1017,  1022,  1024,  1034,  1036,  1038,  1040,
    1051,  1067,  1073,  1079,  1086,  1102,  1103,  1105,  1107,  1112,
    1113,  1118,  1120,  1122,  1124,  1126,  1128,  1130,  1140,  1141,
    1142,  1143,  1144,  1148,  1153,  1154,  1156,  1161,  1163,  1165,
    1171,  1173,  1178,  1180,  1185,  1190,  1191,  1196,  1201,  1203,
    1209,  1210,  1212,  1214,  1219,  1220,  1222,  1224,  1226,  1230,
    1235,  1240,  1242,  1244,  1246,  1251,  1257,  1258,  1263,  1264,
    1266,  1268,  1270,  1274,  1279,  1280,  1282,  1284,  1286,  1290,
    1292,  1297,  1303,  1311,  1321,  1322,  1326,  1327,  1329,  1334,
    1335,  1337,  1342,  1343,  1345,  1350,  1352,  1354,  1356,  1358,
    1360,  1362,  1364,  1366,  1372,  1373,  1378,  1377,  1404,  1409,
    1410,  1415,  1416,  1419,  1418,  1425,  1426,  1431,  1433,  1438,
    1443,  1444,  1449,  1450,  1452,  1454,  1456,  1458,  1463,  1464,
    1466,  1471,  1472,  1474,  1479,  1481,  1480,  1488,  1508,  1508,
    1520,  1522,  1523,  1531,  1547,  1548,  1550,  1552,  1553,  1554,
    1562,  1564,  1566,  1571,  1572,  1577,  1578,  1582,  1587,  1596,
    1597,  1599,  1604,  1609,  1610,  1611,  1613,  1727,  1738,  1741,
    1743,  1740,  1755,  1756,  1760,  1762,  1764,  1774,  1776,  1778,
    1780,  1785,  1786,  1790,  1795,  1797,  1800,  1799,  1803,  1805,
    1807,  1809,  1811,  1816,  1817,  1819,  1827,  1828,  1832,  1833,
    1837,  1838,  1843,  1845,  1849,  1850,  1852,  1857,  1859,  1861,
    1865,  1866,  1868,  1873,  1878,  1883,  1884,  1886,  1888,  1892,
    1894,  1896,  1898,  1900,  1905,  1907,  1912,  1913,  1918,  1919,
    1924,  1925,  1926,  1927,  1931,  1933,  1942,  1943,  1947,  1948,
    1950,  1952,  1956,  1964,  1972,  1973,  1979,  1984,  1985,  1987,
    1988,  1993,  1997,  1999,  2004,  2005,  2006,  2007,  2011,  2012,
    2013,  2014,  2015,  2016,  2017,  2018,  2019,  2020,  2021,  2026,
    2031,  2039,  2044,  2045,  2047,  2049,  2051,  2056,  2058,  2064,
    2063,  2073,  2076,  2075,  2087,  2092,  2086,  2109,  2115,  2119,
    2121,  2125,  2126,  2128,  2130,  2132,  2138,  2137,  2148,  2150,
    2147,  2161,  2163,  2160,  2170,  2169,  2174,  2173,  2180,  2182,
    2184,  2192,  2191,  2203,  2204,  2226,  2227,  2232,  2233,  2238,
    2240,  2242,  2244,  2247,  2246,  2262,  2264,  2269,  2270,  2270,
    2280,  2282,  2284,  2286,  2291,  2292,  2294,  2296,  2302,  2304,
    2306,  2311,  2313,  2315,  2317,  2323,  2324,  2329,  2330,  2334,
    2335,  2340,  2345,  2347,  2354,  2371,  2382,  2387,  2389,  2394,
    2395,  2400,  2402,  2405,  2404,  2409,  2408,  2415,  2416,  2418,
    2421,  2420,  2425,  2424,  2431,  2432,  2434,  2436,  2438,  2440,
    2445,  2447,  2452,  2453,  2454,  2469,  2474,  2476,  2478,  2482,
    2483,  2485,  2487,  2498,  2500,  2503,  2502,  2523,  2525,  2528,
    2527,  2534,  2536,  2538,  2544,  2543,  2561,  2562,  2567,  2568,
    2570,  2572,  2574,  2579,  2581,  2589,  2591,  2596,  2597,  2599,
    2601,  2606,  2608,  2615,  2616,  2620,  2621,  2622,  2626,  2627,
    2628,  2629,  2630,  2631,  2632,  2636,  2637,  2638,  2639,  2640,
    2641,  2645,  2646,  2647,  2648,  2652,  2654,  2658,  2659,  2660,
    2661,  2662,  2663,  2667,  2668,  2669,  2670,  2674,  2676,  2682,
    2685,  2686,  2687,  2688,  2689,  2690,  2696,  2697,  2698,  2699,
    2700,  2701,  2702,  2703,  2704,  2705,  2706,  2707,  2708,  2709,
    2710,  2711,  2712,  2713,  2714,  2715,  2716,  2720,  2725,  2726,
    2727,  2728,  2729,  2730,  2731,  2732,  2733,  2738,  2743,  2744,
    2745,  2750,  2755,  2756,  2757,  2758,  2759,  2760,  2761,  2762,
    2763,  2764,  2765,  2766,  2767,  2768,  2769,  2770,  2771,  2772,
    2773,  2774,  2775,  2776,  2777,  2778,  2779,  2780,  2781,  2782,
    2783,  2784,  2785,  2786,  2787,  2788,  2789,  2790,  2791,  2792,
    2793,  2797,  2802,  2803,  2804,  2805,  2806,  2810,  2823,  2828,
    2833,  2843,  2847,  2853,  2854,  2859,  2860,  2861,  2865,  2866,
    2870,  2871,  2875,  2876,  2881,  2882,  2888,  2892
};
#endif

#if (YYDEBUG) || YYERROR_VERBOSE
/* YYTNME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
   First, the terminals, then, starting at YYNTOKENS, nonterminals. */
static const char *const yytname[] =
{
  "$end", "error", "$undefined", "prec_if", "prec_lower_than_error",
  "prec_import", "p_operator", "p_destructor", "p_constructor",
  "p_implementation", "p_uses", "p_else", "p_and", "p_array", "p_begin",
  "p_case", "p_div", "p_do", "p_downto", "p_end", "p_file", "p_for",
  "p_function", "p_goto", "p_if", "p_in", "p_label", "p_mod", "p_nil",
  "p_not", "p_of", "p_or", "p_packed", "p_procedure", "p_to", "p_program",
  "p_record", "p_repeat", "p_set", "p_then", "p_type", "p_until", "p_var",
  "p_while", "p_with", "p_absolute", "p_abstract", "p_and_then", "p_as",
  "p_asm", "p_attribute", "p_bindable", "p_const", "p_external", "p_far",
  "p_finalization", "p_forward", "p_import", "p_inherited",
  "p_initialization", "p_is", "p_near", "p_object", "p_only",
  "p_otherwise", "p_or_else", "p_pow", "p_restricted", "p_shl", "p_shr",
  "p_unit", "p_value", "p_virtual", "p_xor", "p_asmname", "p_c",
  "p_c_language", "p_Addr", "p_Assigned", "p_Dispose", "p_FormatString",
  "p_New", "p_Return", "LEX_ID", "LEX_BUILTIN_PROCEDURE",
  "LEX_BUILTIN_PROCEDURE_WRITE", "LEX_BUILTIN_FUNCTION",
  "LEX_BUILTIN_FUNCTION_VT", "LEX_BUILTIN_VARIABLE", "LEX_INTCONST",
  "LEX_INTCONST_BASE", "LEX_STRCONST", "LEX_REALCONST", "LEX_CARET_WHITE",
  "LEX_CARET_LETTER", "BOGUS", "LEX_CONST_EQUAL", "LEX_RPAR", "LEX_BPPLUS",
  "LEX_BPMINUS", "LEX_RANGE", "LEX_ELLIPSIS", "LEX_RENAME", "LEX_SYMDIFF",
  "LEX_ASSIGN", "LEX_NE", "LEX_GE", "LEX_LE", "LEX_POWER", "LEX_CEIL_PLUS",
  "LEX_CEIL_MINUS", "LEX_FLOOR_PLUS", "LEX_FLOOR_MINUS", "LEX_CEIL_MULT",
  "LEX_CEIL_DIV", "LEX_FLOOR_MULT", "LEX_FLOOR_DIV", "';'", "'('", "','",
  "':'", "'^'", "'.'", "')'", "'['", "']'", "'+'", "'-'", "'*'", "'/'",
  "'<'", "'='", "'>'", "'@@'", "$accept", "program_component",
  "program_component_1", "@@1", "@@2", "optional_program_heading",
  "declarations_and_uses", "declaration_or_uses", "any_declaration_part",
  "any_decl", "@@3", "simple_decl", "simple_decl_1", "@@4",
  "module_declaration", "@@5", "@@6", "@@7", "@@8", "@@9", "@@10",
  "interface_module", "@@11", "@@12", "module_interface", "@@13",
  "implementatation_module", "@@14", "optional_unit_implementation",
  "module", "optional_module_parameters", "optional_module_attributes",
  "interface_decl_part", "interface_decl", "implementation_decls",
  "implementation_decl", "@@15", "module_block", "@@16", "@@17",
  "optional_init_and_final_part", "module_constructor", "@@18",
  "module_destructor", "@@19", "rest_of_unit_constructor", "@@20",
  "optional_unit_init_and_final_part", "@@21", "optional_par_id_list",
  "id_list", "id_list1", "id_list_limited", "export_part_list",
  "export_part", "equals_or_error", "export_list_or_all", "export_all",
  "export_list", "export_list_item", "optional_rename",
  "optional_import_part", "@@22", "import_specification_list", "uses_part",
  "uses_list", "import_specification", "optional_access_qualifier",
  "optional_import_qualifier", "optional_unit_filename",
  "import_clause_list", "import_clause", "label_list", "new_label",
  "label", "num_label", "constant_definition_list", "constant_definition",
  "unsigned_number", "intconst", "constant_literal", "combined_string",
  "optional_combined_string", "string_constant", "caret_chars",
  "string_constants", "type_definition_list", "type_definition", "@@23",
  "@@24", "formal_schema_discriminants", "discriminant_specification_list",
  "discriminant_specification", "type_denoter_with_attributes",
  "type_denoter_no_init", "type_denoter", "type_denoter_1",
  "type_denoter_0", "packed", "typename_or_string255", "typename",
  "actual_schema_discriminants", "discriminant_expression_list",
  "new_ordinal_type", "enumerated_type", "conflict_id", "enum_list",
  "lower_bound", "subrange_type", "new_pointer_type",
  "pointer_domain_type", "new_procedural_type",
  "optional_procedural_type_formal_parameter_list",
  "procedural_type_formal_parameter_list",
  "procedural_type_formal_parameter", "unpacked_structured_type",
  "array_type", "array_index_list", "ordinal_index_type", "file_type",
  "untyped_file", "direct_access_index_type", "set_type", "record_type",
  "record_field_list", "fixed_part", "record_section", "variant_part",
  "variant_selector", "new_ordinal_type_non_iso", "rest_of_variant",
  "variant_list", "variant", "case_constant_list", "one_case_constant",
  "type_inquiry", "optional_abstract", "object_parent",
  "object_field_list", "object_field_list_1", "object_section",
  "variable_declaration_list", "variable_declaration", "@@25",
  "optional_variable_directive_list", "variable_directive", "@@26",
  "optional_variable_directive_list_no_external",
  "variable_directive_no_external", "attributes", "attribute_list",
  "attrib", "var_init", "optional_value_specification",
  "absolute_or_value_specification", "@@27", "initializer_expression",
  "@@28", "initializer_expression_0", "static_initializer_expression",
  "structured_bp_initializer", "bp_initializer_list",
  "initializer_separator", "bp_initializer_expression",
  "structured_iso_initializer", "iso_initializer_list",
  "iso_initializer_expression", "initializer_field",
  "routine_interface_decl", "routine_declaration", "@@29", "@@30",
  "routine_or_method_heading", "routine_heading", "method_heading",
  "optional_routine_interface_directive_list", "remote_directive_list",
  "remote_directive", "@@31", "optional_routine_directive_list",
  "bp_directive", "operator_identifier", "optional_result_def",
  "optional_result_equals", "operator_result_def", "resulttype",
  "optional_formal_parameter_list", "formal_parameter_list",
  "formal_parameter", "fp_routine_heading", "optional_protected",
  "optional_parameter_form", "parameter_form", "conformant_array",
  "typename_or_conformant_array", "index_type_specification_list",
  "index_type_specification", "open_array", "typename_or_untyped_file",
  "compound_statement", "statement_sequence", "empty_lte",
  "optional_statement", "statement", "unlabelled_statement", "set_label",
  "statement_var_decl", "with_statement", "with_list", "with_variable",
  "simple_if", "@@32", "if_statement", "@@33", "case_statement", "@@34",
  "@@35", "optional_case_default", "otherwise", "case_element_list",
  "case_element", "@@36", "repeat_statement", "@@37", "@@38",
  "while_statement", "@@39", "@@40", "for_statement", "@@41", "@@42",
  "for_direction", "assignment_or_call_statement", "@@43",
  "start_of_statement", "rest_of_statement", "assign",
  "standard_procedure_statement", "@@44", "optional_actual_parameter_list",
  "@@45", "actual_parameter_list", "write_actual_parameter_list",
  "write_actual_parameter", "asm_statement", "asm_qualifier",
  "asm_operands", "nonempty_asm_operands", "asm_operand", "asm_clobbers",
  "static_expression", "boolean_expression", "expression_no_par",
  "expression", "simple_expression", "@@46", "@@47", "term", "@@48", "@@49",
  "factor", "primary", "variable_or_routine_access_no_parentheses",
  "variable_or_routine_access",
  "variable_or_routine_access_no_builtin_function", "@@50", "@@51", "@@52",
  "variable_or_typename", "index_expression_list", "index_expression_item",
  "set_constructor", "set_constructor_element_list", "member_designator",
  "sign", "unary_operator", "relational_operator", "adding_operator",
  "pxsc_adding_operator", "or_else", "multiplying_operator",
  "pxsc_multiplying_operator", "and_then", "builtin_proc",
  "operator_symbol", "new_identifier", "new_identifier_1",
  "new_identifier_limited_par", "new_identifier_limited_par_1",
  "new_identifier_limited", "new_identifier_limited_1", "identifier", "id",
  "caret_letter", "pushlevel", "poplevel", "setspecs", "enable_lce",
  "i_protected", "optional_semicolon", "pointer_char", "equals", "rpar",
  "rpar_or_error", "dot_or_error", "null", "err", 0
};
#endif

/* YYR1[YYN] -- Symbol number of symbol that rule YYN derives.  */
static const unsigned short yyr1[] =
{
       0,   134,   135,   135,   137,   138,   136,   136,   139,   139,
     139,   140,   140,   141,   141,   142,   142,   144,   143,   143,
     143,   145,   146,   147,   146,   146,   149,   150,   148,   148,
     148,   151,   148,   152,   153,   148,   154,   148,   156,   157,
     155,   159,   158,   161,   160,   162,   162,   163,   164,   165,
     165,   166,   166,   167,   167,   167,   168,   168,   169,   170,
     169,   169,   172,   173,   171,   174,   174,   174,   174,   176,
     175,   178,   177,   180,   179,   181,   181,   182,   181,   181,
     183,   183,   184,   185,   185,   185,   185,   185,   186,   186,
     187,   187,   187,   187,   187,   188,   189,   189,   190,   190,
     190,   191,   192,   192,   192,   192,   192,   193,   193,   193,
     194,   194,   195,   196,   195,   197,   197,   197,   198,   199,
     199,   199,   200,   201,   201,   202,   202,   202,   203,   203,
     204,   204,   204,   204,   204,   205,   206,   206,   206,   206,
     206,   206,   207,   207,   208,   208,   209,   210,   210,   210,
     211,   211,   212,   212,   213,   213,   214,   214,   214,   215,
     216,   216,   217,   217,   217,   218,   218,   218,   218,   218,
     218,   218,   218,   218,   218,   218,   218,   218,   218,   218,
     218,   218,   218,   219,   219,   220,   220,   220,   220,   220,
     220,   221,   222,   221,   221,   223,   221,   224,   224,   225,
     225,   225,   225,   225,   226,   227,   227,   228,   229,   230,
     230,   231,   231,   231,   231,   231,   231,   231,   231,   231,
     232,   233,   234,   235,   235,   236,   236,   236,   236,   236,
     237,   237,   238,   238,   238,   239,   239,   239,   239,   239,
     239,   239,   240,   240,   240,   240,   240,   241,   241,   241,
     241,   241,   241,   241,   242,   242,   243,   243,   243,   243,
     244,   244,   244,   245,   245,   246,   246,   246,   246,   247,
     247,   248,   248,   248,   248,   248,   248,   248,   249,   249,
     249,   249,   249,   250,   251,   251,   251,   251,   251,   251,
     252,   252,   253,   253,   254,   255,   255,   256,   257,   257,
     258,   258,   258,   258,   259,   259,   259,   259,   259,   260,
     261,   262,   262,   262,   262,   263,   264,   264,   265,   265,
     265,   265,   265,   266,   267,   267,   267,   267,   267,   268,
     268,   268,   268,   269,   270,   270,   271,   271,   271,   272,
     272,   272,   273,   273,   273,   274,   274,   274,   274,   274,
     274,   274,   274,   274,   275,   275,   277,   276,   276,   278,
     278,   279,   279,   280,   279,   281,   281,   282,   282,   283,
     284,   284,   285,   285,   285,   285,   285,   285,   286,   286,
     286,   287,   287,   287,   288,   289,   288,   288,   291,   290,
     292,   292,   292,   293,   294,   294,   294,   294,   294,   294,
     295,   295,   295,   296,   296,   297,   297,   298,   298,   299,
     299,   299,   300,   301,   301,   301,   301,   302,   303,   304,
     305,   303,   306,   306,   307,   307,   307,   308,   308,   308,
     308,   309,   309,   310,   311,   311,   312,   311,   311,   311,
     311,   311,   311,   313,   313,   313,   314,   314,   315,   315,
     316,   316,   317,   317,   318,   318,   318,   319,   319,   319,
     320,   320,   320,   320,   320,   321,   321,   321,   321,   322,
     322,   322,   322,   322,   323,   323,   324,   324,   325,   325,
     326,   326,   326,   326,   327,   327,   328,   328,   329,   329,
     329,   329,   330,   331,   332,   332,   333,   334,   334,   334,
     334,   335,   336,   336,   337,   337,   337,   337,   338,   338,
     338,   338,   338,   338,   338,   338,   338,   338,   338,   339,
     340,   341,   342,   342,   342,   342,   342,   343,   343,   345,
     344,   346,   347,   346,   349,   350,   348,   351,   351,   352,
     352,   353,   353,   353,   353,   353,   355,   354,   357,   358,
     356,   360,   361,   359,   363,   362,   364,   362,   365,   365,
     365,   367,   366,   368,   368,   369,   369,   370,   370,   371,
     371,   371,   371,   372,   371,   371,   371,   373,   374,   373,
     375,   375,   375,   375,   376,   376,   376,   376,   377,   377,
     377,   378,   378,   378,   378,   379,   379,   380,   380,   381,
     381,   382,   383,   383,   384,   385,   386,   387,   387,   388,
     388,   388,   388,   389,   388,   390,   388,   391,   391,   391,
     392,   391,   393,   391,   394,   394,   394,   394,   394,   394,
     395,   395,   395,   395,   395,   396,   397,   397,   397,   398,
     398,   398,   398,   398,   398,   399,   398,   398,   398,   400,
     398,   398,   398,   398,   401,   398,   402,   402,   403,   403,
     403,   403,   403,   404,   404,   405,   405,   406,   406,   406,
     406,   407,   407,   408,   408,   409,   409,   409,   410,   410,
     410,   410,   410,   410,   410,   411,   411,   411,   411,   411,
     411,   412,   412,   412,   412,   413,   413,   414,   414,   414,
     414,   414,   414,   415,   415,   415,   415,   416,   416,   417,
     417,   417,   417,   417,   417,   417,   418,   418,   418,   418,
     418,   418,   418,   418,   418,   418,   418,   418,   418,   418,
     418,   418,   418,   418,   418,   418,   418,   419,   420,   420,
     420,   420,   420,   420,   420,   420,   420,   421,   422,   422,
     422,   423,   424,   424,   424,   424,   424,   424,   424,   424,
     424,   424,   424,   424,   424,   424,   424,   424,   424,   424,
     424,   424,   424,   424,   424,   424,   424,   424,   424,   424,
     424,   424,   424,   424,   424,   424,   424,   424,   424,   424,
     424,   425,   426,   426,   426,   426,   426,   427,   428,   429,
     430,   431,   432,   433,   433,   434,   434,   434,   435,   435,
     436,   436,   437,   437,   438,   438,   439,   440
};

/* YYR2[YYN] -- Number of symbols composing right hand side of rule YYN.  */
static const unsigned char yyr2[] =
{
       0,     2,     0,     1,     0,     0,     8,     1,     0,     4,
       4,     0,     2,     1,     1,     0,     2,     0,     2,     3,
       1,     2,     2,     0,     4,     2,     0,     0,    12,     1,
       1,     0,     3,     0,     0,     9,     0,     6,     0,     0,
       8,     0,     7,     0,     7,     0,     3,     1,     3,     1,
       2,     0,     2,     1,     1,     1,     0,     2,     1,     0,
       2,     1,     0,     0,     6,     0,     2,     1,     1,     0,
       6,     0,     6,     0,     2,     2,     2,     0,     5,     1,
       1,     3,     1,     1,     3,     3,     3,     2,     1,     3,
       1,     3,     1,     3,     3,     3,     0,     1,     3,     1,
       4,     1,     1,     3,     1,     3,     3,     2,     3,     3,
       1,     2,     0,     0,     4,     1,     3,     3,     3,     1,
       3,     3,     4,     0,     1,     1,     3,     4,     1,     2,
       1,     3,     1,     3,     3,     2,     1,     3,     1,     3,
       3,     2,     1,     1,     1,     1,     1,     1,     2,     1,
       4,     8,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     2,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     2,     1,     3,     1,     3,     3,
       2,     5,     0,     6,     3,     0,     9,     3,     3,     1,
       3,     3,     3,     2,     3,     1,     2,     1,     2,     1,
       2,     1,     2,     2,     1,     1,     1,     1,     1,     2,
       1,     1,     1,     3,     3,     1,     3,     1,     3,     3,
       1,     1,     3,     3,     3,     1,     1,     1,     1,     1,
       1,     1,     1,     3,     3,     3,     2,     1,     2,     2,
       2,     2,     1,     3,     3,     4,     2,     2,     2,     3,
       1,     1,     1,     2,     3,     0,     3,     5,     3,     1,
       3,     3,     4,     5,     3,     4,     2,     1,     1,     1,
       1,     1,     1,     6,     1,     3,     1,     3,     3,     2,
       1,     1,     1,     4,     1,     1,     3,     3,     3,     3,
       0,     2,     3,     1,     1,     3,     3,     3,     2,     3,
       6,     3,     3,     1,     1,     1,     0,     5,     1,     3,
       3,     1,     2,     5,     1,     3,     3,     3,     2,     1,
       3,     3,     3,     3,     1,     1,     1,     3,     3,     1,
       2,     1,     1,     2,     3,     3,     3,     5,     3,     3,
       1,     2,     1,     1,     1,     2,     0,     8,     1,     1,
       3,     1,     2,     0,     5,     1,     3,     2,     1,     4,
       1,     3,     1,     1,     1,     3,     4,     6,     1,     1,
       1,     1,     2,     2,     1,     0,     3,     2,     0,     2,
       1,     1,     3,     1,     1,     3,     1,     1,     1,     1,
       3,     3,     3,     1,     1,     1,     1,     3,     3,     1,
       3,     3,     3,     1,     1,     2,     2,     3,     3,     0,
       0,     8,     1,     1,     3,     5,     5,     5,     7,     5,
       5,     1,     1,     3,     2,     3,     0,     6,     6,     6,
       3,     2,     2,     1,     3,     3,     1,     1,     1,     1,
       1,     2,     1,     0,     1,     2,     1,     1,     2,     1,
       1,     3,     5,     3,     3,     1,     3,     3,     3,     3,
       4,     4,     3,     1,     3,     5,     1,     1,     0,     2,
       1,     1,     1,     1,     6,     7,     1,     1,     1,     3,
       3,     3,     5,     3,     1,     1,     5,     1,     3,     3,
       3,     0,     1,     1,     1,     2,     2,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     2,     2,
       2,     4,     1,     3,     1,     3,     3,     1,     3,     0,
       5,     1,     0,     4,     0,     0,     9,     0,     4,     1,
       1,     1,     3,     1,     3,     3,     0,     6,     0,     0,
       8,     0,     0,     8,     0,    11,     0,     9,     1,     1,
       1,     0,     3,     1,     2,     1,     2,     1,     1,     2,
       1,     4,     4,     0,     7,     1,     2,     1,     0,     4,
       1,     3,     1,     3,     1,     3,     3,     3,     1,     3,
       5,     5,     7,     9,    11,     0,     1,     1,     1,     1,
       3,     4,     1,     3,     1,     1,     1,     3,     1,     1,
       2,     3,     3,     0,     4,     0,     4,     1,     3,     3,
       0,     4,     0,     4,     1,     3,     3,     3,     3,     3,
       2,     2,     1,     1,     1,     1,     2,     1,     1,     1,
       2,     3,     3,     2,     4,     0,     5,     4,     4,     0,
       5,     4,     4,     4,     0,     7,     1,     1,     1,     3,
       1,     3,     3,     1,     3,     2,     3,     1,     3,     3,
       3,     1,     3,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     2,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     2,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     0,     0,
       0,     0,     1,     0,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     0,     1
};

/* YYDPREC[RULE-NUM] -- Dynamic precedence of rule #RULE-NUM (0 if none). */
static const unsigned char yydprec[] =
{
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0
};

/* YYMERGER[RULE-NUM] -- Index of merging function for rule #RULE-NUM. */
static const unsigned char yymerger[] =
{
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0
};

/* YYDEFACT[S] -- default rule to reduce with in state S when YYTABLE
   doesn't specify something else to do.  Zero means the default is an
   error.  */
static const unsigned short yydefact[] =
{
       8,     0,     0,    47,     0,     3,   816,     7,    29,    30,
       0,   816,   745,   740,   739,   742,   746,   768,   769,   770,
     771,   772,   750,   773,   741,   754,   776,   755,   743,   777,
     744,   778,   756,   779,   780,   782,   781,   783,   784,   785,
     786,   787,   788,   789,   790,   749,   774,   775,   763,   764,
     766,   767,   765,   762,   752,   759,   760,   757,   761,   758,
     797,   816,   737,   738,   748,   751,   753,     0,     1,     0,
       4,     0,    49,     0,   816,     0,     0,    80,     0,   816,
     816,   112,    50,    32,     0,     0,    38,    36,     0,     0,
       0,    83,    10,     9,     0,   373,     0,   370,   374,   372,
      11,     0,     0,    43,   816,     0,    62,   816,   813,   811,
     810,   812,    81,    87,     0,    26,   816,   369,   809,     0,
     808,     0,    17,     0,    62,    39,    41,     0,     0,   112,
      48,    85,    86,    84,   112,   371,   294,   158,   677,   794,
     795,     0,   796,     0,   649,     0,     0,   792,   816,     0,
     637,   154,   155,   162,   153,   163,   675,   676,     0,     0,
       0,   673,   674,     0,   157,   152,   632,   156,   183,   159,
       0,     0,   608,   609,   617,   624,     0,   634,   638,   633,
       0,     0,   639,   791,   793,   375,   791,     0,     0,     0,
       0,     0,     0,     0,     0,    12,    14,   800,    13,    20,
       0,   422,   423,     0,   115,   123,     0,     0,     0,    34,
     815,   814,    37,    56,    51,   640,     0,     0,     0,     0,
     636,     0,   577,     0,     0,   165,   169,   170,   166,   168,
     182,   167,   171,   172,   173,   174,   175,   176,   177,   178,
     179,   180,   181,   164,   665,   671,     0,   667,   631,   184,
       0,   376,   684,   613,   696,   689,   686,   688,   690,   678,
     680,   679,   691,   692,   693,   694,   685,   687,   682,   681,
     683,     0,     0,     0,   615,   620,   699,   700,   708,   701,
     702,   703,   704,   705,   706,   697,   698,     0,     0,   622,
       0,     0,     0,     0,     0,   806,   805,     0,     0,   807,
     643,   645,   610,   630,     0,   732,   722,   725,   723,   733,
     717,   719,   734,   729,   730,   731,   724,   716,   718,   720,
     721,   726,   728,   816,   736,   735,   449,   448,   727,     0,
       0,     0,   119,   816,   138,   146,     0,   136,   142,   143,
     816,   798,     0,    18,     0,   816,     0,   114,   124,   816,
      44,     0,    92,     0,    90,    96,    62,    59,   800,   635,
       0,     0,   584,   588,   657,   635,     0,     0,     0,   642,
       0,     0,     0,   666,     0,   695,     0,   607,   611,   612,
       0,   707,     0,   618,   619,     0,   629,   222,   628,   625,
     626,   627,   641,   660,   663,     0,   658,     0,     0,     0,
     816,   460,     0,     0,     0,   118,     0,     0,   453,   141,
      19,     0,     0,   424,   501,     6,    23,     0,     0,    21,
     418,   419,   443,   117,   116,     0,     0,   816,   125,    40,
       0,     0,     0,    97,     0,    57,   800,    65,    58,    61,
       0,     0,    54,    45,    52,    53,    55,     0,   651,     0,
       0,     0,   648,     0,   654,   653,   582,     0,   580,   652,
     672,   669,   670,   668,   647,   614,   616,   621,   623,     0,
       0,     0,   644,     0,   377,     0,     0,     0,     0,   802,
       0,     0,     0,   465,   473,     0,   477,   476,     0,   454,
       0,   456,   816,   816,   121,   120,   816,     0,     0,   452,
     450,   139,   140,   137,   816,   710,     0,     0,     0,     0,
     712,   711,   548,     0,   551,     0,   595,   714,   715,   713,
       0,   575,   709,   570,     0,     0,   144,   508,     0,   502,
     497,   503,   507,   504,   501,   512,   531,   513,   514,   515,
     516,   517,   509,   561,   510,   511,   563,   816,   791,     0,
     358,   801,     0,   354,    88,   149,    22,   147,   801,   816,
     446,     0,   447,     0,     0,     0,     0,    15,   816,     0,
       0,   132,     0,   130,   816,     0,   122,   128,    93,    94,
      91,    51,   101,     0,    95,    99,    35,    60,     0,     0,
      67,    68,   816,   816,    11,     0,   816,   650,   586,   587,
     585,   589,     0,     0,   579,   664,   661,   662,   659,   646,
     464,   816,   816,   478,   463,     0,   816,     0,   461,     0,
       0,   817,     0,   426,   457,   459,   455,   430,   429,   453,
     425,   451,   427,     0,     0,   635,   518,   145,     0,   605,
     798,   520,   798,   524,     0,   522,   527,   606,   596,     0,
       0,   576,     0,   564,   519,   501,     0,     0,   505,   506,
     532,   816,   569,   187,     0,   185,     0,   747,   801,     0,
       0,   355,   148,     0,     0,   161,     0,   160,   434,     0,
     441,   442,   444,    17,   433,   445,     0,     0,     0,   126,
       0,   135,   110,   129,   800,   104,     0,   102,   816,     0,
       0,     0,     0,    64,     0,    66,    17,     0,   417,   432,
     431,     0,     0,   583,   581,   453,   474,     0,   472,     0,
     220,     0,     0,   494,   495,   481,   469,   482,   483,   480,
     467,   468,     0,   466,   478,     0,   458,   221,     0,   534,
       0,   567,     0,   568,   529,   501,     0,     0,   501,     0,
       0,     0,     0,     0,   499,   500,   498,   496,   501,   562,
       0,   565,   190,     0,     0,     0,     0,    89,   800,   800,
       0,   604,   436,   435,   440,    16,     0,   127,   133,   134,
     131,   111,    42,     0,     0,    98,     0,   107,   816,     0,
      69,    71,    73,    73,    79,    46,    28,   590,   655,     0,
     479,     0,     0,     0,     0,   462,   471,   470,   428,     0,
     556,     0,   501,     0,   552,   525,   521,   526,   523,   528,
       0,   573,   572,   813,   571,   533,   566,   188,   189,   186,
       0,     0,     0,   199,   194,   192,   800,   356,   205,     0,
       0,   150,     0,     0,   816,     0,   105,   106,   103,   108,
     109,   100,   501,   501,    75,   501,    76,   475,   493,     0,
     488,     0,   333,     0,   543,     0,   324,     0,   541,     0,
       0,   560,   559,   558,     0,   530,   549,     0,   816,   591,
       0,   198,     0,   203,     0,   197,   800,   816,   816,   816,
     206,     0,   294,   265,   265,     0,     0,     0,     0,   163,
       0,   805,   807,   252,   208,   209,     0,   211,   221,   215,
     230,     0,   231,   216,   217,   218,   278,   279,   292,   280,
     281,   214,     0,     0,   247,   222,     0,   282,   388,     0,
       0,     0,   421,     0,     0,     0,    77,     0,     0,     0,
       0,     0,   328,     0,   546,     0,     0,   535,     0,     0,
     798,   554,     0,   501,     0,     0,   598,   599,   597,     0,
     204,   201,   202,   200,   816,   335,     0,   334,   378,   380,
     379,     0,   191,   381,     0,   384,   816,     0,     0,     0,
     295,     0,     0,   263,     0,     0,     0,     0,     0,   304,
     303,   800,   210,   212,   258,   261,   262,   260,     0,   794,
     795,   777,   796,   763,   764,   767,   765,   792,   816,   761,
     637,     0,     0,     0,   242,   793,   797,   257,   256,   219,
     292,     0,     0,     0,   213,     0,   251,   250,   249,   248,
       0,   816,     0,   437,   438,   439,    70,    72,   501,   490,
     491,   489,     0,     0,     0,   327,   326,   325,   798,   544,
     545,   542,   537,   331,   332,   330,   501,     0,   799,   799,
       0,   816,   592,     0,   574,   193,   816,   383,   382,   387,
       0,     0,   359,   286,     0,   291,   290,     0,   284,     0,
     800,   277,     0,     0,     0,     0,   269,     0,   477,   264,
     299,   794,   795,   796,   792,   315,     0,   314,     0,   313,
     793,   800,   298,   308,     0,   301,   297,   207,   234,   233,
     246,     0,   232,   253,     0,   227,     0,   225,     0,   254,
     259,     0,   365,     0,     0,   389,   390,   391,   393,     0,
       0,   486,   487,   484,     0,     0,   501,   539,   540,     0,
     798,   799,   798,   550,   553,     0,     0,   600,     0,     0,
     336,   386,   357,   289,     0,     0,   296,   293,   276,   266,
       0,     0,   268,     0,     0,     0,     0,   309,   306,   307,
     305,   302,   244,   245,   243,   255,     0,     0,   223,   224,
     151,   399,   816,   637,     0,   152,   405,     0,     0,     0,
     391,   398,     0,   393,     0,     0,   413,   394,     0,     0,
     409,   492,   485,   799,   536,   501,   557,   501,   601,     0,
     593,     0,     0,   341,     0,   339,   342,   816,     0,   360,
     361,   368,   287,   288,   285,   800,     0,   271,     0,   270,
     274,     0,   321,     0,   318,     0,   311,   312,   228,   229,
     226,   366,     0,   392,     0,   403,   404,     0,     0,     0,
     152,   152,   408,     0,     0,   407,   547,     0,   799,   602,
       0,   338,   337,   196,   740,   739,     0,     0,   769,   750,
     789,   343,     0,   340,   353,   362,   367,   283,   275,   267,
       0,   272,   322,   804,   316,     0,   392,   402,   406,   401,
     400,   412,   414,   411,     0,     0,   410,   538,   555,     0,
     594,   816,   816,   816,   816,   351,   800,   344,   363,   273,
     320,   319,   310,     0,   300,   416,   415,   603,   349,   348,
     453,   346,   345,     0,   300,     0,     0,   364,     0,   323,
     347,   803,   804,   317
};

/* YYPDEFGOTO[NTERM-NUM]. */
static const short yydefgoto[] =
{
      -1,     4,     5,    81,   194,     6,   122,   195,   683,   196,
     197,   442,   419,   549,     7,   134,   443,    73,   105,   356,
     106,     8,   104,   207,   127,   208,     9,   124,   595,    10,
      87,    70,   358,   444,   357,   435,   436,   128,   129,   437,
     589,   590,   852,   591,   853,   854,   855,   795,  1038,    88,
     986,    90,   551,   353,   354,   432,   584,   585,   696,   697,
     691,   100,   101,   203,   198,   331,   204,   349,   427,   576,
     572,   573,   336,   337,   525,   526,   556,   557,   164,   165,
     166,   167,   676,   168,   243,   169,   664,   665,   886,   887,
     765,   832,   833,   837,  1106,  1107,   904,   905,  1074,   907,
     723,  1024,  1116,  1076,   910,  1011,  1012,   911,   912,   913,
     994,   995,   982,  1085,  1086,   915,   916,  1077,  1078,   917,
     170,   979,   919,   920,   987,   988,   989,   990,  1096,  1097,
    1312,  1233,  1234,   865,   866,   725,   966,  1149,  1214,  1215,
    1273,   552,   553,   889,  1071,  1219,  1323,  1121,  1220,   890,
      96,    97,   971,   972,   976,  1070,  1031,  1032,  1186,  1126,
    1187,  1188,  1247,  1189,  1127,  1199,  1288,  1192,   446,   199,
     567,   776,   200,   201,   202,   708,   420,   568,   842,   421,
     569,   323,   497,   498,   488,   623,   408,   482,   483,   484,
     485,   718,   726,   727,  1133,   859,   860,   728,   729,   527,
     528,   529,   530,   531,   532,   533,   534,   535,   644,   645,
     536,   812,   537,   758,   538,   809,  1052,  1139,  1140,   867,
     868,  1048,   539,   640,   952,   540,   642,   877,   541,  1057,
     870,   874,   542,   661,   543,   759,   742,   544,   880,   220,
     221,   457,   361,   362,   545,   649,   955,   956,   957,  1260,
     869,   638,   646,   771,   172,   376,   380,   173,   382,   385,
     174,   175,   176,   177,   178,   397,   217,   602,   366,   395,
     396,   179,   246,   247,   180,   181,   271,   272,   273,   274,
     287,   288,   289,   547,   326,    91,    62,   666,    63,    64,
      65,   182,   186,   184,   414,   657,   839,   670,   699,   947,
     300,   499,   111,   112,   212,   401,   625
};

/* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
   STATE-NUM.  */
#define YYPACT_NINF -1215
static const short yypact[] =
{
     622,  5925,  7690, -1215,   114, -1215,    94, -1215,    97, -1215,
    7690,    81, -1215, -1215, -1215, -1215, -1215, -1215, -1215, -1215,
   -1215, -1215, -1215, -1215, -1215, -1215, -1215, -1215, -1215, -1215,
   -1215, -1215, -1215, -1215, -1215, -1215, -1215, -1215, -1215, -1215,
   -1215, -1215, -1215, -1215, -1215, -1215, -1215, -1215, -1215, -1215,
   -1215, -1215, -1215, -1215, -1215, -1215, -1215, -1215, -1215, -1215,
   -1215,    81, -1215, -1215, -1215, -1215, -1215,   108, -1215,   138,
   -1215,   204, -1215,   265,   469,  7690,   260, -1215,   302,    94,
    7435,   414, -1215, -1215,  7690,   417, -1215,   421,   425,    71,
     263, -1215, -1215, -1215,   480, -1215,   607, -1215,   588, -1215,
   -1215,   555,   627, -1215,    81,   548, -1215,    94, -1215, -1215,
   -1215, -1215, -1215,  7690,  6014, -1215,  7435, -1215, -1215,  4664,
   -1215,  4664,  1467,  7690, -1215, -1215, -1215,   544,    57,   414,
   -1215, -1215, -1215, -1215,   414, -1215, -1215, -1215, -1215, -1215,
   -1215,  7690, -1215,   559, -1215,   562,   584, -1215,   614,   653,
   -1215, -1215, -1215, -1215, -1215, -1215, -1215, -1215,  4664,  4010,
    4588, -1215, -1215,  4816, -1215, -1215, -1215, -1215, -1215,   498,
     659,   284,  4853,   739,  1138,   115,   696,   756,   662, -1215,
    4816,  4816, -1215,   645, -1215, -1215, -1215,  3904,  7690,  7690,
    7690,  7690,  5747,  7690,   779, -1215, -1215, -1215, -1215, -1215,
     678, -1215, -1215,    66, -1215,   719,    57,   548,  6918, -1215,
   -1215, -1215, -1215, -1215, -1215, -1215,  1595,   698,  4664,  1595,
   -1215,   703, -1215,  1595,   284, -1215, -1215, -1215, -1215, -1215,
   -1215, -1215, -1215, -1215, -1215, -1215, -1215, -1215, -1215, -1215,
   -1215, -1215, -1215, -1215, -1215,   728,    90, -1215, -1215, -1215,
    4664, -1215, -1215,   828, -1215, -1215, -1215, -1215, -1215, -1215,
   -1215, -1215, -1215, -1215, -1215, -1215, -1215, -1215, -1215, -1215,
   -1215,  4664,  4816,  4816, -1215,   822, -1215, -1215, -1215, -1215,
   -1215, -1215, -1215, -1215, -1215, -1215, -1215,  4816,  4816, -1215,
     991,   991,  4816,  4816,  4816, -1215, -1215,  7690,  2190, -1215,
   -1215, -1215,   739, -1215,  4664, -1215, -1215, -1215, -1215, -1215,
   -1215, -1215, -1215, -1215, -1215, -1215, -1215, -1215, -1215, -1215,
   -1215, -1215, -1215,   752, -1215, -1215, -1215, -1215, -1215,   754,
     759,   176, -1215,   530, -1215, -1215,   305, -1215, -1215, -1215,
     602, -1215,    57, -1215,   681, -1215,  7690,  7690, -1215,    10,
   -1215,    57, -1215,   160, -1215,   -14, -1215,  1421,  1022,   284,
    4664,   372, -1215,   766,   659,   712,   725,  2271,   284, -1215,
    4664,  4664,  2352, -1215,   284, -1215,  4816,   895,   739,   739,
    4816, -1215,  4816,  1138,  1138,  4816, -1215, -1215, -1215, -1215,
   -1215, -1215, -1215, -1215,   788,   101, -1215,  2271,   284,  4960,
    4015, -1215,  7690,  7690,  7690, -1215,  7690,  7690,   212,  7518,
   -1215,  5836,  7690, -1215,  4364, -1215, -1215,  6969,  7020, -1215,
   -1215,  1650, -1215, -1215, -1215,   774,  6103,   882, -1215, -1215,
    7867,  6815,   219, -1215,    57, -1215, -1215,   884, -1215, -1215,
    7690,  7690, -1215,   911, -1215, -1215, -1215,   815, -1215,   284,
    4664,  2433, -1215,  4664, -1215, -1215, -1215,   427, -1215, -1215,
   -1215, -1215, -1215, -1215, -1215,   739,   739,  1138,  1138,  4664,
    4664,  2514, -1215,   427, -1215,   284,  7690,  7690,  7690,   441,
     284,   818,   341, -1215, -1215,   906,  7690, -1215,   213, -1215,
    7690, -1215,   752,   752, -1215, -1215,   752,   213,  7690, -1215,
   -1215, -1215, -1215, -1215,   752, -1215,  4664,  1595,  1162,  4664,
   -1215, -1215, -1215,  6969, -1215,  2595,   852, -1215, -1215, -1215,
     835,  4664, -1215,   839,  1595,   838, -1215, -1215,   413, -1215,
   -1215, -1215, -1215,  4442,  4364, -1215,   948, -1215, -1215, -1215,
   -1215, -1215, -1215, -1215, -1215, -1215,   756,   614,   841,  6867,
   -1215,   844,  5480, -1215, -1215, -1215,  7867, -1215,   -14,   498,
   -1215,   847, -1215,  4664,   850,   854,   855, -1215, -1215,   856,
    6103, -1215,   465, -1215,   867,  4664, -1215, -1215, -1215, -1215,
   -1215, -1215, -1215,  6192, -1215,   859, -1215, -1215,   488,   966,
     952, -1215,   752,   752, -1215,   973, -1215, -1215, -1215, -1215,
   -1215,   875,  2271,  2676, -1215, -1215, -1215, -1215, -1215, -1215,
   -1215,   752,   752,   881, -1215,  1014,  7186,  5049, -1215,  7690,
     897, -1215,   991, -1215, -1215, -1215, -1215, -1215, -1215,   212,
   -1215, -1215, -1215,   972,  1188, -1215, -1215, -1215,   974, -1215,
   -1215, -1215, -1215, -1215,    92, -1215,   898, -1215, -1215,   902,
    4664, -1215,  4664,   756, -1215,  4364,  2120,   996, -1215, -1215,
   -1215,   388, -1215, -1215,   217, -1215,   905, -1215,   907,  7867,
     904, -1215, -1215,   916,  4664, -1215,    36, -1215, -1215,   926,
   -1215, -1215, -1215,  1106,   617, -1215,   465,  7690,  6281, -1215,
    7690, -1215, -1215, -1215,  1149, -1215,   479, -1215,   257,  7690,
    6192,  1031,  1034, -1215,  1037, -1215,  1480,    57, -1215, -1215,
    1650,  4664,   790, -1215, -1215,    53, -1215,  1014, -1215,    45,
   -1215,  1023,  1048, -1215, -1215, -1215, -1215, -1215, -1215, -1215,
   -1215, -1215,   284, -1215,   881,  1014, -1215, -1215,   213, -1215,
    4664, -1215,  4664, -1215, -1215,  4364,  4664,  4664,  4364,  2757,
    7690,   498,   502,   535, -1215, -1215, -1215, -1215,  4364, -1215,
    4664, -1215,  7823,  5391,  6370,    64,   -14, -1215, -1215, -1215,
     945, -1215, -1215,   989,  1011, -1215,   779, -1215, -1215, -1215,
   -1215, -1215, -1215,  7773,  6459, -1215,  7690, -1215,   867,   479,
   -1215, -1215, -1215, -1215, -1215, -1215, -1215, -1215, -1215,   244,
   -1215,  1063,  7690,  4664,   943, -1215, -1215, -1215, -1215,  2838,
   -1215,   539,  4364,   464, -1215, -1215, -1215, -1215, -1215, -1215,
    1253, -1215, -1215,  4664, -1215, -1215, -1215, -1215, -1215, -1215,
     284,   949,   536, -1215, -1215, -1215,   338,    94, -1215,  2941,
      28, -1215,  4664,  4664,   498,   955, -1215, -1215, -1215, -1215,
   -1215, -1215,  4364,  4364, -1215,  4364,  1021, -1215, -1215,   102,
   -1215,   979, -1215,  7690, -1215,   220, -1215,   107, -1215,   205,
    1065, -1215, -1215, -1215,  4664, -1215, -1215,  1067,   498, -1215,
    2271, -1215,   991,  7690,  6548, -1215, -1215,  1045,   710,   569,
   -1215,   970,    86,   977,   977,  5658,  1066,  3583,   991,  7103,
    2004,  3678,  7269, -1215, -1215, -1215,  1495, -1215,   375, -1215,
   -1215,  1000, -1215, -1215, -1215, -1215, -1215, -1215, -1215, -1215,
   -1215, -1215,  1268,  1268, -1215,  1005,  1054, -1215, -1215,  1001,
    1004,  1013, -1215,  1018,  1020,   268, -1215,  7690,  6637,  1101,
    7690,  1015,  4664,  2992, -1215,  4664,  1673, -1215,  4664,  3075,
   -1215, -1215,  4664,  4364,  1025,   625,  1019, -1215, -1215,   427,
   -1215, -1215, -1215, -1215,   710, -1215,  1079, -1215, -1215, -1215,
   -1215,  3156, -1215, -1215,  3237, -1215, -1215,  1324,  5288,  1114,
   -1215,  5138,   969, -1215,  1126,  4189,  1028,  1135,   412, -1215,
   -1215, -1215, -1215, -1215, -1215, -1215, -1215, -1215,   284,   351,
     532,  7690,   571,   559,  1040,   562,   584,   574,   171,   653,
     577,  1068,   162,  1064, -1215,   616,   705, -1215, -1215, -1215,
     659,  1072,  3318,  4664, -1215,  4664, -1215, -1215, -1215, -1215,
    7269, -1215,  4740, -1215, -1215, -1215, -1215, -1215,  4364, -1215,
   -1215, -1215,   893,  1046,  1143, -1215, -1215, -1215, -1215, -1215,
   -1215, -1215,    78, -1215, -1215, -1215,  4364,  1158, -1215, -1215,
    4664,   498, -1215,   498, -1215, -1215,  1060, -1215, -1215, -1215,
    4664,  1062, -1215, -1215,  4664, -1215, -1215,   119, -1215,  1059,
   -1215, -1215,  7690,   284,  1069,   671, -1215,  1151,  7690, -1215,
   -1215,  1071,  1080,  1081,  1082, -1215,  1155, -1215,  1085,  1005,
    1086, -1215, -1215,  7690,  4106, -1215, -1215, -1215, -1215, -1215,
    7690,  6726, -1215, -1215,  4664, -1215,   646, -1215,  1083, -1215,
   -1215,  1090, -1215,  1810,  1910, -1215, -1215, -1215, -1215,   432,
    1091, -1215, -1215, -1215,   991,   991,  4364, -1215, -1215,  1198,
   -1215, -1215, -1215, -1215, -1215,   284,   630, -1215,   736,  5569,
   -1215, -1215,   556,  5288,  1569,  1189, -1215, -1215,  1100, -1215,
    1063,  5227, -1215,  7690,  1102,  3399,  5288, -1215, -1215, -1215,
   -1215, -1215, -1215, -1215, -1215, -1215,  4664,  3480, -1215, -1215,
     261, -1215,   343,  1104,  1810,  1107, -1215,   284,   252,   396,
     430,   439,  1108,   284,  4816,  4816, -1215, -1215,  1110,   122,
   -1215, -1215, -1215, -1215, -1215,  4364, -1215,  4364, -1215,   498,
   -1215,   284,   284, -1215,  1207,  7352, -1215,   498,  4664, -1215,
   -1215, -1215, -1215, -1215, -1215, -1215,  1063, -1215,   284, -1215,
    1111,  1063, -1215,   298, -1215,   403, -1215, -1215, -1215, -1215,
   -1215, -1215,   284, -1215,  3806, -1215, -1215,  3806,  3806,  4740,
    1113,  1116, -1215,  4283,  4283, -1215, -1215,   413, -1215, -1215,
     798, -1215, -1215, -1215,  7690,  7690,  7690,  7690,    50,   138,
    4512,   448,  1120,  1124, -1215,  1165, -1215, -1215, -1215, -1215,
    1063, -1215,  4664,  4664,    78,  1136,   497, -1215, -1215, -1215,
   -1215, -1215, -1215, -1215,   624,   624, -1215, -1215, -1215,   498,
   -1215,   752,   752,   752,   752, -1215, -1215, -1215, -1215, -1215,
   -1215, -1215, -1215,  1137,  7607, -1215, -1215, -1215, -1215, -1215,
     248, -1215, -1215,  4664,  7607,   284,   303, -1215,   284, -1215,
   -1215,  1141, -1215, -1215
};

/* YYPGOTO[NTERM-NUM].  */
static const short yypgoto[] =
{
   -1215, -1215, -1215, -1215, -1215, -1215,   665, -1215, -1215,   585,
   -1215,  -144, -1215, -1215, -1215, -1215, -1215, -1215, -1215, -1215,
   -1215, -1215, -1215, -1215,  1073, -1215,  1196, -1215, -1215,  1197,
    1167,    -9,   691, -1215, -1215, -1215, -1215,   -88, -1215, -1215,
     567, -1215, -1215,   686, -1215,   485, -1215, -1215, -1215,    69,
      99, -1215, -1215, -1215,   369, -1215, -1215, -1215,   579,    49,
    -536,   -84, -1215, -1215,  -328, -1215,  -106, -1215, -1215, -1215,
     713,   125, -1215,   327,   778,  -133, -1215,   726,   -81,  -320,
    -694,  -547,  -825,  -156, -1215,   540, -1215,    84, -1215, -1215,
   -1215, -1215,   -33,  -399, -1020,  -119, -1215,   393,  -569,  -595,
    -269, -1215, -1215,  -792, -1215, -1215, -1215, -1215, -1215, -1215,
    -845,  -700,   402, -1215,   136,   392, -1215, -1215,  -917, -1215,
    -127, -1215, -1215, -1215, -1214, -1215,  -244,   196, -1215,   135,
   -1215, -1215,  -392,  -686,   -32,  -488, -1215, -1215, -1215, -1215,
   -1215, -1215,   -58, -1215, -1215, -1215, -1215, -1215,   123,    -3,
   -1215,  1186, -1215,  -823, -1215, -1215,   333, -1215,  -970, -1215,
     127, -1215,   126,  -565, -1052, -1215, -1037, -1215, -1215,   959,
   -1215, -1215, -1215,  -344, -1215, -1215,   722, -1215, -1215,  -469,
   -1215, -1215,  -625, -1215, -1215,  -492,  -292, -1215,   306, -1215,
    -926,   586,  -606,   286, -1215, -1215,  -786, -1215,  -769,  -183,
    -722,  -481,  -497, -1215,   793, -1215, -1215, -1215, -1215,    29,
   -1215, -1215, -1215, -1215, -1215, -1215, -1215, -1215,    47, -1215,
     -15, -1215, -1215, -1215, -1215, -1215, -1215, -1215, -1215, -1215,
   -1215, -1215, -1215, -1215, -1215, -1215,   672, -1215, -1215,   785,
   -1215,  -380,   682,  -411, -1215, -1215,   274, -1215,   273, -1215,
    -622,  -702, -1215,   387,  1074, -1215, -1215,  -178, -1215, -1215,
     278,  -157,   830,   422, -1215, -1215, -1215, -1215,  1115, -1215,
     474, -1215, -1215,   580,   218,   272, -1215, -1215,  1156, -1215,
   -1215,  1161, -1215, -1215, -1215,    41, -1215, -1215,  -508,  -159,
   -1215,  -343,   582,    -1,  -614,  -995,  -162,  -490,  -374,  -973,
    -461,   -90,   -86,  -439,  -186,    27,  -314
};

/* YYTABLE[YYPACT[STATE-NUM]].  What to do in state STATE-NUM.  If
   positive, shift that token.  If negative, reduce the rule which
   number is the opposite.  If zero, do what YYDEFACT says.
   If YYTABLE_NINF, syntax error.  */
#define YYTABLE_NINF -817
static const short yytable[] =
{
      66,    66,   302,    71,   738,   630,   248,   624,   121,    66,
     117,   342,   675,   249,   447,  1105,   624,   473,   604,   931,
     350,   386,   388,   813,   303,   486,   745,   736,   746,   438,
     445,   400,   858,    72,   609,   344,   206,   659,    77,   598,
     600,   667,    61,    67,   814,   213,   722,   909,   413,   355,
     214,    74,   770,   343,  -816,  1087,  1017,  1018,   210,   338,
    1157,  1079,  1125,  1143,  1144,   834,   975,   346,   673,  -352,
      94,  1190,   108,   425,    66,   801,    71,   941,    69,    66,
      76,  1167,   118,    66,   332,   251,  1191,  1200,    77,  1137,
     799,   371,   364,   747,   378,   379,   364,   328,   130,   684,
    1325,    77,   470,   937,    71,   909,    72,    99,   945,   748,
    1328,   800,    66,    66,    68,    66,  -816,   120,  -803,   772,
    1153,    98,    66,  1253,   928,   102,  -803,   710,   426,   807,
      78,    77,  1190,   935,    72,   389,   390,   391,   369,   914,
      66,  1065,  1138,    99,    69,   903,  1206,  1191,   722,   118,
    -816,  1039,  1041,   773,   131,   133,   415,    98,   754,   756,
     118,   430,   787,  1110,   205,   429,   722,  -352,   109,   802,
    -816,  -803,  -757,  -816,    89,   222,  -816,   404,   766,   211,
     -31,   293,   215,   347,   120,  1120,    66,    66,    66,    66,
      66,    66,    66,  1095,   110,   120,   344,   914,   465,    75,
     627,   628,   466,   903,   629,  1277,   948,    66,  1256,   372,
     978,   749,   632,  -816,   621,   373,  1293,  1296,   762,   938,
     471,   942,   712,   294,   946,    79,   472,   939,   327,   329,
     330,   205,   333,   339,   340,  1087,  1222,  1224,  1154,  1254,
     423,   424,   486,   486,  1155,   621,   808,  1255,   586,  -816,
    1058,   816,   850,  1244,   667,   667,    80,   624,   554,   558,
    1284,   825,  1297,  1298,   113,   433,  -240,  -816,   434,   655,
     906,   355,   355,   448,   344,   452,   338,   431,   338,  1291,
     455,  1111,   459,   903,   903,  1112,  1322,   -74,   464,  -578,
    -757,   903,   587,   405,  -757,   406,    66,   675,   494,  1282,
     495,   413,   582,   993,   621,   949,   409,   857,   118,  -803,
     490,    69,   474,   822,   824,   875,  1129,  -803,   624,   715,
     716,    82,  -501,   -74,  -329,  -329,  1053,  1055,   906,  -816,
    -501,   954,  -816,   622,   763,  1218,  1056,   583,   392,   943,
     944,  -501,   616,   120,   118,    66,    66,   581,     3,  -396,
     447,   921,  -754,   737,   554,   933,   934,   786,  1333,   690,
     -82,  -501,  -803,   597,   622,  -816,   445,  -501,  -816,  1245,
     840,  1246,   422,   450,  1095,  -396,   428,    92,   926,   120,
     -82,   109,   114,   -82,  -195,   656,   -82,   205,   205,   610,
     668,  1227,  1275,   554,   614,  -803,   618,   558,    66,    66,
    -195,    66,    66,    66,   942,    66,    66,   110,    66,   921,
      66,    66,   598,  1103,   655,  1283,    66,    66,   566,    93,
    -501,  -803,   410,   622,   411,    66,   487,   491,   108,    66,
      66,  -803,  -799,   655,  1136,   500,   926,   888,   109,    66,
      66,   489,  -752,   492,   493,   205,  -237,   205,   496,  -752,
     339,   -78,   339,   504,   577,   641,  1059,  1278,   617,   903,
     903,  -578,  1281,  -757,   110,   655,   687,   574,   674,   109,
    -754,  -113,   903,   722,  -754,    66,    66,    66,    85,  1235,
     783,   592,   593,  1257,   118,    66,   689,   964,   724,    66,
    1089,   451,   741,  1022,   671,   110,   924,    66,   481,  1023,
     959,   624,   701,   108,   -33,   876,   171,   702,   185,  -803,
     767,  1309,    66,  1245,   954,  1246,   954,   611,   612,   120,
    1064,   796,   943,  1285,   109,   927,  1205,  -397,  1207,  1104,
     656,   626,   344,  -755,   103,  -803,   823,   883,  -752,   631,
     871,  -752,   107,  -752,   743,   224,   603,   245,    66,   656,
     110,    66,    86,  -397,   924,    66,  -406,   872,  -406,  1141,
    -752,  -752,   109,   115,  -752,   383,   384,  -752,  -752,    66,
     908,   743,  -756,   873,   222,  -752,   109,   613,  -758,  1027,
    1029,   656,    66,   927,   688,   620,   677,    75,   110,   153,
     724,   155,   927,   845,  -395,   422,  1235,  1235,   784,   109,
     777,   692,   110,   668,   668,   363,    69,  1088,   724,  1217,
     785,   574,   123,   960,   974,    66,    66,  -753,    66,   159,
    -395,   821,    -2,   422,   698,   110,   798,  -239,   908,   737,
    1218,   126,   109,   109,   924,   924,    85,   374,   359,  1203,
     968,   365,   924,   487,   487,   365,   805,  1176,   399,   838,
     838,  -755,   407,   884,   451,  -755,   500,     1,   110,   110,
     467,   209,  1259,   468,   249,   969,  -238,    69,    66,  -235,
     675,   560,  -241,   970,   724,   835,   836,   216,   562,  1287,
     218,   566,  1289,  1290,   118,   394,    66,    66,   761,    66,
    -756,   398,     2,  -752,  -756,  1326,  -758,  -752,    66,    66,
    -758,   183,   219,   851,   109,     3,   119,   566,  1075,  1075,
    1258,  -236,   918,   151,   152,   481,   481,   838,   734,   120,
     399,   416,   109,   417,   412,   692,   116,   109,   574,   574,
     110,   781,  -578,   418,   879,  -753,   501,  1211,   503,  -753,
     788,   698,   500,   109,   881,  1061,   885,   449,   110,    66,
    1209,   275,  1317,   110,   458,   276,   292,   460,   245,   245,
      69,    66,    66,    66,   304,  1177,   277,   838,   109,   110,
     918,   223,   996,  1131,   996,   996,   815,   250,   818,  1020,
     301,   968,    66,    66,   458,    66,   278,  1088,  1161,   295,
     139,   819,   140,   341,   110,   345,  -165,   142,  -165,   578,
     580,    66,   348,  1185,  1185,  -165,   969,   279,   280,  -656,
     924,   924,   778,   780,   970,   692,   360,   296,   297,   147,
     298,   367,   109,   924,   698,   698,  -165,   849,   370,   299,
      60,  -656,   846,   848,  1330,  -656,   546,   363,   363,   375,
     601,  1026,  1028,   861,   454,   624,   827,   829,   110,  -635,
     961,   963,   281,   282,   283,   284,   605,   394,   394,  1168,
    1170,   381,    66,   831,  1185,  1201,  1202,   285,   286,  1062,
     399,   677,   387,   387,  1250,  1251,   402,  -635,  -635,  1212,
    -635,   403,    66,    66,  1075,  1075,   453,   109,   469,  -635,
    1310,  1311,   570,   633,    66,   109,   639,  1236,    66,  1015,
      66,    66,   647,   996,   861,   958,  1130,   575,   651,   603,
    1045,  1047,  1108,   110,   967,   973,   973,  1299,   588,   980,
     594,   110,   730,   733,  1185,   720,   253,  1185,  1185,   635,
    1049,  1051,   596,  1292,  1292,   648,    66,    66,   615,    66,
     997,  1014,   997,   997,   606,   608,   653,   139,   619,   140,
     679,   461,   463,   650,   142,   546,   546,   652,   654,   660,
     254,  -145,   693,   669,   678,   292,   292,   680,   255,   690,
     621,   681,   682,   685,  1315,  1316,   147,   700,   861,   861,
      66,  1043,   831,   831,  1100,   703,   704,    60,  -501,   458,
     714,   973,   707,   256,   257,   711,   548,  1159,   258,  1162,
      66,   717,   739,  1072,   262,   263,   264,   265,   487,  1318,
    1319,  1320,  1321,   744,  -501,   757,   302,   735,   750,  -501,
     751,   266,   267,   764,   768,  -748,  1098,   719,   187,    66,
    1178,   -27,   190,   724,   136,   222,   769,   752,   303,   363,
    -501,   -27,   215,   774,   440,   139,   720,   140,   790,   292,
     292,   791,   142,   803,   721,   441,   702,   922,  1122,  1208,
    1210,   804,   841,   843,   844,  -501,  -501,   863,   139,   882,
     140,   997,   932,  -501,   147,   142,   936,   546,   546,   940,
    1084,    66,   950,   136,   953,    60,  -501,    66,   958,   622,
     637,   965,  -501,  1150,   977,   981,   991,   147,   797,   724,
    1025,  1243,    66,    66,   724,  -791,  1030,   369,    60,    66,
      66,   923,   187,   188,   189,   922,   548,   139,  1033,   140,
    -420,  1034,  1100,  1100,   142,  1261,  1262,   810,   191,   811,
    1035,  1042,   192,   639,   647,  1036,   647,  1037,  1063,   193,
    1044,  1066,  1279,  1060,  1080,  1090,   147,   826,  1101,  1221,
    1197,  1172,  1174,   724,  1102,   187,  1286,    60,  -649,   190,
      66,  1113,    66,  1109,  1196,  1196,  1134,   546,   782,   923,
     546,   440,  1114,  1135,  1300,  1142,  1216,  1221,  1148,  1152,
     546,  1158,   441,  1100,  1156,  1165,   290,  1164,   487,  1160,
     862,  -754,   139,  1163,   140,   922,   922,   387,   291,   142,
    -755,  -756,  -752,   922,   387,  1166,  -753,  1180,  1179,   222,
     363,  1197,  1274,   740,    66,   802,   139,  1204,   140,  1225,
    1226,   147,  1231,   142,  -758,  1196,  1263,  -414,  1249,   929,
     930,  1280,    60,  -416,   546,  1252,  -415,   548,   548,  1329,
    1306,  1307,  1331,  1100,   677,   147,  1100,  1100,  1308,   923,
     923,   335,    66,    66,  1314,  1324,    60,   923,  1332,   706,
    1084,   951,  1230,    66,    66,    66,    66,   458,   775,    83,
      84,   125,   694,   794,   546,   546,   705,   546,   856,   789,
     351,   295,   672,   686,   118,  1196,   636,  1013,  1196,  1196,
     992,   820,   741,  1021,  1196,  1196,   983,  1229,  1019,   387,
    1171,  1237,   135,  1241,  1068,  1301,  1302,  1303,  1304,   296,
     297,  1242,   298,    66,  1272,  1248,   439,   387,   709,   120,
     806,   299,   139,    66,   140,  1073,   658,   548,  1132,   142,
     548,  1313,   662,   760,   753,  1146,  1147,   634,   368,   639,
     548,  1194,  1194,   324,   153,   377,   155,   500,   325,     0,
     109,   147,   137,   138,     0,     0,   720,   151,   152,     0,
     154,     0,    60,     0,     0,     0,     0,     0,     0,     0,
       0,   922,   922,   878,   159,   546,   110,     0,   139,     0,
     140,     0,     0,   387,   922,   142,     0,     0,     0,     0,
       0,     0,     0,     0,   548,  1195,  1195,     0,     0,     0,
       0,     0,  1194,     0,     0,     0,     0,   147,     0,  1117,
    1118,     0,  1119,   151,   152,   153,   154,   155,    60,  1128,
       0,   925,   156,   157,     0,   923,   923,   187,   188,   189,
       0,   190,     0,     0,   548,   548,     0,   548,   923,     0,
     -63,     0,   900,   191,     0,   159,     0,  1145,     0,     0,
     161,   162,     0,     0,   193,   -63,  1195,  1151,     0,     0,
     546,  1021,  1194,     0,   387,  1194,  1194,     0,     0,     0,
       0,  1294,  1294,   187,   188,   189,     0,   190,   546,   925,
     387,    -5,     0,     0,     0,     0,   187,   188,   189,   191,
     190,     0,     0,   192,   792,     0,   621,     0,     0,   -65,
     193,  1175,   191,     0,     0,     0,   192,     0,   891,     0,
    1193,   245,     0,   193,   588,   892,  1195,     0,     0,  1195,
    1195,     0,     0,   137,   138,  1295,  1295,     0,     0,     0,
       0,   895,     0,   896,     0,   548,     0,     0,     0,   793,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   139,
       0,   140,     0,   141,     0,     0,   142,     0,   546,   925,
     925,     0,     0,  1238,  1240,     0,     0,  1099,     0,     0,
    1223,  1193,   143,   144,     0,   145,   146,     0,   147,     0,
       0,   148,   149,   150,   151,   152,   153,   154,   155,    60,
       0,     0,     0,   156,   157,     0,     0,   137,   138,     0,
       0,   720,     0,     0,     0,  1276,     0,     0,     0,     0,
       0,     0,     0,   158,     0,   136,   159,     0,     0,   160,
     548,   161,   162,   139,   387,   140,     0,   546,   163,   546,
     142,  1128,     0,     0,  1128,  1128,  1128,     0,   548,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   139,
       0,   140,   147,   141,     0,     0,   142,  1305,   151,   152,
     153,   154,   155,    60,     0,     0,     0,   156,   157,     0,
       0,     0,   143,   144,  1050,   145,   146,     0,   147,     0,
       0,   148,   149,   150,  -804,     0,     0,   900,     0,    60,
     159,     0,  -804,   136,     0,   161,   162,     0,     0,     0,
      69,   137,   138,   559,   560,     0,   561,     0,     0,     0,
    1327,   562,     0,   158,     0,     0,   387,   387,   548,     0,
       0,     0,     0,     0,   563,   564,   565,   139,     0,   140,
     387,   141,     0,     0,   142,   925,   925,  -804,     0,     0,
       0,     0,   387,     0,     0,     0,     0,     0,   925,     0,
     143,   144,     0,   145,   146,     0,   147,     0,     0,   148,
     149,   150,   151,   152,   153,   154,   155,    60,     0,     0,
       0,   156,   157,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   548,     0,   548,
       0,   158,     0,     0,   159,     0,     0,   160,     0,   161,
     162,     0,     0,     0,     0,     0,   163,     0,   387,     0,
       0,  1181,     0,   387,     0,     0,    12,    13,    14,    15,
      16,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     136,     0,     0,     0,     0,     0,     0,     0,   137,   138,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    17,    18,    19,    20,    21,
      22,    23,   387,    24,  1091,    26,  1092,    28,  1001,    30,
      31,  1093,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,  1003,  1004,    50,
    1005,  1006,    53,  1094,    55,    56,  1182,  1009,  1183,   151,
     152,   153,   154,   155,    60,     0,     0,  -816,   156,   157,
       0,  1198,     0,     0,     0,     0,    12,    13,    14,    15,
      16,     0,     0,     0,     0,     0,     0,     0,  1184,     0,
     136,   159,     0,  -816,  1124,     0,   161,   162,   137,   138,
       0,     0,     0,   163,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    17,    18,    19,    20,    21,
      22,    23,     0,    24,  1091,    26,  1092,    28,  1001,    30,
      31,  1093,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,  1003,  1004,    50,
    1005,  1006,    53,  1094,    55,    56,  1182,  1009,  1183,   151,
     152,   153,   154,   155,    60,   998,     0,     0,   156,   157,
      12,    13,    14,    15,    16,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   136,     0,     0,     0,   158,     0,
       0,   159,   137,   138,   160,   244,   161,   162,     0,     0,
       0,     0,     0,   163,     0,     0,     0,     0,     0,    17,
      18,    19,    20,    21,    22,    23,     0,    24,   999,    26,
    1000,    28,  1001,    30,    31,  1002,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,  1003,  1004,    50,  1005,  1006,    53,  1007,    55,    56,
    1008,  1009,  1010,   151,   152,   153,   154,   155,    60,     0,
       0,     0,   156,   157,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   755,   158,     0,     0,   159,     0,     0,   160,     0,
     161,   162,   505,     0,   341,   506,     0,   163,     0,  -501,
     136,   507,     0,   508,   509,     0,     0,     0,     0,   510,
       0,   511,     0,     0,     0,     0,     0,   512,     0,     0,
       0,  -501,   513,   514,   515,     0,     0,     0,     0,   516,
       0,     0,     0,     0,   139,  -501,   140,     0,   141,     0,
       0,   142,     0,     0,     0,     0,     0,     0,   517,   518,
       0,   393,     0,   519,     0,     0,     0,   143,   144,   520,
     145,   146,   521,   147,   522,   523,   148,   149,   150,   335,
     136,     0,     0,     0,    60,     0,     0,     0,   137,   138,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  -501,   158,     0,
       0,     0,     0,     0,   139,     0,   140,     0,   141,     0,
       0,   142,     0,   524,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   143,   144,     0,
     145,   146,   456,   147,     0,     0,   148,   149,   150,   151,
     152,   153,   154,   155,    60,     0,     0,     0,   156,   157,
       0,   136,     0,     0,     0,     0,     0,     0,     0,   137,
     138,     0,     0,     0,     0,     0,     0,     0,   158,     0,
       0,   159,     0,     0,   160,     0,   161,   162,     0,     0,
       0,     0,     0,   163,     0,   139,     0,   140,     0,   141,
       0,     0,   142,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   143,   144,
       0,   145,   146,   462,   147,     0,     0,   148,   149,   150,
     151,   152,   153,   154,   155,    60,     0,     0,     0,   156,
     157,     0,   136,     0,     0,     0,     0,     0,     0,     0,
     137,   138,     0,     0,     0,     0,     0,     0,     0,   158,
       0,     0,   159,     0,     0,   160,     0,   161,   162,     0,
       0,     0,     0,     0,   163,     0,   139,     0,   140,     0,
     141,     0,     0,   142,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   143,
     144,     0,   145,   146,   599,   147,     0,     0,   148,   149,
     150,   151,   152,   153,   154,   155,    60,     0,     0,     0,
     156,   157,     0,   136,     0,     0,     0,     0,     0,     0,
       0,   137,   138,     0,     0,     0,     0,     0,     0,     0,
     158,     0,     0,   159,     0,     0,   160,     0,   161,   162,
       0,     0,     0,     0,     0,   163,     0,   139,     0,   140,
       0,   141,     0,     0,   142,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     143,   144,     0,   145,   146,   607,   147,     0,     0,   148,
     149,   150,   151,   152,   153,   154,   155,    60,     0,     0,
       0,   156,   157,     0,   136,     0,     0,     0,     0,     0,
       0,     0,   137,   138,     0,     0,     0,     0,     0,     0,
       0,   158,     0,     0,   159,     0,     0,   160,     0,   161,
     162,     0,     0,     0,     0,     0,   163,     0,   139,     0,
     140,     0,   141,     0,     0,   142,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   143,   144,     0,   145,   146,   643,   147,     0,     0,
     148,   149,   150,   151,   152,   153,   154,   155,    60,     0,
       0,     0,   156,   157,     0,   136,     0,     0,     0,     0,
       0,     0,     0,   137,   138,     0,     0,     0,     0,     0,
       0,     0,   158,     0,     0,   159,     0,     0,   160,     0,
     161,   162,     0,     0,     0,     0,     0,   163,     0,   139,
       0,   140,     0,   141,     0,     0,   142,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   143,   144,     0,   145,   146,   713,   147,     0,
       0,   148,   149,   150,   151,   152,   153,   154,   155,    60,
       0,     0,     0,   156,   157,     0,   136,     0,     0,     0,
       0,     0,     0,     0,   137,   138,     0,     0,     0,     0,
       0,     0,     0,   158,     0,     0,   159,     0,     0,   160,
       0,   161,   162,     0,     0,     0,     0,     0,   163,     0,
     139,     0,   140,     0,   141,     0,     0,   142,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   143,   144,     0,   145,   146,   817,   147,
       0,     0,   148,   149,   150,   151,   152,   153,   154,   155,
      60,     0,     0,     0,   156,   157,     0,   136,     0,     0,
       0,     0,     0,     0,     0,   137,   138,     0,     0,     0,
       0,     0,     0,     0,   158,     0,     0,   159,     0,     0,
     160,     0,   161,   162,     0,     0,     0,     0,     0,   163,
       0,   139,     0,   140,     0,   141,     0,     0,   142,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   143,   144,     0,   145,   146,   864,
     147,     0,     0,   148,   149,   150,   151,   152,   153,   154,
     155,    60,     0,     0,     0,   156,   157,     0,   136,     0,
       0,     0,     0,     0,     0,     0,   137,   138,     0,     0,
       0,     0,     0,     0,     0,   158,     0,     0,   159,     0,
       0,   160,     0,   161,   162,     0,     0,     0,     0,     0,
     163,     0,   139,     0,   140,     0,   141,     0,     0,   142,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   143,   144,     0,   145,   146,
       0,   147,     0,     0,   148,   149,   150,   151,   152,   153,
     154,   155,    60,     0,     0,     0,   156,   157,     0,     0,
       0,     0,   621,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   891,     0,   158,     0,     0,   159,
       0,   892,   160,   893,   161,   162,     0,     0,     0,   137,
     138,   163,     0,   720,   894,     0,     0,   895,     0,   896,
       0,   721,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   897,  1046,     0,   139,     0,   140,     0,     0,
       0,     0,   142,     0,     0,     0,     0,     0,   898,     0,
       0,     0,   136,     0,     0,     0,     0,     0,     0,     0,
     137,   138,     0,     0,   147,     0,     0,     0,     0,     0,
     151,   152,   153,   154,   899,    60,     0,     0,     0,   156,
     157,     0,     0,     0,     0,     0,   139,     0,   140,     0,
     141,     0,     0,   142,     0,     0,     0,     0,     0,   900,
       0,     0,   901,     0,     0,     0,     0,   161,   162,   143,
     144,     0,   145,   146,   902,   147,  1054,     0,   148,   149,
     150,   151,   152,   153,   154,   155,    60,     0,     0,     0,
     156,   157,     0,     0,     0,   136,     0,     0,     0,     0,
       0,     0,     0,   137,   138,     0,     0,     0,     0,     0,
     158,     0,     0,   159,     0,     0,   160,     0,   161,   162,
       0,     0,     0,     0,     0,   163,     0,     0,     0,   139,
       0,   140,     0,   141,     0,     0,   142,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   143,   144,     0,   145,   146,  1067,   147,     0,
       0,   148,   149,   150,   151,   152,   153,   154,   155,    60,
       0,     0,     0,   156,   157,     0,  -388,     0,     0,     0,
       0,     0,     0,     0,  -388,  -388,     0,     0,     0,     0,
       0,     0,     0,   158,     0,     0,   159,     0,     0,   160,
       0,   161,   162,     0,     0,     0,     0,     0,   163,     0,
    -388,     0,  -388,     0,  -388,     0,     0,  -388,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  -388,  -388,     0,  -388,  -388,  1069,  -388,
       0,     0,  -388,  -388,  -388,  -388,  -388,  -388,  -388,  -388,
    -388,     0,     0,     0,  -388,  -388,     0,  -385,     0,     0,
       0,     0,     0,     0,     0,  -385,  -385,     0,     0,     0,
       0,     0,     0,     0,  -388,     0,     0,  -388,     0,     0,
    -388,     0,  -388,  -388,     0,     0,     0,     0,     0,  -388,
       0,  -385,     0,  -385,     0,  -385,     0,     0,  -385,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  -385,  -385,     0,  -385,  -385,  1115,
    -385,     0,     0,  -385,  -385,  -385,  -385,  -385,  -385,  -385,
    -385,  -385,     0,     0,     0,  -385,  -385,     0,   136,     0,
       0,     0,     0,     0,     0,     0,   137,   138,     0,     0,
       0,     0,     0,     0,     0,  -385,     0,     0,  -385,     0,
       0,  -385,     0,  -385,  -385,     0,     0,     0,     0,     0,
    -385,     0,   139,     0,   140,     0,   141,     0,     0,   142,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   143,   144,     0,   145,   146,
    1232,   147,     0,     0,   148,   149,   150,   151,   152,   153,
     154,   155,    60,     0,     0,     0,   156,   157,     0,   136,
       0,     0,     0,     0,     0,     0,     0,   137,   138,     0,
       0,     0,     0,     0,     0,     0,   158,     0,     0,   159,
       0,     0,   160,     0,   161,   162,     0,     0,     0,     0,
       0,   163,     0,   139,     0,   140,     0,   141,     0,     0,
     142,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   143,   144,     0,   145,
     146,  1239,   147,     0,     0,   148,   149,   150,   151,   152,
     153,   154,   155,    60,     0,     0,     0,   156,   157,     0,
     136,     0,     0,     0,     0,     0,     0,     0,   137,   138,
       0,     0,     0,     0,     0,     0,     0,   158,     0,     0,
     159,     0,     0,   160,     0,   161,   162,     0,     0,     0,
       0,     0,   163,     0,   139,     0,   140,     0,   141,     0,
       0,   142,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   143,   144,     0,
     145,   146,     0,   147,     0,     0,   148,   149,   150,   151,
     152,   153,   154,   155,    60,     0,     0,     0,   156,   157,
       0,     0,     0,     0,   621,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   891,     0,   158,     0,
       0,   159,     0,   892,   160,   893,   161,   162,     0,     0,
       0,   137,   138,   163,     0,   720,   894,     0,     0,   895,
       0,   896,     0,   721,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   139,     0,   140,
       0,     0,     0,     0,   142,     0,     0,     0,     0,     0,
     898,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   147,     0,     0,     0,
       0,     0,   151,   152,   153,   154,   899,    60,     0,     0,
       0,   156,   157,     0,    12,    13,    14,    15,    16,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   136,     0,
     893,   900,     0,     0,   901,     0,     0,     0,     0,   161,
     162,   894,     0,     0,     0,     0,   902,     0,     0,     0,
       0,     0,     0,    17,    18,    19,    20,    21,    22,    23,
       0,    24,    25,    26,    27,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      53,    54,    55,    56,    57,    58,    59,     0,     0,     0,
       0,     0,  1016,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   226,   227,   228,   229,   230,
     231,   232,   233,   234,   235,   236,   237,   238,   239,   240,
     241,   242,    12,    13,    14,    15,    16,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   136,     0,     0,     0,
       0,     0,     0,     0,   137,   138,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    17,    18,    19,    20,    21,    22,    23,     0,    24,
    1091,    26,  1092,    28,  1001,    30,    31,  1093,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,  1003,  1004,    50,  1005,  1006,    53,  1094,
      55,    56,  1182,  1009,  1183,   151,   152,   153,   154,   155,
      60,     0,     0,     0,   156,   157,     0,     0,     0,     0,
      12,    13,    14,    15,    16,     0,   305,     0,     0,     0,
     306,     0,     0,     0,  1123,     0,     0,   159,     0,   307,
    1124,   308,   161,   162,     0,   309,     0,     0,     0,   163,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    17,
      18,    19,    20,    21,    22,    23,     0,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    58,    59,     0,     0,     0,     0,     0,    60,     0,
     118,     0,   310,   311,     0,     0,     0,   312,     0,   313,
     314,   315,   316,   262,   263,   264,   265,   281,   282,   283,
     284,    12,    13,    14,    15,    16,     0,     0,     0,     0,
     317,   318,   319,   320,   321,   120,   322,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      17,    18,    19,    20,    21,    22,    23,     0,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,   225,     0,     0,  1169,     0,    60,
       0,   118,    12,    13,    14,    15,    16,     0,     0,     0,
       0,   985,     0,     0,     0,  -804,     0,   226,   227,   228,
     229,   230,   231,   232,   233,   234,   235,   236,   237,   238,
     239,   240,   241,   242,     0,     0,   120,     0,     0,     0,
       0,    17,    18,    19,    20,    21,    22,    23,     0,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    12,    13,    14,    15,    16,
      60,     0,     0,  -804,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   137,   138,     0,
       0,   720,     0,     0,     0,     0,     0,     0,     0,  -804,
       0,     0,     0,     0,    17,    18,    19,    20,    21,    22,
      23,     0,    24,  1091,    26,  1092,    28,    29,    30,    31,
    1093,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    53,  1094,    55,    56,    57,    58,    59,   151,   152,
     153,   154,   155,    60,     0,     0,     0,   156,   157,    12,
      13,    14,    15,    16,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   900,     0,     0,
     159,     0,   138,     0,     0,   161,   162,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    17,    18,
      19,    20,    21,    22,    23,     0,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      58,    59,   151,   152,     0,     0,   505,    60,   341,   506,
       0,   156,   157,     0,   136,   507,     0,   508,   509,     0,
       0,     0,     0,   510,     0,   511,     0,     0,     0,     0,
       0,   512,     0,     0,     0,     0,   513,   514,   515,   161,
     162,     0,     0,   516,     0,     0,     0,     0,   139,     0,
     140,     0,   141,     0,     0,   142,     0,     0,     0,     0,
       0,     0,   517,   518,     0,     0,     0,   519,     0,     0,
       0,   143,   144,   520,   145,   146,   521,   147,   522,   523,
     148,   149,   150,   335,   505,     0,   341,   506,    60,     0,
       0,     0,   136,   507,     0,   508,   509,     0,     0,     0,
       0,   510,     0,   511,     0,     0,     0,     0,     0,   512,
       0,     0,   158,     0,     0,   514,   515,     0,     0,     0,
       0,   516,     0,     0,     0,     0,   139,   524,   140,     0,
     141,     0,     0,   142,     0,     0,     0,     0,     0,     0,
     517,   518,     0,     0,     0,   519,     0,     0,     0,   143,
     144,   520,   145,   146,   521,   147,   522,   523,   148,   149,
     150,  -350,   136,     0,     0,     0,    60,     0,     0,     0,
     137,   138,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     158,     0,     0,     0,     0,     0,   139,     0,   140,     0,
     141,     0,     0,   142,     0,   524,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   143,
     144,     0,   145,   146,     0,   147,     0,     0,   148,   149,
     150,   151,   152,   153,   154,   155,    60,     0,   136,     0,
     156,   157,     0,     0,     0,     0,   137,   138,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  -350,
     158,     0,     0,   159,     0,     0,   160,     0,   161,   162,
       0,     0,   139,     0,   140,   163,   141,     0,     0,   142,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   143,   144,     0,   145,   146,
       0,   147,     0,     0,   148,   149,   150,   151,   152,   153,
     154,   155,    60,     0,   136,     0,   156,   157,     0,     0,
       0,     0,   137,   138,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   158,     0,     0,   159,
       0,     0,   160,   244,   161,   162,     0,     0,   139,     0,
     140,   163,   141,     0,     0,   142,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   143,   144,     0,   145,   146,     0,   147,     0,     0,
     148,   149,   150,   151,   152,   153,   154,   155,    60,     0,
     136,     0,   156,   157,     0,     0,     0,     0,   137,   138,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   158,     0,     0,   159,     0,     0,   160,     0,
     161,   162,     0,     0,   139,     0,   140,   163,   141,     0,
       0,   142,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   143,   144,     0,
     145,   146,     0,   147,     0,     0,   148,   149,   150,   151,
     152,   153,   154,   155,    60,     0,   136,     0,   156,   157,
       0,     0,     0,     0,   137,   138,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1123,     0,
       0,   159,     0,     0,  1124,     0,   161,   162,     0,     0,
     139,     0,   140,   163,   141,     0,     0,   142,   252,     0,
       0,     0,     0,     0,   253,     0,     0,     0,     0,     0,
       0,     0,     0,   143,   144,     0,   145,   146,     0,   147,
       0,     0,   148,   149,   150,   151,   152,   153,   154,   155,
      60,     0,     0,     0,   156,   157,     0,     0,   254,     0,
       0,     0,     0,     0,     0,     0,   255,     0,     0,     0,
       0,     0,     0,     0,   158,     0,     0,   159,     0,     0,
     160,     0,     0,     0,     0,     0,     0,     0,     0,   163,
       0,   256,   257,     0,     0,     0,   258,     0,   259,   260,
     261,   475,   262,   263,   264,   265,    12,    13,    14,    15,
      16,     0,     0,     0,     0,     0,     0,     0,     0,   266,
     267,     0,   476,   268,   269,   270,     0,     0,     0,     0,
       0,     0,     0,   477,     0,     0,     0,     0,     0,     0,
       0,     0,  -816,     0,     0,    17,    18,    19,    20,    21,
      22,    23,   478,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    53,   479,    55,    56,    57,    58,    59,     0,
     731,     0,     0,     0,    60,    12,    13,    14,    15,    16,
       0,   480,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   476,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   477,     0,     0,     0,     0,     0,     0,     0,
       0,  -816,     0,     0,    17,    18,    19,    20,    21,    22,
      23,   478,    24,    25,    26,    27,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    53,   479,    55,    56,    57,    58,    59,     0,  1081,
       0,     0,     0,    60,    12,    13,    14,    15,    16,     0,
     732,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    -816,     0,     0,    17,    18,    19,    20,    21,    22,    23,
    1082,    24,    25,    26,    27,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      53,   479,    55,    56,    57,    58,    59,     0,  1081,     0,
       0,     0,    60,    12,    13,    14,    15,    16,     0,  1083,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  -816,
       0,     0,    17,    18,    19,    20,    21,    22,    23,  1082,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
     479,    55,    56,    57,    58,    59,   137,   138,     0,     0,
     720,    60,     0,     0,     0,     0,     0,     0,  1228,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   139,     0,   140,     0,     0,     0,     0,   142,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   147,     0,     0,     0,     0,     0,   151,   152,   153,
     154,   155,    60,     0,     0,     0,   156,   157,     0,     0,
       0,     0,   828,     0,     0,     0,     0,   -24,   -24,   -24,
     -24,   -24,     0,     0,     0,   -24,   900,     0,     0,   159,
     -24,     0,     0,   -24,   161,   162,     0,   -24,     0,     0,
       0,     0,     0,     0,   -24,   -24,     0,     0,     0,     0,
       0,   -24,     0,   -24,     0,     0,    17,    18,    19,    20,
      21,    22,    23,   -24,     0,    25,    26,    27,     0,    29,
     -24,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
       0,   550,     0,     0,     0,    60,   -25,   -25,   -25,   -25,
     -25,     0,     0,     0,   -25,     0,     0,     0,     0,   -25,
       0,     0,   -25,     0,     0,     0,   -25,     0,     0,     0,
       0,     0,     0,   -25,   -25,     0,     0,     0,     0,     0,
     -25,     0,   -25,     0,     0,    17,    18,    19,    20,    21,
       0,    23,   -25,     0,    25,    26,    27,     0,    29,   -25,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,     0,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    58,    59,     0,
    1213,     0,     0,     0,    60,  -816,  -816,  -816,  -816,  -816,
       0,     0,     0,     0,     0,     0,     0,     0,  -816,     0,
       0,  -816,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  -816,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  -816,  -816,  -816,  -816,  -816,  -816,
    -816,     0,  -816,  -816,  -816,  -816,  -816,  -816,  -816,  -816,
    -816,  -816,  -816,  -816,  -816,  -816,  -816,  -816,  -816,  -816,
    -816,  -816,  -816,  -816,  -816,  -816,  -816,  -816,  -816,  -816,
    -816,  -816,  -816,  -816,  -816,  -816,  -816,  -816,     0,   984,
       0,     0,     0,  -816,    12,    13,    14,    15,    16,     0,
       0,     0,     0,   985,     0,     0,     0,  -300,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    17,    18,    19,    20,    21,    22,    23,
       0,    24,    25,    26,    27,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      53,    54,    55,    56,    57,    58,    59,     0,   334,     0,
       0,     0,    60,    12,    13,    14,    15,    16,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    17,    18,    19,    20,    21,    22,    23,     0,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    58,    59,   335,   502,     0,     0,
       0,    60,    12,    13,    14,    15,    16,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    17,    18,    19,    20,    21,    22,    23,     0,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,   335,    11,     0,     0,     0,
      60,    12,    13,    14,    15,    16,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      17,    18,    19,    20,    21,    22,    23,     0,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,     0,   132,     0,     0,     0,    60,
      12,    13,    14,    15,    16,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    17,
      18,    19,    20,    21,    22,    23,     0,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    58,    59,     0,   571,     0,     0,     0,    60,    12,
      13,    14,    15,    16,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    17,    18,
      19,    20,    21,    22,    23,     0,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      58,    59,     0,   695,     0,     0,     0,    60,    12,    13,
      14,    15,    16,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    17,    18,    19,
      20,    21,    22,    23,     0,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    53,   479,    55,    56,    57,    58,
      59,     0,   779,     0,     0,     0,    60,    12,    13,    14,
      15,    16,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    17,    18,    19,    20,
      21,    22,    23,     0,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
       0,   830,     0,     0,     0,    60,    12,    13,    14,    15,
      16,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    17,    18,    19,    20,    21,
      22,    23,     0,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    58,    59,     0,
     847,     0,     0,     0,    60,    12,    13,    14,    15,    16,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    17,    18,    19,    20,    21,    22,
      23,     0,    24,    25,    26,    27,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    53,   479,    55,    56,    57,    58,    59,     0,   962,
       0,     0,     0,    60,    12,    13,    14,    15,    16,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    17,    18,    19,    20,    21,    22,    23,
       0,    24,    25,    26,    27,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      53,    54,    55,    56,    57,    58,    59,     0,  1040,     0,
       0,     0,    60,    12,    13,    14,    15,    16,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    17,    18,    19,    20,    21,    22,    23,     0,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    58,    59,     0,  1173,     0,     0,
       0,    60,    12,    13,    14,    15,    16,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    17,    18,    19,    20,    21,    22,    23,     0,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,     0,   579,     0,     0,     0,
      60,  -112,     0,     0,     0,  -112,     0,     0,     0,     0,
       0,     0,     0,     0,  -112,     0,     0,  -112,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  -112,     0,
       0,     0,     0,     0,     0,  -112,     0,  -112,     0,     0,
      17,    18,    19,    20,    21,     0,    23,  -112,   663,    25,
      26,    27,  -113,    29,     0,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,     0,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,     0,     0,     0,     0,     0,    60,
       0,     0,    17,    18,    19,    20,    21,    22,    23,   352,
       0,    25,    26,    27,     0,    29,     0,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    58,    59,     0,     0,     0,     0,
       0,    60,     0,    17,    18,    19,    20,    21,     0,    23,
     550,     0,    25,    26,    27,     0,    29,     0,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,     0,    46,    47,    48,    49,    50,    51,    52,
      53,    54,    55,    56,    57,    58,    59,     0,     0,     0,
       0,     0,    60,     0,    17,    18,    19,    20,    21,     0,
      23,   555,     0,    25,    26,    27,     0,    29,     0,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,     0,    46,    47,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    58,    59,     0,     0,
       0,     0,     0,    60,     0,    17,    18,    19,    20,    21,
       0,    23,     0,     0,    25,    26,    27,     0,    29,     0,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,     0,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    58,    59,    12,
      13,    14,    15,    16,    60,     0,     0,     0,     0,     0,
       0,     0,     0,   136,     0,   893,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   894,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    17,    18,
      19,    20,    21,    22,    23,  -806,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      58,    59,    12,    13,    14,    15,    16,    60,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   476,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   477,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    17,    18,    19,    20,    21,    22,    23,   478,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,   479,
      55,    56,    57,    58,    59,    12,    13,    14,    15,    16,
      60,     0,     0,     0,     0,     0,     0,     0,     0,   136,
       0,   893,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   894,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    17,    18,    19,    20,    21,    22,
      23,     0,    24,    25,    26,    27,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    58,    59,    12,  1264,
    1265,    15,    16,    60,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1266,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1267,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    17,  1268,    19,
      20,    21,  1269,    23,     0,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,  1270,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    53,  1271,    55,    56,    57,    58,
      59,    12,    13,    14,    15,    16,    60,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      17,    18,    19,    20,    21,    22,    23,    95,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    12,    13,    14,    15,    16,    60,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    17,    18,    19,    20,    21,    22,    23,
       0,    24,    25,    26,    27,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      53,    54,    55,    56,    57,    58,    59,   335,     0,     0,
       0,     0,    60,    12,    13,    14,    15,    16,     0,     0,
       0,     0,   985,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    17,    18,    19,    20,    21,    22,    23,     0,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    58,    59,    12,    13,    14,    15,
      16,    60,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    17,    18,    19,    20,    21,
      22,    23,     0,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    58,    59,    12,
      13,    14,    15,    16,    60,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    17,    18,
      19,    20,    21,    22,    23,     0,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    53,   479,    55,    56,    57,
      58,    59,     0,     0,     0,     0,     0,    60,    17,    18,
      19,    20,    21,    22,    23,     0,     0,    25,    26,    27,
       0,    29,     0,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      58,    59,    17,    18,    19,    20,    21,    60,    23,     0,
       0,    25,    26,    27,     0,    29,     0,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,     0,    46,    47,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    58,    59,     0,     0,     0,     0,
       0,    60
};

/* YYCONFLP[YYPACT[STATE-NUM]] -- Pointer into YYCONFL of start of
   list of conflicting reductions corresponding to action entry for
   state STATE-NUM in yytable.  0 means no conflicts.  The list in
   yyconfl is terminated by a rule number of 0.  */
static const unsigned char yyconflp[] =
{
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0
};

/* YYCONFL[I] -- lists of conflicting rule numbers, each terminated by
   0, pointed into by YYCONFLP.  */
static const short yyconfl[] =
{
       0
};

static const short yycheck[] =
{
       1,     2,   180,     6,   629,   497,   163,   488,    98,    10,
      96,   194,   559,   169,   358,   988,   497,   397,   457,   844,
     206,   290,   291,   745,   181,   399,   640,   622,   642,   357,
     358,   323,   801,     6,   473,   197,   124,   534,    11,   450,
     451,   549,     1,     2,   746,   129,   615,   839,   340,   208,
     134,    10,   674,   197,     1,   981,   901,   902,     1,   192,
    1080,   978,  1032,  1058,  1059,     1,   889,     1,   558,    19,
      79,  1123,     1,    63,    75,    30,    79,   863,    50,    80,
      11,  1101,    96,    84,   190,   171,  1123,  1124,    61,    11,
     715,     1,   219,     1,   272,   273,   223,   187,   107,   568,
    1314,    74,     1,     1,   107,   897,    79,    80,     1,    17,
    1324,   717,   113,   114,     0,   116,    30,   131,    11,    83,
       1,    80,   123,     1,    96,    84,    19,   596,   118,   735,
      61,   104,  1184,   855,   107,   292,   293,   294,   224,   839,
     141,   964,    64,   116,    50,   839,  1141,  1184,   717,    96,
      97,   937,   938,   117,   113,   114,   342,   116,   655,   656,
      96,     1,   698,     1,   123,   351,   735,   117,    97,   124,
     117,    64,     1,   120,    75,   148,   123,     1,   668,   122,
      83,    66,   141,   117,   131,  1030,   187,   188,   189,   190,
     191,   192,   193,   985,   123,   131,   358,   897,   376,   118,
     492,   493,   380,   897,   496,  1225,     1,   208,  1203,   119,
     124,   119,   504,     1,     1,   125,  1253,  1254,     1,   117,
     119,     1,   602,   108,   117,   117,   125,   125,   187,   188,
     189,   190,   191,   192,   193,  1161,  1153,  1154,   119,   117,
     346,   347,   616,   617,   125,     1,   738,   125,   434,     1,
     952,   748,   788,     1,   762,   763,   118,   738,   417,   418,
    1233,   758,  1257,  1258,     1,   355,    95,    19,   356,     1,
     839,   430,   431,   359,   436,   361,   409,   117,   411,  1249,
     366,   119,   368,   977,   978,   123,  1306,    19,   374,   118,
     119,   985,   436,   117,   123,   119,   297,   844,   404,     1,
     406,   593,    83,   898,     1,   100,     1,   799,    96,    11,
     400,    50,   398,   752,   753,   812,  1038,    19,   799,   611,
     612,   117,    19,    55,   119,   120,   948,   949,   897,   117,
     117,   878,   120,   120,   117,    74,   950,   118,   297,   119,
     120,    97,     1,   131,    96,   346,   347,   431,    83,    97,
     694,   839,     1,   622,   513,   852,   853,   100,  1331,   102,
      97,   117,    64,   449,   120,   117,   694,   123,   120,   117,
     769,   119,   345,     1,  1166,   123,   349,   117,   839,   131,
     117,    97,   119,   120,    46,   117,   123,   346,   347,   475,
     549,  1160,  1217,   552,   480,    97,   482,   556,   399,   400,
      62,   402,   403,   404,     1,   406,   407,   123,   409,   897,
     411,   412,   823,     1,     1,   117,   417,   418,   421,   117,
     117,   123,   117,   120,   119,   426,   399,   400,     1,   430,
     431,    19,    19,     1,  1048,   408,   897,   836,    97,   440,
     441,   400,     1,   402,   403,   404,    95,   406,   407,     1,
     409,    19,   411,   412,   427,   513,   953,  1226,   117,  1153,
    1154,   118,  1231,   120,   123,     1,     1,   426,   558,    97,
     119,    57,  1166,  1042,   123,   476,   477,   478,     9,  1165,
       1,   440,   441,  1205,    96,   486,   572,   886,   615,   490,
     982,   119,   104,   118,   552,   123,   839,   498,   399,   124,
     880,   982,    14,     1,    83,    41,   119,    19,   121,    97,
     669,  1280,   513,   117,  1061,   119,  1063,   476,   477,   131,
     959,   707,   119,   120,    97,   839,  1140,    97,  1142,   117,
     117,   490,   694,     1,   117,   123,     1,     1,    97,   498,
       1,   100,   117,   102,   634,   158,   119,   160,   549,   117,
     123,   552,    83,   123,   897,   556,   117,    18,   119,  1056,
     119,   120,    97,    83,   123,   287,   288,   119,   120,   570,
     839,   661,     1,    34,   547,     1,    97,   478,     1,   922,
     923,   117,   583,   897,   119,   486,   559,   118,   123,    91,
     717,    93,   906,   776,    97,   568,  1282,  1283,   119,    97,
     686,   574,   123,   762,   763,   218,    50,   981,   735,    53,
     696,   570,    57,   882,    45,   616,   617,     1,   619,   121,
     123,   119,     0,   596,   583,   123,   712,    95,   897,   898,
      74,    83,    97,    97,   977,   978,     9,   250,   216,  1136,
      71,   219,   985,   616,   617,   223,   732,     1,   118,   768,
     769,   119,   122,   117,   119,   123,   629,    35,   123,   123,
     382,   117,  1209,   385,   820,    96,    95,    50,   669,    95,
    1217,    54,    95,   104,   801,   765,   766,   118,    61,  1244,
     118,   684,  1247,  1248,    96,   298,   687,   688,   661,   690,
     119,   304,    70,   119,   123,  1320,   119,   123,   699,   700,
     123,   119,   118,   789,    97,    83,   118,   710,   977,   978,
    1207,    95,   839,    89,    90,   616,   617,   836,   619,   131,
     118,    40,    97,    42,   122,   698,   119,    97,   687,   688,
     123,   690,   118,    52,   820,   119,   409,     1,   411,   123,
     699,   700,   715,    97,   830,   120,   832,   360,   123,   750,
     120,    12,  1299,   123,   367,    16,   174,   370,   371,   372,
      50,   762,   763,   764,   119,   119,    27,   886,    97,   123,
     897,   118,   899,  1042,   901,   902,   747,   118,   749,   906,
     118,    71,   783,   784,   397,   786,    47,  1161,   117,    93,
      54,   750,    56,    14,   123,   117,    91,    61,    93,   430,
     431,   802,    83,  1123,  1124,   100,    96,    68,    69,    97,
    1153,  1154,   687,   688,   104,   788,   118,   121,   122,    83,
     124,   118,    97,  1166,   783,   784,   121,   786,   100,   133,
      94,   119,   783,   784,  1326,   123,   414,   450,   451,    11,
     453,   922,   923,   802,   119,  1326,   762,   763,   123,    93,
     883,   884,   113,   114,   115,   116,   469,   470,   471,  1103,
    1104,    39,   863,   764,  1184,  1134,  1135,   128,   129,   955,
     118,   844,   290,   291,  1194,  1195,   122,   121,   122,  1148,
     124,   122,   883,   884,  1153,  1154,   120,    97,   100,   133,
    1282,  1283,   118,   506,   895,    97,   509,  1166,   899,   900,
     901,   902,   515,  1030,   863,   878,    13,    25,   521,   119,
     942,   943,   998,   123,   887,   888,   889,   119,    34,   892,
       9,   123,   616,   617,  1244,    32,    31,  1247,  1248,   507,
     945,   946,   117,  1253,  1254,    83,   937,   938,   120,   940,
     899,   900,   901,   902,   470,   471,   524,    54,    42,    56,
     563,   371,   372,   118,    61,   533,   534,   118,   120,    11,
      65,   120,   575,   119,   117,   383,   384,   117,    73,   102,
       1,   117,   117,   117,  1294,  1295,    83,   118,   937,   938,
     981,   940,   883,   884,   985,    19,    34,    94,    19,   602,
     603,   964,    19,    98,    99,   120,   414,  1083,   103,  1085,
    1001,   120,    30,   976,   109,   110,   111,   112,   981,  1301,
    1302,  1303,  1304,    39,    45,    19,  1194,   120,   120,    50,
     118,   126,   127,   118,   120,   118,   985,    13,     6,  1030,
    1116,     9,    10,  1160,    20,  1008,   120,   650,  1195,   652,
      71,    19,  1001,   117,    22,    54,    32,    56,    17,   467,
     468,    17,    61,    30,    40,    33,    19,   839,  1031,  1145,
    1146,    13,   117,    74,    53,    96,    97,   124,    54,   120,
      56,  1030,   117,   104,    83,    61,    55,   655,   656,   100,
     981,  1082,    17,    20,    17,    94,   117,  1088,  1061,   120,
     508,    46,   123,  1066,   124,   118,    30,    83,   711,  1226,
     100,  1187,  1103,  1104,  1231,   100,    52,  1193,    94,  1110,
    1111,   839,     6,     7,     8,   897,   534,    54,   117,    56,
      14,   117,  1123,  1124,    61,  1211,  1212,   740,    22,   742,
     117,    30,    26,   746,   747,   117,   749,   117,   119,    33,
     125,    62,  1228,   118,    30,    19,    83,   760,   120,  1152,
    1123,  1110,  1111,  1280,    19,     6,  1242,    94,   118,    10,
    1161,    97,  1163,    95,  1123,  1124,   120,   745,    19,   897,
     748,    22,   100,    30,  1260,    17,  1149,  1180,   118,   117,
     758,  1082,    33,  1184,   125,    30,    48,  1088,  1161,   120,
     803,   120,    54,    42,    56,   977,   978,   615,    60,    61,
     120,   120,   120,   985,   622,   120,   120,   117,   125,  1182,
     823,  1184,  1215,    25,  1215,   124,    54,    19,    56,    30,
     120,    83,   120,    61,   120,  1184,    19,   120,   120,   842,
     843,   120,    94,   120,   812,   125,   120,   655,   656,  1325,
     120,   117,  1328,  1244,  1217,    83,  1247,  1248,    83,   977,
     978,    89,  1253,  1254,   118,   118,    94,   985,   117,   594,
    1161,   874,  1163,  1264,  1265,  1266,  1267,   880,   683,    73,
      73,   104,   581,   706,   852,   853,   590,   855,   793,   700,
     207,    93,   556,   570,    96,  1244,   508,   900,  1247,  1248,
     897,   751,   104,   906,  1253,  1254,   894,  1161,   906,   717,
    1104,  1166,   116,  1180,   971,  1264,  1265,  1266,  1267,   121,
     122,  1184,   124,  1314,  1215,  1189,   357,   735,   596,   131,
     734,   133,    54,  1324,    56,     1,   533,   745,  1042,    61,
     748,  1284,   547,   661,   652,  1061,  1063,   507,   223,   952,
     758,  1123,  1124,   187,    91,   271,    93,  1320,   187,    -1,
      97,    83,    28,    29,    -1,    -1,    32,    89,    90,    -1,
      92,    -1,    94,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1153,  1154,   120,   121,   953,   123,    -1,    54,    -1,
      56,    -1,    -1,   801,  1166,    61,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   812,  1123,  1124,    -1,    -1,    -1,
      -1,    -1,  1184,    -1,    -1,    -1,    -1,    83,    -1,  1022,
    1023,    -1,  1025,    89,    90,    91,    92,    93,    94,  1032,
      -1,   839,    98,    99,    -1,  1153,  1154,     6,     7,     8,
      -1,    10,    -1,    -1,   852,   853,    -1,   855,  1166,    -1,
      19,    -1,   118,    22,    -1,   121,    -1,  1060,    -1,    -1,
     126,   127,    -1,    -1,    33,    34,  1184,  1070,    -1,    -1,
    1038,  1074,  1244,    -1,   882,  1247,  1248,    -1,    -1,    -1,
      -1,  1253,  1254,     6,     7,     8,    -1,    10,  1056,   897,
     898,    14,    -1,    -1,    -1,    -1,     6,     7,     8,    22,
      10,    -1,    -1,    26,    14,    -1,     1,    -1,    -1,    19,
      33,  1114,    22,    -1,    -1,    -1,    26,    -1,    13,    -1,
    1123,  1124,    -1,    33,    34,    20,  1244,    -1,    -1,  1247,
    1248,    -1,    -1,    28,    29,  1253,  1254,    -1,    -1,    -1,
      -1,    36,    -1,    38,    -1,   953,    -1,    -1,    -1,    59,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    54,
      -1,    56,    -1,    58,    -1,    -1,    61,    -1,  1136,   977,
     978,    -1,    -1,  1176,  1177,    -1,    -1,   985,    -1,    -1,
       1,  1184,    77,    78,    -1,    80,    81,    -1,    83,    -1,
      -1,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      -1,    -1,    -1,    98,    99,    -1,    -1,    28,    29,    -1,
      -1,    32,    -1,    -1,    -1,  1218,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   118,    -1,    20,   121,    -1,    -1,   124,
    1038,   126,   127,    54,  1042,    56,    -1,  1205,   133,  1207,
      61,  1244,    -1,    -1,  1247,  1248,  1249,    -1,  1056,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    54,
      -1,    56,    83,    58,    -1,    -1,    61,  1270,    89,    90,
      91,    92,    93,    94,    -1,    -1,    -1,    98,    99,    -1,
      -1,    -1,    77,    78,     1,    80,    81,    -1,    83,    -1,
      -1,    86,    87,    88,    11,    -1,    -1,   118,    -1,    94,
     121,    -1,    19,    20,    -1,   126,   127,    -1,    -1,    -1,
      50,    28,    29,    53,    54,    -1,    56,    -1,    -1,    -1,
    1323,    61,    -1,   118,    -1,    -1,  1134,  1135,  1136,    -1,
      -1,    -1,    -1,    -1,    74,    75,    76,    54,    -1,    56,
    1148,    58,    -1,    -1,    61,  1153,  1154,    64,    -1,    -1,
      -1,    -1,  1160,    -1,    -1,    -1,    -1,    -1,  1166,    -1,
      77,    78,    -1,    80,    81,    -1,    83,    -1,    -1,    86,
      87,    88,    89,    90,    91,    92,    93,    94,    -1,    -1,
      -1,    98,    99,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1205,    -1,  1207,
      -1,   118,    -1,    -1,   121,    -1,    -1,   124,    -1,   126,
     127,    -1,    -1,    -1,    -1,    -1,   133,    -1,  1226,    -1,
      -1,     1,    -1,  1231,    -1,    -1,     6,     7,     8,     9,
      10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      20,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    45,    46,    47,    48,    49,
      50,    51,  1280,    53,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
      70,    71,    72,    73,    74,    75,    76,    77,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    -1,    -1,    97,    98,    99,
      -1,     1,    -1,    -1,    -1,    -1,     6,     7,     8,     9,
      10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   118,    -1,
      20,   121,    -1,   123,   124,    -1,   126,   127,    28,    29,
      -1,    -1,    -1,   133,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    45,    46,    47,    48,    49,
      50,    51,    -1,    53,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
      70,    71,    72,    73,    74,    75,    76,    77,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,     1,    -1,    -1,    98,    99,
       6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    20,    -1,    -1,    -1,   118,    -1,
      -1,   121,    28,    29,   124,   125,   126,   127,    -1,    -1,
      -1,    -1,    -1,   133,    -1,    -1,    -1,    -1,    -1,    45,
      46,    47,    48,    49,    50,    51,    -1,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    -1,
      -1,    -1,    98,    99,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,     1,   118,    -1,    -1,   121,    -1,    -1,   124,    -1,
     126,   127,    12,    -1,    14,    15,    -1,   133,    -1,    19,
      20,    21,    -1,    23,    24,    -1,    -1,    -1,    -1,    29,
      -1,    31,    -1,    -1,    -1,    -1,    -1,    37,    -1,    -1,
      -1,    41,    42,    43,    44,    -1,    -1,    -1,    -1,    49,
      -1,    -1,    -1,    -1,    54,    55,    56,    -1,    58,    -1,
      -1,    61,    -1,    -1,    -1,    -1,    -1,    -1,    68,    69,
      -1,     1,    -1,    73,    -1,    -1,    -1,    77,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      20,    -1,    -1,    -1,    94,    -1,    -1,    -1,    28,    29,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   117,   118,    -1,
      -1,    -1,    -1,    -1,    54,    -1,    56,    -1,    58,    -1,
      -1,    61,    -1,   133,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    77,    78,    -1,
      80,    81,     1,    83,    -1,    -1,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    -1,    -1,    -1,    98,    99,
      -1,    20,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,
      29,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   118,    -1,
      -1,   121,    -1,    -1,   124,    -1,   126,   127,    -1,    -1,
      -1,    -1,    -1,   133,    -1,    54,    -1,    56,    -1,    58,
      -1,    -1,    61,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    77,    78,
      -1,    80,    81,     1,    83,    -1,    -1,    86,    87,    88,
      89,    90,    91,    92,    93,    94,    -1,    -1,    -1,    98,
      99,    -1,    20,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    29,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   118,
      -1,    -1,   121,    -1,    -1,   124,    -1,   126,   127,    -1,
      -1,    -1,    -1,    -1,   133,    -1,    54,    -1,    56,    -1,
      58,    -1,    -1,    61,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    77,
      78,    -1,    80,    81,     1,    83,    -1,    -1,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    -1,    -1,    -1,
      98,    99,    -1,    20,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    28,    29,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     118,    -1,    -1,   121,    -1,    -1,   124,    -1,   126,   127,
      -1,    -1,    -1,    -1,    -1,   133,    -1,    54,    -1,    56,
      -1,    58,    -1,    -1,    61,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      77,    78,    -1,    80,    81,     1,    83,    -1,    -1,    86,
      87,    88,    89,    90,    91,    92,    93,    94,    -1,    -1,
      -1,    98,    99,    -1,    20,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    29,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   118,    -1,    -1,   121,    -1,    -1,   124,    -1,   126,
     127,    -1,    -1,    -1,    -1,    -1,   133,    -1,    54,    -1,
      56,    -1,    58,    -1,    -1,    61,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    77,    78,    -1,    80,    81,     1,    83,    -1,    -1,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    -1,
      -1,    -1,    98,    99,    -1,    20,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    28,    29,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   118,    -1,    -1,   121,    -1,    -1,   124,    -1,
     126,   127,    -1,    -1,    -1,    -1,    -1,   133,    -1,    54,
      -1,    56,    -1,    58,    -1,    -1,    61,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    77,    78,    -1,    80,    81,     1,    83,    -1,
      -1,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      -1,    -1,    -1,    98,    99,    -1,    20,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   118,    -1,    -1,   121,    -1,    -1,   124,
      -1,   126,   127,    -1,    -1,    -1,    -1,    -1,   133,    -1,
      54,    -1,    56,    -1,    58,    -1,    -1,    61,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    77,    78,    -1,    80,    81,     1,    83,
      -1,    -1,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    -1,    -1,    -1,    98,    99,    -1,    20,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    28,    29,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   118,    -1,    -1,   121,    -1,    -1,
     124,    -1,   126,   127,    -1,    -1,    -1,    -1,    -1,   133,
      -1,    54,    -1,    56,    -1,    58,    -1,    -1,    61,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    77,    78,    -1,    80,    81,     1,
      83,    -1,    -1,    86,    87,    88,    89,    90,    91,    92,
      93,    94,    -1,    -1,    -1,    98,    99,    -1,    20,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   118,    -1,    -1,   121,    -1,
      -1,   124,    -1,   126,   127,    -1,    -1,    -1,    -1,    -1,
     133,    -1,    54,    -1,    56,    -1,    58,    -1,    -1,    61,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    77,    78,    -1,    80,    81,
      -1,    83,    -1,    -1,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    -1,    -1,    -1,    98,    99,    -1,    -1,
      -1,    -1,     1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    13,    -1,   118,    -1,    -1,   121,
      -1,    20,   124,    22,   126,   127,    -1,    -1,    -1,    28,
      29,   133,    -1,    32,    33,    -1,    -1,    36,    -1,    38,
      -1,    40,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    51,     1,    -1,    54,    -1,    56,    -1,    -1,
      -1,    -1,    61,    -1,    -1,    -1,    -1,    -1,    67,    -1,
      -1,    -1,    20,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    29,    -1,    -1,    83,    -1,    -1,    -1,    -1,    -1,
      89,    90,    91,    92,    93,    94,    -1,    -1,    -1,    98,
      99,    -1,    -1,    -1,    -1,    -1,    54,    -1,    56,    -1,
      58,    -1,    -1,    61,    -1,    -1,    -1,    -1,    -1,   118,
      -1,    -1,   121,    -1,    -1,    -1,    -1,   126,   127,    77,
      78,    -1,    80,    81,   133,    83,     1,    -1,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    -1,    -1,    -1,
      98,    99,    -1,    -1,    -1,    20,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    28,    29,    -1,    -1,    -1,    -1,    -1,
     118,    -1,    -1,   121,    -1,    -1,   124,    -1,   126,   127,
      -1,    -1,    -1,    -1,    -1,   133,    -1,    -1,    -1,    54,
      -1,    56,    -1,    58,    -1,    -1,    61,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    77,    78,    -1,    80,    81,     1,    83,    -1,
      -1,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      -1,    -1,    -1,    98,    99,    -1,    20,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   118,    -1,    -1,   121,    -1,    -1,   124,
      -1,   126,   127,    -1,    -1,    -1,    -1,    -1,   133,    -1,
      54,    -1,    56,    -1,    58,    -1,    -1,    61,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    77,    78,    -1,    80,    81,     1,    83,
      -1,    -1,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    -1,    -1,    -1,    98,    99,    -1,    20,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    28,    29,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   118,    -1,    -1,   121,    -1,    -1,
     124,    -1,   126,   127,    -1,    -1,    -1,    -1,    -1,   133,
      -1,    54,    -1,    56,    -1,    58,    -1,    -1,    61,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    77,    78,    -1,    80,    81,     1,
      83,    -1,    -1,    86,    87,    88,    89,    90,    91,    92,
      93,    94,    -1,    -1,    -1,    98,    99,    -1,    20,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   118,    -1,    -1,   121,    -1,
      -1,   124,    -1,   126,   127,    -1,    -1,    -1,    -1,    -1,
     133,    -1,    54,    -1,    56,    -1,    58,    -1,    -1,    61,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    77,    78,    -1,    80,    81,
       1,    83,    -1,    -1,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    -1,    -1,    -1,    98,    99,    -1,    20,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   118,    -1,    -1,   121,
      -1,    -1,   124,    -1,   126,   127,    -1,    -1,    -1,    -1,
      -1,   133,    -1,    54,    -1,    56,    -1,    58,    -1,    -1,
      61,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    77,    78,    -1,    80,
      81,     1,    83,    -1,    -1,    86,    87,    88,    89,    90,
      91,    92,    93,    94,    -1,    -1,    -1,    98,    99,    -1,
      20,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   118,    -1,    -1,
     121,    -1,    -1,   124,    -1,   126,   127,    -1,    -1,    -1,
      -1,    -1,   133,    -1,    54,    -1,    56,    -1,    58,    -1,
      -1,    61,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    77,    78,    -1,
      80,    81,    -1,    83,    -1,    -1,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    -1,    -1,    -1,    98,    99,
      -1,    -1,    -1,    -1,     1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    13,    -1,   118,    -1,
      -1,   121,    -1,    20,   124,    22,   126,   127,    -1,    -1,
      -1,    28,    29,   133,    -1,    32,    33,    -1,    -1,    36,
      -1,    38,    -1,    40,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    54,    -1,    56,
      -1,    -1,    -1,    -1,    61,    -1,    -1,    -1,    -1,    -1,
      67,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    83,    -1,    -1,    -1,
      -1,    -1,    89,    90,    91,    92,    93,    94,    -1,    -1,
      -1,    98,    99,    -1,     6,     7,     8,     9,    10,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    20,    -1,
      22,   118,    -1,    -1,   121,    -1,    -1,    -1,    -1,   126,
     127,    33,    -1,    -1,    -1,    -1,   133,    -1,    -1,    -1,
      -1,    -1,    -1,    45,    46,    47,    48,    49,    50,    51,
      -1,    53,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
      72,    73,    74,    75,    76,    77,    78,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    -1,    -1,    -1,
      -1,    -1,    94,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   117,   118,   119,   120,   121,
     122,   123,   124,   125,   126,   127,   128,   129,   130,   131,
     132,   133,     6,     7,     8,     9,    10,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    20,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    45,    46,    47,    48,    49,    50,    51,    -1,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
      74,    75,    76,    77,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    -1,    -1,    -1,    98,    99,    -1,    -1,    -1,    -1,
       6,     7,     8,     9,    10,    -1,    12,    -1,    -1,    -1,
      16,    -1,    -1,    -1,   118,    -1,    -1,   121,    -1,    25,
     124,    27,   126,   127,    -1,    31,    -1,    -1,    -1,   133,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    45,
      46,    47,    48,    49,    50,    51,    -1,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    -1,    -1,    -1,    -1,    -1,    94,    -1,
      96,    -1,    98,    99,    -1,    -1,    -1,   103,    -1,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,     6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,
     126,   127,   128,   129,   130,   131,   132,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      45,    46,    47,    48,    49,    50,    51,    -1,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    94,    -1,    -1,     1,    -1,    94,
      -1,    96,     6,     7,     8,     9,    10,    -1,    -1,    -1,
      -1,    15,    -1,    -1,    -1,    19,    -1,   117,   118,   119,
     120,   121,   122,   123,   124,   125,   126,   127,   128,   129,
     130,   131,   132,   133,    -1,    -1,   131,    -1,    -1,    -1,
      -1,    45,    46,    47,    48,    49,    50,    51,    -1,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
      74,    75,    76,    77,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,     6,     7,     8,     9,    10,
      94,    -1,    -1,    97,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    -1,
      -1,    32,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   123,
      -1,    -1,    -1,    -1,    45,    46,    47,    48,    49,    50,
      51,    -1,    53,    54,    55,    56,    57,    58,    59,    60,
      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
      71,    72,    73,    74,    75,    76,    77,    78,    79,    80,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    93,    94,    -1,    -1,    -1,    98,    99,     6,
       7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   118,    -1,    -1,
     121,    -1,    29,    -1,    -1,   126,   127,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    45,    46,
      47,    48,    49,    50,    51,    -1,    53,    54,    55,    56,
      57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
      67,    68,    69,    70,    71,    72,    73,    74,    75,    76,
      77,    78,    79,    80,    81,    82,    83,    84,    85,    86,
      87,    88,    89,    90,    -1,    -1,    12,    94,    14,    15,
      -1,    98,    99,    -1,    20,    21,    -1,    23,    24,    -1,
      -1,    -1,    -1,    29,    -1,    31,    -1,    -1,    -1,    -1,
      -1,    37,    -1,    -1,    -1,    -1,    42,    43,    44,   126,
     127,    -1,    -1,    49,    -1,    -1,    -1,    -1,    54,    -1,
      56,    -1,    58,    -1,    -1,    61,    -1,    -1,    -1,    -1,
      -1,    -1,    68,    69,    -1,    -1,    -1,    73,    -1,    -1,
      -1,    77,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    12,    -1,    14,    15,    94,    -1,
      -1,    -1,    20,    21,    -1,    23,    24,    -1,    -1,    -1,
      -1,    29,    -1,    31,    -1,    -1,    -1,    -1,    -1,    37,
      -1,    -1,   118,    -1,    -1,    43,    44,    -1,    -1,    -1,
      -1,    49,    -1,    -1,    -1,    -1,    54,   133,    56,    -1,
      58,    -1,    -1,    61,    -1,    -1,    -1,    -1,    -1,    -1,
      68,    69,    -1,    -1,    -1,    73,    -1,    -1,    -1,    77,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    19,    20,    -1,    -1,    -1,    94,    -1,    -1,    -1,
      28,    29,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     118,    -1,    -1,    -1,    -1,    -1,    54,    -1,    56,    -1,
      58,    -1,    -1,    61,    -1,   133,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    77,
      78,    -1,    80,    81,    -1,    83,    -1,    -1,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    -1,    20,    -1,
      98,    99,    -1,    -1,    -1,    -1,    28,    29,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   117,
     118,    -1,    -1,   121,    -1,    -1,   124,    -1,   126,   127,
      -1,    -1,    54,    -1,    56,   133,    58,    -1,    -1,    61,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    77,    78,    -1,    80,    81,
      -1,    83,    -1,    -1,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    -1,    20,    -1,    98,    99,    -1,    -1,
      -1,    -1,    28,    29,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   118,    -1,    -1,   121,
      -1,    -1,   124,   125,   126,   127,    -1,    -1,    54,    -1,
      56,   133,    58,    -1,    -1,    61,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    77,    78,    -1,    80,    81,    -1,    83,    -1,    -1,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    -1,
      20,    -1,    98,    99,    -1,    -1,    -1,    -1,    28,    29,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   118,    -1,    -1,   121,    -1,    -1,   124,    -1,
     126,   127,    -1,    -1,    54,    -1,    56,   133,    58,    -1,
      -1,    61,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    77,    78,    -1,
      80,    81,    -1,    83,    -1,    -1,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    -1,    20,    -1,    98,    99,
      -1,    -1,    -1,    -1,    28,    29,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   118,    -1,
      -1,   121,    -1,    -1,   124,    -1,   126,   127,    -1,    -1,
      54,    -1,    56,   133,    58,    -1,    -1,    61,    25,    -1,
      -1,    -1,    -1,    -1,    31,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    77,    78,    -1,    80,    81,    -1,    83,
      -1,    -1,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    -1,    -1,    -1,    98,    99,    -1,    -1,    65,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    73,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   118,    -1,    -1,   121,    -1,    -1,
     124,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   133,
      -1,    98,    99,    -1,    -1,    -1,   103,    -1,   105,   106,
     107,     1,   109,   110,   111,   112,     6,     7,     8,     9,
      10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   126,
     127,    -1,    22,   130,   131,   132,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    33,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    42,    -1,    -1,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
      70,    71,    72,    73,    74,    75,    76,    77,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    -1,
       1,    -1,    -1,    -1,    94,     6,     7,     8,     9,    10,
      -1,   101,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    22,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    42,    -1,    -1,    45,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    58,    59,    60,
      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
      71,    72,    73,    74,    75,    76,    77,    78,    79,    80,
      81,    82,    83,    84,    85,    86,    87,    88,    -1,     1,
      -1,    -1,    -1,    94,     6,     7,     8,     9,    10,    -1,
     101,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      42,    -1,    -1,    45,    46,    47,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
      72,    73,    74,    75,    76,    77,    78,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    -1,     1,    -1,
      -1,    -1,    94,     6,     7,     8,     9,    10,    -1,   101,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    42,
      -1,    -1,    45,    46,    47,    48,    49,    50,    51,    52,
      53,    54,    55,    56,    57,    58,    59,    60,    61,    62,
      63,    64,    65,    66,    67,    68,    69,    70,    71,    72,
      73,    74,    75,    76,    77,    78,    79,    80,    81,    82,
      83,    84,    85,    86,    87,    88,    28,    29,    -1,    -1,
      32,    94,    -1,    -1,    -1,    -1,    -1,    -1,   101,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    54,    -1,    56,    -1,    -1,    -1,    -1,    61,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    83,    -1,    -1,    -1,    -1,    -1,    89,    90,    91,
      92,    93,    94,    -1,    -1,    -1,    98,    99,    -1,    -1,
      -1,    -1,     1,    -1,    -1,    -1,    -1,     6,     7,     8,
       9,    10,    -1,    -1,    -1,    14,   118,    -1,    -1,   121,
      19,    -1,    -1,    22,   126,   127,    -1,    26,    -1,    -1,
      -1,    -1,    -1,    -1,    33,    34,    -1,    -1,    -1,    -1,
      -1,    40,    -1,    42,    -1,    -1,    45,    46,    47,    48,
      49,    50,    51,    52,    -1,    54,    55,    56,    -1,    58,
      59,    60,    61,    62,    63,    64,    65,    66,    67,    68,
      69,    70,    71,    72,    73,    74,    75,    76,    77,    78,
      79,    80,    81,    82,    83,    84,    85,    86,    87,    88,
      -1,     1,    -1,    -1,    -1,    94,     6,     7,     8,     9,
      10,    -1,    -1,    -1,    14,    -1,    -1,    -1,    -1,    19,
      -1,    -1,    22,    -1,    -1,    -1,    26,    -1,    -1,    -1,
      -1,    -1,    -1,    33,    34,    -1,    -1,    -1,    -1,    -1,
      40,    -1,    42,    -1,    -1,    45,    46,    47,    48,    49,
      -1,    51,    52,    -1,    54,    55,    56,    -1,    58,    59,
      60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
      70,    71,    72,    73,    -1,    75,    76,    77,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    -1,
       1,    -1,    -1,    -1,    94,     6,     7,     8,     9,    10,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    19,    -1,
      -1,    22,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    45,    46,    47,    48,    49,    50,
      51,    -1,    53,    54,    55,    56,    57,    58,    59,    60,
      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
      71,    72,    73,    74,    75,    76,    77,    78,    79,    80,
      81,    82,    83,    84,    85,    86,    87,    88,    -1,     1,
      -1,    -1,    -1,    94,     6,     7,     8,     9,    10,    -1,
      -1,    -1,    -1,    15,    -1,    -1,    -1,    19,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    45,    46,    47,    48,    49,    50,    51,
      -1,    53,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
      72,    73,    74,    75,    76,    77,    78,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    -1,     1,    -1,
      -1,    -1,    94,     6,     7,     8,     9,    10,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    45,    46,    47,    48,    49,    50,    51,    -1,
      53,    54,    55,    56,    57,    58,    59,    60,    61,    62,
      63,    64,    65,    66,    67,    68,    69,    70,    71,    72,
      73,    74,    75,    76,    77,    78,    79,    80,    81,    82,
      83,    84,    85,    86,    87,    88,    89,     1,    -1,    -1,
      -1,    94,     6,     7,     8,     9,    10,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    45,    46,    47,    48,    49,    50,    51,    -1,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
      74,    75,    76,    77,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,     1,    -1,    -1,    -1,
      94,     6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      45,    46,    47,    48,    49,    50,    51,    -1,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    -1,     1,    -1,    -1,    -1,    94,
       6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    45,
      46,    47,    48,    49,    50,    51,    -1,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    -1,     1,    -1,    -1,    -1,    94,     6,
       7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    45,    46,
      47,    48,    49,    50,    51,    -1,    53,    54,    55,    56,
      57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
      67,    68,    69,    70,    71,    72,    73,    74,    75,    76,
      77,    78,    79,    80,    81,    82,    83,    84,    85,    86,
      87,    88,    -1,     1,    -1,    -1,    -1,    94,     6,     7,
       8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    45,    46,    47,
      48,    49,    50,    51,    -1,    53,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    72,    73,    74,    75,    76,    77,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    -1,     1,    -1,    -1,    -1,    94,     6,     7,     8,
       9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    45,    46,    47,    48,
      49,    50,    51,    -1,    53,    54,    55,    56,    57,    58,
      59,    60,    61,    62,    63,    64,    65,    66,    67,    68,
      69,    70,    71,    72,    73,    74,    75,    76,    77,    78,
      79,    80,    81,    82,    83,    84,    85,    86,    87,    88,
      -1,     1,    -1,    -1,    -1,    94,     6,     7,     8,     9,
      10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    45,    46,    47,    48,    49,
      50,    51,    -1,    53,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
      70,    71,    72,    73,    74,    75,    76,    77,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    -1,
       1,    -1,    -1,    -1,    94,     6,     7,     8,     9,    10,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    45,    46,    47,    48,    49,    50,
      51,    -1,    53,    54,    55,    56,    57,    58,    59,    60,
      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
      71,    72,    73,    74,    75,    76,    77,    78,    79,    80,
      81,    82,    83,    84,    85,    86,    87,    88,    -1,     1,
      -1,    -1,    -1,    94,     6,     7,     8,     9,    10,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    45,    46,    47,    48,    49,    50,    51,
      -1,    53,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
      72,    73,    74,    75,    76,    77,    78,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    -1,     1,    -1,
      -1,    -1,    94,     6,     7,     8,     9,    10,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    45,    46,    47,    48,    49,    50,    51,    -1,
      53,    54,    55,    56,    57,    58,    59,    60,    61,    62,
      63,    64,    65,    66,    67,    68,    69,    70,    71,    72,
      73,    74,    75,    76,    77,    78,    79,    80,    81,    82,
      83,    84,    85,    86,    87,    88,    -1,     1,    -1,    -1,
      -1,    94,     6,     7,     8,     9,    10,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    45,    46,    47,    48,    49,    50,    51,    -1,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
      74,    75,    76,    77,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    -1,     1,    -1,    -1,    -1,
      94,     6,    -1,    -1,    -1,    10,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    19,    -1,    -1,    22,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    33,    -1,
      -1,    -1,    -1,    -1,    -1,    40,    -1,    42,    -1,    -1,
      45,    46,    47,    48,    49,    -1,    51,    52,     1,    54,
      55,    56,    57,    58,    -1,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    -1,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    -1,    -1,    -1,    -1,    -1,    94,
      -1,    -1,    45,    46,    47,    48,    49,    50,    51,     1,
      -1,    54,    55,    56,    -1,    58,    -1,    60,    61,    62,
      63,    64,    65,    66,    67,    68,    69,    70,    71,    72,
      73,    74,    75,    76,    77,    78,    79,    80,    81,    82,
      83,    84,    85,    86,    87,    88,    -1,    -1,    -1,    -1,
      -1,    94,    -1,    45,    46,    47,    48,    49,    -1,    51,
       1,    -1,    54,    55,    56,    -1,    58,    -1,    60,    61,
      62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
      72,    73,    -1,    75,    76,    77,    78,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    -1,    -1,    -1,
      -1,    -1,    94,    -1,    45,    46,    47,    48,    49,    -1,
      51,     1,    -1,    54,    55,    56,    -1,    58,    -1,    60,
      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
      71,    72,    73,    -1,    75,    76,    77,    78,    79,    80,
      81,    82,    83,    84,    85,    86,    87,    88,    -1,    -1,
      -1,    -1,    -1,    94,    -1,    45,    46,    47,    48,    49,
      -1,    51,    -1,    -1,    54,    55,    56,    -1,    58,    -1,
      60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
      70,    71,    72,    73,    -1,    75,    76,    77,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,     6,
       7,     8,     9,    10,    94,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    20,    -1,    22,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    33,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
      67,    68,    69,    70,    71,    72,    73,    74,    75,    76,
      77,    78,    79,    80,    81,    82,    83,    84,    85,    86,
      87,    88,     6,     7,     8,     9,    10,    94,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    33,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
      74,    75,    76,    77,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,     6,     7,     8,     9,    10,
      94,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    20,
      -1,    22,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    45,    46,    47,    48,    49,    50,
      51,    -1,    53,    54,    55,    56,    57,    58,    59,    60,
      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
      71,    72,    73,    74,    75,    76,    77,    78,    79,    80,
      81,    82,    83,    84,    85,    86,    87,    88,     6,     7,
       8,     9,    10,    94,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    33,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    45,    46,    47,
      48,    49,    50,    51,    -1,    53,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    72,    73,    74,    75,    76,    77,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,     6,     7,     8,     9,    10,    94,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,     6,     7,     8,     9,    10,    94,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    45,    46,    47,    48,    49,    50,    51,
      -1,    53,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
      72,    73,    74,    75,    76,    77,    78,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    -1,    -1,
      -1,    -1,    94,     6,     7,     8,     9,    10,    -1,    -1,
      -1,    -1,    15,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    45,    46,    47,    48,    49,    50,    51,    -1,
      53,    54,    55,    56,    57,    58,    59,    60,    61,    62,
      63,    64,    65,    66,    67,    68,    69,    70,    71,    72,
      73,    74,    75,    76,    77,    78,    79,    80,    81,    82,
      83,    84,    85,    86,    87,    88,     6,     7,     8,     9,
      10,    94,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    45,    46,    47,    48,    49,
      50,    51,    -1,    53,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
      70,    71,    72,    73,    74,    75,    76,    77,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,     6,
       7,     8,     9,    10,    94,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    45,    46,
      47,    48,    49,    50,    51,    -1,    53,    54,    55,    56,
      57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
      67,    68,    69,    70,    71,    72,    73,    74,    75,    76,
      77,    78,    79,    80,    81,    82,    83,    84,    85,    86,
      87,    88,    -1,    -1,    -1,    -1,    -1,    94,    45,    46,
      47,    48,    49,    50,    51,    -1,    -1,    54,    55,    56,
      -1,    58,    -1,    60,    61,    62,    63,    64,    65,    66,
      67,    68,    69,    70,    71,    72,    73,    74,    75,    76,
      77,    78,    79,    80,    81,    82,    83,    84,    85,    86,
      87,    88,    45,    46,    47,    48,    49,    94,    51,    -1,
      -1,    54,    55,    56,    -1,    58,    -1,    60,    61,    62,
      63,    64,    65,    66,    67,    68,    69,    70,    71,    72,
      73,    -1,    75,    76,    77,    78,    79,    80,    81,    82,
      83,    84,    85,    86,    87,    88,    -1,    -1,    -1,    -1,
      -1,    94
};

/* YYSTOS[STATE-NUM] -- The (internal number of the) accessing
   symbol of state STATE-NUM.  */
static const unsigned short yystos[] =
{
       0,    35,    70,    83,   135,   136,   139,   148,   155,   160,
     163,     1,     6,     7,     8,     9,    10,    45,    46,    47,
      48,    49,    50,    51,    53,    54,    55,    56,    57,    58,
      59,    60,    61,    62,    63,    64,    65,    66,    67,    68,
      69,    70,    71,    72,    73,    74,    75,    76,    77,    78,
      79,    80,    81,    82,    83,    84,    85,    86,    87,    88,
      94,   419,   420,   422,   423,   424,   427,   419,     0,    50,
     165,   283,   439,   151,   419,   118,   183,   439,   183,   117,
     118,   137,   117,   160,   163,     9,    83,   164,   183,   184,
     185,   419,   117,   117,   165,    52,   284,   285,   419,   439,
     195,   196,   419,   117,   156,   152,   154,   117,     1,    97,
     123,   436,   437,     1,   119,    83,   119,   436,    96,   118,
     131,   435,   140,    57,   161,   164,    83,   158,   171,   172,
     165,   419,     1,   419,   149,   285,    20,    28,    29,    54,
      56,    58,    61,    77,    78,    80,    81,    83,    86,    87,
      88,    89,    90,    91,    92,    93,    98,    99,   118,   121,
     124,   126,   127,   133,   212,   213,   214,   215,   217,   219,
     254,   387,   388,   391,   394,   395,   396,   397,   398,   405,
     408,   409,   425,   426,   427,   387,   426,     6,     7,     8,
      10,    22,    26,    33,   138,   141,   143,   144,   198,   303,
     306,   307,   308,   197,   200,   419,   171,   157,   159,   117,
       1,   122,   438,   195,   195,   419,   118,   400,   118,   118,
     373,   374,   439,   118,   387,    94,   117,   118,   119,   120,
     121,   122,   123,   124,   125,   126,   127,   128,   129,   130,
     131,   132,   133,   218,   125,   387,   406,   407,   395,   217,
     118,   436,    25,    31,    65,    73,    98,    99,   103,   105,
     106,   107,   109,   110,   111,   112,   126,   127,   130,   131,
     132,   410,   411,   412,   413,    12,    16,    27,    47,    68,
      69,   113,   114,   115,   116,   128,   129,   414,   415,   416,
      48,    60,   426,    66,   108,    93,   121,   122,   124,   133,
     434,   118,   391,   395,   119,    12,    16,    25,    27,    31,
      98,    99,   103,   105,   106,   107,   108,   126,   127,   128,
     129,   130,   132,   315,   412,   415,   418,   419,   435,   419,
     419,   199,   200,   419,     1,    89,   206,   207,   209,   419,
     419,    14,   333,   145,   430,   117,     1,   117,    83,   201,
     438,   158,     1,   187,   188,   423,   153,   168,   166,   397,
     118,   376,   377,   387,   254,   397,   402,   118,   402,   436,
     100,     1,   119,   125,   387,    11,   389,   388,   391,   391,
     390,    39,   392,   394,   394,   393,   234,   426,   234,   395,
     395,   395,   419,     1,   387,   403,   404,   399,   387,   118,
     320,   439,   122,   122,     1,   117,   119,   122,   320,     1,
     117,   119,   122,   320,   428,   438,    40,    42,    52,   146,
     310,   313,   439,   200,   200,    63,   118,   202,   439,   438,
       1,   117,   189,   435,   171,   169,   170,   173,   198,   303,
      22,    33,   145,   150,   167,   198,   302,   307,   436,   387,
       1,   119,   436,   120,   119,   436,     1,   375,   387,   436,
     387,   407,     1,   407,   436,   391,   391,   394,   394,   100,
       1,   119,   125,   375,   436,     1,    22,    33,    52,    83,
     101,   184,   321,   322,   323,   324,   432,   439,   318,   419,
     435,   439,   419,   419,   200,   200,   419,   316,   317,   435,
     439,   207,     1,   207,   419,    12,    15,    21,    23,    24,
      29,    31,    37,    42,    43,    44,    49,    68,    69,    73,
      79,    82,    84,    85,   133,   208,   209,   333,   334,   335,
     336,   337,   338,   339,   340,   341,   344,   346,   348,   356,
     359,   362,   366,   368,   371,   378,   397,   417,   426,   147,
       1,   186,   275,   276,   423,     1,   210,   211,   423,    53,
      54,    56,    61,    74,    75,    76,   283,   304,   311,   314,
     118,     1,   204,   205,   419,    25,   203,   439,   188,     1,
     188,   195,    83,   118,   190,   191,   438,   145,    34,   174,
     175,   177,   419,   419,     9,   162,   117,   436,   377,     1,
     377,   387,   401,   119,   437,   387,   404,     1,   404,   437,
     436,   419,   419,   184,   436,   120,     1,   117,   436,    42,
     184,     1,   120,   319,   335,   440,   419,   320,   320,   320,
     319,   419,   320,   387,   396,   397,   208,   426,   385,   387,
     357,   276,   360,     1,   342,   343,   386,   387,    83,   379,
     118,   387,   118,   397,   120,     1,   117,   429,   338,   336,
      11,   367,   373,     1,   220,   221,   421,   422,   423,   119,
     431,   276,   211,   431,   435,   215,   216,   439,   117,   387,
     117,   117,   117,   142,   313,   117,   204,     1,   119,   436,
     102,   194,   439,   387,   166,     1,   192,   193,   419,   432,
     118,    14,    19,    19,    34,   177,   140,    19,   309,   310,
     313,   120,   375,     1,   387,   320,   320,   120,   325,    13,
      32,    40,   232,   234,   254,   269,   326,   327,   331,   332,
     322,     1,   101,   322,   184,   120,   233,   234,   316,    30,
      25,   104,   370,   435,    39,   428,   428,     1,    17,   119,
     120,   118,   387,   376,   336,     1,   336,    19,   347,   369,
     370,   439,     1,   117,   118,   224,   431,   423,   120,   120,
     384,   387,    83,   117,   117,   143,   305,   436,   205,     1,
     205,   419,    19,     1,   119,   436,   100,   194,   419,   192,
      17,    17,    14,    59,   174,   181,   438,   387,   436,   316,
     326,    30,   124,    30,    13,   436,   325,   326,   319,   349,
     387,   387,   345,   334,   385,   343,   336,     1,   343,   419,
     219,   119,   437,     1,   437,   336,   387,   221,     1,   221,
       1,   184,   225,   226,     1,   435,   435,   227,   229,   430,
     227,   117,   312,    74,    53,   333,   193,     1,   193,   419,
     194,   436,   176,   178,   179,   180,   179,   319,   332,   329,
     330,   419,   387,   124,     1,   267,   268,   353,   354,   384,
     364,     1,    18,    34,   365,   336,    41,   361,   120,   436,
     372,   436,   120,     1,   117,   436,   222,   223,   227,   277,
     283,    13,    20,    22,    33,    36,    38,    51,    67,    93,
     118,   121,   133,   214,   230,   231,   232,   233,   234,   237,
     238,   241,   242,   243,   245,   249,   250,   253,   254,   256,
     257,   269,   408,   409,   425,   426,   434,   440,    96,   387,
     387,   216,   117,   336,   336,   334,    55,     1,   117,   125,
     100,   330,     1,   119,   120,     1,   117,   433,     1,   100,
      17,   387,   358,    17,   215,   380,   381,   382,   439,   375,
     234,   226,     1,   226,   227,    46,   270,   439,    71,    96,
     104,   286,   287,   439,    45,   287,   288,   124,   124,   255,
     439,   118,   246,   246,     1,    15,   184,   258,   259,   260,
     261,    30,   231,   233,   244,   245,   254,   419,     1,    54,
      56,    58,    61,    77,    78,    80,    81,    83,    86,    87,
      88,   239,   240,   387,   419,   427,    94,   244,   244,   249,
     254,   387,   118,   124,   235,   100,   212,   425,   212,   425,
      52,   290,   291,   117,   117,   117,   117,   117,   182,   330,
       1,   330,    30,   419,   125,   268,     1,   268,   355,   354,
       1,   354,   350,   384,     1,   384,   428,   363,   385,   336,
     118,   120,   436,   119,   437,   287,    62,     1,   290,     1,
     289,   278,   439,     1,   232,   234,   237,   251,   252,   252,
      30,     1,    52,   101,   184,   247,   248,   324,   432,   319,
      19,    54,    56,    61,    83,   237,   262,   263,   419,   426,
     427,   120,    19,     1,   117,   433,   228,   229,   436,    95,
       1,   119,   123,    97,   100,     1,   236,   387,   387,   387,
     244,   281,   439,   118,   124,   292,   293,   298,   387,   334,
      13,   234,   327,   328,   120,    30,   428,    11,    64,   351,
     352,   336,    17,   429,   429,   387,   380,   382,   118,   271,
     439,   387,   117,     1,   119,   125,   125,   228,   184,   436,
     120,   117,   436,    42,   184,    30,   120,   228,   260,     1,
     260,   261,   419,     1,   419,   387,     1,   119,   436,   125,
     117,     1,    86,    88,   118,   213,   292,   294,   295,   297,
     298,   300,   301,   387,   408,   409,   419,   439,     1,   299,
     300,   234,   234,   336,    19,   428,   429,   428,   436,   120,
     436,     1,   234,     1,   272,   273,   439,    53,    74,   279,
     282,   283,   252,     1,   252,    30,   120,   332,   101,   248,
     184,   120,     1,   265,   266,   267,   234,   263,   387,     1,
     387,   282,   294,   436,     1,   117,   119,   296,   296,   120,
     213,   213,   125,     1,   117,   125,   429,   334,   336,   215,
     383,   436,   436,    19,     7,     8,    22,    33,    46,    50,
      72,    83,   184,   274,   283,   216,   387,   228,   332,   436,
     120,   332,     1,   117,   433,   120,   436,   297,   300,   297,
     297,   292,   213,   300,   408,   409,   300,   429,   429,   119,
     436,   419,   419,   419,   419,   387,   120,   117,    83,   332,
     266,   266,   264,   352,   118,   213,   213,   215,   320,   320,
     320,   320,   228,   280,   118,   258,   316,   387,   258,   436,
     319,   436,   117,   433
};


/* Prevent warning if -Wmissing-prototypes.  */
int yyparse (void);

/* Error token number */
#define YYTERROR 1

/* YYLLOC_DEFAULT -- Compute the default location (before the actions
   are run).  */


#define YYRHSLOC(yyRhs,YYK) ((yyRhs)[YYK].yystate.yyloc)

#ifndef YYLLOC_DEFAULT
# define YYLLOC_DEFAULT(yyCurrent, yyRhs, YYN)			\
  (yyCurrent).first_line   = YYRHSLOC(yyRhs,1).first_line;	\
  (yyCurrent).first_column = YYRHSLOC(yyRhs,1).first_column;	\
  (yyCurrent).last_line    = YYRHSLOC(yyRhs,YYN).last_line;	\
  (yyCurrent).last_column  = YYRHSLOC(yyRhs,YYN).last_column;
#endif



/* YYLEX -- calling `yylex' with the right arguments.  */
#define YYLEX yylex ()

YYSTYPE yylval;

YYLTYPE yylloc;

int yynerrs;
int yychar;

static const int YYEOF = 0;
static const int YYEMPTY = -2;

typedef enum { yyok, yyaccept, yyabort, yyerr } YYRESULTTAG;

#define YYCHK(YYE)							     \
   do { YYRESULTTAG yyflag = YYE; if (yyflag != yyok) return yyflag; } 	     \
   while (0)

#if YYDEBUG

#if ! defined (YYFPRINTF)
#  define YYFPRINTF fprintf
#endif

# define YYDPRINTF(Args)			\
do {						\
  if (yydebug)					\
    YYFPRINTF Args;				\
} while (0)

/*--------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------*/

static void
yysymprint (FILE *yyoutput, int yytype, YYSTYPE *yyvaluep, YYLTYPE *yylocationp)
{
  /* Pacify ``unused variable'' warnings.  */
  (void) yyvaluep;
  (void) yylocationp;

  if (yytype < YYNTOKENS)
    {
      YYFPRINTF (yyoutput, "token %s (", yytname[yytype]);
# ifdef YYPRINT
      YYPRINT (yyoutput, yytoknum[yytype], *yyvaluep);
# endif
    }
  else
    YYFPRINTF (yyoutput, "nterm %s (", yytname[yytype]);

  switch (yytype)
    {
      default:
        break;
    }
  YYFPRINTF (yyoutput, ")");
}


# define YYDSYMPRINT(Args)			\
do {						\
  if (yydebug)					\
    yysymprint Args;				\
} while (0)

# define YYDSYMPRINTF(Title, Token, Value, Location)		\
do {								\
  if (yydebug)							\
    {								\
      YYFPRINTF (stderr, "%s ", Title);				\
      yysymprint (stderr, 					\
                  Token, Value, Location);	\
      YYFPRINTF (stderr, "\n");					\
    }								\
} while (0)

/* Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.  */
int yydebug;

#else /* !YYDEBUG */

  /* Avoid empty `if' bodies.  */
# define YYDPRINTF(Args)
# define YYDSYMPRINT(Args)
# define YYDSYMPRINTF(Title, Token, Value, Location)

#endif /* !YYDEBUG */

/* YYINITDEPTH -- initial size of the parser's stacks.  */
#ifndef	YYINITDEPTH
# define YYINITDEPTH 200
#endif

/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   SIZE_MAX < YYMAXDEPTH * sizeof (GLRStackItem)
   evaluated with infinite-precision integer arithmetic.  */

#if YYMAXDEPTH == 0
# undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
# define YYMAXDEPTH 10000
#endif

/* Minimum number of free items on the stack allowed after an
   allocation.  This is to allow allocation and initialization
   to be completed by functions that call expandGLRStack before the
   stack is expanded, thus insuring that all necessary pointers get
   properly redirected to new data. */
#define YYHEADROOM 2

#if (! defined (YYSTACKEXPANDABLE) \
     && (! defined (__cplusplus) \
	 || (defined (YYLTYPE_IS_TRIVIAL) && YYLTYPE_IS_TRIVIAL \
	     && defined (YYSTYPE_IS_TRIVIAL) && YYSTYPE_IS_TRIVIAL)))
#define YYSTACKEXPANDABLE 1
#else
#define YYSTACKEXPANDABLE 0
#endif

/** State numbers, as in LALR(1) machine */
typedef int yyStateNum;

/** Rule numbers, as in LALR(1) machine */
typedef int yyRuleNum;

/** Grammar symbol */
typedef short yySymbol;

/** Item references, as in LALR(1) machine */
typedef short yyItemNum;

typedef struct yyGLRState yyGLRState;
typedef struct yySemanticOption yySemanticOption;
typedef union yyGLRStackItem yyGLRStackItem;
typedef struct yyGLRStack yyGLRStack;
typedef struct yyGLRStateSet yyGLRStateSet;

struct yyGLRState {
  yybool yyisState;
  yybool yyresolved;
  yyStateNum yylrState;
  yyGLRState* yypred;
  size_t yyposn;
  union {
    yySemanticOption* yyfirstVal;
    YYSTYPE yysval;
  } yysemantics;
  YYLTYPE yyloc;
};

struct yyGLRStateSet {
  yyGLRState** yystates;
  size_t yysize, yycapacity;
};

struct yySemanticOption {
  yybool yyisState;
  yyRuleNum yyrule;
  yyGLRState* yystate;
  yySemanticOption* yynext;
};

union yyGLRStackItem {
  yyGLRState yystate;
  yySemanticOption yyoption;
};

struct yyGLRStack {
  int yyerrflag;
  int yyerrState;

  yySymbol* yytokenp;
  jmp_buf yyexception_buffer;
  yyGLRStackItem* yyitems;
  yyGLRStackItem* yynextFree;
  int yyspaceLeft;
  yyGLRState* yysplitPoint;
  yyGLRState* yylastDeleted;
  yyGLRStateSet yytops;
};

static void yyinitGLRStack (yyGLRStack* yystack, size_t yysize);
static void yyexpandGLRStack (yyGLRStack* yystack);
static void yyfreeGLRStack (yyGLRStack* yystack);

static void
yyFail (yyGLRStack* yystack, const char* yyformat, ...)
{
  yystack->yyerrflag = 1;
  if (yyformat != NULL)
    {
      char yymsg[256];
      va_list yyap;
      va_start (yyap, yyformat);
      vsnprintf (yymsg, 256, yyformat, yyap);
      yyerror (yymsg);
    }
  longjmp (yystack->yyexception_buffer, 1);
}

#if YYDEBUG || YYERROR_VERBOSE
/** A printable representation of TOKEN.  Valid until next call to
 *  tokenName. */
static inline const char*
yytokenName (yySymbol yytoken)
{
  return yytname[yytoken];
}
#endif

/** Fill in YYVSP[YYLOW1 .. YYLOW0-1] from the chain of states starting
 *  at YYVSP[YYLOW0].yystate.yypred.  Leaves YYVSP[YYLOW1].yystate.yypred
 *  containing the pointer to the next state in the chain. Assumes
 *  YYLOW1 < YYLOW0.  */
static void yyfillin (yyGLRStackItem *, int, int) ATTRIBUTE_UNUSED;
static void
yyfillin (yyGLRStackItem *yyvsp, int yylow0, int yylow1)
{
  yyGLRState* s;
  int i;
  s = yyvsp[yylow0].yystate.yypred;
  for (i = yylow0-1; i >= yylow1; i -= 1)
    {
      YYASSERT (s->yyresolved);
      yyvsp[i].yystate.yyresolved = yytrue;
      yyvsp[i].yystate.yysemantics.yysval = s->yysemantics.yysval;
      yyvsp[i].yystate.yyloc = s->yyloc;
      s = yyvsp[i].yystate.yypred = s->yypred;
    }
}

/* Do nothing if YYNORMAL or if *YYLOW <= YYLOW1.  Otherwise, fill in
   YYVSP[YYLOW1 .. *YYLOW-1] as in yyfillin and set *YYLOW = YYLOW1.
   For convenience, always return YYLOW1.  */
static inline int yyfill (yyGLRStackItem *, int *, int, yybool)
     ATTRIBUTE_UNUSED;
static inline int
yyfill (yyGLRStackItem *yyvsp, int *yylow, int yylow1, yybool yynormal)
{
  if (!yynormal && yylow1 < *yylow)
    {
      yyfillin (yyvsp, *yylow, yylow1);
      *yylow = yylow1;
    }
  return yylow1;
}

/** Perform user action for rule number YYN, with RHS length YYRHSLEN,
 *  and top stack item YYVSP.  YYLVALP points to place to put semantic
 *  value ($$), and yylocp points to place for location information
 *  (@@$). Returns yyok for normal return, yyaccept for YYACCEPT,
 *  yyerr for YYERROR, yyabort for YYABORT. */
static YYRESULTTAG
yyuserAction (yyRuleNum yyn, int yyrhslen, yyGLRStackItem* yyvsp,
	      YYSTYPE* yyvalp, YYLTYPE* yylocp, yyGLRStack* yystack
              )
{
  yybool yynormal ATTRIBUTE_UNUSED = (yystack->yysplitPoint == NULL);
  int yylow;

# undef yyerrok
# define yyerrok (yystack->yyerrState = 0)
# undef YYACCEPT
# define YYACCEPT return yyaccept
# undef YYABORT
# define YYABORT return yyabort
# undef YYERROR
# define YYERROR do { yystack->yyerrState = 0; return yyerr; } while (0)
# undef YYRECOVERING
# define YYRECOVERING (yystack->yyerrState != 0)
# undef yyclearin
# define yyclearin (yychar = *(yystack->yytokenp) = YYEMPTY)
# undef YYFILL
# define YYFILL(N) yyfill (yyvsp, &yylow, N, yynormal)
# undef YYBACKUP
# define YYBACKUP(Token, Value)						     \
  do {									     \
    yyerror ("syntax error: cannot back up");		     \
    YYERROR;								     \
  } while (0)

  yylow = 1;
  if (yyrhslen == 0)
    {
      *yyvalp = yyval_default;
      *yylocp = yyloc_default;
    }
  else
    {
      *yyvalp = yyvsp[YYFILL (1-yyrhslen)].yystate.yysemantics.yysval;
      YYLLOC_DEFAULT (*yylocp, yyvsp - yyrhslen, yyrhslen);
    }


  switch (yyn)
    {
        case 2:
#line 237 "parse.y"
    { error ("empty input file"); ;}
    break;

  case 3:
#line 239 "parse.y"
    {
        if (co->ignore_garbage_after_dot)
          {
            discard_input ();
            YYACCEPT;
          }
      ;}
    break;

  case 4:
#line 250 "parse.y"
    { initialize_module (TREE_PURPOSE (yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype), build_tree_list (yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype ? TREE_PURPOSE (yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype) : NULL_TREE, TREE_VALUE (yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype)), 0); ;}
    break;

  case 5:
#line 252 "parse.y"
    { start_main_program (); ;}
    break;

  case 6:
#line 254 "parse.y"
    { finish_main_program (); ;}
    break;

  case 7:
#line 256 "parse.y"
    { finalize_module (0); ;}
    break;

  case 8:
#line 261 "parse.y"
    { (*yyvalp).ttype = build_tree_list (NULL_TREE, NULL_TREE); ;}
    break;

  case 9:
#line 263 "parse.y"
    { (*yyvalp).ttype = build_tree_list (yyvsp[YYFILL (-2)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype); ;}
    break;

  case 10:
#line 265 "parse.y"
    { (*yyvalp).ttype = build_tree_list (NULL_TREE, yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype); ;}
    break;

  case 11:
#line 270 "parse.y"
    { (*yyvalp).itype = 2 * od_none; ;}
    break;

  case 12:
#line 272 "parse.y"
    { (*yyvalp).itype = check_decl_order (yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.itype, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.itype); ;}
    break;

  case 15:
#line 282 "parse.y"
    { (*yyvalp).itype = 2 * od_none; ;}
    break;

  case 16:
#line 284 "parse.y"
    { (*yyvalp).itype = check_decl_order (yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.itype, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.itype); ;}
    break;

  case 17:
#line 288 "parse.y"
    { check_forward_decls (0); ;}
    break;

  case 18:
#line 290 "parse.y"
    { (*yyvalp).itype = yyvsp[YYFILL (0)].yystate.yysemantics.yysval.itype; ;}
    break;

  case 19:
#line 292 "parse.y"
    { (*yyvalp).itype = od_label; ;}
    break;

  case 20:
#line 294 "parse.y"
    { (*yyvalp).itype = od_routine; ;}
    break;

  case 21:
#line 299 "parse.y"
    {
#ifndef EGCS97
        pop_obstacks ();
#endif
        (*yyvalp).itype = yyvsp[YYFILL (0)].yystate.yysemantics.yysval.itype;
      ;}
    break;

  case 22:
#line 309 "parse.y"
    { (*yyvalp).itype = od_const; ;}
    break;

  case 23:
#line 311 "parse.y"
    { current_type_list = build_tree_list (NULL_TREE, NULL_TREE); ;}
    break;

  case 24:
#line 313 "parse.y"
    { declare_types (); (*yyvalp).itype = od_type; ;}
    break;

  case 25:
#line 315 "parse.y"
    { (*yyvalp).itype = od_var; ;}
    break;

  case 26:
#line 320 "parse.y"
    { ASSERT_ID (yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (0)].yystate.yyloc, p_interface); initialize_module (yyvsp[YYFILL (-3)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype, 1); ;}
    break;

  case 27:
#line 322 "parse.y"
    {
        create_gpi_files ();
        if (co->interface_only)
          exit_compilation ();
        current_module->implementation = 1;
      ;}
    break;

  case 28:
#line 329 "parse.y"
    { check_forward_decls (1); ;}
    break;

  case 31:
#line 333 "parse.y"
    {
        (*yyvalp).ttype = current_module->name;
        finalize_module (1);
      ;}
    break;

  case 32:
#line 338 "parse.y"
    {
        if (yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype && current_module->name != yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype)
          error ("implementation of module `%s' after interface of module `%s'",
                 IDENTIFIER_NAME (current_module->name), IDENTIFIER_NAME (yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype));
      ;}
    break;

  case 33:
#line 344 "parse.y"
    { initialize_module (yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype, 2); ;}
    break;

  case 34:
#line 346 "parse.y"
    {
        if (co->interface_only)
          exit_compilation ();
      ;}
    break;

  case 36:
#line 352 "parse.y"
    { initialize_module (yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype, 4); ;}
    break;

  case 38:
#line 358 "parse.y"
    { ASSERT_ID (yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (0)].yystate.yyloc, p_interface); ;}
    break;

  case 39:
#line 360 "parse.y"
    { initialize_module (yyvsp[YYFILL (-3)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype, 2); ;}
    break;

  case 40:
#line 362 "parse.y"
    { clear_forward_decls ();  /* don't complain in poplevel */ ;}
    break;

  case 41:
#line 367 "parse.y"
    { ASSERT_ID (yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (0)].yystate.yyloc, p_export); start_module_interface (); ;}
    break;

  case 42:
#line 369 "parse.y"
    { create_gpi_files (); ;}
    break;

  case 43:
#line 374 "parse.y"
    { initialize_module (yyvsp[YYFILL (-2)].yystate.yysemantics.yysval.ttype, NULL_TREE, 3); ;}
    break;

  case 45:
#line 379 "parse.y"
    { chk_dialect ("units without `implementation' part are", U_M_PASCAL); ;}
    break;

  case 46:
#line 380 "parse.y"
    { ;}
    break;

  case 47:
#line 385 "parse.y"
    { ASSERT_ID (yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (0)].yystate.yyloc, p_module); ;}
    break;

  case 48:
#line 390 "parse.y"
    { (*yyvalp).ttype = build_tree_list (yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype ? TREE_PURPOSE (yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype) : NULL_TREE, yyvsp[YYFILL (-2)].yystate.yysemantics.yysval.ttype); ;}
    break;

  case 51:
#line 400 "parse.y"
    { (*yyvalp).itype = 2 * od_none; ;}
    break;

  case 52:
#line 402 "parse.y"
    { (*yyvalp).itype = check_decl_order (yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.itype, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.itype); ;}
    break;

  case 55:
#line 409 "parse.y"
    { (*yyvalp).itype = od_routine; ;}
    break;

  case 56:
#line 414 "parse.y"
    { (*yyvalp).itype = 2 * od_none; ;}
    break;

  case 57:
#line 416 "parse.y"
    { (*yyvalp).itype = check_decl_order (yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.itype, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.itype); ;}
    break;

  case 59:
#line 421 "parse.y"
    { check_forward_decls (0); ;}
    break;

  case 60:
#line 423 "parse.y"
    { (*yyvalp).itype = yyvsp[YYFILL (0)].yystate.yysemantics.yysval.itype; ;}
    break;

  case 61:
#line 425 "parse.y"
    { (*yyvalp).itype = od_routine; ;}
    break;

  case 62:
#line 429 "parse.y"
    { current_module->implementation = 1; ;}
    break;

  case 63:
#line 431 "parse.y"
    { check_forward_decls (1); ;}
    break;

  case 69:
#line 444 "parse.y"
    { chk_dialect_name ("to begin do", E_O_PASCAL); start_constructor (0); ;}
    break;

  case 70:
#line 446 "parse.y"
    { finish_constructor (); ;}
    break;

  case 71:
#line 451 "parse.y"
    { chk_dialect_name ("to end do", E_O_PASCAL); start_destructor (); ;}
    break;

  case 72:
#line 453 "parse.y"
    { finish_destructor (); ;}
    break;

  case 73:
#line 457 "parse.y"
    { start_constructor (0); ;}
    break;

  case 74:
#line 459 "parse.y"
    { finish_constructor (); ;}
    break;

  case 76:
#line 464 "parse.y"
    { ;}
    break;

  case 77:
#line 466 "parse.y"
    { start_destructor (); ;}
    break;

  case 78:
#line 468 "parse.y"
    { finish_destructor (); ;}
    break;

  case 81:
#line 475 "parse.y"
    { (*yyvalp).ttype = yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype; ;}
    break;

  case 82:
#line 480 "parse.y"
    {
        tree *a = &yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype, b;
        while (*a)
          {
            for (b = TREE_CHAIN (*a); b && TREE_VALUE (b) != TREE_VALUE (*a); b = TREE_CHAIN (b)) ;
            if (b)
              {
                error ("duplicate identifier `%s'", IDENTIFIER_NAME (TREE_VALUE (*a)));
                *a = TREE_CHAIN (*a);
              }
            else
              a = &TREE_CHAIN (*a);
          }
        (*yyvalp).ttype = nreverse (yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype);
      ;}
    break;

  case 83:
#line 499 "parse.y"
    { (*yyvalp).ttype = build_tree_list (NULL_TREE, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype); ;}
    break;

  case 84:
#line 501 "parse.y"
    { (*yyvalp).ttype = tree_cons (NULL_TREE, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (-2)].yystate.yysemantics.yysval.ttype); ;}
    break;

  case 85:
#line 503 "parse.y"
    {
        (*yyvalp).ttype = tree_cons (NULL_TREE, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (-2)].yystate.yysemantics.yysval.ttype);
        error ("comma missing after `%s'", IDENTIFIER_NAME (TREE_VALUE (yyvsp[YYFILL (-2)].yystate.yysemantics.yysval.ttype)));
        yyerrok;
      ;}
    break;

  case 86:
#line 509 "parse.y"
    { error ("extra comma following identifier list"); ;}
    break;

  case 88:
#line 515 "parse.y"
    { (*yyvalp).ttype = build_tree_list (NULL_TREE, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype); ;}
    break;

  case 89:
#line 517 "parse.y"
    { (*yyvalp).ttype = tree_cons (NULL_TREE, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (-2)].yystate.yysemantics.yysval.ttype); ;}
    break;

  case 91:
#line 523 "parse.y"
    { yyerrok; ;}
    break;

  case 92:
#line 525 "parse.y"
    { error ("module specifications need an export part"); ;}
    break;

  case 93:
#line 527 "parse.y"
    { warning ("missing semicolon"); yyerrok; ;}
    break;

  case 94:
#line 529 "parse.y"
    { error ("extra semicolon"); ;}
    break;

  case 95:
#line 534 "parse.y"
    { export_interface (yyvsp[YYFILL (-2)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype); ;}
    break;

  case 96:
#line 539 "parse.y"
    { error ("missing `='"); ;}
    break;

  case 98:
#line 545 "parse.y"
    { (*yyvalp).ttype = yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype; ;}
    break;

  case 100:
#line 548 "parse.y"
    { (*yyvalp).ttype = chainon (yyvsp[YYFILL (-3)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype); ;}
    break;

  case 101:
#line 553 "parse.y"
    { ASSERT_ID (yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (0)].yystate.yyloc, p_all); (*yyvalp).ttype = build_tree_list (NULL_TREE, NULL_TREE); ;}
    break;

  case 103:
#line 559 "parse.y"
    { (*yyvalp).ttype = chainon (yyvsp[YYFILL (-2)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype); ;}
    break;

  case 104:
#line 561 "parse.y"
    { (*yyvalp).ttype = NULL_TREE; ;}
    break;

  case 105:
#line 563 "parse.y"
    { (*yyvalp).ttype = NULL_TREE; ;}
    break;

  case 106:
#line 565 "parse.y"
    { (*yyvalp).ttype = NULL_TREE; ;}
    break;

  case 107:
#line 570 "parse.y"
    { (*yyvalp).ttype = build_tree_list (yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype); ;}
    break;

  case 108:
#line 572 "parse.y"
    { (*yyvalp).ttype = build_tree_list (NULL_TREE, build_tree_list (yyvsp[YYFILL (-2)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype)); ;}
    break;

  case 109:
#line 574 "parse.y"
    {
        (*yyvalp).ttype = build_tree_list (yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype);
        TREE_READONLY ((*yyvalp).ttype) = 1;
      ;}
    break;

  case 111:
#line 583 "parse.y"
    { (*yyvalp).ttype = yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype; ;}
    break;

  case 112:
#line 588 "parse.y"
    { do_extra_import (); ;}
    break;

  case 113:
#line 589 "parse.y"
    { do_extra_import (); ;}
    break;

  case 117:
#line 597 "parse.y"
    { warning ("missing semicolon"); yyerrok; ;}
    break;

  case 118:
#line 602 "parse.y"
    { (*yyvalp).itype = od_uses; ;}
    break;

  case 121:
#line 609 "parse.y"
    { warning ("missing comma"); yyerrok; ;}
    break;

  case 122:
#line 614 "parse.y"
    { import_interface (yyvsp[YYFILL (-3)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (-2)].yystate.yysemantics.yysval.itype, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype); ;}
    break;

  case 123:
#line 619 "parse.y"
    { (*yyvalp).itype = 0; ;}
    break;

  case 124:
#line 621 "parse.y"
    { ASSERT_ID (yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (0)].yystate.yyloc, p_qualified); (*yyvalp).itype = 1; ;}
    break;

  case 126:
#line 627 "parse.y"
    { (*yyvalp).ttype = build_tree_list (NULL_TREE, yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype); ;}
    break;

  case 127:
#line 629 "parse.y"
    { (*yyvalp).ttype = build_tree_list (yyvsp[YYFILL (-3)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype); ;}
    break;

  case 129:
#line 635 "parse.y"
    { (*yyvalp).ttype = yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype; chk_dialect ("file name specification with `in' is", BORLAND_DELPHI); ;}
    break;

  case 131:
#line 641 "parse.y"
    { (*yyvalp).ttype = chainon (yyvsp[YYFILL (-2)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype); ;}
    break;

  case 132:
#line 643 "parse.y"
    { (*yyvalp).ttype = NULL_TREE; ;}
    break;

  case 133:
#line 645 "parse.y"
    { error ("missing comma"); (*yyvalp).ttype = chainon (yyvsp[YYFILL (-2)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype); ;}
    break;

  case 134:
#line 647 "parse.y"
    { (*yyvalp).ttype = NULL_TREE; ;}
    break;

  case 135:
#line 652 "parse.y"
    { (*yyvalp).ttype = build_tree_list (yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype); ;}
    break;

  case 136:
#line 659 "parse.y"
    { declare_label (yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype); ;}
    break;

  case 137:
#line 661 "parse.y"
    { declare_label (yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype); ;}
    break;

  case 138:
#line 663 "parse.y"
    { error ("non-label in label_list"); ;}
    break;

  case 139:
#line 665 "parse.y"
    { declare_label (yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype); error ("missing comma"); yyerrok; ;}
    break;

  case 140:
#line 667 "parse.y"
    { error ("extra comma"); ;}
    break;

  case 143:
#line 674 "parse.y"
    { chk_dialect ("non-numeric labels are", B_D_M_PASCAL); ;}
    break;

  case 146:
#line 686 "parse.y"
    { (*yyvalp).ttype = numeric_label (yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype); ;}
    break;

  case 150:
#line 699 "parse.y"
    { declare_constant (yyvsp[YYFILL (-3)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype); ;}
    break;

  case 151:
#line 702 "parse.y"
    {
        lex_const_equal = -1;
        declare_variables (build_tree_list (NULL_TREE, yyvsp[YYFILL (-7)].yystate.yysemantics.yysval.ttype), yyvsp[YYFILL (-4)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (-2)].yystate.yysemantics.yysval.ttype, VQ_BP_CONST, yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype);
      ;}
    break;

  case 158:
#line 722 "parse.y"
    { (*yyvalp).ttype = null_pointer_node; ;}
    break;

  case 159:
#line 727 "parse.y"
    { (*yyvalp).ttype = combine_strings (yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype, 1); ;}
    break;

  case 164:
#line 739 "parse.y"
    { (*yyvalp).ttype = build_caret_string_constant (yyvsp[YYFILL (0)].yystate.yysemantics.yysval.itype); ;}
    break;

  case 183:
#line 750 "parse.y"
    { (*yyvalp).ttype = build_tree_list (NULL_TREE, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype); ;}
    break;

  case 184:
#line 752 "parse.y"
    { (*yyvalp).ttype = chainon (yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype, build_tree_list (NULL_TREE, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype)); ;}
    break;

  case 186:
#line 760 "parse.y"
    { yyerrok; ;}
    break;

  case 188:
#line 763 "parse.y"
    { error ("missing semicolon"); yyerrok; ;}
    break;

  case 189:
#line 765 "parse.y"
    { error ("extra semicolon"); ;}
    break;

  case 191:
#line 771 "parse.y"
    {
        lex_const_equal = -1;
        if (!EM (yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype))
          {
            if (PASCAL_TYPE_UNDISCRIMINATED_SCHEMA (yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype))
              chk_dialect ("undiscriminated schemata on the right side of a type definition are", GNU_PASCAL);
            build_type_decl (yyvsp[YYFILL (-4)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype);
          }
      ;}
    break;

  case 192:
#line 781 "parse.y"
    {
        (*yyvalp).itype = immediate_size_expand;
        immediate_size_expand = 0;
        size_volatile++;
      ;}
    break;

  case 193:
#line 787 "parse.y"
    {
        build_type_decl (yyvsp[YYFILL (-5)].yystate.yysemantics.yysval.ttype, build_schema_type (yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (-4)].yystate.yysemantics.yysval.ttype), yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype);
        immediate_size_expand = yyvsp[YYFILL (-2)].yystate.yysemantics.yysval.itype;
        size_volatile--;
      ;}
    break;

  case 194:
#line 793 "parse.y"
    { build_schema_type (error_mark_node, yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype); ;}
    break;

  case 195:
#line 795 "parse.y"
    {
        tree t = start_struct (RECORD_TYPE);
        TYPE_MODE (t) = BLKmode;  /* may be used as a value parameter within its methods */
        TYPE_ALIGN (t) = BIGGEST_ALIGNMENT;
        if (co->pascal_dialect & MAC_PASCAL)
          warning ("traditional Macintosh Pascal has a different object model from what GNU Pascal supports");
        TYPE_LANG_SPECIFIC (t) = allocate_type_lang_specific ();
        TYPE_LANG_CODE (t) = PASCAL_LANG_OBJECT;
        build_type_decl (yyvsp[YYFILL (-2)].yystate.yysemantics.yysval.ttype, t, NULL_TREE);
        (*yyvalp).ttype = t;
        if (!pascal_global_bindings_p ())
          error ("object type definition only allowed at top level");
      ;}
    break;

  case 196:
#line 809 "parse.y"
    {
        lex_const_equal = -1;
        finish_object_type (yyvsp[YYFILL (-5)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (-2)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (-4)].yystate.yysemantics.yysval.ttype != NULL_TREE);
        yyerrok;
      ;}
    break;

  case 197:
#line 818 "parse.y"
    { (*yyvalp).ttype = yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype; ;}
    break;

  case 198:
#line 820 "parse.y"
    { error ("invalid schema discriminants"); (*yyvalp).ttype = NULL_TREE; ;}
    break;

  case 200:
#line 826 "parse.y"
    { (*yyvalp).ttype = chainon (yyvsp[YYFILL (-2)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype); ;}
    break;

  case 201:
#line 828 "parse.y"
    { (*yyvalp).ttype = chainon (yyvsp[YYFILL (-2)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype); error ("missing semicolon"); yyerrok; ;}
    break;

  case 202:
#line 830 "parse.y"
    { error ("extra semicolon"); ;}
    break;

  case 204:
#line 836 "parse.y"
    { (*yyvalp).ttype = build_discriminants (yyvsp[YYFILL (-2)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype); ;}
    break;

  case 206:
#line 842 "parse.y"
    { type_attributes (&(*yyvalp).ttype, TREE_PURPOSE (yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype)); ;}
    break;

  case 207:
#line 847 "parse.y"
    {
        if (!EM (yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype) && TYPE_GET_INITIALIZER (yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype))
          warning ("initial value of type ignored here");
      ;}
    break;

  case 208:
#line 857 "parse.y"
    {
#ifndef EGCS97
        pop_obstacks ();
#endif
        (*yyvalp).ttype = yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype;
      ;}
    break;

  case 210:
#line 868 "parse.y"
    {
        if (!PASCAL_TYPE_FILE (yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype))
          warning ("GPC supports `bindable' only for files");
        (*yyvalp).ttype = pascal_type_variant (yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype, TYPE_QUALIFIER_BINDABLE);
      ;}
    break;

  case 212:
#line 878 "parse.y"
    {
        (*yyvalp).ttype = pascal_type_variant (yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype, TYPE_QUALIFIER_RESTRICTED | (TYPE_PACKED (yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype) ? TYPE_QUALIFIER_PACKED : 0));
        /* Special case for `restricted Void' (fjf369*.pas) */
        if (TREE_CODE ((*yyvalp).ttype) == VOID_TYPE)
          {
            (*yyvalp).ttype = build_type_copy ((*yyvalp).ttype);
            new_main_variant ((*yyvalp).ttype);
          }
      ;}
    break;

  case 213:
#line 888 "parse.y"
    { (*yyvalp).ttype = build_discriminated_type (yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype); ;}
    break;

  case 217:
#line 893 "parse.y"
    { chk_dialect ("procedural variables and types are", B_D_M_PASCAL); ;}
    break;

  case 219:
#line 896 "parse.y"
    {
        defining_packed_type -= yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.itype;
        (*yyvalp).ttype = yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.itype ? pack_type (yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype) : yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype;
      ;}
    break;

  case 220:
#line 904 "parse.y"
    { defining_packed_type += (*yyvalp).itype = !co->ignore_packed;  /* can be nested */ ;}
    break;

  case 221:
#line 909 "parse.y"
    {
        if (PASCAL_TYPE_UNDISCRIMINATED_STRING ((*yyvalp).ttype))
          {
            if (!(co->pascal_dialect & B_D_PASCAL))
              error_or_warning (co->pascal_dialect & E_O_PASCAL, "missing string capacity -- assuming 255");
            (*yyvalp).ttype = string255_type_node;
          }
      ;}
    break;

  case 222:
#line 921 "parse.y"
    {
        tree decl = lookup_name (yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype);
        (*yyvalp).ttype = error_mark_node;
        if (!decl)
          error ("unknown identifier `%s'", IDENTIFIER_NAME (yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype));
        else if (TREE_CODE (decl) != TYPE_DECL)
          error ("type name expected, `%s' given", IDENTIFIER_NAME (yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype));
        else
          (*yyvalp).ttype = TREE_TYPE (decl);
      ;}
    break;

  case 223:
#line 935 "parse.y"
    { chk_dialect ("schema/string discriminants are", E_O_PASCAL); (*yyvalp).ttype = yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype; ;}
    break;

  case 224:
#line 937 "parse.y"
    {
        chk_dialect ("string capacity in brackets is", U_B_D_M_PASCAL);
        (*yyvalp).ttype = build_tree_list (NULL_TREE, maybe_schema_discriminant (string_may_be_char (yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype, 0)));
      ;}
    break;

  case 225:
#line 945 "parse.y"
    {
        /* This expression might be a discriminant of another schema. */
        (*yyvalp).ttype = build_tree_list (NULL_TREE, maybe_schema_discriminant (string_may_be_char (yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype, 0)));
      ;}
    break;

  case 226:
#line 950 "parse.y"
    {
        (*yyvalp).ttype = chainon (yyvsp[YYFILL (-2)].yystate.yysemantics.yysval.ttype, build_tree_list (NULL_TREE, maybe_schema_discriminant (string_may_be_char (yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype, 0))));
        yyerrok;
      ;}
    break;

  case 227:
#line 955 "parse.y"
    { error ("missing expression"); (*yyvalp).ttype = NULL_TREE; ;}
    break;

  case 228:
#line 957 "parse.y"
    {
        error ("missing comma");
        (*yyvalp).ttype = chainon (yyvsp[YYFILL (-2)].yystate.yysemantics.yysval.ttype, build_tree_list (NULL_TREE, maybe_schema_discriminant (string_may_be_char (yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype, 0))));
        yyerrok;
      ;}
    break;

  case 229:
#line 963 "parse.y"
    { error ("extra comma"); ;}
    break;

  case 232:
#line 977 "parse.y"
    { (*yyvalp).ttype = build_enum_type (nreverse (yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype)); ;}
    break;

  case 233:
#line 979 "parse.y"
    { assert (0); ;}
    break;

  case 234:
#line 981 "parse.y"
    { (*yyvalp).ttype = error_mark_node; ;}
    break;

  case 242:
#line 996 "parse.y"
    { (*yyvalp).ttype = build_tree_list (yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype, NULL_TREE); ;}
    break;

  case 243:
#line 998 "parse.y"
    { (*yyvalp).ttype = tree_cons (yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype, NULL_TREE, yyvsp[YYFILL (-2)].yystate.yysemantics.yysval.ttype); yyerrok; ;}
    break;

  case 244:
#line 1000 "parse.y"
    { (*yyvalp).ttype = tree_cons (yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype, NULL_TREE, yyvsp[YYFILL (-2)].yystate.yysemantics.yysval.ttype); error ("missing comma"); yyerrok; ;}
    break;

  case 245:
#line 1002 "parse.y"
    { error ("extra comma"); ;}
    break;

  case 248:
#line 1009 "parse.y"
    { (*yyvalp).ttype = build_pascal_unary_op (yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.code, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype); ;}
    break;

  case 249:
#line 1011 "parse.y"
    { (*yyvalp).ttype = build_pascal_unary_op (yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.code, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype); ;}
    break;

  case 250:
#line 1013 "parse.y"
    { (*yyvalp).ttype = build_pascal_unary_op (yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.code, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype); ;}
    break;

  case 251:
#line 1015 "parse.y"
    { (*yyvalp).ttype = build_pascal_unary_op (yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.code, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype); ;}
    break;

  case 253:
#line 1018 "parse.y"
    { (*yyvalp).ttype = yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype; ;}
    break;

  case 254:
#line 1023 "parse.y"
    { (*yyvalp).ttype = build_pascal_subrange_type (yyvsp[YYFILL (-2)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype, 0); ;}
    break;

  case 255:
#line 1025 "parse.y"
    {
        defining_packed_type -= yyvsp[YYFILL (-3)].yystate.yysemantics.yysval.itype;
        chk_dialect ("packed subrange types are", B_D_PASCAL);
        (*yyvalp).ttype = build_pascal_subrange_type (yyvsp[YYFILL (-2)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (-3)].yystate.yysemantics.yysval.itype);
      ;}
    break;

  case 256:
#line 1035 "parse.y"
    { (*yyvalp).ttype = EM (yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype) ? error_mark_node : build_pointer_type (yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype); ;}
    break;

  case 257:
#line 1037 "parse.y"
    { (*yyvalp).ttype = EM (yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype) ? error_mark_node : build_pointer_type (yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype); ;}
    break;

  case 258:
#line 1039 "parse.y"
    { (*yyvalp).ttype = EM (yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype) ? error_mark_node : build_pointer_type (yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype); ;}
    break;

  case 259:
#line 1041 "parse.y"
    {
        chk_dialect ("pointers to `const' types are", GNU_PASCAL);
        (*yyvalp).ttype = EM (yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype) ? error_mark_node : build_pointer_type (p_build_type_variant (yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype, 1, TYPE_VOLATILE (yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype)));
      ;}
    break;

  case 260:
#line 1052 "parse.y"
    {
        tree decl, scan;
        for (scan = current_type_list; scan && TREE_VALUE (scan) != yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype; scan = TREE_CHAIN (scan)) ;
        if (scan)
          (*yyvalp).ttype = TREE_TYPE (TREE_PURPOSE (scan));
        else if (current_type_list)
          (*yyvalp).ttype = TREE_TYPE (build_type_decl (yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype, make_node (LANG_TYPE), NULL_TREE));
        else if ((decl = lookup_name (yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype)) && TREE_CODE (decl) == TYPE_DECL)
          (*yyvalp).ttype = TREE_TYPE (decl);
        else
          {
            error ("pointer domain type undefined");
            (*yyvalp).ttype = error_mark_node;
          }
      ;}
    break;

  case 261:
#line 1068 "parse.y"
    {
        chk_dialect ("pointers to procedures are", GNU_PASCAL);
        assert (EM (yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype) || (TREE_CODE (yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype) == REFERENCE_TYPE && TREE_TYPE (yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype)));
        (*yyvalp).ttype = TREE_TYPE (yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype);
      ;}
    break;

  case 263:
#line 1080 "parse.y"
    {
        if (EM (yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype))
          (*yyvalp).ttype = error_mark_node;
        else
          (*yyvalp).ttype = build_reference_type (build_function_type (void_type_node, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype));
      ;}
    break;

  case 264:
#line 1087 "parse.y"
    {
        if (!yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype)
          {
            error ("missing function result type");
            (*yyvalp).ttype = error_mark_node;
          }
        else if ((yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype && EM (yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype)) || EM (yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype))
          (*yyvalp).ttype = error_mark_node;
        else
          (*yyvalp).ttype = build_reference_type (build_function_type (yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype));
      ;}
    break;

  case 265:
#line 1102 "parse.y"
    { (*yyvalp).ttype = build_tree_list (NULL_TREE, void_type_node); ;}
    break;

  case 266:
#line 1104 "parse.y"
    { (*yyvalp).ttype = NULL_TREE; ;}
    break;

  case 267:
#line 1106 "parse.y"
    { (*yyvalp).ttype = yyvsp[YYFILL (-3)].yystate.yysemantics.yysval.ttype; ;}
    break;

  case 268:
#line 1108 "parse.y"
    { (*yyvalp).ttype = chainon (yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype, build_tree_list (NULL_TREE, void_type_node)); ;}
    break;

  case 270:
#line 1114 "parse.y"
    { (*yyvalp).ttype = chainon (yyvsp[YYFILL (-2)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype); ;}
    break;

  case 271:
#line 1119 "parse.y"
    { (*yyvalp).ttype = build_procedural_type_formal_param (yyvsp[YYFILL (-2)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype, 0, 0); ;}
    break;

  case 272:
#line 1121 "parse.y"
    { (*yyvalp).ttype = build_procedural_type_formal_param (yyvsp[YYFILL (-2)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype, 0, 1); ;}
    break;

  case 273:
#line 1123 "parse.y"
    { (*yyvalp).ttype = build_procedural_type_formal_param (yyvsp[YYFILL (-2)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype, 1, !!yyvsp[YYFILL (-4)].yystate.yysemantics.yysval.ttype); ;}
    break;

  case 274:
#line 1125 "parse.y"
    { (*yyvalp).ttype = build_procedural_type_formal_param (yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype, NULL_TREE, 1, !!yyvsp[YYFILL (-2)].yystate.yysemantics.yysval.ttype); ;}
    break;

  case 275:
#line 1127 "parse.y"
    { (*yyvalp).ttype = build_procedural_type_formal_param (yyvsp[YYFILL (-2)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype, 2, 1); ;}
    break;

  case 276:
#line 1129 "parse.y"
    { (*yyvalp).ttype = build_procedural_type_formal_param (yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype, NULL_TREE, 2, 1); ;}
    break;

  case 277:
#line 1131 "parse.y"
    {
        error ("invalid parameter in procedural type");
        (*yyvalp).ttype = build_tree_list (NULL_TREE, error_mark_node);
      ;}
    break;

  case 283:
#line 1149 "parse.y"
    { (*yyvalp).ttype = build_pascal_array_type (yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (-3)].yystate.yysemantics.yysval.ttype); ;}
    break;

  case 285:
#line 1155 "parse.y"
    { (*yyvalp).ttype = chainon (yyvsp[YYFILL (-2)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype); yyerrok; ;}
    break;

  case 286:
#line 1157 "parse.y"
    {
        error ("non-expression in array_index_list");
        (*yyvalp).ttype = build_tree_list (error_mark_node, error_mark_node);
      ;}
    break;

  case 287:
#line 1162 "parse.y"
    { (*yyvalp).ttype = chainon (yyvsp[YYFILL (-2)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype); error ("missing comma"); yyerrok; ;}
    break;

  case 288:
#line 1164 "parse.y"
    { error ("extra comma"); ;}
    break;

  case 290:
#line 1172 "parse.y"
    { (*yyvalp).ttype = build_tree_list (yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype, convert_type_to_range (yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype)); ;}
    break;

  case 291:
#line 1174 "parse.y"
    { (*yyvalp).ttype = build_tree_list (yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype, convert_type_to_range (yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype)); ;}
    break;

  case 292:
#line 1179 "parse.y"
    { (*yyvalp).ttype = build_type_copy (yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype);  /* in case it will be packed */ ;}
    break;

  case 293:
#line 1181 "parse.y"
    { (*yyvalp).ttype = build_file_type (yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (-2)].yystate.yysemantics.yysval.ttype, 0); ;}
    break;

  case 294:
#line 1186 "parse.y"
    { chk_dialect ("untyped files are", U_B_D_M_PASCAL); (*yyvalp).ttype = untyped_file_type_node; ;}
    break;

  case 296:
#line 1192 "parse.y"
    { (*yyvalp).ttype = yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype; ;}
    break;

  case 297:
#line 1197 "parse.y"
    { (*yyvalp).ttype = pascal_build_set_type (yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype); ;}
    break;

  case 298:
#line 1202 "parse.y"
    { (*yyvalp).ttype = yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype; yyerrok; ;}
    break;

  case 299:
#line 1204 "parse.y"
    { (*yyvalp).ttype = finish_struct (start_struct (RECORD_TYPE), NULL_TREE, 1); ;}
    break;

  case 300:
#line 1209 "parse.y"
    { (*yyvalp).ttype = finish_struct (start_struct (RECORD_TYPE), NULL_TREE, 1); ;}
    break;

  case 301:
#line 1211 "parse.y"
    { (*yyvalp).ttype = finish_struct (start_struct (RECORD_TYPE), yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype, 1); ;}
    break;

  case 302:
#line 1213 "parse.y"
    { (*yyvalp).ttype = build_variant_record (yyvsp[YYFILL (-2)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype); ;}
    break;

  case 303:
#line 1215 "parse.y"
    { (*yyvalp).ttype = build_variant_record (NULL_TREE, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype); ;}
    break;

  case 305:
#line 1221 "parse.y"
    { (*yyvalp).ttype = chainon (yyvsp[YYFILL (-2)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype); yyerrok; ;}
    break;

  case 306:
#line 1223 "parse.y"
    { (*yyvalp).ttype = chainon (yyvsp[YYFILL (-2)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype); error ("missing semicolon"); yyerrok; ;}
    break;

  case 307:
#line 1225 "parse.y"
    { error ("extra semicolon"); ;}
    break;

  case 309:
#line 1231 "parse.y"
    { (*yyvalp).ttype = build_fields (yyvsp[YYFILL (-2)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype); ;}
    break;

  case 310:
#line 1236 "parse.y"
    { (*yyvalp).ttype = build_record_variant_part (yyvsp[YYFILL (-4)].yystate.yysemantics.yysval.ttype, chainon (yyvsp[YYFILL (-2)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype)); ;}
    break;

  case 311:
#line 1241 "parse.y"
    { (*yyvalp).ttype = build_tree_list (yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype, build_field (yyvsp[YYFILL (-2)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype)); ;}
    break;

  case 312:
#line 1243 "parse.y"
    { (*yyvalp).ttype = build_tree_list (yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype, build_field (yyvsp[YYFILL (-2)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype)); ;}
    break;

  case 313:
#line 1245 "parse.y"
    { (*yyvalp).ttype = build_tree_list (yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype, NULL_TREE); ;}
    break;

  case 314:
#line 1247 "parse.y"
    { (*yyvalp).ttype = build_tree_list (yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype, NULL_TREE); ;}
    break;

  case 315:
#line 1252 "parse.y"
    { chk_dialect ("type denoters (no identifiers) as variant tag type are", U_B_D_PASCAL); ;}
    break;

  case 316:
#line 1257 "parse.y"
    { (*yyvalp).ttype = NULL_TREE; ;}
    break;

  case 317:
#line 1259 "parse.y"
    { (*yyvalp).ttype = build_tree_list (NULL_TREE, build_field (NULL_TREE, yyvsp[YYFILL (-2)].yystate.yysemantics.yysval.ttype)); ;}
    break;

  case 319:
#line 1265 "parse.y"
    { (*yyvalp).ttype = chainon (yyvsp[YYFILL (-2)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype); yyerrok; ;}
    break;

  case 320:
#line 1267 "parse.y"
    { (*yyvalp).ttype = chainon (yyvsp[YYFILL (-2)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype); error ("missing semicolon"); yyerrok; ;}
    break;

  case 321:
#line 1269 "parse.y"
    { (*yyvalp).ttype = NULL_TREE; ;}
    break;

  case 323:
#line 1275 "parse.y"
    { (*yyvalp).ttype = build_tree_list (yyvsp[YYFILL (-4)].yystate.yysemantics.yysval.ttype, build_field (NULL_TREE, yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype)); ;}
    break;

  case 325:
#line 1281 "parse.y"
    { (*yyvalp).ttype = chainon (yyvsp[YYFILL (-2)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype); yyerrok; ;}
    break;

  case 326:
#line 1283 "parse.y"
    { error ("extra comma"); ;}
    break;

  case 327:
#line 1285 "parse.y"
    { (*yyvalp).ttype = chainon (yyvsp[YYFILL (-2)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype); error ("missing comma"); yyerrok; ;}
    break;

  case 329:
#line 1291 "parse.y"
    { (*yyvalp).ttype = build_tree_list (NULL_TREE, string_may_be_char (yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype, 0)); ;}
    break;

  case 330:
#line 1293 "parse.y"
    {
        chk_dialect ("`case' ranges are", NOT_CLASSIC_PASCAL);
        (*yyvalp).ttype = build_tree_list (string_may_be_char (yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype, 0), string_may_be_char (yyvsp[YYFILL (-2)].yystate.yysemantics.yysval.ttype, 0));
      ;}
    break;

  case 331:
#line 1298 "parse.y"
    {
        (*yyvalp).ttype = build_tree_list (string_may_be_char (yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype, 0), string_may_be_char (yyvsp[YYFILL (-2)].yystate.yysemantics.yysval.ttype, 0));
        error ("missing `..'");
        yyerrok;
      ;}
    break;

  case 332:
#line 1304 "parse.y"
    {
        error ("extra `..'");
        (*yyvalp).ttype = build_tree_list (NULL_TREE, string_may_be_char (yyvsp[YYFILL (-2)].yystate.yysemantics.yysval.ttype, 0));
      ;}
    break;

  case 333:
#line 1312 "parse.y"
    {
        (*yyvalp).ttype = TYPE_MAIN_VARIANT (TREE_TYPE (yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype));
        chk_dialect_name ("type of", E_O_PASCAL);
      ;}
    break;

  case 337:
#line 1328 "parse.y"
    { (*yyvalp).ttype = yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype; ;}
    break;

  case 338:
#line 1330 "parse.y"
    { (*yyvalp).ttype = NULL_TREE; ;}
    break;

  case 340:
#line 1336 "parse.y"
    { (*yyvalp).ttype = chainon (yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype); ;}
    break;

  case 341:
#line 1338 "parse.y"
    { (*yyvalp).ttype = error_mark_node; ;}
    break;

  case 343:
#line 1344 "parse.y"
    { (*yyvalp).ttype = chainon (yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype, build_tree_list (void_type_node, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype)); ;}
    break;

  case 344:
#line 1346 "parse.y"
    { (*yyvalp).ttype = chainon (yyvsp[YYFILL (-2)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype); yyerrok; ;}
    break;

  case 345:
#line 1351 "parse.y"
    { (*yyvalp).ttype = build_fields (yyvsp[YYFILL (-2)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype); ;}
    break;

  case 346:
#line 1353 "parse.y"
    { (*yyvalp).ttype = build_method_description (yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype, NULL_TREE, void_type_node, 0); ;}
    break;

  case 347:
#line 1355 "parse.y"
    { (*yyvalp).ttype = build_method_description (yyvsp[YYFILL (-3)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (-2)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype, 0); ;}
    break;

  case 348:
#line 1357 "parse.y"
    { (*yyvalp).ttype = build_method_description (yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype, NULL_TREE, boolean_type_node, 1); ;}
    break;

  case 349:
#line 1359 "parse.y"
    { (*yyvalp).ttype = build_method_description (yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype, NULL_TREE, void_type_node, 1); ;}
    break;

  case 350:
#line 1361 "parse.y"
    { (*yyvalp).ttype = build_tree_list (NULL_TREE, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype); ;}
    break;

  case 351:
#line 1363 "parse.y"
    { (*yyvalp).ttype = build_tree_list (yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype); ;}
    break;

  case 352:
#line 1365 "parse.y"
    { (*yyvalp).ttype = build_tree_list (NULL_TREE, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype); ;}
    break;

  case 354:
#line 1372 "parse.y"
    { ;}
    break;

  case 356:
#line 1378 "parse.y"
    {
        tree t;
        yyvsp[YYFILL (-3)].yystate.yysemantics.yysval.ttype = nreverse (yyvsp[YYFILL (-3)].yystate.yysemantics.yysval.ttype);
        if ((TREE_CODE (yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype) == POINTER_TYPE || TREE_CODE (yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype) == REFERENCE_TYPE)
            && TREE_CODE (TREE_TYPE (yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype)) == FUNCTION_TYPE)
          (*yyvalp).itype = allow_function_calls (0);
        else
          (*yyvalp).itype = -1;
        /* With `begin var Result: Integer; Result := ...' where `Result'
           is a built-in identifier, parser look-ahead would already get
           its special meaning before we get to declaring the variables.
           So mark the identifiers. (fjf791.pas) */
        for (t = yyvsp[YYFILL (-3)].yystate.yysemantics.yysval.ttype; t; t = TREE_CHAIN (t))
          PASCAL_PENDING_DECLARATION (TREE_VALUE (t)) = 1;
      ;}
    break;

  case 357:
#line 1394 "parse.y"
    {
        tree t;
        for (t = yyvsp[YYFILL (-7)].yystate.yysemantics.yysval.ttype; t; t = TREE_CHAIN (t))
          PASCAL_PENDING_DECLARATION (TREE_VALUE (t)) = 0;
        lex_const_equal = -1;
        (*yyvalp).ttype = declare_variables (yyvsp[YYFILL (-7)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (-4)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (-2)].yystate.yysemantics.yysval.ttype, 0, yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype);
        if (yyvsp[YYFILL (-3)].yystate.yysemantics.yysval.itype != -1)
          allow_function_calls (yyvsp[YYFILL (-3)].yystate.yysemantics.yysval.itype);
        yyerrok;
      ;}
    break;

  case 358:
#line 1405 "parse.y"
    { (*yyvalp).ttype = NULL_TREE; lex_const_equal = -1; ;}
    break;

  case 360:
#line 1411 "parse.y"
    { (*yyvalp).ttype = chainon (yyvsp[YYFILL (-2)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype); ;}
    break;

  case 362:
#line 1417 "parse.y"
    { (*yyvalp).ttype = build_tree_list (yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype); ;}
    break;

  case 363:
#line 1419 "parse.y"
    { ASSERT_ID (yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (0)].yystate.yyloc, p_name); ;}
    break;

  case 364:
#line 1421 "parse.y"
    { (*yyvalp).ttype = tree_cons (yyvsp[YYFILL (-2)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype, build_tree_list (yyvsp[YYFILL (-4)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (-3)].yystate.yysemantics.yysval.ttype)); ;}
    break;

  case 366:
#line 1427 "parse.y"
    { (*yyvalp).ttype = chainon (yyvsp[YYFILL (-2)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype); ;}
    break;

  case 367:
#line 1432 "parse.y"
    { (*yyvalp).ttype = build_tree_list (yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype); ;}
    break;

  case 368:
#line 1434 "parse.y"
    { (*yyvalp).ttype = TREE_PURPOSE (yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype); ;}
    break;

  case 369:
#line 1439 "parse.y"
    { (*yyvalp).ttype = build_tree_list (yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (-3)].yystate.yysemantics.yysval.ttype); ;}
    break;

  case 371:
#line 1445 "parse.y"
    { (*yyvalp).ttype = chainon (yyvsp[YYFILL (-2)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype); ;}
    break;

  case 373:
#line 1451 "parse.y"
    { (*yyvalp).ttype = build_tree_list (yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype, NULL_TREE); ;}
    break;

  case 374:
#line 1453 "parse.y"
    { (*yyvalp).ttype = build_tree_list (yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype, NULL_TREE); ;}
    break;

  case 375:
#line 1455 "parse.y"
    { (*yyvalp).ttype = build_tree_list (yyvsp[YYFILL (-2)].yystate.yysemantics.yysval.ttype, build_tree_list (NULL_TREE, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype)); ;}
    break;

  case 376:
#line 1457 "parse.y"
    { (*yyvalp).ttype = build_tree_list (yyvsp[YYFILL (-3)].yystate.yysemantics.yysval.ttype, build_tree_list (NULL_TREE, yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype)); ;}
    break;

  case 377:
#line 1459 "parse.y"
    { (*yyvalp).ttype = build_tree_list (yyvsp[YYFILL (-5)].yystate.yysemantics.yysval.ttype, tree_cons (NULL_TREE, yyvsp[YYFILL (-3)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype)); ;}
    break;

  case 378:
#line 1463 "parse.y"
    { lex_const_equal = -1; ;}
    break;

  case 379:
#line 1465 "parse.y"
    { chk_dialect ("initialization with `:=' is", VAX_PASCAL); ;}
    break;

  case 380:
#line 1467 "parse.y"
    { chk_dialect ("initialization with `=' is", BORLAND_DELPHI); ;}
    break;

  case 382:
#line 1473 "parse.y"
    { (*yyvalp).ttype = yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype; ;}
    break;

  case 383:
#line 1475 "parse.y"
    { (*yyvalp).ttype = NULL_TREE; ;}
    break;

  case 385:
#line 1481 "parse.y"
    { (*yyvalp).itype = allow_function_calls (0); lex_const_equal = -1; ;}
    break;

  case 386:
#line 1483 "parse.y"
    {
        allow_function_calls (yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.itype);
        (*yyvalp).ttype = build_tree_list (NULL_TREE, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype);
        PASCAL_ABSOLUTE_CLAUSE ((*yyvalp).ttype) = 1;
      ;}
    break;

  case 387:
#line 1489 "parse.y"
    { (*yyvalp).ttype = NULL_TREE; ;}
    break;

  case 388:
#line 1508 "parse.y"
    {
        parentheses_count = 0;
        (*yyvalp).itype = allow_function_calls (0);
      ;}
    break;

  case 389:
#line 1513 "parse.y"
    {
        allow_function_calls (yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.itype);
        (*yyvalp).ttype = yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype;
      ;}
    break;

  case 390:
#line 1521 "parse.y"
    { (*yyvalp).ttype = build_tree_list (NULL_TREE, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype); ;}
    break;

  case 392:
#line 1524 "parse.y"
    {
        chk_dialect ("initializers in `()' are", B_D_M_PASCAL);
        (*yyvalp).ttype = build_tree_list (NULL_TREE, yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype);
      ;}
    break;

  case 393:
#line 1532 "parse.y"
    {
        (*yyvalp).ttype = maybe_schema_discriminant (yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype);
        /* Convert outer pairs of parentheses (which are meaningless in normal
           expressions) into extra levels of tree lists for structured initializers. */
        if (last_parenthesized_expression == (*yyvalp).ttype)
          while (parentheses_count--)
            {
              chk_dialect ("initializers in `()' are", B_D_M_PASCAL);
              (*yyvalp).ttype = build_tree_list (NULL_TREE, (*yyvalp).ttype);
            }
        parentheses_count = 0;
      ;}
    break;

  case 395:
#line 1549 "parse.y"
    { (*yyvalp).ttype = build_tree_list (NULL_TREE, yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype); ;}
    break;

  case 396:
#line 1551 "parse.y"
    { (*yyvalp).ttype = nreverse (yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype); ;}
    break;

  case 399:
#line 1555 "parse.y"
    { error ("invalid structured initializer"); (*yyvalp).ttype = error_mark_node; ;}
    break;

  case 400:
#line 1563 "parse.y"
    { TREE_CHAIN (((*yyvalp).ttype = yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype)) = yyvsp[YYFILL (-2)].yystate.yysemantics.yysval.ttype; ;}
    break;

  case 401:
#line 1565 "parse.y"
    { TREE_CHAIN (((*yyvalp).ttype = yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype)) = yyvsp[YYFILL (-2)].yystate.yysemantics.yysval.ttype; ;}
    break;

  case 402:
#line 1567 "parse.y"
    { TREE_CHAIN (((*yyvalp).ttype = yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype)) = yyvsp[YYFILL (-2)].yystate.yysemantics.yysval.ttype; error ("missing separator"); ;}
    break;

  case 404:
#line 1573 "parse.y"
    { chk_dialect ("initializers separated with `,' are", B_D_M_PASCAL); ;}
    break;

  case 407:
#line 1583 "parse.y"
    {
        chk_dialect ("initializers in `[]' are", E_O_PASCAL);
        (*yyvalp).ttype = build_tree_list (NULL_TREE, nreverse (yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype));
      ;}
    break;

  case 408:
#line 1588 "parse.y"
    {
        error ("invalid structured initializer");
        chk_dialect ("initializers in `[]' are", E_O_PASCAL);
        (*yyvalp).ttype = build_tree_list (NULL_TREE, NULL_TREE);
      ;}
    break;

  case 410:
#line 1598 "parse.y"
    { TREE_CHAIN (((*yyvalp).ttype = yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype)) = yyvsp[YYFILL (-2)].yystate.yysemantics.yysval.ttype; ;}
    break;

  case 411:
#line 1600 "parse.y"
    { TREE_CHAIN (((*yyvalp).ttype = yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype)) = yyvsp[YYFILL (-2)].yystate.yysemantics.yysval.ttype; error ("missing separator"); ;}
    break;

  case 412:
#line 1605 "parse.y"
    { (*yyvalp).ttype = build_tree_list (build_tree_list (yyvsp[YYFILL (-2)].yystate.yysemantics.yysval.ttype, NULL_TREE), TREE_VALUE (yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype)); ;}
    break;

  case 415:
#line 1612 "parse.y"
    { (*yyvalp).ttype = build_pascal_unary_op (yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.code, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype); ;}
    break;

  case 416:
#line 1614 "parse.y"
    { (*yyvalp).ttype = build_pascal_unary_op (yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.code, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype); ;}
    break;

  case 417:
#line 1728 "parse.y"
    { declare_routine (yyvsp[YYFILL (-2)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype, 1); ;}
    break;

  case 418:
#line 1739 "parse.y"
    { declare_routine (yyvsp[YYFILL (-2)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype, 0); ;}
    break;

  case 419:
#line 1741 "parse.y"
    { (*yyvalp).ttype = start_routine (yyvsp[YYFILL (-2)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype); ;}
    break;

  case 420:
#line 1743 "parse.y"
    {
        do_setjmp ();
        un_initialize_block (getdecls (), 0, 0);
      ;}
    break;

  case 421:
#line 1748 "parse.y"
    {
        finish_routine ();
        restore_identifiers (yyvsp[YYFILL (-4)].yystate.yysemantics.yysval.ttype);
      ;}
    break;

  case 424:
#line 1761 "parse.y"
    { (*yyvalp).ttype = build_routine_heading (NULL_TREE, yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype, NULL_TREE, void_type_node, 1, 0); ;}
    break;

  case 425:
#line 1763 "parse.y"
    { (*yyvalp).ttype = build_routine_heading (NULL_TREE, yyvsp[YYFILL (-3)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (-2)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype, 1, 0); ;}
    break;

  case 426:
#line 1765 "parse.y"
    { (*yyvalp).ttype = build_operator_heading (yyvsp[YYFILL (-3)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (-2)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype); ;}
    break;

  case 427:
#line 1775 "parse.y"
    { (*yyvalp).ttype = build_routine_heading (yyvsp[YYFILL (-3)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype, NULL_TREE, void_type_node, 1, 0); ;}
    break;

  case 428:
#line 1777 "parse.y"
    { (*yyvalp).ttype = build_routine_heading (yyvsp[YYFILL (-5)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (-3)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (-2)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype, 1, 0); ;}
    break;

  case 429:
#line 1779 "parse.y"
    { (*yyvalp).ttype = build_routine_heading (yyvsp[YYFILL (-3)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype, NULL_TREE, boolean_type_node, 1, 1); ;}
    break;

  case 430:
#line 1781 "parse.y"
    { (*yyvalp).ttype = build_routine_heading (yyvsp[YYFILL (-3)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype, NULL_TREE, void_type_node, 1, 1); ;}
    break;

  case 433:
#line 1791 "parse.y"
    { (*yyvalp).ttype = chainon (chainon (yyvsp[YYFILL (-2)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype), yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype); ;}
    break;

  case 434:
#line 1796 "parse.y"
    { (*yyvalp).ttype = build_tree_list (NULL_TREE, yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype); ;}
    break;

  case 435:
#line 1798 "parse.y"
    { (*yyvalp).ttype = build_tree_list (yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (-2)].yystate.yysemantics.yysval.ttype); ;}
    break;

  case 436:
#line 1800 "parse.y"
    { ASSERT_ID (yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (0)].yystate.yyloc, p_name); ;}
    break;

  case 437:
#line 1802 "parse.y"
    { (*yyvalp).ttype = tree_cons (yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (-3)].yystate.yysemantics.yysval.ttype, build_tree_list (yyvsp[YYFILL (-4)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (-5)].yystate.yysemantics.yysval.ttype)); ;}
    break;

  case 438:
#line 1804 "parse.y"
    { (*yyvalp).ttype = tree_cons (yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (-2)].yystate.yysemantics.yysval.ttype, build_tree_list (yyvsp[YYFILL (-4)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (-5)].yystate.yysemantics.yysval.ttype)); ;}
    break;

  case 439:
#line 1806 "parse.y"
    { (*yyvalp).ttype = tree_cons (yyvsp[YYFILL (-4)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (-5)].yystate.yysemantics.yysval.ttype, build_tree_list (yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (-2)].yystate.yysemantics.yysval.ttype)); ;}
    break;

  case 440:
#line 1808 "parse.y"
    { (*yyvalp).ttype = build_tree_list (yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (-2)].yystate.yysemantics.yysval.ttype); ;}
    break;

  case 441:
#line 1810 "parse.y"
    { (*yyvalp).ttype = build_tree_list (NULL_TREE, yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype); ;}
    break;

  case 442:
#line 1812 "parse.y"
    { (*yyvalp).ttype = build_tree_list (NULL_TREE, yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype); ;}
    break;

  case 444:
#line 1818 "parse.y"
    { (*yyvalp).ttype = chainon (yyvsp[YYFILL (-2)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype); ;}
    break;

  case 445:
#line 1820 "parse.y"
    {
        if (co->warn_near_far)
          warning ("`%s' directive ignored in flat memory model", IDENTIFIER_NAME (yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype));
      ;}
    break;

  case 451:
#line 1839 "parse.y"
    { (*yyvalp).ttype = yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype; chk_dialect ("function result variable specifications are", E_O_PASCAL); ;}
    break;

  case 453:
#line 1845 "parse.y"
    { chk_dialect ("function result variables without `=' are", GNU_PASCAL); ;}
    break;

  case 455:
#line 1851 "parse.y"
    { (*yyvalp).ttype = yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype; chk_dialect ("operator result variables with `=' are", GNU_PASCAL); ;}
    break;

  case 456:
#line 1853 "parse.y"
    { error ("missing operator result variable"); ;}
    break;

  case 457:
#line 1858 "parse.y"
    { (*yyvalp).ttype = NULL_TREE; ;}
    break;

  case 458:
#line 1860 "parse.y"
    { (*yyvalp).ttype = check_result_type (yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype); ;}
    break;

  case 461:
#line 1867 "parse.y"
    { (*yyvalp).ttype = yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype; ;}
    break;

  case 462:
#line 1869 "parse.y"
    {
        chk_dialect ("ellipsis parameters are", GNU_PASCAL);
        (*yyvalp).ttype = chainon (yyvsp[YYFILL (-3)].yystate.yysemantics.yysval.ttype, build_tree_list (NULL_TREE, NULL_TREE));
      ;}
    break;

  case 463:
#line 1874 "parse.y"
    {
        chk_dialect ("ellipsis parameters are", GNU_PASCAL);
        (*yyvalp).ttype = build_tree_list (NULL_TREE, NULL_TREE);
      ;}
    break;

  case 464:
#line 1879 "parse.y"
    { (*yyvalp).ttype = NULL_TREE; ;}
    break;

  case 466:
#line 1885 "parse.y"
    { (*yyvalp).ttype = chainon (yyvsp[YYFILL (-2)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype); yyerrok; ;}
    break;

  case 467:
#line 1887 "parse.y"
    { (*yyvalp).ttype = chainon (yyvsp[YYFILL (-2)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype); error ("missing semicolon"); yyerrok; ;}
    break;

  case 469:
#line 1893 "parse.y"
    { (*yyvalp).ttype = build_formal_param (yyvsp[YYFILL (-2)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype, 0, 0); ;}
    break;

  case 470:
#line 1895 "parse.y"
    { (*yyvalp).ttype = build_formal_param (yyvsp[YYFILL (-2)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype, 0, 1); ;}
    break;

  case 471:
#line 1897 "parse.y"
    { (*yyvalp).ttype = build_formal_param (yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype, 1, !!yyvsp[YYFILL (-3)].yystate.yysemantics.yysval.ttype); ;}
    break;

  case 472:
#line 1899 "parse.y"
    { (*yyvalp).ttype = build_formal_param (yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype, 2, 1); ;}
    break;

  case 473:
#line 1901 "parse.y"
    { (*yyvalp).ttype = build_formal_param (TREE_PURPOSE (yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype), TREE_VALUE (TREE_VALUE (yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype)), 0, 0); ;}
    break;

  case 474:
#line 1906 "parse.y"
    { (*yyvalp).ttype = build_routine_heading (NULL_TREE, yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype, NULL_TREE, void_type_node, 0, 0); ;}
    break;

  case 475:
#line 1908 "parse.y"
    { (*yyvalp).ttype = build_routine_heading (NULL_TREE, yyvsp[YYFILL (-3)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (-2)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype, 0, 0); ;}
    break;

  case 478:
#line 1918 "parse.y"
    { (*yyvalp).ttype = void_type_node; chk_dialect ("untyped parameters are", U_B_D_PASCAL); ;}
    break;

  case 479:
#line 1920 "parse.y"
    { (*yyvalp).ttype = yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype; ;}
    break;

  case 484:
#line 1932 "parse.y"
    { (*yyvalp).ttype = chainon (yyvsp[YYFILL (-3)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype); ;}
    break;

  case 485:
#line 1934 "parse.y"
    {
        defining_packed_type -= yyvsp[YYFILL (-6)].yystate.yysemantics.yysval.itype;
        PASCAL_TREE_PACKED (yyvsp[YYFILL (-3)].yystate.yysemantics.yysval.ttype) = yyvsp[YYFILL (-6)].yystate.yysemantics.yysval.itype;
        (*yyvalp).ttype = chainon (yyvsp[YYFILL (-3)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype);
      ;}
    break;

  case 489:
#line 1949 "parse.y"
    { (*yyvalp).ttype = chainon (yyvsp[YYFILL (-2)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype); yyerrok; ;}
    break;

  case 490:
#line 1951 "parse.y"
    { error ("missing semicolon"); yyerrok; ;}
    break;

  case 492:
#line 1957 "parse.y"
    {
        (*yyvalp).ttype = build_tree_list (yyvsp[YYFILL (-4)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (-2)].yystate.yysemantics.yysval.ttype);
        TREE_TYPE ((*yyvalp).ttype) = yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype;
      ;}
    break;

  case 493:
#line 1965 "parse.y"
    {
        (*yyvalp).ttype = build_tree_list (NULL_TREE, NULL_TREE);
        TREE_TYPE ((*yyvalp).ttype) = yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype;
      ;}
    break;

  case 496:
#line 1980 "parse.y"
    { yyerrok; ;}
    break;

  case 497:
#line 1984 "parse.y"
    { ;}
    break;

  case 498:
#line 1986 "parse.y"
    { yyerrok; ;}
    break;

  case 500:
#line 1989 "parse.y"
    { yyerrok; ;}
    break;

  case 502:
#line 1998 "parse.y"
    { (*yyvalp).itype = 0; ;}
    break;

  case 503:
#line 2000 "parse.y"
    { (*yyvalp).itype = 1; ;}
    break;

  case 518:
#line 2022 "parse.y"
    { pascal_expand_goto (yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype); ;}
    break;

  case 519:
#line 2027 "parse.y"
    { set_label (yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype); ;}
    break;

  case 520:
#line 2032 "parse.y"
    {
        chk_dialect ("variable declarations in statement part are", GNU_PASCAL);
        un_initialize_block (yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype, 0, 0);
      ;}
    break;

  case 521:
#line 2040 "parse.y"
    { restore_identifiers (yyvsp[YYFILL (-2)].yystate.yysemantics.yysval.ttype); ;}
    break;

  case 523:
#line 2046 "parse.y"
    { (*yyvalp).ttype = chainon (yyvsp[YYFILL (-2)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype); yyerrok; ;}
    break;

  case 524:
#line 2048 "parse.y"
    { (*yyvalp).ttype = NULL_TREE; ;}
    break;

  case 525:
#line 2050 "parse.y"
    { (*yyvalp).ttype = chainon (yyvsp[YYFILL (-2)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype); error ("missing comma"); yyerrok; ;}
    break;

  case 526:
#line 2052 "parse.y"
    { error ("extra comma"); ;}
    break;

  case 527:
#line 2057 "parse.y"
    { (*yyvalp).ttype = pascal_shadow_record_fields (undo_schema_dereference (yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype), NULL_TREE, 0); ;}
    break;

  case 528:
#line 2059 "parse.y"
    { (*yyvalp).ttype = pascal_shadow_record_fields (undo_schema_dereference (yyvsp[YYFILL (-2)].yystate.yysemantics.yysval.ttype), yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype, 0); ;}
    break;

  case 529:
#line 2064 "parse.y"
    { expand_start_cond (yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype, 0); ;}
    break;

  case 530:
#line 2066 "parse.y"
    {
        if (!yyvsp[YYFILL (0)].yystate.yysemantics.yysval.itype && extra_warnings)
          warning ("empty statement after `then'");
      ;}
    break;

  case 531:
#line 2074 "parse.y"
    { expand_end_cond (); ;}
    break;

  case 532:
#line 2076 "parse.y"
    { expand_start_else (); ;}
    break;

  case 533:
#line 2078 "parse.y"
    {
        if (!yyvsp[YYFILL (0)].yystate.yysemantics.yysval.itype && extra_warnings)
          warning ("empty statement after `else'");
        expand_end_cond ();
      ;}
    break;

  case 534:
#line 2087 "parse.y"
    {
        (*yyvalp).ttype = current_case_expression;
        current_case_expression = pascal_expand_start_case (yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype);
      ;}
    break;

  case 535:
#line 2092 "parse.y"
    {
        tree duplicate;
        if (!EM (current_case_expression))
          assert (!pushcase (NULL_TREE, 0, build_decl (LABEL_DECL, NULL_TREE, NULL_TREE), &duplicate));
      ;}
    break;

  case 536:
#line 2098 "parse.y"
    {
        expand_exit_something ();
        if (!EM (current_case_expression))
          expand_end_case (yyvsp[YYFILL (-7)].yystate.yysemantics.yysval.ttype);
        current_case_expression = yyvsp[YYFILL (-5)].yystate.yysemantics.yysval.ttype;
        yyerrok;
      ;}
    break;

  case 537:
#line 2109 "parse.y"
    {
        /* Create an implicit `otherwise' (in the rule above) to avoid warnings
           about unhandled cases. In ISO Pascal, this is a run-time error. */
        if (co->pascal_dialect & C_E_O_M_PASCAL)
          build_predef_call (p_CaseNoMatchError, NULL_TREE);
      ;}
    break;

  case 539:
#line 2120 "parse.y"
    { chk_dialect ("`else' in `case' statements is", B_D_PASCAL); ;}
    break;

  case 540:
#line 2121 "parse.y"
    { ;}
    break;

  case 542:
#line 2127 "parse.y"
    { yyerrok; ;}
    break;

  case 543:
#line 2129 "parse.y"
    { error ("case element expected"); ;}
    break;

  case 544:
#line 2131 "parse.y"
    { error ("missing semicolon"); yyerrok; ;}
    break;

  case 545:
#line 2133 "parse.y"
    { error ("extra semicolon"); ;}
    break;

  case 546:
#line 2138 "parse.y"
    { pascal_pushcase (yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype); ;}
    break;

  case 547:
#line 2140 "parse.y"
    { expand_exit_something (); ;}
    break;

  case 548:
#line 2148 "parse.y"
    { emit_nop (); expand_start_loop_continue_elsewhere (1); ;}
    break;

  case 549:
#line 2150 "parse.y"
    { LOCATION_NOTE (yyvsp[YYFILL (0)].yystate.yyloc); expand_loop_continue_here (); ;}
    break;

  case 550:
#line 2152 "parse.y"
    {
        LOCATION_NOTE (yyvsp[YYFILL (-1)].yystate.yyloc);
        expand_exit_loop_if_false (0, build_pascal_unary_op (TRUTH_NOT_EXPR, yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype));
        expand_end_loop ();
      ;}
    break;

  case 551:
#line 2161 "parse.y"
    { expand_start_loop (1); ;}
    break;

  case 552:
#line 2163 "parse.y"
    { LOCATION_NOTE (yyvsp[YYFILL (0)].yystate.yyloc); expand_exit_loop_if_false (0, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype); ;}
    break;

  case 553:
#line 2165 "parse.y"
    { expand_end_loop (); ;}
    break;

  case 554:
#line 2170 "parse.y"
    { yyvsp[YYFILL (-4)].yystate.yysemantics.yysval.ttype = start_for_loop (yyvsp[YYFILL (-4)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (-2)].yystate.yysemantics.yysval.ttype, &yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.code); ;}
    break;

  case 555:
#line 2172 "parse.y"
    { LOCATION_NOTE (yyvsp[YYFILL (-6)].yystate.yyloc); finish_for_loop (yyvsp[YYFILL (-9)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (-5)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (-6)].yystate.yysemantics.yysval.code); ;}
    break;

  case 556:
#line 2174 "parse.y"
    { yyvsp[YYFILL (-2)].yystate.yysemantics.yysval.ttype = start_for_set_loop (yyvsp[YYFILL (-2)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype, &(*yyvalp).ttype); ;}
    break;

  case 557:
#line 2176 "parse.y"
    { LOCATION_NOTE (yyvsp[YYFILL (-6)].yystate.yyloc); finish_for_set_loop (yyvsp[YYFILL (-7)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (-4)].yystate.yysemantics.yysval.ttype); ;}
    break;

  case 558:
#line 2181 "parse.y"
    { (*yyvalp).code = LE_EXPR; ;}
    break;

  case 559:
#line 2183 "parse.y"
    { (*yyvalp).code = GE_EXPR; ;}
    break;

  case 560:
#line 2185 "parse.y"
    { error ("missing `to' or `downto'"); (*yyvalp).code = LE_EXPR; ;}
    break;

  case 561:
#line 2192 "parse.y"
    { (*yyvalp).itype = allow_function_calls (!PASCAL_PROCEDURAL_TYPE (TREE_TYPE (yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype))); ;}
    break;

  case 562:
#line 2194 "parse.y"
    {
        if (!yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype)
          allow_function_calls (yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.itype);
        expand_assignment_or_call_statement (yyvsp[YYFILL (-2)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype);
        allow_function_calls (yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.itype);
      ;}
    break;

  case 564:
#line 2205 "parse.y"
    {
        chk_dialect ("the address operator is", B_D_M_PASCAL);
        /* Special case where `@@foo' can be an lvalue: If `foo' is a procedure
           reference, `@@foo' is a type cast to a procedure pointer. */
        if (PASCAL_PROCEDURAL_TYPE (TREE_TYPE (yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype)))
          {
            tree ftype;
            if (!(co->pascal_dialect & B_D_PASCAL))
              warning ("using address expression as lvalue");
            ftype = TREE_TYPE (TREE_TYPE (yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype));
            (*yyvalp).ttype = convert (build_pointer_type (ftype), yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype);
          }
        else
          {
            error ("using address expression as lvalue");
            (*yyvalp).ttype = error_mark_node;
          }
      ;}
    break;

  case 566:
#line 2228 "parse.y"
    { (*yyvalp).ttype = yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype; ;}
    break;

  case 568:
#line 2234 "parse.y"
    { error ("using `=' instead of `:=' in assignment"); ;}
    break;

  case 569:
#line 2239 "parse.y"
    { build_predef_call (yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.itype, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype); ;}
    break;

  case 570:
#line 2241 "parse.y"
    { build_predef_call (IDENTIFIER_BUILT_IN_VALUE (yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype)->symbol, NULL_TREE); ;}
    break;

  case 571:
#line 2243 "parse.y"
    { build_predef_call (IDENTIFIER_BUILT_IN_VALUE (yyvsp[YYFILL (-3)].yystate.yysemantics.yysval.ttype)->symbol, yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype); yyerrok; ;}
    break;

  case 572:
#line 2245 "parse.y"
    { build_predef_call (p_Dispose, build_tree_list (NULL_TREE, yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype)); ;}
    break;

  case 573:
#line 2247 "parse.y"
    {
        (*yyvalp).ttype = NULL_TREE;
        if (TREE_CODE (TREE_TYPE (yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype)) == POINTER_TYPE && PASCAL_TYPE_OBJECT (TREE_TYPE (TREE_TYPE (yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype))))
          {
            tree temp = make_new_variable ("dispose_object", TREE_TYPE (yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype));
            expand_expr_stmt (build_modify_expr (temp, NOP_EXPR, yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype));
            yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype = temp;
            (*yyvalp).ttype = pascal_shadow_record_fields (build_indirect_ref (yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype, "`Dispose'"), NULL_TREE, 2);
          }
      ;}
    break;

  case 574:
#line 2258 "parse.y"
    {
        restore_identifiers (yyvsp[YYFILL (-2)].yystate.yysemantics.yysval.ttype);
        build_predef_call (p_Dispose, tree_cons (NULL_TREE, yyvsp[YYFILL (-4)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype));
      ;}
    break;

  case 575:
#line 2263 "parse.y"
    { build_predef_call (p_Return, NULL_TREE); ;}
    break;

  case 576:
#line 2265 "parse.y"
    { build_predef_call (p_Return, build_tree_list (NULL_TREE, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype)); ;}
    break;

  case 578:
#line 2270 "parse.y"
    { (*yyvalp).itype = allow_function_calls (0); ;}
    break;

  case 579:
#line 2272 "parse.y"
    {
        (*yyvalp).ttype = yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype;
        allow_function_calls (yyvsp[YYFILL (-3)].yystate.yysemantics.yysval.itype);
        yyerrok;
      ;}
    break;

  case 580:
#line 2281 "parse.y"
    { (*yyvalp).ttype = build_tree_list (NULL_TREE, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype); ;}
    break;

  case 581:
#line 2283 "parse.y"
    { (*yyvalp).ttype = chainon (yyvsp[YYFILL (-2)].yystate.yysemantics.yysval.ttype, build_tree_list (NULL_TREE, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype)); yyerrok; ;}
    break;

  case 582:
#line 2285 "parse.y"
    { (*yyvalp).ttype = build_tree_list (NULL_TREE, error_mark_node); ;}
    break;

  case 583:
#line 2287 "parse.y"
    { (*yyvalp).ttype = build_tree_list (NULL_TREE, error_mark_node); error ("extra comma"); ;}
    break;

  case 585:
#line 2293 "parse.y"
    { (*yyvalp).ttype = chainon (yyvsp[YYFILL (-2)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype); yyerrok; ;}
    break;

  case 586:
#line 2295 "parse.y"
    { (*yyvalp).ttype = chainon (yyvsp[YYFILL (-2)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype); error ("missing comma"); yyerrok; ;}
    break;

  case 587:
#line 2297 "parse.y"
    { error ("extra comma"); ;}
    break;

  case 588:
#line 2303 "parse.y"
    { (*yyvalp).ttype = build_tree_list (NULL_TREE, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype); ;}
    break;

  case 589:
#line 2305 "parse.y"
    { (*yyvalp).ttype = build_tree_list (build_tree_list (NULL_TREE, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype), yyvsp[YYFILL (-2)].yystate.yysemantics.yysval.ttype); ;}
    break;

  case 590:
#line 2307 "parse.y"
    { (*yyvalp).ttype = build_tree_list (build_tree_list (yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (-2)].yystate.yysemantics.yysval.ttype), yyvsp[YYFILL (-4)].yystate.yysemantics.yysval.ttype); ;}
    break;

  case 591:
#line 2312 "parse.y"
    { pascal_expand_asm_operands (yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype, NULL_TREE, NULL_TREE, NULL_TREE, yyvsp[YYFILL (-3)].yystate.yysemantics.yysval.itype); ;}
    break;

  case 592:
#line 2314 "parse.y"
    { pascal_expand_asm_operands (yyvsp[YYFILL (-3)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype, NULL_TREE, NULL_TREE, yyvsp[YYFILL (-5)].yystate.yysemantics.yysval.itype); ;}
    break;

  case 593:
#line 2316 "parse.y"
    { pascal_expand_asm_operands (yyvsp[YYFILL (-5)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (-3)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype, NULL_TREE, yyvsp[YYFILL (-7)].yystate.yysemantics.yysval.itype); ;}
    break;

  case 594:
#line 2318 "parse.y"
    { pascal_expand_asm_operands (yyvsp[YYFILL (-7)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (-5)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (-3)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (-9)].yystate.yysemantics.yysval.itype); ;}
    break;

  case 595:
#line 2323 "parse.y"
    { (*yyvalp).itype = 0; ;}
    break;

  case 596:
#line 2325 "parse.y"
    { ASSERT_ID (yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (0)].yystate.yyloc, p_volatile); (*yyvalp).itype = 1; ;}
    break;

  case 600:
#line 2336 "parse.y"
    { (*yyvalp).ttype = chainon (yyvsp[YYFILL (-2)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype); ;}
    break;

  case 601:
#line 2341 "parse.y"
    { (*yyvalp).ttype = build_tree_list (yyvsp[YYFILL (-3)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype); ;}
    break;

  case 602:
#line 2346 "parse.y"
    { (*yyvalp).ttype = build_tree_list (NULL_TREE, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype); ;}
    break;

  case 603:
#line 2348 "parse.y"
    { (*yyvalp).ttype = tree_cons (NULL_TREE, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (-2)].yystate.yysemantics.yysval.ttype); ;}
    break;

  case 604:
#line 2355 "parse.y"
    {
        if (PEDANTIC (NOT_CLASSIC_PASCAL))
          {
            tree t = yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype;
            STRIP_TYPE_NOPS (t);
            if (TREE_CODE (t) == CONVERT_EXPR || TREE_CODE (t) == NEGATE_EXPR)
              t = TREE_OPERAND (t, 0);
            if (last_parenthesized_expression == yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype
                || last_parenthesized_expression == t
                || !(TREE_CODE_CLASS (TREE_CODE (t)) == 'c' && PASCAL_TREE_FRESH_CST (t)))
              error ("ISO 7185 Pascal allows only simple constants");
          }
      ;}
    break;

  case 605:
#line 2372 "parse.y"
    {
        if (!EM (TREE_TYPE ((*yyvalp).ttype)) && TREE_CODE (TREE_TYPE ((*yyvalp).ttype)) != BOOLEAN_TYPE)
          {
            error ("condition must be of Boolean type");
            (*yyvalp).ttype = error_mark_node;
          }
      ;}
    break;

  case 606:
#line 2383 "parse.y"
    { iso_no_parentheses (yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype); ;}
    break;

  case 607:
#line 2388 "parse.y"
    { (*yyvalp).ttype = fold (parser_build_binary_op (yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.code, yyvsp[YYFILL (-2)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype)); ;}
    break;

  case 608:
#line 2390 "parse.y"
    { (*yyvalp).ttype = fold (yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype); ;}
    break;

  case 610:
#line 2396 "parse.y"
    { (*yyvalp).ttype = set_exp_original_code (build_pascal_unary_op (yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.code, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype), yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.code); ;}
    break;

  case 611:
#line 2401 "parse.y"
    { (*yyvalp).ttype = parser_build_binary_op (yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.code, yyvsp[YYFILL (-2)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype); ;}
    break;

  case 612:
#line 2403 "parse.y"
    { (*yyvalp).ttype = build_operator_call (yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (-2)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype, 1); ;}
    break;

  case 613:
#line 2405 "parse.y"
    { (*yyvalp).ttype = start_boolean_binary_op (TRUTH_OR_EXPR, yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype); ;}
    break;

  case 614:
#line 2407 "parse.y"
    { if (yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype) LOCATION_NOTE (COPYLOC ((*yylocp), yyvsp[YYFILL (0)].yystate.yyloc)); (*yyvalp).ttype = finish_boolean_binary_op (TRUTH_OR_EXPR, yyvsp[YYFILL (-3)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype); ;}
    break;

  case 615:
#line 2409 "parse.y"
    { (*yyvalp).ttype = start_boolean_binary_op (TRUTH_ORIF_EXPR, yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype); ;}
    break;

  case 616:
#line 2411 "parse.y"
    { if (yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype) LOCATION_NOTE (COPYLOC ((*yylocp), yyvsp[YYFILL (0)].yystate.yyloc)); (*yyvalp).ttype = finish_boolean_binary_op (TRUTH_ORIF_EXPR, yyvsp[YYFILL (-3)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype); ;}
    break;

  case 618:
#line 2417 "parse.y"
    { (*yyvalp).ttype = parser_build_binary_op (yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.code, yyvsp[YYFILL (-2)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype); ;}
    break;

  case 619:
#line 2419 "parse.y"
    { (*yyvalp).ttype = build_operator_call (yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (-2)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype, 1); ;}
    break;

  case 620:
#line 2421 "parse.y"
    { (*yyvalp).ttype = start_boolean_binary_op (TRUTH_AND_EXPR, yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype); ;}
    break;

  case 621:
#line 2423 "parse.y"
    { if (yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype) LOCATION_NOTE (COPYLOC ((*yylocp), yyvsp[YYFILL (0)].yystate.yyloc)); (*yyvalp).ttype = finish_boolean_binary_op (TRUTH_AND_EXPR, yyvsp[YYFILL (-3)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype); ;}
    break;

  case 622:
#line 2425 "parse.y"
    { (*yyvalp).ttype = start_boolean_binary_op (TRUTH_ANDIF_EXPR, yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype); ;}
    break;

  case 623:
#line 2427 "parse.y"
    { if (yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype) LOCATION_NOTE (COPYLOC ((*yylocp), yyvsp[YYFILL (0)].yystate.yyloc)); (*yyvalp).ttype = finish_boolean_binary_op (TRUTH_ANDIF_EXPR, yyvsp[YYFILL (-3)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype); ;}
    break;

  case 625:
#line 2433 "parse.y"
    { (*yyvalp).ttype = build_operator_call (yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (-2)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype, 0); ;}
    break;

  case 626:
#line 2435 "parse.y"
    { (*yyvalp).ttype = parser_build_binary_op (POW_EXPR, yyvsp[YYFILL (-2)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype); ;}
    break;

  case 627:
#line 2437 "parse.y"
    { (*yyvalp).ttype = parser_build_binary_op (POWER_EXPR, yyvsp[YYFILL (-2)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype); ;}
    break;

  case 628:
#line 2439 "parse.y"
    { (*yyvalp).ttype = build_is_as (yyvsp[YYFILL (-2)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype, p_is); ;}
    break;

  case 629:
#line 2441 "parse.y"
    { (*yyvalp).ttype = build_is_as (yyvsp[YYFILL (-2)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype, p_as); ;}
    break;

  case 630:
#line 2446 "parse.y"
    { (*yyvalp).ttype = set_exp_original_code (build_pascal_unary_op (yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.code, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype), yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.code); ;}
    break;

  case 631:
#line 2448 "parse.y"
    {
        chk_dialect ("the address operator is", B_D_M_PASCAL);
        (*yyvalp).ttype = build_pascal_address_expression (yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype, !co->typed_address);
      ;}
    break;

  case 634:
#line 2455 "parse.y"
    {
        if (TREE_CODE ((*yyvalp).ttype) == TYPE_DECL)
          {
            error ("variable access expected -- type name given");
            (*yyvalp).ttype = error_mark_node;
          }
        else if (MAYBE_CALL_FUNCTION ((*yyvalp).ttype) && TREE_CODE (function_result_type ((*yyvalp).ttype)) != VOID_TYPE)
          (*yyvalp).ttype = maybe_call_function ((*yyvalp).ttype, 0);
        else if (CALL_METHOD ((*yyvalp).ttype))
          (*yyvalp).ttype = call_method ((*yyvalp).ttype, NULL_TREE);
      ;}
    break;

  case 635:
#line 2470 "parse.y"
    { iso_no_parentheses (yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype); ;}
    break;

  case 636:
#line 2475 "parse.y"
    { (*yyvalp).ttype = build_predef_call (IDENTIFIER_BUILT_IN_VALUE (yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype)->symbol, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype); ;}
    break;

  case 637:
#line 2477 "parse.y"
    { (*yyvalp).ttype = get_builtin_variable (yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype); ;}
    break;

  case 640:
#line 2484 "parse.y"
    { (*yyvalp).ttype = build_inherited_method (yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype); ;}
    break;

  case 641:
#line 2486 "parse.y"
    { (*yyvalp).ttype = build_component_ref (undo_schema_dereference (yyvsp[YYFILL (-2)].yystate.yysemantics.yysval.ttype), yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype); ;}
    break;

  case 642:
#line 2488 "parse.y"
    {
        (*yyvalp).ttype = set_exp_original_code (yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype, NOP_EXPR);
        if (last_parenthesized_expression == (*yyvalp).ttype)
          parentheses_count++;
        else
          {
            last_parenthesized_expression = (*yyvalp).ttype;
            parentheses_count = 1;
          }
      ;}
    break;

  case 643:
#line 2499 "parse.y"
    { (*yyvalp).ttype = build_pascal_pointer_reference (yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype); ;}
    break;

  case 644:
#line 2501 "parse.y"
    { (*yyvalp).ttype = build_pascal_array_ref (yyvsp[YYFILL (-3)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype); ;}
    break;

  case 645:
#line 2503 "parse.y"
    { yyvsp[YYFILL (0)].yystate.yysemantics.yysval.itype = allow_function_calls (0); ;}
    break;

  case 646:
#line 2505 "parse.y"
    {
        allow_function_calls (yyvsp[YYFILL (-3)].yystate.yysemantics.yysval.itype);
        if (yyvsp[YYFILL (-4)].yystate.yysemantics.yysval.ttype && TREE_CODE (yyvsp[YYFILL (-4)].yystate.yysemantics.yysval.ttype) == TYPE_DECL)
          {
            chk_dialect ("type casts are", B_D_M_PASCAL);
            if (list_length (yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype) != 1)
              {
                error ("type cast expects one expression argument");
                (*yyvalp).ttype = error_mark_node;
              }
            else
              (*yyvalp).ttype = build_type_cast (TREE_TYPE (yyvsp[YYFILL (-4)].yystate.yysemantics.yysval.ttype), TREE_VALUE (yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype));
          }
        else if (CALL_METHOD (yyvsp[YYFILL (-4)].yystate.yysemantics.yysval.ttype))
          (*yyvalp).ttype = call_method (yyvsp[YYFILL (-4)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype);
        else
          (*yyvalp).ttype = build_routine_call (yyvsp[YYFILL (-4)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype);
      ;}
    break;

  case 647:
#line 2524 "parse.y"
    { chk_dialect ("type casts are", B_D_M_PASCAL); (*yyvalp).ttype = build_type_cast (yyvsp[YYFILL (-3)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype); ;}
    break;

  case 648:
#line 2526 "parse.y"
    { (*yyvalp).ttype = build_predef_call (p_FormatString, yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype); ;}
    break;

  case 649:
#line 2528 "parse.y"
    { (*yyvalp).itype = allow_function_calls (0); ;}
    break;

  case 650:
#line 2530 "parse.y"
    {
        (*yyvalp).ttype = build_predef_call (p_Assigned, build_tree_list (NULL_TREE, yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype));
        allow_function_calls (yyvsp[YYFILL (-3)].yystate.yysemantics.yysval.itype);
      ;}
    break;

  case 651:
#line 2535 "parse.y"
    { (*yyvalp).ttype = build_pascal_address_expression (yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype, co->pascal_dialect & B_D_PASCAL); ;}
    break;

  case 652:
#line 2537 "parse.y"
    { (*yyvalp).ttype = build_predef_call (IDENTIFIER_BUILT_IN_VALUE (yyvsp[YYFILL (-3)].yystate.yysemantics.yysval.ttype)->symbol, build_tree_list (NULL_TREE, yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype)); ;}
    break;

  case 653:
#line 2539 "parse.y"
    {
        iso_no_parentheses (yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype);
        (*yyvalp).ttype = build_predef_call (p_New, build_tree_list (NULL_TREE, yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype));
      ;}
    break;

  case 654:
#line 2544 "parse.y"
    {
        (*yyvalp).ttype = NULL_TREE;
        if (TREE_CODE (TREE_TYPE (yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype)) == POINTER_TYPE && PASCAL_TYPE_OBJECT (TREE_TYPE (TREE_TYPE (yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype))))
          {
            if (TREE_CODE (yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype) == TYPE_DECL)
              yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype = make_new_variable ("self", TREE_TYPE (yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype));
            (*yyvalp).ttype = pascal_shadow_record_fields (build_indirect_ref (yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype, "`New'"), NULL_TREE, 1);
          }
      ;}
    break;

  case 655:
#line 2554 "parse.y"
    {
        restore_identifiers (yyvsp[YYFILL (-2)].yystate.yysemantics.yysval.ttype);
        (*yyvalp).ttype = build_predef_call (p_New, tree_cons (NULL_TREE, yyvsp[YYFILL (-4)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype));
      ;}
    break;

  case 657:
#line 2563 "parse.y"
    { (*yyvalp).ttype = TYPE_NAME (yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype); ;}
    break;

  case 659:
#line 2569 "parse.y"
    { (*yyvalp).ttype = chainon (yyvsp[YYFILL (-2)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype); yyerrok; ;}
    break;

  case 660:
#line 2571 "parse.y"
    { error ("missing index expression"); (*yyvalp).ttype = NULL_TREE; ;}
    break;

  case 661:
#line 2573 "parse.y"
    { (*yyvalp).ttype = chainon (yyvsp[YYFILL (-2)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype); error ("missing comma"); yyerrok; ;}
    break;

  case 662:
#line 2575 "parse.y"
    { error ("extra comma"); ;}
    break;

  case 663:
#line 2580 "parse.y"
    { (*yyvalp).ttype = build_tree_list (NULL_TREE, string_may_be_char (yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype, 1)); ;}
    break;

  case 664:
#line 2582 "parse.y"
    {
        chk_dialect ("substring access is", E_O_PASCAL);
        (*yyvalp).ttype = build_tree_list (string_may_be_char (yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype, 1), string_may_be_char (yyvsp[YYFILL (-2)].yystate.yysemantics.yysval.ttype, 1));
      ;}
    break;

  case 665:
#line 2590 "parse.y"
    { (*yyvalp).ttype = build_set_constructor (NULL_TREE); ;}
    break;

  case 666:
#line 2592 "parse.y"
    { (*yyvalp).ttype = build_set_constructor (yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype); ;}
    break;

  case 668:
#line 2598 "parse.y"
    { (*yyvalp).ttype = chainon (yyvsp[YYFILL (-2)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype); yyerrok; ;}
    break;

  case 669:
#line 2600 "parse.y"
    { (*yyvalp).ttype = chainon (yyvsp[YYFILL (-2)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype); error ("missing comma"); yyerrok; ;}
    break;

  case 670:
#line 2602 "parse.y"
    { error ("extra comma"); ;}
    break;

  case 671:
#line 2607 "parse.y"
    { (*yyvalp).ttype = construct_set_member (yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype, NULL_TREE); ;}
    break;

  case 672:
#line 2609 "parse.y"
    { (*yyvalp).ttype = construct_set_member (yyvsp[YYFILL (-2)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype); ;}
    break;

  case 673:
#line 2615 "parse.y"
    { (*yyvalp).code = CONVERT_EXPR; ;}
    break;

  case 674:
#line 2616 "parse.y"
    { (*yyvalp).code = NEGATE_EXPR; ;}
    break;

  case 675:
#line 2620 "parse.y"
    { (*yyvalp).code = CONVERT_EXPR; ;}
    break;

  case 676:
#line 2621 "parse.y"
    { (*yyvalp).code = NEGATE_EXPR; ;}
    break;

  case 677:
#line 2622 "parse.y"
    { (*yyvalp).code = TRUTH_NOT_EXPR; ;}
    break;

  case 678:
#line 2626 "parse.y"
    { (*yyvalp).code = NE_EXPR; ;}
    break;

  case 679:
#line 2627 "parse.y"
    { (*yyvalp).code = LE_EXPR; ;}
    break;

  case 680:
#line 2628 "parse.y"
    { (*yyvalp).code = GE_EXPR; ;}
    break;

  case 681:
#line 2629 "parse.y"
    { (*yyvalp).code = EQ_EXPR; ;}
    break;

  case 682:
#line 2630 "parse.y"
    { (*yyvalp).code = LT_EXPR; ;}
    break;

  case 683:
#line 2631 "parse.y"
    { (*yyvalp).code = GT_EXPR; ;}
    break;

  case 684:
#line 2632 "parse.y"
    { (*yyvalp).code = IN_EXPR; ;}
    break;

  case 685:
#line 2636 "parse.y"
    { (*yyvalp).code = PLUS_EXPR; ;}
    break;

  case 686:
#line 2637 "parse.y"
    { (*yyvalp).code = PLUS_EXPR; ;}
    break;

  case 687:
#line 2638 "parse.y"
    { (*yyvalp).code = MINUS_EXPR; ;}
    break;

  case 688:
#line 2639 "parse.y"
    { (*yyvalp).code = MINUS_EXPR; ;}
    break;

  case 689:
#line 2640 "parse.y"
    { (*yyvalp).code = TRUTH_XOR_EXPR; ;}
    break;

  case 690:
#line 2641 "parse.y"
    { (*yyvalp).code = SYMDIFF_EXPR; ;}
    break;

  case 691:
#line 2645 "parse.y"
    { (*yyvalp).ttype = get_identifier_with_spelling ("CeilPlus", "+>"); ;}
    break;

  case 692:
#line 2646 "parse.y"
    { (*yyvalp).ttype = get_identifier_with_spelling ("CeilMinus", "->"); ;}
    break;

  case 693:
#line 2647 "parse.y"
    { (*yyvalp).ttype = get_identifier_with_spelling ("FloorPlus", "+<"); ;}
    break;

  case 694:
#line 2648 "parse.y"
    { (*yyvalp).ttype = get_identifier_with_spelling ("FloorMinus", "-<"); ;}
    break;

  case 695:
#line 2653 "parse.y"
    { chk_dialect ("`or else' (without underscore) is", GNU_PASCAL); ;}
    break;

  case 696:
#line 2654 "parse.y"
    { ;}
    break;

  case 697:
#line 2658 "parse.y"
    { (*yyvalp).code = MULT_EXPR; ;}
    break;

  case 698:
#line 2659 "parse.y"
    { (*yyvalp).code = RDIV_EXPR; ;}
    break;

  case 699:
#line 2660 "parse.y"
    { (*yyvalp).code = TRUNC_DIV_EXPR; ;}
    break;

  case 700:
#line 2661 "parse.y"
    { (*yyvalp).code = (co->pascal_dialect & B_D_M_PASCAL) ? TRUNC_MOD_EXPR : FLOOR_MOD_EXPR; ;}
    break;

  case 701:
#line 2662 "parse.y"
    { (*yyvalp).code = LSHIFT_EXPR; ;}
    break;

  case 702:
#line 2663 "parse.y"
    { (*yyvalp).code = RSHIFT_EXPR; ;}
    break;

  case 703:
#line 2667 "parse.y"
    { (*yyvalp).ttype = get_identifier_with_spelling ("CeilMult", "*>"); ;}
    break;

  case 704:
#line 2668 "parse.y"
    { (*yyvalp).ttype = get_identifier_with_spelling ("CeilRDiv", "/>"); ;}
    break;

  case 705:
#line 2669 "parse.y"
    { (*yyvalp).ttype = get_identifier_with_spelling ("FloorMult", "*<"); ;}
    break;

  case 706:
#line 2670 "parse.y"
    { (*yyvalp).ttype = get_identifier_with_spelling ("FloorRDiv", "/<"); ;}
    break;

  case 707:
#line 2675 "parse.y"
    { chk_dialect ("`and then' (without underscore) is", GNU_PASCAL); ;}
    break;

  case 708:
#line 2676 "parse.y"
    { ;}
    break;

  case 709:
#line 2683 "parse.y"
    { (*yyvalp).itype = IDENTIFIER_BUILT_IN_VALUE (yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype)->symbol; ;}
    break;

  case 710:
#line 2685 "parse.y"
    { (*yyvalp).itype = p_and; ;}
    break;

  case 711:
#line 2686 "parse.y"
    { (*yyvalp).itype = p_or; ;}
    break;

  case 712:
#line 2687 "parse.y"
    { (*yyvalp).itype = p_not; ;}
    break;

  case 713:
#line 2688 "parse.y"
    { (*yyvalp).itype = p_xor; ;}
    break;

  case 714:
#line 2689 "parse.y"
    { (*yyvalp).itype = p_shl; ;}
    break;

  case 715:
#line 2690 "parse.y"
    { (*yyvalp).itype = p_shr; ;}
    break;

  case 716:
#line 2696 "parse.y"
    { (*yyvalp).ttype = get_identifier_with_spelling ("BPlus", "+"); ;}
    break;

  case 717:
#line 2697 "parse.y"
    { (*yyvalp).ttype = get_identifier_with_spelling ("BPlus", "+"); ;}
    break;

  case 718:
#line 2698 "parse.y"
    { (*yyvalp).ttype = get_identifier_with_spelling ("BMinus", "-"); ;}
    break;

  case 719:
#line 2699 "parse.y"
    { (*yyvalp).ttype = get_identifier_with_spelling ("BMinus", "-"); ;}
    break;

  case 720:
#line 2700 "parse.y"
    { (*yyvalp).ttype = get_identifier_with_spelling ("BMult", "*"); ;}
    break;

  case 721:
#line 2701 "parse.y"
    { (*yyvalp).ttype = get_identifier_with_spelling ("RDiv", "/"); ;}
    break;

  case 722:
#line 2702 "parse.y"
    { (*yyvalp).ttype = get_identifier ("Div"); ;}
    break;

  case 723:
#line 2703 "parse.y"
    { (*yyvalp).ttype = get_identifier ("Mod"); ;}
    break;

  case 724:
#line 2704 "parse.y"
    { (*yyvalp).ttype = get_identifier ("Power"); ;}
    break;

  case 725:
#line 2705 "parse.y"
    { (*yyvalp).ttype = get_identifier ("In"); ;}
    break;

  case 726:
#line 2706 "parse.y"
    { (*yyvalp).ttype = get_identifier_with_spelling ("LT", "<"); ;}
    break;

  case 727:
#line 2707 "parse.y"
    { (*yyvalp).ttype = get_identifier_with_spelling ("EQ", "="); ;}
    break;

  case 728:
#line 2708 "parse.y"
    { (*yyvalp).ttype = get_identifier_with_spelling ("GT", ">"); ;}
    break;

  case 729:
#line 2709 "parse.y"
    { (*yyvalp).ttype = get_identifier_with_spelling ("NE", "<>"); ;}
    break;

  case 730:
#line 2710 "parse.y"
    { (*yyvalp).ttype = get_identifier_with_spelling ("GE", ">="); ;}
    break;

  case 731:
#line 2711 "parse.y"
    { (*yyvalp).ttype = get_identifier_with_spelling ("LE", "<="); ;}
    break;

  case 732:
#line 2712 "parse.y"
    { (*yyvalp).ttype = get_identifier ("And"); ;}
    break;

  case 733:
#line 2713 "parse.y"
    { (*yyvalp).ttype = get_identifier ("Or"); ;}
    break;

  case 734:
#line 2714 "parse.y"
    { (*yyvalp).ttype = get_identifier_with_spelling ("SymDiff", "<>"); ;}
    break;

  case 737:
#line 2721 "parse.y"
    { warn_about_keyword_redeclaration ((*yyvalp).ttype, 1); ;}
    break;

  case 747:
#line 2739 "parse.y"
    { warn_about_keyword_redeclaration ((*yyvalp).ttype, 1); ;}
    break;

  case 751:
#line 2751 "parse.y"
    { warn_about_keyword_redeclaration ((*yyvalp).ttype, 1); ;}
    break;

  case 791:
#line 2798 "parse.y"
    { (*yyvalp).ttype = check_identifier (yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype); ;}
    break;

  case 797:
#line 2811 "parse.y"
    {
        char c[2];
        c[0] = yyvsp[YYFILL (0)].yystate.yysemantics.yysval.itype;
        c[1] = 0;
        (*yyvalp).ttype = make_identifier (c, 1);
      ;}
    break;

  case 798:
#line 2823 "parse.y"
    { pushlevel_expand (); ;}
    break;

  case 799:
#line 2828 "parse.y"
    { poplevel_expand (0); ;}
    break;

  case 800:
#line 2833 "parse.y"
    {
#ifndef EGCS97
        push_obstacks_nochange ();
        end_temporary_allocation ();
#endif
      ;}
    break;

  case 801:
#line 2843 "parse.y"
    { lex_const_equal = 0; ;}
    break;

  case 802:
#line 2848 "parse.y"
    { ASSERT_ID (yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (0)].yystate.yyloc, p_protected); ;}
    break;

  case 803:
#line 2853 "parse.y"
    { yyerrok; ;}
    break;

  case 804:
#line 2855 "parse.y"
    { yyerrok; ;}
    break;

  case 813:
#line 2877 "parse.y"
    { error ("missing `)'"); ;}
    break;

  case 815:
#line 2883 "parse.y"
    { warning ("missing `.' at the end of program/unit/module"); ;}
    break;

  case 816:
#line 2888 "parse.y"
    { (*yyvalp).ttype = NULL_TREE; ;}
    break;

  case 817:
#line 2893 "parse.y"
    { (*yyvalp).ttype = error_mark_node; ;}
    break;


    }

  return yyok;
# undef yyerrok
# undef YYABORT
# undef YYACCEPT
# undef YYERROR
# undef YYBACKUP
# undef yyclearin
# undef YYRECOVERING
/* Line 764 of glr.c.  */
#line 7835 "parse.c"
}


static YYSTYPE
yyuserMerge (int yyn, YYSTYPE* yy0, YYSTYPE* yy1)
{
  YYSTYPE yyval;
  yyval = *yy0;
  /* `Use' the arguments.  */
  (void) yy0;
  (void) yy1;

  switch (yyn)
    {
      
    }
  return yyval;
}

			      /* Bison grammar-table manipulation.  */

/*-----------------------------------------------.
| Release the memory associated to this symbol.  |
`-----------------------------------------------*/

static void
yydestruct (int yytype, YYSTYPE *yyvaluep, YYLTYPE *yylocationp)
{
  /* Pacify ``unused variable'' warnings.  */
  (void) yyvaluep;
  (void) yylocationp;

  switch (yytype)
    {

      default:
        break;
    }
}

/** Number of symbols composing the right hand side of rule #RULE. */
static inline int
yyrhsLength (yyRuleNum yyrule)
{
  return yyr2[yyrule];
}

/** Left-hand-side symbol for rule #RULE. */
static inline yySymbol
yylhsNonterm (yyRuleNum yyrule)
{
  return yyr1[yyrule];
}

#define yyis_pact_ninf(yystate) \
  ((yystate) == YYPACT_NINF)

/** True iff LR state STATE has only a default reduction (regardless
 *  of token). */
static inline yybool
yyisDefaultedState (yyStateNum yystate)
{
  return yyis_pact_ninf (yypact[yystate]);
}

/** The default reduction for STATE, assuming it has one. */
static inline yyRuleNum
yydefaultAction (yyStateNum yystate)
{
  return yydefact[yystate];
}

#define yyis_table_ninf(yytable_value) \
  0

/** Set *YYACTION to the action to take in YYSTATE on seeing YYTOKEN.
 *  Result R means
 *    R < 0:  Reduce on rule -R.
 *    R = 0:  Error.
 *    R > 0:  Shift to state R.
 *  Set *CONFLICTS to a pointer into yyconfl to 0-terminated list of
 *  conflicting reductions.
 */
static inline void
yygetLRActions (yyStateNum yystate, int yytoken,
	        int* yyaction, const short** yyconflicts)
{
  int yyindex = yypact[yystate] + yytoken;
  if (yyindex < 0 || YYLAST < yyindex || yycheck[yyindex] != yytoken)
    {
      *yyaction = -yydefact[yystate];
      *yyconflicts = yyconfl;
    }
  else if (! yyis_table_ninf (yytable[yyindex]))
    {
      *yyaction = yytable[yyindex];
      *yyconflicts = yyconfl + yyconflp[yyindex];
    }
  else
    {
      *yyaction = 0;
      *yyconflicts = yyconfl + yyconflp[yyindex];
    }
}

static inline yyStateNum
yyLRgotoState (yyStateNum yystate, yySymbol yylhs)
{
  int yyr;
  yyr = yypgoto[yylhs - YYNTOKENS] + yystate;
  if (0 <= yyr && yyr <= YYLAST && yycheck[yyr] == yystate)
    return yytable[yyr];
  else
    return yydefgoto[yylhs - YYNTOKENS];
}

static inline yybool
yyisShiftAction (int yyaction)
{
  return 0 < yyaction;
}

static inline yybool
yyisErrorAction (int yyaction)
{
  return yyaction == 0;
}

				/* GLRStates */

static void
yyaddDeferredAction (yyGLRStack* yystack, yyGLRState* yystate,
		     yyGLRState* rhs, yyRuleNum yyrule)
{
  yySemanticOption* yynewItem;
  yynewItem = &yystack->yynextFree->yyoption;
  yystack->yyspaceLeft -= 1;
  yystack->yynextFree += 1;
  yynewItem->yyisState = yyfalse;
  yynewItem->yystate = rhs;
  yynewItem->yyrule = yyrule;
  yynewItem->yynext = yystate->yysemantics.yyfirstVal;
  yystate->yysemantics.yyfirstVal = yynewItem;
  if (yystack->yyspaceLeft < YYHEADROOM)
    yyexpandGLRStack (yystack);
}

				/* GLRStacks */

/** Initialize SET to a singleton set containing an empty stack. */
static void
yyinitStateSet (yyGLRStateSet* yyset)
{
  yyset->yysize = 1;
  yyset->yycapacity = 16;
  yyset->yystates = (yyGLRState**) YYMALLOC (16 * sizeof (yyset->yystates[0]));
  yyset->yystates[0] = NULL;
}

static void yyfreeStateSet (yyGLRStateSet* yyset)
{
  YYFREE (yyset->yystates);
}

/** Initialize STACK to a single empty stack, with total maximum
 *  capacity for all stacks of SIZE. */
static void
yyinitGLRStack (yyGLRStack* yystack, size_t yysize)
{
  yystack->yyerrflag = 0;
  yystack->yyerrState = 0;
  yynerrs = 0;
  yystack->yyspaceLeft = yysize;
  yystack->yynextFree = yystack->yyitems =
    (yyGLRStackItem*) YYMALLOC (yysize * sizeof (yystack->yynextFree[0]));
  yystack->yysplitPoint = NULL;
  yystack->yylastDeleted = NULL;
  yyinitStateSet (&yystack->yytops);
}

#define YYRELOC(YYFROMITEMS,YYTOITEMS,YYX,YYTYPE) \
  &((YYTOITEMS) - ((YYFROMITEMS) - (yyGLRStackItem*) (YYX)))->YYTYPE

/** If STACK is expandable, extend it.  WARNING: Pointers into the
    stack from outside should be considered invalid after this call.
    We always expand when there are 1 or fewer items left AFTER an
    allocation, so that we can avoid having external pointers exist
    across an allocation. */
static void
yyexpandGLRStack (yyGLRStack* yystack)
{
#if YYSTACKEXPANDABLE
  yyGLRStack yynewStack;
  yyGLRStackItem* yyp0, *yyp1;
  size_t yysize, yynewSize;
  size_t yyn;
  yysize = yystack->yynextFree - yystack->yyitems;
  if (YYMAXDEPTH <= yysize)
    yyFail (yystack, "parser stack overflow");
  yynewSize = 2*yysize;
  if (YYMAXDEPTH < yynewSize)
    yynewSize = YYMAXDEPTH;
  yyinitGLRStack (&yynewStack, yynewSize);
  for (yyp0 = yystack->yyitems, yyp1 = yynewStack.yyitems, yyn = yysize;
       0 < yyn;
       yyn -= 1, yyp0 += 1, yyp1 += 1)
    {
      *yyp1 = *yyp0;
      if (*(yybool *) yyp0)
	{
	  yyGLRState* yys0 = &yyp0->yystate;
	  yyGLRState* yys1 = &yyp1->yystate;
	  if (yys0->yypred != NULL)
	    yys1->yypred =
	      YYRELOC (yyp0, yyp1, yys0->yypred, yystate);
	  if (! yys0->yyresolved && yys0->yysemantics.yyfirstVal != NULL)
	    yys1->yysemantics.yyfirstVal =
	      YYRELOC(yyp0, yyp1, yys0->yysemantics.yyfirstVal, yyoption);
	}
      else
	{
	  yySemanticOption* yyv0 = &yyp0->yyoption;
	  yySemanticOption* yyv1 = &yyp1->yyoption;
	  if (yyv0->yystate != NULL)
	    yyv1->yystate = YYRELOC (yyp0, yyp1, yyv0->yystate, yystate);
	  if (yyv0->yynext != NULL)
	    yyv1->yynext = YYRELOC (yyp0, yyp1, yyv0->yynext, yyoption);
	}
    }
  if (yystack->yysplitPoint != NULL)
    yystack->yysplitPoint = YYRELOC (yystack->yyitems, yynewStack.yyitems,
				 yystack->yysplitPoint, yystate);

  for (yyn = 0; yyn < yystack->yytops.yysize; yyn += 1)
    if (yystack->yytops.yystates[yyn] != NULL)
      yystack->yytops.yystates[yyn] =
	YYRELOC (yystack->yyitems, yynewStack.yyitems,
		 yystack->yytops.yystates[yyn], yystate);
  YYFREE (yystack->yyitems);
  yystack->yyitems = yynewStack.yyitems;
  yystack->yynextFree = yynewStack.yynextFree + yysize;
  yystack->yyspaceLeft = yynewStack.yyspaceLeft - yysize;

#else

  yyFail (yystack, "parser stack overflow");
#endif
}

static void
yyfreeGLRStack (yyGLRStack* yystack)
{
  YYFREE (yystack->yyitems);
  yyfreeStateSet (&yystack->yytops);
}

/** Assuming that S is a GLRState somewhere on STACK, update the
 *  splitpoint of STACK, if needed, so that it is at least as deep as
 *  S. */
static inline void
yyupdateSplit (yyGLRStack* yystack, yyGLRState* yys)
{
  if (yystack->yysplitPoint != NULL && yystack->yysplitPoint > yys)
    yystack->yysplitPoint = yys;
}

/** Invalidate stack #K in STACK. */
static inline void
yymarkStackDeleted (yyGLRStack* yystack, int yyk)
{
  if (yystack->yytops.yystates[yyk] != NULL)
    yystack->yylastDeleted = yystack->yytops.yystates[yyk];
  yystack->yytops.yystates[yyk] = NULL;
}

/** Undelete the last stack that was marked as deleted.  Can only be
    done once after a deletion, and only when all other stacks have
    been deleted. */
static void
yyundeleteLastStack (yyGLRStack* yystack)
{
  if (yystack->yylastDeleted == NULL || yystack->yytops.yysize != 0)
    return;
  yystack->yytops.yystates[0] = yystack->yylastDeleted;
  yystack->yytops.yysize = 1;
  YYDPRINTF ((stderr, "Restoring last deleted stack as stack #0.\n"));
  yystack->yylastDeleted = NULL;
}

static inline void
yyremoveDeletes (yyGLRStack* yystack)
{
  size_t yyi, yyj;
  yyi = yyj = 0;
  while (yyj < yystack->yytops.yysize)
    {
      if (yystack->yytops.yystates[yyi] == NULL)
	{
	  if (yyi == yyj)
	    {
	      YYDPRINTF ((stderr, "Removing dead stacks.\n"));
	    }
	  yystack->yytops.yysize -= 1;
	}
      else
	{
	  yystack->yytops.yystates[yyj] = yystack->yytops.yystates[yyi];
	  if (yyj != yyi)
	    {
	      YYDPRINTF ((stderr, "Rename stack %lu -> %lu.\n",
			  (unsigned long int) yyi, (unsigned long int) yyj));
	    }
	  yyj += 1;
	}
      yyi += 1;
    }
}

/** Shift to a new state on stack #K of STACK, corresponding to LR state
 * LRSTATE, at input position POSN, with (resolved) semantic value SVAL. */
static inline void
yyglrShift (yyGLRStack* yystack, int yyk, yyStateNum yylrState, size_t yyposn,
	    YYSTYPE yysval, YYLTYPE* yylocp)
{
  yyGLRStackItem* yynewItem;

  yynewItem = yystack->yynextFree;
  yystack->yynextFree += 1;
  yystack->yyspaceLeft -= 1;
  yynewItem->yystate.yyisState = yytrue;
  yynewItem->yystate.yylrState = yylrState;
  yynewItem->yystate.yyposn = yyposn;
  yynewItem->yystate.yyresolved = yytrue;
  yynewItem->yystate.yypred = yystack->yytops.yystates[yyk];
  yystack->yytops.yystates[yyk] = &yynewItem->yystate;
  yynewItem->yystate.yysemantics.yysval = yysval;
  yynewItem->yystate.yyloc = *yylocp;
  if (yystack->yyspaceLeft < YYHEADROOM)
    yyexpandGLRStack (yystack);
}

/** Shift stack #K of YYSTACK, to a new state corresponding to LR
 *  state YYLRSTATE, at input position YYPOSN, with the (unresolved)
 *  semantic value of YYRHS under the action for YYRULE. */
static inline void
yyglrShiftDefer (yyGLRStack* yystack, int yyk, yyStateNum yylrState,
		 size_t yyposn, yyGLRState* rhs, yyRuleNum yyrule)
{
  yyGLRStackItem* yynewItem;

  yynewItem = yystack->yynextFree;
  yynewItem->yystate.yyisState = yytrue;
  yynewItem->yystate.yylrState = yylrState;
  yynewItem->yystate.yyposn = yyposn;
  yynewItem->yystate.yyresolved = yyfalse;
  yynewItem->yystate.yypred = yystack->yytops.yystates[yyk];
  yynewItem->yystate.yysemantics.yyfirstVal = NULL;
  yystack->yytops.yystates[yyk] = &yynewItem->yystate;
  yystack->yynextFree += 1;
  yystack->yyspaceLeft -= 1;
  yyaddDeferredAction (yystack, &yynewItem->yystate, rhs, yyrule);
}

/** Pop the symbols consumed by reduction #RULE from the top of stack
 *  #K of STACK, and perform the appropriate semantic action on their
 *  semantic values.  Assumes that all ambiguities in semantic values
 *  have been previously resolved. Set *VALP to the resulting value,
 *  and *LOCP to the computed location (if any).  Return value is as
 *  for userAction. */
static inline YYRESULTTAG
yydoAction (yyGLRStack* yystack, int yyk, yyRuleNum yyrule,
 	    YYSTYPE* yyvalp, YYLTYPE* yylocp)
{
  int yynrhs = yyrhsLength (yyrule);

  if (yystack->yysplitPoint == NULL)
    {
      /* Standard special case: single stack. */
      yyGLRStackItem* rhs = (yyGLRStackItem*) yystack->yytops.yystates[yyk];
      YYASSERT (yyk == 0);
      yystack->yynextFree -= yynrhs;
      yystack->yyspaceLeft += yynrhs;
      yystack->yytops.yystates[0] = & yystack->yynextFree[-1].yystate;
      return yyuserAction (yyrule, yynrhs, rhs,
			   yyvalp, yylocp, yystack);
    }
  else
    {
      int yyi;
      yyGLRState* yys;
      yyGLRStackItem yyrhsVals[YYMAXRHS + YYMAXLEFT + 1];
      yys = yyrhsVals[YYMAXRHS + YYMAXLEFT].yystate.yypred 
	= yystack->yytops.yystates[yyk];
      for (yyi = 0; yyi < yynrhs; yyi += 1)
	{
	  yys = yys->yypred;
	  YYASSERT (yys);
	}
      yyupdateSplit (yystack, yys);
      yystack->yytops.yystates[yyk] = yys;
      return yyuserAction (yyrule, yynrhs, yyrhsVals + YYMAXRHS + YYMAXLEFT - 1,
			   yyvalp, yylocp, yystack);
    }
}

#if !YYDEBUG
# define YY_REDUCE_PRINT(K, Rule)
#else
# define YY_REDUCE_PRINT(K, Rule)	\
do {					\
  if (yydebug)				\
    yy_reduce_print (K, Rule);		\
} while (0)

/*----------------------------------------------------------.
| Report that the RULE is going to be reduced on stack #K.  |
`----------------------------------------------------------*/

static inline void
yy_reduce_print (size_t yyk, yyRuleNum yyrule)
{
  int yyi;
  YYFPRINTF (stderr, "Reducing stack %lu by rule %d (line %lu), ",
	     (unsigned long int) yyk, yyrule - 1,
	     (unsigned long int) yyrline[yyrule]);
  /* Print the symbols being reduced, and their result.  */
  for (yyi = yyprhs[yyrule]; 0 <= yyrhs[yyi]; yyi++)
    YYFPRINTF (stderr, "%s ", yytokenName (yyrhs[yyi]));
  YYFPRINTF (stderr, "-> %s\n", yytokenName (yyr1[yyrule]));
}
#endif

/** Pop items off stack #K of STACK according to grammar rule RULE,
 *  and push back on the resulting nonterminal symbol.  Perform the
 *  semantic action associated with RULE and store its value with the
 *  newly pushed state, if FORCEEVAL or if STACK is currently
 *  unambiguous.  Otherwise, store the deferred semantic action with
 *  the new state.  If the new state would have an identical input
 *  position, LR state, and predecessor to an existing state on the stack,
 *  it is identified with that existing state, eliminating stack #K from
 *  the STACK. In this case, the (necessarily deferred) semantic value is
 *  added to the options for the existing state's semantic value.
 */
static inline YYRESULTTAG
yyglrReduce (yyGLRStack* yystack, size_t yyk, yyRuleNum yyrule,
             yybool yyforceEval)
{
  size_t yyposn = yystack->yytops.yystates[yyk]->yyposn;

  if (yyforceEval || yystack->yysplitPoint == NULL)
    {
      YYSTYPE yysval;
      YYLTYPE yyloc;

      YY_REDUCE_PRINT (yyk, yyrule);
      YYCHK (yydoAction (yystack, yyk, yyrule, &yysval, &yyloc));
      yyglrShift (yystack, yyk,
		  yyLRgotoState (yystack->yytops.yystates[yyk]->yylrState,
				 yylhsNonterm (yyrule)),
		  yyposn, yysval, &yyloc);
    }
  else
    {
      size_t yyi;
      int yyn;
      yyGLRState* yys, *yys0 = yystack->yytops.yystates[yyk];
      yyStateNum yynewLRState;

      for (yys = yystack->yytops.yystates[yyk], yyn = yyrhsLength (yyrule);
	   0 < yyn; yyn -= 1)
	{
	  yys = yys->yypred;
	  YYASSERT (yys);
	}
      yyupdateSplit (yystack, yys);
      yynewLRState = yyLRgotoState (yys->yylrState, yylhsNonterm (yyrule));
      YYDPRINTF ((stderr,
        "Reduced stack %lu by rule #%d; action deferred. Now in state %d.\n",
		  (unsigned long int) yyk, yyrule - 1, yynewLRState));
      for (yyi = 0; yyi < yystack->yytops.yysize; yyi += 1)
	if (yyi != yyk && yystack->yytops.yystates[yyi] != NULL)
	  {
	    yyGLRState* yyp, *yysplit = yystack->yysplitPoint;
	    yyp = yystack->yytops.yystates[yyi];
	    while (yyp != yys && yyp != yysplit && yyp->yyposn >= yyposn)
	      {
		if (yyp->yylrState == yynewLRState && yyp->yypred == yys)
		  {
		    yyaddDeferredAction (yystack, yyp, yys0, yyrule);
		    yymarkStackDeleted (yystack, yyk);
		    YYDPRINTF ((stderr, "Merging stack %lu into stack %lu.\n",
				(unsigned long int) yyk,
				(unsigned long int) yyi));
		    return yyok;
		  }
		yyp = yyp->yypred;
	      }
	  }
      yystack->yytops.yystates[yyk] = yys;
      yyglrShiftDefer (yystack, yyk, yynewLRState, yyposn, yys0, yyrule);
    }
  return yyok;
}

static int
yysplitStack (yyGLRStack* yystack, int yyk)
{
  if (yystack->yysplitPoint == NULL)
    {
      YYASSERT (yyk == 0);
      yystack->yysplitPoint = yystack->yytops.yystates[yyk];
    }
  if (yystack->yytops.yysize >= yystack->yytops.yycapacity)
    {
      yystack->yytops.yycapacity *= 2;
      yystack->yytops.yystates =
	(yyGLRState**) YYREALLOC (yystack->yytops.yystates,
				yystack->yytops.yycapacity
				* sizeof (yyGLRState*));
    }
  yystack->yytops.yystates[yystack->yytops.yysize]
    = yystack->yytops.yystates[yyk];
  yystack->yytops.yysize += 1;
  return yystack->yytops.yysize-1;
}

/** True iff Y0 and Y1 represent identical options at the top level.
 *  That is, they represent the same rule applied to RHS symbols
 *  that produce the same terminal symbols. */
static yybool
yyidenticalOptions (yySemanticOption* yyy0, yySemanticOption* yyy1)
{
  if (yyy0->yyrule == yyy1->yyrule)
    {
      yyGLRState *yys0, *yys1;
      int yyn;
      for (yys0 = yyy0->yystate, yys1 = yyy1->yystate,
	   yyn = yyrhsLength (yyy0->yyrule);
	   yyn > 0;
	   yys0 = yys0->yypred, yys1 = yys1->yypred, yyn -= 1)
	if (yys0->yyposn != yys1->yyposn)
	  return yyfalse;
      return yytrue;
    }
  else
    return yyfalse;
}

/** Assuming identicalOptions (Y0,Y1), (destructively) merge the
 *  alternative semantic values for the RHS-symbols of Y1 into the
 *  corresponding semantic value sets of the symbols of Y0. */
static void
yymergeOptionSets (yySemanticOption* yyy0, yySemanticOption* yyy1)
{
  yyGLRState *yys0, *yys1;
  int yyn;
  for (yys0 = yyy0->yystate, yys1 = yyy1->yystate,
       yyn = yyrhsLength (yyy0->yyrule);
       yyn > 0;
       yys0 = yys0->yypred, yys1 = yys1->yypred, yyn -= 1)
    if (yys0 == yys1)
      break;
    else if (! yys0->yyresolved && ! yys1->yyresolved)
      {
	yySemanticOption* yyz;
	for (yyz = yys0->yysemantics.yyfirstVal; yyz->yynext != NULL;
	     yyz = yyz->yynext)
	  continue;
	yyz->yynext = yys1->yysemantics.yyfirstVal;
      }
}

/** Y0 and Y1 represent two possible actions to take in a given
 *  parsing state; return 0 if no combination is possible,
 *  1 if user-mergeable, 2 if Y0 is preferred, 3 if Y1 is preferred. */
static int
yypreference (yySemanticOption* y0, yySemanticOption* y1)
{
  yyRuleNum r0 = y0->yyrule, r1 = y1->yyrule;
  int p0 = yydprec[r0], p1 = yydprec[r1];

  if (p0 == p1)
    {
      if (yymerger[r0] == 0 || yymerger[r0] != yymerger[r1])
	return 0;
      else
	return 1;
    }
  if (p0 == 0 || p1 == 0)
    return 0;
  if (p0 < p1)
    return 3;
  if (p1 < p0)
    return 2;
  return 0;
}

static YYRESULTTAG yyresolveValue (yySemanticOption* yyoptionList,
				   yyGLRStack* yystack, YYSTYPE* yyvalp,
				   YYLTYPE* yylocp);

static YYRESULTTAG
yyresolveStates (yyGLRState* yys, int yyn, yyGLRStack* yystack)
{
  YYRESULTTAG yyflag;
  if (0 < yyn)
    {
      YYASSERT (yys->yypred);
      yyflag = yyresolveStates (yys->yypred, yyn-1, yystack);
      if (yyflag != yyok)
	return yyflag;
      if (! yys->yyresolved)
	{
	  yyflag = yyresolveValue (yys->yysemantics.yyfirstVal, yystack,
				   &yys->yysemantics.yysval, &yys->yyloc
				  );
	  if (yyflag != yyok)
	    return yyflag;
	  yys->yyresolved = yytrue;
	}
    }
  return yyok;
}

static YYRESULTTAG
yyresolveAction (yySemanticOption* yyopt, yyGLRStack* yystack,
	         YYSTYPE* yyvalp, YYLTYPE* yylocp)
{
  yyGLRStackItem yyrhsVals[YYMAXRHS + YYMAXLEFT + 1];
  int yynrhs;

  yynrhs = yyrhsLength (yyopt->yyrule);
  YYCHK (yyresolveStates (yyopt->yystate, yynrhs, yystack));
  yyrhsVals[YYMAXRHS + YYMAXLEFT].yystate.yypred = yyopt->yystate;
  return yyuserAction (yyopt->yyrule, yynrhs, 
		       yyrhsVals + YYMAXRHS + YYMAXLEFT - 1,
		       yyvalp, yylocp, yystack);
}

#if YYDEBUG
static void
yyreportTree (yySemanticOption* yyx, int yyindent)
{
  int yynrhs = yyrhsLength (yyx->yyrule);
  int yyi;
  yyGLRState* yys;
  yyGLRState* yystates[YYMAXRHS];
  yyGLRState yyleftmost_state;

  for (yyi = yynrhs, yys = yyx->yystate; 0 < yyi; yyi -= 1, yys = yys->yypred)
    yystates[yyi] = yys;
  if (yys == NULL)
    {
      yyleftmost_state.yyposn = 0;
      yystates[0] = &yyleftmost_state;
    }
  else
    yystates[0] = yys;

  if (yyx->yystate->yyposn < yys->yyposn + 1)
    YYFPRINTF (stderr, "%*s%s -> <Rule %d, empty>\n",
	       yyindent, "", yytokenName (yylhsNonterm (yyx->yyrule)),
	       yyx->yyrule);
  else
    YYFPRINTF (stderr, "%*s%s -> <Rule %d, tokens %lu .. %lu>\n",
	       yyindent, "", yytokenName (yylhsNonterm (yyx->yyrule)),
	       yyx->yyrule, (unsigned long int) (yys->yyposn + 1),
	       (unsigned long int) yyx->yystate->yyposn);
  for (yyi = 1; yyi <= yynrhs; yyi += 1)
    {
      if (yystates[yyi]->yyresolved)
	{
	  if (yystates[yyi-1]->yyposn+1 > yystates[yyi]->yyposn)
	    YYFPRINTF (stderr, "%*s%s <empty>\n", yyindent+2, "",
		       yytokenName (yyrhs[yyprhs[yyx->yyrule]+yyi-1]));
	  else
	    YYFPRINTF (stderr, "%*s%s <tokens %lu .. %lu>\n", yyindent+2, "",
		       yytokenName (yyrhs[yyprhs[yyx->yyrule]+yyi-1]),
		       (unsigned long int) (yystates[yyi - 1]->yyposn + 1),
		       (unsigned long int) yystates[yyi]->yyposn);
	}
      else
	yyreportTree (yystates[yyi]->yysemantics.yyfirstVal, yyindent+2);
    }
}
#endif

static void
yyreportAmbiguity (yySemanticOption* yyx0, yySemanticOption* yyx1,
		   yyGLRStack* yystack)
{
  /* `Unused' warnings.  */
  (void) yyx0;
  (void) yyx1;

#if YYDEBUG
  YYFPRINTF (stderr, "Ambiguity detected.\n");
  YYFPRINTF (stderr, "Option 1,\n");
  yyreportTree (yyx0, 2);
  YYFPRINTF (stderr, "\nOption 2,\n");
  yyreportTree (yyx1, 2);
  YYFPRINTF (stderr, "\n");
#endif
  yyFail (yystack, "ambiguity detected");
}


/** Resolve the ambiguity represented by OPTIONLIST, perform the indicated
 *  actions, and return the result. */
static YYRESULTTAG
yyresolveValue (yySemanticOption* yyoptionList, yyGLRStack* yystack,
		YYSTYPE* yyvalp, YYLTYPE* yylocp)
{
  yySemanticOption* yybest;
  yySemanticOption* yyp;
  int yymerge;

  yybest = yyoptionList;
  yymerge = 0;
  for (yyp = yyoptionList->yynext; yyp != NULL; yyp = yyp->yynext)
    {
      if (yyidenticalOptions (yybest, yyp))
	yymergeOptionSets (yybest, yyp);
      else
	switch (yypreference (yybest, yyp))
	  {
	  case 0:
	    yyreportAmbiguity (yybest, yyp, yystack);
	    break;
	  case 1:
	    yymerge = 1;
	    break;
	  case 2:
	    break;
	  case 3:
	    yybest = yyp;
	    yymerge = 0;
	    break;
	  }
    }

  if (yymerge)
    {
      int yyprec = yydprec[yybest->yyrule];
      YYCHK (yyresolveAction (yybest, yystack, yyvalp, yylocp));
      for (yyp = yybest->yynext; yyp != NULL; yyp = yyp->yynext)
	{
	  if (yyprec == yydprec[yyp->yyrule])
	    {
	      YYSTYPE yyval1;
	      YYLTYPE yydummy;
	      YYCHK (yyresolveAction (yyp, yystack, &yyval1, &yydummy));
	      *yyvalp = yyuserMerge (yymerger[yyp->yyrule], yyvalp, &yyval1);
	    }
	}
      return yyok;
    }
  else
    return yyresolveAction (yybest, yystack, yyvalp, yylocp);
}

static YYRESULTTAG
yyresolveStack (yyGLRStack* yystack)
{
  if (yystack->yysplitPoint != NULL)
    {
      yyGLRState* yys;
      int yyn;

      for (yyn = 0, yys = yystack->yytops.yystates[0];
	   yys != yystack->yysplitPoint;
	   yys = yys->yypred, yyn += 1)
	continue;
      YYCHK (yyresolveStates (yystack->yytops.yystates[0], yyn, yystack
			     ));
    }
  return yyok;
}

static void
yycompressStack (yyGLRStack* yystack)
{
  yyGLRState* yyp, *yyq, *yyr;

  if (yystack->yytops.yysize != 1 || yystack->yysplitPoint == NULL)
    return;

  for (yyp = yystack->yytops.yystates[0], yyq = yyp->yypred, yyr = NULL;
       yyp != yystack->yysplitPoint;
       yyr = yyp, yyp = yyq, yyq = yyp->yypred)
    yyp->yypred = yyr;

  yystack->yyspaceLeft += yystack->yynextFree - yystack->yyitems;
  yystack->yynextFree = ((yyGLRStackItem*) yystack->yysplitPoint) + 1;
  yystack->yyspaceLeft -= yystack->yynextFree - yystack->yyitems;
  yystack->yysplitPoint = NULL;
  yystack->yylastDeleted = NULL;

  while (yyr != NULL)
    {
      yystack->yynextFree->yystate = *yyr;
      yyr = yyr->yypred;
      yystack->yynextFree->yystate.yypred = & yystack->yynextFree[-1].yystate;
      yystack->yytops.yystates[0] = &yystack->yynextFree->yystate;
      yystack->yynextFree += 1;
      yystack->yyspaceLeft -= 1;
    }
}

static YYRESULTTAG
yyprocessOneStack (yyGLRStack* yystack, int yyk,
	           size_t yyposn, YYSTYPE* yylvalp, YYLTYPE* yyllocp
		  )
{
  int yyaction;
  const short* yyconflicts;
  yyRuleNum yyrule;
  yySymbol* const yytokenp = yystack->yytokenp;

  while (yystack->yytops.yystates[yyk] != NULL)
    {
      yyStateNum yystate = yystack->yytops.yystates[yyk]->yylrState;
      YYDPRINTF ((stderr, "Stack %d Entering state %d\n", yyk, yystate));

      YYASSERT (yystate != YYFINAL);

      if (yyisDefaultedState (yystate))
	{
	  yyrule = yydefaultAction (yystate);
	  if (yyrule == 0)
	    {
	      YYDPRINTF ((stderr, "Stack %d dies.\n", yyk));
	      yymarkStackDeleted (yystack, yyk);
	      return yyok;
	    }
	  YYCHK (yyglrReduce (yystack, yyk, yyrule, yyfalse));
	}
      else
	{
	  if (*yytokenp == YYEMPTY)
	    {
	      YYDPRINTF ((stderr, "Reading a token: "));
	      yychar = YYLEX;
	      *yytokenp = YYTRANSLATE (yychar);
	      YYDSYMPRINTF ("Next token is", *yytokenp, yylvalp, yyllocp);
	    }
	  yygetLRActions (yystate, *yytokenp, &yyaction, &yyconflicts);

	  while (*yyconflicts != 0)
	    {
	      int yynewStack = yysplitStack (yystack, yyk);
	      YYDPRINTF ((stderr, "Splitting off stack %d from %d.\n",
			  yynewStack, yyk));
	      YYCHK (yyglrReduce (yystack, yynewStack,
				  *yyconflicts, yyfalse));
	      YYCHK (yyprocessOneStack (yystack, yynewStack, yyposn,
					yylvalp, yyllocp));
	      yyconflicts += 1;
	    }

	  if (yyisShiftAction (yyaction))
	    {
	      YYDPRINTF ((stderr, "Shifting token %s on stack %d, ",
			  yytokenName (*yytokenp), yyk));
	      yyglrShift (yystack, yyk, yyaction, yyposn+1,
			  *yylvalp, yyllocp);
	      YYDPRINTF ((stderr, "which is now in state #%d\n",
			  yystack->yytops.yystates[yyk]->yylrState));
	      break;
	    }
	  else if (yyisErrorAction (yyaction))
	    {
	      YYDPRINTF ((stderr, "Stack %d dies.\n", yyk));
	      yymarkStackDeleted (yystack, yyk);
	      break;
	    }
	  else
	    YYCHK (yyglrReduce (yystack, yyk, -yyaction, yyfalse));
	}
    }
  return yyok;
}

static void
yyreportSyntaxError (yyGLRStack* yystack,
		     YYSTYPE* yylvalp, YYLTYPE* yyllocp)
{
  /* `Unused' warnings. */
  (void) yylvalp;
  (void) yyllocp;

  if (yystack->yyerrState == 0)
    {
#if YYERROR_VERBOSE
      yySymbol* const yytokenp = yystack->yytokenp;
      int yyn;
      yyn = yypact[yystack->yytops.yystates[0]->yylrState];
      if (YYPACT_NINF < yyn && yyn < YYLAST)
	{
	  size_t yysize = 0;
	  const char* yyprefix;
	  char* yymsg;
	  int yyx;

	  /* Start YYX at -YYN if negative to avoid negative indexes in
	     YYCHECK.  */
	  int yyxbegin = yyn < 0 ? -yyn : 0;

	  /* Stay within bounds of both yycheck and yytname.  */
	  int yychecklim = YYLAST - yyn;
	  int yyxend = yychecklim < YYNTOKENS ? yychecklim : YYNTOKENS;
	  int yycount = 0;

	  yyprefix = ", expecting ";
	  for (yyx = yyxbegin; yyx < yyxend; ++yyx)
	    if (yycheck[yyx + yyn] == yyx && yyx != YYTERROR)
	      {
		yysize += strlen (yyprefix) + strlen (yytokenName (yyx));
		yycount += 1;
		if (yycount == 5)
		  {
		    yysize = 0;
		    break;
		  }
		yyprefix = " or ";
	      }
	  yysize += (sizeof ("syntax error, unexpected ")
		     + strlen (yytokenName (*yytokenp)));
	  yymsg = (char*) YYSTACK_ALLOC (yysize);
	  if (yymsg != 0)
	    {
	      char* yyp = yymsg;
	      sprintf (yyp, "syntax error, unexpected %s",
		       yytokenName (*yytokenp));
	      yyp += strlen (yyp);
	      if (yycount < 5)
		{
		  yyprefix = ", expecting ";
		  for (yyx = yyxbegin; yyx < yyxend; ++yyx)
		    if (yycheck[yyx + yyn] == yyx && yyx != YYTERROR)
		      {
			sprintf (yyp, "%s%s", yyprefix, yytokenName (yyx));
			yyp += strlen (yyp);
			yyprefix = " or ";
		      }
		}
	      yyerror (yymsg);
	      YYSTACK_FREE (yymsg);
	    }
	  else
	    yyerror ("syntax error; also virtual memory exhausted");
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror ("syntax error");
      yynerrs += 1;
    }
}

/* Recover from a syntax error on YYSTACK, assuming that YYTOKENP,
   YYLVALP, and YYLLOCP point to the syntactic category, semantic
   value, and location of the lookahead.  */
static void
yyrecoverSyntaxError (yyGLRStack* yystack,
		      YYSTYPE* yylvalp, YYLTYPE* yyllocp)
{
  yySymbol* const yytokenp = yystack->yytokenp;
  size_t yyk;
  int yyj;

  if (yystack->yyerrState == 3)
    /* We just shifted the error token and (perhaps) took some
       reductions.  Skip tokens until we can proceed.  */
    while (yytrue)
      {
	if (*yytokenp == YYEOF)
	  {
	    /* Now pop stack until empty and fail. */
	    while (yystack->yytops.yystates[0] != NULL)
	      {
		yyGLRState *yys = yystack->yytops.yystates[0];
		YYDSYMPRINTF ("Error: popping",
			      yystos[yys->yylrState],
			      &yys->yysemantics.yysval, &yys->yyloc);
		yydestruct (yystos[yys->yylrState],
			    &yys->yysemantics.yysval, &yys->yyloc);
		yystack->yytops.yystates[0] = yys->yypred;
		yystack->yynextFree -= 1;
		yystack->yyspaceLeft += 1;
	      }
	    yyFail (yystack, NULL);
	  }
	if (*yytokenp != YYEMPTY)
	  {
	    YYDSYMPRINTF ("Error: discarding", *yytokenp, yylvalp, yyllocp);
	    yydestruct (*yytokenp, yylvalp, yyllocp);
	  }
	YYDPRINTF ((stderr, "Reading a token: "));
	yychar = YYLEX;
	*yytokenp = YYTRANSLATE (yychar);
	YYDSYMPRINTF ("Next token is", *yytokenp, yylvalp, yyllocp);
	yyj = yypact[yystack->yytops.yystates[0]->yylrState];
	if (yyis_pact_ninf (yyj))
	  return;
	yyj += *yytokenp;
	if (yyj < 0 || YYLAST < yyj || yycheck[yyj] != *yytokenp)
	  {
	    if (yydefact[yystack->yytops.yystates[0]->yylrState] != 0)
	      return;
	  }
	else if (yytable[yyj] != 0 && ! yyis_table_ninf (yytable[yyj]))
	  return;
      }

  /* Reduce to one stack.  */
  for (yyk = 0; yyk < yystack->yytops.yysize; yyk += 1)
    if (yystack->yytops.yystates[yyk] != NULL)
      break;
  if (yyk >= yystack->yytops.yysize)
    yyFail (yystack, NULL);
  for (yyk += 1; yyk < yystack->yytops.yysize; yyk += 1)
    yymarkStackDeleted (yystack, yyk);
  yyremoveDeletes (yystack);
  yycompressStack (yystack);

  /* Now pop stack until we find a state that shifts the error token. */
  yystack->yyerrState = 3;
  while (yystack->yytops.yystates[0] != NULL)
    {
      yyGLRState *yys = yystack->yytops.yystates[0];
      yyj = yypact[yys->yylrState];
      if (! yyis_pact_ninf (yyj))
	{
	  yyj += YYTERROR;
	  if (0 <= yyj && yyj <= YYLAST && yycheck[yyj] == YYTERROR
	      && yyisShiftAction (yytable[yyj]))
	    {
	      YYDPRINTF ((stderr, "Shifting error token, "));
	      yyglrShift (yystack, 0, yytable[yyj],
			  yys->yyposn, *yylvalp, yyllocp);
	      break;
	    }
	}
      YYDSYMPRINTF ("Error: popping",
 		    yystos[yys->yylrState],
 		    &yys->yysemantics.yysval, &yys->yyloc);
      yydestruct (yystos[yys->yylrState],
 	          &yys->yysemantics.yysval, &yys->yyloc);
      yystack->yytops.yystates[0] = yys->yypred;
      yystack->yynextFree -= 1;
      yystack->yyspaceLeft += 1;
    }
  if (yystack->yytops.yystates[0] == NULL)
    yyFail (yystack, NULL);
}

#define YYCHK1(YYE)							     \
  do {									     \
    switch (YYE) {							     \
    default:								     \
      break;								     \
    case yyabort:							     \
      yystack.yyerrflag = 1;						     \
      goto yyDone;							     \
    case yyaccept:							     \
      yystack.yyerrflag = 0;						     \
      goto yyDone;							     \
    case yyerr:								     \
      goto yyuser_error;						     \
    }									     \
  } while (0)


/*----------.
| yyparse.  |
`----------*/

int
yyparse (void)
{
  yySymbol yytoken;
  yyGLRStack yystack;
  size_t yyposn;


  YYSTYPE* const yylvalp = &yylval;
  YYLTYPE* const yyllocp = &yylloc;

  yyinitGLRStack (&yystack, YYINITDEPTH);
  yystack.yytokenp = &yytoken;

  YYDPRINTF ((stderr, "Starting parse\n"));

  if (setjmp (yystack.yyexception_buffer) != 0)
    goto yyDone;

  yyglrShift (&yystack, 0, 0, 0, yyval_default, &yyloc_default);
  yytoken = YYEMPTY;
  yyposn = 0;

  while (yytrue)
    {
      /* For efficiency, we have two loops, the first of which is
	 specialized to deterministic operation (single stack, no
	 potential ambiguity).  */
      /* Standard mode */
      while (yytrue)
	{
	  yyRuleNum yyrule;
	  int yyaction;
	  const short* yyconflicts;

	  yyStateNum yystate = yystack.yytops.yystates[0]->yylrState;
          YYDPRINTF ((stderr, "Entering state %d\n", yystate));
	  if (yystate == YYFINAL)
	    goto yyDone;
	  if (yyisDefaultedState (yystate))
	    {
	      yyrule = yydefaultAction (yystate);
	      if (yyrule == 0)
		{
		  yyreportSyntaxError (&yystack, yylvalp, yyllocp);
		  goto yyuser_error;
		}
	      YYCHK1 (yyglrReduce (&yystack, 0, yyrule, yytrue));
	    }
	  else
	    {
	      if (yytoken == YYEMPTY)
		{
		  YYDPRINTF ((stderr, "Reading a token: "));
		  yychar = YYLEX;
		  yytoken = YYTRANSLATE (yychar);
                  YYDSYMPRINTF ("Next token is", yytoken, yylvalp, yyllocp);
		}
	      yygetLRActions (yystate, yytoken, &yyaction, &yyconflicts);
	      if (*yyconflicts != 0)
		break;
	      if (yyisShiftAction (yyaction))
		{
		  YYDPRINTF ((stderr, "Shifting token %s, ",
			      yytokenName (yytoken)));
		  if (yytoken != YYEOF)
		    yytoken = YYEMPTY;
		  yyposn += 1;
		  yyglrShift (&yystack, 0, yyaction, yyposn,
		              yylval, yyllocp);
		  if (0 < yystack.yyerrState)
		    yystack.yyerrState -= 1;
		}
	      else if (yyisErrorAction (yyaction))
		{
		  yyreportSyntaxError (&yystack, yylvalp, yyllocp);
		  goto yyuser_error;
		}
	      else
		YYCHK1 (yyglrReduce (&yystack, 0, -yyaction, yytrue));
	    }
	}

      while (yytrue)
	{
	  int yys;
	  int yyn = yystack.yytops.yysize;
	  for (yys = 0; yys < yyn; yys += 1)
	    YYCHK1 (yyprocessOneStack (&yystack, yys, yyposn,
				       yylvalp, yyllocp));
	  yytoken = YYEMPTY;
	  yyposn += 1;
	  yyremoveDeletes (&yystack);
	  if (yystack.yytops.yysize == 0)
	    {
	      yyundeleteLastStack (&yystack);
	      if (yystack.yytops.yysize == 0)
		yyFail (&yystack, "syntax error");
	      YYCHK1 (yyresolveStack (&yystack));
	      YYDPRINTF ((stderr, "Returning to deterministic operation.\n"));
	      yyreportSyntaxError (&yystack, yylvalp, yyllocp);
	      goto yyuser_error;
	    }
	  else if (yystack.yytops.yysize == 1)
	    {
	      YYCHK1 (yyresolveStack (&yystack));
	      YYDPRINTF ((stderr, "Returning to deterministic operation.\n"));
	      yycompressStack (&yystack);
	      break;
	    }
	}
      continue;
    yyuser_error:
      yyrecoverSyntaxError (&yystack, yylvalp, yyllocp);
      yyposn = yystack.yytops.yystates[0]->yyposn;
    }
 yyDone:
  ;

  yyfreeGLRStack (&yystack);
  return yystack.yyerrflag;
}

/* DEBUGGING ONLY */
static void yypstack (yyGLRStack* yystack, int yyk) ATTRIBUTE_UNUSED;
static void yypdumpstack (yyGLRStack* yystack) ATTRIBUTE_UNUSED;

static void
yy_yypstack (yyGLRState* yys)
{
  if (yys->yypred)
    {
      yy_yypstack (yys->yypred);
      fprintf (stderr, " -> ");
    }
  fprintf (stderr, "%d@@%lu", yys->yylrState, (unsigned long) yys->yyposn);
}

static void
yypstates (yyGLRState* yyst)
{
  if (yyst == NULL)
    fprintf (stderr, "<null>");
  else
    yy_yypstack (yyst);
  fprintf (stderr, "\n");
}

static void
yypstack (yyGLRStack* yystack, int yyk)
{
  yypstates (yystack->yytops.yystates[yyk]);
}

#define YYINDEX(YYX) 							     \
    ((YYX) == NULL ? -1 : (yyGLRStackItem*) (YYX) - yystack->yyitems)


static void
yypdumpstack (yyGLRStack* yystack)
{
  yyGLRStackItem* yyp;
  size_t yyi;
  for (yyp = yystack->yyitems; yyp < yystack->yynextFree; yyp += 1)
    {
      fprintf (stderr, "%3lu. ", (unsigned long) (yyp - yystack->yyitems));
      if (*(yybool *) yyp)
	{
	  fprintf (stderr, "Res: %d, LR State: %d, posn: %lu, pred: %ld",
		   yyp->yystate.yyresolved, yyp->yystate.yylrState,
		   (unsigned long) yyp->yystate.yyposn,
		   (long) YYINDEX (yyp->yystate.yypred));
	  if (! yyp->yystate.yyresolved)
	    fprintf (stderr, ", firstVal: %ld",
		     (long) YYINDEX (yyp->yystate.yysemantics.yyfirstVal));
	}
      else
	{
	  fprintf (stderr, "Option. rule: %d, state: %ld, next: %ld",
		   yyp->yyoption.yyrule,
		   (long) YYINDEX (yyp->yyoption.yystate),
		   (long) YYINDEX (yyp->yyoption.yynext));
	}
      fprintf (stderr, "\n");
    }
  fprintf (stderr, "Tops:");
  for (yyi = 0; yyi < yystack->yytops.yysize; yyi += 1)
    fprintf (stderr, "%lu: %ld; ", (unsigned long) yyi,
	     (long) YYINDEX (yystack->yytops.yystates[yyi]));
  fprintf (stderr, "\n");
}


#line 2896 "parse.y"


/* Lexical analyzer moved to gpc-lex.c */

/* Parser auxiliary routines */

/* Check the order of declarations for various standards */
static int
check_decl_order (prev, new)
     int prev, new;
{
  int prev_decl_order = prev / 2, prev_import = prev & 1;
  if (new == od_none)
    return prev;
  if (new <= prev_decl_order && new < od_routine)
    chk_dialect ("mixed order of declaration parts is", NOT_CLASSIC_PASCAL);
  if (new == od_uses)
    {
      if (prev_import)
        chk_dialect ("multiple `uses' parts are", GNU_PASCAL);
      if (prev_decl_order > od_uses)
        chk_dialect ("`uses' after other declarations is", GNU_PASCAL);
      prev_import = 1;
    }
  return (2 * new) | prev_import;
}

static void
iso_no_parentheses (t)
     tree t;
{
  if (last_parenthesized_expression == t)
    chk_dialect ("superfluous parentheses in this place are", B_D_PASCAL);
}

/* Sets the value of the 'yydebug' variable to VALUE. This is a function
   so we don't have to have YYDEBUG defined in order to build the compiler. */
void
set_yydebug (value)
     int value;
{
#if YYDEBUG != 0
  yydebug = value;
#else
  warning ("YYDEBUG not defined.");
#endif
}

#undef yyparse
int
yyparse ()
{
  init_predef ();
  return main_yyparse ();
}

static void
locations (dest, src, n)
     YYLTYPE *dest;
     /*YYLTYPE*/union yyGLRStackItem *src;
     int n;
{
  int i;
  for (i = n; i > 0 && !YYRHSLOC (src, i).first_line; i--) ;
  if (i == 0)
    {
      input_filename = compiler_filename;
      lineno = compiler_lineno;
      dest->first_file = dest->last_file = NULL;
      dest->first_line = dest->last_line = 0;
    }
  else
    {
      input_filename = compiler_filename = dest->last_file = YYRHSLOC (src, i).last_file;
      lineno = compiler_lineno = dest->last_line = YYRHSLOC (src, i).last_line;
      for (i = 1; i <= n && !YYRHSLOC (src, i).first_line; i++) ;
      dest->first_file = YYRHSLOC (src, i).first_file;
      dest->first_line = YYRHSLOC (src, i).first_line;
      /* This does emit a few line notes too many. But putting line notes in the
         parser in the right places causes some conflicts (especially assignments
         with nontrivial expressions on their left side are problematic). */
      if (current_function_decl)
        emit_line_note (dest->first_file, dest->first_line);
    }
  dest->option_id = 0;
  for (i = 1; i <= n; i++)
    while (YYRHSLOC (src, i).option_id > compiler_options->counter)
      {
        struct options *tmp = compiler_options;
        compiler_options = tmp->next;
        free (tmp);
      }
  if (compiler_options != co)
    activate_options (compiler_options, 0);
}

@


1.4
log
@small warnings fixup
@
text
@d1 1
a1 1
/* $MirBSD$
@


1.3
log
@add these files, generated with GNU bison 1.875
@
text
@d1 5
a5 1
/* A Bison parser, made by GNU Bison 1.875.  */
d8 1
a8 1
   Copyright (C) 2002 Free Software Foundation, Inc.
d340 2
a341 2
/* Line 188 of glr.c.  */
#line 337 "parse.c"
d349 1
d354 1
d371 2
a372 2
/* Line 216 of glr.c.  */
#line 366 "parse.c"
d374 4
a377 4
#if ! defined (__cplusplus)
   typedef char bool;
#  define yytrue 1
#  define yyfalse 0
d379 2
d394 40
d453 3
d934 116
a1049 117
  "$end", "error", "$undefined", "prec_if", "prec_lower_than_error", 
  "prec_import", "p_operator", "p_destructor", "p_constructor", 
  "p_implementation", "p_uses", "p_else", "p_and", "p_array", "p_begin", 
  "p_case", "p_div", "p_do", "p_downto", "p_end", "p_file", "p_for", 
  "p_function", "p_goto", "p_if", "p_in", "p_label", "p_mod", "p_nil", 
  "p_not", "p_of", "p_or", "p_packed", "p_procedure", "p_to", "p_program", 
  "p_record", "p_repeat", "p_set", "p_then", "p_type", "p_until", "p_var", 
  "p_while", "p_with", "p_absolute", "p_abstract", "p_and_then", "p_as", 
  "p_asm", "p_attribute", "p_bindable", "p_const", "p_external", "p_far", 
  "p_finalization", "p_forward", "p_import", "p_inherited", 
  "p_initialization", "p_is", "p_near", "p_object", "p_only", 
  "p_otherwise", "p_or_else", "p_pow", "p_restricted", "p_shl", "p_shr", 
  "p_unit", "p_value", "p_virtual", "p_xor", "p_asmname", "p_c", 
  "p_c_language", "p_Addr", "p_Assigned", "p_Dispose", "p_FormatString", 
  "p_New", "p_Return", "LEX_ID", "LEX_BUILTIN_PROCEDURE", 
  "LEX_BUILTIN_PROCEDURE_WRITE", "LEX_BUILTIN_FUNCTION", 
  "LEX_BUILTIN_FUNCTION_VT", "LEX_BUILTIN_VARIABLE", "LEX_INTCONST", 
  "LEX_INTCONST_BASE", "LEX_STRCONST", "LEX_REALCONST", "LEX_CARET_WHITE", 
  "LEX_CARET_LETTER", "BOGUS", "LEX_CONST_EQUAL", "LEX_RPAR", 
  "LEX_BPPLUS", "LEX_BPMINUS", "LEX_RANGE", "LEX_ELLIPSIS", "LEX_RENAME", 
  "LEX_SYMDIFF", "LEX_ASSIGN", "LEX_NE", "LEX_GE", "LEX_LE", "LEX_POWER", 
  "LEX_CEIL_PLUS", "LEX_CEIL_MINUS", "LEX_FLOOR_PLUS", "LEX_FLOOR_MINUS", 
  "LEX_CEIL_MULT", "LEX_CEIL_DIV", "LEX_FLOOR_MULT", "LEX_FLOOR_DIV", 
  "';'", "'('", "','", "':'", "'^'", "'.'", "')'", "'['", "']'", "'+'", 
  "'-'", "'*'", "'/'", "'<'", "'='", "'>'", "'@@'", "$accept", 
  "program_component", "program_component_1", "@@1", "@@2", 
  "optional_program_heading", "declarations_and_uses", 
  "declaration_or_uses", "any_declaration_part", "any_decl", "@@3", 
  "simple_decl", "simple_decl_1", "@@4", "module_declaration", "@@5", "@@6", 
  "@@7", "@@8", "@@9", "@@10", "interface_module", "@@11", "@@12", 
  "module_interface", "@@13", "implementatation_module", "@@14", 
  "optional_unit_implementation", "module", "optional_module_parameters", 
  "optional_module_attributes", "interface_decl_part", "interface_decl", 
  "implementation_decls", "implementation_decl", "@@15", "module_block", 
  "@@16", "@@17", "optional_init_and_final_part", "module_constructor", 
  "@@18", "module_destructor", "@@19", "rest_of_unit_constructor", "@@20", 
  "optional_unit_init_and_final_part", "@@21", "optional_par_id_list", 
  "id_list", "id_list1", "id_list_limited", "export_part_list", 
  "export_part", "equals_or_error", "export_list_or_all", "export_all", 
  "export_list", "export_list_item", "optional_rename", 
  "optional_import_part", "@@22", "import_specification_list", "uses_part", 
  "uses_list", "import_specification", "optional_access_qualifier", 
  "optional_import_qualifier", "optional_unit_filename", 
  "import_clause_list", "import_clause", "label_list", "new_label", 
  "label", "num_label", "constant_definition_list", "constant_definition", 
  "unsigned_number", "intconst", "constant_literal", "combined_string", 
  "optional_combined_string", "string_constant", "caret_chars", 
  "string_constants", "type_definition_list", "type_definition", "@@23", 
  "@@24", "formal_schema_discriminants", "discriminant_specification_list", 
  "discriminant_specification", "type_denoter_with_attributes", 
  "type_denoter_no_init", "type_denoter", "type_denoter_1", 
  "type_denoter_0", "packed", "typename_or_string255", "typename", 
  "actual_schema_discriminants", "discriminant_expression_list", 
  "new_ordinal_type", "enumerated_type", "conflict_id", "enum_list", 
  "lower_bound", "subrange_type", "new_pointer_type", 
  "pointer_domain_type", "new_procedural_type", 
  "optional_procedural_type_formal_parameter_list", 
  "procedural_type_formal_parameter_list", 
  "procedural_type_formal_parameter", "unpacked_structured_type", 
  "array_type", "array_index_list", "ordinal_index_type", "file_type", 
  "untyped_file", "direct_access_index_type", "set_type", "record_type", 
  "record_field_list", "fixed_part", "record_section", "variant_part", 
  "variant_selector", "new_ordinal_type_non_iso", "rest_of_variant", 
  "variant_list", "variant", "case_constant_list", "one_case_constant", 
  "type_inquiry", "optional_abstract", "object_parent", 
  "object_field_list", "object_field_list_1", "object_section", 
  "variable_declaration_list", "variable_declaration", "@@25", 
  "optional_variable_directive_list", "variable_directive", "@@26", 
  "optional_variable_directive_list_no_external", 
  "variable_directive_no_external", "attributes", "attribute_list", 
  "attrib", "var_init", "optional_value_specification", 
  "absolute_or_value_specification", "@@27", "initializer_expression", 
  "@@28", "initializer_expression_0", "static_initializer_expression", 
  "structured_bp_initializer", "bp_initializer_list", 
  "initializer_separator", "bp_initializer_expression", 
  "structured_iso_initializer", "iso_initializer_list", 
  "iso_initializer_expression", "initializer_field", 
  "routine_interface_decl", "routine_declaration", "@@29", "@@30", 
  "routine_or_method_heading", "routine_heading", "method_heading", 
  "optional_routine_interface_directive_list", "remote_directive_list", 
  "remote_directive", "@@31", "optional_routine_directive_list", 
  "bp_directive", "operator_identifier", "optional_result_def", 
  "optional_result_equals", "operator_result_def", "resulttype", 
  "optional_formal_parameter_list", "formal_parameter_list", 
  "formal_parameter", "fp_routine_heading", "optional_protected", 
  "optional_parameter_form", "parameter_form", "conformant_array", 
  "typename_or_conformant_array", "index_type_specification_list", 
  "index_type_specification", "open_array", "typename_or_untyped_file", 
  "compound_statement", "statement_sequence", "empty_lte", 
  "optional_statement", "statement", "unlabelled_statement", "set_label", 
  "statement_var_decl", "with_statement", "with_list", "with_variable", 
  "simple_if", "@@32", "if_statement", "@@33", "case_statement", "@@34", 
  "@@35", "optional_case_default", "otherwise", "case_element_list", 
  "case_element", "@@36", "repeat_statement", "@@37", "@@38", 
  "while_statement", "@@39", "@@40", "for_statement", "@@41", "@@42", 
  "for_direction", "assignment_or_call_statement", "@@43", 
  "start_of_statement", "rest_of_statement", "assign", 
  "standard_procedure_statement", "@@44", "optional_actual_parameter_list", 
  "@@45", "actual_parameter_list", "write_actual_parameter_list", 
  "write_actual_parameter", "asm_statement", "asm_qualifier", 
  "asm_operands", "nonempty_asm_operands", "asm_operand", "asm_clobbers", 
  "static_expression", "boolean_expression", "expression_no_par", 
  "expression", "simple_expression", "@@46", "@@47", "term", "@@48", "@@49", 
  "factor", "primary", "variable_or_routine_access_no_parentheses", 
  "variable_or_routine_access", 
  "variable_or_routine_access_no_builtin_function", "@@50", "@@51", "@@52", 
  "variable_or_typename", "index_expression_list", 
  "index_expression_item", "set_constructor", 
  "set_constructor_element_list", "member_designator", "sign", 
  "unary_operator", "relational_operator", "adding_operator", 
  "pxsc_adding_operator", "or_else", "multiplying_operator", 
  "pxsc_multiplying_operator", "and_then", "builtin_proc", 
  "operator_symbol", "new_identifier", "new_identifier_1", 
  "new_identifier_limited_par", "new_identifier_limited_par_1", 
  "new_identifier_limited", "new_identifier_limited_1", "identifier", 
  "id", "caret_letter", "pushlevel", "poplevel", "setspecs", "enable_lce", 
  "i_protected", "optional_semicolon", "pointer_char", "equals", "rpar", 
a1051 2

#define yytname_size ((int) (sizeof (yytname) / sizeof (yytname[0])))
d4325 2
a4326 1
#define YYRHSLOC(yyRhs,YYK) (yyRhs[YYK].yystate.yyloc)
d4330 4
a4333 4
  yyCurrent.first_line   = YYRHSLOC(yyRhs,1).first_line;	\
  yyCurrent.first_column = YYRHSLOC(yyRhs,1).first_column;	\
  yyCurrent.last_line    = YYRHSLOC(yyRhs,YYN).last_line;	\
  yyCurrent.last_column  = YYRHSLOC(yyRhs,YYN).last_column;
d4336 2
d4458 2
a4459 1
	 || (YYLTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL)))
d4484 2
a4485 2
  bool yyisState;
  bool yyresolved;
d4502 1
a4502 1
  bool yyisState;
d4540 1
a4540 1
      vsprintf (yymsg, yyformat, yyap);
d4556 37
d4603 2
a4604 2
  /* Avoid `unused' warnings in there are no $n. */
  (void) yystack;
a4605 10
  if (yyrhslen == 0)
    {
      *yyvalp = yyval_default;
      *yylocp = yyloc_default;
    }
  else
    {
      *yyvalp = yyvsp[1-yyrhslen].yystate.yysemantics.yysval;
      *yylocp = yyvsp[1-yyrhslen].yystate.yyloc;
    }
d4613 1
a4613 1
# define YYERROR return yyerr
d4618 2
d4627 12
d4640 3
a4642 3
   switch (yyn)
     {
         case 2:
d4660 1
a4660 1
    { initialize_module (TREE_PURPOSE (yyvsp[-1].yystate.yysemantics.yysval.ttype), build_tree_list (yyvsp[0].yystate.yysemantics.yysval.ttype ? TREE_PURPOSE (yyvsp[0].yystate.yysemantics.yysval.ttype) : NULL_TREE, TREE_VALUE (yyvsp[-1].yystate.yysemantics.yysval.ttype)), 0); ;}
d4685 1
a4685 1
    { (*yyvalp).ttype = build_tree_list (yyvsp[-2].yystate.yysemantics.yysval.ttype, yyvsp[-1].yystate.yysemantics.yysval.ttype); ;}
d4690 1
a4690 1
    { (*yyvalp).ttype = build_tree_list (NULL_TREE, yyvsp[-1].yystate.yysemantics.yysval.ttype); ;}
d4700 1
a4700 1
    { (*yyvalp).itype = check_decl_order (yyvsp[-1].yystate.yysemantics.yysval.itype, yyvsp[0].yystate.yysemantics.yysval.itype); ;}
d4710 1
a4710 1
    { (*yyvalp).itype = check_decl_order (yyvsp[-1].yystate.yysemantics.yysval.itype, yyvsp[0].yystate.yysemantics.yysval.itype); ;}
d4720 1
a4720 1
    { (*yyvalp).itype = yyvsp[0].yystate.yysemantics.yysval.itype; ;}
d4739 1
a4739 1
        (*yyvalp).itype = yyvsp[0].yystate.yysemantics.yysval.itype;
d4765 1
a4765 1
    { ASSERT_ID (yyvsp[0].yystate.yysemantics.yysval.ttype, yyvsp[0].yystate.yyloc, p_interface); initialize_module (yyvsp[-3].yystate.yysemantics.yysval.ttype, yyvsp[-1].yystate.yysemantics.yysval.ttype, 1); ;}
d4794 1
a4794 1
        if (yyvsp[-1].yystate.yysemantics.yysval.ttype && current_module->name != yyvsp[-1].yystate.yysemantics.yysval.ttype)
d4796 1
a4796 1
                 IDENTIFIER_NAME (current_module->name), IDENTIFIER_NAME (yyvsp[-1].yystate.yysemantics.yysval.ttype));
d4802 1
a4802 1
    { initialize_module (yyvsp[-1].yystate.yysemantics.yysval.ttype, yyvsp[0].yystate.yysemantics.yysval.ttype, 2); ;}
d4815 1
a4815 1
    { initialize_module (yyvsp[-1].yystate.yysemantics.yysval.ttype, yyvsp[0].yystate.yysemantics.yysval.ttype, 4); ;}
d4820 1
a4820 1
    { ASSERT_ID (yyvsp[0].yystate.yysemantics.yysval.ttype, yyvsp[0].yystate.yyloc, p_interface); ;}
d4825 1
a4825 1
    { initialize_module (yyvsp[-3].yystate.yysemantics.yysval.ttype, yyvsp[0].yystate.yysemantics.yysval.ttype, 2); ;}
d4835 1
a4835 1
    { ASSERT_ID (yyvsp[0].yystate.yysemantics.yysval.ttype, yyvsp[0].yystate.yyloc, p_export); start_module_interface (); ;}
d4845 1
a4845 1
    { initialize_module (yyvsp[-2].yystate.yysemantics.yysval.ttype, NULL_TREE, 3); ;}
d4860 1
a4860 1
    { ASSERT_ID (yyvsp[0].yystate.yysemantics.yysval.ttype, yyvsp[0].yystate.yyloc, p_module); ;}
d4865 1
a4865 1
    { (*yyvalp).ttype = build_tree_list (yyvsp[0].yystate.yysemantics.yysval.ttype ? TREE_PURPOSE (yyvsp[0].yystate.yysemantics.yysval.ttype) : NULL_TREE, yyvsp[-2].yystate.yysemantics.yysval.ttype); ;}
d4875 1
a4875 1
    { (*yyvalp).itype = check_decl_order (yyvsp[-1].yystate.yysemantics.yysval.itype, yyvsp[0].yystate.yysemantics.yysval.itype); ;}
d4890 1
a4890 1
    { (*yyvalp).itype = check_decl_order (yyvsp[-1].yystate.yysemantics.yysval.itype, yyvsp[0].yystate.yysemantics.yysval.itype); ;}
d4900 1
a4900 1
    { (*yyvalp).itype = yyvsp[0].yystate.yysemantics.yysval.itype; ;}
d4965 1
a4965 1
    { (*yyvalp).ttype = yyvsp[-1].yystate.yysemantics.yysval.ttype; ;}
d4971 1
a4971 1
        tree *a = &yyvsp[0].yystate.yysemantics.yysval.ttype, b;
d4983 1
a4983 1
        (*yyvalp).ttype = nreverse (yyvsp[0].yystate.yysemantics.yysval.ttype);
d4989 1
a4989 1
    { (*yyvalp).ttype = build_tree_list (NULL_TREE, yyvsp[0].yystate.yysemantics.yysval.ttype); ;}
d4994 1
a4994 1
    { (*yyvalp).ttype = tree_cons (NULL_TREE, yyvsp[0].yystate.yysemantics.yysval.ttype, yyvsp[-2].yystate.yysemantics.yysval.ttype); ;}
d5000 2
a5001 2
        (*yyvalp).ttype = tree_cons (NULL_TREE, yyvsp[0].yystate.yysemantics.yysval.ttype, yyvsp[-2].yystate.yysemantics.yysval.ttype);
        error ("comma missing after `%s'", IDENTIFIER_NAME (TREE_VALUE (yyvsp[-2].yystate.yysemantics.yysval.ttype)));
d5013 1
a5013 1
    { (*yyvalp).ttype = build_tree_list (NULL_TREE, yyvsp[0].yystate.yysemantics.yysval.ttype); ;}
d5018 1
a5018 1
    { (*yyvalp).ttype = tree_cons (NULL_TREE, yyvsp[0].yystate.yysemantics.yysval.ttype, yyvsp[-2].yystate.yysemantics.yysval.ttype); ;}
d5043 1
a5043 1
    { export_interface (yyvsp[-2].yystate.yysemantics.yysval.ttype, yyvsp[0].yystate.yysemantics.yysval.ttype); ;}
d5053 1
a5053 1
    { (*yyvalp).ttype = yyvsp[-1].yystate.yysemantics.yysval.ttype; ;}
d5058 1
a5058 1
    { (*yyvalp).ttype = chainon (yyvsp[-3].yystate.yysemantics.yysval.ttype, yyvsp[-1].yystate.yysemantics.yysval.ttype); ;}
d5063 1
a5063 1
    { ASSERT_ID (yyvsp[0].yystate.yysemantics.yysval.ttype, yyvsp[0].yystate.yyloc, p_all); (*yyvalp).ttype = build_tree_list (NULL_TREE, NULL_TREE); ;}
d5068 1
a5068 1
    { (*yyvalp).ttype = chainon (yyvsp[-2].yystate.yysemantics.yysval.ttype, yyvsp[0].yystate.yysemantics.yysval.ttype); ;}
d5088 1
a5088 1
    { (*yyvalp).ttype = build_tree_list (yyvsp[0].yystate.yysemantics.yysval.ttype, yyvsp[-1].yystate.yysemantics.yysval.ttype); ;}
d5093 1
a5093 1
    { (*yyvalp).ttype = build_tree_list (NULL_TREE, build_tree_list (yyvsp[-2].yystate.yysemantics.yysval.ttype, yyvsp[0].yystate.yysemantics.yysval.ttype)); ;}
d5099 1
a5099 1
        (*yyvalp).ttype = build_tree_list (yyvsp[0].yystate.yysemantics.yysval.ttype, yyvsp[-1].yystate.yysemantics.yysval.ttype);
d5106 1
a5106 1
    { (*yyvalp).ttype = yyvsp[0].yystate.yysemantics.yysval.ttype; ;}
d5136 1
a5136 1
    { import_interface (yyvsp[-3].yystate.yysemantics.yysval.ttype, yyvsp[-1].yystate.yysemantics.yysval.ttype, yyvsp[-2].yystate.yysemantics.yysval.itype, yyvsp[0].yystate.yysemantics.yysval.ttype); ;}
d5146 1
a5146 1
    { ASSERT_ID (yyvsp[0].yystate.yysemantics.yysval.ttype, yyvsp[0].yystate.yyloc, p_qualified); (*yyvalp).itype = 1; ;}
d5151 1
a5151 1
    { (*yyvalp).ttype = build_tree_list (NULL_TREE, yyvsp[-1].yystate.yysemantics.yysval.ttype); ;}
d5156 1
a5156 1
    { (*yyvalp).ttype = build_tree_list (yyvsp[-3].yystate.yysemantics.yysval.ttype, yyvsp[-1].yystate.yysemantics.yysval.ttype); ;}
d5161 1
a5161 1
    { (*yyvalp).ttype = yyvsp[0].yystate.yysemantics.yysval.ttype; chk_dialect ("file name specification with `in' is", BORLAND_DELPHI); ;}
d5166 1
a5166 1
    { (*yyvalp).ttype = chainon (yyvsp[-2].yystate.yysemantics.yysval.ttype, yyvsp[0].yystate.yysemantics.yysval.ttype); ;}
d5176 1
a5176 1
    { error ("missing comma"); (*yyvalp).ttype = chainon (yyvsp[-2].yystate.yysemantics.yysval.ttype, yyvsp[0].yystate.yysemantics.yysval.ttype); ;}
d5186 1
a5186 1
    { (*yyvalp).ttype = build_tree_list (yyvsp[-1].yystate.yysemantics.yysval.ttype, yyvsp[0].yystate.yysemantics.yysval.ttype); ;}
d5191 1
a5191 1
    { declare_label (yyvsp[0].yystate.yysemantics.yysval.ttype); ;}
d5196 1
a5196 1
    { declare_label (yyvsp[0].yystate.yysemantics.yysval.ttype); ;}
d5206 1
a5206 1
    { declare_label (yyvsp[0].yystate.yysemantics.yysval.ttype); error ("missing comma"); yyerrok; ;}
d5221 1
a5221 1
    { (*yyvalp).ttype = numeric_label (yyvsp[0].yystate.yysemantics.yysval.ttype); ;}
d5226 1
a5226 1
    { declare_constant (yyvsp[-3].yystate.yysemantics.yysval.ttype, yyvsp[-1].yystate.yysemantics.yysval.ttype); ;}
d5233 1
a5233 1
        declare_variables (build_tree_list (NULL_TREE, yyvsp[-7].yystate.yysemantics.yysval.ttype), yyvsp[-4].yystate.yysemantics.yysval.ttype, yyvsp[-2].yystate.yysemantics.yysval.ttype, VQ_BP_CONST, yyvsp[-1].yystate.yysemantics.yysval.ttype);
d5244 1
a5244 1
    { (*yyvalp).ttype = combine_strings (yyvsp[0].yystate.yysemantics.yysval.ttype, 1); ;}
d5249 1
a5249 1
    { (*yyvalp).ttype = build_caret_string_constant (yyvsp[0].yystate.yysemantics.yysval.itype); ;}
d5254 1
a5254 1
    { (*yyvalp).ttype = build_tree_list (NULL_TREE, yyvsp[0].yystate.yysemantics.yysval.ttype); ;}
d5259 1
a5259 1
    { (*yyvalp).ttype = chainon (yyvsp[-1].yystate.yysemantics.yysval.ttype, build_tree_list (NULL_TREE, yyvsp[0].yystate.yysemantics.yysval.ttype)); ;}
d5281 1
a5281 1
        if (!EM (yyvsp[-1].yystate.yysemantics.yysval.ttype))
d5283 1
a5283 1
            if (PASCAL_TYPE_UNDISCRIMINATED_SCHEMA (yyvsp[-1].yystate.yysemantics.yysval.ttype))
d5285 1
a5285 1
            build_type_decl (yyvsp[-4].yystate.yysemantics.yysval.ttype, yyvsp[-1].yystate.yysemantics.yysval.ttype, yyvsp[0].yystate.yysemantics.yysval.ttype);
d5302 2
a5303 2
        build_type_decl (yyvsp[-5].yystate.yysemantics.yysval.ttype, build_schema_type (yyvsp[-1].yystate.yysemantics.yysval.ttype, yyvsp[-4].yystate.yysemantics.yysval.ttype), yyvsp[0].yystate.yysemantics.yysval.ttype);
        immediate_size_expand = yyvsp[-2].yystate.yysemantics.yysval.itype;
d5310 1
a5310 1
    { build_schema_type (error_mark_node, yyvsp[-1].yystate.yysemantics.yysval.ttype); ;}
d5323 1
a5323 1
        build_type_decl (yyvsp[-2].yystate.yysemantics.yysval.ttype, t, NULL_TREE);
d5334 1
a5334 1
        finish_object_type (yyvsp[-5].yystate.yysemantics.yysval.ttype, yyvsp[-2].yystate.yysemantics.yysval.ttype, yyvsp[-1].yystate.yysemantics.yysval.ttype, yyvsp[-4].yystate.yysemantics.yysval.ttype != NULL_TREE);
d5341 1
a5341 1
    { (*yyvalp).ttype = yyvsp[-1].yystate.yysemantics.yysval.ttype; ;}
d5351 1
a5351 1
    { (*yyvalp).ttype = chainon (yyvsp[-2].yystate.yysemantics.yysval.ttype, yyvsp[0].yystate.yysemantics.yysval.ttype); ;}
d5356 1
a5356 1
    { (*yyvalp).ttype = chainon (yyvsp[-2].yystate.yysemantics.yysval.ttype, yyvsp[0].yystate.yysemantics.yysval.ttype); error ("missing semicolon"); yyerrok; ;}
d5366 1
a5366 1
    { (*yyvalp).ttype = build_discriminants (yyvsp[-2].yystate.yysemantics.yysval.ttype, yyvsp[0].yystate.yysemantics.yysval.ttype); ;}
d5371 1
a5371 1
    { type_attributes (&(*yyvalp).ttype, TREE_PURPOSE (yyvsp[0].yystate.yysemantics.yysval.ttype)); ;}
d5377 1
a5377 1
        if (!EM (yyvsp[0].yystate.yysemantics.yysval.ttype) && TYPE_GET_INITIALIZER (yyvsp[0].yystate.yysemantics.yysval.ttype))
d5388 1
a5388 1
        (*yyvalp).ttype = yyvsp[0].yystate.yysemantics.yysval.ttype;
d5395 1
a5395 1
        if (!PASCAL_TYPE_FILE (yyvsp[0].yystate.yysemantics.yysval.ttype))
d5397 1
a5397 1
        (*yyvalp).ttype = pascal_type_variant (yyvsp[0].yystate.yysemantics.yysval.ttype, TYPE_QUALIFIER_BINDABLE);
d5404 1
a5404 1
        (*yyvalp).ttype = pascal_type_variant (yyvsp[0].yystate.yysemantics.yysval.ttype, TYPE_QUALIFIER_RESTRICTED | (TYPE_PACKED (yyvsp[0].yystate.yysemantics.yysval.ttype) ? TYPE_QUALIFIER_PACKED : 0));
d5416 1
a5416 1
    { (*yyvalp).ttype = build_discriminated_type (yyvsp[-1].yystate.yysemantics.yysval.ttype, yyvsp[0].yystate.yysemantics.yysval.ttype); ;}
d5427 2
a5428 2
        defining_packed_type -= yyvsp[-1].yystate.yysemantics.yysval.itype;
        (*yyvalp).ttype = yyvsp[-1].yystate.yysemantics.yysval.itype ? pack_type (yyvsp[0].yystate.yysemantics.yysval.ttype) : yyvsp[0].yystate.yysemantics.yysval.ttype;
d5452 1
a5452 1
        tree decl = lookup_name (yyvsp[0].yystate.yysemantics.yysval.ttype);
d5455 1
a5455 1
          error ("unknown identifier `%s'", IDENTIFIER_NAME (yyvsp[0].yystate.yysemantics.yysval.ttype));
d5457 1
a5457 1
          error ("type name expected, `%s' given", IDENTIFIER_NAME (yyvsp[0].yystate.yysemantics.yysval.ttype));
d5465 1
a5465 1
    { chk_dialect ("schema/string discriminants are", E_O_PASCAL); (*yyvalp).ttype = yyvsp[-1].yystate.yysemantics.yysval.ttype; ;}
d5472 1
a5472 1
        (*yyvalp).ttype = build_tree_list (NULL_TREE, maybe_schema_discriminant (string_may_be_char (yyvsp[-1].yystate.yysemantics.yysval.ttype, 0)));
d5480 1
a5480 1
        (*yyvalp).ttype = build_tree_list (NULL_TREE, maybe_schema_discriminant (string_may_be_char (yyvsp[0].yystate.yysemantics.yysval.ttype, 0)));
d5487 1
a5487 1
        (*yyvalp).ttype = chainon (yyvsp[-2].yystate.yysemantics.yysval.ttype, build_tree_list (NULL_TREE, maybe_schema_discriminant (string_may_be_char (yyvsp[0].yystate.yysemantics.yysval.ttype, 0))));
d5501 1
a5501 1
        (*yyvalp).ttype = chainon (yyvsp[-2].yystate.yysemantics.yysval.ttype, build_tree_list (NULL_TREE, maybe_schema_discriminant (string_may_be_char (yyvsp[0].yystate.yysemantics.yysval.ttype, 0))));
d5513 1
a5513 1
    { (*yyvalp).ttype = build_enum_type (nreverse (yyvsp[-1].yystate.yysemantics.yysval.ttype)); ;}
d5528 1
a5528 1
    { (*yyvalp).ttype = build_tree_list (yyvsp[0].yystate.yysemantics.yysval.ttype, NULL_TREE); ;}
d5533 1
a5533 1
    { (*yyvalp).ttype = tree_cons (yyvsp[0].yystate.yysemantics.yysval.ttype, NULL_TREE, yyvsp[-2].yystate.yysemantics.yysval.ttype); yyerrok; ;}
d5538 1
a5538 1
    { (*yyvalp).ttype = tree_cons (yyvsp[0].yystate.yysemantics.yysval.ttype, NULL_TREE, yyvsp[-2].yystate.yysemantics.yysval.ttype); error ("missing comma"); yyerrok; ;}
d5548 1
a5548 1
    { (*yyvalp).ttype = build_pascal_unary_op (yyvsp[-1].yystate.yysemantics.yysval.code, yyvsp[0].yystate.yysemantics.yysval.ttype); ;}
d5553 1
a5553 1
    { (*yyvalp).ttype = build_pascal_unary_op (yyvsp[-1].yystate.yysemantics.yysval.code, yyvsp[0].yystate.yysemantics.yysval.ttype); ;}
d5558 1
a5558 1
    { (*yyvalp).ttype = build_pascal_unary_op (yyvsp[-1].yystate.yysemantics.yysval.code, yyvsp[0].yystate.yysemantics.yysval.ttype); ;}
d5563 1
a5563 1
    { (*yyvalp).ttype = build_pascal_unary_op (yyvsp[-1].yystate.yysemantics.yysval.code, yyvsp[0].yystate.yysemantics.yysval.ttype); ;}
d5568 1
a5568 1
    { (*yyvalp).ttype = yyvsp[-1].yystate.yysemantics.yysval.ttype; ;}
d5573 1
a5573 1
    { (*yyvalp).ttype = build_pascal_subrange_type (yyvsp[-2].yystate.yysemantics.yysval.ttype, yyvsp[0].yystate.yysemantics.yysval.ttype, 0); ;}
d5579 1
a5579 1
        defining_packed_type -= yyvsp[-3].yystate.yysemantics.yysval.itype;
d5581 1
a5581 1
        (*yyvalp).ttype = build_pascal_subrange_type (yyvsp[-2].yystate.yysemantics.yysval.ttype, yyvsp[0].yystate.yysemantics.yysval.ttype, yyvsp[-3].yystate.yysemantics.yysval.itype);
d5587 1
a5587 1
    { (*yyvalp).ttype = EM (yyvsp[0].yystate.yysemantics.yysval.ttype) ? error_mark_node : build_pointer_type (yyvsp[0].yystate.yysemantics.yysval.ttype); ;}
d5592 1
a5592 1
    { (*yyvalp).ttype = EM (yyvsp[0].yystate.yysemantics.yysval.ttype) ? error_mark_node : build_pointer_type (yyvsp[0].yystate.yysemantics.yysval.ttype); ;}
d5597 1
a5597 1
    { (*yyvalp).ttype = EM (yyvsp[0].yystate.yysemantics.yysval.ttype) ? error_mark_node : build_pointer_type (yyvsp[0].yystate.yysemantics.yysval.ttype); ;}
d5604 1
a5604 1
        (*yyvalp).ttype = EM (yyvsp[0].yystate.yysemantics.yysval.ttype) ? error_mark_node : build_pointer_type (p_build_type_variant (yyvsp[0].yystate.yysemantics.yysval.ttype, 1, TYPE_VOLATILE (yyvsp[0].yystate.yysemantics.yysval.ttype)));
d5612 1
a5612 1
        for (scan = current_type_list; scan && TREE_VALUE (scan) != yyvsp[0].yystate.yysemantics.yysval.ttype; scan = TREE_CHAIN (scan)) ;
d5616 2
a5617 2
          (*yyvalp).ttype = TREE_TYPE (build_type_decl (yyvsp[0].yystate.yysemantics.yysval.ttype, make_node (LANG_TYPE), NULL_TREE));
        else if ((decl = lookup_name (yyvsp[0].yystate.yysemantics.yysval.ttype)) && TREE_CODE (decl) == TYPE_DECL)
d5631 2
a5632 2
        assert (EM (yyvsp[0].yystate.yysemantics.yysval.ttype) || (TREE_CODE (yyvsp[0].yystate.yysemantics.yysval.ttype) == REFERENCE_TYPE && TREE_TYPE (yyvsp[0].yystate.yysemantics.yysval.ttype)));
        (*yyvalp).ttype = TREE_TYPE (yyvsp[0].yystate.yysemantics.yysval.ttype);
d5639 1
a5639 1
        if (EM (yyvsp[0].yystate.yysemantics.yysval.ttype))
d5642 1
a5642 1
          (*yyvalp).ttype = build_reference_type (build_function_type (void_type_node, yyvsp[0].yystate.yysemantics.yysval.ttype));
d5649 1
a5649 1
        if (!yyvsp[0].yystate.yysemantics.yysval.ttype)
d5654 1
a5654 1
        else if ((yyvsp[-1].yystate.yysemantics.yysval.ttype && EM (yyvsp[-1].yystate.yysemantics.yysval.ttype)) || EM (yyvsp[0].yystate.yysemantics.yysval.ttype))
d5657 1
a5657 1
          (*yyvalp).ttype = build_reference_type (build_function_type (yyvsp[0].yystate.yysemantics.yysval.ttype, yyvsp[-1].yystate.yysemantics.yysval.ttype));
d5673 1
a5673 1
    { (*yyvalp).ttype = yyvsp[-3].yystate.yysemantics.yysval.ttype; ;}
d5678 1
a5678 1
    { (*yyvalp).ttype = chainon (yyvsp[-1].yystate.yysemantics.yysval.ttype, build_tree_list (NULL_TREE, void_type_node)); ;}
d5683 1
a5683 1
    { (*yyvalp).ttype = chainon (yyvsp[-2].yystate.yysemantics.yysval.ttype, yyvsp[0].yystate.yysemantics.yysval.ttype); ;}
d5688 1
a5688 1
    { (*yyvalp).ttype = build_procedural_type_formal_param (yyvsp[-2].yystate.yysemantics.yysval.ttype, yyvsp[0].yystate.yysemantics.yysval.ttype, 0, 0); ;}
d5693 1
a5693 1
    { (*yyvalp).ttype = build_procedural_type_formal_param (yyvsp[-2].yystate.yysemantics.yysval.ttype, yyvsp[0].yystate.yysemantics.yysval.ttype, 0, 1); ;}
d5698 1
a5698 1
    { (*yyvalp).ttype = build_procedural_type_formal_param (yyvsp[-2].yystate.yysemantics.yysval.ttype, yyvsp[0].yystate.yysemantics.yysval.ttype, 1, !!yyvsp[-4].yystate.yysemantics.yysval.ttype); ;}
d5703 1
a5703 1
    { (*yyvalp).ttype = build_procedural_type_formal_param (yyvsp[0].yystate.yysemantics.yysval.ttype, NULL_TREE, 1, !!yyvsp[-2].yystate.yysemantics.yysval.ttype); ;}
d5708 1
a5708 1
    { (*yyvalp).ttype = build_procedural_type_formal_param (yyvsp[-2].yystate.yysemantics.yysval.ttype, yyvsp[0].yystate.yysemantics.yysval.ttype, 2, 1); ;}
d5713 1
a5713 1
    { (*yyvalp).ttype = build_procedural_type_formal_param (yyvsp[0].yystate.yysemantics.yysval.ttype, NULL_TREE, 2, 1); ;}
d5726 1
a5726 1
    { (*yyvalp).ttype = build_pascal_array_type (yyvsp[0].yystate.yysemantics.yysval.ttype, yyvsp[-3].yystate.yysemantics.yysval.ttype); ;}
d5731 1
a5731 1
    { (*yyvalp).ttype = chainon (yyvsp[-2].yystate.yysemantics.yysval.ttype, yyvsp[0].yystate.yysemantics.yysval.ttype); yyerrok; ;}
d5744 1
a5744 1
    { (*yyvalp).ttype = chainon (yyvsp[-2].yystate.yysemantics.yysval.ttype, yyvsp[0].yystate.yysemantics.yysval.ttype); error ("missing comma"); yyerrok; ;}
d5754 1
a5754 1
    { (*yyvalp).ttype = build_tree_list (yyvsp[0].yystate.yysemantics.yysval.ttype, convert_type_to_range (yyvsp[0].yystate.yysemantics.yysval.ttype)); ;}
d5759 1
a5759 1
    { (*yyvalp).ttype = build_tree_list (yyvsp[0].yystate.yysemantics.yysval.ttype, convert_type_to_range (yyvsp[0].yystate.yysemantics.yysval.ttype)); ;}
d5764 1
a5764 1
    { (*yyvalp).ttype = build_type_copy (yyvsp[0].yystate.yysemantics.yysval.ttype);  /* in case it will be packed */ ;}
d5769 1
a5769 1
    { (*yyvalp).ttype = build_file_type (yyvsp[0].yystate.yysemantics.yysval.ttype, yyvsp[-2].yystate.yysemantics.yysval.ttype, 0); ;}
d5779 1
a5779 1
    { (*yyvalp).ttype = yyvsp[-1].yystate.yysemantics.yysval.ttype; ;}
d5784 1
a5784 1
    { (*yyvalp).ttype = pascal_build_set_type (yyvsp[0].yystate.yysemantics.yysval.ttype); ;}
d5789 1
a5789 1
    { (*yyvalp).ttype = yyvsp[-1].yystate.yysemantics.yysval.ttype; yyerrok; ;}
d5804 1
a5804 1
    { (*yyvalp).ttype = finish_struct (start_struct (RECORD_TYPE), yyvsp[-1].yystate.yysemantics.yysval.ttype, 1); ;}
d5809 1
a5809 1
    { (*yyvalp).ttype = build_variant_record (yyvsp[-2].yystate.yysemantics.yysval.ttype, yyvsp[0].yystate.yysemantics.yysval.ttype); ;}
d5814 1
a5814 1
    { (*yyvalp).ttype = build_variant_record (NULL_TREE, yyvsp[0].yystate.yysemantics.yysval.ttype); ;}
d5819 1
a5819 1
    { (*yyvalp).ttype = chainon (yyvsp[-2].yystate.yysemantics.yysval.ttype, yyvsp[0].yystate.yysemantics.yysval.ttype); yyerrok; ;}
d5824 1
a5824 1
    { (*yyvalp).ttype = chainon (yyvsp[-2].yystate.yysemantics.yysval.ttype, yyvsp[0].yystate.yysemantics.yysval.ttype); error ("missing semicolon"); yyerrok; ;}
d5834 1
a5834 1
    { (*yyvalp).ttype = build_fields (yyvsp[-2].yystate.yysemantics.yysval.ttype, yyvsp[0].yystate.yysemantics.yysval.ttype); ;}
d5839 1
a5839 1
    { (*yyvalp).ttype = build_record_variant_part (yyvsp[-4].yystate.yysemantics.yysval.ttype, chainon (yyvsp[-2].yystate.yysemantics.yysval.ttype, yyvsp[0].yystate.yysemantics.yysval.ttype)); ;}
d5844 1
a5844 1
    { (*yyvalp).ttype = build_tree_list (yyvsp[0].yystate.yysemantics.yysval.ttype, build_field (yyvsp[-2].yystate.yysemantics.yysval.ttype, yyvsp[0].yystate.yysemantics.yysval.ttype)); ;}
d5849 1
a5849 1
    { (*yyvalp).ttype = build_tree_list (yyvsp[0].yystate.yysemantics.yysval.ttype, build_field (yyvsp[-2].yystate.yysemantics.yysval.ttype, yyvsp[0].yystate.yysemantics.yysval.ttype)); ;}
d5854 1
a5854 1
    { (*yyvalp).ttype = build_tree_list (yyvsp[0].yystate.yysemantics.yysval.ttype, NULL_TREE); ;}
d5859 1
a5859 1
    { (*yyvalp).ttype = build_tree_list (yyvsp[0].yystate.yysemantics.yysval.ttype, NULL_TREE); ;}
d5874 1
a5874 1
    { (*yyvalp).ttype = build_tree_list (NULL_TREE, build_field (NULL_TREE, yyvsp[-2].yystate.yysemantics.yysval.ttype)); ;}
d5879 1
a5879 1
    { (*yyvalp).ttype = chainon (yyvsp[-2].yystate.yysemantics.yysval.ttype, yyvsp[0].yystate.yysemantics.yysval.ttype); yyerrok; ;}
d5884 1
a5884 1
    { (*yyvalp).ttype = chainon (yyvsp[-2].yystate.yysemantics.yysval.ttype, yyvsp[0].yystate.yysemantics.yysval.ttype); error ("missing semicolon"); yyerrok; ;}
d5894 1
a5894 1
    { (*yyvalp).ttype = build_tree_list (yyvsp[-4].yystate.yysemantics.yysval.ttype, build_field (NULL_TREE, yyvsp[-1].yystate.yysemantics.yysval.ttype)); ;}
d5899 1
a5899 1
    { (*yyvalp).ttype = chainon (yyvsp[-2].yystate.yysemantics.yysval.ttype, yyvsp[0].yystate.yysemantics.yysval.ttype); yyerrok; ;}
d5909 1
a5909 1
    { (*yyvalp).ttype = chainon (yyvsp[-2].yystate.yysemantics.yysval.ttype, yyvsp[0].yystate.yysemantics.yysval.ttype); error ("missing comma"); yyerrok; ;}
d5914 1
a5914 1
    { (*yyvalp).ttype = build_tree_list (NULL_TREE, string_may_be_char (yyvsp[0].yystate.yysemantics.yysval.ttype, 0)); ;}
d5921 1
a5921 1
        (*yyvalp).ttype = build_tree_list (string_may_be_char (yyvsp[0].yystate.yysemantics.yysval.ttype, 0), string_may_be_char (yyvsp[-2].yystate.yysemantics.yysval.ttype, 0));
d5928 1
a5928 1
        (*yyvalp).ttype = build_tree_list (string_may_be_char (yyvsp[0].yystate.yysemantics.yysval.ttype, 0), string_may_be_char (yyvsp[-2].yystate.yysemantics.yysval.ttype, 0));
d5938 1
a5938 1
        (*yyvalp).ttype = build_tree_list (NULL_TREE, string_may_be_char (yyvsp[-2].yystate.yysemantics.yysval.ttype, 0));
d5945 1
a5945 1
        (*yyvalp).ttype = TYPE_MAIN_VARIANT (TREE_TYPE (yyvsp[0].yystate.yysemantics.yysval.ttype));
d5952 1
a5952 1
    { (*yyvalp).ttype = yyvsp[-1].yystate.yysemantics.yysval.ttype; ;}
d5962 1
a5962 1
    { (*yyvalp).ttype = chainon (yyvsp[-1].yystate.yysemantics.yysval.ttype, yyvsp[0].yystate.yysemantics.yysval.ttype); ;}
d5972 1
a5972 1
    { (*yyvalp).ttype = chainon (yyvsp[-1].yystate.yysemantics.yysval.ttype, build_tree_list (void_type_node, yyvsp[0].yystate.yysemantics.yysval.ttype)); ;}
d5977 1
a5977 1
    { (*yyvalp).ttype = chainon (yyvsp[-2].yystate.yysemantics.yysval.ttype, yyvsp[-1].yystate.yysemantics.yysval.ttype); yyerrok; ;}
d5982 1
a5982 1
    { (*yyvalp).ttype = build_fields (yyvsp[-2].yystate.yysemantics.yysval.ttype, yyvsp[0].yystate.yysemantics.yysval.ttype); ;}
d5987 1
a5987 1
    { (*yyvalp).ttype = build_method_description (yyvsp[-1].yystate.yysemantics.yysval.ttype, yyvsp[0].yystate.yysemantics.yysval.ttype, NULL_TREE, void_type_node, 0); ;}
d5992 1
a5992 1
    { (*yyvalp).ttype = build_method_description (yyvsp[-3].yystate.yysemantics.yysval.ttype, yyvsp[-2].yystate.yysemantics.yysval.ttype, yyvsp[-1].yystate.yysemantics.yysval.ttype, yyvsp[0].yystate.yysemantics.yysval.ttype, 0); ;}
d5997 1
a5997 1
    { (*yyvalp).ttype = build_method_description (yyvsp[-1].yystate.yysemantics.yysval.ttype, yyvsp[0].yystate.yysemantics.yysval.ttype, NULL_TREE, boolean_type_node, 1); ;}
d6002 1
a6002 1
    { (*yyvalp).ttype = build_method_description (yyvsp[-1].yystate.yysemantics.yysval.ttype, yyvsp[0].yystate.yysemantics.yysval.ttype, NULL_TREE, void_type_node, 1); ;}
d6007 1
a6007 1
    { (*yyvalp).ttype = build_tree_list (NULL_TREE, yyvsp[0].yystate.yysemantics.yysval.ttype); ;}
d6012 1
a6012 1
    { (*yyvalp).ttype = build_tree_list (yyvsp[0].yystate.yysemantics.yysval.ttype, yyvsp[-1].yystate.yysemantics.yysval.ttype); ;}
d6017 1
a6017 1
    { (*yyvalp).ttype = build_tree_list (NULL_TREE, yyvsp[0].yystate.yysemantics.yysval.ttype); ;}
d6029 3
a6031 3
        yyvsp[-3].yystate.yysemantics.yysval.ttype = nreverse (yyvsp[-3].yystate.yysemantics.yysval.ttype);
        if ((TREE_CODE (yyvsp[0].yystate.yysemantics.yysval.ttype) == POINTER_TYPE || TREE_CODE (yyvsp[0].yystate.yysemantics.yysval.ttype) == REFERENCE_TYPE)
            && TREE_CODE (TREE_TYPE (yyvsp[0].yystate.yysemantics.yysval.ttype)) == FUNCTION_TYPE)
d6039 1
a6039 1
        for (t = yyvsp[-3].yystate.yysemantics.yysval.ttype; t; t = TREE_CHAIN (t))
d6048 1
a6048 1
        for (t = yyvsp[-7].yystate.yysemantics.yysval.ttype; t; t = TREE_CHAIN (t))
d6051 3
a6053 3
        (*yyvalp).ttype = declare_variables (yyvsp[-7].yystate.yysemantics.yysval.ttype, yyvsp[-4].yystate.yysemantics.yysval.ttype, yyvsp[-2].yystate.yysemantics.yysval.ttype, 0, yyvsp[-1].yystate.yysemantics.yysval.ttype);
        if (yyvsp[-3].yystate.yysemantics.yysval.itype != -1)
          allow_function_calls (yyvsp[-3].yystate.yysemantics.yysval.itype);
d6065 1
a6065 1
    { (*yyvalp).ttype = chainon (yyvsp[-2].yystate.yysemantics.yysval.ttype, yyvsp[0].yystate.yysemantics.yysval.ttype); ;}
d6070 1
a6070 1
    { (*yyvalp).ttype = build_tree_list (yyvsp[-1].yystate.yysemantics.yysval.ttype, yyvsp[0].yystate.yysemantics.yysval.ttype); ;}
d6075 1
a6075 1
    { ASSERT_ID (yyvsp[0].yystate.yysemantics.yysval.ttype, yyvsp[0].yystate.yyloc, p_name); ;}
d6080 1
a6080 1
    { (*yyvalp).ttype = tree_cons (yyvsp[-2].yystate.yysemantics.yysval.ttype, yyvsp[0].yystate.yysemantics.yysval.ttype, build_tree_list (yyvsp[-4].yystate.yysemantics.yysval.ttype, yyvsp[-3].yystate.yysemantics.yysval.ttype)); ;}
d6085 1
a6085 1
    { (*yyvalp).ttype = chainon (yyvsp[-2].yystate.yysemantics.yysval.ttype, yyvsp[0].yystate.yysemantics.yysval.ttype); ;}
d6090 1
a6090 1
    { (*yyvalp).ttype = build_tree_list (yyvsp[-1].yystate.yysemantics.yysval.ttype, yyvsp[0].yystate.yysemantics.yysval.ttype); ;}
d6095 1
a6095 1
    { (*yyvalp).ttype = TREE_PURPOSE (yyvsp[0].yystate.yysemantics.yysval.ttype); ;}
d6100 1
a6100 1
    { (*yyvalp).ttype = build_tree_list (yyvsp[-1].yystate.yysemantics.yysval.ttype, yyvsp[-3].yystate.yysemantics.yysval.ttype); ;}
d6105 1
a6105 1
    { (*yyvalp).ttype = chainon (yyvsp[-2].yystate.yysemantics.yysval.ttype, yyvsp[0].yystate.yysemantics.yysval.ttype); ;}
d6110 1
a6110 1
    { (*yyvalp).ttype = build_tree_list (yyvsp[0].yystate.yysemantics.yysval.ttype, NULL_TREE); ;}
d6115 1
a6115 1
    { (*yyvalp).ttype = build_tree_list (yyvsp[0].yystate.yysemantics.yysval.ttype, NULL_TREE); ;}
d6120 1
a6120 1
    { (*yyvalp).ttype = build_tree_list (yyvsp[-2].yystate.yysemantics.yysval.ttype, build_tree_list (NULL_TREE, yyvsp[0].yystate.yysemantics.yysval.ttype)); ;}
d6125 1
a6125 1
    { (*yyvalp).ttype = build_tree_list (yyvsp[-3].yystate.yysemantics.yysval.ttype, build_tree_list (NULL_TREE, yyvsp[-1].yystate.yysemantics.yysval.ttype)); ;}
d6130 1
a6130 1
    { (*yyvalp).ttype = build_tree_list (yyvsp[-5].yystate.yysemantics.yysval.ttype, tree_cons (NULL_TREE, yyvsp[-3].yystate.yysemantics.yysval.ttype, yyvsp[-1].yystate.yysemantics.yysval.ttype)); ;}
d6150 1
a6150 1
    { (*yyvalp).ttype = yyvsp[0].yystate.yysemantics.yysval.ttype; ;}
d6166 2
a6167 2
        allow_function_calls (yyvsp[-1].yystate.yysemantics.yysval.itype);
        (*yyvalp).ttype = build_tree_list (NULL_TREE, yyvsp[0].yystate.yysemantics.yysval.ttype);
d6188 2
a6189 2
        allow_function_calls (yyvsp[-1].yystate.yysemantics.yysval.itype);
        (*yyvalp).ttype = yyvsp[0].yystate.yysemantics.yysval.ttype;
d6195 1
a6195 1
    { (*yyvalp).ttype = build_tree_list (NULL_TREE, yyvsp[0].yystate.yysemantics.yysval.ttype); ;}
d6202 1
a6202 1
        (*yyvalp).ttype = build_tree_list (NULL_TREE, yyvsp[-1].yystate.yysemantics.yysval.ttype);
d6209 1
a6209 1
        (*yyvalp).ttype = maybe_schema_discriminant (yyvsp[0].yystate.yysemantics.yysval.ttype);
d6224 1
a6224 1
    { (*yyvalp).ttype = build_tree_list (NULL_TREE, yyvsp[-1].yystate.yysemantics.yysval.ttype); ;}
d6229 1
a6229 1
    { (*yyvalp).ttype = nreverse (yyvsp[0].yystate.yysemantics.yysval.ttype); ;}
d6239 1
a6239 1
    { TREE_CHAIN (((*yyvalp).ttype = yyvsp[0].yystate.yysemantics.yysval.ttype)) = yyvsp[-2].yystate.yysemantics.yysval.ttype; ;}
d6244 1
a6244 1
    { TREE_CHAIN (((*yyvalp).ttype = yyvsp[0].yystate.yysemantics.yysval.ttype)) = yyvsp[-2].yystate.yysemantics.yysval.ttype; ;}
d6249 1
a6249 1
    { TREE_CHAIN (((*yyvalp).ttype = yyvsp[0].yystate.yysemantics.yysval.ttype)) = yyvsp[-2].yystate.yysemantics.yysval.ttype; error ("missing separator"); ;}
d6261 1
a6261 1
        (*yyvalp).ttype = build_tree_list (NULL_TREE, nreverse (yyvsp[-1].yystate.yysemantics.yysval.ttype));
d6276 1
a6276 1
    { TREE_CHAIN (((*yyvalp).ttype = yyvsp[0].yystate.yysemantics.yysval.ttype)) = yyvsp[-2].yystate.yysemantics.yysval.ttype; ;}
d6281 1
a6281 1
    { TREE_CHAIN (((*yyvalp).ttype = yyvsp[0].yystate.yysemantics.yysval.ttype)) = yyvsp[-2].yystate.yysemantics.yysval.ttype; error ("missing separator"); ;}
d6286 1
a6286 1
    { (*yyvalp).ttype = build_tree_list (build_tree_list (yyvsp[-2].yystate.yysemantics.yysval.ttype, NULL_TREE), TREE_VALUE (yyvsp[0].yystate.yysemantics.yysval.ttype)); ;}
d6291 1
a6291 1
    { (*yyvalp).ttype = build_pascal_unary_op (yyvsp[-1].yystate.yysemantics.yysval.code, yyvsp[0].yystate.yysemantics.yysval.ttype); ;}
d6296 1
a6296 1
    { (*yyvalp).ttype = build_pascal_unary_op (yyvsp[-1].yystate.yysemantics.yysval.code, yyvsp[0].yystate.yysemantics.yysval.ttype); ;}
d6301 1
a6301 1
    { declare_routine (yyvsp[-2].yystate.yysemantics.yysval.ttype, yyvsp[0].yystate.yysemantics.yysval.ttype, 1); ;}
d6306 1
a6306 1
    { declare_routine (yyvsp[-2].yystate.yysemantics.yysval.ttype, yyvsp[0].yystate.yysemantics.yysval.ttype, 0); ;}
d6311 1
a6311 1
    { (*yyvalp).ttype = start_routine (yyvsp[-2].yystate.yysemantics.yysval.ttype, yyvsp[0].yystate.yysemantics.yysval.ttype); ;}
d6326 1
a6326 1
        restore_identifiers (yyvsp[-4].yystate.yysemantics.yysval.ttype);
d6332 1
a6332 1
    { (*yyvalp).ttype = build_routine_heading (NULL_TREE, yyvsp[-1].yystate.yysemantics.yysval.ttype, yyvsp[0].yystate.yysemantics.yysval.ttype, NULL_TREE, void_type_node, 1, 0); ;}
d6337 1
a6337 1
    { (*yyvalp).ttype = build_routine_heading (NULL_TREE, yyvsp[-3].yystate.yysemantics.yysval.ttype, yyvsp[-2].yystate.yysemantics.yysval.ttype, yyvsp[-1].yystate.yysemantics.yysval.ttype, yyvsp[0].yystate.yysemantics.yysval.ttype, 1, 0); ;}
d6342 1
a6342 1
    { (*yyvalp).ttype = build_operator_heading (yyvsp[-3].yystate.yysemantics.yysval.ttype, yyvsp[-2].yystate.yysemantics.yysval.ttype, yyvsp[-1].yystate.yysemantics.yysval.ttype, yyvsp[0].yystate.yysemantics.yysval.ttype); ;}
d6347 1
a6347 1
    { (*yyvalp).ttype = build_routine_heading (yyvsp[-3].yystate.yysemantics.yysval.ttype, yyvsp[-1].yystate.yysemantics.yysval.ttype, yyvsp[0].yystate.yysemantics.yysval.ttype, NULL_TREE, void_type_node, 1, 0); ;}
d6352 1
a6352 1
    { (*yyvalp).ttype = build_routine_heading (yyvsp[-5].yystate.yysemantics.yysval.ttype, yyvsp[-3].yystate.yysemantics.yysval.ttype, yyvsp[-2].yystate.yysemantics.yysval.ttype, yyvsp[-1].yystate.yysemantics.yysval.ttype, yyvsp[0].yystate.yysemantics.yysval.ttype, 1, 0); ;}
d6357 1
a6357 1
    { (*yyvalp).ttype = build_routine_heading (yyvsp[-3].yystate.yysemantics.yysval.ttype, yyvsp[-1].yystate.yysemantics.yysval.ttype, yyvsp[0].yystate.yysemantics.yysval.ttype, NULL_TREE, boolean_type_node, 1, 1); ;}
d6362 1
a6362 1
    { (*yyvalp).ttype = build_routine_heading (yyvsp[-3].yystate.yysemantics.yysval.ttype, yyvsp[-1].yystate.yysemantics.yysval.ttype, yyvsp[0].yystate.yysemantics.yysval.ttype, NULL_TREE, void_type_node, 1, 1); ;}
d6367 1
a6367 1
    { (*yyvalp).ttype = chainon (chainon (yyvsp[-2].yystate.yysemantics.yysval.ttype, yyvsp[-1].yystate.yysemantics.yysval.ttype), yyvsp[0].yystate.yysemantics.yysval.ttype); ;}
d6372 1
a6372 1
    { (*yyvalp).ttype = build_tree_list (NULL_TREE, yyvsp[-1].yystate.yysemantics.yysval.ttype); ;}
d6377 1
a6377 1
    { (*yyvalp).ttype = build_tree_list (yyvsp[-1].yystate.yysemantics.yysval.ttype, yyvsp[-2].yystate.yysemantics.yysval.ttype); ;}
d6382 1
a6382 1
    { ASSERT_ID (yyvsp[0].yystate.yysemantics.yysval.ttype, yyvsp[0].yystate.yyloc, p_name); ;}
d6387 1
a6387 1
    { (*yyvalp).ttype = tree_cons (yyvsp[-1].yystate.yysemantics.yysval.ttype, yyvsp[-3].yystate.yysemantics.yysval.ttype, build_tree_list (yyvsp[-4].yystate.yysemantics.yysval.ttype, yyvsp[-5].yystate.yysemantics.yysval.ttype)); ;}
d6392 1
a6392 1
    { (*yyvalp).ttype = tree_cons (yyvsp[-1].yystate.yysemantics.yysval.ttype, yyvsp[-2].yystate.yysemantics.yysval.ttype, build_tree_list (yyvsp[-4].yystate.yysemantics.yysval.ttype, yyvsp[-5].yystate.yysemantics.yysval.ttype)); ;}
d6397 1
a6397 1
    { (*yyvalp).ttype = tree_cons (yyvsp[-4].yystate.yysemantics.yysval.ttype, yyvsp[-5].yystate.yysemantics.yysval.ttype, build_tree_list (yyvsp[-1].yystate.yysemantics.yysval.ttype, yyvsp[-2].yystate.yysemantics.yysval.ttype)); ;}
d6402 1
a6402 1
    { (*yyvalp).ttype = build_tree_list (yyvsp[-1].yystate.yysemantics.yysval.ttype, yyvsp[-2].yystate.yysemantics.yysval.ttype); ;}
d6407 1
a6407 1
    { (*yyvalp).ttype = build_tree_list (NULL_TREE, yyvsp[-1].yystate.yysemantics.yysval.ttype); ;}
d6412 1
a6412 1
    { (*yyvalp).ttype = build_tree_list (NULL_TREE, yyvsp[-1].yystate.yysemantics.yysval.ttype); ;}
d6417 1
a6417 1
    { (*yyvalp).ttype = chainon (yyvsp[-2].yystate.yysemantics.yysval.ttype, yyvsp[-1].yystate.yysemantics.yysval.ttype); ;}
d6424 1
a6424 1
          warning ("`%s' directive ignored in flat memory model", IDENTIFIER_NAME (yyvsp[-1].yystate.yysemantics.yysval.ttype));
d6430 1
a6430 1
    { (*yyvalp).ttype = yyvsp[0].yystate.yysemantics.yysval.ttype; chk_dialect ("function result variable specifications are", E_O_PASCAL); ;}
d6440 1
a6440 1
    { (*yyvalp).ttype = yyvsp[0].yystate.yysemantics.yysval.ttype; chk_dialect ("operator result variables with `=' are", GNU_PASCAL); ;}
d6455 1
a6455 1
    { (*yyvalp).ttype = check_result_type (yyvsp[0].yystate.yysemantics.yysval.ttype); ;}
d6460 1
a6460 1
    { (*yyvalp).ttype = yyvsp[-1].yystate.yysemantics.yysval.ttype; ;}
d6467 1
a6467 1
        (*yyvalp).ttype = chainon (yyvsp[-3].yystate.yysemantics.yysval.ttype, build_tree_list (NULL_TREE, NULL_TREE));
d6486 1
a6486 1
    { (*yyvalp).ttype = chainon (yyvsp[-2].yystate.yysemantics.yysval.ttype, yyvsp[0].yystate.yysemantics.yysval.ttype); yyerrok; ;}
d6491 1
a6491 1
    { (*yyvalp).ttype = chainon (yyvsp[-2].yystate.yysemantics.yysval.ttype, yyvsp[0].yystate.yysemantics.yysval.ttype); error ("missing semicolon"); yyerrok; ;}
d6496 1
a6496 1
    { (*yyvalp).ttype = build_formal_param (yyvsp[-2].yystate.yysemantics.yysval.ttype, yyvsp[0].yystate.yysemantics.yysval.ttype, 0, 0); ;}
d6501 1
a6501 1
    { (*yyvalp).ttype = build_formal_param (yyvsp[-2].yystate.yysemantics.yysval.ttype, yyvsp[0].yystate.yysemantics.yysval.ttype, 0, 1); ;}
d6506 1
a6506 1
    { (*yyvalp).ttype = build_formal_param (yyvsp[-1].yystate.yysemantics.yysval.ttype, yyvsp[0].yystate.yysemantics.yysval.ttype, 1, !!yyvsp[-3].yystate.yysemantics.yysval.ttype); ;}
d6511 1
a6511 1
    { (*yyvalp).ttype = build_formal_param (yyvsp[-1].yystate.yysemantics.yysval.ttype, yyvsp[0].yystate.yysemantics.yysval.ttype, 2, 1); ;}
d6516 1
a6516 1
    { (*yyvalp).ttype = build_formal_param (TREE_PURPOSE (yyvsp[0].yystate.yysemantics.yysval.ttype), TREE_VALUE (TREE_VALUE (yyvsp[0].yystate.yysemantics.yysval.ttype)), 0, 0); ;}
d6521 1
a6521 1
    { (*yyvalp).ttype = build_routine_heading (NULL_TREE, yyvsp[-1].yystate.yysemantics.yysval.ttype, yyvsp[0].yystate.yysemantics.yysval.ttype, NULL_TREE, void_type_node, 0, 0); ;}
d6526 1
a6526 1
    { (*yyvalp).ttype = build_routine_heading (NULL_TREE, yyvsp[-3].yystate.yysemantics.yysval.ttype, yyvsp[-2].yystate.yysemantics.yysval.ttype, yyvsp[-1].yystate.yysemantics.yysval.ttype, yyvsp[0].yystate.yysemantics.yysval.ttype, 0, 0); ;}
d6536 1
a6536 1
    { (*yyvalp).ttype = yyvsp[0].yystate.yysemantics.yysval.ttype; ;}
d6541 1
a6541 1
    { (*yyvalp).ttype = chainon (yyvsp[-3].yystate.yysemantics.yysval.ttype, yyvsp[0].yystate.yysemantics.yysval.ttype); ;}
d6547 3
a6549 3
        defining_packed_type -= yyvsp[-6].yystate.yysemantics.yysval.itype;
        PASCAL_TREE_PACKED (yyvsp[-3].yystate.yysemantics.yysval.ttype) = yyvsp[-6].yystate.yysemantics.yysval.itype;
        (*yyvalp).ttype = chainon (yyvsp[-3].yystate.yysemantics.yysval.ttype, yyvsp[0].yystate.yysemantics.yysval.ttype);
d6555 1
a6555 1
    { (*yyvalp).ttype = chainon (yyvsp[-2].yystate.yysemantics.yysval.ttype, yyvsp[0].yystate.yysemantics.yysval.ttype); yyerrok; ;}
d6566 2
a6567 2
        (*yyvalp).ttype = build_tree_list (yyvsp[-4].yystate.yysemantics.yysval.ttype, yyvsp[-2].yystate.yysemantics.yysval.ttype);
        TREE_TYPE ((*yyvalp).ttype) = yyvsp[0].yystate.yysemantics.yysval.ttype;
d6575 1
a6575 1
        TREE_TYPE ((*yyvalp).ttype) = yyvsp[0].yystate.yysemantics.yysval.ttype;
d6611 1
a6611 1
    { pascal_expand_goto (yyvsp[0].yystate.yysemantics.yysval.ttype); ;}
d6616 1
a6616 1
    { set_label (yyvsp[-1].yystate.yysemantics.yysval.ttype); ;}
d6623 1
a6623 1
        un_initialize_block (yyvsp[0].yystate.yysemantics.yysval.ttype, 0, 0);
d6629 1
a6629 1
    { restore_identifiers (yyvsp[-2].yystate.yysemantics.yysval.ttype); ;}
d6634 1
a6634 1
    { (*yyvalp).ttype = chainon (yyvsp[-2].yystate.yysemantics.yysval.ttype, yyvsp[0].yystate.yysemantics.yysval.ttype); yyerrok; ;}
d6644 1
a6644 1
    { (*yyvalp).ttype = chainon (yyvsp[-2].yystate.yysemantics.yysval.ttype, yyvsp[0].yystate.yysemantics.yysval.ttype); error ("missing comma"); yyerrok; ;}
d6654 1
a6654 1
    { (*yyvalp).ttype = pascal_shadow_record_fields (undo_schema_dereference (yyvsp[0].yystate.yysemantics.yysval.ttype), NULL_TREE, 0); ;}
d6659 1
a6659 1
    { (*yyvalp).ttype = pascal_shadow_record_fields (undo_schema_dereference (yyvsp[-2].yystate.yysemantics.yysval.ttype), yyvsp[0].yystate.yysemantics.yysval.ttype, 0); ;}
d6664 1
a6664 1
    { expand_start_cond (yyvsp[-1].yystate.yysemantics.yysval.ttype, 0); ;}
d6670 1
a6670 1
        if (!yyvsp[0].yystate.yysemantics.yysval.itype && extra_warnings)
d6688 1
a6688 1
        if (!yyvsp[0].yystate.yysemantics.yysval.itype && extra_warnings)
d6698 1
a6698 1
        current_case_expression = pascal_expand_start_case (yyvsp[-1].yystate.yysemantics.yysval.ttype);
d6716 2
a6717 2
          expand_end_case (yyvsp[-7].yystate.yysemantics.yysval.ttype);
        current_case_expression = yyvsp[-5].yystate.yysemantics.yysval.ttype;
d6764 1
a6764 1
    { pascal_pushcase (yyvsp[-1].yystate.yysemantics.yysval.ttype); ;}
d6779 1
a6779 1
    { LOCATION_NOTE (yyvsp[0].yystate.yyloc); expand_loop_continue_here (); ;}
d6785 2
a6786 2
        LOCATION_NOTE (yyvsp[-1].yystate.yyloc);
        expand_exit_loop_if_false (0, build_pascal_unary_op (TRUTH_NOT_EXPR, yyvsp[-1].yystate.yysemantics.yysval.ttype));
d6798 1
a6798 1
    { LOCATION_NOTE (yyvsp[0].yystate.yyloc); expand_exit_loop_if_false (0, yyvsp[0].yystate.yysemantics.yysval.ttype); ;}
d6808 1
a6808 1
    { yyvsp[-4].yystate.yysemantics.yysval.ttype = start_for_loop (yyvsp[-4].yystate.yysemantics.yysval.ttype, yyvsp[-2].yystate.yysemantics.yysval.ttype, &yyvsp[0].yystate.yysemantics.yysval.ttype, yyvsp[-1].yystate.yysemantics.yysval.code); ;}
d6813 1
a6813 1
    { LOCATION_NOTE (yyvsp[-6].yystate.yyloc); finish_for_loop (yyvsp[-9].yystate.yysemantics.yysval.ttype, yyvsp[-5].yystate.yysemantics.yysval.ttype, yyvsp[-6].yystate.yysemantics.yysval.code); ;}
d6818 1
a6818 1
    { yyvsp[-2].yystate.yysemantics.yysval.ttype = start_for_set_loop (yyvsp[-2].yystate.yysemantics.yysval.ttype, yyvsp[0].yystate.yysemantics.yysval.ttype, &(*yyvalp).ttype); ;}
d6823 1
a6823 1
    { LOCATION_NOTE (yyvsp[-6].yystate.yyloc); finish_for_set_loop (yyvsp[-7].yystate.yysemantics.yysval.ttype, yyvsp[-4].yystate.yysemantics.yysval.ttype); ;}
d6843 1
a6843 1
    { (*yyvalp).itype = allow_function_calls (!PASCAL_PROCEDURAL_TYPE (TREE_TYPE (yyvsp[0].yystate.yysemantics.yysval.ttype))); ;}
d6849 4
a6852 4
        if (!yyvsp[0].yystate.yysemantics.yysval.ttype)
          allow_function_calls (yyvsp[-1].yystate.yysemantics.yysval.itype);
        expand_assignment_or_call_statement (yyvsp[-2].yystate.yysemantics.yysval.ttype, yyvsp[0].yystate.yysemantics.yysval.ttype);
        allow_function_calls (yyvsp[-1].yystate.yysemantics.yysval.itype);
d6862 1
a6862 1
        if (PASCAL_PROCEDURAL_TYPE (TREE_TYPE (yyvsp[0].yystate.yysemantics.yysval.ttype)))
d6867 2
a6868 2
            ftype = TREE_TYPE (TREE_TYPE (yyvsp[0].yystate.yysemantics.yysval.ttype));
            (*yyvalp).ttype = convert (build_pointer_type (ftype), yyvsp[0].yystate.yysemantics.yysval.ttype);
d6880 1
a6880 1
    { (*yyvalp).ttype = yyvsp[0].yystate.yysemantics.yysval.ttype; ;}
d6890 1
a6890 1
    { build_predef_call (yyvsp[-1].yystate.yysemantics.yysval.itype, yyvsp[0].yystate.yysemantics.yysval.ttype); ;}
d6895 1
a6895 1
    { build_predef_call (IDENTIFIER_BUILT_IN_VALUE (yyvsp[0].yystate.yysemantics.yysval.ttype)->symbol, NULL_TREE); ;}
d6900 1
a6900 1
    { build_predef_call (IDENTIFIER_BUILT_IN_VALUE (yyvsp[-3].yystate.yysemantics.yysval.ttype)->symbol, yyvsp[-1].yystate.yysemantics.yysval.ttype); yyerrok; ;}
d6905 1
a6905 1
    { build_predef_call (p_Dispose, build_tree_list (NULL_TREE, yyvsp[-1].yystate.yysemantics.yysval.ttype)); ;}
d6912 1
a6912 1
        if (TREE_CODE (TREE_TYPE (yyvsp[-1].yystate.yysemantics.yysval.ttype)) == POINTER_TYPE && PASCAL_TYPE_OBJECT (TREE_TYPE (TREE_TYPE (yyvsp[-1].yystate.yysemantics.yysval.ttype))))
d6914 4
a6917 4
            tree temp = make_new_variable ("dispose_object", TREE_TYPE (yyvsp[-1].yystate.yysemantics.yysval.ttype));
            expand_expr_stmt (build_modify_expr (temp, NOP_EXPR, yyvsp[-1].yystate.yysemantics.yysval.ttype));
            yyvsp[-1].yystate.yysemantics.yysval.ttype = temp;
            (*yyvalp).ttype = pascal_shadow_record_fields (build_indirect_ref (yyvsp[-1].yystate.yysemantics.yysval.ttype, "`Dispose'"), NULL_TREE, 2);
d6925 2
a6926 2
        restore_identifiers (yyvsp[-2].yystate.yysemantics.yysval.ttype);
        build_predef_call (p_Dispose, tree_cons (NULL_TREE, yyvsp[-4].yystate.yysemantics.yysval.ttype, yyvsp[-1].yystate.yysemantics.yysval.ttype));
d6937 1
a6937 1
    { build_predef_call (p_Return, build_tree_list (NULL_TREE, yyvsp[0].yystate.yysemantics.yysval.ttype)); ;}
d6948 2
a6949 2
        (*yyvalp).ttype = yyvsp[-1].yystate.yysemantics.yysval.ttype;
        allow_function_calls (yyvsp[-3].yystate.yysemantics.yysval.itype);
d6956 1
a6956 1
    { (*yyvalp).ttype = build_tree_list (NULL_TREE, yyvsp[0].yystate.yysemantics.yysval.ttype); ;}
d6961 1
a6961 1
    { (*yyvalp).ttype = chainon (yyvsp[-2].yystate.yysemantics.yysval.ttype, build_tree_list (NULL_TREE, yyvsp[0].yystate.yysemantics.yysval.ttype)); yyerrok; ;}
d6976 1
a6976 1
    { (*yyvalp).ttype = chainon (yyvsp[-2].yystate.yysemantics.yysval.ttype, yyvsp[0].yystate.yysemantics.yysval.ttype); yyerrok; ;}
d6981 1
a6981 1
    { (*yyvalp).ttype = chainon (yyvsp[-2].yystate.yysemantics.yysval.ttype, yyvsp[0].yystate.yysemantics.yysval.ttype); error ("missing comma"); yyerrok; ;}
d6991 1
a6991 1
    { (*yyvalp).ttype = build_tree_list (NULL_TREE, yyvsp[0].yystate.yysemantics.yysval.ttype); ;}
d6996 1
a6996 1
    { (*yyvalp).ttype = build_tree_list (build_tree_list (NULL_TREE, yyvsp[0].yystate.yysemantics.yysval.ttype), yyvsp[-2].yystate.yysemantics.yysval.ttype); ;}
d7001 1
a7001 1
    { (*yyvalp).ttype = build_tree_list (build_tree_list (yyvsp[0].yystate.yysemantics.yysval.ttype, yyvsp[-2].yystate.yysemantics.yysval.ttype), yyvsp[-4].yystate.yysemantics.yysval.ttype); ;}
d7006 1
a7006 1
    { pascal_expand_asm_operands (yyvsp[-1].yystate.yysemantics.yysval.ttype, NULL_TREE, NULL_TREE, NULL_TREE, yyvsp[-3].yystate.yysemantics.yysval.itype); ;}
d7011 1
a7011 1
    { pascal_expand_asm_operands (yyvsp[-3].yystate.yysemantics.yysval.ttype, yyvsp[-1].yystate.yysemantics.yysval.ttype, NULL_TREE, NULL_TREE, yyvsp[-5].yystate.yysemantics.yysval.itype); ;}
d7016 1
a7016 1
    { pascal_expand_asm_operands (yyvsp[-5].yystate.yysemantics.yysval.ttype, yyvsp[-3].yystate.yysemantics.yysval.ttype, yyvsp[-1].yystate.yysemantics.yysval.ttype, NULL_TREE, yyvsp[-7].yystate.yysemantics.yysval.itype); ;}
d7021 1
a7021 1
    { pascal_expand_asm_operands (yyvsp[-7].yystate.yysemantics.yysval.ttype, yyvsp[-5].yystate.yysemantics.yysval.ttype, yyvsp[-3].yystate.yysemantics.yysval.ttype, yyvsp[-1].yystate.yysemantics.yysval.ttype, yyvsp[-9].yystate.yysemantics.yysval.itype); ;}
d7031 1
a7031 1
    { ASSERT_ID (yyvsp[0].yystate.yysemantics.yysval.ttype, yyvsp[0].yystate.yyloc, p_volatile); (*yyvalp).itype = 1; ;}
d7036 1
a7036 1
    { (*yyvalp).ttype = chainon (yyvsp[-2].yystate.yysemantics.yysval.ttype, yyvsp[0].yystate.yysemantics.yysval.ttype); ;}
d7041 1
a7041 1
    { (*yyvalp).ttype = build_tree_list (yyvsp[-3].yystate.yysemantics.yysval.ttype, yyvsp[-1].yystate.yysemantics.yysval.ttype); ;}
d7046 1
a7046 1
    { (*yyvalp).ttype = build_tree_list (NULL_TREE, yyvsp[0].yystate.yysemantics.yysval.ttype); ;}
d7051 1
a7051 1
    { (*yyvalp).ttype = tree_cons (NULL_TREE, yyvsp[0].yystate.yysemantics.yysval.ttype, yyvsp[-2].yystate.yysemantics.yysval.ttype); ;}
d7059 1
a7059 1
            tree t = yyvsp[0].yystate.yysemantics.yysval.ttype;
d7063 1
a7063 1
            if (last_parenthesized_expression == yyvsp[0].yystate.yysemantics.yysval.ttype
d7084 1
a7084 1
    { iso_no_parentheses (yyvsp[0].yystate.yysemantics.yysval.ttype); ;}
d7089 1
a7089 1
    { (*yyvalp).ttype = fold (parser_build_binary_op (yyvsp[-1].yystate.yysemantics.yysval.code, yyvsp[-2].yystate.yysemantics.yysval.ttype, yyvsp[0].yystate.yysemantics.yysval.ttype)); ;}
d7094 1
a7094 1
    { (*yyvalp).ttype = fold (yyvsp[0].yystate.yysemantics.yysval.ttype); ;}
d7099 1
a7099 1
    { (*yyvalp).ttype = set_exp_original_code (build_pascal_unary_op (yyvsp[-1].yystate.yysemantics.yysval.code, yyvsp[0].yystate.yysemantics.yysval.ttype), yyvsp[-1].yystate.yysemantics.yysval.code); ;}
d7104 1
a7104 1
    { (*yyvalp).ttype = parser_build_binary_op (yyvsp[-1].yystate.yysemantics.yysval.code, yyvsp[-2].yystate.yysemantics.yysval.ttype, yyvsp[0].yystate.yysemantics.yysval.ttype); ;}
d7109 1
a7109 1
    { (*yyvalp).ttype = build_operator_call (yyvsp[-1].yystate.yysemantics.yysval.ttype, yyvsp[-2].yystate.yysemantics.yysval.ttype, yyvsp[0].yystate.yysemantics.yysval.ttype, 1); ;}
d7114 1
a7114 1
    { (*yyvalp).ttype = start_boolean_binary_op (TRUTH_OR_EXPR, yyvsp[-1].yystate.yysemantics.yysval.ttype); ;}
d7119 1
a7119 1
    { if (yyvsp[-1].yystate.yysemantics.yysval.ttype) LOCATION_NOTE (COPYLOC ((*yylocp), yyvsp[0].yystate.yyloc)); (*yyvalp).ttype = finish_boolean_binary_op (TRUTH_OR_EXPR, yyvsp[-3].yystate.yysemantics.yysval.ttype, yyvsp[0].yystate.yysemantics.yysval.ttype, yyvsp[-1].yystate.yysemantics.yysval.ttype); ;}
d7124 1
a7124 1
    { (*yyvalp).ttype = start_boolean_binary_op (TRUTH_ORIF_EXPR, yyvsp[-1].yystate.yysemantics.yysval.ttype); ;}
d7129 1
a7129 1
    { if (yyvsp[-1].yystate.yysemantics.yysval.ttype) LOCATION_NOTE (COPYLOC ((*yylocp), yyvsp[0].yystate.yyloc)); (*yyvalp).ttype = finish_boolean_binary_op (TRUTH_ORIF_EXPR, yyvsp[-3].yystate.yysemantics.yysval.ttype, yyvsp[0].yystate.yysemantics.yysval.ttype, yyvsp[-1].yystate.yysemantics.yysval.ttype); ;}
d7134 1
a7134 1
    { (*yyvalp).ttype = parser_build_binary_op (yyvsp[-1].yystate.yysemantics.yysval.code, yyvsp[-2].yystate.yysemantics.yysval.ttype, yyvsp[0].yystate.yysemantics.yysval.ttype); ;}
d7139 1
a7139 1
    { (*yyvalp).ttype = build_operator_call (yyvsp[-1].yystate.yysemantics.yysval.ttype, yyvsp[-2].yystate.yysemantics.yysval.ttype, yyvsp[0].yystate.yysemantics.yysval.ttype, 1); ;}
d7144 1
a7144 1
    { (*yyvalp).ttype = start_boolean_binary_op (TRUTH_AND_EXPR, yyvsp[-1].yystate.yysemantics.yysval.ttype); ;}
d7149 1
a7149 1
    { if (yyvsp[-1].yystate.yysemantics.yysval.ttype) LOCATION_NOTE (COPYLOC ((*yylocp), yyvsp[0].yystate.yyloc)); (*yyvalp).ttype = finish_boolean_binary_op (TRUTH_AND_EXPR, yyvsp[-3].yystate.yysemantics.yysval.ttype, yyvsp[0].yystate.yysemantics.yysval.ttype, yyvsp[-1].yystate.yysemantics.yysval.ttype); ;}
d7154 1
a7154 1
    { (*yyvalp).ttype = start_boolean_binary_op (TRUTH_ANDIF_EXPR, yyvsp[-1].yystate.yysemantics.yysval.ttype); ;}
d7159 1
a7159 1
    { if (yyvsp[-1].yystate.yysemantics.yysval.ttype) LOCATION_NOTE (COPYLOC ((*yylocp), yyvsp[0].yystate.yyloc)); (*yyvalp).ttype = finish_boolean_binary_op (TRUTH_ANDIF_EXPR, yyvsp[-3].yystate.yysemantics.yysval.ttype, yyvsp[0].yystate.yysemantics.yysval.ttype, yyvsp[-1].yystate.yysemantics.yysval.ttype); ;}
d7164 1
a7164 1
    { (*yyvalp).ttype = build_operator_call (yyvsp[-1].yystate.yysemantics.yysval.ttype, yyvsp[-2].yystate.yysemantics.yysval.ttype, yyvsp[0].yystate.yysemantics.yysval.ttype, 0); ;}
d7169 1
a7169 1
    { (*yyvalp).ttype = parser_build_binary_op (POW_EXPR, yyvsp[-2].yystate.yysemantics.yysval.ttype, yyvsp[0].yystate.yysemantics.yysval.ttype); ;}
d7174 1
a7174 1
    { (*yyvalp).ttype = parser_build_binary_op (POWER_EXPR, yyvsp[-2].yystate.yysemantics.yysval.ttype, yyvsp[0].yystate.yysemantics.yysval.ttype); ;}
d7179 1
a7179 1
    { (*yyvalp).ttype = build_is_as (yyvsp[-2].yystate.yysemantics.yysval.ttype, yyvsp[0].yystate.yysemantics.yysval.ttype, p_is); ;}
d7184 1
a7184 1
    { (*yyvalp).ttype = build_is_as (yyvsp[-2].yystate.yysemantics.yysval.ttype, yyvsp[0].yystate.yysemantics.yysval.ttype, p_as); ;}
d7189 1
a7189 1
    { (*yyvalp).ttype = set_exp_original_code (build_pascal_unary_op (yyvsp[-1].yystate.yysemantics.yysval.code, yyvsp[0].yystate.yysemantics.yysval.ttype), yyvsp[-1].yystate.yysemantics.yysval.code); ;}
d7196 1
a7196 1
        (*yyvalp).ttype = build_pascal_address_expression (yyvsp[0].yystate.yysemantics.yysval.ttype, !co->typed_address);
d7217 1
a7217 1
    { iso_no_parentheses (yyvsp[0].yystate.yysemantics.yysval.ttype); ;}
d7222 1
a7222 1
    { (*yyvalp).ttype = build_predef_call (IDENTIFIER_BUILT_IN_VALUE (yyvsp[-1].yystate.yysemantics.yysval.ttype)->symbol, yyvsp[0].yystate.yysemantics.yysval.ttype); ;}
d7227 1
a7227 1
    { (*yyvalp).ttype = get_builtin_variable (yyvsp[0].yystate.yysemantics.yysval.ttype); ;}
d7232 1
a7232 1
    { (*yyvalp).ttype = build_inherited_method (yyvsp[0].yystate.yysemantics.yysval.ttype); ;}
d7237 1
a7237 1
    { (*yyvalp).ttype = build_component_ref (undo_schema_dereference (yyvsp[-2].yystate.yysemantics.yysval.ttype), yyvsp[0].yystate.yysemantics.yysval.ttype); ;}
d7243 1
a7243 1
        (*yyvalp).ttype = set_exp_original_code (yyvsp[-1].yystate.yysemantics.yysval.ttype, NOP_EXPR);
d7256 1
a7256 1
    { (*yyvalp).ttype = build_pascal_pointer_reference (yyvsp[-1].yystate.yysemantics.yysval.ttype); ;}
d7261 1
a7261 1
    { (*yyvalp).ttype = build_pascal_array_ref (yyvsp[-3].yystate.yysemantics.yysval.ttype, yyvsp[-1].yystate.yysemantics.yysval.ttype); ;}
d7266 1
a7266 1
    { yyvsp[0].yystate.yysemantics.yysval.itype = allow_function_calls (0); ;}
d7272 2
a7273 2
        allow_function_calls (yyvsp[-3].yystate.yysemantics.yysval.itype);
        if (yyvsp[-4].yystate.yysemantics.yysval.ttype && TREE_CODE (yyvsp[-4].yystate.yysemantics.yysval.ttype) == TYPE_DECL)
d7276 1
a7276 1
            if (list_length (yyvsp[-1].yystate.yysemantics.yysval.ttype) != 1)
d7282 1
a7282 1
              (*yyvalp).ttype = build_type_cast (TREE_TYPE (yyvsp[-4].yystate.yysemantics.yysval.ttype), TREE_VALUE (yyvsp[-1].yystate.yysemantics.yysval.ttype));
d7284 2
a7285 2
        else if (CALL_METHOD (yyvsp[-4].yystate.yysemantics.yysval.ttype))
          (*yyvalp).ttype = call_method (yyvsp[-4].yystate.yysemantics.yysval.ttype, yyvsp[-1].yystate.yysemantics.yysval.ttype);
d7287 1
a7287 1
          (*yyvalp).ttype = build_routine_call (yyvsp[-4].yystate.yysemantics.yysval.ttype, yyvsp[-1].yystate.yysemantics.yysval.ttype);
d7293 1
a7293 1
    { chk_dialect ("type casts are", B_D_M_PASCAL); (*yyvalp).ttype = build_type_cast (yyvsp[-3].yystate.yysemantics.yysval.ttype, yyvsp[-1].yystate.yysemantics.yysval.ttype); ;}
d7298 1
a7298 1
    { (*yyvalp).ttype = build_predef_call (p_FormatString, yyvsp[-1].yystate.yysemantics.yysval.ttype); ;}
d7309 2
a7310 2
        (*yyvalp).ttype = build_predef_call (p_Assigned, build_tree_list (NULL_TREE, yyvsp[-1].yystate.yysemantics.yysval.ttype));
        allow_function_calls (yyvsp[-3].yystate.yysemantics.yysval.itype);
d7316 1
a7316 1
    { (*yyvalp).ttype = build_pascal_address_expression (yyvsp[-1].yystate.yysemantics.yysval.ttype, co->pascal_dialect & B_D_PASCAL); ;}
d7321 1
a7321 1
    { (*yyvalp).ttype = build_predef_call (IDENTIFIER_BUILT_IN_VALUE (yyvsp[-3].yystate.yysemantics.yysval.ttype)->symbol, build_tree_list (NULL_TREE, yyvsp[-1].yystate.yysemantics.yysval.ttype)); ;}
d7327 2
a7328 2
        iso_no_parentheses (yyvsp[-1].yystate.yysemantics.yysval.ttype);
        (*yyvalp).ttype = build_predef_call (p_New, build_tree_list (NULL_TREE, yyvsp[-1].yystate.yysemantics.yysval.ttype));
d7336 1
a7336 1
        if (TREE_CODE (TREE_TYPE (yyvsp[-1].yystate.yysemantics.yysval.ttype)) == POINTER_TYPE && PASCAL_TYPE_OBJECT (TREE_TYPE (TREE_TYPE (yyvsp[-1].yystate.yysemantics.yysval.ttype))))
d7338 3
a7340 3
            if (TREE_CODE (yyvsp[-1].yystate.yysemantics.yysval.ttype) == TYPE_DECL)
              yyvsp[-1].yystate.yysemantics.yysval.ttype = make_new_variable ("self", TREE_TYPE (yyvsp[-1].yystate.yysemantics.yysval.ttype));
            (*yyvalp).ttype = pascal_shadow_record_fields (build_indirect_ref (yyvsp[-1].yystate.yysemantics.yysval.ttype, "`New'"), NULL_TREE, 1);
d7348 2
a7349 2
        restore_identifiers (yyvsp[-2].yystate.yysemantics.yysval.ttype);
        (*yyvalp).ttype = build_predef_call (p_New, tree_cons (NULL_TREE, yyvsp[-4].yystate.yysemantics.yysval.ttype, yyvsp[-1].yystate.yysemantics.yysval.ttype));
d7355 1
a7355 1
    { (*yyvalp).ttype = TYPE_NAME (yyvsp[0].yystate.yysemantics.yysval.ttype); ;}
d7360 1
a7360 1
    { (*yyvalp).ttype = chainon (yyvsp[-2].yystate.yysemantics.yysval.ttype, yyvsp[0].yystate.yysemantics.yysval.ttype); yyerrok; ;}
d7370 1
a7370 1
    { (*yyvalp).ttype = chainon (yyvsp[-2].yystate.yysemantics.yysval.ttype, yyvsp[0].yystate.yysemantics.yysval.ttype); error ("missing comma"); yyerrok; ;}
d7380 1
a7380 1
    { (*yyvalp).ttype = build_tree_list (NULL_TREE, string_may_be_char (yyvsp[0].yystate.yysemantics.yysval.ttype, 1)); ;}
d7387 1
a7387 1
        (*yyvalp).ttype = build_tree_list (string_may_be_char (yyvsp[0].yystate.yysemantics.yysval.ttype, 1), string_may_be_char (yyvsp[-2].yystate.yysemantics.yysval.ttype, 1));
d7398 1
a7398 1
    { (*yyvalp).ttype = build_set_constructor (yyvsp[-1].yystate.yysemantics.yysval.ttype); ;}
d7403 1
a7403 1
    { (*yyvalp).ttype = chainon (yyvsp[-2].yystate.yysemantics.yysval.ttype, yyvsp[0].yystate.yysemantics.yysval.ttype); yyerrok; ;}
d7408 1
a7408 1
    { (*yyvalp).ttype = chainon (yyvsp[-2].yystate.yysemantics.yysval.ttype, yyvsp[0].yystate.yysemantics.yysval.ttype); error ("missing comma"); yyerrok; ;}
d7418 1
a7418 1
    { (*yyvalp).ttype = construct_set_member (yyvsp[0].yystate.yysemantics.yysval.ttype, NULL_TREE); ;}
d7423 1
a7423 1
    { (*yyvalp).ttype = construct_set_member (yyvsp[-2].yystate.yysemantics.yysval.ttype, yyvsp[0].yystate.yysemantics.yysval.ttype); ;}
d7608 1
a7608 1
    { (*yyvalp).itype = IDENTIFIER_BUILT_IN_VALUE (yyvsp[0].yystate.yysemantics.yysval.ttype)->symbol; ;}
d7753 1
a7753 1
    { (*yyvalp).ttype = check_identifier (yyvsp[0].yystate.yysemantics.yysval.ttype); ;}
d7760 1
a7760 1
        c[0] = yyvsp[0].yystate.yysemantics.yysval.itype;
d7793 1
a7793 1
    { ASSERT_ID (yyvsp[0].yystate.yysemantics.yysval.ttype, yyvsp[0].yystate.yyloc, p_protected); ;}
d7827 1
a7827 1
     }
d7829 1
a7829 1
   return yyok;
d7837 2
a7838 2
/* Line 671 of glr.c.  */
#line 7745 "parse.c"
d7845 2
a7846 1
  YYSTYPE yyval = *yy0;
d7898 1
a7898 1
static inline bool
d7955 1
a7955 1
static inline bool
d7961 1
a7961 1
static inline bool
d7994 1
a7994 1
  yyset->yystates = (yyGLRState**) malloc (16 * sizeof (yyset->yystates[0]));
d8000 1
a8000 1
  free (yyset->yystates);
d8013 1
a8013 1
    (yyGLRStackItem*) malloc (yysize * sizeof (yystack->yynextFree[0]));
d8047 1
a8047 1
      if (*(bool*) yyp0)
d8077 1
a8077 1
  free (yystack->yyitems);
d8091 1
a8091 1
  free (yystack->yyitems);
d8148 2
a8149 1
	      YYDPRINTF ((stderr, "Rename stack %d -> %d.\n", yyi, yyj));
d8180 3
a8182 3
/** Shift to a new state on stack #K of STACK, to a new state
 *  corresponding to LR state LRSTATE, at input position POSN, with
 * the (unresolved) semantic value of RHS under the action for RULE. */
d8218 1
a8218 2
      if (yyk != 0)
	abort ();
a8221 10
      if (yynrhs == 0)
	{
	  *yyvalp = yyval_default;
	  *yylocp = yyloc_default;
	}
      else
	{
	  *yyvalp = rhs[1-yynrhs].yystate.yysemantics.yysval;
	  *yylocp = rhs[1-yynrhs].yystate.yyloc;
	}
d8229 4
a8232 3
      yyGLRStackItem yyrhsVals[YYMAXRHS];
      for (yyi = yynrhs-1, yys = yystack->yytops.yystates[yyk]; 0 <= yyi;
	   yyi -= 1, yys = yys->yypred)
d8234 2
a8235 5
	  if (! yys->yypred)
	    abort ();
	  yyrhsVals[yyi].yystate.yyresolved = yytrue;
	  yyrhsVals[yyi].yystate.yysemantics.yysval = yys->yysemantics.yysval;
	  yyrhsVals[yyi].yystate.yyloc = yys->yyloc;
d8239 1
a8239 11
      if (yynrhs == 0)
	{
	  *yyvalp = yyval_default;
	  *yylocp = yyloc_default;
	}
      else
	{
	  *yyvalp = yyrhsVals[0].yystate.yysemantics.yysval;
	  *yylocp = yyrhsVals[0].yystate.yyloc;
	}
      return yyuserAction (yyrule, yynrhs, yyrhsVals + (yynrhs-1),
d8261 3
a8263 3
  unsigned int yylineno = yyrline[yyrule];
  YYFPRINTF (stderr, "Reducing stack %d by rule %d (line %u), ",
	     yyk, yyrule - 1, yylineno);
d8284 1
a8284 1
             bool yyforceEval)
d8311 1
a8311 2
	  if (! yys)
	    abort ();
d8316 2
a8317 3
		  "Reduced stack %d by rule #%d; action deferred. "
		  "Now in state %d.\n",
		  yyk, yyrule-1, yynewLRState));
d8329 3
a8331 2
		    YYDPRINTF ((stderr, "Merging stack %d into stack %d.\n",
				yyk, yyi));
d8348 1
a8348 2
      if (yyk != 0)
	abort ();
d8355 1
a8355 1
	(yyGLRState**) realloc (yystack->yytops.yystates,
d8368 1
a8368 1
static bool
d8446 1
a8446 2
      if (! yys->yypred)
	abort ();
d8467 2
a8468 3
  yyGLRStackItem yyrhsVals[YYMAXRHS];
  int yynrhs, yyi;
  yyGLRState* yys;
d8472 3
a8474 10
  for (yyi = yynrhs-1, yys = yyopt->yystate; 0 <= yyi;
       yyi -= 1, yys = yys->yypred)
    {
      if (! yys->yypred)
	abort ();
      yyrhsVals[yyi].yystate.yyresolved = yytrue;
      yyrhsVals[yyi].yystate.yysemantics.yysval = yys->yysemantics.yysval;
      yyrhsVals[yyi].yystate.yyloc = yys->yyloc;
    }
  return yyuserAction (yyopt->yyrule, yynrhs, yyrhsVals + (yynrhs-1),
d8503 1
a8503 1
    YYFPRINTF (stderr, "%*s%s -> <Rule %d, tokens %d .. %d>\n",
d8505 2
a8506 1
	       yyx->yyrule, yys->yyposn+1, yyx->yystate->yyposn);
d8515 1
a8515 1
	    YYFPRINTF (stderr, "%*s%s <tokens %d .. %d>\n", yyindent+2, "",
d8517 2
a8518 1
		       yystates[yyi-1]->yyposn+1, yystates[yyi]->yyposn);
d8663 2
a8664 2
      if (yystate == YYFINAL)
	abort ();
d8734 1
a8734 5
      int yyn, yyx, yycount;
      size_t yysize;
      const char* yyprefix;
      char* yyp;
      char* yymsg;
d8738 5
a8742 1
	  yycount = 0;
d8745 7
a8751 2
	  yysize = sizeof ("syntax error, unexpected ")
	    + strlen (yytokenName (*yytokenp));
d8753 1
a8753 2
	  for (yyx = yyn < 0 ? -yyn : 0; yyx < yytname_size && yycount <= 5;
	       yyx += 1)
d8755 4
a8758 11
	      yysize += strlen (yytokenName (yyx)) + strlen (yyprefix),
		yycount += 1, yyprefix = " or ";
	  yymsg = yyp = (char*) malloc (yysize);
	  sprintf (yyp, "syntax error, unexpected %s",
		   yytokenName (*yytokenp));
	  yyp += strlen (yyp);
	  if (yycount < 5)
	    {
	      yyprefix = ", expecting ";
	      for (yyx = yyn < 0 ? -yyn : 0; yyx < yytname_size; yyx += 1)
		if (yycheck[yyx + yyn] == yyx && yyx != YYTERROR)
d8760 2
a8761 3
		    sprintf (yyp, "%s%s", yyprefix, yytokenName (yyx));
		    yyp += strlen (yyp);
		    yyprefix = " or ";
d8763 24
d8788 2
a8789 2
	  yyerror (yymsg);
	  free (yymsg);
d8792 1
a8792 1
#endif
d8809 1
a8809 3
  if (yystack->yyerrState == 0)
    yystack->yyerrState = 3;
  else if (yystack->yyerrState == 3)
d8816 1
a8816 2
	    /* Now pop stack until we find a state that shifts the
	       error token.  */
d8842 1
a8842 2
	  /* Something's not right; we shouldn't be here.  */
	  yyFail (yystack, NULL);
d8865 1
d9082 1
a9082 1
      if (*(bool*) yyp)
@


1.2
log
@apparently final cleanup
 * forgotten commit in etc/Makefile adjusting for path changes
 * cleanup in Pascal
 * move common parts for all gcc-suite into common file
@
text
@d1 1
a1 1
/* A Bison parser, made by GNU Bison 1.875b.  */
d4 1
a4 1
   Copyright (C) 2002, 2003 Free Software Foundation, Inc.
d336 2
a337 2
/* Line 187 of glr.c.  */
#line 338 "parse.c"
a344 1

a348 1

d365 2
a366 2
/* Line 217 of glr.c.  */
#line 369 "parse.c"
d368 4
a371 4
#ifdef __cplusplus
   typedef bool yybool;
#else
   typedef unsigned char yybool;
a372 2
#define yytrue 1
#define yyfalse 0
a385 40
#ifndef YYASSERT
# define YYASSERT(condition) ((void) ((condition) || (abort (), 0)))
#endif

#ifndef YYMALLOC
# define YYMALLOC malloc
#endif
#ifndef YYREALLOC
# define YYREALLOC realloc
#endif
#ifndef YYFREE
# define YYFREE free
#endif

#ifdef YYSTACK_USE_ALLOCA
# if YYSTACK_USE_ALLOCA
#  define YYSTACK_ALLOC alloca
# endif
#else
# if defined (alloca) || defined (_ALLOCA_H)
#  define YYSTACK_ALLOC alloca
# else
#  ifdef __GNUC__
#   define YYSTACK_ALLOC __builtin_alloca
#  endif
# endif
#endif

#ifdef YYSTACK_ALLOC
  /* Pacify GCC's `empty if-body' warning. */
# define YYSTACK_FREE(Ptr) do { /* empty */; } while (0)
#else
# if defined (__STDC__) || defined (__cplusplus)
#  include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#  define YYSIZE_T size_t
# endif
# define YYSTACK_ALLOC YYMALLOC
# define YYSTACK_FREE YYFREE
#endif

a404 3
/* YYMAXLEFT -- Maximum number of symbols to the left of a handle
   accessed by $0, $-1, etc., in any rule. */
#define YYMAXLEFT 0
d883 117
a999 116
  "$end", "error", "$undefined", "prec_if", "prec_lower_than_error",
  "prec_import", "p_operator", "p_destructor", "p_constructor",
  "p_implementation", "p_uses", "p_else", "p_and", "p_array", "p_begin",
  "p_case", "p_div", "p_do", "p_downto", "p_end", "p_file", "p_for",
  "p_function", "p_goto", "p_if", "p_in", "p_label", "p_mod", "p_nil",
  "p_not", "p_of", "p_or", "p_packed", "p_procedure", "p_to", "p_program",
  "p_record", "p_repeat", "p_set", "p_then", "p_type", "p_until", "p_var",
  "p_while", "p_with", "p_absolute", "p_abstract", "p_and_then", "p_as",
  "p_asm", "p_attribute", "p_bindable", "p_const", "p_external", "p_far",
  "p_finalization", "p_forward", "p_import", "p_inherited",
  "p_initialization", "p_is", "p_near", "p_object", "p_only",
  "p_otherwise", "p_or_else", "p_pow", "p_restricted", "p_shl", "p_shr",
  "p_unit", "p_value", "p_virtual", "p_xor", "p_asmname", "p_c",
  "p_c_language", "p_Addr", "p_Assigned", "p_Dispose", "p_FormatString",
  "p_New", "p_Return", "LEX_ID", "LEX_BUILTIN_PROCEDURE",
  "LEX_BUILTIN_PROCEDURE_WRITE", "LEX_BUILTIN_FUNCTION",
  "LEX_BUILTIN_FUNCTION_VT", "LEX_BUILTIN_VARIABLE", "LEX_INTCONST",
  "LEX_INTCONST_BASE", "LEX_STRCONST", "LEX_REALCONST", "LEX_CARET_WHITE",
  "LEX_CARET_LETTER", "BOGUS", "LEX_CONST_EQUAL", "LEX_RPAR", "LEX_BPPLUS",
  "LEX_BPMINUS", "LEX_RANGE", "LEX_ELLIPSIS", "LEX_RENAME", "LEX_SYMDIFF",
  "LEX_ASSIGN", "LEX_NE", "LEX_GE", "LEX_LE", "LEX_POWER", "LEX_CEIL_PLUS",
  "LEX_CEIL_MINUS", "LEX_FLOOR_PLUS", "LEX_FLOOR_MINUS", "LEX_CEIL_MULT",
  "LEX_CEIL_DIV", "LEX_FLOOR_MULT", "LEX_FLOOR_DIV", "';'", "'('", "','",
  "':'", "'^'", "'.'", "')'", "'['", "']'", "'+'", "'-'", "'*'", "'/'",
  "'<'", "'='", "'>'", "'@@'", "$accept", "program_component",
  "program_component_1", "@@1", "@@2", "optional_program_heading",
  "declarations_and_uses", "declaration_or_uses", "any_declaration_part",
  "any_decl", "@@3", "simple_decl", "simple_decl_1", "@@4",
  "module_declaration", "@@5", "@@6", "@@7", "@@8", "@@9", "@@10",
  "interface_module", "@@11", "@@12", "module_interface", "@@13",
  "implementatation_module", "@@14", "optional_unit_implementation",
  "module", "optional_module_parameters", "optional_module_attributes",
  "interface_decl_part", "interface_decl", "implementation_decls",
  "implementation_decl", "@@15", "module_block", "@@16", "@@17",
  "optional_init_and_final_part", "module_constructor", "@@18",
  "module_destructor", "@@19", "rest_of_unit_constructor", "@@20",
  "optional_unit_init_and_final_part", "@@21", "optional_par_id_list",
  "id_list", "id_list1", "id_list_limited", "export_part_list",
  "export_part", "equals_or_error", "export_list_or_all", "export_all",
  "export_list", "export_list_item", "optional_rename",
  "optional_import_part", "@@22", "import_specification_list", "uses_part",
  "uses_list", "import_specification", "optional_access_qualifier",
  "optional_import_qualifier", "optional_unit_filename",
  "import_clause_list", "import_clause", "label_list", "new_label",
  "label", "num_label", "constant_definition_list", "constant_definition",
  "unsigned_number", "intconst", "constant_literal", "combined_string",
  "optional_combined_string", "string_constant", "caret_chars",
  "string_constants", "type_definition_list", "type_definition", "@@23",
  "@@24", "formal_schema_discriminants", "discriminant_specification_list",
  "discriminant_specification", "type_denoter_with_attributes",
  "type_denoter_no_init", "type_denoter", "type_denoter_1",
  "type_denoter_0", "packed", "typename_or_string255", "typename",
  "actual_schema_discriminants", "discriminant_expression_list",
  "new_ordinal_type", "enumerated_type", "conflict_id", "enum_list",
  "lower_bound", "subrange_type", "new_pointer_type",
  "pointer_domain_type", "new_procedural_type",
  "optional_procedural_type_formal_parameter_list",
  "procedural_type_formal_parameter_list",
  "procedural_type_formal_parameter", "unpacked_structured_type",
  "array_type", "array_index_list", "ordinal_index_type", "file_type",
  "untyped_file", "direct_access_index_type", "set_type", "record_type",
  "record_field_list", "fixed_part", "record_section", "variant_part",
  "variant_selector", "new_ordinal_type_non_iso", "rest_of_variant",
  "variant_list", "variant", "case_constant_list", "one_case_constant",
  "type_inquiry", "optional_abstract", "object_parent",
  "object_field_list", "object_field_list_1", "object_section",
  "variable_declaration_list", "variable_declaration", "@@25",
  "optional_variable_directive_list", "variable_directive", "@@26",
  "optional_variable_directive_list_no_external",
  "variable_directive_no_external", "attributes", "attribute_list",
  "attrib", "var_init", "optional_value_specification",
  "absolute_or_value_specification", "@@27", "initializer_expression",
  "@@28", "initializer_expression_0", "static_initializer_expression",
  "structured_bp_initializer", "bp_initializer_list",
  "initializer_separator", "bp_initializer_expression",
  "structured_iso_initializer", "iso_initializer_list",
  "iso_initializer_expression", "initializer_field",
  "routine_interface_decl", "routine_declaration", "@@29", "@@30",
  "routine_or_method_heading", "routine_heading", "method_heading",
  "optional_routine_interface_directive_list", "remote_directive_list",
  "remote_directive", "@@31", "optional_routine_directive_list",
  "bp_directive", "operator_identifier", "optional_result_def",
  "optional_result_equals", "operator_result_def", "resulttype",
  "optional_formal_parameter_list", "formal_parameter_list",
  "formal_parameter", "fp_routine_heading", "optional_protected",
  "optional_parameter_form", "parameter_form", "conformant_array",
  "typename_or_conformant_array", "index_type_specification_list",
  "index_type_specification", "open_array", "typename_or_untyped_file",
  "compound_statement", "statement_sequence", "empty_lte",
  "optional_statement", "statement", "unlabelled_statement", "set_label",
  "statement_var_decl", "with_statement", "with_list", "with_variable",
  "simple_if", "@@32", "if_statement", "@@33", "case_statement", "@@34",
  "@@35", "optional_case_default", "otherwise", "case_element_list",
  "case_element", "@@36", "repeat_statement", "@@37", "@@38",
  "while_statement", "@@39", "@@40", "for_statement", "@@41", "@@42",
  "for_direction", "assignment_or_call_statement", "@@43",
  "start_of_statement", "rest_of_statement", "assign",
  "standard_procedure_statement", "@@44", "optional_actual_parameter_list",
  "@@45", "actual_parameter_list", "write_actual_parameter_list",
  "write_actual_parameter", "asm_statement", "asm_qualifier",
  "asm_operands", "nonempty_asm_operands", "asm_operand", "asm_clobbers",
  "static_expression", "boolean_expression", "expression_no_par",
  "expression", "simple_expression", "@@46", "@@47", "term", "@@48", "@@49",
  "factor", "primary", "variable_or_routine_access_no_parentheses",
  "variable_or_routine_access",
  "variable_or_routine_access_no_builtin_function", "@@50", "@@51", "@@52",
  "variable_or_typename", "index_expression_list", "index_expression_item",
  "set_constructor", "set_constructor_element_list", "member_designator",
  "sign", "unary_operator", "relational_operator", "adding_operator",
  "pxsc_adding_operator", "or_else", "multiplying_operator",
  "pxsc_multiplying_operator", "and_then", "builtin_proc",
  "operator_symbol", "new_identifier", "new_identifier_1",
  "new_identifier_limited_par", "new_identifier_limited_par_1",
  "new_identifier_limited", "new_identifier_limited_1", "identifier", "id",
  "caret_letter", "pushlevel", "poplevel", "setspecs", "enable_lce",
  "i_protected", "optional_semicolon", "pointer_char", "equals", "rpar",
d1002 2
d4277 1
a4277 2

#define YYRHSLOC(yyRhs,YYK) ((yyRhs)[YYK].yystate.yyloc)
d4281 4
a4284 4
  (yyCurrent).first_line   = YYRHSLOC(yyRhs,1).first_line;	\
  (yyCurrent).first_column = YYRHSLOC(yyRhs,1).first_column;	\
  (yyCurrent).last_line    = YYRHSLOC(yyRhs,YYN).last_line;	\
  (yyCurrent).last_column  = YYRHSLOC(yyRhs,YYN).last_column;
a4286 2


d4407 1
a4407 2
	 || (defined (YYLTYPE_IS_TRIVIAL) && YYLTYPE_IS_TRIVIAL \
	     && defined (YYSTYPE_IS_TRIVIAL) && YYSTYPE_IS_TRIVIAL)))
d4432 2
a4433 2
  yybool yyisState;
  yybool yyresolved;
d4450 1
a4450 1
  yybool yyisState;
a4503 37
/** Fill in YYVSP[YYLOW1 .. YYLOW0-1] from the chain of states starting
 *  at YYVSP[YYLOW0].yystate.yypred.  Leaves YYVSP[YYLOW1].yystate.yypred
 *  containing the pointer to the next state in the chain. Assumes
 *  YYLOW1 < YYLOW0.  */
static void yyfillin (yyGLRStackItem *, int, int) ATTRIBUTE_UNUSED;
static void
yyfillin (yyGLRStackItem *yyvsp, int yylow0, int yylow1)
{
  yyGLRState* s;
  int i;
  s = yyvsp[yylow0].yystate.yypred;
  for (i = yylow0-1; i >= yylow1; i -= 1)
    {
      YYASSERT (s->yyresolved);
      yyvsp[i].yystate.yyresolved = yytrue;
      yyvsp[i].yystate.yysemantics.yysval = s->yysemantics.yysval;
      yyvsp[i].yystate.yyloc = s->yyloc;
      s = yyvsp[i].yystate.yypred = s->yypred;
    }
}

/* Do nothing if YYNORMAL or if *YYLOW <= YYLOW1.  Otherwise, fill in
   YYVSP[YYLOW1 .. *YYLOW-1] as in yyfillin and set *YYLOW = YYLOW1.
   For convenience, always return YYLOW1.  */
static inline int yyfill (yyGLRStackItem *, int *, int, yybool)
     ATTRIBUTE_UNUSED;
static inline int
yyfill (yyGLRStackItem *yyvsp, int *yylow, int yylow1, yybool yynormal)
{
  if (!yynormal && yylow1 < *yylow)
    {
      yyfillin (yyvsp, *yylow, yylow1);
      *yylow = yylow1;
    }
  return yylow1;
}

d4514 2
a4515 2
  yybool yynormal ATTRIBUTE_UNUSED = (yystack->yysplitPoint == NULL);
  int yylow;
d4517 10
d4534 1
a4534 1
# define YYERROR do { yystack->yyerrState = 0; return yyerr; } while (0)
a4538 2
# undef YYFILL
# define YYFILL(N) yyfill (yyvsp, &yylow, N, yynormal)
a4545 12
  yylow = 1;
  if (yyrhslen == 0)
    {
      *yyvalp = yyval_default;
      *yylocp = yyloc_default;
    }
  else
    {
      *yyvalp = yyvsp[YYFILL (1-yyrhslen)].yystate.yysemantics.yysval;
      YYLLOC_DEFAULT (*yylocp, yyvsp - yyrhslen, yyrhslen);
    }

d4547 3
a4549 3
  switch (yyn)
    {
        case 2:
d4567 1
a4567 1
    { initialize_module (TREE_PURPOSE (yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype), build_tree_list (yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype ? TREE_PURPOSE (yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype) : NULL_TREE, TREE_VALUE (yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype)), 0); ;}
d4592 1
a4592 1
    { (*yyvalp).ttype = build_tree_list (yyvsp[YYFILL (-2)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype); ;}
d4597 1
a4597 1
    { (*yyvalp).ttype = build_tree_list (NULL_TREE, yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype); ;}
d4607 1
a4607 1
    { (*yyvalp).itype = check_decl_order (yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.itype, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.itype); ;}
d4617 1
a4617 1
    { (*yyvalp).itype = check_decl_order (yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.itype, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.itype); ;}
d4627 1
a4627 1
    { (*yyvalp).itype = yyvsp[YYFILL (0)].yystate.yysemantics.yysval.itype; ;}
d4646 1
a4646 1
        (*yyvalp).itype = yyvsp[YYFILL (0)].yystate.yysemantics.yysval.itype;
d4672 1
a4672 1
    { ASSERT_ID (yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (0)].yystate.yyloc, p_interface); initialize_module (yyvsp[YYFILL (-3)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype, 1); ;}
d4701 1
a4701 1
        if (yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype && current_module->name != yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype)
d4703 1
a4703 1
                 IDENTIFIER_NAME (current_module->name), IDENTIFIER_NAME (yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype));
d4709 1
a4709 1
    { initialize_module (yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype, 2); ;}
d4722 1
a4722 1
    { initialize_module (yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype, 4); ;}
d4727 1
a4727 1
    { ASSERT_ID (yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (0)].yystate.yyloc, p_interface); ;}
d4732 1
a4732 1
    { initialize_module (yyvsp[YYFILL (-3)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype, 2); ;}
d4742 1
a4742 1
    { ASSERT_ID (yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (0)].yystate.yyloc, p_export); start_module_interface (); ;}
d4752 1
a4752 1
    { initialize_module (yyvsp[YYFILL (-2)].yystate.yysemantics.yysval.ttype, NULL_TREE, 3); ;}
d4767 1
a4767 1
    { ASSERT_ID (yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (0)].yystate.yyloc, p_module); ;}
d4772 1
a4772 1
    { (*yyvalp).ttype = build_tree_list (yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype ? TREE_PURPOSE (yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype) : NULL_TREE, yyvsp[YYFILL (-2)].yystate.yysemantics.yysval.ttype); ;}
d4782 1
a4782 1
    { (*yyvalp).itype = check_decl_order (yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.itype, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.itype); ;}
d4797 1
a4797 1
    { (*yyvalp).itype = check_decl_order (yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.itype, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.itype); ;}
d4807 1
a4807 1
    { (*yyvalp).itype = yyvsp[YYFILL (0)].yystate.yysemantics.yysval.itype; ;}
d4872 1
a4872 1
    { (*yyvalp).ttype = yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype; ;}
d4878 1
a4878 1
        tree *a = &yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype, b;
d4890 1
a4890 1
        (*yyvalp).ttype = nreverse (yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype);
d4896 1
a4896 1
    { (*yyvalp).ttype = build_tree_list (NULL_TREE, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype); ;}
d4901 1
a4901 1
    { (*yyvalp).ttype = tree_cons (NULL_TREE, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (-2)].yystate.yysemantics.yysval.ttype); ;}
d4907 2
a4908 2
        (*yyvalp).ttype = tree_cons (NULL_TREE, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (-2)].yystate.yysemantics.yysval.ttype);
        error ("comma missing after `%s'", IDENTIFIER_NAME (TREE_VALUE (yyvsp[YYFILL (-2)].yystate.yysemantics.yysval.ttype)));
d4920 1
a4920 1
    { (*yyvalp).ttype = build_tree_list (NULL_TREE, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype); ;}
d4925 1
a4925 1
    { (*yyvalp).ttype = tree_cons (NULL_TREE, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (-2)].yystate.yysemantics.yysval.ttype); ;}
d4950 1
a4950 1
    { export_interface (yyvsp[YYFILL (-2)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype); ;}
d4960 1
a4960 1
    { (*yyvalp).ttype = yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype; ;}
d4965 1
a4965 1
    { (*yyvalp).ttype = chainon (yyvsp[YYFILL (-3)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype); ;}
d4970 1
a4970 1
    { ASSERT_ID (yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (0)].yystate.yyloc, p_all); (*yyvalp).ttype = build_tree_list (NULL_TREE, NULL_TREE); ;}
d4975 1
a4975 1
    { (*yyvalp).ttype = chainon (yyvsp[YYFILL (-2)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype); ;}
d4995 1
a4995 1
    { (*yyvalp).ttype = build_tree_list (yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype); ;}
d5000 1
a5000 1
    { (*yyvalp).ttype = build_tree_list (NULL_TREE, build_tree_list (yyvsp[YYFILL (-2)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype)); ;}
d5006 1
a5006 1
        (*yyvalp).ttype = build_tree_list (yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype);
d5013 1
a5013 1
    { (*yyvalp).ttype = yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype; ;}
d5043 1
a5043 1
    { import_interface (yyvsp[YYFILL (-3)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (-2)].yystate.yysemantics.yysval.itype, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype); ;}
d5053 1
a5053 1
    { ASSERT_ID (yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (0)].yystate.yyloc, p_qualified); (*yyvalp).itype = 1; ;}
d5058 1
a5058 1
    { (*yyvalp).ttype = build_tree_list (NULL_TREE, yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype); ;}
d5063 1
a5063 1
    { (*yyvalp).ttype = build_tree_list (yyvsp[YYFILL (-3)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype); ;}
d5068 1
a5068 1
    { (*yyvalp).ttype = yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype; chk_dialect ("file name specification with `in' is", BORLAND_DELPHI); ;}
d5073 1
a5073 1
    { (*yyvalp).ttype = chainon (yyvsp[YYFILL (-2)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype); ;}
d5083 1
a5083 1
    { error ("missing comma"); (*yyvalp).ttype = chainon (yyvsp[YYFILL (-2)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype); ;}
d5093 1
a5093 1
    { (*yyvalp).ttype = build_tree_list (yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype); ;}
d5098 1
a5098 1
    { declare_label (yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype); ;}
d5103 1
a5103 1
    { declare_label (yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype); ;}
d5113 1
a5113 1
    { declare_label (yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype); error ("missing comma"); yyerrok; ;}
d5128 1
a5128 1
    { (*yyvalp).ttype = numeric_label (yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype); ;}
d5133 1
a5133 1
    { declare_constant (yyvsp[YYFILL (-3)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype); ;}
d5140 1
a5140 1
        declare_variables (build_tree_list (NULL_TREE, yyvsp[YYFILL (-7)].yystate.yysemantics.yysval.ttype), yyvsp[YYFILL (-4)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (-2)].yystate.yysemantics.yysval.ttype, VQ_BP_CONST, yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype);
d5151 1
a5151 1
    { (*yyvalp).ttype = combine_strings (yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype, 1); ;}
d5156 1
a5156 1
    { (*yyvalp).ttype = build_caret_string_constant (yyvsp[YYFILL (0)].yystate.yysemantics.yysval.itype); ;}
d5161 1
a5161 1
    { (*yyvalp).ttype = build_tree_list (NULL_TREE, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype); ;}
d5166 1
a5166 1
    { (*yyvalp).ttype = chainon (yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype, build_tree_list (NULL_TREE, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype)); ;}
d5188 1
a5188 1
        if (!EM (yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype))
d5190 1
a5190 1
            if (PASCAL_TYPE_UNDISCRIMINATED_SCHEMA (yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype))
d5192 1
a5192 1
            build_type_decl (yyvsp[YYFILL (-4)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype);
d5209 2
a5210 2
        build_type_decl (yyvsp[YYFILL (-5)].yystate.yysemantics.yysval.ttype, build_schema_type (yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (-4)].yystate.yysemantics.yysval.ttype), yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype);
        immediate_size_expand = yyvsp[YYFILL (-2)].yystate.yysemantics.yysval.itype;
d5217 1
a5217 1
    { build_schema_type (error_mark_node, yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype); ;}
d5230 1
a5230 1
        build_type_decl (yyvsp[YYFILL (-2)].yystate.yysemantics.yysval.ttype, t, NULL_TREE);
d5241 1
a5241 1
        finish_object_type (yyvsp[YYFILL (-5)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (-2)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (-4)].yystate.yysemantics.yysval.ttype != NULL_TREE);
d5248 1
a5248 1
    { (*yyvalp).ttype = yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype; ;}
d5258 1
a5258 1
    { (*yyvalp).ttype = chainon (yyvsp[YYFILL (-2)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype); ;}
d5263 1
a5263 1
    { (*yyvalp).ttype = chainon (yyvsp[YYFILL (-2)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype); error ("missing semicolon"); yyerrok; ;}
d5273 1
a5273 1
    { (*yyvalp).ttype = build_discriminants (yyvsp[YYFILL (-2)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype); ;}
d5278 1
a5278 1
    { type_attributes (&(*yyvalp).ttype, TREE_PURPOSE (yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype)); ;}
d5284 1
a5284 1
        if (!EM (yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype) && TYPE_GET_INITIALIZER (yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype))
d5295 1
a5295 1
        (*yyvalp).ttype = yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype;
d5302 1
a5302 1
        if (!PASCAL_TYPE_FILE (yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype))
d5304 1
a5304 1
        (*yyvalp).ttype = pascal_type_variant (yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype, TYPE_QUALIFIER_BINDABLE);
d5311 1
a5311 1
        (*yyvalp).ttype = pascal_type_variant (yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype, TYPE_QUALIFIER_RESTRICTED | (TYPE_PACKED (yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype) ? TYPE_QUALIFIER_PACKED : 0));
d5323 1
a5323 1
    { (*yyvalp).ttype = build_discriminated_type (yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype); ;}
d5334 2
a5335 2
        defining_packed_type -= yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.itype;
        (*yyvalp).ttype = yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.itype ? pack_type (yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype) : yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype;
d5359 1
a5359 1
        tree decl = lookup_name (yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype);
d5362 1
a5362 1
          error ("unknown identifier `%s'", IDENTIFIER_NAME (yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype));
d5364 1
a5364 1
          error ("type name expected, `%s' given", IDENTIFIER_NAME (yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype));
d5372 1
a5372 1
    { chk_dialect ("schema/string discriminants are", E_O_PASCAL); (*yyvalp).ttype = yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype; ;}
d5379 1
a5379 1
        (*yyvalp).ttype = build_tree_list (NULL_TREE, maybe_schema_discriminant (string_may_be_char (yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype, 0)));
d5387 1
a5387 1
        (*yyvalp).ttype = build_tree_list (NULL_TREE, maybe_schema_discriminant (string_may_be_char (yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype, 0)));
d5394 1
a5394 1
        (*yyvalp).ttype = chainon (yyvsp[YYFILL (-2)].yystate.yysemantics.yysval.ttype, build_tree_list (NULL_TREE, maybe_schema_discriminant (string_may_be_char (yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype, 0))));
d5408 1
a5408 1
        (*yyvalp).ttype = chainon (yyvsp[YYFILL (-2)].yystate.yysemantics.yysval.ttype, build_tree_list (NULL_TREE, maybe_schema_discriminant (string_may_be_char (yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype, 0))));
d5420 1
a5420 1
    { (*yyvalp).ttype = build_enum_type (nreverse (yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype)); ;}
d5435 1
a5435 1
    { (*yyvalp).ttype = build_tree_list (yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype, NULL_TREE); ;}
d5440 1
a5440 1
    { (*yyvalp).ttype = tree_cons (yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype, NULL_TREE, yyvsp[YYFILL (-2)].yystate.yysemantics.yysval.ttype); yyerrok; ;}
d5445 1
a5445 1
    { (*yyvalp).ttype = tree_cons (yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype, NULL_TREE, yyvsp[YYFILL (-2)].yystate.yysemantics.yysval.ttype); error ("missing comma"); yyerrok; ;}
d5455 1
a5455 1
    { (*yyvalp).ttype = build_pascal_unary_op (yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.code, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype); ;}
d5460 1
a5460 1
    { (*yyvalp).ttype = build_pascal_unary_op (yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.code, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype); ;}
d5465 1
a5465 1
    { (*yyvalp).ttype = build_pascal_unary_op (yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.code, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype); ;}
d5470 1
a5470 1
    { (*yyvalp).ttype = build_pascal_unary_op (yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.code, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype); ;}
d5475 1
a5475 1
    { (*yyvalp).ttype = yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype; ;}
d5480 1
a5480 1
    { (*yyvalp).ttype = build_pascal_subrange_type (yyvsp[YYFILL (-2)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype, 0); ;}
d5486 1
a5486 1
        defining_packed_type -= yyvsp[YYFILL (-3)].yystate.yysemantics.yysval.itype;
d5488 1
a5488 1
        (*yyvalp).ttype = build_pascal_subrange_type (yyvsp[YYFILL (-2)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (-3)].yystate.yysemantics.yysval.itype);
d5494 1
a5494 1
    { (*yyvalp).ttype = EM (yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype) ? error_mark_node : build_pointer_type (yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype); ;}
d5499 1
a5499 1
    { (*yyvalp).ttype = EM (yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype) ? error_mark_node : build_pointer_type (yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype); ;}
d5504 1
a5504 1
    { (*yyvalp).ttype = EM (yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype) ? error_mark_node : build_pointer_type (yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype); ;}
d5511 1
a5511 1
        (*yyvalp).ttype = EM (yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype) ? error_mark_node : build_pointer_type (p_build_type_variant (yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype, 1, TYPE_VOLATILE (yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype)));
d5519 1
a5519 1
        for (scan = current_type_list; scan && TREE_VALUE (scan) != yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype; scan = TREE_CHAIN (scan)) ;
d5523 2
a5524 2
          (*yyvalp).ttype = TREE_TYPE (build_type_decl (yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype, make_node (LANG_TYPE), NULL_TREE));
        else if ((decl = lookup_name (yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype)) && TREE_CODE (decl) == TYPE_DECL)
d5538 2
a5539 2
        assert (EM (yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype) || (TREE_CODE (yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype) == REFERENCE_TYPE && TREE_TYPE (yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype)));
        (*yyvalp).ttype = TREE_TYPE (yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype);
d5546 1
a5546 1
        if (EM (yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype))
d5549 1
a5549 1
          (*yyvalp).ttype = build_reference_type (build_function_type (void_type_node, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype));
d5556 1
a5556 1
        if (!yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype)
d5561 1
a5561 1
        else if ((yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype && EM (yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype)) || EM (yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype))
d5564 1
a5564 1
          (*yyvalp).ttype = build_reference_type (build_function_type (yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype));
d5580 1
a5580 1
    { (*yyvalp).ttype = yyvsp[YYFILL (-3)].yystate.yysemantics.yysval.ttype; ;}
d5585 1
a5585 1
    { (*yyvalp).ttype = chainon (yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype, build_tree_list (NULL_TREE, void_type_node)); ;}
d5590 1
a5590 1
    { (*yyvalp).ttype = chainon (yyvsp[YYFILL (-2)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype); ;}
d5595 1
a5595 1
    { (*yyvalp).ttype = build_procedural_type_formal_param (yyvsp[YYFILL (-2)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype, 0, 0); ;}
d5600 1
a5600 1
    { (*yyvalp).ttype = build_procedural_type_formal_param (yyvsp[YYFILL (-2)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype, 0, 1); ;}
d5605 1
a5605 1
    { (*yyvalp).ttype = build_procedural_type_formal_param (yyvsp[YYFILL (-2)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype, 1, !!yyvsp[YYFILL (-4)].yystate.yysemantics.yysval.ttype); ;}
d5610 1
a5610 1
    { (*yyvalp).ttype = build_procedural_type_formal_param (yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype, NULL_TREE, 1, !!yyvsp[YYFILL (-2)].yystate.yysemantics.yysval.ttype); ;}
d5615 1
a5615 1
    { (*yyvalp).ttype = build_procedural_type_formal_param (yyvsp[YYFILL (-2)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype, 2, 1); ;}
d5620 1
a5620 1
    { (*yyvalp).ttype = build_procedural_type_formal_param (yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype, NULL_TREE, 2, 1); ;}
d5633 1
a5633 1
    { (*yyvalp).ttype = build_pascal_array_type (yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (-3)].yystate.yysemantics.yysval.ttype); ;}
d5638 1
a5638 1
    { (*yyvalp).ttype = chainon (yyvsp[YYFILL (-2)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype); yyerrok; ;}
d5651 1
a5651 1
    { (*yyvalp).ttype = chainon (yyvsp[YYFILL (-2)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype); error ("missing comma"); yyerrok; ;}
d5661 1
a5661 1
    { (*yyvalp).ttype = build_tree_list (yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype, convert_type_to_range (yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype)); ;}
d5666 1
a5666 1
    { (*yyvalp).ttype = build_tree_list (yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype, convert_type_to_range (yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype)); ;}
d5671 1
a5671 1
    { (*yyvalp).ttype = build_type_copy (yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype);  /* in case it will be packed */ ;}
d5676 1
a5676 1
    { (*yyvalp).ttype = build_file_type (yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (-2)].yystate.yysemantics.yysval.ttype, 0); ;}
d5686 1
a5686 1
    { (*yyvalp).ttype = yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype; ;}
d5691 1
a5691 1
    { (*yyvalp).ttype = pascal_build_set_type (yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype); ;}
d5696 1
a5696 1
    { (*yyvalp).ttype = yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype; yyerrok; ;}
d5711 1
a5711 1
    { (*yyvalp).ttype = finish_struct (start_struct (RECORD_TYPE), yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype, 1); ;}
d5716 1
a5716 1
    { (*yyvalp).ttype = build_variant_record (yyvsp[YYFILL (-2)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype); ;}
d5721 1
a5721 1
    { (*yyvalp).ttype = build_variant_record (NULL_TREE, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype); ;}
d5726 1
a5726 1
    { (*yyvalp).ttype = chainon (yyvsp[YYFILL (-2)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype); yyerrok; ;}
d5731 1
a5731 1
    { (*yyvalp).ttype = chainon (yyvsp[YYFILL (-2)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype); error ("missing semicolon"); yyerrok; ;}
d5741 1
a5741 1
    { (*yyvalp).ttype = build_fields (yyvsp[YYFILL (-2)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype); ;}
d5746 1
a5746 1
    { (*yyvalp).ttype = build_record_variant_part (yyvsp[YYFILL (-4)].yystate.yysemantics.yysval.ttype, chainon (yyvsp[YYFILL (-2)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype)); ;}
d5751 1
a5751 1
    { (*yyvalp).ttype = build_tree_list (yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype, build_field (yyvsp[YYFILL (-2)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype)); ;}
d5756 1
a5756 1
    { (*yyvalp).ttype = build_tree_list (yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype, build_field (yyvsp[YYFILL (-2)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype)); ;}
d5761 1
a5761 1
    { (*yyvalp).ttype = build_tree_list (yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype, NULL_TREE); ;}
d5766 1
a5766 1
    { (*yyvalp).ttype = build_tree_list (yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype, NULL_TREE); ;}
d5781 1
a5781 1
    { (*yyvalp).ttype = build_tree_list (NULL_TREE, build_field (NULL_TREE, yyvsp[YYFILL (-2)].yystate.yysemantics.yysval.ttype)); ;}
d5786 1
a5786 1
    { (*yyvalp).ttype = chainon (yyvsp[YYFILL (-2)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype); yyerrok; ;}
d5791 1
a5791 1
    { (*yyvalp).ttype = chainon (yyvsp[YYFILL (-2)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype); error ("missing semicolon"); yyerrok; ;}
d5801 1
a5801 1
    { (*yyvalp).ttype = build_tree_list (yyvsp[YYFILL (-4)].yystate.yysemantics.yysval.ttype, build_field (NULL_TREE, yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype)); ;}
d5806 1
a5806 1
    { (*yyvalp).ttype = chainon (yyvsp[YYFILL (-2)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype); yyerrok; ;}
d5816 1
a5816 1
    { (*yyvalp).ttype = chainon (yyvsp[YYFILL (-2)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype); error ("missing comma"); yyerrok; ;}
d5821 1
a5821 1
    { (*yyvalp).ttype = build_tree_list (NULL_TREE, string_may_be_char (yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype, 0)); ;}
d5828 1
a5828 1
        (*yyvalp).ttype = build_tree_list (string_may_be_char (yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype, 0), string_may_be_char (yyvsp[YYFILL (-2)].yystate.yysemantics.yysval.ttype, 0));
d5835 1
a5835 1
        (*yyvalp).ttype = build_tree_list (string_may_be_char (yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype, 0), string_may_be_char (yyvsp[YYFILL (-2)].yystate.yysemantics.yysval.ttype, 0));
d5845 1
a5845 1
        (*yyvalp).ttype = build_tree_list (NULL_TREE, string_may_be_char (yyvsp[YYFILL (-2)].yystate.yysemantics.yysval.ttype, 0));
d5852 1
a5852 1
        (*yyvalp).ttype = TYPE_MAIN_VARIANT (TREE_TYPE (yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype));
d5859 1
a5859 1
    { (*yyvalp).ttype = yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype; ;}
d5869 1
a5869 1
    { (*yyvalp).ttype = chainon (yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype); ;}
d5879 1
a5879 1
    { (*yyvalp).ttype = chainon (yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype, build_tree_list (void_type_node, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype)); ;}
d5884 1
a5884 1
    { (*yyvalp).ttype = chainon (yyvsp[YYFILL (-2)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype); yyerrok; ;}
d5889 1
a5889 1
    { (*yyvalp).ttype = build_fields (yyvsp[YYFILL (-2)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype); ;}
d5894 1
a5894 1
    { (*yyvalp).ttype = build_method_description (yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype, NULL_TREE, void_type_node, 0); ;}
d5899 1
a5899 1
    { (*yyvalp).ttype = build_method_description (yyvsp[YYFILL (-3)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (-2)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype, 0); ;}
d5904 1
a5904 1
    { (*yyvalp).ttype = build_method_description (yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype, NULL_TREE, boolean_type_node, 1); ;}
d5909 1
a5909 1
    { (*yyvalp).ttype = build_method_description (yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype, NULL_TREE, void_type_node, 1); ;}
d5914 1
a5914 1
    { (*yyvalp).ttype = build_tree_list (NULL_TREE, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype); ;}
d5919 1
a5919 1
    { (*yyvalp).ttype = build_tree_list (yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype); ;}
d5924 1
a5924 1
    { (*yyvalp).ttype = build_tree_list (NULL_TREE, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype); ;}
d5936 3
a5938 3
        yyvsp[YYFILL (-3)].yystate.yysemantics.yysval.ttype = nreverse (yyvsp[YYFILL (-3)].yystate.yysemantics.yysval.ttype);
        if ((TREE_CODE (yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype) == POINTER_TYPE || TREE_CODE (yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype) == REFERENCE_TYPE)
            && TREE_CODE (TREE_TYPE (yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype)) == FUNCTION_TYPE)
d5946 1
a5946 1
        for (t = yyvsp[YYFILL (-3)].yystate.yysemantics.yysval.ttype; t; t = TREE_CHAIN (t))
d5955 1
a5955 1
        for (t = yyvsp[YYFILL (-7)].yystate.yysemantics.yysval.ttype; t; t = TREE_CHAIN (t))
d5958 3
a5960 3
        (*yyvalp).ttype = declare_variables (yyvsp[YYFILL (-7)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (-4)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (-2)].yystate.yysemantics.yysval.ttype, 0, yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype);
        if (yyvsp[YYFILL (-3)].yystate.yysemantics.yysval.itype != -1)
          allow_function_calls (yyvsp[YYFILL (-3)].yystate.yysemantics.yysval.itype);
d5972 1
a5972 1
    { (*yyvalp).ttype = chainon (yyvsp[YYFILL (-2)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype); ;}
d5977 1
a5977 1
    { (*yyvalp).ttype = build_tree_list (yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype); ;}
d5982 1
a5982 1
    { ASSERT_ID (yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (0)].yystate.yyloc, p_name); ;}
d5987 1
a5987 1
    { (*yyvalp).ttype = tree_cons (yyvsp[YYFILL (-2)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype, build_tree_list (yyvsp[YYFILL (-4)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (-3)].yystate.yysemantics.yysval.ttype)); ;}
d5992 1
a5992 1
    { (*yyvalp).ttype = chainon (yyvsp[YYFILL (-2)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype); ;}
d5997 1
a5997 1
    { (*yyvalp).ttype = build_tree_list (yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype); ;}
d6002 1
a6002 1
    { (*yyvalp).ttype = TREE_PURPOSE (yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype); ;}
d6007 1
a6007 1
    { (*yyvalp).ttype = build_tree_list (yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (-3)].yystate.yysemantics.yysval.ttype); ;}
d6012 1
a6012 1
    { (*yyvalp).ttype = chainon (yyvsp[YYFILL (-2)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype); ;}
d6017 1
a6017 1
    { (*yyvalp).ttype = build_tree_list (yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype, NULL_TREE); ;}
d6022 1
a6022 1
    { (*yyvalp).ttype = build_tree_list (yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype, NULL_TREE); ;}
d6027 1
a6027 1
    { (*yyvalp).ttype = build_tree_list (yyvsp[YYFILL (-2)].yystate.yysemantics.yysval.ttype, build_tree_list (NULL_TREE, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype)); ;}
d6032 1
a6032 1
    { (*yyvalp).ttype = build_tree_list (yyvsp[YYFILL (-3)].yystate.yysemantics.yysval.ttype, build_tree_list (NULL_TREE, yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype)); ;}
d6037 1
a6037 1
    { (*yyvalp).ttype = build_tree_list (yyvsp[YYFILL (-5)].yystate.yysemantics.yysval.ttype, tree_cons (NULL_TREE, yyvsp[YYFILL (-3)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype)); ;}
d6057 1
a6057 1
    { (*yyvalp).ttype = yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype; ;}
d6073 2
a6074 2
        allow_function_calls (yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.itype);
        (*yyvalp).ttype = build_tree_list (NULL_TREE, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype);
d6095 2
a6096 2
        allow_function_calls (yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.itype);
        (*yyvalp).ttype = yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype;
d6102 1
a6102 1
    { (*yyvalp).ttype = build_tree_list (NULL_TREE, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype); ;}
d6109 1
a6109 1
        (*yyvalp).ttype = build_tree_list (NULL_TREE, yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype);
d6116 1
a6116 1
        (*yyvalp).ttype = maybe_schema_discriminant (yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype);
d6131 1
a6131 1
    { (*yyvalp).ttype = build_tree_list (NULL_TREE, yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype); ;}
d6136 1
a6136 1
    { (*yyvalp).ttype = nreverse (yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype); ;}
d6146 1
a6146 1
    { TREE_CHAIN (((*yyvalp).ttype = yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype)) = yyvsp[YYFILL (-2)].yystate.yysemantics.yysval.ttype; ;}
d6151 1
a6151 1
    { TREE_CHAIN (((*yyvalp).ttype = yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype)) = yyvsp[YYFILL (-2)].yystate.yysemantics.yysval.ttype; ;}
d6156 1
a6156 1
    { TREE_CHAIN (((*yyvalp).ttype = yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype)) = yyvsp[YYFILL (-2)].yystate.yysemantics.yysval.ttype; error ("missing separator"); ;}
d6168 1
a6168 1
        (*yyvalp).ttype = build_tree_list (NULL_TREE, nreverse (yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype));
d6183 1
a6183 1
    { TREE_CHAIN (((*yyvalp).ttype = yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype)) = yyvsp[YYFILL (-2)].yystate.yysemantics.yysval.ttype; ;}
d6188 1
a6188 1
    { TREE_CHAIN (((*yyvalp).ttype = yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype)) = yyvsp[YYFILL (-2)].yystate.yysemantics.yysval.ttype; error ("missing separator"); ;}
d6193 1
a6193 1
    { (*yyvalp).ttype = build_tree_list (build_tree_list (yyvsp[YYFILL (-2)].yystate.yysemantics.yysval.ttype, NULL_TREE), TREE_VALUE (yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype)); ;}
d6198 1
a6198 1
    { (*yyvalp).ttype = build_pascal_unary_op (yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.code, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype); ;}
d6203 1
a6203 1
    { (*yyvalp).ttype = build_pascal_unary_op (yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.code, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype); ;}
d6208 1
a6208 1
    { declare_routine (yyvsp[YYFILL (-2)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype, 1); ;}
d6213 1
a6213 1
    { declare_routine (yyvsp[YYFILL (-2)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype, 0); ;}
d6218 1
a6218 1
    { (*yyvalp).ttype = start_routine (yyvsp[YYFILL (-2)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype); ;}
d6233 1
a6233 1
        restore_identifiers (yyvsp[YYFILL (-4)].yystate.yysemantics.yysval.ttype);
d6239 1
a6239 1
    { (*yyvalp).ttype = build_routine_heading (NULL_TREE, yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype, NULL_TREE, void_type_node, 1, 0); ;}
d6244 1
a6244 1
    { (*yyvalp).ttype = build_routine_heading (NULL_TREE, yyvsp[YYFILL (-3)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (-2)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype, 1, 0); ;}
d6249 1
a6249 1
    { (*yyvalp).ttype = build_operator_heading (yyvsp[YYFILL (-3)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (-2)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype); ;}
d6254 1
a6254 1
    { (*yyvalp).ttype = build_routine_heading (yyvsp[YYFILL (-3)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype, NULL_TREE, void_type_node, 1, 0); ;}
d6259 1
a6259 1
    { (*yyvalp).ttype = build_routine_heading (yyvsp[YYFILL (-5)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (-3)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (-2)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype, 1, 0); ;}
d6264 1
a6264 1
    { (*yyvalp).ttype = build_routine_heading (yyvsp[YYFILL (-3)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype, NULL_TREE, boolean_type_node, 1, 1); ;}
d6269 1
a6269 1
    { (*yyvalp).ttype = build_routine_heading (yyvsp[YYFILL (-3)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype, NULL_TREE, void_type_node, 1, 1); ;}
d6274 1
a6274 1
    { (*yyvalp).ttype = chainon (chainon (yyvsp[YYFILL (-2)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype), yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype); ;}
d6279 1
a6279 1
    { (*yyvalp).ttype = build_tree_list (NULL_TREE, yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype); ;}
d6284 1
a6284 1
    { (*yyvalp).ttype = build_tree_list (yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (-2)].yystate.yysemantics.yysval.ttype); ;}
d6289 1
a6289 1
    { ASSERT_ID (yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (0)].yystate.yyloc, p_name); ;}
d6294 1
a6294 1
    { (*yyvalp).ttype = tree_cons (yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (-3)].yystate.yysemantics.yysval.ttype, build_tree_list (yyvsp[YYFILL (-4)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (-5)].yystate.yysemantics.yysval.ttype)); ;}
d6299 1
a6299 1
    { (*yyvalp).ttype = tree_cons (yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (-2)].yystate.yysemantics.yysval.ttype, build_tree_list (yyvsp[YYFILL (-4)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (-5)].yystate.yysemantics.yysval.ttype)); ;}
d6304 1
a6304 1
    { (*yyvalp).ttype = tree_cons (yyvsp[YYFILL (-4)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (-5)].yystate.yysemantics.yysval.ttype, build_tree_list (yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (-2)].yystate.yysemantics.yysval.ttype)); ;}
d6309 1
a6309 1
    { (*yyvalp).ttype = build_tree_list (yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (-2)].yystate.yysemantics.yysval.ttype); ;}
d6314 1
a6314 1
    { (*yyvalp).ttype = build_tree_list (NULL_TREE, yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype); ;}
d6319 1
a6319 1
    { (*yyvalp).ttype = build_tree_list (NULL_TREE, yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype); ;}
d6324 1
a6324 1
    { (*yyvalp).ttype = chainon (yyvsp[YYFILL (-2)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype); ;}
d6331 1
a6331 1
          warning ("`%s' directive ignored in flat memory model", IDENTIFIER_NAME (yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype));
d6337 1
a6337 1
    { (*yyvalp).ttype = yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype; chk_dialect ("function result variable specifications are", E_O_PASCAL); ;}
d6347 1
a6347 1
    { (*yyvalp).ttype = yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype; chk_dialect ("operator result variables with `=' are", GNU_PASCAL); ;}
d6362 1
a6362 1
    { (*yyvalp).ttype = check_result_type (yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype); ;}
d6367 1
a6367 1
    { (*yyvalp).ttype = yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype; ;}
d6374 1
a6374 1
        (*yyvalp).ttype = chainon (yyvsp[YYFILL (-3)].yystate.yysemantics.yysval.ttype, build_tree_list (NULL_TREE, NULL_TREE));
d6393 1
a6393 1
    { (*yyvalp).ttype = chainon (yyvsp[YYFILL (-2)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype); yyerrok; ;}
d6398 1
a6398 1
    { (*yyvalp).ttype = chainon (yyvsp[YYFILL (-2)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype); error ("missing semicolon"); yyerrok; ;}
d6403 1
a6403 1
    { (*yyvalp).ttype = build_formal_param (yyvsp[YYFILL (-2)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype, 0, 0); ;}
d6408 1
a6408 1
    { (*yyvalp).ttype = build_formal_param (yyvsp[YYFILL (-2)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype, 0, 1); ;}
d6413 1
a6413 1
    { (*yyvalp).ttype = build_formal_param (yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype, 1, !!yyvsp[YYFILL (-3)].yystate.yysemantics.yysval.ttype); ;}
d6418 1
a6418 1
    { (*yyvalp).ttype = build_formal_param (yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype, 2, 1); ;}
d6423 1
a6423 1
    { (*yyvalp).ttype = build_formal_param (TREE_PURPOSE (yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype), TREE_VALUE (TREE_VALUE (yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype)), 0, 0); ;}
d6428 1
a6428 1
    { (*yyvalp).ttype = build_routine_heading (NULL_TREE, yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype, NULL_TREE, void_type_node, 0, 0); ;}
d6433 1
a6433 1
    { (*yyvalp).ttype = build_routine_heading (NULL_TREE, yyvsp[YYFILL (-3)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (-2)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype, 0, 0); ;}
d6443 1
a6443 1
    { (*yyvalp).ttype = yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype; ;}
d6448 1
a6448 1
    { (*yyvalp).ttype = chainon (yyvsp[YYFILL (-3)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype); ;}
d6454 3
a6456 3
        defining_packed_type -= yyvsp[YYFILL (-6)].yystate.yysemantics.yysval.itype;
        PASCAL_TREE_PACKED (yyvsp[YYFILL (-3)].yystate.yysemantics.yysval.ttype) = yyvsp[YYFILL (-6)].yystate.yysemantics.yysval.itype;
        (*yyvalp).ttype = chainon (yyvsp[YYFILL (-3)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype);
d6462 1
a6462 1
    { (*yyvalp).ttype = chainon (yyvsp[YYFILL (-2)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype); yyerrok; ;}
d6473 2
a6474 2
        (*yyvalp).ttype = build_tree_list (yyvsp[YYFILL (-4)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (-2)].yystate.yysemantics.yysval.ttype);
        TREE_TYPE ((*yyvalp).ttype) = yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype;
d6482 1
a6482 1
        TREE_TYPE ((*yyvalp).ttype) = yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype;
d6518 1
a6518 1
    { pascal_expand_goto (yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype); ;}
d6523 1
a6523 1
    { set_label (yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype); ;}
d6530 1
a6530 1
        un_initialize_block (yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype, 0, 0);
d6536 1
a6536 1
    { restore_identifiers (yyvsp[YYFILL (-2)].yystate.yysemantics.yysval.ttype); ;}
d6541 1
a6541 1
    { (*yyvalp).ttype = chainon (yyvsp[YYFILL (-2)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype); yyerrok; ;}
d6551 1
a6551 1
    { (*yyvalp).ttype = chainon (yyvsp[YYFILL (-2)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype); error ("missing comma"); yyerrok; ;}
d6561 1
a6561 1
    { (*yyvalp).ttype = pascal_shadow_record_fields (undo_schema_dereference (yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype), NULL_TREE, 0); ;}
d6566 1
a6566 1
    { (*yyvalp).ttype = pascal_shadow_record_fields (undo_schema_dereference (yyvsp[YYFILL (-2)].yystate.yysemantics.yysval.ttype), yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype, 0); ;}
d6571 1
a6571 1
    { expand_start_cond (yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype, 0); ;}
d6577 1
a6577 1
        if (!yyvsp[YYFILL (0)].yystate.yysemantics.yysval.itype && extra_warnings)
d6595 1
a6595 1
        if (!yyvsp[YYFILL (0)].yystate.yysemantics.yysval.itype && extra_warnings)
d6605 1
a6605 1
        current_case_expression = pascal_expand_start_case (yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype);
d6623 2
a6624 2
          expand_end_case (yyvsp[YYFILL (-7)].yystate.yysemantics.yysval.ttype);
        current_case_expression = yyvsp[YYFILL (-5)].yystate.yysemantics.yysval.ttype;
d6671 1
a6671 1
    { pascal_pushcase (yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype); ;}
d6686 1
a6686 1
    { LOCATION_NOTE (yyvsp[YYFILL (0)].yystate.yyloc); expand_loop_continue_here (); ;}
d6692 2
a6693 2
        LOCATION_NOTE (yyvsp[YYFILL (-1)].yystate.yyloc);
        expand_exit_loop_if_false (0, build_pascal_unary_op (TRUTH_NOT_EXPR, yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype));
d6705 1
a6705 1
    { LOCATION_NOTE (yyvsp[YYFILL (0)].yystate.yyloc); expand_exit_loop_if_false (0, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype); ;}
d6715 1
a6715 1
    { yyvsp[YYFILL (-4)].yystate.yysemantics.yysval.ttype = start_for_loop (yyvsp[YYFILL (-4)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (-2)].yystate.yysemantics.yysval.ttype, &yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.code); ;}
d6720 1
a6720 1
    { LOCATION_NOTE (yyvsp[YYFILL (-6)].yystate.yyloc); finish_for_loop (yyvsp[YYFILL (-9)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (-5)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (-6)].yystate.yysemantics.yysval.code); ;}
d6725 1
a6725 1
    { yyvsp[YYFILL (-2)].yystate.yysemantics.yysval.ttype = start_for_set_loop (yyvsp[YYFILL (-2)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype, &(*yyvalp).ttype); ;}
d6730 1
a6730 1
    { LOCATION_NOTE (yyvsp[YYFILL (-6)].yystate.yyloc); finish_for_set_loop (yyvsp[YYFILL (-7)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (-4)].yystate.yysemantics.yysval.ttype); ;}
d6750 1
a6750 1
    { (*yyvalp).itype = allow_function_calls (!PASCAL_PROCEDURAL_TYPE (TREE_TYPE (yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype))); ;}
d6756 4
a6759 4
        if (!yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype)
          allow_function_calls (yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.itype);
        expand_assignment_or_call_statement (yyvsp[YYFILL (-2)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype);
        allow_function_calls (yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.itype);
d6769 1
a6769 1
        if (PASCAL_PROCEDURAL_TYPE (TREE_TYPE (yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype)))
d6774 2
a6775 2
            ftype = TREE_TYPE (TREE_TYPE (yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype));
            (*yyvalp).ttype = convert (build_pointer_type (ftype), yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype);
d6787 1
a6787 1
    { (*yyvalp).ttype = yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype; ;}
d6797 1
a6797 1
    { build_predef_call (yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.itype, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype); ;}
d6802 1
a6802 1
    { build_predef_call (IDENTIFIER_BUILT_IN_VALUE (yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype)->symbol, NULL_TREE); ;}
d6807 1
a6807 1
    { build_predef_call (IDENTIFIER_BUILT_IN_VALUE (yyvsp[YYFILL (-3)].yystate.yysemantics.yysval.ttype)->symbol, yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype); yyerrok; ;}
d6812 1
a6812 1
    { build_predef_call (p_Dispose, build_tree_list (NULL_TREE, yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype)); ;}
d6819 1
a6819 1
        if (TREE_CODE (TREE_TYPE (yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype)) == POINTER_TYPE && PASCAL_TYPE_OBJECT (TREE_TYPE (TREE_TYPE (yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype))))
d6821 4
a6824 4
            tree temp = make_new_variable ("dispose_object", TREE_TYPE (yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype));
            expand_expr_stmt (build_modify_expr (temp, NOP_EXPR, yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype));
            yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype = temp;
            (*yyvalp).ttype = pascal_shadow_record_fields (build_indirect_ref (yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype, "`Dispose'"), NULL_TREE, 2);
d6832 2
a6833 2
        restore_identifiers (yyvsp[YYFILL (-2)].yystate.yysemantics.yysval.ttype);
        build_predef_call (p_Dispose, tree_cons (NULL_TREE, yyvsp[YYFILL (-4)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype));
d6844 1
a6844 1
    { build_predef_call (p_Return, build_tree_list (NULL_TREE, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype)); ;}
d6855 2
a6856 2
        (*yyvalp).ttype = yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype;
        allow_function_calls (yyvsp[YYFILL (-3)].yystate.yysemantics.yysval.itype);
d6863 1
a6863 1
    { (*yyvalp).ttype = build_tree_list (NULL_TREE, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype); ;}
d6868 1
a6868 1
    { (*yyvalp).ttype = chainon (yyvsp[YYFILL (-2)].yystate.yysemantics.yysval.ttype, build_tree_list (NULL_TREE, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype)); yyerrok; ;}
d6883 1
a6883 1
    { (*yyvalp).ttype = chainon (yyvsp[YYFILL (-2)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype); yyerrok; ;}
d6888 1
a6888 1
    { (*yyvalp).ttype = chainon (yyvsp[YYFILL (-2)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype); error ("missing comma"); yyerrok; ;}
d6898 1
a6898 1
    { (*yyvalp).ttype = build_tree_list (NULL_TREE, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype); ;}
d6903 1
a6903 1
    { (*yyvalp).ttype = build_tree_list (build_tree_list (NULL_TREE, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype), yyvsp[YYFILL (-2)].yystate.yysemantics.yysval.ttype); ;}
d6908 1
a6908 1
    { (*yyvalp).ttype = build_tree_list (build_tree_list (yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (-2)].yystate.yysemantics.yysval.ttype), yyvsp[YYFILL (-4)].yystate.yysemantics.yysval.ttype); ;}
d6913 1
a6913 1
    { pascal_expand_asm_operands (yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype, NULL_TREE, NULL_TREE, NULL_TREE, yyvsp[YYFILL (-3)].yystate.yysemantics.yysval.itype); ;}
d6918 1
a6918 1
    { pascal_expand_asm_operands (yyvsp[YYFILL (-3)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype, NULL_TREE, NULL_TREE, yyvsp[YYFILL (-5)].yystate.yysemantics.yysval.itype); ;}
d6923 1
a6923 1
    { pascal_expand_asm_operands (yyvsp[YYFILL (-5)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (-3)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype, NULL_TREE, yyvsp[YYFILL (-7)].yystate.yysemantics.yysval.itype); ;}
d6928 1
a6928 1
    { pascal_expand_asm_operands (yyvsp[YYFILL (-7)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (-5)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (-3)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (-9)].yystate.yysemantics.yysval.itype); ;}
d6938 1
a6938 1
    { ASSERT_ID (yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (0)].yystate.yyloc, p_volatile); (*yyvalp).itype = 1; ;}
d6943 1
a6943 1
    { (*yyvalp).ttype = chainon (yyvsp[YYFILL (-2)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype); ;}
d6948 1
a6948 1
    { (*yyvalp).ttype = build_tree_list (yyvsp[YYFILL (-3)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype); ;}
d6953 1
a6953 1
    { (*yyvalp).ttype = build_tree_list (NULL_TREE, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype); ;}
d6958 1
a6958 1
    { (*yyvalp).ttype = tree_cons (NULL_TREE, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (-2)].yystate.yysemantics.yysval.ttype); ;}
d6966 1
a6966 1
            tree t = yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype;
d6970 1
a6970 1
            if (last_parenthesized_expression == yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype
d6991 1
a6991 1
    { iso_no_parentheses (yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype); ;}
d6996 1
a6996 1
    { (*yyvalp).ttype = fold (parser_build_binary_op (yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.code, yyvsp[YYFILL (-2)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype)); ;}
d7001 1
a7001 1
    { (*yyvalp).ttype = fold (yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype); ;}
d7006 1
a7006 1
    { (*yyvalp).ttype = set_exp_original_code (build_pascal_unary_op (yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.code, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype), yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.code); ;}
d7011 1
a7011 1
    { (*yyvalp).ttype = parser_build_binary_op (yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.code, yyvsp[YYFILL (-2)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype); ;}
d7016 1
a7016 1
    { (*yyvalp).ttype = build_operator_call (yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (-2)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype, 1); ;}
d7021 1
a7021 1
    { (*yyvalp).ttype = start_boolean_binary_op (TRUTH_OR_EXPR, yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype); ;}
d7026 1
a7026 1
    { if (yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype) LOCATION_NOTE (COPYLOC ((*yylocp), yyvsp[YYFILL (0)].yystate.yyloc)); (*yyvalp).ttype = finish_boolean_binary_op (TRUTH_OR_EXPR, yyvsp[YYFILL (-3)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype); ;}
d7031 1
a7031 1
    { (*yyvalp).ttype = start_boolean_binary_op (TRUTH_ORIF_EXPR, yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype); ;}
d7036 1
a7036 1
    { if (yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype) LOCATION_NOTE (COPYLOC ((*yylocp), yyvsp[YYFILL (0)].yystate.yyloc)); (*yyvalp).ttype = finish_boolean_binary_op (TRUTH_ORIF_EXPR, yyvsp[YYFILL (-3)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype); ;}
d7041 1
a7041 1
    { (*yyvalp).ttype = parser_build_binary_op (yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.code, yyvsp[YYFILL (-2)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype); ;}
d7046 1
a7046 1
    { (*yyvalp).ttype = build_operator_call (yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (-2)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype, 1); ;}
d7051 1
a7051 1
    { (*yyvalp).ttype = start_boolean_binary_op (TRUTH_AND_EXPR, yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype); ;}
d7056 1
a7056 1
    { if (yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype) LOCATION_NOTE (COPYLOC ((*yylocp), yyvsp[YYFILL (0)].yystate.yyloc)); (*yyvalp).ttype = finish_boolean_binary_op (TRUTH_AND_EXPR, yyvsp[YYFILL (-3)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype); ;}
d7061 1
a7061 1
    { (*yyvalp).ttype = start_boolean_binary_op (TRUTH_ANDIF_EXPR, yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype); ;}
d7066 1
a7066 1
    { if (yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype) LOCATION_NOTE (COPYLOC ((*yylocp), yyvsp[YYFILL (0)].yystate.yyloc)); (*yyvalp).ttype = finish_boolean_binary_op (TRUTH_ANDIF_EXPR, yyvsp[YYFILL (-3)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype); ;}
d7071 1
a7071 1
    { (*yyvalp).ttype = build_operator_call (yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (-2)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype, 0); ;}
d7076 1
a7076 1
    { (*yyvalp).ttype = parser_build_binary_op (POW_EXPR, yyvsp[YYFILL (-2)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype); ;}
d7081 1
a7081 1
    { (*yyvalp).ttype = parser_build_binary_op (POWER_EXPR, yyvsp[YYFILL (-2)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype); ;}
d7086 1
a7086 1
    { (*yyvalp).ttype = build_is_as (yyvsp[YYFILL (-2)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype, p_is); ;}
d7091 1
a7091 1
    { (*yyvalp).ttype = build_is_as (yyvsp[YYFILL (-2)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype, p_as); ;}
d7096 1
a7096 1
    { (*yyvalp).ttype = set_exp_original_code (build_pascal_unary_op (yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.code, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype), yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.code); ;}
d7103 1
a7103 1
        (*yyvalp).ttype = build_pascal_address_expression (yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype, !co->typed_address);
d7124 1
a7124 1
    { iso_no_parentheses (yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype); ;}
d7129 1
a7129 1
    { (*yyvalp).ttype = build_predef_call (IDENTIFIER_BUILT_IN_VALUE (yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype)->symbol, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype); ;}
d7134 1
a7134 1
    { (*yyvalp).ttype = get_builtin_variable (yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype); ;}
d7139 1
a7139 1
    { (*yyvalp).ttype = build_inherited_method (yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype); ;}
d7144 1
a7144 1
    { (*yyvalp).ttype = build_component_ref (undo_schema_dereference (yyvsp[YYFILL (-2)].yystate.yysemantics.yysval.ttype), yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype); ;}
d7150 1
a7150 1
        (*yyvalp).ttype = set_exp_original_code (yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype, NOP_EXPR);
d7163 1
a7163 1
    { (*yyvalp).ttype = build_pascal_pointer_reference (yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype); ;}
d7168 1
a7168 1
    { (*yyvalp).ttype = build_pascal_array_ref (yyvsp[YYFILL (-3)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype); ;}
d7173 1
a7173 1
    { yyvsp[YYFILL (0)].yystate.yysemantics.yysval.itype = allow_function_calls (0); ;}
d7179 2
a7180 2
        allow_function_calls (yyvsp[YYFILL (-3)].yystate.yysemantics.yysval.itype);
        if (yyvsp[YYFILL (-4)].yystate.yysemantics.yysval.ttype && TREE_CODE (yyvsp[YYFILL (-4)].yystate.yysemantics.yysval.ttype) == TYPE_DECL)
d7183 1
a7183 1
            if (list_length (yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype) != 1)
d7189 1
a7189 1
              (*yyvalp).ttype = build_type_cast (TREE_TYPE (yyvsp[YYFILL (-4)].yystate.yysemantics.yysval.ttype), TREE_VALUE (yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype));
d7191 2
a7192 2
        else if (CALL_METHOD (yyvsp[YYFILL (-4)].yystate.yysemantics.yysval.ttype))
          (*yyvalp).ttype = call_method (yyvsp[YYFILL (-4)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype);
d7194 1
a7194 1
          (*yyvalp).ttype = build_routine_call (yyvsp[YYFILL (-4)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype);
d7200 1
a7200 1
    { chk_dialect ("type casts are", B_D_M_PASCAL); (*yyvalp).ttype = build_type_cast (yyvsp[YYFILL (-3)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype); ;}
d7205 1
a7205 1
    { (*yyvalp).ttype = build_predef_call (p_FormatString, yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype); ;}
d7216 2
a7217 2
        (*yyvalp).ttype = build_predef_call (p_Assigned, build_tree_list (NULL_TREE, yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype));
        allow_function_calls (yyvsp[YYFILL (-3)].yystate.yysemantics.yysval.itype);
d7223 1
a7223 1
    { (*yyvalp).ttype = build_pascal_address_expression (yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype, co->pascal_dialect & B_D_PASCAL); ;}
d7228 1
a7228 1
    { (*yyvalp).ttype = build_predef_call (IDENTIFIER_BUILT_IN_VALUE (yyvsp[YYFILL (-3)].yystate.yysemantics.yysval.ttype)->symbol, build_tree_list (NULL_TREE, yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype)); ;}
d7234 2
a7235 2
        iso_no_parentheses (yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype);
        (*yyvalp).ttype = build_predef_call (p_New, build_tree_list (NULL_TREE, yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype));
d7243 1
a7243 1
        if (TREE_CODE (TREE_TYPE (yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype)) == POINTER_TYPE && PASCAL_TYPE_OBJECT (TREE_TYPE (TREE_TYPE (yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype))))
d7245 3
a7247 3
            if (TREE_CODE (yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype) == TYPE_DECL)
              yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype = make_new_variable ("self", TREE_TYPE (yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype));
            (*yyvalp).ttype = pascal_shadow_record_fields (build_indirect_ref (yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype, "`New'"), NULL_TREE, 1);
d7255 2
a7256 2
        restore_identifiers (yyvsp[YYFILL (-2)].yystate.yysemantics.yysval.ttype);
        (*yyvalp).ttype = build_predef_call (p_New, tree_cons (NULL_TREE, yyvsp[YYFILL (-4)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype));
d7262 1
a7262 1
    { (*yyvalp).ttype = TYPE_NAME (yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype); ;}
d7267 1
a7267 1
    { (*yyvalp).ttype = chainon (yyvsp[YYFILL (-2)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype); yyerrok; ;}
d7277 1
a7277 1
    { (*yyvalp).ttype = chainon (yyvsp[YYFILL (-2)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype); error ("missing comma"); yyerrok; ;}
d7287 1
a7287 1
    { (*yyvalp).ttype = build_tree_list (NULL_TREE, string_may_be_char (yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype, 1)); ;}
d7294 1
a7294 1
        (*yyvalp).ttype = build_tree_list (string_may_be_char (yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype, 1), string_may_be_char (yyvsp[YYFILL (-2)].yystate.yysemantics.yysval.ttype, 1));
d7305 1
a7305 1
    { (*yyvalp).ttype = build_set_constructor (yyvsp[YYFILL (-1)].yystate.yysemantics.yysval.ttype); ;}
d7310 1
a7310 1
    { (*yyvalp).ttype = chainon (yyvsp[YYFILL (-2)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype); yyerrok; ;}
d7315 1
a7315 1
    { (*yyvalp).ttype = chainon (yyvsp[YYFILL (-2)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype); error ("missing comma"); yyerrok; ;}
d7325 1
a7325 1
    { (*yyvalp).ttype = construct_set_member (yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype, NULL_TREE); ;}
d7330 1
a7330 1
    { (*yyvalp).ttype = construct_set_member (yyvsp[YYFILL (-2)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype); ;}
d7515 1
a7515 1
    { (*yyvalp).itype = IDENTIFIER_BUILT_IN_VALUE (yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype)->symbol; ;}
d7660 1
a7660 1
    { (*yyvalp).ttype = check_identifier (yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype); ;}
d7667 1
a7667 1
        c[0] = yyvsp[YYFILL (0)].yystate.yysemantics.yysval.itype;
d7700 1
a7700 1
    { ASSERT_ID (yyvsp[YYFILL (0)].yystate.yysemantics.yysval.ttype, yyvsp[YYFILL (0)].yystate.yyloc, p_protected); ;}
d7734 1
a7734 1
    }
d7736 1
a7736 1
  return yyok;
d7744 2
a7745 2
/* Line 764 of glr.c.  */
#line 7835 "parse.c"
d7752 1
a7752 2
  YYSTYPE yyval;
  yyval = *yy0;
d7804 1
a7804 1
static inline yybool
d7861 1
a7861 1
static inline yybool
d7867 1
a7867 1
static inline yybool
d7900 1
a7900 1
  yyset->yystates = (yyGLRState**) YYMALLOC (16 * sizeof (yyset->yystates[0]));
d7906 1
a7906 1
  YYFREE (yyset->yystates);
d7919 1
a7919 1
    (yyGLRStackItem*) YYMALLOC (yysize * sizeof (yystack->yynextFree[0]));
d7953 1
a7953 1
      if (*(yybool *) yyp0)
d7983 1
a7983 1
  YYFREE (yystack->yyitems);
d7997 1
a7997 1
  YYFREE (yystack->yyitems);
d8054 1
a8054 2
	      YYDPRINTF ((stderr, "Rename stack %lu -> %lu.\n",
			  (unsigned long int) yyi, (unsigned long int) yyj));
d8085 3
a8087 3
/** Shift stack #K of YYSTACK, to a new state corresponding to LR
 *  state YYLRSTATE, at input position YYPOSN, with the (unresolved)
 *  semantic value of YYRHS under the action for YYRULE. */
d8123 2
a8124 1
      YYASSERT (yyk == 0);
d8128 10
d8145 3
a8147 4
      yyGLRStackItem yyrhsVals[YYMAXRHS + YYMAXLEFT + 1];
      yys = yyrhsVals[YYMAXRHS + YYMAXLEFT].yystate.yypred 
	= yystack->yytops.yystates[yyk];
      for (yyi = 0; yyi < yynrhs; yyi += 1)
d8149 5
a8153 2
	  yys = yys->yypred;
	  YYASSERT (yys);
d8157 11
a8167 1
      return yyuserAction (yyrule, yynrhs, yyrhsVals + YYMAXRHS + YYMAXLEFT - 1,
d8189 3
a8191 3
  YYFPRINTF (stderr, "Reducing stack %lu by rule %d (line %lu), ",
	     (unsigned long int) yyk, yyrule - 1,
	     (unsigned long int) yyrline[yyrule]);
d8212 1
a8212 1
             yybool yyforceEval)
d8239 2
a8240 1
	  YYASSERT (yys);
d8245 3
a8247 2
        "Reduced stack %lu by rule #%d; action deferred. Now in state %d.\n",
		  (unsigned long int) yyk, yyrule - 1, yynewLRState));
d8259 2
a8260 3
		    YYDPRINTF ((stderr, "Merging stack %lu into stack %lu.\n",
				(unsigned long int) yyk,
				(unsigned long int) yyi));
d8277 2
a8278 1
      YYASSERT (yyk == 0);
d8285 1
a8285 1
	(yyGLRState**) YYREALLOC (yystack->yytops.yystates,
d8298 1
a8298 1
static yybool
d8376 2
a8377 1
      YYASSERT (yys->yypred);
d8398 3
a8400 2
  yyGLRStackItem yyrhsVals[YYMAXRHS + YYMAXLEFT + 1];
  int yynrhs;
d8404 10
a8413 3
  yyrhsVals[YYMAXRHS + YYMAXLEFT].yystate.yypred = yyopt->yystate;
  return yyuserAction (yyopt->yyrule, yynrhs, 
		       yyrhsVals + YYMAXRHS + YYMAXLEFT - 1,
d8442 1
a8442 1
    YYFPRINTF (stderr, "%*s%s -> <Rule %d, tokens %lu .. %lu>\n",
d8444 1
a8444 2
	       yyx->yyrule, (unsigned long int) (yys->yyposn + 1),
	       (unsigned long int) yyx->yystate->yyposn);
d8453 1
a8453 1
	    YYFPRINTF (stderr, "%*s%s <tokens %lu .. %lu>\n", yyindent+2, "",
d8455 1
a8455 2
		       (unsigned long int) (yystates[yyi - 1]->yyposn + 1),
		       (unsigned long int) yystates[yyi]->yyposn);
d8600 2
a8601 2
      YYASSERT (yystate != YYFINAL);

d8671 5
a8675 1
      int yyn;
d8679 1
a8679 5
	  size_t yysize = 0;
	  const char* yyprefix;
	  char* yymsg;
	  int yyx;

d8682 2
a8683 7
	  int yyxbegin = yyn < 0 ? -yyn : 0;

	  /* Stay within bounds of both yycheck and yytname.  */
	  int yychecklim = YYLAST - yyn;
	  int yyxend = yychecklim < YYNTOKENS ? yychecklim : YYNTOKENS;
	  int yycount = 0;

d8685 2
a8686 1
	  for (yyx = yyxbegin; yyx < yyxend; ++yyx)
d8688 11
a8698 4
	      {
		yysize += strlen (yyprefix) + strlen (yytokenName (yyx));
		yycount += 1;
		if (yycount == 5)
d8700 3
a8702 2
		    yysize = 0;
		    break;
a8703 24
		yyprefix = " or ";
	      }
	  yysize += (sizeof ("syntax error, unexpected ")
		     + strlen (yytokenName (*yytokenp)));
	  yymsg = (char*) YYSTACK_ALLOC (yysize);
	  if (yymsg != 0)
	    {
	      char* yyp = yymsg;
	      sprintf (yyp, "syntax error, unexpected %s",
		       yytokenName (*yytokenp));
	      yyp += strlen (yyp);
	      if (yycount < 5)
		{
		  yyprefix = ", expecting ";
		  for (yyx = yyxbegin; yyx < yyxend; ++yyx)
		    if (yycheck[yyx + yyn] == yyx && yyx != YYTERROR)
		      {
			sprintf (yyp, "%s%s", yyprefix, yytokenName (yyx));
			yyp += strlen (yyp);
			yyprefix = " or ";
		      }
		}
	      yyerror (yymsg);
	      YYSTACK_FREE (yymsg);
d8705 2
a8706 2
	  else
	    yyerror ("syntax error; also virtual memory exhausted");
d8709 1
a8709 1
#endif /* YYERROR_VERBOSE */
d8726 3
a8728 1
  if (yystack->yyerrState == 3)
d8735 2
a8736 1
	    /* Now pop stack until empty and fail. */
d8762 2
a8763 1
	  return;
a8785 1
  yystack->yyerrState = 3;
d9002 1
a9002 1
      if (*(yybool *) yyp)
@


1.1
log
@Initial revision
@
text
@@


1.1.2.1
log
@Import an alpha version of GNU Pascal Compiler into the tree
(not to be connected to the build before the upgrade to gcc 3.3).

We couldn't use gpc 2.1 because it's too old and doesn't support
gcc 3.x at all.
@
text
@@
