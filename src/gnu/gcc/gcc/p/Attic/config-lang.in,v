head	1.3;
access;
symbols
	gpc-20030830:1.1.2.1 FSF:1.1.2;
locks; strict;
comment	@# @;


1.3
date	2004.08.13.04.53.18;	author tg;	state dead;
branches;
next	1.2;

1.2
date	2004.01.11.18.35.51;	author tg;	state Exp;
branches;
next	1.1;

1.1
date	2004.01.11.18.00.23;	author tg;	state Exp;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2004.01.11.18.00.23;	author tg;	state Exp;
branches;
next	;


desc
@@


1.3
log
@no C++, Java(TM), Pascal, Objective C or Fortran 77 for a while
as discussed on the mailing list
@
text
@# Top level configure fragment for GNU Pascal.
#
# Copyright (C) 1994-2003 Free Software Foundation, Inc.
#
# Authors: Peter Gerwinski <peter@@gerwinski.de>
#          Frank Heckenbach <frank@@pascal.gnu.de>
#
# This file is part of GNU Pascal.
#
# GNU Pascal is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2, or (at your option)
# any later version.
#
# GNU Pascal is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with GNU Pascal; see the file COPYING. If not, write to
# the Free Software Foundation, 59 Temple Place - Suite 330,
# Boston, MA 02111-1307, USA.

# Parameters used by configure:
language="pascal"
compilers="gpc1\$(exeext)"
stagestuff="gpc\$(exeext) gpc-cross\$(exeext) gpc1\$(exeext) gpcpp\$(exeext) libgpc.a"
gtfiles="\$(srcdir)/p/gpc.h \$(srcdir)/p/declarations.c \$(srcdir)/p/module.c \$(srcdir)/p/predef.c"

version=`grep version_string "$srcdir/version.c" | sed -e 's/[^"]*"//;s/[ "].*//'`
mainversion="$version"
gcc3=n
if echo $version | grep '2\.9' > /dev/null || echo $version | grep '3\.[1-9]' > /dev/null; then
  echo '#define EGCS' > gcc-version.h
  if echo $version | grep '2\.95\.[3-9]' > /dev/null || echo $version | grep '3\.[1-9]' > /dev/null; then
    echo '#define GCC_2_95_3' >> gcc-version.h
  fi
  if echo $version | grep '2\.9[6-9]' > /dev/null || echo $version | grep '3\.[1-9]' > /dev/null; then
    gcc3=y
    echo '#define EGCS97' >> gcc-version.h
    if echo $version | grep '3\.[3-9]' > /dev/null; then
      echo '#define GCC_3_3' >> gcc-version.h
    fi
  fi
else
  echo "/* empty */" > gcc-version.h
fi

if grep "@@@@ PATCHED FOR GPC 20030218 @@@@" "$srcdir/stor-layout.c" > /dev/null; then
  :
else
  echo "*** GPC patchlevel difference, contact the MirOS team immediately" >&2
  exit 1
fi
@


1.2
log
@since the gpc people (and others) state gcc 3.3 isn't production quality yet,
let's just play with gpc and the other funky stuff right now, even if that
means still no sparc-gcc3 in current.

also, NO_CXX and friends change from defined/undef'd to yes/no
@
text
@@


1.1
log
@Initial revision
@
text
@a43 12
      echo "" >&2
      echo "***" >&2
      echo "*** Detected GCC version $mainversion." >&2
      echo "*** The GPC port for GCC > 3.2.x is still in an early state." >&2
      echo "*** You can proceed now if you want to work on it." >&2
      echo "***" >&2
      echo "*** For a \"production compiler\" we currently still" >&2
      echo "*** recommend GPC based on gcc 2.8.1, 2.95.x or 3.2.x" >&2
      echo "***" >&2
      echo "*** Press ENTER to continue, Ctrl-C to abort." >&2
      echo "***" >&2
      read junk
a49 16
for x in 2.95.1 2.95.2 2.95.3 2.95.3-5 2.95.3-6 2.95.3-8 2.95.4; do
  if [ ! -r "$srcdir/p/diffs/gcc-$x.diff" ]; then
    (cd "$srcdir/p/diffs"; ln -s "gcc-2.95.diff" "gcc-$x.diff")
  fi
done
for x in 3.2.2 3.2.3; do
  if [ ! -r "$srcdir/p/diffs/gcc-$x.diff" ]; then
    (cd "$srcdir/p/diffs"; ln -s "gcc-3.2.1.diff" "gcc-$x.diff")
  fi
done
for x in 3.3.1; do
  if [ ! -r "$srcdir/p/diffs/gcc-$x.diff" ]; then
    (cd "$srcdir/p/diffs"; ln -s "gcc-3.3.diff" "gcc-$x.diff")
  fi
done

d52 2
a53 5
elif grep "@@@@ PATCHED FOR GPC" "$srcdir/stor-layout.c" > /dev/null; then
  echo "" >&2
  echo "*** There have been changes in the patch for GCC." >&2
  echo "*** Please start with a fresh copy of the GCC sources and run configure again." >&2
  echo "" >&2
a54 32
else
  patchfile="p/diffs/gcc-$mainversion.diff"
  if [ ! -r "$srcdir/$patchfile" ]; then
    echo "" >&2
    echo "***" >&2
    echo "*** Detected GCC version $mainversion." >&2
    echo "*** GPC 2.1 requires one of the following versions of the GCC sources to build:" >&2
    echo "***" >&2
    ls "$srcdir"/p/diffs/gcc-*.diff | sed -e 's/^.*\/p\/diffs\/gcc-/***   /' -e 's/\.diff//' >&2
    echo "***" >&2
    echo "*** (You can try to patch GCC manually by typing a command like" >&2
    echo "*** \`patch -p1 < p/diffs/gcc-<version>.diff' and patching possible" >&2
    echo "*** rejects by hand before you run configure again.)" >&2
    echo "***" >&2
    echo >&2
    exit 1
  fi
  echo "" >&2
  echo "***" >&2
  echo "*** Detected GCC version $mainversion." >&2
  echo "*** GPC 2.1 requires a patch to GCC to build with version $mainversion." >&2
  echo "*** This patch will now be applied." >&2
  echo "*** Press ENTER to continue, Ctrl-C to abort." >&2
  echo "***" >&2
  read junk
  (cd "$srcdir"; patch -s -p1 < "$patchfile" || exit 1)
  # gcc-2's configure expects this. Since it's already running, patching it
  # will not stop it from requiring it (only for future runs).
  if [ $gcc3 = n ] && [ ! -r "$srcdir/p/Makefile.in" ]; then
    echo "*** Creating dummy $srcdir/p/Makefile.in"
    echo "# empty" > "$srcdir/p/Makefile.in"
  fi
@


1.1.2.1
log
@Import an alpha version of GNU Pascal Compiler into the tree
(not to be connected to the build before the upgrade to gcc 3.3).

We couldn't use gpc 2.1 because it's too old and doesn't support
gcc 3.x at all.
@
text
@@
