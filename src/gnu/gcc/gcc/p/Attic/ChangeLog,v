head	1.2;
access;
symbols
	gpc-20030830:1.1.2.1 FSF:1.1.2;
locks; strict;
comment	@# @;


1.2
date	2004.01.11.18.15.13;	author tg;	state dead;
branches;
next	1.1;

1.1
date	2004.01.11.18.00.23;	author tg;	state Exp;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2004.01.11.18.00.23;	author tg;	state Exp;
branches;
next	;


desc
@@


1.2
log
@nuke some unused, redundant or generated files
@
text
@ChangeLog -- Edit History for GPC, the GNU Pascal Compiler, since version 2.1
=============================================================================

2003-07-29 16:07 Mirsad Todorovac <mtodorov@@alu.hr>

        * script/check-test-name: new script

2002-07-15 26:15 and following days
                 Frank Heckenbach <frank@@pascal.gnu.de>
                 Mirsad Todorovac <mtodorov@@alu.hr>
                 Eike Lange <eike.lange@@uni-essen.de>
                 Peter N Lewis <peter@@stairways.com.au>

        Redid all essential changes to the documentation under the
        GPL that were done since 2002-11-28, including:

        * Make-lang.in: create and install COPYING.DEMO

        * doc/en/copying-demo.texi: new file

        * doc/en/programming.texi, doc/en/reference.texi: some
          updates

2003-07-15 26:14 Frank Heckenbach <frank@@pascal.gnu.de>

        * ChangeLog: removed all entries relating to the (now
          removed) documentation changes since 2002-11-28

        * doc/*: replaced completely with the directory from
          gpc-20021117, its documentation being released under the
          GPL

2003-07-15 23:11 Frank Heckenbach <frank@@pascal.gnu.de>

        * ChangeLog: moved the old parts (before 2.1) to a separate
          file (to be found in
          http://gnu-pascal.de/old/ChangeLog.old) since so many
          internals have changed and many of the entries were more
          misleading than helpful, after I was informed that it is
          permissible to do so

2003-06-04 32:50 Frank Heckenbach <frank@@pascal.gnu.de>

        * gpc-lex.c, parse.y: added location tracking, also keep
          track of compiler directives, taking into account the
          potentially different positions in the source code of the
          lexer and parser due to read-ahead

2003-05-18 24:10 Eike Lange <eike.lange@@uni-essen.de>

        * rts/gpc.pas, units/gpcutil.pas, units/heapmon.pas,
          units/intl.pas, units/pipe.pas, units/stringutils.pas: add
          `attribute (ignorable)' where appropriate

2003-05-11 18:10 Frank Heckenbach <frank@@pascal.gnu.de>

        * gpc.c: synced with gcc-3.3

2003-05-09 22:14 Frank Heckenbach <frank@@pascal.gnu.de>

        * gpc-lex.c, parse.y: new token LEX_CARET_LETTER for letters
          after `^', lex_caret flag removed, to make the lexer less
          dependent on the parser

2003-05-02 13:18 Frank Heckenbach <frank@@pascal.gnu.de>

        * parse.y: removed `then_or_error' etc. (in case of error,
          the parser would sometimes reduce `error' to these
          nonterminals, discard them again (if it doesn't find a
          matching context), reduce `error' again (and give the
          message again) a number of times which was quite
          misleading

2003-04-25 22:24 Frank Heckenbach <frank@@pascal.gnu.de>

        * gpc-decl.c: renamed to declarations.c

        * gpc-typeck.c: renamed to typecheck.c

        * module.c: do export renaming while exporting, store the
          current value of identifiers in the main list, not with
          the identifiers; gpc.h: IDENTIFIER_IMPORT_VALUE: removed

        * test: made sure all module names are not longer than 7
          chars, so "8+3" file systems can handle
          `modulename-all.gpi'

        * module.c: start_module_interface (): new function: set up
          an implicit `<module>-all' autoexport interface;
          load_gpm_file: load this instead of using the gpm
          mechanism, renamed to load_module_interface;
          create_gpm_file(): removed

        * gpc.h: IDENTIFIER_LABEL_VALUE: removed, gpc-decl.c:
          label_level_chain: removed; labels are now handled like
          other declarations; IDENTIFIER_GLOBAL_VALUE,
          IDENTIFIER_LOCAL_VALUE: merged to IDENTIFIER_VALUE

        * types.c, expressions.c, predef.c: use
          new_string_by_model() or make_new_variable() instead of
          alloca_string(); gpc-decl.c: alloca_string(): removed

        * expressions.c: build_pascal_binary_op(): optimize union of
          set constructors

        * statements.c: new file, moved routines about statemtents
          here (many from util.c), other routines from util.c moved
          to files where they fit better; util.c: file removed

2003-04-14 29:47 Frank Heckenbach <frank@@pascal.gnu.de>

        * util.c: get_unique_identifier(): do *not* add leading
          underscores because they could lead to conflicts with
          (non-standard) Pascal identifiers, whereas the name
          template should start with a lower-case letter to prevent
          this

        * util.c: pascal_expand_goto(): do not set
          main_program_has_nonlocal_label (apparently used for
          "normal" nonlocal gotos, not setjmp/longjmp implemented
          ones like here) and main_program_needs_context (was always
          0!?); start_main_program(): do not set
          current_function_contains_functions (seems to be used in
          the low-level meaning where it is not true for the Pascal
          main program)

        * objects.c: finish_object_type(): handle attributes and
          explicit assembler names

        * gpc.h: DECL_LANG_METHOD_DECL: new macro; objects.c:
          finish_object_type(): store here the method definition to
          the method field; call_method(): use this instead of
          looking up the DECL_ASMNAME =:-<>

        * gpc-decl.c: start_pascal_function(), start_function():
          rearranged to start_routine() and start_implicit_routine()

2003-04-12 20:32 Matthias Klose <doko@@cs.tu-berlin.de>

        * Make-lang.in: support DESTDIR

2003-04-10 28:35 Frank Heckenbach <frank@@pascal.gnu.de>

        * predef.c: build the RTS function declarations from the
          descriptions in predef.h, once in init_predef(), rather
          than rebulding them at each call and deriving them
          (partly) from the actual parameters

        * gpc-typeck.c: comp_target_types(): accept new variable
          any_file_type_node

2003-04-09 26:34 Frank Heckenbach <frank@@pascal.gnu.de>

        * predef.c, util.c: create all calls the RTS routines, con-
          and destructors etc. as regular `build_function_call's
          rather than via RTX

2003-04-08 16:32 Frank Heckenbach <frank@@pascal.gnu.de>

        * parse.y: allow LEX_CONST_EQUAL almost everywhere where '='
          is accepted (except in the conflicting place, of course),
          just to make it a little less critical

        * module.c: load_node(): load FUNCTION_DECL nodes rather
          than rebuilding them; this finally gets rid of rebuilding
          any nodes, which again makes it possible to refer to nodes
          early when they're very incomplete (because no backend
          function can be called in the recursion that could take
          offense); mark_node_loaded(): function removed; store and
          load DECL_SIZE_UNIT for all decl nodes in gcc-3.x

        * gpc-decl.c: grok_directive(), start_function(): avoid
          grokdeclarator for routines, grok_directive renamed to
          declare_routine; grokdeclarator(): function removed! :-)

2003-04-07 20:31 Waldek Hebisch <hebisch@@math.uni.wroc.pl>

        * config-lang.in: add gtfiles, define GCC_3_3 in gcc-version.h
          for gcc-3.3

        * expressions.c, gpc-decl.c: handle TImode (needed for alpha)

        * gpc-decl.c: resolve confilcting prototype
          for builtin_function

        * gpc.h, gpc-decl.c, lang.c, module.c, predef.c: updated for
          gcc-3.3 garbage collection: add GTY annotations. For gcc-3.3
          call ggc_alloc for collectable allocations, do not register
          roots.

        * gpc-decl.c: change ereal_atof to REAL_VALUE_ATOF. Add dummy
          language_function.

        * gpc-lex.c: make yylval explicitly extern. Change permalloc to
          xmalloc.

        * gpc-typeck.c: add support for field tags and array indices in
          structured initializers

        * gpc.c: do not pass '-lang-c' to cc1

        * gpcpp.c: recognize and ignore '-quiet'.

        * lang.c: update to new tree code handling in gcc-3.3, changed to
          work with 3.3 diagnostic routines, add new langhooks; copy
          attribute handling from c-common.c

        * module.c: Do not touch DECL_UID and TYPE_UID (let backend
          handle them). For all types reset TREE_ASM_WRITTEN when writing
          to gpi files. For gcc-3.3 allocate memory when loading REAL_CST.

        * diffs/gcc-3.3.diff: new file

2003-04-03 21:04 Frank Heckenbach <frank@@pascal.gnu.de>

        * gpc-typeck.c: start_init(): removed incremental
          constructors (suggested by Waldek Hebisch)

        * gpc.h: TYPE_LANG_VMT_FIELD, TYPE_LANG_VMT_VAR: new fields
          in struct lang_type for objects; store the VMT field and
          variable there instead of as a named var declaration (for
          the latter) and looking them up each time;
          TYPE_LANG_OBJECT_NAME: removed

        * gpc-common.c: renamed to expressions.c; some routines
          moved to and from other files where they fit better

2003-04-01 25:37 Frank Heckenbach <frank@@pascal.gnu.de>

        * gpc-decl.c: declare_vars(): avoid grokdeclarator for
          variables; NEW_DECLARE_VARS branch removed (too incomplete
          and broken, everything it was supposed to do is now done
          by the updated "old" code), merged with declare_variables;
          module.c: load_node(): load VAR_DECL nodes rather than
          rebuilding them

2003-03-31 18:46 Frank Heckenbach <frank@@pascal.gnu.de>

        * diffs/gcc-2.95.diff: add some updates in tree.h and
          dwarf2out.c (mostly copied from gcc-3.2.1) to support
          dwarf with gcc-2.95.x (not successful, seems to require
          more work, probably not worth it for gcc-2); lang.c: added
          note

        * config-lang.in: create gcc-2.95.3.diff, gcc-2.95.3-5.diff
          and gcc-3.2.2.diff as symlinks (they were identical to
          gcc-2.95.diff and gcc-3.2.1 diff except for some offsets
          with `patch -s' will ignore); files removed

2003-03-31 17:12 Peter N Lewis <peter@@stairways.com.au>

        * gpc-common.c, gpc-decl.c, gpc-lex.c, gpc-options.h,
          gpc-typeck.c, gpc.h, options.c, parse.y, predef.c,
          predef.h, util.c: support MAC_PASCAL in dialect specific
          features

2003-03-30 14:55 Frank Heckenbach <frank@@pascal.gnu.de>

        * test/berend1n.pas: changed from an interface-only module
          to a "simple" module (the former never really worked, and
          just failed to cause a compile-time failure, instead
          producing undefined runtime behaviour; see notes there);
          the same will apply to user code having interface-only
          modules

2003-03-29 15:50 Frank Heckenbach <frank@@pascal.gnu.de>

        * utils/mk-t-inc: translate the GPI defines from gpi.h (now
          module.c) to Pascal format (into tree.inc)

        * gpi.h: contents moved (back) to module.c; file removed

2003-03-26 9:17 Frank Heckenbach <frank@@pascal.gnu.de>

        * all target files: check for `__GO32__' instead of `DJGPP'
          or `__DJGPP__' (gcc-3 doesn't seem to define the latter
          anymore, but relies on including <sys/version.h> which
          doesn't happen in Pascal)

2003-03-21 4:31 Frank Heckenbach <frank@@pascal.gnu.de>

        * module.c: store and load parameters, do not rebuild them
          (fixes another instance of the "prior parameter's size
          depends on `Foo'" bug)

2003-03-13 16:26 Frank Heckenbach <frank@@pascal.gnu.de>

        * `all', `absolute', `abstract', `and_then', `as', `asm',
          `asmname', `attribute', `bindable', `constructor',
          `destructor', `export', `external', `far', `forward',
          `implementation', `import', `inherited', `interface',
          `is', `module', `near', `object', `operator', `or_else',
          `otherwise', `pow', `private', `protected', `public',
          `published', `qualified', `restricted', `shl', `shr',
          `unit', `uses', `value', `virtual', `xor': turned to
          "weak" keywords (only recognized if not used as
          identifiers) or regular identifiers (where possible
          without parser conflicts), avoiding the need to enable and
          disable them explicitly; gpc-lex.c: en_disable_keyword():
          removed

        * `inline', `name', `register', `static', `volatile': turned
          from directives (and conditional keywords) into attributes
          (and regular identifiers)

2003-03-05 21:05 Frank Heckenbach <frank@@pascal.gnu.de>

        * module.c: do not transport DECL_UID and TYPE_UID through
          GPI files (they lose uniqueness or even get out of range
          then which breaks dwarf)

2003-02-28 28:52 Frank Heckenbach <frank@@pascal.gnu.de>

        * options.c: new file; code related to command-line options
          and compiler directives from gpc-decl.c and gpc-lex.c
          moved here

        * gpc-lex.c: warn_about_keyword_redeclaration,
          set_identifier_spelling: moved to util.c

2003-02-23 21:38 Frank Heckenbach <frank@@pascal.gnu.de>

        * predef.h: add keywords; gpc-lex.c: recognize keywords via
          IDENTIFIER_BUILT_IN_VALUE rather than using gperf;
          gpc.gperf (and generated hash.h): files removed

2003-02-21 26:50 Adriaan van Os <gpc@@microbizz.nl>

        * gpcpp.c: directive_table, gpc-lex.c:
          process_pascal_directive(): support Mac Pascal directives
          `definec', `macro', `undefc', `ifc', `ifoptc', `elsec',
          `elifc', `endc', `errorc' (treated as equivalent to the
          corresponding existing ones)

2003-02-21 12:50 Frank Heckenbach <frank@@pascal.gnu.de>

        * config-lang.in: remove the special warning for gcc-3.x

2003-02-18 12:41 Frank Heckenbach <frank@@pascal.gnu.de>

        * gpc-decl.c: push_parm_decl(): avoid grokdeclarator for
          parameters

2003-02-15 16:31 Frank Heckenbach <frank@@pascal.gnu.de>

        * gpc-decl.c: avoid grokdeclarator for type definitions;
          store forward types in current_type_list;
          build_type_decl(): don't output type definitions until the
          end of a `type' block when all forward types are resolved;
          resolve_forward_pointers(): output type definitions,
          function renamed to declare_types

2003-02-14 27:17 Frank Heckenbach <frank@@pascal.gnu.de>

        * types.c: maybe_schema_discriminant(): put the
          pseudo-VAR_DECL below the CONVERT_EXPR in discriminant
          placeholders, rather than a constant value, in order to
          prevent the backend from folding

2003-02-11 27:12 Frank Heckenbach <frank@@pascal.gnu.de>

        * parse.y: make undiscriminated schemata and objects
          separate cases in type_definition (saves a number of
          conditional tests compared to merging it with the
          type_denoter rules)

        * parse.y, module.c, etc.: store type initializers in
          TYPE_LANG_INITIAL rather than DECL_INITIAL (so they can be
          obtained from a type, without references to their
          declaration having to be passed around)

2003-02-09 20:54 Russell Whitaker <russ@@ashlandhome.net>

        * diffs/gcc-3.2.2.diff: new file

2003-02-07 24:33 Frank Heckenbach <frank@@pascal.gnu.de>

        * gpc.h: new TYPE_LANG_CODEs
          PASCAL_LANG_UNDISCRIMINATED_STRING,
          PASCAL_LANG_PREDISCRIMINATED_STRING,
          PASCAL_LANG_DISCRIMINATED_STRING,
          PASCAL_LANG_UNDISCRIMINATED_SCHEMA,
          PASCAL_LANG_PREDISCRIMINATED_SCHEMA,
          PASCAL_LANG_DISCRIMINATED_SCHEMA to replace
          PASCAL_LANG_STRING, PASCAL_LANG_SCHEMA and avoid the
          fragile tests for prediscriminated schemata

2003-02-03 28:05 Frank Heckenbach <frank@@pascal.gnu.de>

        * gpc-decl.c: init_decl_processing(): put error_mark_node in
          read-only memory to detect some errors earlier. Since the
          library calls used are not portable, this is only done if
          PROTECT_ERROR_MARK_NODE is defined in gpc.h (currently
          only on Linux where I can test it), and not with gcc-3.x
          since it doesn't seem to work together with its GC

2003-02-02 30:37 Frank Heckenbach <frank@@pascal.gnu.de>

        * all files: flag_what_pascal renamed to pascal_dialect

        * gpc-decl.c: grokfield(): avoid grokdeclarator for
          structure fields, renamed to build_field; p_grokfields:
          renamed to build_fields

2003-01-29 30:03 Frank Heckenbach <frank@@pascal.gnu.de>

        * gpc-decl.c: struct binding_level: new field forward_decls;
          grok_directive(), start_pascal_function(),
          resolve_forward_decl() (new function): keep track of
          forward declarations; check_forward_decls() (new
          function): check for unresolved declarations (az32.pas,
          fjf758*.pas)

2003-01-28 22:13 Frank Heckenbach <frank@@pascal.gnu.de>

        * gpc-decl.c: obsolete usage of IDENTIFIER_LIMBO_VALUE
          removed; gpc.h: IDENTIFIER_LIMBO_VALUE renamed to
          IDENTIFIER_IMPORT_VALUE

2003-01-17 24:51 Frank Heckenbach <frank@@pascal.gnu.de>

        * Make-lang.in, script/make-homepage: use `makeinfo --html'
          instead of texi2html; script/get-href: integrated into
          script/make-homepage

        * Make-lang.in, script/mg, script/mkdjgppgpczip,
          test/gettext2.cmp: prefix all relative directories in `cd'
          commands with `./' to avoid the effects of a $CDPATH set

        * Make-lang.in, utils/Makefile: build and install the
          utilities during a normal GPC build, also their man pages
          if help2man is available

2003-01-10 16:24 Frank Heckenbach <frank@@pascal.gnu.de>

        * gpc.c: synced with gcc-3.2.1's gcc.c

        * diffs/gcc-3.1.1.diff: file removed (gcc-3.2.1 is
          recommended instead now)

        * gpc-lex.c: yylex(): keep track of the given spelling
          (upper/lower case) of identifiers, optionally warn if it
          differs; all files: use the given case for messages, RTS
          file variable names, object names in VMTs

        * gpc.h: struct lang_identifier: new fields spelling,
          spelling_file, spelling_lineno

2003-01-05 23:19 Matthias Klose <doko@@cs.tu-berlin.de>

        * test/Makefile: log results to test_log and test_summary

2003-01-04 25:59 Frank Heckenbach <frank@@pascal.gnu.de>

        * script/testgpc, test/Makefile, test/test_run,
          test/test_sum: support progress messages

2003-01-03 31:55 Frank Heckenbach <frank@@pascal.gnu.de>

        * gpc.h: new macros EM, CHK_EM to simplify checks for
          occurrences of error_mark_node

2002-12-05 25:47 Frank Heckenbach <frank@@pascal.gnu.de>

        * gpc-lex.c: check_if_predefined_type() removed (together
          with the call from parse.y), seems to be completely
          unnecessary

        * gpc-decl.c: lookup_name(): look at
          IDENTIFIER_BUILT_IN_VALUE, checking the dialect flags;
          pascal_decode_option(): don't call declare_known_ids()
          when dialect changes

        * rtscall.c: declare_known_ids(): handle built-in types the
          same way as other built-in names (added to KItable); new
          macros to build KItable; install built-in names
          independently of dialect settings; file renamed to
          predef.c; KItable and rts table: merged, built using
          macros, moved macros to predef.h (new file)

        * parse.y: identifiers of built-in declarations (which
          require no special syntax) moved to rtscall.c (thus
          reducing the size of the generated file parse.c from ~600
          to ~350 KB :-)

        * gpc.lex.c: return LEX_BUILTIN_PROCEDURE,
          LEX_BUILTIN_FUNCTION and LEX_BUILTIN_FUNCTION_VT for
          built-in routines, so the parser doesn't have to know all
          their names

        * util.c: KItable etc.: moved to rtscall.c; set
          IDENTIFIER_BUILT_IN_VALUE

        * gpc.h: IDENTIFIER_BUILT_IN_VALUE: new access macro (and
          corresponding field in struct lang_identifier)

2002-12-03 20:31 Frank Heckenbach <frank@@pascal.gnu.de>

        * gpc-lex.c: en_disable_keyword(): use a counter to allow
          for nested settings, keyword_enabled(): removed; parse.y:
          always do keyword enabling and disabling paired, don't
          need to store the previous value via keyword_enabled()

2002-11-25 17:45 Frank Heckenbach <frank@@pascal.gnu.de>

        * lang-specs.h: dropped the predefined dialect symbols
          `__CLASSIC_PASCAL__', `__STANDARD_PASCAL__',
          `__EXTENDED_PASCAL__', `__OBJECT_PASCAL__',
          `__UCSD_PASCAL__', `__BORLAND_PASCAL__', `__DELPHI__',
          `__PASCAL_SC__' and `__GNU_PASCAL__'; test/dialdef*.pas:
          adjusted

2002-11-25 17:05 Prof. Abimbola A. Olowofoyeku <chiefsoft@@bigfoot.com>
2002-11-25 16:06 Russell Whitaker <russ@@ashlandhome.net>

        * diffs/gcc-3.2.1.diff: new file

2002-11-17 16:56 Waldek Hebisch <hebisch@@math.uni.wroc.pl>

        * lang.c, parse.y: call pascal_init() immediately before
          starting to parse, when the backend has been initialized
          (problem with coff debug info)

        * gpc-decl.c, gpc-typeck.c, module.c, objects.c: put object
          methods in TYPE_METHODS rather than TYPE_FIELDS, to avoid
          confusing the backend (problem with stabs debug info)

2002-11-16 21:38 Frank Heckenbach <frank@@pascal.gnu.de>

        * test/knownbugs: all files marked with `BUG' and moved to
          test/todo; directory removed

2002-11-14 16:59 Frank Heckenbach <frank@@pascal.gnu.de>

        * config-lang.in: create a dummy Makefile.in if needed
          (can't always be avoided, it seems)-: ...

        * diffs/gcc-2.*.diff: patch the gcc configure to check if
          <language>/Makefile.in exists before trying to use it
          (code taken from the configure of gcc-3.1.1); similarly
          for configure.lang

        * Makefile.in: merged with Make-lang.in; file removed

        * pexp.y: turned into a RD parser, integrated into gpcpp.c;
          file removed

2002-11-08 31:53 Frank Heckenbach <frank@@pascal.gnu.de>

        * Make-lang.in: renamed docdir to p_inst_docdir etc. to
          avoid conflicts with a variable in gcc-3.1.1's
          Makefile.in, including renaming DOC_DIR to P_DOC_DIR
          (which is a user-overridable variable)

2002-11-03 25:43 Frank Heckenbach <frank@@pascal.gnu.de>

        * *.[chy]: fixed a lot of issues uncovered by the stricter
          warnings when compiling with gcc-3.1.1 and gcc-2.95 with
          `--enable-checking' (mostly consisting of invalid uses of
          error_mark_node) and by gcc-3.2

2002-11-01 28:30 Frank Heckenbach <frank@@pascal.gnu.de>

        * script/gnumsg2spc: new script

        * objects.c: check_object_pointer(): removed (also call from
          parse.y). What was is useful for, anyway?

2002-10-26 19:31 Frank Heckenbach <frank@@pascal.gnu.de>

        * Make-lang.in, Makefile.in: do the GCC version dependent
          settings at make time, based on some GCC Makefile
          variables with some tricks; config-lang.in: don't patch
          Make-lang.in and Makefile.in anymore. Together with the
          previous change below, this makes it possible to use the
          same GPC source tree for building with several GCC
          versions at the same time.

        * Make-lang.in, Makefile.in, utils/Makefile, script/mkgpc,
          script/cvsupdate: get rid of all occurrences of `..' that
          go from the `p' to the `gcc' source directory. This makes
          it possible to keep the GPC source tree as a symlink in
          the GCC source tree.

        * Make-lang.in: put the version number in gpc-run when
          installing; build manpage using help2man

2002-10-12 22:38 Frank Heckenbach <frank@@pascal.gnu.de>

        * ChangeLog: changed the date to ISO YYYY-MM-DD format

        * gpc.c: synced mostly with gcc-3.2's gcc.c

        * parse.y, gpc.gperf: turned `published' from a keyword into
          a regular identifier. With some parser tricks, we might be
          able to do this with more directives, avoiding their
          en-/disabling.

        * script/make-acconfig-h.m4, script/make-library-interface:
          moved to rts/ to make the RTS more self-contained

2002-10-07 08:47 Waldek Hebisch <hebisch@@math.uni.wroc.pl>
                 Frank Heckenbach <frank@@pascal.gnu.de>

        * gbe.h, gpc-decl.c, gpc.h, gpc-tree.h, gpc-typeck.c,
          lang.c, Makefile.in, Make-lang.in, module.c, rtscall.c,
          types.c: preparations for compiling with gcc-3.1.1;
          p-tree.def: new file

          - make internal calculations and generated code more
            type-correct: introduce byte_integer_type distinct form
            char_type, size calculatons use proper types

          - size calculations do not modify constants, but generate
            new ones

          - tree access macros from 3.1 (gpc.h contains definitions
            for 2.95.3)

          - add new tree codes: p-tree.def; tree codes are added in
            officially-approved way, the addition does not modify
            any gcc sources, only a generated file (tree-checks.h)
            is different (the C compiler binary will be the same)

2002-10-05 19:50 Frank Heckenbach <frank@@pascal.gnu.de>

        * gpc-typeck.c: build_modify_expr(): accept MODIFYCODE ==
          INIT_EXPR for assignments in automatic initializations
          (discriminants, VMTs, ...); otherwise check more strictly

2002-10-03 23:43 Frank Heckenbach <frank@@pascal.gnu.de>

        * Make-lang.in, Makefile.in: remove dependency on and
          linking of c-aux-info.c, c-iterate.c and c-pragma.c (all
          unused)

        * util.c: prepare_for_modification(): new function;
          typed_const_warning(), gpc-typeck.c: readonly_warning():
          integrated into prepare_for_modification()

        * *.[chy]: s/NULL_PTR/NULL/g; removed `register'; added many
          `const's to `char *'

        * gpc.c: removed GPC1_SPEC (`%3'), seems to be unused

2002-09-29 32:52 Frank Heckenbach <frank@@pascal.gnu.de>

        * gpc-decl.c: finish_struct(): align files, objects,
          strings and the types `TimeStamp' and `BindingType' even
          in packed records on systems with strict alignment
          requirements (chief38.pas)

2002-09-29 23:12 Frank Heckenbach <frank@@pascal.gnu.de>

        * pexp.y: new file, derived from ../cexp.y; removed C-ish
          features in conditional expressions: string and char
          constants (as integers), `L' and `U' number suffixes, `0'
          octal and `0x' hexadecimal integers, `,', `?:', `&', `|',
          `^', `~' operators (`&&' etc. are still supported, so some
          "common" conditional expressions can still be shared
          between Pascal and C)

        * gpc-common.c: removed `attribute (constructor)',
          `attribute (destructor)' (Pascal has regular syntactic
          means for defining those), `attribute (volatile)' and
          `attribute (transparent_union)'

        * Makefile.in: adjusted to the header changes and simplified

        * lang.h, util.h, types.h, objects.h, rtscall.h, module.h,
          gpc-tree.h: contents moved to gpc-defs.h (they were quite
          mixed up and most C files included most of the headers,
          anyway); files removed; gpc-defs.h: renamed to gpc.h

        * lang-specs.h, module.c: adjusted to gpcpp changes

        * gpcpp.c: removed many obsolete or C-only features,
          including the default include directories
          (STANDARD_INCLUDE_DIR, LOCAL_INCLUDE_DIR,
          SYSTEM_INCLUDE_DIR, TOOL_INCLUDE_DIR, CROSS_INCLUDE_DIR,
          GCC_INCLUDE_DIR) which are meant only for C headers, the
          options `-dM', `-dN', `-dD', `-g3', `-H', `-ifoutput',
          `-imacros', `-lang-asm', `-lang-c', `-lang-c89',
          `-lang-c++', `-lang-objc', `-lang-objc++', `-lang-pascal'
          (always on now), `-lint', `-nocharescape', `-noprecomp',
          `-nostdinc', `-pcp', `-traditional', `-trigraphs',
          `-A...', `-u...', `-$', `-+', `-C', `-Zomf',
          `-Zc++-comments', `-ZC++-comments' and all `-M...' options
          except for plain `-M' (whose output format was changed),
          the directives `#sccs', `#ident', `#pragma', `#import',
          `#assert', `#unassert' (also in the `{$...}' form), the
          predefined macros `__PTRDIFF_TYPE__', `__SIZE_TYPE__',
          `__WCHAR_TYPE__', `__REGISTER_PREFIX__',
          `__USER_LABEL_PREFIX__', `__IMMEDIATE_PREFIX__',
          `__STDC__', `__STDC_VERSION__', the usage of the
          environment variables `CPATH', `C_INCLUDE_PATH',
          `DEPENDENCIES_OUTPUT' and `SUNPRO_DEPENDENCIES', the file
          name mapping with `header.gcc', the setting of
          INCLUDE_DEFAULTS in the target config file (which is
          mostly relevant for C/C++) as well as the VMS file name
          handling (thereby reducing its size from 364 to 199 KB :-)

        * gpc.c: hack_predefines(): moved this hack to gpcpp.c;
          function removed

2002-09-27 14:35 Marten Jan de Ruiter <m.j.deruiter@@wbmt.tudelft.nl>

        * module.c: gpi_open(): mark a file as `#up to date' after
          recompilation; check for `#up to date' before tentatively
          opening an imported GPI file

2002-09-26 32:02 Frank Heckenbach <frank@@pascal.gnu.de>

        * test/future: directory renamed to todo

2002-09-24 24:49 Frank Heckenbach <frank@@pascal.gnu.de>

        * config-lang.in: symlink the diffs for gcc-2.95.3-8

2002-09-15 23:24 Frank Heckenbach <frank@@pascal.gnu.de>

        * gpc-defs.h: PASCAL_LANG_NON_TEXT_FILE,
          PASCAL_LANG_TEXT_FILE: new TYPE_LANG_CODEs with new access
          macros; TYPE_FILE_TEXT: removed; callers changed, all uses
          of FILE_TYPE, size_of_file_type, size_unit_of_file_type
          removed

2002-09-04 28:01 Frank Heckenbach <frank@@pascal.gnu.de>

        * gpc-common.c: build_pascal_binary_op(): handle comparisons
          between signed and unsigned integers specially because
          otherwise the backend gets them wrong (i.e., like in C)
          (eike2.pas, fjf664.pas)

2002-07-07 24:25 Frank Heckenbach <frank@@pascal.gnu.de>

        * units/tfdd.pas, demos/tfdddemo.pas: new files

2002-07-03 28:44 Frank Heckenbach <frank@@pascal.gnu.de>

        * script/gpc-run: new options `-e FILE' and `-E FILE'

2002-05-14 17:55 Frank Heckenbach <frank@@pascal.gnu.de>

        * script/dvi-reorder: file removed

        * Make-lang.in: gpc.dvi, gpc.pdf: don't call dvi-reorder;
          add `-t @@afourpaper' (for now, until this is possible via
          a configure option or something); use `$(STAMP)' instead
          of `touch'

        * doc/*/gpc.texi: moved `@@summarycontents' and `@@contents'
          to the right place; remove `@@afourpaper'

        * *.[chy]: replaced calls of bcmp, bcopy, bzero, index and
          rindex by memcmp etc.; s/! /!/g; s/~ /~/g; insert ` '
          after type casts
@


1.1
log
@Initial revision
@
text
@@


1.1.2.1
log
@Import an alpha version of GNU Pascal Compiler into the tree
(not to be connected to the build before the upgrade to gcc 3.3).

We couldn't use gpc 2.1 because it's too old and doesn't support
gcc 3.x at all.
@
text
@@
