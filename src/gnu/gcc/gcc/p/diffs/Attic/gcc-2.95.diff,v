head	1.2;
access;
symbols
	gpc-20030830:1.1.2.1 FSF:1.1.2;
locks; strict;
comment	@# @;


1.2
date	2004.01.11.18.35.55;	author tg;	state dead;
branches;
next	1.1;

1.1
date	2004.01.11.18.00.38;	author tg;	state Exp;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2004.01.11.18.00.38;	author tg;	state Exp;
branches;
next	;


desc
@@


1.2
log
@since the gpc people (and others) state gcc 3.3 isn't production quality yet,
let's just play with gpc and the other funky stuff right now, even if that
means still no sparc-gcc3 in current.

also, NO_CXX and friends change from defined/undef'd to yes/no
@
text
@Changes for GCC version 2.95 for GNU Pascal

Before applying these diffs, go to the directory gcc-2.95/gcc
and use the command

    patch -p1

feeding it the following diffs as input.

*** gcc/expr.c.orig	Thu Jul  1 00:59:55 1999
--- gcc/expr.c	Mon Aug 21 01:33:04 2000
***************
*** 4505,4510 ****
--- 4505,4517 ----
  
        domain_min = convert (sizetype, TYPE_MIN_VALUE (domain));
        domain_max = convert (sizetype, TYPE_MAX_VALUE (domain));
+ 
+ #ifdef GPC
+       /* Align the set.  */
+       if (set_alignment)
+         domain_min = size_binop (BIT_AND_EXPR, domain_min, size_int (-set_alignment));
+ #endif /* GPC */
+ 
        bitlength = size_binop (PLUS_EXPR,
  			      size_binop (MINUS_EXPR, domain_max, domain_min),
  			      size_one_node);
***************
*** 4519,4525 ****
--- 4526,4534 ----
        if (GET_MODE (target) != BLKmode || nbits <= 2 * BITS_PER_WORD
  	  || (nbytes <= 32 && TREE_CHAIN (elt) != NULL_TREE))
  	{
+ #ifndef GPC
  	  int set_word_size = TYPE_ALIGN (TREE_TYPE (exp));
+ #endif /* not GPC */
  	  enum machine_mode mode = mode_for_size (set_word_size, MODE_INT, 1);
  	  char *bit_buffer = (char *) alloca (nbits);
  	  HOST_WIDE_INT word = 0;
***************
*** 4531,4540 ****
  	    {
  	      if (bit_buffer[ibit])
  		{
  		  if (BYTES_BIG_ENDIAN)
! 		    word |= (1 << (set_word_size - 1 - bit_pos));
  		  else
! 		    word |= 1 << bit_pos;
  		}
  	      bit_pos++;  ibit++;
  	      if (bit_pos >= set_word_size || ibit == nbits)
--- 4540,4553 ----
  	    {
  	      if (bit_buffer[ibit])
  		{
+ #ifdef GPC
+ 		  if (set_words_big_endian)
+ #else /* not GPC */
  		  if (BYTES_BIG_ENDIAN)
! #endif /* not GPC */
! 		    word |= ((HOST_WIDE_INT) 1 << (set_word_size - 1 - bit_pos));
  		  else
! 		    word |= (HOST_WIDE_INT) 1 << bit_pos;
  		}
  	      bit_pos++;  ibit++;
  	      if (bit_pos >= set_word_size || ibit == nbits)
***************
*** 4645,4650 ****
--- 4658,4669 ----
  	  else
  #endif
  	    {
+ #ifdef GPC
+               /* The language-specific run time library must provide
+                  a suitable `__setbits()' function whose action coincides
+                  with the values of `set_word_size', `set_alignment', and
+                  `set_words_big_endian'.  */
+ #endif /* GPC */
  	      emit_library_call (gen_rtx_SYMBOL_REF (Pmode, "__setbits"),
  				 0, VOIDmode, 4, XEXP (targetx, 0), Pmode,
  				 bitlength_rtx, TYPE_MODE (sizetype),
*** gcc/fold-const.c.orig	Mon Aug 21 01:32:54 2000
--- gcc/fold-const.c	Mon Aug 21 01:33:35 2000
***************
*** 1462,1469 ****
--- 1462,1473 ----
      }
  
    TREE_OVERFLOW (t)
+ #ifdef GPC
+     = ((notrunc ? overflow : force_fit_type (t, overflow))
+ #else /* not GPC */
      = ((notrunc ? (!uns || forsize) && overflow
  	: force_fit_type (t, (!uns || forsize) && overflow) && ! no_overflow)
+ #endif /* not GPC */
         | TREE_OVERFLOW (arg1)
         | TREE_OVERFLOW (arg2));
    /* If we're doing a size calculation, unsigned arithmetic does overflow.
***************
*** 4720,4729 ****
  				    TREE_TYPE (TREE_TYPE (arg0)),
  				    TREE_OPERAND (arg0, 1))));
        else if (TREE_CODE (arg0) == COMPLEX_CST)
! 	return build_complex (type, TREE_OPERAND (arg0, 0),
  			      fold (build1 (NEGATE_EXPR,
  					    TREE_TYPE (TREE_TYPE (arg0)),
! 					    TREE_OPERAND (arg0, 1))));
        else if (TREE_CODE (arg0) == PLUS_EXPR || TREE_CODE (arg0) == MINUS_EXPR)
  	return fold (build (TREE_CODE (arg0), type,
  			    fold (build1 (CONJ_EXPR, type,
--- 4724,4733 ----
  				    TREE_TYPE (TREE_TYPE (arg0)),
  				    TREE_OPERAND (arg0, 1))));
        else if (TREE_CODE (arg0) == COMPLEX_CST)
! 	return build_complex (type, TREE_REALPART (arg0),
  			      fold (build1 (NEGATE_EXPR,
  					    TREE_TYPE (TREE_TYPE (arg0)),
! 					    TREE_IMAGPART (arg0))));
        else if (TREE_CODE (arg0) == PLUS_EXPR || TREE_CODE (arg0) == MINUS_EXPR)
  	return fold (build (TREE_CODE (arg0), type,
  			    fold (build1 (CONJ_EXPR, type,
*** gcc/stor-layout.c.orig	Thu Mar 11 14:56:20 1999
--- gcc/stor-layout.c	Mon Aug 21 01:33:04 2000
***************
*** 19,24 ****
--- 19,26 ----
  Boston, MA 02111-1307, USA.  */
  
  
+ /* @@@@ PATCHED FOR GPC 20030218 @@@@ */
+ 
  #include "config.h"
  #include "system.h"
  
***************
*** 53,58 ****
--- 55,73 ----
     May be overridden by front-ends.  */
  int set_alignment = 0;
  
+ #ifdef GPC
+ /* The word size of a bitstring or (power-)set value, in bits.
+    Must be non-zero.
+    May be overridden by front-ends.  */
+ int set_word_size = BITS_PER_UNIT;
+ 
+ /* If non-zero, bits in (power-)sets start with the highest bit.
+    May be overridden by front-ends.
+    In order to be backward-compatible, the Chill frontend should
+    initialize this to BYTES_BIG_ENDIAN.  */
+ int set_words_big_endian = 0;
+ #endif /* GPC */
+ 
  static tree layout_record	PROTO((tree));
  static void layout_union	PROTO((tree));
  
***************
*** 1040,1045 ****
--- 1055,1074 ----
  	abort();
        else
  	{
+ #ifdef GPC
+ 	  int alignment = set_alignment ? set_alignment : set_word_size;
+           int lower_bound = TREE_INT_CST_LOW (TYPE_MIN_VALUE (TYPE_DOMAIN (type)));
+           int upper_bound = TREE_INT_CST_LOW (TYPE_MAX_VALUE (TYPE_DOMAIN (type)));
+ 	  int size_in_bits, rounded_size;
+           if (set_alignment)
+             size_in_bits = upper_bound - (lower_bound & (-alignment)) + 1;
+           else
+ 	    size_in_bits
+               = (TREE_INT_CST_LOW (TYPE_MAX_VALUE (TYPE_DOMAIN (type)))
+ 	         - TREE_INT_CST_LOW (TYPE_MIN_VALUE (TYPE_DOMAIN (type))) + 1);
+ 	  rounded_size
+ 	    = ((size_in_bits + alignment - 1) / alignment) * alignment;
+ #else /* not GPC */
  #ifndef SET_WORD_SIZE
  #define SET_WORD_SIZE BITS_PER_WORD
  #endif
***************
*** 1049,1054 ****
--- 1078,1084 ----
  	       - TREE_INT_CST_LOW (TYPE_MIN_VALUE (TYPE_DOMAIN (type))) + 1);
  	  int rounded_size
  	    = ((size_in_bits + alignment - 1) / alignment) * alignment;
+ #endif /* not GPC */
  	  if (rounded_size > alignment)
  	    TYPE_MODE (type) = BLKmode;
  	  else
*** gcc/tree.c.orig	Mon Aug  2 07:07:23 1999
--- gcc/tree.c	Mon Aug 21 01:33:04 2000
***************
*** 637,642 ****
--- 637,659 ----
      = (char *) obstack_alloc (function_maybepermanent_obstack, 0);
  }
  
+ #ifdef GPC
+ /* When building a type copy or something similar, and the original
+    type (whose obstack is used, which is done by the caller) is
+    placed on the function_maybepermanent_obstack *before* its limit
+    (maybepermanent_firstobj), the new type must be there as well
+    because it is kept as a variant of the original type, i.e. we
+    must set the limit here. */
+ static void
+ check_type_obstack (type)
+      tree type;
+ {
+   if (TYPE_OBSTACK (type) == function_maybepermanent_obstack
+       && (char *) type < maybepermanent_firstobj)
+     preserve_data ();
+ }
+ #endif
+ 
  void
  preserve_initializer ()
  {
***************
*** 3379,3384 ****
--- 3396,3404 ----
  	 then type_hash_add calls oballoc expecting to get something permanent
  	 back.  */
        current_obstack = ambient_obstack;
+ #ifdef GPC
+       check_type_obstack (ttype);
+ #endif
      }
  
    return ttype;
***************
*** 3695,3700 ****
--- 3715,3723 ----
    current_obstack = TYPE_OBSTACK (type);
    t = copy_node (type);
    current_obstack = ambient_obstack;
+ #ifdef GPC
+   check_type_obstack (type);
+ #endif
  
    TYPE_POINTER_TO (t) = 0;
    TYPE_REFERENCE_TO (t) = 0;
***************
*** 4155,4160 ****
--- 4178,4186 ----
    push_obstacks (TYPE_OBSTACK (to_type), TYPE_OBSTACK (to_type));
    t = make_node (POINTER_TYPE);
    pop_obstacks ();
+ #ifdef GPC
+   check_type_obstack (to_type);
+ #endif
  
    TREE_TYPE (t) = to_type;
  
***************
*** 4190,4195 ****
--- 4216,4224 ----
    push_obstacks (TYPE_OBSTACK (itype), TYPE_OBSTACK (itype));
    TYPE_MAX_VALUE (itype) = convert (sizetype, maxval);
    pop_obstacks ();
+ #ifdef GPC
+   check_type_obstack (itype);
+ #endif
  
    TYPE_MODE (itype) = TYPE_MODE (sizetype);
    TYPE_SIZE (itype) = TYPE_SIZE (sizetype);
***************
*** 4230,4235 ****
--- 4259,4267 ----
    TYPE_MIN_VALUE (itype) = convert (type, lowval);
    TYPE_MAX_VALUE (itype) = highval ? convert (type, highval) : NULL;
    pop_obstacks ();
+ #ifdef GPC
+   check_type_obstack (itype);
+ #endif
  
    TYPE_PRECISION (itype) = TYPE_PRECISION (type);
    TYPE_MODE (itype) = TYPE_MODE (type);
***************
*** 4397,4402 ****
--- 4429,4437 ----
    push_obstacks (TYPE_OBSTACK (to_type), TYPE_OBSTACK (to_type));
    t = make_node (REFERENCE_TYPE);
    pop_obstacks ();
+ #ifdef GPC
+   check_type_obstack (to_type);
+ #endif
  
    TREE_TYPE (t) = to_type;
  
***************
*** 5025,5030 ****
--- 5060,5074 ----
    HOST_WIDE_INT domain_min
      = TREE_INT_CST_LOW (TYPE_MIN_VALUE (TYPE_DOMAIN (TREE_TYPE (init))));
    tree non_const_bits = NULL_TREE;
+ 
+ #ifdef GPC
+   /* Align the set.  */
+   if (set_alignment)
+     /* Note: `domain_min -= domain_min % set_alignment' would be wrong for negative
+        numbers (rounding towards 0, while we have to round towards -inf). */
+     domain_min &= -set_alignment;
+ #endif /* GPC */
+ 
    for (i = 0; i < bit_size; i++)
      buffer[i] = 0;
  
***************
*** 5044,5051 ****
  	  HOST_WIDE_INT hi_index
  	    = TREE_INT_CST_LOW (TREE_VALUE (vals)) - domain_min;
  	  if (lo_index < 0 || lo_index >= bit_size
! 	    || hi_index < 0 || hi_index >= bit_size)
! 	    abort ();
  	  for ( ; lo_index <= hi_index; lo_index++)
  	    buffer[lo_index] = 1;
  	}
--- 5088,5098 ----
  	  HOST_WIDE_INT hi_index
  	    = TREE_INT_CST_LOW (TREE_VALUE (vals)) - domain_min;
  	  if (lo_index < 0 || lo_index >= bit_size
! 	      || hi_index < 0 || hi_index >= bit_size)
! 	    {
! 	      error ("invalid set initializer");
! 	      return NULL_TREE;
! 	    }
  	  for ( ; lo_index <= hi_index; lo_index++)
  	    buffer[lo_index] = 1;
  	}
***************
*** 5056,5062 ****
  	    = TREE_INT_CST_LOW (TREE_VALUE (vals)) - domain_min;
  	  if (index < 0 || index >= bit_size)
  	    {
! 	      error ("invalid initializer for bit string");
  	      return NULL_TREE;
  	    }
  	  buffer[index] = 1;
--- 5103,5109 ----
  	    = TREE_INT_CST_LOW (TREE_VALUE (vals)) - domain_min;
  	  if (index < 0 || index >= bit_size)
  	    {
! 	      error ("invalid set initializer");
  	      return NULL_TREE;
  	    }
  	  buffer[index] = 1;
***************
*** 5077,5084 ****
--- 5124,5135 ----
       int wd_size;
  {
    int i;
+ #ifdef GPC
+   int bit_size = wd_size * BITS_PER_UNIT;
+ #else /* not GPC */
    int set_word_size = BITS_PER_UNIT;
    int bit_size = wd_size * set_word_size;
+ #endif /* not GPC */
    int bit_pos = 0;
    unsigned char *bytep = buffer;
    char *bit_buffer = (char *) alloca(bit_size);
***************
*** 5089,5094 ****
--- 5140,5163 ----
  
    for (i = 0; i < bit_size; i++)
      {
+ #ifdef GPC
+       if (bit_buffer[i])
+ 	{
+           int k = bit_pos / BITS_PER_UNIT;
+           if (WORDS_BIG_ENDIAN)
+             k = set_word_size / BITS_PER_UNIT - 1 - k;
+ 	  if (set_words_big_endian)
+ 	    bytep[k] |= (1 << (BITS_PER_UNIT - 1 - bit_pos % BITS_PER_UNIT));
+ 	  else
+ 	    bytep[k] |= (1 << (bit_pos % BITS_PER_UNIT));
+ 	}
+       bit_pos++;
+       if (bit_pos >= set_word_size)
+ 	{
+           bit_pos = 0;
+           bytep += set_word_size / BITS_PER_UNIT;
+         }
+ #else /* not GPC */
        if (bit_buffer[i])
  	{
  	  if (BYTES_BIG_ENDIAN)
***************
*** 5099,5104 ****
--- 5168,5174 ----
        bit_pos++;
        if (bit_pos >= set_word_size)
  	bit_pos = 0, bytep++;
+ #endif /* not GPC */
      }
    return non_const_bits;
  }
*** gcc/tree.h.orig	Sun May  2 19:43:32 1999
--- gcc/tree.h	Mon Aug 21 01:33:04 2000
***************
*** 1133,1139 ****
  /* Nonzero for any sort of ..._DECL node means this decl node represents
     an inline instance of some original (abstract) decl from an inline function;
     suppress any warnings about shadowing some other variable.  */
! #define DECL_FROM_INLINE(NODE) (DECL_ABSTRACT_ORIGIN (NODE) != (tree) 0)
  
  /* Nonzero if a _DECL means that the name of this decl should be ignored
     for symbolic debug purposes.  */
--- 1133,1140 ----
  /* Nonzero for any sort of ..._DECL node means this decl node represents
     an inline instance of some original (abstract) decl from an inline function;
     suppress any warnings about shadowing some other variable.  */
! #define DECL_FROM_INLINE(NODE) (DECL_ABSTRACT_ORIGIN (NODE) != NULL_TREE \
! 				&& DECL_ABSTRACT_ORIGIN (NODE) != (NODE))
  
  /* Nonzero if a _DECL means that the name of this decl should be ignored
     for symbolic debug purposes.  */
***************
*** 1631,1636 ****
--- 1632,1645 ----
  /* If non-zero, the alignment of a bitstring or (power-)set value, in bits. */
  extern int set_alignment;
  
+ #ifdef GPC
+ /* The word size of a bitstring or (power-)set value, in bits.  */
+ extern int set_word_size;
+ 
+ /* If non-zero, bits in (power-)sets start with the highest bit.  */
+ extern int set_words_big_endian;
+ #endif /* GPC */
+ 
  /* Concatenate two lists (chains of TREE_LIST nodes) X and Y
     by making the last node in X point to Y.
     Returns X, except if X is 0 returns Y.  */
*** gcc/tree.def.orig	Mon May 17 09:21:12 1999
--- gcc/tree.def	Mon Aug 21 01:33:04 2000
***************
*** 490,528 ****
  DEFTREECODE (CLEANUP_POINT_EXPR, "cleanup_point_expr", 'e', 1)
  
  /* The following two codes are used in languages that have types where
!    the position and/or sizes of fields vary from object to object of the
!    same type, i.e., where some other field in the object contains a value
!    that is used in the computation of another field's offset or size.
! 
!    For example, a record type with a discriminant in Ada is such a type.
!    This mechanism is also used to create "fat pointers" for unconstrained
!    array types in Ada; the fat pointer is a structure one of whose fields is
!    a pointer to the actual array type and the other field is a pointer to a
!    template, which is a structure containing the bounds of the array.  The
!    bounds in the type pointed to by the first field in the fat pointer refer
!    to the values in the template.
! 
!    These "self-references" are doing using a PLACEHOLDER_EXPR.  This is a
!    node that will later be replaced with the object being referenced.  Its type
!    is that of the object and selects which object to use from a chain of
!    references (see below).
! 
!    When we wish to evaluate a size or offset, we check it is contains a
!    placeholder.  If it does, we construct a WITH_RECORD_EXPR that contains
!    both the expression we wish to evaluate and an expression within which the
!    object may be found.  The latter expression is the object itself in
!    the simple case of an Ada record with discriminant, but it can be the
!    array in the case of an unconstrained array.
! 
!    In the latter case, we need the fat pointer, because the bounds of the
!    array can only be accessed from it.  However, we rely here on the fact that
!    the expression for the array contains the dereference of the fat pointer
!    that obtained the array pointer.
  
     Accordingly, when looking for the object to substitute in place of
     a PLACEHOLDER_EXPR, we look down the first operand of the expression
!    passed as the second operand to WITH_RECORD_EXPR until we find something
!    of the desired type or reach a constant.  */
  
  /* Denotes a record to later be supplied with a WITH_RECORD_EXPR when
     evaluating this expression.  The type of this expression is used to
--- 490,547 ----
  DEFTREECODE (CLEANUP_POINT_EXPR, "cleanup_point_expr", 'e', 1)
  
  /* The following two codes are used in languages that have types where
!    some field in an object of the type contains a value that is used in
!    the computation of another field's offset or size and/or the size of
!    the type.  The positions and/or sizes of fields can vary from object
!    to object of the same type or even for one and the same object within
!    its scope.
! 
!    Record types with discriminants in Ada or schema types in Pascal are
!    examples of such types.  This mechanism is also used to create "fat
!    pointers" for unconstrained array types in Ada; the fat pointer is a
!    structure one of whose fields is a pointer to the actual array type
!    and the other field is a pointer to a template, which is a structure
!    containing the bounds of the array.  The bounds in the type pointed
!    to by the first field in the fat pointer refer to the values in the
!    template.
! 
!    When you wish to construct such a type you need "self-references"
!    that allow you to reference the object having this type from the
!    TYPE node, i.e. without having a variable instantiating this type.
! 
!    Such a "self-references" is done using a PLACEHOLDER_EXPR.  This is
!    a node that will later be replaced with the object being referenced.
!    Its type is that of the object and selects which object to use from
!    a chain of references (see below).  No other slots are used in the
!    PLACEHOLDER_EXPR.
! 
!    For example, if your type FOO is a RECORD_TYPE with a field BAR,
!    and you need the value of <variable>.BAR to calculate TYPE_SIZE
!    (FOO), just substitute <variable> above with a PLACEHOLDER_EXPR
!    whose TREE_TYPE is FOO.  Then construct your COMPONENT_REF with
!    the PLACEHOLDER_EXPR as the first operand (which has the correct
!    type).  Later, when the size is needed in the program, the back-end
!    will find this PLACEHOLDER_EXPR and generate code to calculate the
!    actual size at run-time.  In the following, we describe how this
!    calculation is done.
! 
!    When we wish to evaluate a size or offset, we check whether it
!    contains a PLACEHOLDER_EXPR.  If it does, we construct a
!    WITH_RECORD_EXPR that contains both the expression we wish to
!    evaluate and an expression within which the object may be found.
!    The latter expression is the object itself in the simple case of an
!    Ada record with discriminant, but it can be the array in the case of
!    an unconstrained array.
! 
!    In the latter case, we need the fat pointer, because the bounds of
!    the array can only be accessed from it.  However, we rely here on the
!    fact that the expression for the array contains the dereference of
!    the fat pointer that obtained the array pointer.
  
     Accordingly, when looking for the object to substitute in place of
     a PLACEHOLDER_EXPR, we look down the first operand of the expression
!    passed as the second operand to WITH_RECORD_EXPR until we find
!    something of the desired type or reach a constant.  */
  
  /* Denotes a record to later be supplied with a WITH_RECORD_EXPR when
     evaluating this expression.  The type of this expression is used to
*** gcc/dbxout.c.orig	Tue Jan 15 00:41:26 2002
--- gcc/dbxout.c	Sat Nov  2 04:24:37 2002
***************
*** 1160,1165 ****
--- 1160,1169 ----
  	 HOST_BITS_PER_WIDE_INT.  That is wrong since gdb uses a
  	 long (it has no concept of HOST_BITS_PER_WIDE_INT).  */
        else if (use_gnu_debug_info_extensions
+ #ifdef GPC
+ 	       && TREE_CODE (TYPE_MIN_VALUE (type)) == INTEGER_CST
+ 	       && TREE_CODE (TYPE_MAX_VALUE (type)) == INTEGER_CST
+ #endif
  	       && (TYPE_PRECISION (type) > TYPE_PRECISION (integer_type_node)
  		   || TYPE_PRECISION (type) >= HOST_BITS_PER_LONG))
  	{
***************
*** 1296,1301 ****
--- 1300,1306 ----
  	  dbxout_type (TYPE_DOMAIN (type), 0, 0);
  	  break;
  	}
+ 
        /* Output "a" followed by a range type definition
  	 for the index type of the array
  	 followed by a reference to the target-type.
*** gcc/dwarf2out.c.orig	Mon Apr  9 11:27:08 2001
--- gcc/dwarf2out.c	Tue Oct  8 12:02:53 2002
***************
*** 6264,6272 ****
        || TREE_CODE (type) == VOID_TYPE)
      return 0;
  
!   if (TREE_CODE (name) == TYPE_DECL)
!     name = DECL_NAME (name);
!   type_name = IDENTIFIER_POINTER (name);
  
    switch (TREE_CODE (type))
      {
--- 6264,6278 ----
        || TREE_CODE (type) == VOID_TYPE)
      return 0;
  
!   if (name)
!     {
!       if (TREE_CODE (name) == TYPE_DECL)
!         name = DECL_NAME (name);
! 
!       type_name = IDENTIFIER_POINTER (name);
!     }
!   else
!     type_name = "__unknown__";
  
    switch (TREE_CODE (type))
      {
***************
*** 7372,7386 ****
        /* Else leave out the attribute.  */
        break;
  
-     case MAX_EXPR:
      case VAR_DECL:
      case COMPONENT_REF:
!       /* ??? These types of bounds can be created by the Ada front end,
! 	 and it isn't clear how to emit debug info for them.  */
        break;
  
      default:
!       abort ();
      }
  }
  
--- 7378,7394 ----
        /* Else leave out the attribute.  */
        break;
  
      case VAR_DECL:
      case COMPONENT_REF:
!     case PARM_DECL:
!       /* ??? These types of bounds as well as all kinds of expressions
!              can be created by the Ada and Pascal front ends,
!              and it isn't clear how to emit debug info for them.  */
        break;
  
      default:
!       if (!IS_EXPR_CODE_CLASS (TREE_CODE_CLASS (TREE_CODE (bound))))
!         abort ();
      }
  }
  
***************
*** 7797,7803 ****
  
        if (i < 0)
  	{
! 	  if (TREE_CODE_CLASS (TREE_CODE (containing_scope)) != 't')
  	    abort ();
  	  if (debug_info_level > DINFO_LEVEL_TERSE
  	      && !TREE_ASM_WRITTEN (containing_scope))
--- 7805,7812 ----
  
        if (i < 0)
  	{
! 	  if (TREE_CODE_CLASS (TREE_CODE (containing_scope)) != 't'
! 	      && TREE_CODE_CLASS (TREE_CODE (containing_scope)) != 'd')
  	    abort ();
  	  if (debug_info_level > DINFO_LEVEL_TERSE
  	      && !TREE_ASM_WRITTEN (containing_scope))
***************
*** 9525,9531 ****
        /* Don't output any DIEs to represent mere function declarations,
  	 unless they are class members or explicit block externs.  */
        if (DECL_INITIAL (decl) == NULL_TREE && DECL_CONTEXT (decl) == NULL_TREE
! 	  && (current_function_decl == NULL_TREE || ! DECL_ARTIFICIAL (decl)))
  	break;
  
        if (debug_info_level > DINFO_LEVEL_TERSE)
--- 9534,9540 ----
        /* Don't output any DIEs to represent mere function declarations,
  	 unless they are class members or explicit block externs.  */
        if (DECL_INITIAL (decl) == NULL_TREE && DECL_CONTEXT (decl) == NULL_TREE
! 	  && (current_function_decl == NULL_TREE || DECL_ARTIFICIAL (decl)))
  	break;
  
        if (debug_info_level > DINFO_LEVEL_TERSE)
*** gcc/function.c.orig	Sun Nov 21 17:48:49 1999
--- gcc/function.c	Sat Nov  9 03:47:16 2002
***************
*** 1572,1578 ****
  
    /* If this is a variable-size object with a pseudo to address it,
       put that pseudo into the stack, if the var is nonlocal.  */
!   if (DECL_NONLOCAL (decl)
        && GET_CODE (reg) == MEM
        && GET_CODE (XEXP (reg, 0)) == REG
        && REGNO (XEXP (reg, 0)) > LAST_VIRTUAL_REGISTER)
--- 1572,1578 ----
  
    /* If this is a variable-size object with a pseudo to address it,
       put that pseudo into the stack, if the var is nonlocal.  */
!   if (TREE_CODE (decl) != SAVE_EXPR && DECL_NONLOCAL (decl)
        && GET_CODE (reg) == MEM
        && GET_CODE (XEXP (reg, 0)) == REG
        && REGNO (XEXP (reg, 0)) > LAST_VIRTUAL_REGISTER)
*** gcc/configure.orig	Sun Nov 21 17:48:49 1999
--- gcc/configure	Thu Nov 14 16:40:14 2002
***************
*** 8379,8385 ****
  			echo "${srcdir}/$s/config-lang.in doesn't set \$language." 1>&2
  			exit 1
  		fi
! 		all_lang_makefiles="$all_lang_makefiles ${srcdir}/$s/Make-lang.in ${srcdir}/$s/Makefile.in"
  		all_languages="$all_languages $language"
  		if test "x$boot_language" = xyes
  		then
--- 8379,8388 ----
  			echo "${srcdir}/$s/config-lang.in doesn't set \$language." 1>&2
  			exit 1
  		fi
! 		all_lang_makefiles="$all_lang_makefiles ${srcdir}/$s/Make-lang.in"
! 		if test -f ${srcdir}/$s/Makefile.in
! 		then all_lang_makefiles="$all_lang_makefiles ${srcdir}/$s/Makefile.in"
! 		fi
  		all_languages="$all_languages $language"
  		if test "x$boot_language" = xyes
  		then
*** gcc/configure.lang.orig	Wed Dec 16 21:54:24 1998
--- gcc/configure.lang	Thu Nov 14 17:08:12 2002
***************
*** 50,55 ****
--- 50,56 ----
  	test -d $subdir || mkdir $subdir
  	cd $subdir
  
+ if test -f Makefile.in; then
  	# Create Makefile.tem from Makefile.in.
  	# Make it set VPATH if necessary so that the sources are found.
  	# Also change its value of srcdir.
***************
*** 157,162 ****
--- 158,164 ----
  		mv Makefile.xx Makefile.tem
  		rm -f Makefile.ll
  	fi
+ fi
  
  	# If the host supports
  	# symlinks, point stage[123] at ../stage[123] so bootstrapping and the
***************
*** 169,174 ****
--- 171,177 ----
  		$symbolic_link ../$t $t 2>/dev/null
  	done
  
+ if test -f Makefile.in; then
  	# Remove all formfeeds, since some Makes get confused by them.
  	# Also arrange to give the variables `target', `target_alias',
  	# `host_xmake_file', `tmake_file', `prefix', `local_prefix',
***************
*** 225,230 ****
--- 228,234 ----
  	rm -f Makefile
  	mv Makefile.tem Makefile
  	echo "Created \`$subdir/Makefile'."
+ fi
  
  	cd $STARTDIR
  done   # end of current-dir SUBDIRS loop
@


1.1
log
@Initial revision
@
text
@@


1.1.2.1
log
@Import an alpha version of GNU Pascal Compiler into the tree
(not to be connected to the build before the upgrade to gcc 3.3).

We couldn't use gpc 2.1 because it's too old and doesn't support
gcc 3.x at all.
@
text
@@
