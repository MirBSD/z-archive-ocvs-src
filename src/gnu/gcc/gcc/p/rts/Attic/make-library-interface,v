head	1.3;
access;
symbols
	gpc-20030830:1.1.2.1 FSF:1.1.2;
locks; strict;
comment	@# @;


1.3
date	2004.08.13.04.53.47;	author tg;	state dead;
branches;
next	1.2;

1.2
date	2004.03.10.17.37.52;	author tg;	state Exp;
branches;
next	1.1;

1.1
date	2004.01.11.18.01.27;	author tg;	state Exp;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2004.01.11.18.01.27;	author tg;	state Exp;
branches;
next	;


desc
@@


1.3
log
@no C++, Java(TM), Pascal, Objective C or Fortran 77 for a while
as discussed on the mailing list
@
text
@#!/bin/ksh
# $MirBSD: src/gnu/gcc/gcc/p/rts/make-library-interface,v 1.2 2004/03/10 17:37:52 tg Exp $

# Create a Pascal library interface from a template and the
# interfaces of the units that the library consists of. The units
# and their comments must be formatted in a certain way. This is no
# completely general tool. (The more general solution would be to
# have the compiler write a GPI file for the library, but until GPC
# can do that, this script is better than nothing.)
#
# Copyright (C) 2001-2003 Free Software Foundation, Inc.
#
# Author: Frank Heckenbach <frank@@pascal.gnu.de>
#
# This file is part of GNU Pascal.
#
# GNU Pascal is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2, or (at your option)
# any later version.
#
# GNU Pascal is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with GNU Pascal; see the file COPYING. If not, write to the
# Free Software Foundation, 59 Temple Place - Suite 330, Boston, MA
# 02111-1307, USA.

if [ $# -ne 3 ]; then
  echo "Usage: `basename $0` template dest version" >&2
  exit 1
fi

# Find a good awk.
if test -z "$AWK"; then
  for AWK in gawk nawk awk ""; do
    if type "$AWK" 2>&1 | grep 'not found' > /dev/null 2>&1; then
      :
    else
      break
    fi
  done
fi
if test -z "$AWK"; then
  echo 'No awk found.' >&2
  exit 1
fi

process_unit ()
{
  # This awk script should be DAU-awk safe ... :-/
  "$AWK" '
    BEGIN { d = ""; empty = 0; state = 0 }
    # Handle states in reversed order, so that after state++
    # the new state is not handled for the same line.
    state == 2 && /^implementation$/ { exit 0 }
    state == 2 && /^ *{@@internal}$/ { state = - state }
    state == 2 && !/^uses/ {
      line = $0
      # Remove variable initializers and make the declarations external
      i = index (line, ":")
      j = index (line, "=")
      l = index (line, "(")  # no schema types
      if (i > 0 && j > i && (l == 0 || l > j))
        {
          while (j > 1 && substr (line, j - 1, 1) == " ") j--
          while ((k = index (line, ";")) == 0)
            {
              getline
              line = line " " $0
            }
          if (k > j)
            line = substr (line, 1, j - 1) substr (line, k)
        }
      t = line
      gsub ("\\{.*\\}", "", t)
      if (t ~ /attribute \(name =/ || t ~ /attribute \([^)]*, *name =/)
        line = line " external;"
      # Do not print multiple empty lines in a row
      if (!empty || line != "") print line
      if (line == "")
        empty = 1
      else
        empty = 0
    }
    state < 0 && /^ *{@@endinternal}$/ { state = - state }
    state == 1 && /^interface$/ { state++ }
    state == 0 {
      sub ("^{ *", "")
      if ($0 != "")
        {
          if (d != "") d = d "\n"
          d = d $0
        }
    }
    state == 0 && /^$/ {
      print "{ " d ", from '"$1"' }"
      state++;
    }
  ' < "$1" || return 1
}

main ()
{
  echo "{ This file was generated automatically from $1."
  echo "  DO NOT CHANGE THIS FILE MANUALLY! }"
  echo ""
  # Instead of the following bash/awk combination, we could do it
  # all within awk, but only GNU awk. Other versions of awk don't
  # support getline from secondary files, for instance ...
  ORIG_IFS="$IFS"
  sed -e "s/@@VERSION@@/$2/" "$1" |
  while IFS=""; read -r line; do
    IFS="$ORIG_IFS"
    case "$line" in
      @@interface*) process_unit "`echo "$line" | sed -e 's/^@@interface *//'`" || return 1;;
      *) echo "$line";;
    esac
  done
}

main "$1" "$3" > "$2" || { rm -f "$2"; exit 1; }
@


1.2
log
@* fix the build system
* fix and enable the GNU Pascal RTS and Utils
  -> gpc is now fully supported; Hello World works.
* merge OpenBSD-OpenSSH 3.8, bump patchlevel
* add fchroot(2) diff, From: Pedro Martelletto <pbastos@@rdc.puc-rio.br>
* add fchroot(2) man page from NetBSD and myself
* fix orders of manpage sections
* fix displaying of .Nx mdoc macro
* convert scripts requiring bash to ksh
* nuke a shutload of GNU make idiotisms
* add pregenerated manpages - help2man is just bloat
* increase shlib versions after fchroot addition
* adjust and unbreak mk.conf after recent changes
* fix boot system version number after CD boot changes
* understand why Makefile.bsd-wrapper is needed as filename. Finally.
* regenerate files after syscalls.master change
* fix RCS Id detection and generation while here
* remove unused archs while there
* use __RCSID() macro in ssh ifdef __MirBSD__
* build ssh with -Werror, too

Note: this is a pre-snapshot, pre-build commit. Nothing
of this has actually been tested.

Like I said, please wait for the snapshot. Though, the
snapshot doesn't have any more circumstances preventing
me from working towards a release and upload now.
@
text
@d2 1
a2 1
# $MirBSD$
@


1.1
log
@Initial revision
@
text
@d1 2
a2 1
#!/bin/sh
a30 18

# This script requires bash. Since bash cannot be assumed to be in
# /bin, /usr/bin or any other certain place, we cannot use it in the
# first line. So we use /bin/sh, which can be assumed to exist. Then
# we check if it's actually bash, and if not, try to re-run the
# script with bash.
if [ x"$BASH" = x ]; then
  if [ x"$RERUN_BASH_TRIED" != x ]; then
    echo "`basename "$0"`: cannot run, \`bash' is either not bash or a very old version" >&2
    exit 1
  else
    RERUN_BASH_TRIED=1; export RERUN_BASH_TRIED
    exec bash "$0" "$@@"
    echo "`basename "$0"`: cannot run bash" >&2
    exit 1
  fi
fi
RERUN_BASH_TRIED=""
@


1.1.2.1
log
@Import an alpha version of GNU Pascal Compiler into the tree
(not to be connected to the build before the upgrade to gcc 3.3).

We couldn't use gpc 2.1 because it's too old and doesn't support
gcc 3.x at all.
@
text
@@
