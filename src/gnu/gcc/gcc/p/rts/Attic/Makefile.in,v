head	1.4;
access;
symbols
	gpc-20030830:1.1.2.1 FSF:1.1.2;
locks; strict;
comment	@# @;


1.4
date	2004.08.13.04.53.44;	author tg;	state dead;
branches;
next	1.3;

1.3
date	2004.03.10.17.37.44;	author tg;	state Exp;
branches;
next	1.2;

1.2
date	2004.02.29.18.57.55;	author tg;	state Exp;
branches;
next	1.1;

1.1
date	2004.01.11.18.01.24;	author tg;	state Exp;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2004.01.11.18.01.24;	author tg;	state Exp;
branches;
next	;


desc
@@


1.4
log
@no C++, Java(TM), Pascal, Objective C or Fortran 77 for a while
as discussed on the mailing list
@
text
@# $MirBSD: src/gnu/gcc/gcc/p/rts/Makefile.in,v 1.3 2004/03/10 17:37:44 tg Exp $
#
# Makefile for the GNU Pascal Run Time System
#
# Copyright (C) 1995-2003 Free Software Foundation, Inc.
#
# Authors: J.J. van der Heijden <j.j.vanderheijden@@student.utwente.nl>
#          Frank Heckenbach <frank@@pascal.gnu.de>
#
# This file is part of GNU Pascal.
#
# GNU Pascal is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2, or (at your option)
# any later version.
#
# GNU Pascal is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with GNU Pascal; see the file COPYING. If not, write to the
# Free Software Foundation, 59 Temple Place - Suite 330, Boston, MA
# 02111-1307, USA.

# $(srcdir) is the RTS source directory
VPATH=@@srcdir@@
srcdir=@@srcdir@@

GCC2GPC=sed 's,^\([^ ]*[/\][^/\]*\)gcc,\1gpc,;s/^gcc$$/gpc/' # $(CC) might be .../gcc-foo/.../xgcc

# Reasonable default values, toplevel Makefile overrides them.
# CC needs to be the GNU C compiler.
CC?=@@CC@@
PC?=`echo $(CC) | $(GCC2GPC)`
CFLAGS?=-O2
PFLAGS?=
AR=@@AR@@
AR_FLAGS=rc
RANLIB=@@RANLIB@@
RANLIB_TEST=@@RANLIB_TEST@@
RTSFLAGS=
GCC_VERSION=unknown

WITH_SHARED=@@with_shared@@
VERSION_FILENAME=$(srcdir)/rts-version
gpc_major=2
gpc_minor=1
rts_version=`cat $(VERSION_FILENAME)`
GPCSOLIBSHORTNAME=libgpc.so
GPCSOLIBNAME=$(GPCSOLIBSHORTNAME).$(gpc_major).$(gpc_minor).$(rts_version)
GPCLIB=libgpc.a
GPCPICLIB=libgpc_pic.a
GPCSOLIB=$(GPCSOLIBNAME)
PFLAGS1=--unit-path=$(VPATH) --automake
RTS_WARN=-W -Wall -Wpointer-arith -Wwrite-strings -Wmissing-prototypes -Wmissing-declarations
RTS_CFLAGS=-I. $(RTS_WARN) $(CFLAGS) $(RTSFLAGS)# -DDEBUG
RTS_PFLAGS=$(RTS_CFLAGS) $(PFLAGS) $(PFLAGS1) `cat needed-options` \
  -DRTS_RELEASE_STRING="'$(rts_version)'" -DGCC_VERSION="'$(GCC_VERSION)'"

PAS_SRCS=rtsc.pas string.pas error.pas string2.pas time.pas random.pas \
 filename.pas files.pas getopt.pas numtodec.pas sets.pas heap.pas \
 math.pas endian.pas move.pas init.pas

SRCS=rts.c file.c rts-va.c $(PAS_SRCS)

OBJS=rts.o file.o rts-va.o \
 rtsc.o string.o error.o string2.o time.o random.o \
 filename.o files.o getopt.o numtodec.o sets.o heap.o \
 math.o endian.o move.o init.o gpc.o $(MALLOC)

SHARED_OBJS=rts.lo file.lo rts-va.lo \
 rtsc.lo string.lo error.lo string2.lo time.lo random.lo \
 filename.lo files.lo getopt.lo numtodec.lo sets.lo heap.lo \
 math.lo endian.lo move.lo init.lo gpc.lo $(MALLOC)

GENERATED_FILES=\
 $(srcdir)/acconfig.h \
 $(srcdir)/configure \
 $(srcdir)/rts-config.in \
 $(srcdir)/gpc.pas

all: $(GPCLIB) $(GPCPICLIB) sharedlib.$(WITH_SHARED) solist gpc.pas

solist:
	echo '${SHARED_OBJS}' >"$@@"

generated-files: $(GENERATED_FILES)

#$(srcdir)/acconfig.h: $(srcdir)/configure.in
#	m4 $(srcdir)/make-acconfig-h.m4 "$<" > "$@@" || { rm -f "$@@"; false; }

# The touch commands in the following rules are to prevent them from
# being run next time. Though they cause the whole RTS to be rebuilt,
# sometimes unnecessarily ...
#$(srcdir)/configure: $(srcdir)/configure.in $(srcdir)/acconfig.h
#	cd $(srcdir) && autoconf && touch configure

# @@@@ The `rm -f "$@@"' is a workaround for a bug with `mv -f' under Cygwin.
#$(srcdir)/rts-config.in: $(srcdir)/configure.in $(srcdir)/acconfig.h
#	rm -f "$@@"; cd $(srcdir) && autoheader && touch rts-config.in

gpc.pas: $(srcdir)/gpc-pas.in $(VERSION_FILENAME) $(PAS_SRCS)
	version=$(rts_version); ( d=$$(pwd); cd $(srcdir); /bin/ksh \
	    ./make-library-interface ./gpc-pas.in $$d/gpc.pas $$version )

# @@@@ This might be a little risky, but since rts-config.h is generated by
#    configure, it should only contain C comments and C preprocessor directives.
rts-config.inc: rts-config.h
	echo '{ rts-config.inc.  Generated automatically from rts-config.h.  }' > rts-config.inc
	sed -e 's,/\*,{,g;s,\*/,},g;s,^[ \t]*#\(.*\),{$$\1},' rts-config.h >> rts-config.inc

# @@@@ `with_shared' is currently not substituted in the parent Makefile, so
#    it arrives here via the setting of $(WITH_SHARED) on the command line
DUMMY=# Don't let configure substitute `@@with_shared$(DUMMY)@@' below

.PHONY: all install check generated-files rts.update-release \
        sharedlib. sharedlib.no sharedlib.@@with_shared$(DUMMY)@@ sharedlib.yes \
        mostlyclean clean distclean extraclean maintainer-clean

install:
	@@echo "There is currently no separate installation for the GNU Pascal Compiler's" >&2
	@@echo "Run Time System, because it is usually built and installed together" >&2
	@@echo "with GPC. You can build the RTS separately from GPC (with \`make all')" >&2
	@@echo "if know what you are doing and have a current GPC version installed," >&2
	@@echo "but you will have to install the resulting file(s) (libgpc.*) manually" >&2
	@@echo "into the right directories, and create a symlink for the shared library" >&2
	@@echo "if configured \`--with-shared'." >&2

check:
	@@echo "Checks for the GPC RTS are contained in the GPC Test Suite."

rts.update-release:
	if [ -r "$(VERSION_FILENAME)" ] && [ "$(rts_version)" -ge "`date '+%Y%m%d'`" ]; then \
	  echo "RTS release version is already $(rts_version)"; \
	  exit 1; \
	fi
	date '+%Y%m%d' > $(VERSION_FILENAME)
	@@echo "New RTS release version is $(rts_version)"

.SUFFIXES: .c .pas .o .lo

.c.o:
	$(CC) -c $(RTS_CFLAGS) $(CPPFLAGS) $<

.c.lo:
	$(CC) -c $(RTS_CFLAGS) $(CPPFLAGS) -fPIC -o $@@ $<

rtsc.o: rtsc.pas
	$(PC) -c -g $(RTS_PFLAGS) $<

rtsc.lo: rtsc.pas
	$(PC) -c -g $(RTS_PFLAGS) -fPIC -o $@@ $<

.pas.o:
	$(PC) -c $(RTS_PFLAGS) $<

.pas.lo:
	$(PC) -c $(RTS_PFLAGS) -fPIC -o $@@ $<

init.o init.lo: $(VERSION_FILENAME)

# After a change in the compiler that influences the GPI format
# or a change to the RTS's interface modify rtsc.pas (don't just
# touch it if you're going to distribute the patch), so the
# following rule will force the complete RTS to be recompiled.
$(OBJS) $(SHARED_OBJS): rtsc.pas rts.h constants.h rts-config.inc needed-options

# The Pascal source is not used, but we have to provide any.
# `-x Preprocessed-Pascal /dev/null' works as well, except on mingw.
needed-options: endian.pas
	$(PC) $(RTS_CFLAGS) $(PFLAGS) $(PFLAGS1) --print-needed-options "$>" 2> "$@@" || true
	if grep -v '^--' "$@@" > /dev/null; then echo "needed-options: `cat "$@@"`" >&2; rm -f "$@@"; false; else true; fi

$(GPCLIB): $(OBJS)
	-rm -f $(GPCLIB)
	$(AR) $(AR_FLAGS) $(GPCLIB) $(OBJS)
	if $(RANLIB_TEST); then $(RANLIB) $(GPCLIB); else true; fi

$(GPCPICLIB): $(SHARED_OBJS)
	-rm -f $(GPCPICLIB)
	$(AR) $(AR_FLAGS) $(GPCPICLIB) $(SHARED_OBJS)
	if $(RANLIB_TEST); then $(RANLIB) $(GPCPICLIB); else true; fi

# That's a way to do an `if' that even a stupid make understands ...
sharedlib. sharedlib.no sharedlib.@@with_shared$(DUMMY)@@:
sharedlib.yes: $(GPCSOLIB)
$(GPCSOLIB): $(SHARED_OBJS)
	-rm -f $(GPCSOLIB)
	$(CC) -shared -Wl,-soname=$(GPCSOLIBNAME) -fPIC -o $(GPCSOLIB) $(SHARED_OBJS)

mostlyclean:
	-rm -f $(OBJS) $(SHARED_OBJS) *.gpi *.gpd core needed-options

clean: mostlyclean
	-rm -f $(GPCLIB) $(GPCSOLIB)

distclean: clean
	-rm -f Makefile rts-config.h rts-config.inc config.cache config.log config.status

extraclean: distclean
	-rm -f *~* *.i *.s

maintainer-clean: extraclean
	-rm -f $(GENERATED_FILES)
@


1.3
log
@* fix the build system
* fix and enable the GNU Pascal RTS and Utils
  -> gpc is now fully supported; Hello World works.
* merge OpenBSD-OpenSSH 3.8, bump patchlevel
* add fchroot(2) diff, From: Pedro Martelletto <pbastos@@rdc.puc-rio.br>
* add fchroot(2) man page from NetBSD and myself
* fix orders of manpage sections
* fix displaying of .Nx mdoc macro
* convert scripts requiring bash to ksh
* nuke a shutload of GNU make idiotisms
* add pregenerated manpages - help2man is just bloat
* increase shlib versions after fchroot addition
* adjust and unbreak mk.conf after recent changes
* fix boot system version number after CD boot changes
* understand why Makefile.bsd-wrapper is needed as filename. Finally.
* regenerate files after syscalls.master change
* fix RCS Id detection and generation while here
* remove unused archs while there
* use __RCSID() macro in ssh ifdef __MirBSD__
* build ssh with -Werror, too

Note: this is a pre-snapshot, pre-build commit. Nothing
of this has actually been tested.

Like I said, please wait for the snapshot. Though, the
snapshot doesn't have any more circumstances preventing
me from working towards a release and upload now.
@
text
@d1 1
a1 1
# $MirBSD: Makefile.in,v 1.2 2004/02/29 18:57:55 tg Exp $
@


1.2
log
@first attempt at a running pascal
also, add generated files, and patch out further generation
of these files
@
text
@d1 1
a1 1
# $MirBSD$
d35 4
a38 4
CC=@@CC@@
PC=`echo $(CC) | $(GCC2GPC)`
CFLAGS=-O2
PFLAGS=
a43 1
DESTDIR=.
d53 1
a53 1
GPCLIB=$(DESTDIR)/libgpc.a
d55 1
a55 1
GPCSOLIB=$(DESTDIR)/$(GPCSOLIBNAME)
d84 4
a87 1
all: $(GPCLIB) $(GPCPICLIB) sharedlib.$(WITH_SHARED)
d91 2
a92 2
$(srcdir)/acconfig.h: $(srcdir)/configure.in
	m4 $(srcdir)/make-acconfig-h.m4 "$<" > "$@@" || { rm -f "$@@"; false; }
d97 2
a98 2
$(srcdir)/configure: $(srcdir)/configure.in $(srcdir)/acconfig.h
	cd $(srcdir) && autoconf && touch configure
d101 2
a102 2
$(srcdir)/rts-config.in: $(srcdir)/configure.in $(srcdir)/acconfig.h
	rm -f "$@@"; cd $(srcdir) && autoheader && touch rts-config.in
d104 3
a106 2
$(srcdir)/gpc.pas: $(srcdir)/gpc-pas.in $(VERSION_FILENAME) $(PAS_SRCS)
	version=$(rts_version); cd $(srcdir); ./make-library-interface gpc-pas.in gpc.pas $$version
d173 1
a173 1
	$(PC) $(RTS_CFLAGS) $(PFLAGS) $(PFLAGS1) --print-needed-options "$<" 2> "$@@" || true
@


1.1
log
@Initial revision
@
text
@d1 2
d55 1
d85 1
a85 1
all: $(GPCLIB) sharedlib.$(WITH_SHARED)
d177 5
@


1.1.2.1
log
@Import an alpha version of GNU Pascal Compiler into the tree
(not to be connected to the build before the upgrade to gcc 3.3).

We couldn't use gpc 2.1 because it's too old and doesn't support
gcc 3.x at all.
@
text
@@
