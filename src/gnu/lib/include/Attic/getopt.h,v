head	1.5;
access;
symbols
	MIRBSD_7quater:1.2
	MIRBSD_7_ALPHA:1.2.0.6
	MIRBSD_7:1.2.0.4
	MIRBSD_7ter:1.2
	MIRBSD_7_DEV:1.2.0.2;
locks; strict;
comment	@ * @;


1.5
date	2004.08.09.19.53.44;	author tg;	state dead;
branches;
next	1.4;

1.4
date	2004.06.10.21.12.24;	author tg;	state Exp;
branches;
next	1.3;

1.3
date	2003.12.23.14.52.39;	author tg;	state Exp;
branches;
next	1.2;

1.2
date	2003.09.23.19.55.12;	author tg;	state Exp;
branches;
next	1.1;

1.1
date	2003.09.03.12.56.30;	author tg;	state Exp;
branches;
next	;


desc
@@


1.5
log
@present a working libiberty bumped to 2.0, and a libreadline
sharing code with libiberty on a source base
@
text
@/* $MirBSD: src/gnu/lib/include/getopt.h,v 1.4 2004/06/10 21:12:24 tg Exp $ */

/* we have getopt functions in libc */

#include "/usr/include/getopt.h"
#ifdef	_GETOPT_H_
#define	_GETOPT_H
#endif
@


1.4
log
@be compatible to libiberty's getopt.h
@
text
@d1 1
a1 1
/* $MirBSD: src/gnu/lib/include/getopt.h,v 1.3 2003/12/23 14:52:39 tg Exp $ */
@


1.3
log
@* merge (ie, remove) OpenBSD
* merge _some_ of the OpenBSD diffs into libiberty headers (not code)
* copy idea of espie@@openbsd to replace libiberty-md5 by libc-md5,
  but cast more in the header and remove md5.c
* while here - getopt is in libc, too
* bump major of libiberty
* libiberty testsuite passes all but 3 java tests
@
text
@d1 1
a1 1
/* $MirBSD$ */
d6 3
@


1.2
log
@../include/getopt.h:116: warning: function declaration isn't a prototype
take the prototype from libc then :)
@
text
@d1 1
a1 3
/* Declarations for getopt.
   Copyright 1989, 1990, 1991, 1992, 1993, 1994, 1996, 1997, 1998, 2000,
   2002 Free Software Foundation, Inc.
d3 1
a3 2
   NOTE: The canonical source of this file is maintained with the GNU C Library.
   Bugs can be reported to bug-glibc@@gnu.org.
d5 1
a5 137
   This program is free software; you can redistribute it and/or modify it
   under the terms of the GNU General Public License as published by the
   Free Software Foundation; either version 2, or (at your option) any
   later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307,
   USA.  */

#ifndef _GETOPT_H
#define _GETOPT_H 1

#ifdef	__cplusplus
extern "C" {
#endif

/* For communication from `getopt' to the caller.
   When `getopt' finds an option that takes an argument,
   the argument value is returned here.
   Also, when `ordering' is RETURN_IN_ORDER,
   each non-option ARGV-element is returned here.  */

extern char *optarg;

/* Index in ARGV of the next element to be scanned.
   This is used for communication to and from the caller
   and for communication between successive calls to `getopt'.

   On entry to `getopt', zero means this is the first call; initialize.

   When `getopt' returns -1, this is the index of the first of the
   non-option elements that the caller should itself scan.

   Otherwise, `optind' communicates from one call to the next
   how much of ARGV has been scanned so far.  */

extern int optind;

/* Callers store zero here to inhibit the error message `getopt' prints
   for unrecognized options.  */

extern int opterr;

/* Set to an option character which was unrecognized.  */

extern int optopt;

/* Describe the long-named options requested by the application.
   The LONG_OPTIONS argument to getopt_long or getopt_long_only is a vector
   of `struct option' terminated by an element containing a name which is
   zero.

   The field `has_arg' is:
   no_argument		(or 0) if the option does not take an argument,
   required_argument	(or 1) if the option requires an argument,
   optional_argument 	(or 2) if the option takes an optional argument.

   If the field `flag' is not NULL, it points to a variable that is set
   to the value given in the field `val' when the option is found, but
   left unchanged if the option is not found.

   To have a long-named option do something other than set an `int' to
   a compiled-in constant, such as set a value from `optarg', set the
   option's `flag' field to zero and its `val' field to a nonzero
   value (the equivalent single-letter option character, if there is
   one).  For long options that have a zero `flag' field, `getopt'
   returns the contents of the `val' field.  */

struct option
{
#if defined (__STDC__) && __STDC__
  const char *name;
#else
  char *name;
#endif
  /* has_arg can't be an enum because some compilers complain about
     type mismatches in all the code that assumes it is an int.  */
  int has_arg;
  int *flag;
  int val;
};

/* Names for the values of the `has_arg' field of `struct option'.  */

#define	no_argument		0
#define required_argument	1
#define optional_argument	2

#if defined (__STDC__) && __STDC__
/* HAVE_DECL_* is a three-state macro: undefined, 0 or 1.  If it is
   undefined, we haven't run the autoconf check so provide the
   declaration without arguments.  If it is 0, we checked and failed
   to find the declaration so provide a fully prototyped one.  If it
   is 1, we found it so don't provide any declaration at all.  */
#if !HAVE_DECL_GETOPT
#if defined (__GNU_LIBRARY__) || defined (HAVE_DECL_GETOPT)
/* Many other libraries have conflicting prototypes for getopt, with
   differences in the consts, in unistd.h.  To avoid compilation
   errors, only prototype getopt for the GNU C library.  */
extern int getopt (int argc, char *const *argv, const char *shortopts);
#else
#ifndef __cplusplus
extern int getopt (int, char * const *, const char *);
#endif /* __cplusplus */
#endif
#endif /* !HAVE_DECL_GETOPT */

extern int getopt_long (int argc, char *const *argv, const char *shortopts,
		        const struct option *longopts, int *longind);
extern int getopt_long_only (int argc, char *const *argv,
			     const char *shortopts,
		             const struct option *longopts, int *longind);

/* Internal only.  Users should not call this directly.  */
extern int _getopt_internal (int argc, char *const *argv,
			     const char *shortopts,
		             const struct option *longopts, int *longind,
			     int long_only);
#else /* not __STDC__ */
extern int getopt ();
extern int getopt_long ();
extern int getopt_long_only ();

extern int _getopt_internal ();
#endif /* __STDC__ */

#ifdef	__cplusplus
}
#endif

#endif /* getopt.h */
@


1.1
log
@gcc 3.3.1 has proven not ready for prime-time yet.
o isolate libiberty from the gcc tree
o move stuff around for $GNUSYSTEM_AUX_DIR
o update and sync gcc-2.95 with moved-again libiberty and $GNUSYSTEM_AUX_DIR
o prepare for nuking gcc 3.3 in favour of gcc 3.2 (if it works)
@
text
@d116 1
a116 1
extern int getopt ();
@

