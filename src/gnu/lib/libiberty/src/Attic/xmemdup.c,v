head	1.2;
access;
symbols
	cvs-200406091940:1.1.1.1
	cvs-200405160640:1.1.1.1
	cvs-200401271800:1.1.1.1
	cvs-200401261630:1.1.1.1
	cvs-200401021645:1.1.1.1
	cvs-200312222040:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.2
date	2003.12.23.14.53.35;	author tg;	state dead;
branches;
next	1.1;

1.1
date	2003.12.22.20.31.05;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.12.22.20.31.05;	author tg;	state Exp;
branches;
next	;


desc
@@


1.2
log
@* merge (ie, remove) OpenBSD
* merge _some_ of the OpenBSD diffs into libiberty headers (not code)
* copy idea of espie@@openbsd to replace libiberty-md5 by libc-md5,
  but cast more in the header and remove md5.c
* while here - getopt is in libc, too
* bump major of libiberty
* libiberty testsuite passes all but 3 java tests
@
text
@/* xmemdup.c -- Duplicate a memory buffer, using xcalloc.
   This trivial function is in the public domain.
   Jeff Garzik, September 1999.  */

/*

@@deftypefn Replacement void* xmemdup (void *@@var{input}, size_t @@var{copy_size}, size_t @@var{alloc_size})

Duplicates a region of memory without fail.  First, @@var{alloc_size} bytes
are allocated, then @@var{copy_size} bytes from @@var{input} are copied into
it, and the new memory is returned.  If fewer bytes are copied than were
allocated, the remaining memory is zeroed.

@@end deftypefn

*/

#ifdef HAVE_CONFIG_H
#include "config.h"
#endif
#include "ansidecl.h"
#include "libiberty.h"

#include <sys/types.h> /* For size_t. */
#ifdef HAVE_STRING_H
#include <string.h>
#endif

PTR
xmemdup (input, copy_size, alloc_size)
  const PTR input;
  size_t copy_size;
  size_t alloc_size;
{
  PTR output = xcalloc (1, alloc_size);
  memcpy (output, input, copy_size);
  return output;
}
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Time to import OpenBSD once again. Expect breakage.
@
text
@@
