head	1.2;
access;
symbols
	cvs-200406091940:1.1.1.1
	cvs-200405160640:1.1.1.1
	cvs-200401271800:1.1.1.1
	cvs-200401261630:1.1.1.1
	cvs-200401021645:1.1.1.1
	cvs-200312222040:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.2
date	2003.12.23.14.53.36;	author tg;	state dead;
branches;
next	1.1;

1.1
date	2003.12.22.20.31.05;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.12.22.20.31.05;	author tg;	state Exp;
branches;
next	;


desc
@@


1.2
log
@* merge (ie, remove) OpenBSD
* merge _some_ of the OpenBSD diffs into libiberty headers (not code)
* copy idea of espie@@openbsd to replace libiberty-md5 by libc-md5,
  but cast more in the header and remove md5.c
* while here - getopt is in libc, too
* bump major of libiberty
* libiberty testsuite passes all but 3 java tests
@
text
@/* xstrerror.c -- jacket routine for more robust strerror() usage.
   Fri Jun 16 18:30:00 1995  Pat Rankin  <rankin@@eql.caltech.edu>
   This code is in the public domain.  */

/*

@@deftypefn Replacement char* xstrerror (int @@var{errnum})

Behaves exactly like the standard @@code{strerror} function, but
will never return a @@code{NULL} pointer.

@@end deftypefn

*/

#include <stdio.h>

#include "libiberty.h"
#include "config.h"

#ifdef VMS
#include <errno.h>
#if !defined (__STRICT_ANSI__) && !defined (__HIDE_FORBIDDEN_NAMES)
extern char *strerror PARAMS ((int,...));
#define DONT_DECLARE_STRERROR
#endif
#endif	/* VMS */

#ifndef DONT_DECLARE_STRERROR
extern char *strerror PARAMS ((int));
#endif

/* If strerror returns NULL, we'll format the number into a static buffer.  */

#define ERRSTR_FMT "undocumented error #%d"
static char xstrerror_buf[sizeof ERRSTR_FMT + 20];

/* Like strerror, but result is never a null pointer.  */

char *
xstrerror (errnum)
     int errnum;
{
  char *errstr;
#ifdef VMS
  char *(*vmslib_strerror) PARAMS ((int,...));

  /* Override any possibly-conflicting declaration from system header.  */
  vmslib_strerror = (char *(*) PARAMS ((int,...))) strerror;
  /* Second argument matters iff first is EVMSERR, but it's simpler to
     pass it unconditionally.  `vaxc$errno' is declared in <errno.h>
     and maintained by the run-time library in parallel to `errno'.
     We assume that `errnum' corresponds to the last value assigned to
     errno by the run-time library, hence vaxc$errno will be relevant.  */
  errstr = (*vmslib_strerror) (errnum, vaxc$errno);
#else
  errstr = strerror (errnum);
#endif

  /* If `errnum' is out of range, result might be NULL.  We'll fix that.  */
  if (!errstr)
    {
      sprintf (xstrerror_buf, ERRSTR_FMT, errnum);
      errstr = xstrerror_buf;
    }
  return errstr;
}
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Time to import OpenBSD once again. Expect breakage.
@
text
@@
