head	1.2;
access;
symbols
	MIRBSD_7quater:1.1.2.1
	MIRBSD_7_ALPHA:1.1.2.1.0.6
	MIRBSD_7:1.1.2.1.0.4
	MIRBSD_7ter:1.1.2.1
	MIRBSD_7_DEV:1.1.2.1.0.2
	binutils_2_14:1.1.2.1
	FSF:1.1.2;
locks; strict;
comment	@ * @;


1.2
date	2004.08.09.19.35.24;	author tg;	state dead;
branches;
next	1.1;

1.1
date	2003.09.23.15.13.25;	author tg;	state Exp;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2003.09.23.15.13.25;	author tg;	state Exp;
branches;
next	;


desc
@@


1.2
log
@update; new location; new shlib version (2.0)
old hash table functions are now "in"
@
text
@/*

@@deftypefn Supplemental void* memchr (const void *@@var{s}, int @@var{c}, size_t @@var{n})

This function searches memory starting at @@code{*@@var{s}} for the
character @@var{c}.  The search only ends with the first occurrence of
@@var{c}, or after @@var{length} characters; in particular, a null
character does not terminate the search.  If the character @@var{c} is
found within @@var{length} characters of @@code{*@@var{s}}, a pointer
to the character is returned.  If @@var{c} is not found, then @@code{NULL} is
returned.

@@end deftypefn

*/

#include <ansidecl.h>
#ifdef ANSI_PROTOTYPES
#include <stddef.h>
#else
#define size_t unsigned long
#endif

PTR
memchr (src_void, c, length)
     register const PTR src_void;
     int c;
     size_t length;
{
  const unsigned char *src = (const unsigned char *)src_void;
  
  while (length-- > 0)
  {
    if (*src == c)
     return (PTR)src;
    src++;
  }
  return NULL;
}
@


1.1
log
@Initial revision
@
text
@@


1.1.2.1
log
@Import GNU libiberty (LGPL licenced) from the FSF binutils 2.14 sources
via the vendor branch (to ease future updating)
@
text
@@
