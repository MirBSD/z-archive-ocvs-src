head	1.2;
access;
symbols
	MIRBSD_7quater:1.1.2.1
	MIRBSD_7_ALPHA:1.1.2.1.0.6
	MIRBSD_7:1.1.2.1.0.4
	MIRBSD_7ter:1.1.2.1
	MIRBSD_7_DEV:1.1.2.1.0.2
	binutils_2_14:1.1.2.1
	FSF:1.1.2;
locks; strict;
comment	@ * @;


1.2
date	2004.08.09.19.35.24;	author tg;	state dead;
branches;
next	1.1;

1.1
date	2003.09.23.15.13.24;	author tg;	state Exp;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2003.09.23.15.13.24;	author tg;	state Exp;
branches;
next	;


desc
@@


1.2
log
@update; new location; new shlib version (2.0)
old hash table functions are now "in"
@
text
@/* insque(3C) routines
   This file is in the public domain.  */

/*

@@deftypefn Supplemental void insque (struct qelem *@@var{elem}, struct qelem *@@var{pred})
@@deftypefnx Supplemental void remque (struct qelem *@@var{elem})

Routines to manipulate queues built from doubly linked lists.  The
@@code{insque} routine inserts @@var{elem} in the queue immediately
after @@var{pred}.  The @@code{remque} routine removes @@var{elem} from
its containing queue.  These routines expect to be passed pointers to
structures which have as their first members a forward pointer and a
back pointer, like this prototype (although no prototype is provided):

@@example
struct qelem @@{
  struct qelem *q_forw;
  struct qelem *q_back;
  char q_data[];
@@};
@@end example

@@end deftypefn

*/


struct qelem {
  struct qelem *q_forw;
  struct qelem *q_back;
};


void
insque (elem, pred)
  struct qelem *elem;
  struct qelem *pred;
{
  elem -> q_forw = pred -> q_forw;
  pred -> q_forw -> q_back = elem;
  elem -> q_back = pred;
  pred -> q_forw = elem;
}


void
remque (elem)
  struct qelem *elem;
{
  elem -> q_forw -> q_back = elem -> q_back;
  elem -> q_back -> q_forw = elem -> q_forw;
}
@


1.1
log
@Initial revision
@
text
@@


1.1.2.1
log
@Import GNU libiberty (LGPL licenced) from the FSF binutils 2.14 sources
via the vendor branch (to ease future updating)
@
text
@@
