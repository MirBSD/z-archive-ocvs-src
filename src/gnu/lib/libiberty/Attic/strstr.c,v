head	1.2;
access;
symbols
	MIRBSD_7quater:1.1.2.1
	MIRBSD_7_ALPHA:1.1.2.1.0.6
	MIRBSD_7:1.1.2.1.0.4
	MIRBSD_7ter:1.1.2.1
	MIRBSD_7_DEV:1.1.2.1.0.2
	binutils_2_14:1.1.2.1
	FSF:1.1.2;
locks; strict;
comment	@ * @;


1.2
date	2004.08.09.19.35.27;	author tg;	state dead;
branches;
next	1.1;

1.1
date	2003.09.23.15.13.27;	author tg;	state Exp;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2003.09.23.15.13.27;	author tg;	state Exp;
branches;
next	;


desc
@@


1.2
log
@update; new location; new shlib version (2.0)
old hash table functions are now "in"
@
text
@/* Simple implementation of strstr for systems without it.
   This function is in the public domain.  */

/*

@@deftypefn Supplemental char* strstr (const char *@@var{string}, const char *@@var{sub})

This function searches for the substring @@var{sub} in the string
@@var{string}, not including the terminating null characters.  A pointer
to the first occurrence of @@var{sub} is returned, or @@code{NULL} if the
substring is absent.  If @@var{sub} points to a string with zero
length, the function returns @@var{string}.

@@end deftypefn


*/


/* FIXME:  The above description is ANSI compiliant.  This routine has not
   been validated to comply with it.  -fnf */

char *
strstr (s1, s2)
  char *s1, *s2;
{
  register char *p = s1;
  extern char *strchr ();
  extern int strncmp ();
#if __GNUC__ >= 2
  extern __SIZE_TYPE__ strlen (const char *);
#endif
  register int len = strlen (s2);

  for (; (p = strchr (p, *s2)) != 0; p++)
    {
      if (strncmp (p, s2, len) == 0)
	{
	  return (p);
	}
    }
  return (0);
}
@


1.1
log
@Initial revision
@
text
@@


1.1.2.1
log
@Import GNU libiberty (LGPL licenced) from the FSF binutils 2.14 sources
via the vendor branch (to ease future updating)
@
text
@@
