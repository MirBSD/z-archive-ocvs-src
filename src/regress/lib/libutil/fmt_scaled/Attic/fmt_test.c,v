head	1.2;
access;
symbols
	MIRBSD_7quater:1.1.1.2
	cvs-200405160640:1.1.1.3
	cvs-200401271800:1.1.1.3
	cvs-200401261630:1.1.1.3
	cvs-200401021645:1.1.1.3
	MIRBSD_7_ALPHA:1.1.1.2.0.6
	MIRBSD_7:1.1.1.2.0.4
	cvs-200312222040:1.1.1.2
	MIRBSD_7ter:1.1.1.2
	MIRBSD_7_DEV:1.1.1.2.0.2
	cvs-200310020700:1.1.1.2
	cvs-200309271030:1.1.1.2
	cvs-200309251530:1.1.1.2
	cvs-200308302005:1.1.1.2
	cvs-200308171200:1.1.1.2
	ctm-3496:1.1.1.2
	ctm-3449:1.1.1.1
	ctm-3437:1.1.1.1
	cvs-200307191805:1.1.1.1
	ctm-3425:1.1.1.1
	cvs-200307091500:1.1.1.1
	ctm-3389:1.1.1.1
	cvs-200306291430:1.1.1.1
	ctm-3341:1.1.1.1
	MIRBSD_5:1.1.1.1
	cvs-200306082100:1.1.1.1
	ctm-3316:1.1.1.1
	ctm-3272:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.2
date	2004.07.18.12.29.23;	author tg;	state dead;
branches;
next	1.1;

1.1
date	2003.05.21.19.01.55;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.05.21.19.01.55;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2003.08.11.18.28.23;	author tg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2004.01.02.18.00.20;	author tg;	state Exp;
branches;
next	;


desc
@@


1.2
log
@nuke regression tests

noone actually uses them (I've run them about half a dozen times only),
some of the tests (eg. everything PF) are broken, some of the code is
broken... and the adventurous are invited to use CVS and fix them,
maybe on a tagged branch.
@
text
@/* $OpenBSD */

/*
 * Combined tests for fmt_scaled and scan_scaled.
 * Ian Darwin, January 2001. Public domain.
 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/types.h>
#include <errno.h>

#include <util.h>

static int fmt_test();
static int scan_test();

static void print_errno(int e);
static int assert_int(int testnum, int checknum, int expect, int result);
static int assert_errno(int testnum, int checknum, int expect, int result);
static int assert_quad_t(int testnum, int checknum, quad_t expect, quad_t result);
static int assert_str(int testnum, int checknum, char * expect, char * result);

extern char *__progname;
static int verbose = 0;

__dead static void usage(int stat)
{
	fprintf(stderr, "usage: %s [-v]\n", __progname);
	exit(stat);
}

int
main(int argc, char **argv)
{
	extern char *optarg;
	extern int optind;
	int i, ch;
 
	while ((ch = getopt(argc, argv, "hv")) != -1) {
			switch (ch) {
			case 'v':
					verbose = 1;
					break;
			case 'h':
					usage(0);
			case '?':
			default:
					usage(1);
			}
	}
	argc -= optind;
	argv += optind;

	if (verbose)
		printf("Starting fmt_test\n");
	i = fmt_test();
	if (verbose)
		printf("Starting scan_test\n");
	i += scan_test();
	if (i) {
		printf("*** %d errors in libutil/fmt_scaled tests ***\n", i);
	} else {
		if (verbose)
			printf("Tests done; no unexpected errors\n");
	}
	return i;
}

/************** tests for fmt_scaled *******************/

static struct {			/* the test cases */
	quad_t input;
	char *expect;
	int errno;
} ddata[] = {
	{ 0, "0B", 0 },
	{ 999, "999B", 0 },
	{ 1000, "1000B", 0 },
	{ 1023, "1023B", 0 },
	{ -1023, "-1023B", 0 },
	{ 1024, "1.0K", 0 },
	{ 1025, "1.0K", 0 },
	{ 1234, "1.2K", 0 },
	{ -1234, "-1.2K", 0 },
	{ 1484, "1.4K", 0 },		/* rouding boundary, down */
	{ 1485, "1.5K", 0 },		/* rouding boundary, up   */
	{ 1536, "1.5K", 0 },
	{ 1786, "1.7K", 0 },
	{ 1800, "1.8K", 0 },
	{ 2000, "2.0K", 0 },
	{ 123456, "120K", 0 },
	{ 7299072, "7.0M", 0 },
	{ 409478144L, "390M", 0 },
	{ -409478144L, "-390M", 0 },
	{ 999999999L, "953M", 0 },
	{ 1499999999L, "1.4G", 0 },
	{ 12475423744LL, "11.6G", 0},
	{ 1LL<<61, "2.0E", 0 },
	{ 1LL<<62, "4.0E", 0 },
	{ 1LL<<63, "", ERANGE },
};
#	define DDATA_LENGTH (sizeof ddata/sizeof *ddata)

static int
fmt_test()
{
	unsigned int i, e, errs = 0;
	int ret;
	char buf[FMT_SCALED_STRSIZE];

	for (i = 0; i < DDATA_LENGTH; i++) {
		strlcpy(buf, "UNSET", FMT_SCALED_STRSIZE);
		ret = fmt_scaled(ddata[i].input, buf);
		e = errno;
		if (verbose) {
			printf("%lld --> %s (%d)", ddata[i].input, buf, ret);
			if (ret == -1)
				print_errno(e);
			printf("\n");
		}
		if (ret == -1)
			errs += assert_int(i, 1, ret, ddata[i].errno == 0 ? 0 : -1);
		if (ddata[i].errno)
			errs += assert_errno(i, 2, ddata[i].errno, errno);
		else
			errs += assert_str(i, 3, ddata[i].expect, buf);
	}

	return errs;
}

/************** tests for scan_scaled *******************/


#define	IMPROBABLE	(-42)

extern int errno;

struct {					/* the test cases */
	char *input;
	quad_t result;
	int errno;
} sdata[] = {
	{ "0",		0, 0 },
	{ "123",	123, 0 },
	{ "1k",		1024, 0 },		/* lower case */
	{ "100.944", 100, 0 },	/* should --> 100 (truncates fraction) */
	{ "10099",	10099LL, 0 },
	{ "1M",		1048576LL, 0 },
	{ "1.1M",	1153433LL, 0 },		/* fractions */
	{ "1.111111111111111111M",	1165084LL, 0 },		/* fractions */
	{ "1.55M",	1625292LL, 0 },	/* fractions */
	{ "1.9M",	1992294LL, 0 },		/* fractions */
	{ "-2K",	-2048LL, 0 },		/* negatives */
	{ "-2.2K",	-2252LL, 0 },	/* neg with fract */
	{ "4.5k", 4608, 0 },
	{ "4.5555555555555555K", 4664, 0 },
	{ "4.5555555555555555555K", 4664, 0 },	/* handle enough digits? */
	{ "4.555555555555555555555555555555K", 4664, 0 }, /* ignores extra digits? */
	{ "1G",		1073741824LL, 0 },
	{ "G", 		0, 0 },			/* should == 0G? */
	{ "1234567890", 1234567890LL, 0 },	/* should work */
	{ "1.5E",	1729382256910270464LL, 0 },		/* big */
	{ "32948093840918378473209480483092", 0, ERANGE },  /* too big */
	{ "329480938409.8378473209480483092", 0, ERANGE },  /* fraction too big */
	{ "1.5Q",	0, ERANGE },		/* invalid multiplier (XXX ERANGE??) */
	{ "1ab",	0, ERANGE },		/* ditto */
	{ "5.0e3",	0, EINVAL },	/* digits after */
	{ "5.0E3",	0, EINVAL },	/* ditto */
	{ "1..0",	0, EINVAL },		/* bad format */
	{ "",		0, 0 },			/* boundary */
	{ "--1", -1, EINVAL },
	{ "++42", -1, EINVAL },
	{ NULL,		0, EFAULT }		/* bad input */
	/* { "9223372036854775808", -9223372036854775808LL, 0 }, */	/* XXX  */
};
#	define SDATA_LENGTH (sizeof sdata/sizeof *sdata)

static void
print_errno(int e)
{
	switch(e) {
		case EINVAL: printf("EINVAL"); break;
		case EFAULT: printf("EFAULT"); break;
		case EDOM:   printf("EDOM"); break;
		case ERANGE: printf("ERANGE"); break;
		default: printf("errno %d", errno);
	}
}

/** Print one result */
static void
print(char *input, quad_t result, int ret)
{
	int e = errno;
	printf("\"%10s\" --> %lld (%d)", input, result, ret);
	if (ret == -1) {
		printf(" -- ");
		print_errno(e);
	}
	printf("\n");
}

static int
scan_test()
{
	unsigned int i, errs = 0, e;
	int ret;
	quad_t result;

	for (i = 0; i < SDATA_LENGTH; i++) {
		result = IMPROBABLE;
		/* printf("Calling scan_scaled(%s, ...)\n", sdata[i].input); */
		ret = scan_scaled(sdata[i].input, &result);
		e = errno;	/* protect across printfs &c. */
		if (verbose)
			print(sdata[i].input, result, ret);
		errno = e;
		if (ret == -1)
			errs += assert_int(i, 1, ret, sdata[i].errno == 0 ? 0 : -1);
		errno = e;
		if (sdata[i].errno)
			errs += assert_errno(i, 2, sdata[i].errno, errno);
		else 
			errs += assert_quad_t(i, 3, sdata[i].result, result);
	}
	return errs;
}

/************** common testing stuff *******************/

static int
assert_int(int testnum, int check, int expect, int result)
{
	if (expect == result)
		return 0;
	printf("** FAILURE: test %d check %d, expect %d, result %d **\n",
		testnum, check, expect, result);
	return 1;
}

static int
assert_errno(int testnum, int check, int expect, int result)
{
	if (expect == result)
		return 0;
	printf("** FAILURE: test %d check %d, expect ",
		testnum, check);
	print_errno(expect);
	printf(", got ");
	print_errno(result);
	printf(" **\n");
	return 1;
}

static int
assert_quad_t(int testnum, int check, quad_t expect, quad_t result)
{
	if (expect == result)
		return 0;
	printf("** FAILURE: test %d check %d, expect %lld, result %lld **\n",
		testnum, check, expect, result);
	return 1;
}

static int
assert_str(int testnum, int check, char * expect, char * result)
{
	if (strcmp(expect, result) == 0)
		return 0;
	printf("** FAILURE: test %d check %d, expect %s, result %s **\n",
		testnum, check, expect, result);
	return 1;
}
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Sync MirBSD main source tree against OpenBSD-current,
which should be fairly stable after the Hackathon now.
@
text
@@


1.1.1.2
log
@Import the complete OpenBSD source tree (base system)
as of CTM delta 3496 (roughly 1200 UTC today) into the
vendor branch.
Attention: this is a big update. Don't even try to
build this system, OpenBSD 3.4-beta, yet on your own.
@
text
@d16 2
a17 2
static int fmt_test(void);
static int scan_test(void);
d107 1
a107 1
fmt_test(void)
d207 1
a207 1
scan_test(void)
@


1.1.1.3
log
@Import OpenBSD again, for various reasons.
@
text
@a78 4
	{ 1, "1B", 0 },
	{ -1, "-1B", 0 },
	{ 100, "100B", 0},
	{ -100, "-100B", 0},
a88 2
	{ -1484, "-1.4K", 0 },		/* rouding boundary, down */
	{ -1485, "-1.5K", 0 },		/* rouding boundary, up   */
a93 2
	{ -102400, "-100K", 0},
	{ -103423, "-101K", 0 },
@


