head	1.2;
access;
symbols
	MIRBSD_7quater:1.1.1.2
	cvs-200405160640:1.1.1.2
	cvs-200401271800:1.1.1.2
	cvs-200401261630:1.1.1.2
	cvs-200401021645:1.1.1.2
	MIRBSD_7_ALPHA:1.1.1.2.0.6
	MIRBSD_7:1.1.1.2.0.4
	cvs-200312222040:1.1.1.2
	MIRBSD_7ter:1.1.1.2
	MIRBSD_7_DEV:1.1.1.2.0.2
	cvs-200310020700:1.1.1.2
	cvs-200309271030:1.1.1.2
	cvs-200309251530:1.1.1.2
	cvs-200308302005:1.1.1.2
	cvs-200308171200:1.1.1.2
	ctm-3496:1.1.1.2
	ctm-3449:1.1.1.1
	ctm-3437:1.1.1.1
	cvs-200307191805:1.1.1.1
	ctm-3425:1.1.1.1
	cvs-200307091500:1.1.1.1
	ctm-3389:1.1.1.1
	cvs-200306291430:1.1.1.1
	ctm-3341:1.1.1.1
	MIRBSD_5:1.1.1.1
	cvs-200306082100:1.1.1.1
	ctm-3316:1.1.1.1
	ctm-3272:1.1.1.1
	ctm-3264:1.1.1.1
	cvs-200305071630:1.1.1.1
	MIRBSD_4:1.1.1.1
	ctm-3203:1.1.1.1
	cvs-20030410-1130:1.1.1.1
	ctm-3155:1.1.1.1
	ctm-3132:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.2
date	2004.07.18.12.29.18;	author tg;	state dead;
branches;
next	1.1;

1.1
date	2003.03.22.17.48.09;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.03.22.17.48.09;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2003.08.11.18.28.21;	author tg;	state Exp;
branches;
next	;


desc
@@


1.2
log
@nuke regression tests

noone actually uses them (I've run them about half a dozen times only),
some of the tests (eg. everything PF) are broken, some of the code is
broken... and the adventurous are invited to use CVS and fix them,
maybe on a tagged branch.
@
text
@/* $OpenBSD: socket3.c,v 1.2 2002/10/12 19:02:51 marc Exp $ */
/* PUBLIC DOMAIN Oct 2002 <marc@@snafu.org> */

/* Test blocking/non-blocking mode inheritance on accept */

#include <sys/types.h>
#include <sys/socket.h>

#include <netinet/in.h>

#include <fcntl.h>
#include <poll.h>
#include <pthread.h>
#include <string.h>
#include <unistd.h>

#include "test.h"

/*
 * connect to the test port passed in arg, then close the connection
 * and return.
 */
void *
sock_connect(void *arg)
{
	struct sockaddr_in sin;
	int port;
	int sock;

	SET_NAME("connect");
	port = (int)arg;
	CHECKe(sock = socket(AF_INET, SOCK_STREAM, 0));
	sin.sin_family = AF_INET;
	sin.sin_port = htons(port);
	sin.sin_addr.s_addr = htonl(INADDR_LOOPBACK);
	CHECKe(connect(sock, (struct sockaddr *)&sin, sizeof sin));
	CHECKe(close(sock));
	return NULL;
}

/*
 * listen for a connection, accept it using a non-blocking socket, and
 * verify that the blocking mode of the socket returned from accept is
 * also non-blocking
 */
void *
sock_accept(void *arg)
{
	pthread_t connect_thread;
	struct pollfd fds;
	struct sockaddr_in sa;
	struct sockaddr accept_sa;
	int accept_fd;
	int accept_sa_size;
	int flags;
	int listen_fd;
	int port;

	SET_NAME("accept");

	/* listen for a connection */

	port = 6543;
	memset(&sa, 0, sizeof sa);
	sa.sin_family = AF_INET;
	sa.sin_addr.s_addr = htonl(INADDR_LOOPBACK);
	sa.sin_port = htons(port);
	CHECKe(listen_fd = socket(AF_INET, SOCK_STREAM, 0));
	printf("listen_fd = %d\n", listen_fd);
	while (1) {
		if (bind(listen_fd, (struct sockaddr *)&sa, sizeof(sa)) == 0)
			break;
		if (errno == EADDRINUSE) {
			sa.sin_port = htons(++port);
			continue;
		}
		DIE(errno, "bind");
	}
	CHECKe(listen(listen_fd, 2));

	/* Create another thread to connect to the listening socket. */
	CHECKr(pthread_create(&connect_thread, NULL, sock_connect,
			      (void*)port));

	/*
	 * Use poll to check for a pending connection as the socket
	 * passed to accept will be in non-blocking mode.
	 */
	fds.fd = listen_fd;
	fds.events = POLLIN;
	CHECKe(poll(&fds, 1, INFTIM));

	/*
	 * set non blocking mode on the listening socket and close stdin
	 * (fd 0) so the accept will use fd 0 (needed to test boundary
	 * condition in the pthread accept code).
	 */
	flags = fcntl(listen_fd, F_GETFL);
        CHECKr(fcntl(listen_fd, F_SETFL, flags |= O_NONBLOCK));
	CHECKe(close(STDIN_FILENO));
	accept_sa_size = sizeof accept_sa;
	CHECKe(accept_fd = accept(listen_fd, &accept_sa, &accept_sa_size));
	/* verify O_NONBLOCK on the accepted fd */
	flags = fcntl(accept_fd, F_GETFL);
	printf("accept_fd = %d, flags = %x\n", accept_fd, flags);
	ASSERT(flags & O_NONBLOCK);
	CHECKe(close(listen_fd));
	CHECKe(close(accept_fd));
	CHECKr(pthread_join(connect_thread, NULL));
	return NULL;
}

int
main(int argc, char * argv[])
{
	pthread_t accept_thread;

	CHECKr(pthread_create(&accept_thread, NULL, sock_accept, NULL));
	CHECKr(pthread_join(accept_thread, NULL));
	SUCCEED;
}
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Import OpenBSD 3.3 source repository from CTM 3132 the first time
This opens an OpenBSD-mirabile (aka MirBSD) repository.

### MirBSD is:
# Copyright (c) 1982-2003 by Thorsten "mirabile" Glaser <x86@@ePost.de>
# Copyright © 1968-2003  The authors of And contributors to UNIX®, the
#       C Language, BSD/Berkeley Unix; 386BSD, NetBSD 1.1 and OpenBSD.
#
# Anyone who obtained a copy of this work is hereby permitted to freely use,
# distribute, modify, merge, sublicence, give away or sell it as long as the
# authors are given due credit and the following notice is retained:
#
# This work is provided "as is", with no explicit or implicit warranty what-
# soever. Use it only at your own risk. In no event may an author or contri-
# butor be held liable for any damage, directly or indirectly, that origina-
# ted through or is caused by creation or modification of this work.

MirBSD is my private tree. MirBSD does not differ very much from OpenBSD
and intentionally tracks OpenBSD. That's why it _is_ OpenBSD, just not the
official one. It's like with DarrenBSD.

At time of this writing, no advertising for MirBSD must be done,
because the advertising clause has not yet been sorted out.

http://templeofhate.com/tglaser/MirBSD/index.php
@
text
@@


1.1.1.2
log
@Import the complete OpenBSD source tree (base system)
as of CTM delta 3496 (roughly 1200 UTC today) into the
vendor branch.
Attention: this is a big update. Don't even try to
build this system, OpenBSD 3.4-beta, yet on your own.
@
text
@d1 1
a1 1
/* $OpenBSD: socket3.c,v 1.3 2003/07/31 21:48:06 deraadt Exp $ */
d23 1
a23 1
static void *
d46 1
a46 1
static void *
@

