head	1.2;
access;
symbols
	cvs-200405160640:1.1.1.4
	cvs-200401271800:1.1.1.4
	cvs-200401261630:1.1.1.4
	cvs-200401021645:1.1.1.4
	cvs-200312222040:1.1.1.4
	cvs-200310020700:1.1.1.3
	cvs-200309271030:1.1.1.3
	cvs-200309251530:1.1.1.3
	cvs-200308302005:1.1.1.3
	cvs-200308171200:1.1.1.3
	ctm-3496:1.1.1.3
	ctm-3449:1.1.1.2
	ctm-3437:1.1.1.2
	cvs-200307191805:1.1.1.2
	ctm-3425:1.1.1.2
	cvs-200307091500:1.1.1.2
	ctm-3389:1.1.1.2
	cvs-200306291430:1.1.1.2
	ctm-3341:1.1.1.2
	MIRBSD_5:1.1.1.2
	cvs-200306082100:1.1.1.2
	ctm-3316:1.1.1.2
	ctm-3272:1.1.1.2
	ctm-3264:1.1.1.1
	cvs-200305071630:1.1.1.1
	MIRBSD_4:1.1.1.1
	ctm-3203:1.1.1.1
	cvs-20030410-1130:1.1.1.1
	ctm-3155:1.1.1.1
	ctm-3132:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@# @;


1.2
date	2003.09.22.22.00.49;	author tg;	state dead;
branches;
next	1.1;

1.1
date	2003.03.22.17.48.09;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.03.22.17.48.09;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2003.05.21.19.02.00;	author tg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2003.08.11.18.28.31;	author tg;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2003.12.22.21.09.52;	author tg;	state Exp;
branches;
next	;


desc
@@


1.2
log
@there is no point in having a pfctl regression test when the
syntax changed and I don't bother to update them to Kibi-bits.
@
text
@@@0 block drop out log on tun0 all 
[ Skip steps: i=12 f=6 p=2 sa=6 sp=end da=7 dp=16 ]
[ queue: qname= qid=0 pqname= pqid=0 ]
[ Evaluations: 0         Packets: 0         Bytes: 0           States: 0     ]

@@1 block drop in log on tun0 all 
[ Skip steps: i=12 f=6 sa=6 sp=end da=7 dp=16 ]
[ queue: qname= qid=0 pqname= pqid=0 ]
[ Evaluations: 0         Packets: 0         Bytes: 0           States: 0     ]

@@2 block return-rst out log on tun0 proto tcp all 
[ Skip steps: i=12 f=6 p=4 sa=6 sp=end da=7 dp=16 ]
[ queue: qname= qid=0 pqname= pqid=0 ]
[ Evaluations: 0         Packets: 0         Bytes: 0           States: 0     ]

@@3 block return-rst in log on tun0 proto tcp all 
[ Skip steps: i=12 f=6 sa=6 sp=end da=7 dp=16 ]
[ queue: qname= qid=0 pqname= pqid=0 ]
[ Evaluations: 0         Packets: 0         Bytes: 0           States: 0     ]

@@4 block return-icmp(port-unr, port-unr) out log on tun0 proto udp all 
[ Skip steps: i=12 f=6 p=6 sa=6 sp=end da=7 dp=16 ]
[ queue: qname= qid=0 pqname= pqid=0 ]
[ Evaluations: 0         Packets: 0         Bytes: 0           States: 0     ]

@@5 block return-icmp(port-unr, port-unr) in log on tun0 proto udp all 
[ Skip steps: i=12 sp=end da=7 dp=16 ]
[ queue: qname= qid=0 pqname= pqid=0 ]
[ Evaluations: 0         Packets: 0         Bytes: 0           States: 0     ]

@@6 block drop out log quick on tun0 inet from ! 157.161.48.183 to any 
[ Skip steps: i=12 f=12 p=13 sp=end dp=16 ]
[ queue: qname= qid=0 pqname= pqid=0 ]
[ Evaluations: 0         Packets: 0         Bytes: 0           States: 0     ]

@@7 block drop in quick on tun0 inet from any to 255.255.255.255 
[ Skip steps: i=12 d=13 f=12 p=13 sp=end dp=16 ]
[ queue: qname= qid=0 pqname= pqid=0 ]
[ Evaluations: 0         Packets: 0         Bytes: 0           States: 0     ]

@@8 block drop in log quick on tun0 inet from 10.0.0.0/8 to any 
[ Skip steps: i=12 d=13 f=12 p=13 sp=end da=end dp=16 ]
[ queue: qname= qid=0 pqname= pqid=0 ]
[ Evaluations: 0         Packets: 0         Bytes: 0           States: 0     ]

@@9 block drop in log quick on tun0 inet from 172.16.0.0/12 to any 
[ Skip steps: i=12 d=13 f=12 p=13 sp=end da=end dp=16 ]
[ queue: qname= qid=0 pqname= pqid=0 ]
[ Evaluations: 0         Packets: 0         Bytes: 0           States: 0     ]

@@10 block drop in log quick on tun0 inet from 192.168.0.0/16 to any 
[ Skip steps: i=12 d=13 f=12 p=13 sp=end da=end dp=16 ]
[ queue: qname= qid=0 pqname= pqid=0 ]
[ Evaluations: 0         Packets: 0         Bytes: 0           States: 0     ]

@@11 block drop in log quick on tun0 inet from 255.255.255.255 to any 
[ Skip steps: d=13 p=13 sp=end da=end dp=16 ]
[ queue: qname= qid=0 pqname= pqid=0 ]
[ Evaluations: 0         Packets: 0         Bytes: 0           States: 0     ]

@@12 block drop in log quick from no-route to any 
[ Skip steps: sp=end da=end dp=16 ]
[ queue: qname= qid=0 pqname= pqid=0 ]
[ Evaluations: 0         Packets: 0         Bytes: 0           States: 0     ]

@@13 pass out on tun0 inet proto icmp all icmp-type echoreq code 0 keep state 
[ Skip steps: i=end f=15 p=15 sa=end sp=end da=end dp=16 ]
[ queue: qname= qid=0 pqname= pqid=0 ]
[ Evaluations: 0         Packets: 0         Bytes: 0           States: 0     ]

@@14 pass in on tun0 inet proto icmp all icmp-type echoreq code 0 keep state 
[ Skip steps: i=end sa=end sp=end da=end dp=16 ]
[ queue: qname= qid=0 pqname= pqid=0 ]
[ Evaluations: 0         Packets: 0         Bytes: 0           States: 0     ]

@@15 pass out on tun0 proto udp all keep state 
[ Skip steps: i=end f=end p=17 sa=end sp=end da=end ]
[ queue: qname= qid=0 pqname= pqid=0 ]
[ Evaluations: 0         Packets: 0         Bytes: 0           States: 0     ]

@@16 pass in on tun0 proto udp from any to any port = domain keep state 
[ Skip steps: i=end f=end sa=end sp=end da=end ]
[ queue: qname= qid=0 pqname= pqid=0 ]
[ Evaluations: 0         Packets: 0         Bytes: 0           States: 0     ]

@@17 pass out on tun0 proto tcp all keep state 
[ Skip steps: i=end f=end p=end sa=end sp=end da=end ]
[ queue: qname= qid=0 pqname= pqid=0 ]
[ Evaluations: 0         Packets: 0         Bytes: 0           States: 0     ]

@@18 pass in on tun0 proto tcp from any to any port = ssh keep state 
[ Skip steps: i=end d=end f=end p=end sa=end sp=end da=end ]
[ queue: qname= qid=0 pqname= pqid=0 ]
[ Evaluations: 0         Packets: 0         Bytes: 0           States: 0     ]

@@19 pass in on tun0 proto tcp from any to any port = smtp keep state 
[ Skip steps: i=end d=end f=end p=end sa=end sp=end da=end ]
[ queue: qname= qid=0 pqname= pqid=0 ]
[ Evaluations: 0         Packets: 0         Bytes: 0           States: 0     ]

@@20 pass in on tun0 proto tcp from any to any port = domain keep state 
[ Skip steps: i=end d=end f=end p=end sa=end sp=end da=end ]
[ queue: qname= qid=0 pqname= pqid=0 ]
[ Evaluations: 0         Packets: 0         Bytes: 0           States: 0     ]

@@21 pass in on tun0 proto tcp from any to any port = auth keep state 
[ Skip steps: i=end d=end f=end p=end sa=end sp=end da=end dp=end ]
[ queue: qname= qid=0 pqname= pqid=0 ]
[ Evaluations: 0         Packets: 0         Bytes: 0           States: 0     ]

@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Import OpenBSD 3.3 source repository from CTM 3132 the first time
This opens an OpenBSD-mirabile (aka MirBSD) repository.

### MirBSD is:
# Copyright (c) 1982-2003 by Thorsten "mirabile" Glaser <x86@@ePost.de>
# Copyright © 1968-2003  The authors of And contributors to UNIX®, the
#       C Language, BSD/Berkeley Unix; 386BSD, NetBSD 1.1 and OpenBSD.
#
# Anyone who obtained a copy of this work is hereby permitted to freely use,
# distribute, modify, merge, sublicence, give away or sell it as long as the
# authors are given due credit and the following notice is retained:
#
# This work is provided "as is", with no explicit or implicit warranty what-
# soever. Use it only at your own risk. In no event may an author or contri-
# butor be held liable for any damage, directly or indirectly, that origina-
# ted through or is caused by creation or modification of this work.

MirBSD is my private tree. MirBSD does not differ very much from OpenBSD
and intentionally tracks OpenBSD. That's why it _is_ OpenBSD, just not the
official one. It's like with DarrenBSD.

At time of this writing, no advertising for MirBSD must be done,
because the advertising clause has not yet been sorted out.

http://templeofhate.com/tglaser/MirBSD/index.php
@
text
@@


1.1.1.2
log
@Sync MirBSD main source tree against OpenBSD-current,
which should be fairly stable after the Hackathon now.
@
text
@d2 4
a5 3
  [ Skip steps: i=12 f=6 p=2 sa=6 sp=end da=7 dp=16 ]
  [ queue: qname= qid=0 pqname= pqid=0 ]
  [ Evaluations: 0         Packets: 0         Bytes: 0           States: 0     ]
d7 4
a10 3
  [ Skip steps: i=12 f=6 sa=6 sp=end da=7 dp=16 ]
  [ queue: qname= qid=0 pqname= pqid=0 ]
  [ Evaluations: 0         Packets: 0         Bytes: 0           States: 0     ]
d12 4
a15 3
  [ Skip steps: i=12 f=6 p=4 sa=6 sp=end da=7 dp=16 ]
  [ queue: qname= qid=0 pqname= pqid=0 ]
  [ Evaluations: 0         Packets: 0         Bytes: 0           States: 0     ]
d17 4
a20 3
  [ Skip steps: i=12 f=6 sa=6 sp=end da=7 dp=16 ]
  [ queue: qname= qid=0 pqname= pqid=0 ]
  [ Evaluations: 0         Packets: 0         Bytes: 0           States: 0     ]
d22 4
a25 3
  [ Skip steps: i=12 f=6 p=6 sa=6 sp=end da=7 dp=16 ]
  [ queue: qname= qid=0 pqname= pqid=0 ]
  [ Evaluations: 0         Packets: 0         Bytes: 0           States: 0     ]
d27 4
a30 3
  [ Skip steps: i=12 sp=end da=7 dp=16 ]
  [ queue: qname= qid=0 pqname= pqid=0 ]
  [ Evaluations: 0         Packets: 0         Bytes: 0           States: 0     ]
d32 4
a35 3
  [ Skip steps: i=12 f=12 p=13 sp=end dp=16 ]
  [ queue: qname= qid=0 pqname= pqid=0 ]
  [ Evaluations: 0         Packets: 0         Bytes: 0           States: 0     ]
d37 4
a40 3
  [ Skip steps: i=12 d=13 f=12 p=13 sp=end dp=16 ]
  [ queue: qname= qid=0 pqname= pqid=0 ]
  [ Evaluations: 0         Packets: 0         Bytes: 0           States: 0     ]
d42 4
a45 3
  [ Skip steps: i=12 d=13 f=12 p=13 sp=end da=end dp=16 ]
  [ queue: qname= qid=0 pqname= pqid=0 ]
  [ Evaluations: 0         Packets: 0         Bytes: 0           States: 0     ]
d47 4
a50 3
  [ Skip steps: i=12 d=13 f=12 p=13 sp=end da=end dp=16 ]
  [ queue: qname= qid=0 pqname= pqid=0 ]
  [ Evaluations: 0         Packets: 0         Bytes: 0           States: 0     ]
d52 4
a55 3
  [ Skip steps: i=12 d=13 f=12 p=13 sp=end da=end dp=16 ]
  [ queue: qname= qid=0 pqname= pqid=0 ]
  [ Evaluations: 0         Packets: 0         Bytes: 0           States: 0     ]
d57 4
a60 3
  [ Skip steps: d=13 p=13 sp=end da=end dp=16 ]
  [ queue: qname= qid=0 pqname= pqid=0 ]
  [ Evaluations: 0         Packets: 0         Bytes: 0           States: 0     ]
d62 4
a65 3
  [ Skip steps: sp=end da=end dp=16 ]
  [ queue: qname= qid=0 pqname= pqid=0 ]
  [ Evaluations: 0         Packets: 0         Bytes: 0           States: 0     ]
d67 4
a70 3
  [ Skip steps: i=end f=15 p=15 sa=end sp=end da=end dp=16 ]
  [ queue: qname= qid=0 pqname= pqid=0 ]
  [ Evaluations: 0         Packets: 0         Bytes: 0           States: 0     ]
d72 4
a75 3
  [ Skip steps: i=end sa=end sp=end da=end dp=16 ]
  [ queue: qname= qid=0 pqname= pqid=0 ]
  [ Evaluations: 0         Packets: 0         Bytes: 0           States: 0     ]
d77 4
a80 3
  [ Skip steps: i=end f=end p=17 sa=end sp=end da=end ]
  [ queue: qname= qid=0 pqname= pqid=0 ]
  [ Evaluations: 0         Packets: 0         Bytes: 0           States: 0     ]
d82 4
a85 3
  [ Skip steps: i=end f=end sa=end sp=end da=end ]
  [ queue: qname= qid=0 pqname= pqid=0 ]
  [ Evaluations: 0         Packets: 0         Bytes: 0           States: 0     ]
d87 4
a90 3
  [ Skip steps: i=end f=end p=end sa=end sp=end da=end ]
  [ queue: qname= qid=0 pqname= pqid=0 ]
  [ Evaluations: 0         Packets: 0         Bytes: 0           States: 0     ]
d92 4
a95 3
  [ Skip steps: i=end d=end f=end p=end sa=end sp=end da=end ]
  [ queue: qname= qid=0 pqname= pqid=0 ]
  [ Evaluations: 0         Packets: 0         Bytes: 0           States: 0     ]
d97 4
a100 3
  [ Skip steps: i=end d=end f=end p=end sa=end sp=end da=end ]
  [ queue: qname= qid=0 pqname= pqid=0 ]
  [ Evaluations: 0         Packets: 0         Bytes: 0           States: 0     ]
d102 4
a105 3
  [ Skip steps: i=end d=end f=end p=end sa=end sp=end da=end ]
  [ queue: qname= qid=0 pqname= pqid=0 ]
  [ Evaluations: 0         Packets: 0         Bytes: 0           States: 0     ]
d107 4
a110 3
  [ Skip steps: i=end d=end f=end p=end sa=end sp=end da=end dp=end ]
  [ queue: qname= qid=0 pqname= pqid=0 ]
  [ Evaluations: 0         Packets: 0         Bytes: 0           States: 0     ]
@


1.1.1.3
log
@Import the complete OpenBSD source tree (base system)
as of CTM delta 3496 (roughly 1200 UTC today) into the
vendor branch.
Attention: this is a big update. Don't even try to
build this system, OpenBSD 3.4-beta, yet on your own.
@
text
@d1 1
a1 1
@@0 block drop out log on tun0 all
d5 1
a5 1
@@1 block drop in log on tun0 all
d9 1
a9 1
@@2 block return-rst out log on tun0 proto tcp all
d13 1
a13 1
@@3 block return-rst in log on tun0 proto tcp all
d17 1
a17 1
@@4 block return-icmp(port-unr, port-unr) out log on tun0 proto udp all
d21 1
a21 1
@@5 block return-icmp(port-unr, port-unr) in log on tun0 proto udp all
d25 1
a25 1
@@6 block drop out log quick on tun0 inet from ! 157.161.48.183 to any
d29 1
a29 1
@@7 block drop in quick on tun0 inet from any to 255.255.255.255
d33 1
a33 1
@@8 block drop in log quick on tun0 inet from 10.0.0.0/8 to any
d37 1
a37 1
@@9 block drop in log quick on tun0 inet from 172.16.0.0/12 to any
d41 1
a41 1
@@10 block drop in log quick on tun0 inet from 192.168.0.0/16 to any
d45 1
a45 1
@@11 block drop in log quick on tun0 inet from 255.255.255.255 to any
d49 1
a49 1
@@12 block drop in log quick from no-route to any
d53 1
a53 1
@@13 pass out on tun0 inet proto icmp all icmp-type echoreq code 0 keep state
d57 1
a57 1
@@14 pass in on tun0 inet proto icmp all icmp-type echoreq code 0 keep state
d61 1
a61 1
@@15 pass out on tun0 proto udp all keep state
d65 1
a65 1
@@16 pass in on tun0 proto udp from any to any port = domain keep state
d69 1
a69 1
@@17 pass out on tun0 proto tcp all keep state
d73 1
a73 1
@@18 pass in on tun0 proto tcp from any to any port = ssh keep state
d77 1
a77 1
@@19 pass in on tun0 proto tcp from any to any port = smtp keep state
d81 1
a81 1
@@20 pass in on tun0 proto tcp from any to any port = domain keep state
d85 1
a85 1
@@21 pass in on tun0 proto tcp from any to any port = auth keep state
@


1.1.1.4
log
@Time to import OpenBSD once again. Expect breakage.
@
text
@d1 1
a1 1
@@0 block drop out log on tun1000000 all
d5 1
a5 1
@@1 block drop in log on tun1000000 all
d9 1
a9 1
@@2 block return-rst out log on tun1000000 proto tcp all
d13 1
a13 1
@@3 block return-rst in log on tun1000000 proto tcp all
d17 1
a17 1
@@4 block return-icmp(port-unr, port-unr) out log on tun1000000 proto udp all
d21 1
a21 1
@@5 block return-icmp(port-unr, port-unr) in log on tun1000000 proto udp all
d25 1
a25 1
@@6 block drop out log quick on tun1000000 inet from ! 157.161.48.183 to any
d29 1
a29 1
@@7 block drop in quick on tun1000000 inet from any to 255.255.255.255
d33 1
a33 1
@@8 block drop in log quick on tun1000000 inet from 10.0.0.0/8 to any
d37 1
a37 1
@@9 block drop in log quick on tun1000000 inet from 172.16.0.0/12 to any
d41 1
a41 1
@@10 block drop in log quick on tun1000000 inet from 192.168.0.0/16 to any
d45 1
a45 1
@@11 block drop in log quick on tun1000000 inet from 255.255.255.255 to any
d53 1
a53 1
@@13 pass out on tun1000000 inet proto icmp all icmp-type echoreq code 0 keep state
d57 1
a57 1
@@14 pass in on tun1000000 inet proto icmp all icmp-type echoreq code 0 keep state
d61 1
a61 1
@@15 pass out on tun1000000 proto udp all keep state
d65 1
a65 1
@@16 pass in on tun1000000 proto udp from any to any port = domain keep state
d69 1
a69 1
@@17 pass out on tun1000000 proto tcp all keep state
d73 1
a73 1
@@18 pass in on tun1000000 proto tcp from any to any port = ssh keep state
d77 1
a77 1
@@19 pass in on tun1000000 proto tcp from any to any port = smtp keep state
d81 1
a81 1
@@20 pass in on tun1000000 proto tcp from any to any port = domain keep state
d85 1
a85 1
@@21 pass in on tun1000000 proto tcp from any to any port = auth keep state
@


