head	1.2;
access;
symbols
	MIRBSD_7quater:1.1.1.2
	cvs-200405160640:1.1.1.2
	cvs-200401271800:1.1.1.2
	cvs-200401261630:1.1.1.2
	cvs-200401021645:1.1.1.2
	MIRBSD_7_ALPHA:1.1.1.2.0.6
	MIRBSD_7:1.1.1.2.0.4
	cvs-200312222040:1.1.1.2
	MIRBSD_7ter:1.1.1.2
	MIRBSD_7_DEV:1.1.1.2.0.2
	cvs-200310020700:1.1.1.2
	cvs-200309271030:1.1.1.2
	cvs-200309251530:1.1.1.2
	cvs-200308302005:1.1.1.2
	cvs-200308171200:1.1.1.2
	ctm-3496:1.1.1.2
	ctm-3449:1.1.1.1
	ctm-3437:1.1.1.1
	cvs-200307191805:1.1.1.1
	ctm-3425:1.1.1.1
	cvs-200307091500:1.1.1.1
	ctm-3389:1.1.1.1
	cvs-200306291430:1.1.1.1
	ctm-3341:1.1.1.1
	MIRBSD_5:1.1.1.1
	cvs-200306082100:1.1.1.1
	ctm-3316:1.1.1.1
	ctm-3272:1.1.1.1
	ctm-3264:1.1.1.1
	cvs-200305071630:1.1.1.1
	MIRBSD_4:1.1.1.1
	ctm-3203:1.1.1.1
	cvs-20030410-1130:1.1.1.1
	ctm-3155:1.1.1.1
	ctm-3132:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.2
date	2004.07.18.12.28.29;	author tg;	state dead;
branches;
next	1.1;

1.1
date	2003.03.22.17.48.05;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.03.22.17.48.05;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2003.08.11.18.27.58;	author tg;	state Exp;
branches;
next	;


desc
@@


1.2
log
@nuke regression tests

noone actually uses them (I've run them about half a dozen times only),
some of the tests (eg. everything PF) are broken, some of the code is
broken... and the adventurous are invited to use CVS and fix them,
maybe on a tagged branch.
@
text
@/*	$OpenBSD: bitstring_test.c,v 1.4 2003/01/04 22:36:12 deraadt Exp $	*/
/*	$NetBSD: bitstring_test.c,v 1.4 1995/04/29 05:44:35 cgd Exp $	*/

/*
 * this is a simple program to test bitstring.h
 * inspect the output, you should notice problems
 * choose the ATT or BSD flavor
 */
/*#define ATT /*-*/
#define BSD /*-*/

/* include the following define if you want the
 * program to link. this corrects a misspeling
 * in bitstring.h
 */
#define _bitstr_size bitstr_size
 
#include <stdio.h>
#include <stdlib.h>

/* #ifdef NOTSOGOOD */
#include "bitstring.h"
/* #else */
/* #include "gbitstring.h" */
/* #endif */

int TEST_LENGTH;
#define DECL_TEST_LENGTH	37	/* a mostly random number */

int
main(int argc, char *argv[])
{
  void clearbits();
  void printbits();
  int i;
  bitstr_t *bs;
  bitstr_t bit_decl(bss, DECL_TEST_LENGTH);

  if (argc > 1)
	TEST_LENGTH = atoi(argv[1]);
  else
	TEST_LENGTH = DECL_TEST_LENGTH;

  if (TEST_LENGTH < 4) {
	fprintf(stderr, "TEST_LENGTH must be at least 4, but it is %d\n",
		TEST_LENGTH);
	exit(1);
  }

  (void) printf("Testing with TEST_LENGTH = %d\n\n", TEST_LENGTH);

  (void) printf("test _bit_byte, _bit_mask, and bitstr_size\n");
  (void) printf("  i   _bit_byte(i)   _bit_mask(i) bitstr_size(i)\n");
  for (i=0; i<TEST_LENGTH; i++) {
    (void) printf("%3d%15d%15d%15d\n",
      i, _bit_byte(i), _bit_mask(i), bitstr_size(i));
    }

  bs = bit_alloc(TEST_LENGTH);
  clearbits(bs, TEST_LENGTH);
  (void) printf("\ntest bit_alloc, clearbits, bit_ffc, bit_ffs\n");
  (void) printf("be:   0  -1 ");
  for (i=0; i < TEST_LENGTH; i++)
	(void) putchar('0');
  (void) printf("\nis: ");
  printbits(bs, TEST_LENGTH);

  (void) printf("\ntest bit_set\n");
  for (i=0; i<TEST_LENGTH; i+=3) {
    bit_set(bs, i); 
    }
  (void) printf("be:   1   0 ");
  for (i=0; i < TEST_LENGTH; i++)
	(void) putchar(*("100" + (i % 3)));
  (void) printf("\nis: ");
  printbits(bs, TEST_LENGTH);

  (void) printf("\ntest bit_clear\n");
  for (i=0; i<TEST_LENGTH; i+=6) {
    bit_clear(bs, i); 
    }
  (void) printf("be:   0   3 ");
  for (i=0; i < TEST_LENGTH; i++)
	(void) putchar(*("000100" + (i % 6)));
  (void) printf("\nis: ");
  printbits(bs, TEST_LENGTH);

  (void) printf("\ntest bit_test using previous bitstring\n");
  (void) printf("  i    bit_test(i)\n");
  for (i=0; i<TEST_LENGTH; i++) {
    (void) printf("%3d%15d\n",
      i, bit_test(bs, i));
    }

  clearbits(bs, TEST_LENGTH);
  (void) printf("\ntest clearbits\n");
  (void) printf("be:   0  -1 ");
  for (i=0; i < TEST_LENGTH; i++)
	(void) putchar('0');
  (void) printf("\nis: ");
  printbits(bs, TEST_LENGTH);

  (void) printf("\ntest bit_nset and bit_nclear\n");
  bit_nset(bs, 1, TEST_LENGTH - 2);
  (void) printf("be:   0   1 0");
  for (i=0; i < TEST_LENGTH - 2; i++)
	(void) putchar('1');
  (void) printf("0\nis: ");
  printbits(bs, TEST_LENGTH);

  bit_nclear(bs, 2, TEST_LENGTH - 3);
  (void) printf("be:   0   1 01");
  for (i=0; i < TEST_LENGTH - 4; i++)
        (void) putchar('0');
  (void) printf("10\nis: ");
  printbits(bs, TEST_LENGTH);

  bit_nclear(bs, 0, TEST_LENGTH - 1);
  (void) printf("be:   0  -1 ");
  for (i=0; i < TEST_LENGTH; i++)
	(void) putchar('0');
  (void) printf("\nis: ");
  printbits(bs, TEST_LENGTH);
  bit_nset(bs, 0, TEST_LENGTH - 2);
  (void) printf("be: %3d   0 ",TEST_LENGTH - 1);
  for (i=0; i < TEST_LENGTH - 1; i++)
	(void) putchar('1');
  putchar('0');
  (void) printf("\nis: ");
  printbits(bs, TEST_LENGTH);
  bit_nclear(bs, 0, TEST_LENGTH - 1);
  (void) printf("be:   0  -1 ");
  for (i=0; i < TEST_LENGTH; i++)
	(void) putchar('0');
  (void) printf("\nis: ");
  printbits(bs, TEST_LENGTH);

  (void) printf("\n");
  (void) printf("first 1 bit should move right 1 position each line\n");
  for (i=0; i<TEST_LENGTH; i++) {
    bit_nclear(bs, 0, TEST_LENGTH - 1);
    bit_nset(bs, i, TEST_LENGTH - 1);
    (void) printf("%3d ", i); printbits(bs, TEST_LENGTH);
    }

  (void) printf("\n");
  (void) printf("first 0 bit should move right 1 position each line\n");
  for (i=0; i<TEST_LENGTH; i++) {
    bit_nset(bs, 0, TEST_LENGTH - 1);
    bit_nclear(bs, i, TEST_LENGTH - 1);
    (void) printf("%3d ", i); printbits(bs, TEST_LENGTH);
    }

  (void) printf("\n");
  (void) printf("first 0 bit should move left 1 position each line\n");
  for (i=0; i<TEST_LENGTH; i++) {
    bit_nclear(bs, 0, TEST_LENGTH - 1);
    bit_nset(bs, 0, TEST_LENGTH - 1 - i);
    (void) printf("%3d ", i); printbits(bs, TEST_LENGTH);
    }

  (void) printf("\n");
  (void) printf("first 1 bit should move left 1 position each line\n");
  for (i=0; i<TEST_LENGTH; i++) {
    bit_nset(bs, 0, TEST_LENGTH - 1);
    bit_nclear(bs, 0, TEST_LENGTH - 1 - i);
    (void) printf("%3d ", i); printbits(bs, TEST_LENGTH);
    }

  (void) printf("\n");
  (void) printf("0 bit should move right 1 position each line\n");
  for (i=0; i<TEST_LENGTH; i++) {
    bit_nset(bs, 0, TEST_LENGTH - 1);
    bit_nclear(bs, i, i);
    (void) printf("%3d ", i); printbits(bs, TEST_LENGTH);
    }

  (void) printf("\n");
  (void) printf("1 bit should move right 1 position each line\n");
  for (i=0; i<TEST_LENGTH; i++) {
    bit_nclear(bs, 0, TEST_LENGTH - 1);
    bit_nset(bs, i, i);
    (void) printf("%3d ", i); printbits(bs, TEST_LENGTH);
    }

  (void)free(bs);
  (void)exit(0);
}
void
clearbits(b, n)
  bitstr_t *b;
  int n;
{
  register int i = bitstr_size(n);
  while(i--) 
    *(b + i) = 0;
}
void
printbits(b, n)
  bitstr_t *b;
  int n;
{
  register int i;
  int jc, js;

  bit_ffc(b, n, &jc);
  bit_ffs(b, n, &js);
  (void) printf("%3d %3d ", jc, js);
  for (i=0; i< n; i++) {
    (void) putchar((bit_test(b, i) ? '1' : '0'));
    }
  (void)putchar('\n');
}
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Import OpenBSD 3.3 source repository from CTM 3132 the first time
This opens an OpenBSD-mirabile (aka MirBSD) repository.

### MirBSD is:
# Copyright (c) 1982-2003 by Thorsten "mirabile" Glaser <x86@@ePost.de>
# Copyright © 1968-2003  The authors of And contributors to UNIX®, the
#       C Language, BSD/Berkeley Unix; 386BSD, NetBSD 1.1 and OpenBSD.
#
# Anyone who obtained a copy of this work is hereby permitted to freely use,
# distribute, modify, merge, sublicence, give away or sell it as long as the
# authors are given due credit and the following notice is retained:
#
# This work is provided "as is", with no explicit or implicit warranty what-
# soever. Use it only at your own risk. In no event may an author or contri-
# butor be held liable for any damage, directly or indirectly, that origina-
# ted through or is caused by creation or modification of this work.

MirBSD is my private tree. MirBSD does not differ very much from OpenBSD
and intentionally tracks OpenBSD. That's why it _is_ OpenBSD, just not the
official one. It's like with DarrenBSD.

At time of this writing, no advertising for MirBSD must be done,
because the advertising clause has not yet been sorted out.

http://templeofhate.com/tglaser/MirBSD/index.php
@
text
@@


1.1.1.2
log
@Import the complete OpenBSD source tree (base system)
as of CTM delta 3496 (roughly 1200 UTC today) into the
vendor branch.
Attention: this is a big update. Don't even try to
build this system, OpenBSD 3.4-beta, yet on your own.
@
text
@d1 2
a2 2
/* $OpenBSD: bitstring_test.c,v 1.5 2003/07/31 21:48:02 deraadt Exp $	 */
/* $NetBSD: bitstring_test.c,v 1.4 1995/04/29 05:44:35 cgd Exp $	 */
d9 2
a10 2
/* #define ATT /*- */
#define BSD			/*-*/
d12 3
a14 3
/*
 * include the following define if you want the program to link. this
 * corrects a misspeling in bitstring.h
d17 1
a17 1

d27 1
a27 1
int             TEST_LENGTH;
d30 2
a31 2
static void
clearbits(bitstr_t *b, int n)
d33 152
a184 1
	register int    i = bitstr_size(n);
d186 2
a187 2
	while (i--)
		*(b + i) = 0;
d189 4
a192 3

static void
printbits(bitstr_t *b, int n)
d194 3
a196 10
	register int    i;
	int             jc, js;

	bit_ffc(b, n, &jc);
	bit_ffs(b, n, &js);
	(void) printf("%3d %3d ", jc, js);
	for (i = 0; i < n; i++) {
		(void) putchar((bit_test(b, i) ? '1' : '0'));
	}
	(void) putchar('\n');
d198 4
a201 3

int
main(int argc, char *argv[])
d203 2
a204 155
	int             i;
	bitstr_t       *bs;
	bitstr_t        bit_decl(bss, DECL_TEST_LENGTH);

	if (argc > 1)
		TEST_LENGTH = atoi(argv[1]);
	else
		TEST_LENGTH = DECL_TEST_LENGTH;

	if (TEST_LENGTH < 4) {
		fprintf(stderr, "TEST_LENGTH must be at least 4, but it is %d\n",
			TEST_LENGTH);
		exit(1);
	}
	(void) printf("Testing with TEST_LENGTH = %d\n\n", TEST_LENGTH);

	(void) printf("test _bit_byte, _bit_mask, and bitstr_size\n");
	(void) printf("  i   _bit_byte(i)   _bit_mask(i) bitstr_size(i)\n");
	for (i = 0; i < TEST_LENGTH; i++) {
		(void) printf("%3d%15d%15d%15d\n",
			      i, _bit_byte(i), _bit_mask(i), bitstr_size(i));
	}

	bs = bit_alloc(TEST_LENGTH);
	clearbits(bs, TEST_LENGTH);
	(void) printf("\ntest bit_alloc, clearbits, bit_ffc, bit_ffs\n");
	(void) printf("be:   0  -1 ");
	for (i = 0; i < TEST_LENGTH; i++)
		(void) putchar('0');
	(void) printf("\nis: ");
	printbits(bs, TEST_LENGTH);

	(void) printf("\ntest bit_set\n");
	for (i = 0; i < TEST_LENGTH; i += 3) {
		bit_set(bs, i);
	}
	(void) printf("be:   1   0 ");
	for (i = 0; i < TEST_LENGTH; i++)
		(void) putchar(*("100" + (i % 3)));
	(void) printf("\nis: ");
	printbits(bs, TEST_LENGTH);

	(void) printf("\ntest bit_clear\n");
	for (i = 0; i < TEST_LENGTH; i += 6) {
		bit_clear(bs, i);
	}
	(void) printf("be:   0   3 ");
	for (i = 0; i < TEST_LENGTH; i++)
		(void) putchar(*("000100" + (i % 6)));
	(void) printf("\nis: ");
	printbits(bs, TEST_LENGTH);

	(void) printf("\ntest bit_test using previous bitstring\n");
	(void) printf("  i    bit_test(i)\n");
	for (i = 0; i < TEST_LENGTH; i++) {
		(void) printf("%3d%15d\n",
			      i, bit_test(bs, i));
	}

	clearbits(bs, TEST_LENGTH);
	(void) printf("\ntest clearbits\n");
	(void) printf("be:   0  -1 ");
	for (i = 0; i < TEST_LENGTH; i++)
		(void) putchar('0');
	(void) printf("\nis: ");
	printbits(bs, TEST_LENGTH);

	(void) printf("\ntest bit_nset and bit_nclear\n");
	bit_nset(bs, 1, TEST_LENGTH - 2);
	(void) printf("be:   0   1 0");
	for (i = 0; i < TEST_LENGTH - 2; i++)
		(void) putchar('1');
	(void) printf("0\nis: ");
	printbits(bs, TEST_LENGTH);

	bit_nclear(bs, 2, TEST_LENGTH - 3);
	(void) printf("be:   0   1 01");
	for (i = 0; i < TEST_LENGTH - 4; i++)
		(void) putchar('0');
	(void) printf("10\nis: ");
	printbits(bs, TEST_LENGTH);

	bit_nclear(bs, 0, TEST_LENGTH - 1);
	(void) printf("be:   0  -1 ");
	for (i = 0; i < TEST_LENGTH; i++)
		(void) putchar('0');
	(void) printf("\nis: ");
	printbits(bs, TEST_LENGTH);
	bit_nset(bs, 0, TEST_LENGTH - 2);
	(void) printf("be: %3d   0 ", TEST_LENGTH - 1);
	for (i = 0; i < TEST_LENGTH - 1; i++)
		(void) putchar('1');
	putchar('0');
	(void) printf("\nis: ");
	printbits(bs, TEST_LENGTH);
	bit_nclear(bs, 0, TEST_LENGTH - 1);
	(void) printf("be:   0  -1 ");
	for (i = 0; i < TEST_LENGTH; i++)
		(void) putchar('0');
	(void) printf("\nis: ");
	printbits(bs, TEST_LENGTH);

	(void) printf("\n");
	(void) printf("first 1 bit should move right 1 position each line\n");
	for (i = 0; i < TEST_LENGTH; i++) {
		bit_nclear(bs, 0, TEST_LENGTH - 1);
		bit_nset(bs, i, TEST_LENGTH - 1);
		(void) printf("%3d ", i);
		printbits(bs, TEST_LENGTH);
	}

	(void) printf("\n");
	(void) printf("first 0 bit should move right 1 position each line\n");
	for (i = 0; i < TEST_LENGTH; i++) {
		bit_nset(bs, 0, TEST_LENGTH - 1);
		bit_nclear(bs, i, TEST_LENGTH - 1);
		(void) printf("%3d ", i);
		printbits(bs, TEST_LENGTH);
	}

	(void) printf("\n");
	(void) printf("first 0 bit should move left 1 position each line\n");
	for (i = 0; i < TEST_LENGTH; i++) {
		bit_nclear(bs, 0, TEST_LENGTH - 1);
		bit_nset(bs, 0, TEST_LENGTH - 1 - i);
		(void) printf("%3d ", i);
		printbits(bs, TEST_LENGTH);
	}

	(void) printf("\n");
	(void) printf("first 1 bit should move left 1 position each line\n");
	for (i = 0; i < TEST_LENGTH; i++) {
		bit_nset(bs, 0, TEST_LENGTH - 1);
		bit_nclear(bs, 0, TEST_LENGTH - 1 - i);
		(void) printf("%3d ", i);
		printbits(bs, TEST_LENGTH);
	}

	(void) printf("\n");
	(void) printf("0 bit should move right 1 position each line\n");
	for (i = 0; i < TEST_LENGTH; i++) {
		bit_nset(bs, 0, TEST_LENGTH - 1);
		bit_nclear(bs, i, i);
		(void) printf("%3d ", i);
		printbits(bs, TEST_LENGTH);
	}

	(void) printf("\n");
	(void) printf("1 bit should move right 1 position each line\n");
	for (i = 0; i < TEST_LENGTH; i++) {
		bit_nclear(bs, 0, TEST_LENGTH - 1);
		bit_nset(bs, i, i);
		(void) printf("%3d ", i);
		printbits(bs, TEST_LENGTH);
	}
d206 7
a212 2
	(void) free(bs);
	(void) exit(0);
@

