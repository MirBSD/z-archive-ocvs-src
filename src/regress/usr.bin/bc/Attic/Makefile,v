head	1.2;
access;
symbols
	MIRBSD_7quater:1.1.1.1
	cvs-200405160640:1.1.1.2
	cvs-200401271800:1.1.1.2
	cvs-200401261630:1.1.1.2
	cvs-200401021645:1.1.1.2
	MIRBSD_7_ALPHA:1.1.1.1.0.6
	MIRBSD_7:1.1.1.1.0.4
	cvs-200312222040:1.1.1.2
	MIRBSD_7ter:1.1.1.1
	MIRBSD_7_DEV:1.1.1.1.0.2
	cvs-200310020700:1.1.1.1
	cvs-200309271030:1.1.1.1
	cvs-200309261610:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@# @;


1.2
date	2004.07.18.12.30.35;	author tg;	state dead;
branches;
next	1.1;

1.1
date	2003.09.26.16.12.42;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.09.26.16.12.42;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2003.12.22.21.10.18;	author tg;	state Exp;
branches;
next	;


desc
@@


1.2
log
@nuke regression tests

noone actually uses them (I've run them about half a dozen times only),
some of the tests (eg. everything PF) are broken, some of the code is
broken... and the adventurous are invited to use CVS and fix them,
maybe on a tagged branch.
@
text
@# $OpenBSD: Makefile,v 1.1 2003/09/25 19:40:07 otto Exp $

BC=bc

REGRESS_TARGETS=t1 t2 t3 t4 t5 t6

# .in: input file
# .out: desired result

# t1: bc.library
# t2: while loop
# t3: for loop
# t4: deep nested while loop
# t5: function definition and call
# t6: empty if statement

all: clean ${REGRESS_TARGET}

.SUFFIXES: .in

.in:
	@@echo ${*}
	@@${BC} -d < ${.CURDIR}/${*}.in > ${*}.log
	@@cmp -s ${.CURDIR}/${*}.out ${*}.log || \
		(echo "XXX ${*} failed" && false)

# Clean all files generated
clean:
	rm -f *.log

.include <bsd.regress.mk>
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Import Unix bc and dc from OpenBSD-current sources
@
text
@@


1.1.1.2
log
@Time to import OpenBSD once again. Expect breakage.
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.9 2003/12/09 12:49:01 otto Exp $
d5 1
a5 1
REGRESS_TARGETS=t1 t2 t3 t4 t5 t6 t7 t8 t9 t10 t11 t12 t13 t14 t15 t16 t17 t18
d13 1
a13 1
# t4: deeply nested while loop
a15 12
# t7: assignment ops
# t8: continue ops
# t9: more continue
# t10: for with empty E's
# t11: if else
# t12: print
# t13: alternive forms of define and return
# t14: compare
# t15: boolean and
# t16: boolean or
# t17: long var names
# t18: towers of hanoi
@

