head	1.1;
branch	1.1.1;
access;
symbols
	tg-mergetmp-mirosx-1:1.1.1.4
	tg-mergefixes-1-branch:1.1.1.4.0.8
	tg-mergefixes-1-base:1.1.1.4
	MIROS_X:1.1.1.4.0.6
	MIROS_X_BASE:1.1.1.4
	tg-mergetmp-3:1.1.1.4
	MIRBSD_XP_MIRPPC:1.1.1.4.0.4
	cvs-200410261945:1.1.1.4
	MIRBSD_XP_SPARC_BASE:1.1.1.4
	MIRBSD_XP_SPARC:1.1.1.4.0.2
	cvs-200406230735:1.1.1.4
	MIRBSD_7quater:1.1.1.3
	cvs-200405160640:1.1.1.4
	cvs-200402042200:1.1.1.3
	cvs-200401271800:1.1.1.3
	cvs-200401261630:1.1.1.3
	cvs-200401021645:1.1.1.3
	MIRBSD_7_ALPHA:1.1.1.3.0.6
	MIRBSD_7:1.1.1.3.0.4
	cvs-200312222040:1.1.1.3
	MIRBSD_7ter:1.1.1.3
	MIRBSD_7_DEV:1.1.1.3.0.2
	cvs-200310020700:1.1.1.3
	cvs-200309271030:1.1.1.3
	cvs-200309261655:1.1.1.3
	cvs-200309251530:1.1.1.3
	cvs-200308302005:1.1.1.3
	cvs-200308171200:1.1.1.3
	ctm-3496:1.1.1.3
	ctm-3449:1.1.1.3
	ctm-3437:1.1.1.3
	cvs-200307191805:1.1.1.3
	ctm-3425:1.1.1.3
	cvs-200307091500:1.1.1.3
	ctm-3389:1.1.1.3
	cvs-200306291430:1.1.1.3
	ctm-3341:1.1.1.3
	MIRBSD_5:1.1.1.2
	cvs-200306082100:1.1.1.2
	ctm-3316:1.1.1.2
	ctm-3272:1.1.1.1
	ctm-3264:1.1.1.1
	cvs-200305071630:1.1.1.1
	ctm-3255:1.1.1.1
	ctm-3229:1.1.1.1
	MIRBSD_4:1.1.1.1
	ctm-3203:1.1.1.1
	cvs-20030410-1130:1.1.1.1
	ctm-3155:1.1.1.1
	ctm-3132:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@.\" @;


1.1
date	2003.03.22.17.46.30;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.03.22.17.46.30;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2003.06.05.17.25.12;	author tg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2003.06.19.12.38.11;	author tg;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2004.05.16.09.21.07;	author tg;	state Stab;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@.\"	$OpenBSD: rfork.2,v 1.17 2002/11/28 21:50:13 brad Exp $
.\"
.\" This manual page is taken directly from Plan9, and modified to
.\" describe the actual OpenBSD implementation.  Permission for
.\" use of this page comes from Rob Pike <rob@@plan9.att.com>.
.\"
.Dd January 12, 1996
.Dt RFORK 2
.Os
.Sh NAME
.Nm rfork
.Nd manipulate process resources
.Sh SYNOPSIS
.Fd #include <sys/param.h>
.Fd #include <unistd.h>
.Ft int
.Fn rfork "int flags"
.Sh DESCRIPTION
Forking, vforking or rforking is the only way new processes are created.
The
.Fa flags
argument to
.Fn rfork
selects which resources of the
invoking process (parent) are shared
by the new process (child) or initialized to
their default values.
The resources include
the open file descriptor table (which, when shared, permits processes
to open and close files for other processes),
and open files.
.Fa flags
is the logical
.Tn OR
of some subset of
.Bl -tag -width "RFCNAMEG" -compact -offset indent
.It Dv RFPROC
If set a new process is created; otherwise changes affect the
current process.
The current implementation requires this flag to always be set.
.It Dv RFNOWAIT
If set, the child process will be dissociated from the parent.
Upon exit the child will not leave a status for the parent to collect.
See
.Xr wait 2 .
.It Xo Dv RFNAMEG , Dv RFCNAMEG ,
.Dv RFENVG , Dv RFCENVG , Dv RFNOTEG
.Xc
These are Plan 9 specific flags, and not implemented.
.It Dv RFFDG
If set, the invoker's file descriptor table (see
.Xr intro 2 )
is copied; otherwise the two processes share a
single table.
.It Dv RFCFDG
If set, the new process starts with a clean file descriptor table.
Is mutually exclusive with
.Dv RFFDG .
.It Dv RFMEM
If set, the kernel will force sharing of the entire address space.
The child
will then inherit all the shared segments the parent process owns.
Other segment types will be unaffected.
Subsequent forks by the parent will then propagate the shared
data and bss between children.
The stack segment is always split.
May be set only with
.Dv RFPROC .
.El
.Pp
File descriptors in a shared file descriptor table are kept
open until either they are explicitly closed
or all processes sharing the table exit.
.Pp
If
.Dv RFPROC
is set, the
value returned in the parent process
is the process ID
of the child process; the value returned in the child is zero.
Without
.Dv RFPROC ,
the return value is zero.
Process ids range from 1 to the maximum integer
.Li int
value.
.Fn rfork
will sleep, if necessary, until required process resources are available.
.Pp
.Fn fork
can be implemented as a call to
.Xr rfork 2
using "RFFDG|RFPROC"
but isn't for backwards compatibility.
If a process has file descriptor table sharing active, setuid or setgid
programs will not
.Xr execve 2
with extra privileges.
.Sh ERRORS
.Fn rfork
will fail and no child process will be created if:
.Bl -tag -width Er
.It Bq Er EAGAIN
The system-imposed limit on the total
number of processes under execution would be exceeded.
This limit is configuration-dependent.
.It Bq Er EAGAIN
The system-imposed limit
.Dv MAXUPRC
.Pq Aq Pa sys/param.h
on the total number of
processes under execution by a single user would be exceeded.
.It Bq Er ENOMEM
There is insufficient swap space for the new process.
.El
.Sh SEE ALSO
.Xr fork 2 ,
.Xr intro 2 ,
.Xr minherit 2 ,
.Xr vfork 2
.Sh HISTORY
The
.Fn rfork
function first appeared in Plan9.
@


1.1.1.1
log
@Import OpenBSD 3.3 source repository from CTM 3132 the first time
This opens an OpenBSD-mirabile (aka MirBSD) repository.

### MirBSD is:
# Copyright (c) 1982-2003 by Thorsten "mirabile" Glaser <x86@@ePost.de>
# Copyright © 1968-2003  The authors of And contributors to UNIX®, the
#       C Language, BSD/Berkeley Unix; 386BSD, NetBSD 1.1 and OpenBSD.
#
# Anyone who obtained a copy of this work is hereby permitted to freely use,
# distribute, modify, merge, sublicence, give away or sell it as long as the
# authors are given due credit and the following notice is retained:
#
# This work is provided "as is", with no explicit or implicit warranty what-
# soever. Use it only at your own risk. In no event may an author or contri-
# butor be held liable for any damage, directly or indirectly, that origina-
# ted through or is caused by creation or modification of this work.

MirBSD is my private tree. MirBSD does not differ very much from OpenBSD
and intentionally tracks OpenBSD. That's why it _is_ OpenBSD, just not the
official one. It's like with DarrenBSD.

At time of this writing, no advertising for MirBSD must be done,
because the advertising clause has not yet been sorted out.

http://templeofhate.com/tglaser/MirBSD/index.php
@
text
@@


1.1.1.2
log
@Import latest OpenBSD CVS tree by CTM in order
to sync the base system and ports tree with Them.

This includes the recent licence changes as well - by
importing the changed base and re-applying the diffs
(with cvs up -j -j) they are inherited, and we're not
bound to the removed clauses any longer.
@
text
@d1 1
a1 1
.\"	$OpenBSD: rfork.2,v 1.18 2003/06/01 21:23:15 jmc Exp $
d92 1
a92 1
.Fn rfork
@


1.1.1.3
log
@sync with OpenBSD, this gives us a fair amount of fixes
@
text
@d1 1
a1 1
.\"	$OpenBSD: rfork.2,v 1.19 2003/06/18 11:05:21 jmc Exp $
d3 3
a5 1
.\" Copyright (c) 2003 Jason McIntyre <jmc@@openbsd.org>
d7 1
a7 13
.\" Permission to use, copy, modify, and distribute this software for any
.\" purpose with or without fee is hereby granted, provided that the above
.\" copyright notice and this permission notice appear in all copies.
.\"
.\" THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
.\" WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
.\" MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
.\" ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
.\" WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
.\" ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
.\" OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
.\"
.Dd June 17, 2003
d12 1
a12 1
.Nd control new processes
d19 4
a22 19
The fork functions
.Pf ( Xr fork 2 ,
.Xr vfork 2
and
.Fn rfork )
create new processes.
The new process (child process) is an exact copy of the calling process
(parent process), except as outlined in the
.Xr fork 2
manual page.
.Fn rfork
can be used to manipulate the resources of the parent process and the
child process.
Operations currently supported include whether to copy or share the file
descriptor table between the two processes, whether to share the address
space, and whether the parent should
.Xr wait 2
for the child process to
.Xr _exit 2 .
d24 13
a36 26
takes a single argument,
.Fa flags ,
which controls which of these resources should be manipulated.
They are defined in the header file
.Aq Pa sys/param.h
and are the logical OR of one or more of the following:
.Pp
.Bl -tag -width "RFNOWAIT"
.It Dv RFNAMEG
New Plan 9
.Sq name space .
This is a Plan 9 specific flag, and not implemented.
.It Dv RFENVG
Copy Plan 9
.Sq env space .
This is a Plan 9 specific flag, and not implemented.
.It Dv RFFDG
Copy the parent's file descriptor table.
If this flag is unset, the parent and child will share the parent's
file descriptor table.
May not be used in conjunction with
.Dv RFCFDG .
.It Dv RFNOTEG
Create new Plan 9
.Sq note group .
This is a Plan 9 specific flag, and not implemented.
d38 2
a39 1
Create a new process.
d41 18
d60 4
a63 2
The kernel forces sharing of the entire address space.
The child will then inherit all the shared segments the parent process owns.
d67 2
a68 17
.It Dv RFNOWAIT
Parent need not
.Xr wait 2
on child.
.It Dv RFCNAMEG
Zero Plan 9
.Sq name space .
This is a Plan 9 specific flag, and not implemented.
.It Dv RFCENVG
Zero Plan 9
.Sq env space .
This is a Plan 9 specific flag, and not implemented.
.It Dv RFCFDG
Zero the child's file descriptor table (ie. start with a blank file
descriptor table).
May not be used in conjunction with
.Dv RFFDG .
d70 19
a88 6
.Sh RETURN VALUES
The parent process returns the process ID (PID) of the child process.
The child process returns 0.
The range of the process ID is defined in
.Aq Pa sys/proc.h
and is currently between 1 and 32766, inclusive.
d93 2
a94 1
using "RFFDG|RFPROC", but isn't for backwards compatibility.
a102 9
.It Bq Er ENOMEM
Cannot allocate memory.
The new process image required more memory than was allowed by the hardware or
by system-imposed memory management constraints.
A lack of swap space is normally temporary; however, a lack of core is not.
Soft limits may be increased to their corresponding hard limits.
.It Bq Er EINVAL
Invalid argument.
Some invalid argument was supplied.
a103 1
Resource temporarily unavailable.
a107 1
Resource temporarily unavailable.
d110 5
a114 9
on the total number of processes under execution by a single user would be
exceeded.
.Dv MAXUPRC
is currently defined in
.Aq Pa sys/param.h
as
.Dv CHILD_MAX ,
which is currently defined as 80 in
.Aq Pa sys/limits.h .
a116 2
.Xr _exit 2 ,
.Xr execve 2 ,
d119 1
d124 1
a124 1
function first appeared in Plan 9.
@


1.1.1.4
log
@large-scale import of OpenBSD 3.5-current source base including many fixes
note: from now, we will not be binary compatible with OpenBSD apps any
longer (due to syscall numbering differences); both an OpenBSD compat and
a conversion tool for old MirOS #7 apps will be delivered later.

The src/ tree is locked from now.
@
text
@d1 1
a1 1
.\"	$OpenBSD: rfork.2,v 1.21 2004/04/03 10:07:08 jmc Exp $
d30 2
a31 3
.Po
.Xr fork 2 ,
.Xr vfork 2 ,
d33 1
a33 2
.Fn rfork
.Pc
d35 2
a36 5
The new process
.Pq child process
is an exact copy of the calling process
.Pq parent process ,
except as outlined in the
d55 1
d83 1
d97 2
a98 2
Zero the child's file descriptor table
.Pq i.e. start with a blank file descriptor table .
d103 1
a103 3
The parent process returns the process ID
.Pq PID
of the child process.
@


