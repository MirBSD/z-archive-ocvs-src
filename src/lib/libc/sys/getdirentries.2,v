head	1.1;
branch	1.1.1;
access;
symbols
	tg-mergetmp-mirosx-1:1.1.1.4
	tg-mergefixes-1-branch:1.1.1.4.0.4
	tg-mergefixes-1-base:1.1.1.4
	MIROS_X:1.1.1.4.0.2
	MIROS_X_BASE:1.1.1.4
	tg-mergetmp-3:1.1.1.4
	MIRBSD_XP_MIRPPC:1.1.1.3.0.10
	cvs-200410261945:1.1.1.4
	MIRBSD_XP_SPARC_BASE:1.1.1.3
	MIRBSD_XP_SPARC:1.1.1.3.0.8
	cvs-200406230735:1.1.1.3
	MIRBSD_7quater:1.1.1.3
	cvs-200405160640:1.1.1.3
	cvs-200402042200:1.1.1.3
	cvs-200401271800:1.1.1.3
	cvs-200401261630:1.1.1.3
	cvs-200401021645:1.1.1.3
	MIRBSD_7_ALPHA:1.1.1.3.0.6
	MIRBSD_7:1.1.1.3.0.4
	cvs-200312222040:1.1.1.3
	MIRBSD_7ter:1.1.1.3
	MIRBSD_7_DEV:1.1.1.3.0.2
	cvs-200310020700:1.1.1.3
	cvs-200309271030:1.1.1.3
	cvs-200309261655:1.1.1.3
	cvs-200309251530:1.1.1.3
	cvs-200308302005:1.1.1.3
	cvs-200308171200:1.1.1.3
	ctm-3496:1.1.1.3
	ctm-3449:1.1.1.3
	ctm-3437:1.1.1.3
	cvs-200307191805:1.1.1.3
	ctm-3425:1.1.1.3
	cvs-200307091500:1.1.1.3
	ctm-3389:1.1.1.3
	cvs-200306291430:1.1.1.2
	ctm-3341:1.1.1.2
	MIRBSD_5:1.1.1.2
	cvs-200306082100:1.1.1.2
	ctm-3316:1.1.1.2
	ctm-3272:1.1.1.1
	ctm-3264:1.1.1.1
	cvs-200305071630:1.1.1.1
	ctm-3255:1.1.1.1
	ctm-3229:1.1.1.1
	MIRBSD_4:1.1.1.1
	ctm-3203:1.1.1.1
	cvs-20030410-1130:1.1.1.1
	ctm-3155:1.1.1.1
	ctm-3132:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@.\" @;


1.1
date	2003.03.22.17.46.30;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.03.22.17.46.30;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2003.06.05.17.25.08;	author tg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2003.07.06.15.34.30;	author tg;	state Stab;
branches;
next	1.1.1.4;

1.1.1.4
date	2004.10.26.19.59.43;	author tg;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@.\"	$OpenBSD: getdirentries.2,v 1.12 2002/08/09 09:29:50 pjanzen Exp $
.\"	$NetBSD: getdirentries.2,v 1.7 1995/10/12 15:40:50 jtc Exp $
.\"
.\" Copyright (c) 1989, 1991, 1993
.\"	The Regents of the University of California.  All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. All advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"	This product includes software developed by the University of
.\"	California, Berkeley and its contributors.
.\" 4. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.\"	@@(#)getdirentries.2	8.1 (Berkeley) 6/9/93
.\"
.Dd June 9, 1993
.Dt GETDIRENTRIES 2
.Os
.Sh NAME
.Nm getdirentries
.Nd "get directory entries in a filesystem independent format"
.Sh SYNOPSIS
.Fd #include <dirent.h>
.Ft int
.Fn getdirentries "int fd" "char *buf" "int nbytes" "long *basep"
.Sh DESCRIPTION
.Fn getdirentries
reads directory entries from the directory
referenced by the file descriptor
.Fa fd
into the buffer pointed to by
.Fa buf ,
in a filesystem independent format.
Up to
.Fa nbytes
of data will be transferred.
.Fa nbytes
must be greater than or equal to the
block size associated with the file (see
.Xr stat 2 ) .
Some filesystems may not support
.Fn getdirentries
with buffers smaller than this size.
.Pp
The data in the buffer is a series of
.Em dirent
structures each containing the following entries:
.Bd -literal -offset indent
unsigned long	d_fileno;
unsigned short	d_reclen;
unsigned short	d_namlen;
char    	d_name[MAXNAMELEN + 1]; /* see below */
.Ed
.Pp
The
.Fa d_fileno
entry is a number which is unique for each distinct file in the filesystem.
Files that are linked by hard links (see
.Xr link 2 )
have the same
.Fa d_fileno .
The
.Fa d_reclen
entry is the length, in bytes, of the directory record.
The
.Fa d_name
entry contains a null-terminated file name.
The
.Fa d_namlen
entry specifies the length of the file name excluding the null byte.
Thus the actual size of
.Fa d_name
may vary from 1 to
.Dv MAXNAMELEN
\&+ 1.
.Pp
Entries may be separated by extra space.
The
.Fa d_reclen
entry may be used as an offset from the start of a
.Fa dirent
structure to the next structure, if any.
.Pp
Invalid entries with
.Fa d_fileno
set to 0 may be returned among regular entries.
.Pp
The actual number of bytes transferred is returned.
The current position pointer associated with
.Fa fd
is set to point to the next block of entries.
The pointer may not advance by the number of bytes returned by
.Fn getdirentries .
A value of zero is returned when
the end of the directory has been reached.
.Pp
.Fn getdirentries
writes the position of the block read into the location pointed to by
.Fa basep .
Alternatively, the current position pointer may be set and retrieved by
.Xr lseek 2 .
The current position pointer should only be set to a value returned by
.Xr lseek 2 ,
a value returned in the location pointed to by
.Fa basep ,
or zero.
.Sh RETURN VALUES
If successful, the number of bytes actually transferred is returned.
Otherwise, \-1 is returned and the global variable
.Va errno
is set to indicate the error.
.Sh ERRORS
.Fn getdirentries
will fail if:
.Bl -tag -width Er
.It Bq Er EBADF
.Fa fd
is not a valid file descriptor open for reading.
.It Bq Er EFAULT
Either
.Fa buf
or
.Fa basep
points outside the allocated address space.
.It Bq Er EINVAL
The file referenced by
.Fa fd
is not a directory, or
.Fa nbytes
is too small for returning a directory entry or block of entries,
or the current position pointer is invalid.
.It Bq Er EIO
An
.Tn I/O
error occurred while reading from or writing to the file system.
.El
.Sh SEE ALSO
.Xr lseek 2 ,
.Xr open 2
.Sh HISTORY
The
.Fn getdirentries
function first appeared in
.Bx 4.4 .
@


1.1.1.1
log
@Import OpenBSD 3.3 source repository from CTM 3132 the first time
This opens an OpenBSD-mirabile (aka MirBSD) repository.

### MirBSD is:
# Copyright (c) 1982-2003 by Thorsten "mirabile" Glaser <x86@@ePost.de>
# Copyright © 1968-2003  The authors of And contributors to UNIX®, the
#       C Language, BSD/Berkeley Unix; 386BSD, NetBSD 1.1 and OpenBSD.
#
# Anyone who obtained a copy of this work is hereby permitted to freely use,
# distribute, modify, merge, sublicence, give away or sell it as long as the
# authors are given due credit and the following notice is retained:
#
# This work is provided "as is", with no explicit or implicit warranty what-
# soever. Use it only at your own risk. In no event may an author or contri-
# butor be held liable for any damage, directly or indirectly, that origina-
# ted through or is caused by creation or modification of this work.

MirBSD is my private tree. MirBSD does not differ very much from OpenBSD
and intentionally tracks OpenBSD. That's why it _is_ OpenBSD, just not the
official one. It's like with DarrenBSD.

At time of this writing, no advertising for MirBSD must be done,
because the advertising clause has not yet been sorted out.

http://templeofhate.com/tglaser/MirBSD/index.php
@
text
@@


1.1.1.2
log
@Import latest OpenBSD CVS tree by CTM in order
to sync the base system and ports tree with Them.

This includes the recent licence changes as well - by
importing the changed base and re-applying the diffs
(with cvs up -j -j) they are inherited, and we're not
bound to the removed clauses any longer.
@
text
@d1 1
a1 1
.\"	$OpenBSD: getdirentries.2,v 1.13 2003/06/02 20:18:39 millert Exp $
d15 5
a19 1
.\" 3. Neither the name of the University nor the names of its contributors
@


1.1.1.3
log
@Import OpenBSD base system minus kerberos from CTM,
kernel source from CVS right now (no diffs though)
@
text
@d1 1
a1 1
.\"	$OpenBSD: getdirentries.2,v 1.14 2003/07/04 22:07:45 millert Exp $
d66 3
a68 4
u_int32_t	d_fileno;
u_int16_t	d_reclen;
u_int8_t	d_type;
u_int8_t	d_namlen;
a81 1
.Pp
d83 2
a84 13
.Fa d_type
is the type of file, where the following are possible types:
.Dv DT_UNKNOWN ,
.Dv DT_FIFO ,
.Dv DT_CHR ,
.Dv DT_DIR ,
.Dv DT_BLK ,
.Dv DT_REG ,
.Dv DT_LNK ,
.Dv DT_SOCK ,
and
.Dv DT_WHT .
.Pp
d87 1
a87 1
entry specifies the length of the file name excluding the NUL byte.
a93 4
The
.Fa d_name
entry contains a NUL-terminated file name.
.Pp
d156 1
a156 2
.Xr open 2 ,
.Xr dirent 5
@


1.1.1.4
log
@ready to merge the rest now
@
text
@d1 1
a1 1
.\"	$OpenBSD: getdirentries.2,v 1.17 2004/10/03 00:11:26 jmc Exp $
d70 1
a70 1
char    	d_name[MAXNAMLEN + 1]; /* see below */
d104 1
a104 1
.Dv MAXNAMLEN
d128 2
a142 2
A value of zero is returned when
the end of the directory has been reached.
a145 34
.Sh EXAMPLES
The following code may be used to iterate on all entries in a
directory:
.Bd -literal -offset indent
char *buf, *ebuf, *cp;
long base;
size_t bufsize;
int fd, nbytes;
char *path;
struct stat sb;
struct dirent *dp;

if ((fd = open(path, O_RDONLY)) < 0)
	err(2, "cannot open %s", path);
if (fstat(fd, &sb) < 0)
	err(2, "fstat");
bufsize = sb.st_size;
if (bufsize < sb.st_blksize)
	bufsize = sb.st_blksize;
if ((buf = malloc(bufsize)) == NULL)
	err(2,  "cannot malloc %lu bytes", (unsigned long)bufsize);
while ((nbytes = getdirentries(fd, buf, bufsize, &base)) > 0) {
	ebuf = buf + nbytes;
	cp = buf;
	while (cp < ebuf) {
		dp = (struct dirent *)cp;
		printf("%\en", dp->d_name);
		cp += dp->d_reclen;
	}
}
if (nbytes < 0)
	err(2, "getdirentries");
free(buf);
.Ed
a173 1
.Xr opendir 3 ,
@


