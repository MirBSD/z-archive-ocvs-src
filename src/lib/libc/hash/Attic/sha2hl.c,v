head	1.2;
access;
symbols
	MIRBSD_7quater:1.1.1.1
	cvs-200402042200:1.1.1.1
	cvs-200401271800:1.1.1.1
	cvs-200401261630:1.1.1.1
	cvs-200401021645:1.1.1.1
	MIRBSD_7_ALPHA:1.1.1.1.0.6
	MIRBSD_7:1.1.1.1.0.4
	cvs-200312222040:1.1.1.1
	MIRBSD_7ter:1.1.1.1
	MIRBSD_7_DEV:1.1.1.1.0.2
	cvs-200310020700:1.1.1.1
	cvs-200309271030:1.1.1.1
	cvs-200309261655:1.1.1.1
	cvs-200309251530:1.1.1.1
	cvs-200308302005:1.1.1.1
	cvs-200308171200:1.1.1.1
	ctm-3496:1.1.1.1
	ctm-3449:1.1.1.1
	ctm-3437:1.1.1.1
	cvs-200307191805:1.1.1.1
	ctm-3425:1.1.1.1
	cvs-200307091500:1.1.1.1
	ctm-3389:1.1.1.1
	cvs-200306291430:1.1.1.1
	ctm-3341:1.1.1.1
	MIRBSD_5:1.1.1.1
	cvs-200306082100:1.1.1.1
	ctm-3316:1.1.1.1
	ctm-3272:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.2
date	2004.05.23.16.49.17;	author tg;	state dead;
branches;
next	1.1;

1.1
date	2003.05.21.18.57.50;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.05.21.18.57.50;	author tg;	state Exp;
branches;
next	;


desc
@@


1.2
log
@merge libs except libssl
@
text
@/* sha2hl.c
 * ----------------------------------------------------------------------------
 * "THE BEER-WARE LICENSE" (Revision 42):
 * <phk@@login.dkuug.dk> wrote this file.  As long as you retain this notice you
 * can do whatever you want with this stuff. If we meet some day, and you think
 * this stuff is worth it, you can buy me a beer in return.   Poul-Henning Kamp
 * ----------------------------------------------------------------------------
 */

#if defined(LIBC_SCCS) && !defined(lint)
static const char rcsid[] = "$OpenBSD: sha2hl.c,v 1.2 2003/05/09 16:46:31 millert Exp $";
#endif /* LIBC_SCCS and not lint */

#include <sys/types.h>

#include <errno.h>
#include <fcntl.h>
#include <sha2.h>
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <unistd.h>

static const char hex[]="0123456789abcdef";

/* ARGSUSED */
char *
SHA256_End(SHA256_CTX *ctx, char buf[SHA256_DIGEST_STRING_LENGTH])
{
    int i;
    u_int8_t digest[SHA256_DIGEST_LENGTH];

    if (buf == NULL && (buf = malloc(SHA256_DIGEST_STRING_LENGTH)) == NULL)
	return(NULL);

    SHA256_Final(digest, ctx);
    for (i = 0; i < SHA256_DIGEST_LENGTH; i++) {
	buf[i + i] = hex[digest[i] >> 4];
	buf[i + i + 1] = hex[digest[i] & 0x0f];
    }
    buf[i + i] = '\0';
    memset(digest, 0, sizeof(digest));
    return(buf);
}

char *
SHA256_File(char *filename, char buf[SHA256_DIGEST_STRING_LENGTH])
{
    u_int8_t buffer[BUFSIZ];
    SHA256_CTX ctx;
    int fd, num, oerrno;

    SHA256_Init(&ctx);

    if ((fd = open(filename, O_RDONLY)) < 0)
	return(0);

    while ((num = read(fd, buffer, sizeof(buffer))) > 0)
	SHA256_Update(&ctx, buffer, num);

    oerrno = errno;
    close(fd);
    errno = oerrno;
    return(num < 0 ? 0 : SHA256_End(&ctx, buf));
}

char *
SHA256_Data(const u_int8_t *data, size_t len, char buf[SHA256_DIGEST_STRING_LENGTH])
{
    SHA256_CTX ctx;

    SHA256_Init(&ctx);
    SHA256_Update(&ctx, data, len);
    return(SHA256_End(&ctx, buf));
}

/* ARGSUSED */
char *
SHA384_End(SHA384_CTX *ctx, char buf[SHA384_DIGEST_STRING_LENGTH])
{
    int i;
    u_int8_t digest[SHA384_DIGEST_LENGTH];

    if (buf == NULL && (buf = malloc(SHA384_DIGEST_STRING_LENGTH)) == NULL)
	return(NULL);

    SHA384_Final(digest, ctx);
    for (i = 0; i < SHA384_DIGEST_LENGTH; i++) {
	buf[i + i] = hex[digest[i] >> 4];
	buf[i + i + 1] = hex[digest[i] & 0x0f];
    }
    buf[i + i] = '\0';
    memset(digest, 0, sizeof(digest));
    return(buf);
}

char *
SHA384_File(char *filename, char buf[SHA384_DIGEST_STRING_LENGTH])
{
    u_int8_t buffer[BUFSIZ];
    SHA384_CTX ctx;
    int fd, num, oerrno;

    SHA384_Init(&ctx);

    if ((fd = open(filename, O_RDONLY)) < 0)
	return(0);

    while ((num = read(fd, buffer, sizeof(buffer))) > 0)
	SHA384_Update(&ctx, buffer, num);

    oerrno = errno;
    close(fd);
    errno = oerrno;
    return(num < 0 ? 0 : SHA384_End(&ctx, buf));
}

char *
SHA384_Data(const u_int8_t *data, size_t len, char buf[SHA384_DIGEST_STRING_LENGTH])
{
    SHA384_CTX ctx;

    SHA384_Init(&ctx);
    SHA384_Update(&ctx, data, len);
    return(SHA384_End(&ctx, buf));
}

/* ARGSUSED */
char *
SHA512_End(SHA512_CTX *ctx, char buf[SHA512_DIGEST_STRING_LENGTH])
{
    int i;
    u_int8_t digest[SHA512_DIGEST_LENGTH];

    if (buf == NULL && (buf = malloc(SHA512_DIGEST_STRING_LENGTH)) == NULL)
	return(NULL);

    SHA512_Final(digest, ctx);
    for (i = 0; i < SHA512_DIGEST_LENGTH; i++) {
	buf[i + i] = hex[digest[i] >> 4];
	buf[i + i + 1] = hex[digest[i] & 0x0f];
    }
    buf[i + i] = '\0';
    memset(digest, 0, sizeof(digest));
    return(buf);
}

char *
SHA512_File(char *filename, char buf[SHA512_DIGEST_STRING_LENGTH])
{
    u_int8_t buffer[BUFSIZ];
    SHA512_CTX ctx;
    int fd, num, oerrno;

    SHA512_Init(&ctx);

    if ((fd = open(filename, O_RDONLY)) < 0)
	return(0);

    while ((num = read(fd, buffer, sizeof(buffer))) > 0)
	SHA512_Update(&ctx, buffer, num);

    oerrno = errno;
    close(fd);
    errno = oerrno;
    return(num < 0 ? 0 : SHA512_End(&ctx, buf));
}

char *
SHA512_Data(const u_int8_t *data, size_t len, char buf[SHA512_DIGEST_STRING_LENGTH])
{
    SHA512_CTX ctx;

    SHA512_Init(&ctx);
    SHA512_Update(&ctx, data, len);
    return(SHA512_End(&ctx, buf));
}
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Sync MirBSD main source tree against OpenBSD-current,
which should be fairly stable after the Hackathon now.
@
text
@@
