head	1.1;
branch	1.1.1;
access;
symbols
	tg-mergetmp-mirosx-1:1.1.1.6
	tg-mergefixes-1-branch:1.1.1.6.0.8
	tg-mergefixes-1-base:1.1.1.6
	MIROS_X:1.1.1.6.0.6
	MIROS_X_BASE:1.1.1.6
	tg-mergetmp-3:1.1.1.6
	MIRBSD_XP_MIRPPC:1.1.1.6.0.4
	MIRBSD_XP_SPARC_BASE:1.1.1.6
	MIRBSD_XP_SPARC:1.1.1.6.0.2
	cvs-200406230735:1.1.1.6
	MIRBSD_7quater:1.1.1.4
	cvs-200405160640:1.1.1.5
	cvs-200402042200:1.1.1.4
	cvs-200401271800:1.1.1.4
	cvs-200401261630:1.1.1.4
	cvs-200401021645:1.1.1.4
	MIRBSD_7_ALPHA:1.1.1.4.0.6
	MIRBSD_7:1.1.1.4.0.4
	cvs-200312222040:1.1.1.4
	MIRBSD_7ter:1.1.1.4
	MIRBSD_7_DEV:1.1.1.4.0.2
	cvs-200310020700:1.1.1.4
	cvs-200309271030:1.1.1.4
	cvs-200309261655:1.1.1.4
	cvs-200309251530:1.1.1.4
	cvs-200308302005:1.1.1.4
	cvs-200308171200:1.1.1.4
	ctm-3496:1.1.1.4
	ctm-3449:1.1.1.4
	ctm-3437:1.1.1.4
	cvs-200307191805:1.1.1.4
	ctm-3425:1.1.1.4
	cvs-200307091500:1.1.1.4
	ctm-3389:1.1.1.4
	cvs-200306291430:1.1.1.4
	ctm-3341:1.1.1.3
	MIRBSD_5:1.1.1.2
	cvs-200306082100:1.1.1.2
	ctm-3316:1.1.1.2
	ctm-3272:1.1.1.1
	ctm-3264:1.1.1.1
	cvs-200305071630:1.1.1.1
	ctm-3255:1.1.1.1
	ctm-3229:1.1.1.1
	MIRBSD_4:1.1.1.1
	ctm-3203:1.1.1.1
	cvs-20030410-1130:1.1.1.1
	ctm-3155:1.1.1.1
	ctm-3132:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@.\" @;


1.1
date	2003.03.22.17.46.18;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.03.22.17.46.18;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2003.06.05.17.24.35;	author tg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2003.06.19.12.37.42;	author tg;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2003.06.29.17.22.16;	author tg;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2004.05.16.09.18.22;	author tg;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2004.06.23.07.41.04;	author tg;	state Stab;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@.\"	$OpenBSD: rmd160.3,v 1.16 2001/10/01 22:12:14 markus Exp $
.\"
.\" Copyright (c) 1997 Todd C. Miller <Todd.Miller@@courtesan.com>
.\" All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. The name of the author may not be used to endorse or promote products
.\"    derived from this software without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES,
.\" INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
.\" AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL
.\" THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
.\" EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
.\" PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
.\" OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
.\" WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
.\" OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
.\" ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
.\"
.\" See http://www.esat.kuleuven.ac.be/~bosselae/ripemd160.html
.\"	for detailed information about RIPEMD-160.
.\"
.Dd July 16, 1997
.Dt RMD160 3
.Os
.Sh NAME
.Nm RMD160Init ,
.Nm RMD160Update ,
.Nm RMD160Final ,
.Nm RMD160Transform ,
.Nm RMD160End ,
.Nm RMD160File ,
.Nm RMD160Data
.Nd calculate the ``RIPEMD-160'' message digest
.Sh SYNOPSIS
.Fd #include <sys/types.h>
.Fd #include <rmd160.h>
.Ft void
.Fn RMD160Init "RMD160_CTX *context"
.Ft void
.Fn RMD160Update "RMD160_CTX *context" "const u_char *data" "u_int32_t nbytes"
.Ft void
.Fn RMD160Final "u_char digest[20]" "RMD160_CTX *context"
.Ft void
.Fn RMD160Transform "u_int32_t state[5]" "const u_char block[64]"
.Ft "char *"
.Fn RMD160End "RMD160_CTX *context" "char *buf"
.Ft "char *"
.Fn RMD160File "char *filename" "char *buf"
.Ft "char *"
.Fn RMD160Data "u_char *data" "size_t len" "char *buf"
.Sh DESCRIPTION
The RMD160 functions implement the 160-bit RIPE message digest hash algorithm
(RMD-160).
RMD-160 is used to generate a condensed representation
of a message called a message digest.
The algorithm takes a
message less than 2^64 bits as input and produces a 160-bit digest
suitable for use as a digital signature.
.Pp
The RMD160 functions are considered to be more secure than the
.Xr md4 3
and
.Xr md5 3
functions and at least as secure as the
.Xr sha1 3
function.
All share a similar interface.
.Pp
The
.Fn RMD160Init
function initializes a RMD160_CTX
.Ar context
for use with
.Fn RMD160Update ,
and
.Fn RMD160Final .
The
.Fn RMD160Update
function adds
.Ar data
of length
.Ar nbytes
to the RMD160_CTX specified by
.Ar context .
.Fn RMD160Final
is called when all data has been added via
.Fn RMD160Update
and stores a message digest in the
.Ar digest
parameter.
When a null pointer is passed to
.Fn RMD160Final
as first argument only the final padding will be applied and the
current context can still be used with
.Fn RMD160Update .
.Pp
The
.Fn RMD160Transform
function is used by
.Fn RMD160Update
to hash 512-bit blocks and forms the core of the algorithm.
Most programs should use the interface provided by
.Fn RMD160Init ,
.Fn RMD160Update
and
.Fn RMD160Final
instead of calling
.Fn RMD160Transform
directly.
.Pp
The
.Fn RMD160End
function is a front end for
.Fn RMD160Final
which converts the digest into an
.Tn ASCII
representation of the 160 bit digest in hexadecimal.
.Pp
The
.Fn RMD160File
function calculates the digest for a file and returns the result via
.Fn RMD160End .
If
.Fn RMD160File
is unable to open the file a NULL pointer is returned.
.Pp
The
.Fn RMD160Data
function
calculates the digest of an arbitrary string and returns the result via
.Fn RMD160End .
.Pp
For each of the
.Fn RMD160End ,
.Fn RMD160File ,
and
.Fn RMD160Data
functions the
.Ar buf
parameter should either be a string of at least 41 characters in
size or a NULL pointer.
In the latter case, space will be dynamically allocated via
.Xr malloc 3
and should be freed using
.Xr free 3
when it is no longer needed.
.Sh EXAMPLES
The follow code fragment will calculate the digest for
the string "abc" which is ``0x8eb208f7e05d987a9b044a8e98c6b087f15a0bfc''.
.Bd -literal -offset indent
RMD160_CTX rmd;
u_char results[20];
char *buf;
int n;

buf = "abc";
n = strlen(buf);
RMD160Init(&rmd);
RMD160Update(&rmd, (u_char *)buf, n);
RMD160Final(results, &rmd);

/* Print the digest as one long hex value */
printf("0x");
for (n = 0; n < 20; n++)
	printf("%02x", results[n]);
putchar('\en');
.Ed
.Pp
Alternately, the helper functions could be used in the following way:
.Bd -literal -offset indent
RMD160_CTX rmd;
u_char output[41];
char *buf = "abc";

printf("0x%s\en", RMD160Data(buf, strlen(buf), output));
.Ed
.Sh CAVEATS
If a message digest is to be copied to a multi-byte type (ie:
an array of five 32-bit integers) it will be necessary to
perform byte swapping on little endian machines such as the i386, alpha,
and vax.
.Sh AUTHORS
This implementation of RMD-160 was written by Markus Friedl.
.Pp
The
.Fn RMD160End ,
.Fn RMD160File ,
and
.Fn RMD160Data
helper functions are derived from code written by Poul-Henning Kamp.
.Sh SEE ALSO
.Xr rmd160 1 ,
.Xr md4 3 ,
.Xr md5 3 ,
.Xr sha1 3
.Rs
.%A H. Dobbertin, A. Bosselaers, B. Preneel
.%T RIPEMD-160, a strengthened version of RIPEMD
.Re
.Rs
.%T Information technology - Security techniques - Hash-functions - Part 3: Dedicated hash-functions
.%O ISO/IEC 10118-3
.Re
.Rs
.%A H. Dobbertin, A. Bosselaers, B. Preneel
.%T The RIPEMD-160 cryptographic hash function
.%J Dr. Dobb's Journal
.%V Vol. 22, No. 1
.%D January 1997
.%P pp. 24-28
.Re
.Sh HISTORY
The RMD-160 functions appeared in
.Ox 2.1 .
@


1.1.1.1
log
@Import OpenBSD 3.3 source repository from CTM 3132 the first time
This opens an OpenBSD-mirabile (aka MirBSD) repository.

### MirBSD is:
# Copyright (c) 1982-2003 by Thorsten "mirabile" Glaser <x86@@ePost.de>
# Copyright © 1968-2003  The authors of And contributors to UNIX®, the
#       C Language, BSD/Berkeley Unix; 386BSD, NetBSD 1.1 and OpenBSD.
#
# Anyone who obtained a copy of this work is hereby permitted to freely use,
# distribute, modify, merge, sublicence, give away or sell it as long as the
# authors are given due credit and the following notice is retained:
#
# This work is provided "as is", with no explicit or implicit warranty what-
# soever. Use it only at your own risk. In no event may an author or contri-
# butor be held liable for any damage, directly or indirectly, that origina-
# ted through or is caused by creation or modification of this work.

MirBSD is my private tree. MirBSD does not differ very much from OpenBSD
and intentionally tracks OpenBSD. That's why it _is_ OpenBSD, just not the
official one. It's like with DarrenBSD.

At time of this writing, no advertising for MirBSD must be done,
because the advertising clause has not yet been sorted out.

http://templeofhate.com/tglaser/MirBSD/index.php
@
text
@@


1.1.1.2
log
@Import latest OpenBSD CVS tree by CTM in order
to sync the base system and ports tree with Them.

This includes the recent licence changes as well - by
importing the changed base and re-applying the diffs
(with cvs up -j -j) they are inherited, and we're not
bound to the removed clauses any longer.
@
text
@d1 1
a1 1
.\"	$OpenBSD: rmd160.3,v 1.18 2003/06/03 01:52:39 millert Exp $
d4 1
d6 10
a15 3
.\" Permission to use, copy, modify, and distribute this software for any
.\" purpose with or without fee is hereby granted, provided that the above
.\" copyright notice and this permission notice appear in all copies.
d17 10
a26 7
.\" THE SOFTWARE IS PROVIDED "AS IS" AND TODD C. MILLER DISCLAIMS ALL
.\" WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES
.\" OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL TODD C. MILLER BE LIABLE
.\" FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
.\" WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION
.\" OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN
.\" CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
d186 14
a223 14
.Sh AUTHORS
This implementation of RMD-160 was written by Markus Friedl.
.Pp
The
.Fn RMD160End ,
.Fn RMD160File ,
and
.Fn RMD160Data
helper functions are derived from code written by Poul-Henning Kamp.
.Sh CAVEATS
If a message digest is to be copied to a multi-byte type (ie:
an array of five 32-bit integers) it will be necessary to
perform byte swapping on little endian machines such as the i386, alpha,
and vax.
@


1.1.1.3
log
@sync with OpenBSD, this gives us a fair amount of fixes
@
text
@d1 1
a1 1
.\"	$OpenBSD: rmd160.3,v 1.19 2003/06/17 21:56:23 millert Exp $
d9 7
a15 7
.\" THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
.\" WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
.\" MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
.\" ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
.\" WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
.\" ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
.\" OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
@


1.1.1.4
log
@the previous cvs import did not finish due to 'memory fault'
sync with OpenBSD-cvs
@
text
@d1 1
a1 1
.\"	$OpenBSD: rmd160.3,v 1.20 2003/06/25 19:33:34 deraadt Exp $
d48 1
a48 1
.Fn RMD160Data "const u_char *data" "size_t len" "char *buf"
@


1.1.1.5
log
@large-scale import of OpenBSD 3.5-current source base including many fixes
note: from now, we will not be binary compatible with OpenBSD apps any
longer (due to syscall numbering differences); both an OpenBSD compat and
a conversion tool for old MirOS #7 apps will be delivered later.

The src/ tree is locked from now.
@
text
@d1 1
a1 1
.\"	$OpenBSD: rmd160.3,v 1.24 2004/05/03 17:30:14 millert Exp $
d3 1
a3 1
.\" Copyright (c) 1997, 2004 Todd C. Miller <Todd.Miller@@courtesan.com>
d20 1
a20 1
.Dd April 29, 2004
a25 1
.Nm RMD160Pad ,
a29 1
.Nm RMD160FileChunk ,
d38 1
a38 1
.Fn RMD160Update "RMD160_CTX *context" "const u_int8_t *data" "u_int32_t nbytes"
d40 1
a40 1
.Fn RMD160Pad "RMD160_CTX *context"
d42 1
a42 3
.Fn RMD160Final "u_int8_t digest[RMD160_DIGEST_LENGTH]" "RMD160_CTX *context"
.Ft void
.Fn RMD160Transform "u_int32_t state[5]" "const u_int8_t block[RMD160_BLOCK_LENGTH]"
d48 1
a48 3
.Fn RMD160FileChunk "char *filename" "char *buf" "off_t offset" "off_t length"
.Ft "char *"
.Fn RMD160Data "const u_int8_t *data" "size_t len" "char *buf"
d89 4
a92 6
.Pp
The
.Fn RMD160Pad
function can be used to apply padding to the message digest as in
.Fn RMD160Final ,
but the current context can still be used with
a124 17
.Fn RMD160FileChunk
behaves like
.Fn RMD160File
but calculates the digest only for that portion of the file starting at
.Fa offset
and continuing for
.Fa length
bytes or until end of file is reached, whichever comes first.
A zero
.Fa length
can be specified to read until end of file.
A negative
.Fa length
or
.Fa offset
will be ignored.
.Pp
d150 1
a150 1
u_int8_t results[RMD160_DIGEST_LENGTH];
d157 1
a157 1
RMD160Update(&rmd, (u_int8_t *)buf, n);
d162 1
a162 1
for (n = 0; n < RMD160_DIGEST_LENGTH; n++)
d170 1
a170 1
u_int8_t output[RMD160_DIGEST_STRING_LENGTH];
d179 1
a179 2
.Xr sha1 3 ,
.Xr sha2 3
a204 1
.Fn RMD160FileChunk ,
@


1.1.1.6
log
@OpenBSD libc as of today
@
text
@d1 1
a1 1
.\"	$OpenBSD: rmd160.3,v 1.26 2004/06/22 01:57:29 jfb Exp $
d50 1
a50 1
.Fn RMD160File "const char *filename" "char *buf"
d52 1
a52 1
.Fn RMD160FileChunk "const char *filename" "char *buf" "off_t offset" "off_t length"
a200 1
.Xr cksum 1 ,
@


