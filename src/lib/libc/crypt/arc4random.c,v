head	1.4;
access;
symbols
	tg-mergetmp-mirosx-1:1.4
	tg-mergefixes-1-branch:1.4.0.8
	tg-mergefixes-1-base:1.4
	MIROS_X:1.4.0.6
	MIROS_X_BASE:1.4
	tg-mergetmp-3:1.4
	MIRBSD_XP_MIRPPC:1.4.0.4
	MIRBSD_XP_SPARC_BASE:1.4
	MIRBSD_XP_SPARC:1.4.0.2
	cvs-200406230735:1.1.1.4
	MIRBSD_7quater:1.1.1.3
	cvs-200405160640:1.1.1.4
	cvs-200402042200:1.1.1.4
	cvs-200401271800:1.1.1.4
	cvs-200401261630:1.1.1.4
	cvs-200401021645:1.1.1.4
	MIRBSD_7_ALPHA:1.1.1.3.0.6
	MIRBSD_7:1.1.1.3.0.4
	cvs-200312222040:1.1.1.4
	MIRBSD_7ter:1.1.1.3
	MIRBSD_7_DEV:1.1.1.3.0.2
	cvs-200310020700:1.1.1.3
	cvs-200309271030:1.1.1.3
	cvs-200309261655:1.1.1.3
	cvs-200309251530:1.1.1.3
	cvs-200308302005:1.1.1.3
	cvs-200308171200:1.1.1.3
	ctm-3496:1.1.1.2
	ctm-3449:1.1.1.2
	ctm-3437:1.1.1.2
	cvs-200307191805:1.1.1.2
	ctm-3425:1.1.1.2
	cvs-200307091500:1.1.1.2
	ctm-3389:1.1.1.2
	cvs-200306291430:1.1.1.2
	ctm-3341:1.1.1.2
	MIRBSD_5:1.1.1.1
	cvs-200306082100:1.1.1.1
	ctm-3316:1.1.1.1
	ctm-3272:1.1.1.1
	ctm-3264:1.1.1.1
	cvs-200305071630:1.1.1.1
	ctm-3255:1.1.1.1
	ctm-3229:1.1.1.1
	MIRBSD_4:1.1.1.1
	ctm-3203:1.1.1.1
	cvs-20030410-1130:1.1.1.1
	ctm-3155:1.1.1.1
	ctm-3132:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.4
date	2004.06.05.23.31.44;	author tg;	state Stab;
branches;
next	1.3;

1.3
date	2004.04.26.21.26.02;	author tg;	state Exp;
branches;
next	1.2;

1.2
date	2004.04.26.21.10.45;	author tg;	state Exp;
branches;
next	1.1;

1.1
date	2003.03.22.17.46.09;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.03.22.17.46.09;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2003.06.19.12.37.26;	author tg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2003.08.17.14.02.57;	author tg;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2003.12.22.21.06.04;	author tg;	state Exp;
branches;
next	;


desc
@@


1.4
log
@KNF, add RCS ID, clarify
@
text
@/* $MirBSD: src/lib/libc/crypt/arc4random.c,v 1.3 2004/04/26 21:26:02 tg Exp $ */
/* $OpenBSD: arc4random.c,v 1.10 2003/11/26 21:40:08 djm Exp $	*/

/*
 * Arc4 random number generator for OpenBSD.
 * Copyright 1996 David Mazieres <dm@@lcs.mit.edu>.
 *
 * Modification and redistribution in source and binary forms is
 * permitted provided that due credit is given to the author and the
 * OpenBSD project by leaving this copyright notice intact.
 */

/*
 * This code is derived from section 17.1 of Applied Cryptography,
 * second edition, which describes a stream cipher allegedly
 * compatible with RSA Labs "RC4" cipher (the actual description of
 * which is a trade secret).  The same algorithm is used as a stream
 * cipher called "arcfour" in Tatu Ylonen's ssh package.
 *
 * Here the stream cipher has been modified always to include the time
 * when initializing the state.  That makes it impossible to
 * regenerate the same random sequence twice, so this can't be used
 * for encryption, but will generate good random numbers.
 *
 * RC4 is a registered trademark of RSA Laboratories.
 */

#include <sys/param.h>
#include <sys/time.h>
#include <sys/sysctl.h>
#include <fcntl.h>
#include <stdlib.h>
#include <unistd.h>

__RCSID("$MirBSD$");

#ifdef __GNUC__
#define inline __inline
#else				/* !__GNUC__ */
#define inline
#endif				/* !__GNUC__ */

struct arc4_stream {
	u_int8_t i;
	u_int8_t j;
	u_int8_t s[256];
};

static int rs_initialized;
static struct arc4_stream rs;
static pid_t arc4_stir_pid;

static inline u_int8_t arc4_getbyte(struct arc4_stream *);

static inline void
arc4_init(struct arc4_stream *as)
{
	int     n;

	for (n = 0; n < 256; n++)
		as->s[n] = n;
	as->i = 0;
	as->j = 0;
}

static inline void
arc4_addrandom(struct arc4_stream *as, u_char *dat, int datlen)
{
	int     n;
	u_int8_t si;

	as->i--;
	for (n = 0; n < 256; n++) {
		as->i = (as->i + 1);
		si = as->s[as->i];
		as->j = (as->j + si + dat[n % datlen]);
		as->s[as->i] = as->s[as->j];
		as->s[as->j] = si;
	}
	as->j = as->i;
}

static void
arc4_stir(struct arc4_stream *as)
{
	int     i, mib[2];
	size_t	len;
	struct {
		struct timeval tv;
		u_int rnd[(128 - sizeof(struct timeval)) / sizeof(u_int)];
	}       rdat;

	gettimeofday(&rdat.tv, NULL);
	mib[0] = CTL_KERN;
	mib[1] = KERN_ARND;

	for (i = 0; i < sizeof(rdat.rnd) / sizeof(u_int); i ++) {
		len = sizeof(u_int);
		if (sysctl(mib, 2, &rdat.rnd[i], &len, NULL, 0) == -1)
			break;
	}

	arc4_stir_pid = getpid();
	arc4_addrandom(as, (void *) &rdat, sizeof(rdat));

	/*
	 * Discard early keystream, as per recommendations in:
	 * http://www.wisdom.weizmann.ac.il/~itsik/RC4/Papers/Rc4_ksa.ps
	 */
	for (i = 0; i < 256; i++)
		(void) arc4_getbyte(as);
}

static inline u_int8_t
arc4_getbyte(struct arc4_stream *as)
{
	u_int8_t si, sj;

	as->i = (as->i + 1);
	si = as->s[as->i];
	as->j = (as->j + si);
	sj = as->s[as->j];
	as->s[as->i] = sj;
	as->s[as->j] = si;
	return (as->s[(si + sj) & 0xff]);
}

static inline u_int32_t
arc4_getword(struct arc4_stream *as)
{
	u_int32_t val;
	val = arc4_getbyte(as) << 24;
	val |= arc4_getbyte(as) << 16;
	val |= arc4_getbyte(as) << 8;
	val |= arc4_getbyte(as);
	return val;
}

void
arc4random_stir(void)
{
	if (!rs_initialized) {
		arc4_init(&rs);
		rs_initialized = 1;
	}
	arc4_stir(&rs);
}

void
arc4random_addrandom(u_char *dat, int datlen)
{
	if (!rs_initialized)
		arc4random_stir();
	arc4_addrandom(&rs, dat, datlen);
}

u_int32_t
arc4random(void)
{
	if (!rs_initialized || arc4_stir_pid != getpid())
		arc4random_stir();
	return arc4_getword(&rs);
}

void
arc4random_push(int n)
{
	int     i, mib[2];
	size_t	len = sizeof(int);

	mib[0] = CTL_KERN;
	mib[1] = KERN_ARND;

	/* supply n to kernel and get back another random int */
	if (!sysctl(mib, 2, &i, &len, &n, sizeof(int)))
		/*
		 * do not add the n, but rather the kernel-supplied
		 * new random value to our local arc4 generator
		 */
		arc4_addrandom(&rs, (char *)&i, len);
}
@


1.3
log
@get rid of warnings and a typo of mine
@
text
@d1 1
a1 1
/* $MirBSD: src/lib/libc/crypt/arc4random.c,v 1.2 2004/04/26 21:10:45 tg Exp $ */
d28 3
d34 2
a35 4
#include <sys/types.h>
#include <sys/param.h>
#include <sys/time.h>
#include <sys/sysctl.h>
d169 1
a169 1
	size_t	len = sizeof (int);
d174 6
a179 1
	if (!sysctl(mib, 2, &i, &len, &n, sizeof (int)))
a181 21

#if 0
/*-------- Test code for i386 --------*/
#include <stdio.h>
#include <machine/pctr.h>
int
main(int argc, char **argv)
{
	const int iter = 1000000;
	int     i;
	pctrval v;

	v = rdtsc();
	for (i = 0; i < iter; i++)
		arc4random();
	v = rdtsc() - v;
	v /= iter;

	printf("%qd cycles\n", v);
}
#endif
@


1.2
log
@add arc4random_push() which uses sysctl(3) to push random data to the kernel
@
text
@d1 1
a1 1
/* $MirBSD$ */
d168 1
a168 1
	size_t	len = sizeof (int), ilen = sizeof (int);
d173 2
a174 2
	if (!sysctl(mib, 2, &i, &ilen, &n, &len))
		arc4_addrandom(&rs, &i, ilen);
@


1.1
log
@Initial revision
@
text
@d1 2
a2 1
/*	$OpenBSD: arc4random.c,v 1.7 2003/02/14 17:12:54 deraadt Exp $	*/
d52 2
d55 1
a55 2
arc4_init(as)
	struct arc4_stream *as;
d66 1
a66 4
arc4_addrandom(as, dat, datlen)
	struct arc4_stream *as;
	u_char *dat;
	int     datlen;
d83 1
a83 2
arc4_stir(as)
	struct arc4_stream *as;
d85 2
a86 1
	int     fd;
d93 7
a99 19
	fd = open("/dev/arandom", O_RDONLY);
	if (fd != -1) {
		read(fd, rdat.rnd, sizeof(rdat.rnd));
		close(fd);
	} else {
		int i, mib[2];
		size_t len;

		/* Device could not be opened, we might be chrooted, take
		 * randomness from sysctl. */

		mib[0] = CTL_KERN;
		mib[1] = KERN_ARND;

		for (i = 0; i < sizeof(rdat.rnd) / sizeof(u_int); i ++) {
			len = sizeof(u_int);
			if (sysctl(mib, 2, &rdat.rnd[i], &len, NULL, 0) == -1)
				break;
		}
a100 2
	/* fd < 0 or failed sysctl ?  Ah, what the heck. We'll just take
	 * whatever was on the stack... */
d104 7
d114 1
a114 2
arc4_getbyte(as)
	struct arc4_stream *as;
d128 1
a128 2
arc4_getword(as)
	struct arc4_stream *as;
d139 1
a139 1
arc4random_stir()
d149 1
a149 3
arc4random_addrandom(dat, datlen)
	u_char *dat;
	int     datlen;
d157 1
a157 1
arc4random()
d162 13
@


1.1.1.1
log
@Import OpenBSD 3.3 source repository from CTM 3132 the first time
This opens an OpenBSD-mirabile (aka MirBSD) repository.

### MirBSD is:
# Copyright (c) 1982-2003 by Thorsten "mirabile" Glaser <x86@@ePost.de>
# Copyright © 1968-2003  The authors of And contributors to UNIX®, the
#       C Language, BSD/Berkeley Unix; 386BSD, NetBSD 1.1 and OpenBSD.
#
# Anyone who obtained a copy of this work is hereby permitted to freely use,
# distribute, modify, merge, sublicence, give away or sell it as long as the
# authors are given due credit and the following notice is retained:
#
# This work is provided "as is", with no explicit or implicit warranty what-
# soever. Use it only at your own risk. In no event may an author or contri-
# butor be held liable for any damage, directly or indirectly, that origina-
# ted through or is caused by creation or modification of this work.

MirBSD is my private tree. MirBSD does not differ very much from OpenBSD
and intentionally tracks OpenBSD. That's why it _is_ OpenBSD, just not the
official one. It's like with DarrenBSD.

At time of this writing, no advertising for MirBSD must be done,
because the advertising clause has not yet been sorted out.

http://templeofhate.com/tglaser/MirBSD/index.php
@
text
@@


1.1.1.2
log
@sync with OpenBSD, this gives us a fair amount of fixes
@
text
@d1 1
a1 1
/*	$OpenBSD: arc4random.c,v 1.8 2003/06/11 21:03:10 deraadt Exp $	*/
d52 2
a53 1
arc4_init(struct arc4_stream *as)
d64 4
a67 1
arc4_addrandom(struct arc4_stream *as, u_char *dat, int datlen)
d84 2
a85 1
arc4_stir(struct arc4_stream *as)
d122 2
a123 1
arc4_getbyte(struct arc4_stream *as)
d137 2
a138 1
arc4_getword(struct arc4_stream *as)
d149 1
a149 1
arc4random_stir(void)
d159 3
a161 1
arc4random_addrandom(u_char *dat, int datlen)
d169 1
a169 1
arc4random(void)
@


1.1.1.3
log
@Import OpenBSD source tree from CVS (anoncvs canada)
of roughly 12:00 UTC today. Bumps us to OpenBSD 3.4
and makes source/ports in sync. Hopefully.
@
text
@d1 1
a1 1
/*	$OpenBSD: arc4random.c,v 1.9 2003/08/16 19:07:40 tedu Exp $	*/
d82 1
a82 2
	int     i, mib[2];
	size_t	len;
d89 19
a107 7
	mib[0] = CTL_KERN;
	mib[1] = KERN_ARND;

	for (i = 0; i < sizeof(rdat.rnd) / sizeof(u_int); i ++) {
		len = sizeof(u_int);
		if (sysctl(mib, 2, &rdat.rnd[i], &len, NULL, 0) == -1)
			break;
d109 2
@


1.1.1.4
log
@Time to import OpenBSD once again. Expect breakage.
@
text
@d1 1
a1 1
/*	$OpenBSD: arc4random.c,v 1.10 2003/11/26 21:40:08 djm Exp $	*/
a50 2
static inline u_int8_t arc4_getbyte(struct arc4_stream *);

a100 7

	/*
	 * Discard early keystream, as per recommendations in:
	 * http://www.wisdom.weizmann.ac.il/~itsik/RC4/Papers/Rc4_ksa.ps
	 */
	for (i = 0; i < 256; i++)
		(void) arc4_getbyte(as);
@


