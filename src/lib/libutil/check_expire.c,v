head	1.1;
branch	1.1.1;
access;
symbols
	tg-mergetmp-mirosx-1:1.1.1.3
	tg-mergefixes-1-branch:1.1.1.3.0.8
	tg-mergefixes-1-base:1.1.1.3
	MIROS_X:1.1.1.3.0.6
	MIROS_X_BASE:1.1.1.3
	tg-mergetmp-3:1.1.1.3
	MIRBSD_XP_MIRPPC:1.1.1.3.0.4
	MIRBSD_XP_SPARC_BASE:1.1.1.3
	MIRBSD_XP_SPARC:1.1.1.3.0.2
	MIRBSD_7quater:1.1.1.2
	cvs-200405160640:1.1.1.3
	cvs-200401271800:1.1.1.2
	cvs-200401261630:1.1.1.2
	cvs-200401021645:1.1.1.2
	MIRBSD_7_ALPHA:1.1.1.2.0.6
	MIRBSD_7:1.1.1.2.0.4
	cvs-200312222040:1.1.1.2
	MIRBSD_7ter:1.1.1.2
	MIRBSD_7_DEV:1.1.1.2.0.2
	cvs-200310020700:1.1.1.2
	cvs-200309271030:1.1.1.2
	cvs-200309251530:1.1.1.2
	cvs-200308302005:1.1.1.1
	cvs-200308171200:1.1.1.1
	ctm-3496:1.1.1.1
	ctm-3449:1.1.1.1
	ctm-3437:1.1.1.1
	cvs-200307191805:1.1.1.1
	ctm-3425:1.1.1.1
	cvs-200307091500:1.1.1.1
	ctm-3389:1.1.1.1
	cvs-200306291430:1.1.1.1
	ctm-3341:1.1.1.1
	MIRBSD_5:1.1.1.1
	cvs-200306082100:1.1.1.1
	ctm-3316:1.1.1.1
	ctm-3272:1.1.1.1
	ctm-3264:1.1.1.1
	cvs-200305071630:1.1.1.1
	ctm-3255:1.1.1.1
	MIRBSD_4:1.1.1.1
	ctm-3203:1.1.1.1
	cvs-20030410-1130:1.1.1.1
	ctm-3155:1.1.1.1
	ctm-3132:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.1
date	2003.03.22.17.47.56;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.03.22.17.47.56;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2003.09.25.16.31.16;	author tg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2004.05.16.09.37.39;	author tg;	state Stab;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@/*	$OpenBSD: check_expire.c,v 1.6 2002/06/09 22:18:43 fgsch Exp $	*/

/*
 * Copyright (c) 1997 Berkeley Software Design, Inc. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by Berkeley Software Design,
 *	Inc.
 * 4. The name of Berkeley Software Design, Inc.  may not be used to endorse
 *    or promote products derived from this software without specific prior
 *    written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY BERKELEY SOFTWARE DESIGN, INC. ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL BERKELEY SOFTWARE DESIGN, INC. BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	BSDI $From: check_expire.c,v 2.1 1997/08/08 18:38:25 prb Exp $
 */

#include <sys/types.h>

#include <errno.h>
#include <fcntl.h>
#include <pwd.h>
#include <signal.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <syslog.h>
#include <time.h>
#include <tzfile.h>
#include <login_cap.h>
#include <bsd_auth.h>

#include "util.h"

static char *pwd_update(struct passwd *);

int
login_check_expire(back, pwd, class, lastchance)
	FILE *back;
	struct passwd *pwd;
	char *class;
	int lastchance;
{
	auth_session_t *as;
	login_cap_t *lc;
	quad_t dead, expire, warn;
	char *p;

	if ((as = auth_open()) == NULL) {
		syslog(LOG_ERR, "failed to create auth session");
		return (1);
	}
	if (auth_setpwd(as, pwd) < 0) {
		syslog(LOG_ERR, "failed to set pwd entry in auth session");
		return (1);
	}

	expire = auth_check_change(as);
	auth_close(as);

	if (expire != 0) {
		fprintf(back, BI_VALUE " expire %qd\n", expire);

		if (class == NULL)
			class = pwd->pw_class;

		if ((lc = login_getclass(class)) == NULL) {
			dead = 0;
			warn = 0;
		} else {
			dead = login_getcaptime(lc, "password-dead", 0, 0);
			warn = login_getcaptime(lc, "password-warn",
			    2 * DAYSPERWEEK * SECSPERDAY,
			    2 * DAYSPERWEEK * SECSPERDAY);
			if (dead < 0) {
				syslog(LOG_ERR, "class %s password-dead is %qd",
					lc->lc_class, dead);
				dead = 0;
			}
			if (warn < 0) {
				syslog(LOG_ERR, "class %s password-warn is %qd",
					lc->lc_class, warn);
				warn = 0;
			}
		}
		login_close(lc);

		/*
		 * If their password is dead (expired longer than
		 * password-dead) then just reject them.  If it is
		 * expired but not dead yet, reject them with a
		 * PWEXPIRED so login knows they can still sort of
		 * get in.
		 */
		if (expire < -dead) {
			syslog(LOG_WARNING, "%s: dead password", pwd->pw_name);
			fprintf(back, BI_VALUE
			    " errormsg Your password has expired\n");
			fprintf(back, BI_REJECT "\n");
			return (1);
		}
		if (expire < 0) {
			if (lastchance) {
				endpwent();

				/*
				 * Only let them play this game once.
				 * Set their password change time to 1.
				 * This will most certainly cause any
				 * expired password to be dead, as well.
				 */
				pwd = pw_dup(pwd);
				pwd->pw_change = 1;
				p = pwd_update(pwd);
				memset(pwd->pw_passwd, 0,
				    strlen(pwd->pw_passwd));
				free(pwd);
				if (p != NULL) {
					fprintf(back, BI_VALUE " errormsg %s",
					    auth_mkvalue(p));
					fprintf(back, BI_REJECT "\n");
					return (1);
				}
			}
			syslog(LOG_WARNING, "%s: expired password", pwd->pw_name);
			fprintf(back, BI_VALUE
			    " errormsg Your password has expired\n");
			fprintf(back, BI_PWEXPIRED "\n");
			return (1);
		}

		/*
		 * If their password is not expired but is about to expire
		 * then warn them.
		 */
		if (expire <= warn) {
			fprintf(back, BI_VALUE
			    " warnmsg Your password expires on %s\n",
			    ctime(&pwd->pw_change));
		}
	}
	return (0);
}

static char *
pwd_update(pwd)
	struct passwd *pwd;
{
	int tfd, pfd;

	pw_init();
	tfd = pw_lock(0);
	if (tfd < 0) {
		if (errno == EEXIST)
			return("the passwd file is busy.");
		else
			return("can't open passwd temp file");
	}

	pfd = open(_PATH_MASTERPASSWD, O_RDONLY, 0);
	if (pfd < 0 || fcntl(pfd, F_SETFD, 1) == -1) {
		pw_abort();
		return(strerror(errno));
	}

	pw_copy(pfd, tfd, pwd);
	if (pw_mkdb(pwd->pw_name, 0) < 0) {
		pw_abort();
		return("unable to update password database");
	}

	return(NULL);
}
@


1.1.1.1
log
@Import OpenBSD 3.3 source repository from CTM 3132 the first time
This opens an OpenBSD-mirabile (aka MirBSD) repository.

### MirBSD is:
# Copyright (c) 1982-2003 by Thorsten "mirabile" Glaser <x86@@ePost.de>
# Copyright © 1968-2003  The authors of And contributors to UNIX®, the
#       C Language, BSD/Berkeley Unix; 386BSD, NetBSD 1.1 and OpenBSD.
#
# Anyone who obtained a copy of this work is hereby permitted to freely use,
# distribute, modify, merge, sublicence, give away or sell it as long as the
# authors are given due credit and the following notice is retained:
#
# This work is provided "as is", with no explicit or implicit warranty what-
# soever. Use it only at your own risk. In no event may an author or contri-
# butor be held liable for any damage, directly or indirectly, that origina-
# ted through or is caused by creation or modification of this work.

MirBSD is my private tree. MirBSD does not differ very much from OpenBSD
and intentionally tracks OpenBSD. That's why it _is_ OpenBSD, just not the
official one. It's like with DarrenBSD.

At time of this writing, no advertising for MirBSD must be done,
because the advertising clause has not yet been sorted out.

http://templeofhate.com/tglaser/MirBSD/index.php
@
text
@@


1.1.1.2
log
@Release Time. Synchronize with OpenBSD 3.4-current (base system).
@
text
@d1 1
a1 1
/*	$OpenBSD: check_expire.c,v 1.7 2003/09/02 16:55:32 markus Exp $	*/
a122 2
				struct passwd *npwd;

d131 6
a136 6
				npwd = pw_dup(pwd);
				npwd->pw_change = 1;
				p = pwd_update(npwd);
				memset(npwd->pw_passwd, 0,
				    strlen(npwd->pw_passwd));
				free(npwd);
@


1.1.1.3
log
@large-scale import of OpenBSD 3.5-current source base including many fixes
note: from now, we will not be binary compatible with OpenBSD apps any
longer (due to syscall numbering differences); both an OpenBSD compat and
a conversion tool for old MirOS #7 apps will be delivered later.

The src/ tree is locked from now.
@
text
@d1 1
a1 1
/*	$OpenBSD: check_expire.c,v 1.8 2004/04/20 23:21:23 millert Exp $	*/
d54 1
a54 1
static char *pwd_update(const struct passwd *, const struct passwd *);
d57 5
a61 1
login_check_expire(FILE *back, struct passwd *pwd, char *class, int lastchance)
d135 1
a135 1
				p = pwd_update(npwd, pwd);
d167 2
a168 1
pwd_update(const struct passwd *pwd, const struct passwd *opwd)
d187 1
a187 1
	pw_copy(pfd, tfd, pwd, opwd);
@


