head	1.4;
access;
symbols
	MIRBSD_5:1.3;
locks; strict;
comment	@ * @;


1.4
date	2003.07.06.00.56.10;	author tg;	state dead;
branches;
next	1.3;

1.3
date	2003.04.24.15.36.09;	author tg;	state Exp;
branches;
next	1.2;

1.2
date	2003.04.24.15.32.37;	author tg;	state Exp;
branches;
next	1.1;

1.1
date	2003.04.24.15.22.48;	author tg;	state Exp;
branches;
next	;


desc
@@


1.4
log
@switch the CSU system over to NetBSD style
@
text
@/*	$MirBSD: crtbegin.c,v 1.3 2003/04/24 15:36:09 tg Exp $	*/
/*	$NetBSD: crtbegin.c,v 1.20 2002/11/22 06:44:58 thorpej Exp $	*/
/*	$OpenBSD: crtbegin.c,v 1.6 2002/02/16 21:27:20 millert Exp $	*/
/*	$NetBSD: crtbegin.c,v 1.1 1996/09/12 16:59:03 cgd Exp $	*/
/*	$NetBSD: crti.c,v 1.2 2002/11/23 17:21:22 thorpej Exp $	*/
/*	$OpenBSD: os-note-elf.h,v 1.2 2001/02/03 23:00:38 art Exp $	*/

/************************************************************************/
/*
 * Contents:
 *
 *  long Name length
 *  long Description length
 *  long ELF_NOTE_TYPE_OSVERSION (1) XXX - need a define.
 *  "OpenBSD\0"
 *  version? 0 XXX
 */

__asm("	.section \".note.openbsd.ident\", \"a\"\n\t"
	".balign 4\n\t"

	".long	8\n\t"
	".long	4\n\t"
	".long	1\n\t"
	".ascii	\"OpenBSD\\0\"\n\t"
	".long	0\n\t"

	".balign 4\n\t");
/************************************************************************/

#if defined(LIBC_SCCS) && !defined(lint)
static const char rcsid[] = "$MirBSD: crtbegin.c,v 1.3 2003/04/24 15:36:09 tg Exp $";
#endif /* LIBC_SCCS and not lint */

/*
 * Copyright (c) 1993 Paul Kranenburg
 * Copyright (c) 1998, 2001, 2002 The NetBSD Foundation, Inc.
 * All rights reserved.
 *
 * This code is derived from software contributed to The NetBSD Foundation
 * by Paul Kranenburg, Ross Harvey, and Jason R. Thorpe.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed by Paul Kranenburg.
 *	This product includes software developed by the NetBSD
 *	Foundation, Inc. and its contributors.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#include <stdlib.h>
#include <sys/exec.h>
#include <sys/exec_elf.h>

/*
 * Run-time module for GNU C++ compiled shared libraries.
 *
 * The linker constructs the following arrays of pointers to global
 * constructors and destructors. The first element contains the
 * number of pointers in each.
 * The tables are also null-terminated.
 */

static void (*__CTOR_LIST__[1])(void)
    __attribute__((section(".ctors"))) = { (void *)-1 };	/* XXX */
static void (*__DTOR_LIST__[1])(void)
    __attribute__((section(".dtors"))) = { (void *)-1 };	/* XXX */

void init_fallthru(void);
void fini_fallthru(void);

void	_init(void) __attribute__((section(".init")));
void	_fini(void) __attribute__((section(".fini")));

void
_init(void)
{
	init_fallthru();
}

void
_fini(void)
{
	fini_fallthru();
}

#define	MD_SECTION_PROLOGUE(sect, entry_pt)	\
	__asm (					\
	".section "#sect",\"ax\",@@progbits	\n"\
	#entry_pt":				\n"\
	"	.align	16			\n"\
	"	/* fall thru */			\n"\
	".previous")
	/* placement of the .align _after_ the label is intentional */

MD_SECTION_PROLOGUE(.init, init_fallthru);
MD_SECTION_PROLOGUE(.fini, fini_fallthru);

#define MD_CALL_STATIC_FUNCTION(section, func) \
	__asm(".section " #section "; call " #func "; .previous");

static void
__dtors(void)
{
	unsigned long i = (unsigned long) __DTOR_LIST__[0];
	void (**p)(void);

	if (i == (unsigned long) -1)  {
		for (i = 1; __DTOR_LIST__[i] != NULL; i++)
			;
		i--;
	}
	p = __DTOR_LIST__ + i;
	while (i--)
		(**p--)();
}

static void
__ctors(void)
{
	void (**p)(void) = __CTOR_LIST__ + 1;

	while (*p)
		(**p++)();
}

static void __attribute__((__unused__))
__do_global_ctors_aux(void)
{
	static int initialized = 0;

	/*
	 * Call global constructors.
	 * Arrange to call global destructors at exit.
	 */
	if (!initialized) {
		initialized = 1;
		__ctors();
	}
}
MD_CALL_STATIC_FUNCTION(.init, __do_global_ctors_aux)

static void __attribute__((__unused__))
__do_global_dtors_aux(void)
{
	static int finished = 0;

	if (!finished) {
		finished = 1;
		/*
		 * Call global destructors.
		 */
		__dtors();
	}
}
MD_CALL_STATIC_FUNCTION(.fini, __do_global_dtors_aux)
@


1.3
log
@make the style of the files a bit more unique
and add RCS Ids
@
text
@d1 1
a1 1
/*	$MirBSD: crtbegin.c,v 1.2 2003/04/24 15:32:37 tg Exp $	*/
d32 1
a32 1
static const char rcsid[] = "$MirBSD: crt0.c,v 1.2 2003/04/24 15:32:37 tg Exp $";
@


1.2
log
@re-add Makefile that got accidentally deleted
change the order in which ctors and dtors were processed,
to match pre-existing behaviour and not NetBSD one
@
text
@d1 1
a1 1
/*	$MirBSD: crtbegin.c,v 1.1 2003/04/24 15:22:48 tg Exp $	*/
d30 4
@


1.1
log
@remove a.out files (common.* and c++rt*)
merge md/mi into single file, may be ifdef'd later
ease compilation
@
text
@d1 1
a1 1
/*	$MirBSD: crtbegin.c,v 1.6 2003/04/08 15:40:58 tg Exp $	*/
d20 1
a20 1
	".p2align 2\n\t"
d25 1
a25 1
	".ascii \"OpenBSD\\0\"\n\t"
d28 1
a28 1
	".p2align 2\n\t");
d67 4
d80 4
a83 3
#include <stdlib.h>
#include <sys/exec.h>
#include <sys/exec_elf.h>
d103 8
a110 8
#define	MD_SECTION_PROLOGUE(sect, entry_pt)		\
		__asm (					\
		".section "#sect",\"ax\",@@progbits	\n"\
		#entry_pt":				\n"\
		"	.align	16			\n"\
		"	/* fall thru */			\n"\
		".previous")
		/* placement of the .align _after_ the label is intentional */
d116 1
a116 6
	asm(".section " #section "; call " #func "; .previous");

static void (*__CTOR_LIST__[1])(void)
    __attribute__((section(".ctors"))) = { (void *)-1 };	/* XXX */
static void (*__DTOR_LIST__[1])(void)
    __attribute__((section(".dtors"))) = { (void *)-1 };	/* XXX */
d119 1
a119 1
__ctors(void)
d121 1
a121 1
	unsigned long i = (unsigned long) __CTOR_LIST__[0];
d125 1
a125 1
		for (i = 1; __CTOR_LIST__[i] != NULL; i++)
d129 1
a129 1
	p = __CTOR_LIST__ + i;
d135 1
a135 1
__dtors(void)
d137 1
a137 1
	void (**p)(void) = __DTOR_LIST__ + 1;
d146 1
a146 1
	static int initialized;
d162 1
a162 1
	static int finished;
@

