head	1.1;
branch	1.1.1;
access;
symbols
	tg-mergetmp-mirosx-1:1.1.1.3
	tg-mergefixes-1-branch:1.1.1.3.0.8
	tg-mergefixes-1-base:1.1.1.3
	MIROS_X:1.1.1.3.0.6
	MIROS_X_BASE:1.1.1.3
	tg-mergetmp-3:1.1.1.3
	MIRBSD_XP_MIRPPC:1.1.1.3.0.4
	MIRBSD_XP_SPARC_BASE:1.1.1.3
	MIRBSD_XP_SPARC:1.1.1.3.0.2
	MIRBSD_7quater:1.1.1.2
	cvs-200405160640:1.1.1.3
	cvs-200401271800:1.1.1.3
	cvs-200401261630:1.1.1.3
	cvs-200401021645:1.1.1.3
	MIRBSD_7_ALPHA:1.1.1.2.0.6
	MIRBSD_7:1.1.1.2.0.4
	cvs-200312222040:1.1.1.2
	MIRBSD_7ter:1.1.1.2
	MIRBSD_7_DEV:1.1.1.2.0.2
	cvs-200310020700:1.1.1.2
	cvs-200309271030:1.1.1.2
	cvs-200309251530:1.1.1.2
	cvs-200308302005:1.1.1.2
	cvs-200308171200:1.1.1.2
	ctm-3496:1.1.1.2
	ctm-3449:1.1.1.2
	ctm-3437:1.1.1.2
	cvs-200307191805:1.1.1.2
	ctm-3425:1.1.1.2
	cvs-200307091500:1.1.1.2
	ctm-3389:1.1.1.2
	cvs-200306291430:1.1.1.2
	ctm-3341:1.1.1.2
	MIRBSD_5:1.1.1.2
	cvs-200306082100:1.1.1.2
	ctm-3316:1.1.1.2
	ctm-3272:1.1.1.1
	ctm-3264:1.1.1.1
	cvs-200305071630:1.1.1.1
	ctm-3255:1.1.1.1
	MIRBSD_4:1.1.1.1
	ctm-3203:1.1.1.1
	cvs-20030410-1130:1.1.1.1
	ctm-3155:1.1.1.1
	ctm-3132:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.1
date	2003.03.22.17.47.59;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.03.22.17.47.59;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2003.06.05.17.29.18;	author tg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2004.01.02.17.59.53;	author tg;	state Stab;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@/*	$OpenBSD: socket.c,v 1.5 2002/06/07 03:32:04 itojun Exp $	*/

 /*
  * This module determines the type of socket (datagram, stream), the client
  * socket address and port, the server socket address and port. In addition,
  * it provides methods to map a transport address to a printable host name
  * or address. Socket address information results are in static memory.
  * 
  * The result from the hostname lookup method is STRING_PARANOID when a host
  * pretends to have someone elses name, or when a host name is available but
  * could not be verified.
  * 
  * When lookup or conversion fails the result is set to STRING_UNKNOWN.
  * 
  * Diagnostics are reported through syslog(3).
  * 
  * Author: Wietse Venema, Eindhoven University of Technology, The Netherlands.
  */

#ifndef lint
#if 0
static char sccsid[] = "@@(#) socket.c 1.15 97/03/21 19:27:24";
#else
static char rcsid[] = "$OpenBSD: socket.c,v 1.5 2002/06/07 03:32:04 itojun Exp $";
#endif
#endif

/* System libraries. */

#include <sys/types.h>
#include <sys/param.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <netdb.h>
#include <stdio.h>
#include <syslog.h>
#include <string.h>

/* Local stuff. */

#include "tcpd.h"

/* Forward declarations. */

#ifdef APPEND_DOT
static const char *append_dot(const char *);
#endif
static void sock_sink(int);

#ifdef APPEND_DOT
 /*
  * Speed up DNS lookups by terminating the host name with a dot. Should be
  * done with care. The speedup can give problems with lookups from sources
  * that lack DNS-style trailing dot magic, such as local files or NIS maps.
  */

static const char *
append_dot(name)
const char *name;
{
    static char hbuf[MAXHOSTNAMELEN + 1];

    /*
     * Don't append dots to unqualified names. Such names are likely to come
     * from local hosts files or from NIS.
     */

    if (strchr(name, '.') == 0 || strlen(name) + 2 > sizeof(hbuf))
	strlcpy(hbuf, name, sizeof(hbuf));
    else
	snprintf(hbuf, sizeof(hbuf), "%s.", name);
    return hbuf;
}
#endif

/* sock_host - look up endpoint addresses and install conversion methods */

void    sock_host(request)
struct request_info *request;
{
    static struct sockaddr_storage client;
    static struct sockaddr_storage server;
    int     len;
    char    buf[BUFSIZ];
    int     fd = request->fd;

    sock_methods(request);

    /*
     * Look up the client host address. Hal R. Brand <BRAND@@addvax.llnl.gov>
     * suggested how to get the client host info in case of UDP connections:
     * peek at the first message without actually looking at its contents. We
     * really should verify that client.sin_family gets the value AF_INET,
     * but this program has already caused too much grief on systems with
     * broken library code.
     *
     * XXX the last sentence is untrue as we support AF_INET6 as well :-)
     */

    len = sizeof(client);
    if (getpeername(fd, (struct sockaddr *) & client, &len) < 0) {
	request->sink = sock_sink;
	len = sizeof(client);
	if (recvfrom(fd, buf, sizeof(buf), MSG_PEEK,
		     (struct sockaddr *) & client, &len) < 0) {
	    tcpd_warn("can't get client address: %m");
	    return;				/* give up */
	}
#ifdef really_paranoid
	memset(buf, 0 sizeof(buf));
#endif
    }
    request->client->sin = (struct sockaddr *)&client;

    /*
     * Determine the server binding. This is used for client username
     * lookups, and for access control rules that trigger on the server
     * address or name.
     */

    len = sizeof(server);
    if (getsockname(fd, (struct sockaddr *) & server, &len) < 0) {
	tcpd_warn("getsockname: %m");
	return;
    }
    request->server->sin = (struct sockaddr *)&server;
}

/* sock_hostaddr - map endpoint address to printable form */

void    sock_hostaddr(host)
struct host_info *host;
{
    struct sockaddr *sa = host->sin;

    if (!sa)
	return;
    host->addr[0] = '\0';
    getnameinfo(sa, sa->sa_len, host->addr, sizeof(host->addr),
	NULL, 0, NI_NUMERICHOST);
}

/* sock_hostname - map endpoint address to host name */

void    sock_hostname(host)
struct host_info *host;
{
    struct sockaddr *sa = host->sin;
    char h1[NI_MAXHOST], h2[NI_MAXHOST];
    struct addrinfo hints, *res, *res0;
#ifdef INET6
    struct sockaddr_in tmp;
#endif

    if (!sa)
	return;
#ifdef INET6
    /* special case on reverse lookup: mapped addr.  I hate it */
    if (sa->sa_family == AF_INET6 &&
        IN6_IS_ADDR_V4MAPPED(&((struct sockaddr_in6 *)sa)->sin6_addr)) {
	memset(&tmp, 0, sizeof(tmp));
	tmp.sin_family = AF_INET;
	tmp.sin_len = sizeof(struct sockaddr_in);
	memcpy(&tmp.sin_addr,
	    &((struct sockaddr_in6 *)sa)->sin6_addr.s6_addr[12], 4);
	sa = (struct sockaddr *)&tmp;
    }
#endif
    if (getnameinfo(sa, sa->sa_len, h1, sizeof(h1), NULL, 0,
        NI_NUMERICHOST) != 0) {
	return;
    }
    if (getnameinfo(sa, sa->sa_len, host->name, sizeof(host->name), NULL, 0,
        NI_NAMEREQD) == 0) {
	/*
	 * Verify that the address is a member of the address list returned
	 * by getaddrinfo(hostname).
	 * 
	 * Verify also that getnameinfo() and getaddrinfo() return the same
	 * hostname, or rshd and rlogind may still end up being spoofed.
	 * 
	 * On some sites, getaddrinfo("localhost") returns "localhost.domain".
	 * This is a DNS artefact. We treat it as a special case. When we
	 * can't believe the address list from getaddrinfo("localhost")
	 * we're in big trouble anyway.
	 */
	memset(&hints, 0, sizeof(hints));
	hints.ai_family = sa->sa_family;
	hints.ai_socktype = SOCK_DGRAM;	/*dummy*/
	hints.ai_flags = AI_CANONNAME;
#ifdef APPEND_DOT
	if (getaddrinfo(append_dot(host->name), "0", &hints, &res0) != 0)
#else
	if (getaddrinfo(host->name, "0", &hints, &res0) != 0)
#endif
	{
	    /*
	     * Unable to verify that the host name matches the address. This
	     * may be a transient problem or a botched name server setup.
	     */

	    tcpd_warn("can't verify hostname: getaddrinfo(%s, %d) failed",
	        host->name, hints.ai_family);
	} else if (res0->ai_canonname &&
	    STR_NE(host->name, res0->ai_canonname) &&
	    STR_NE(host->name, "localhost")) {
	    /*
	     * The getnameinfo() and getaddrinfo() calls did not return
	     * the same hostname. This could be a nameserver configuration
	     * problem. It could also be that someone is trying to spoof us.
	     */

	    tcpd_warn("host name/name mismatch: %s != %s",
		host->name, res0->ai_canonname);
	    freeaddrinfo(res0);
	} else {
	    /*
	     * The address should be a member of the address list returned by
	     * getaddrinfo().
	     */

	    for (res = res0; res; res = res->ai_next) {
		if (getnameinfo(res->ai_addr, res->ai_addrlen, h2, sizeof(h2),
		    NULL, 0, NI_NUMERICHOST) != 0) {
		    continue;
		}
		if (STR_EQ(h1, h2)) {
		    freeaddrinfo(res0);
		    return;
		}
	    }

	    /*
	     * The host name does not map to the initial address. Perhaps
	     * someone has messed up. Perhaps someone compromised a name
	     * server.
	     */

	    tcpd_warn("host name/address mismatch: %s != %s", h1,
		res0->ai_canonname ? res0->ai_canonname : "?");

	    freeaddrinfo(res0);
	}
	/* name is bad, clobber it */
	strlcpy(host->name, paranoid, sizeof(host->name));
    }
}

/* sock_sink - absorb unreceived IP datagram */

static void sock_sink(fd)
int     fd;
{
    char    buf[BUFSIZ];
    struct sockaddr_storage ss;
    int     size = sizeof(ss);

    /*
     * Eat up the not-yet received datagram. Some systems insist on a
     * non-zero source address argument in the recvfrom() call below.
     */

    (void) recvfrom(fd, buf, sizeof(buf), 0, (struct sockaddr *) & ss, &size);
}
@


1.1.1.1
log
@Import OpenBSD 3.3 source repository from CTM 3132 the first time
This opens an OpenBSD-mirabile (aka MirBSD) repository.

### MirBSD is:
# Copyright (c) 1982-2003 by Thorsten "mirabile" Glaser <x86@@ePost.de>
# Copyright © 1968-2003  The authors of And contributors to UNIX®, the
#       C Language, BSD/Berkeley Unix; 386BSD, NetBSD 1.1 and OpenBSD.
#
# Anyone who obtained a copy of this work is hereby permitted to freely use,
# distribute, modify, merge, sublicence, give away or sell it as long as the
# authors are given due credit and the following notice is retained:
#
# This work is provided "as is", with no explicit or implicit warranty what-
# soever. Use it only at your own risk. In no event may an author or contri-
# butor be held liable for any damage, directly or indirectly, that origina-
# ted through or is caused by creation or modification of this work.

MirBSD is my private tree. MirBSD does not differ very much from OpenBSD
and intentionally tracks OpenBSD. That's why it _is_ OpenBSD, just not the
official one. It's like with DarrenBSD.

At time of this writing, no advertising for MirBSD must be done,
because the advertising clause has not yet been sorted out.

http://templeofhate.com/tglaser/MirBSD/index.php
@
text
@@


1.1.1.2
log
@Import latest OpenBSD CVS tree by CTM in order
to sync the base system and ports tree with Them.

This includes the recent licence changes as well - by
importing the changed base and re-applying the diffs
(with cvs up -j -j) they are inherited, and we're not
bound to the removed clauses any longer.
@
text
@d1 1
a1 1
/*	$NetBSD: socket.c,v 1.17 2003/05/26 10:05:07 itojun Exp $	*/
d24 1
a24 1
static char rcsid[] = "$OpenBSD: socket.c,v 1.6 2003/05/27 02:19:44 itojun Exp $";
a175 21
	/*
	 * if reverse lookup result looks like a numeric hostname,
	 * someone is trying to trick us by PTR record like following:
	 *	1.1.1.10.in-addr.arpa.  IN PTR  2.3.4.5
	 */
	memset(&hints, 0, sizeof(hints));
	hints.ai_socktype = SOCK_DGRAM;	/*dummy*/
	hints.ai_flags = AI_NUMERICHOST;
#ifdef APPEND_DOT
	if (getaddrinfo(append_dot(host->name), "0", &hints, &res0) == 0)
#else
	if (getaddrinfo(host->name, "0", &hints, &res0) == 0)
#endif
	{
	    tcpd_warn("Nasty PTR record is configured");
	    freeaddrinfo(res0);
	    /* name is bad, clobber it */
	    (void)strlcpy(host->name, paranoid, sizeof(host->name));
	    return;
	}
	 
@


1.1.1.3
log
@Import OpenBSD again, for various reasons.
@
text
@d24 1
a24 1
static char rcsid[] = "$OpenBSD: socket.c,v 1.7 2003/12/27 22:58:35 henning Exp $";
d111 1
a111 1
	memset(buf, 0, sizeof(buf));
@


