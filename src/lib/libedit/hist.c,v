head	1.1;
branch	1.1.1;
access;
symbols
	tg-mergetmp-mirosx-1:1.1.1.4
	tg-mergefixes-1-branch:1.1.1.4.0.8
	tg-mergefixes-1-base:1.1.1.4
	MIROS_X:1.1.1.4.0.6
	MIROS_X_BASE:1.1.1.4
	tg-mergetmp-3:1.1.1.4
	MIRBSD_XP_MIRPPC:1.1.1.4.0.4
	MIRBSD_XP_SPARC_BASE:1.1.1.4
	MIRBSD_XP_SPARC:1.1.1.4.0.2
	MIRBSD_7quater:1.1.1.3
	cvs-200405160640:1.1.1.4
	cvs-200401271800:1.1.1.4
	cvs-200401261630:1.1.1.4
	cvs-200401021645:1.1.1.4
	MIRBSD_7_ALPHA:1.1.1.3.0.6
	MIRBSD_7:1.1.1.3.0.4
	cvs-200312222040:1.1.1.4
	MIRBSD_7ter:1.1.1.3
	MIRBSD_7_DEV:1.1.1.3.0.2
	cvs-200310020700:1.1.1.3
	cvs-200309271030:1.1.1.3
	cvs-200309251530:1.1.1.3
	cvs-200308302005:1.1.1.3
	cvs-200308171200:1.1.1.3
	ctm-3496:1.1.1.3
	ctm-3449:1.1.1.3
	ctm-3437:1.1.1.3
	cvs-200307191805:1.1.1.3
	ctm-3425:1.1.1.3
	cvs-200307091500:1.1.1.3
	ctm-3389:1.1.1.3
	cvs-200306291430:1.1.1.3
	ctm-3341:1.1.1.3
	MIRBSD_5:1.1.1.3
	cvs-200306082100:1.1.1.3
	ctm-3316:1.1.1.3
	ctm-3272:1.1.1.2
	ctm-3264:1.1.1.2
	cvs-200305071630:1.1.1.2
	ctm-3255:1.1.1.2
	MIRBSD_4:1.1.1.1
	ctm-3203:1.1.1.1
	cvs-20030410-1130:1.1.1.1
	ctm-3155:1.1.1.1
	ctm-3132:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.1
date	2003.03.22.17.46.45;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.03.22.17.46.45;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2003.05.05.20.56.22;	author tg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2003.06.05.17.25.52;	author tg;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2003.12.22.21.07.12;	author tg;	state Stab;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@/*	$OpenBSD: hist.c,v 1.3 1997/03/14 05:12:48 millert Exp $	*/
/*	$NetBSD: hist.c,v 1.2 1997/01/11 06:47:55 lukem Exp $	*/

/*-
 * Copyright (c) 1992, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * Christos Zoulas of Cornell University.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#if !defined(lint) && !defined(SCCSID)
#if 0
static char sccsid[] = "@@(#)hist.c	8.1 (Berkeley) 6/4/93";
#else
static char rcsid[] = "$OpenBSD: hist.c,v 1.3 1997/03/14 05:12:48 millert Exp $";
#endif
#endif /* not lint && not SCCSID */

/*
 * hist.c: History access functions
 */
#include "sys.h"
#include <stdlib.h>
#include "el.h"

/* hist_init():
 *	Initialization function.
 */
protected int
hist_init(el)
    EditLine *el;
{
    el->el_history.fun  = NULL;
    el->el_history.ref  = NULL;
    el->el_history.buf   = (char *) el_malloc(EL_BUFSIZ);
    el->el_history.last  = el->el_history.buf;
    return 0;
}


/* hist_end():
 *	clean up history;
 */
protected void
hist_end(el)
    EditLine *el;
{
    el_free((ptr_t) el->el_history.buf);
    el->el_history.buf   = NULL;
}


/* hist_set():
 *	Set new history interface
 */
protected int
hist_set(el, fun, ptr)
    EditLine *el;
    hist_fun_t fun;
    ptr_t ptr;

{
    el->el_history.ref = ptr;
    el->el_history.fun = fun;
    return 0;
}


/* hist_get():
 *	Get a history line and update it in the buffer.
 *	eventno tells us the event to get.
 */
protected el_action_t
hist_get(el)
    EditLine *el;
{
    const char    *hp;
    int     h;

    if (el->el_history.eventno == 0) {	/* if really the current line */
	(void)strncpy(el->el_line.buffer, el->el_history.buf, EL_BUFSIZ - 1);
	el->el_line.buffer[EL_BUFSIZ - 1] = '\0';
	el->el_line.lastchar = el->el_line.buffer + 
		(el->el_history.last - el->el_history.buf);

#ifdef KSHVI
    if (el->el_map.type == MAP_VI)
	el->el_line.cursor = el->el_line.buffer;
    else
#endif /* KSHVI */
	el->el_line.cursor = el->el_line.lastchar;

	return CC_REFRESH;
    }

    if (el->el_history.ref == NULL)
	return CC_ERROR;

    hp = HIST_FIRST(el);

    if (hp == NULL)
	return CC_ERROR;

    for (h = 1; h < el->el_history.eventno; h++)
	if ((hp = HIST_NEXT(el)) == NULL) {
	    el->el_history.eventno = h;
	    return CC_ERROR;
	}

    (void)strncpy(el->el_line.buffer, hp, EL_BUFSIZ - 1);
    el->el_line.buffer[EL_BUFSIZ - 1] = '\0';
    el->el_line.lastchar = el->el_line.buffer + strlen(el->el_line.buffer);

    if (el->el_line.lastchar > el->el_line.buffer) {
	if (el->el_line.lastchar[-1] == '\n')
	    el->el_line.lastchar--;
	if (el->el_line.lastchar[-1] == ' ')
	    el->el_line.lastchar--;
	if (el->el_line.lastchar < el->el_line.buffer)
	    el->el_line.lastchar = el->el_line.buffer;
    }

#ifdef KSHVI
    if (el->el_map.type == MAP_VI)
	el->el_line.cursor = el->el_line.buffer;
    else
#endif /* KSHVI */
	el->el_line.cursor = el->el_line.lastchar;

    return CC_REFRESH;
}

/* hist_list()
 *	List history entries
 */
protected int
/*ARGSUSED*/
hist_list(el, argc, argv)
    EditLine *el;
    int argc;
    char **argv;
{
    const char *str;

    if (el->el_history.ref == NULL)
	return -1;
    for (str = HIST_LAST(el); str != NULL; str = HIST_PREV(el))
	(void)fprintf(el->el_outfile, "%d %s", el->el_history.ev->num, str);
    return 0;
}
@


1.1.1.1
log
@Import OpenBSD 3.3 source repository from CTM 3132 the first time
This opens an OpenBSD-mirabile (aka MirBSD) repository.

### MirBSD is:
# Copyright (c) 1982-2003 by Thorsten "mirabile" Glaser <x86@@ePost.de>
# Copyright © 1968-2003  The authors of And contributors to UNIX®, the
#       C Language, BSD/Berkeley Unix; 386BSD, NetBSD 1.1 and OpenBSD.
#
# Anyone who obtained a copy of this work is hereby permitted to freely use,
# distribute, modify, merge, sublicence, give away or sell it as long as the
# authors are given due credit and the following notice is retained:
#
# This work is provided "as is", with no explicit or implicit warranty what-
# soever. Use it only at your own risk. In no event may an author or contri-
# butor be held liable for any damage, directly or indirectly, that origina-
# ted through or is caused by creation or modification of this work.

MirBSD is my private tree. MirBSD does not differ very much from OpenBSD
and intentionally tracks OpenBSD. That's why it _is_ OpenBSD, just not the
official one. It's like with DarrenBSD.

At time of this writing, no advertising for MirBSD must be done,
because the advertising clause has not yet been sorted out.

http://templeofhate.com/tglaser/MirBSD/index.php
@
text
@@


1.1.1.2
log
@sync the libraries as well before doing flag day
@
text
@d1 1
a1 1
/*	$OpenBSD: hist.c,v 1.4 2003/05/01 21:11:21 avsm Exp $	*/
d44 1
a44 1
static const char rcsid[] = "$OpenBSD: hist.c,v 1.4 2003/05/01 21:11:21 avsm Exp $";
@


1.1.1.3
log
@Import latest OpenBSD CVS tree by CTM in order
to sync the base system and ports tree with Them.

This includes the recent licence changes as well - by
importing the changed base and re-applying the diffs
(with cvs up -j -j) they are inherited, and we're not
bound to the removed clauses any longer.
@
text
@d1 1
a1 1
/*	$OpenBSD: hist.c,v 1.5 2003/06/02 20:18:40 millert Exp $	*/
d19 5
a23 1
 * 3. Neither the name of the University nor the names of its contributors
d44 1
a44 1
static const char rcsid[] = "$OpenBSD: hist.c,v 1.5 2003/06/02 20:18:40 millert Exp $";
@


1.1.1.4
log
@Time to import OpenBSD once again. Expect breakage.
@
text
@d1 2
a2 2
/*	$OpenBSD: hist.c,v 1.7 2003/11/25 20:12:38 otto Exp $	*/
/*	$NetBSD: hist.c,v 1.15 2003/11/01 23:36:39 christos Exp $	*/
a35 1
#include "config.h"
d40 1
a40 1
static const char rcsid[] = "$OpenBSD: hist.c,v 1.7 2003/11/25 20:12:38 otto Exp $";
d47 1
d55 2
a56 1
hist_init(EditLine *el)
d58 5
a62 9

	el->el_history.fun = NULL;
	el->el_history.ref = NULL;
	el->el_history.buf = (char *) el_malloc(EL_BUFSIZ);
	el->el_history.sz  = EL_BUFSIZ;
	if (el->el_history.buf == NULL)
		return (-1);
	el->el_history.last = el->el_history.buf;
	return (0);
d70 2
a71 1
hist_end(EditLine *el)
d73 2
a74 3

	el_free((ptr_t) el->el_history.buf);
	el->el_history.buf = NULL;
d82 5
a86 1
hist_set(EditLine *el, hist_fun_t fun, ptr_t ptr)
d88 3
a90 4

	el->el_history.ref = ptr;
	el->el_history.fun = fun;
	return (0);
d99 2
a100 1
hist_get(EditLine *el)
d102 2
a103 2
	const char *hp;
	int h;
d105 5
a109 5
	if (el->el_history.eventno == 0) {	/* if really the current line */
		(void) strncpy(el->el_line.buffer, el->el_history.buf,
		    el->el_history.sz);
		el->el_line.lastchar = el->el_line.buffer +
		    (el->el_history.last - el->el_history.buf);
d112 3
a114 3
		if (el->el_map.type == MAP_VI)
			el->el_line.cursor = el->el_line.buffer;
		else
d116 1
a116 1
			el->el_line.cursor = el->el_line.lastchar;
d118 2
a119 4
		return (CC_REFRESH);
	}
	if (el->el_history.ref == NULL)
		return (CC_ERROR);
d121 2
a122 1
	hp = HIST_FIRST(el);
d124 1
a124 2
	if (hp == NULL)
		return (CC_ERROR);
d126 2
a127 24
	for (h = 1; h < el->el_history.eventno; h++)
		if ((hp = HIST_NEXT(el)) == NULL) {
			el->el_history.eventno = h;
			return (CC_ERROR);
		}
	(void) strlcpy(el->el_line.buffer, hp,
			(size_t)(el->el_line.limit - el->el_line.buffer));
	el->el_line.lastchar = el->el_line.buffer + strlen(el->el_line.buffer);

	if (el->el_line.lastchar > el->el_line.buffer
	    && el->el_line.lastchar[-1] == '\n')
		el->el_line.lastchar--;
	if (el->el_line.lastchar > el->el_line.buffer
	    && el->el_line.lastchar[-1] == ' ')
		el->el_line.lastchar--;
#ifdef KSHVI
	if (el->el_map.type == MAP_VI)
		el->el_line.cursor = el->el_line.buffer;
	else
#endif /* KSHVI */
		el->el_line.cursor = el->el_line.lastchar;

	return (CC_REFRESH);
}
d129 4
a132 21

/* hist_command()
 *	process a history command
 */
protected int
hist_command(EditLine *el, int argc, const char **argv)
{
	const char *str;
	int num;
	HistEvent ev;

	if (el->el_history.ref == NULL)
		return (-1);

	if (argc == 1 || strcmp(argv[1], "list") == 0) {
		 /* List history entries */

		for (str = HIST_LAST(el); str != NULL; str = HIST_PREV(el))
			(void) fprintf(el->el_outfile, "%d %s",
			    el->el_history.ev.num, str);
		return (0);
d135 12
a146 2
	if (argc != 3)
		return (-1);
d148 6
a153 7
	num = (int)strtol(argv[2], NULL, 0);

	if (strcmp(argv[1], "size") == 0)
		return history(el->el_history.ref, &ev, H_SETSIZE, num);

	if (strcmp(argv[1], "unique") == 0)
		return history(el->el_history.ref, &ev, H_SETUNIQUE, num);
d155 1
a155 1
	return -1;
d158 2
a159 3
/* hist_enlargebuf()
 *	Enlarge history buffer to specified value. Called from el_enlargebufs().
 *	Return 0 for failure, 1 for success.
d163 4
a166 1
hist_enlargebuf(EditLine *el, size_t oldsz, size_t newsz)
d168 1
a168 1
	char *newbuf;
d170 5
a174 12
	newbuf = realloc(el->el_history.buf, newsz);
	if (!newbuf)
		return 0;

	(void) memset(&newbuf[oldsz], '\0', newsz - oldsz);

	el->el_history.last = newbuf +
				(el->el_history.last - el->el_history.buf);
	el->el_history.buf = newbuf;
	el->el_history.sz  = newsz;

	return 1;
@


