head	1.1;
branch	1.1.1;
access;
symbols
	tg-mergetmp-mirosx-1:1.1.1.4
	tg-mergefixes-1-branch:1.1.1.4.0.8
	tg-mergefixes-1-base:1.1.1.4
	MIROS_X:1.1.1.4.0.6
	MIROS_X_BASE:1.1.1.4
	tg-mergetmp-3:1.1.1.4
	MIRBSD_XP_MIRPPC:1.1.1.4.0.4
	MIRBSD_XP_SPARC_BASE:1.1.1.4
	MIRBSD_XP_SPARC:1.1.1.4.0.2
	MIRBSD_7quater:1.1.1.3
	cvs-200405160640:1.1.1.4
	cvs-200401271800:1.1.1.4
	cvs-200401261630:1.1.1.4
	cvs-200401021645:1.1.1.4
	MIRBSD_7_ALPHA:1.1.1.3.0.6
	MIRBSD_7:1.1.1.3.0.4
	cvs-200312222040:1.1.1.4
	MIRBSD_7ter:1.1.1.3
	MIRBSD_7_DEV:1.1.1.3.0.2
	cvs-200310020700:1.1.1.3
	cvs-200309271030:1.1.1.3
	cvs-200309251530:1.1.1.3
	cvs-200308302005:1.1.1.3
	cvs-200308171200:1.1.1.3
	ctm-3496:1.1.1.3
	ctm-3449:1.1.1.3
	ctm-3437:1.1.1.3
	cvs-200307191805:1.1.1.3
	ctm-3425:1.1.1.3
	cvs-200307091500:1.1.1.3
	ctm-3389:1.1.1.3
	cvs-200306291430:1.1.1.3
	ctm-3341:1.1.1.3
	MIRBSD_5:1.1.1.3
	cvs-200306082100:1.1.1.3
	ctm-3316:1.1.1.3
	ctm-3272:1.1.1.2
	ctm-3264:1.1.1.2
	cvs-200305071630:1.1.1.2
	ctm-3255:1.1.1.2
	MIRBSD_4:1.1.1.1
	ctm-3203:1.1.1.1
	cvs-20030410-1130:1.1.1.1
	ctm-3155:1.1.1.1
	ctm-3132:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.1
date	2003.03.22.17.46.45;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.03.22.17.46.45;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2003.05.05.20.56.26;	author tg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2003.06.05.17.25.54;	author tg;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2003.12.22.21.07.13;	author tg;	state Stab;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@/*	$OpenBSD: sig.c,v 1.7 2002/02/16 21:27:26 millert Exp $	*/
/*	$NetBSD: sig.c,v 1.3 1997/04/11 17:52:48 christos Exp $	*/

/*-
 * Copyright (c) 1992, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * Christos Zoulas of Cornell University.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#if !defined(lint) && !defined(SCCSID)
#if 0
static char sccsid[] = "@@(#)sig.c	8.1 (Berkeley) 6/4/93";
#else
static char rcsid[] = "$OpenBSD: sig.c,v 1.7 2002/02/16 21:27:26 millert Exp $";
#endif
#endif /* not lint && not SCCSID */

/*
 * sig.c: Signal handling stuff.
 *	  our policy is to trap all signals, set a good state
 *	  and pass the ball to our caller.
 */
#include "sys.h"
#include "el.h"
#include <stdlib.h>

private EditLine *sel = NULL;

private int sighdl[] = {
#define _DO(a)	(a),
    ALLSIGS
#undef _DO
    -1
};

private void sig_handler(int);

/* sig_handler():
 *	This is the handler called for all signals
 *	XXX: we cannot pass any data so we just store the old editline
 *	state in a private variable
 */
private void
sig_handler(signo)
    int signo;
{
    int save_errno = errno;
    int i;
    sigset_t nset, oset;

    (void)sigemptyset(&nset);
    (void)sigaddset(&nset, signo);
    (void)sigprocmask(SIG_BLOCK, &nset, &oset);

    switch (signo) {
    case SIGCONT:
	tty_rawmode(sel);				/* XXX signal race */
	if (ed_redisplay(sel, 0) == CC_REFRESH)		/* XXX signal race */
	    re_refresh(sel);				/* XXX signal race */
	term__flush();					/* XXX signal race */
	break;

    case SIGWINCH:
	el_resize(sel);					/* XXX signal race */
	break;

    default:
	tty_cookedmode(sel);				/* XXX signal race */
	break;
    }

    for (i = 0; sighdl[i] != -1; i++) 
	if (signo == sighdl[i])
	    break;

    (void)signal(signo, sel->el_signal[i]);
    (void)sigprocmask(SIG_SETMASK, &oset, NULL);
    (void)kill(0, signo);
    errno = save_errno;
}


/* sig_init():
 *	Initialize all signal stuff
 */
protected int
sig_init(el)
    EditLine *el;
{
    int i;
    sigset_t nset, oset;

    (void)sigemptyset(&nset);
#define _DO(a) (void)sigaddset(&nset, a);
    ALLSIGS
#undef _DO
    (void)sigprocmask(SIG_BLOCK, &nset, &oset);

#define SIGSIZE (sizeof(sighdl) / sizeof(sighdl[0]) * sizeof(sig_t))

    el->el_signal = (sig_t *) el_malloc(SIGSIZE);
    for (i = 0; sighdl[i] != -1; i++) 
	el->el_signal[i] = SIG_ERR;

    (void)sigprocmask(SIG_SETMASK, &oset, NULL);

    return 0;
}


/* sig_end():
 *	Clear all signal stuff
 */
protected void
sig_end(el)
    EditLine *el;
{
    el_free((ptr_t) el->el_signal);
    el->el_signal = NULL;
}


/* sig_set():
 *	set all the signal handlers
 */
protected void
sig_set(el)
    EditLine *el;
{
    int i;
    sigset_t nset, oset;

    (void)sigemptyset(&nset);
#define _DO(a) (void)sigaddset(&nset, a);
    ALLSIGS
#undef _DO
    (void)sigprocmask(SIG_BLOCK, &nset, &oset);

    for (i = 0; sighdl[i] != -1; i++) {
	sig_t s;
	/* This could happen if we get interrupted */
	if ((s = signal(sighdl[i], sig_handler)) != sig_handler)
	    el->el_signal[i] = s;
    }
    sel = el;
    (void)sigprocmask(SIG_SETMASK, &oset, NULL);
}


/* sig_clr():
 *	clear all the signal handlers
 */
protected void
sig_clr(el)
    EditLine *el;
{
    int i;
    sigset_t nset, oset;

    (void)sigemptyset(&nset);
#define _DO(a) (void)sigaddset(&nset, a);
    ALLSIGS
#undef _DO
    (void)sigprocmask(SIG_BLOCK, &nset, &oset);

    for (i = 0; sighdl[i] != -1; i++) 
	if (el->el_signal[i] != SIG_ERR)
	    (void)signal(sighdl[i], el->el_signal[i]);

    sel = NULL;	/* we are going to die if the handler is called */
    (void)sigprocmask(SIG_SETMASK, &oset, NULL);
}
@


1.1.1.1
log
@Import OpenBSD 3.3 source repository from CTM 3132 the first time
This opens an OpenBSD-mirabile (aka MirBSD) repository.

### MirBSD is:
# Copyright (c) 1982-2003 by Thorsten "mirabile" Glaser <x86@@ePost.de>
# Copyright © 1968-2003  The authors of And contributors to UNIX®, the
#       C Language, BSD/Berkeley Unix; 386BSD, NetBSD 1.1 and OpenBSD.
#
# Anyone who obtained a copy of this work is hereby permitted to freely use,
# distribute, modify, merge, sublicence, give away or sell it as long as the
# authors are given due credit and the following notice is retained:
#
# This work is provided "as is", with no explicit or implicit warranty what-
# soever. Use it only at your own risk. In no event may an author or contri-
# butor be held liable for any damage, directly or indirectly, that origina-
# ted through or is caused by creation or modification of this work.

MirBSD is my private tree. MirBSD does not differ very much from OpenBSD
and intentionally tracks OpenBSD. That's why it _is_ OpenBSD, just not the
official one. It's like with DarrenBSD.

At time of this writing, no advertising for MirBSD must be done,
because the advertising clause has not yet been sorted out.

http://templeofhate.com/tglaser/MirBSD/index.php
@
text
@@


1.1.1.2
log
@sync the libraries as well before doing flag day
@
text
@d1 1
a1 1
/*	$OpenBSD: sig.c,v 1.8 2003/05/01 21:11:21 avsm Exp $	*/
d44 1
a44 1
static const char rcsid[] = "$OpenBSD: sig.c,v 1.8 2003/05/01 21:11:21 avsm Exp $";
@


1.1.1.3
log
@Import latest OpenBSD CVS tree by CTM in order
to sync the base system and ports tree with Them.

This includes the recent licence changes as well - by
importing the changed base and re-applying the diffs
(with cvs up -j -j) they are inherited, and we're not
bound to the removed clauses any longer.
@
text
@d1 1
a1 1
/*	$OpenBSD: sig.c,v 1.9 2003/06/02 20:18:40 millert Exp $	*/
d19 5
a23 1
 * 3. Neither the name of the University nor the names of its contributors
d44 1
a44 1
static const char rcsid[] = "$OpenBSD: sig.c,v 1.9 2003/06/02 20:18:40 millert Exp $";
@


1.1.1.4
log
@Time to import OpenBSD once again. Expect breakage.
@
text
@d1 2
a2 2
/*	$OpenBSD: sig.c,v 1.10 2003/10/31 08:42:24 otto Exp $	*/
/*	$NetBSD: sig.c,v 1.11 2003/08/07 16:44:33 agc Exp $	*/
a35 1
#include "config.h"
d40 1
a40 1
static const char rcsid[] = "$OpenBSD: sig.c,v 1.10 2003/10/31 08:42:24 otto Exp $";
d49 1
d55 5
a59 5
private const int sighdl[] = {
#define	_DO(a)	(a),
	ALLSIGS
#undef	_DO
	- 1
d70 2
a71 1
sig_handler(int signo)
d73 33
a105 31
	int i;
	sigset_t nset, oset;

	(void) sigemptyset(&nset);
	(void) sigaddset(&nset, signo);
	(void) sigprocmask(SIG_BLOCK, &nset, &oset);

	switch (signo) {
	case SIGCONT:
		tty_rawmode(sel);
		if (ed_redisplay(sel, 0) == CC_REFRESH)
			re_refresh(sel);
		term__flush();
		break;

	case SIGWINCH:
		el_resize(sel);
		break;

	default:
		tty_cookedmode(sel);
		break;
	}

	for (i = 0; sighdl[i] != -1; i++)
		if (signo == sighdl[i])
			break;

	(void) signal(signo, sel->el_signal[i]);
	(void) sigprocmask(SIG_SETMASK, &oset, NULL);
	(void) kill(0, signo);
d113 2
a114 1
sig_init(EditLine *el)
d116 10
a125 2
	int i;
	sigset_t nset, oset;
d127 3
a129 13
	(void) sigemptyset(&nset);
#define	_DO(a) (void) sigaddset(&nset, a);
	ALLSIGS
#undef	_DO
	    (void) sigprocmask(SIG_BLOCK, &nset, &oset);

#define	SIGSIZE (sizeof(sighdl) / sizeof(sighdl[0]) * sizeof(el_signalhandler_t))

	el->el_signal = (el_signalhandler_t *) el_malloc(SIGSIZE);
	if (el->el_signal == NULL)
		return (-1);
	for (i = 0; sighdl[i] != -1; i++)
		el->el_signal[i] = SIG_ERR;
d131 1
a131 1
	(void) sigprocmask(SIG_SETMASK, &oset, NULL);
d133 1
a133 1
	return (0);
d141 2
a142 1
sig_end(EditLine *el)
d144 2
a145 3

	el_free((ptr_t) el->el_signal);
	el->el_signal = NULL;
d153 2
a154 1
sig_set(EditLine *el)
d156 2
a157 2
	int i;
	sigset_t nset, oset;
d159 14
a172 14
	(void) sigemptyset(&nset);
#define	_DO(a) (void) sigaddset(&nset, a);
	ALLSIGS
#undef	_DO
	    (void) sigprocmask(SIG_BLOCK, &nset, &oset);

	for (i = 0; sighdl[i] != -1; i++) {
		el_signalhandler_t s;
		/* This could happen if we get interrupted */
		if ((s = signal(sighdl[i], sig_handler)) != sig_handler)
			el->el_signal[i] = s;
	}
	sel = el;
	(void) sigprocmask(SIG_SETMASK, &oset, NULL);
d180 2
a181 1
sig_clr(EditLine *el)
d183 12
a194 2
	int i;
	sigset_t nset, oset;
d196 2
a197 13
	(void) sigemptyset(&nset);
#define	_DO(a) (void) sigaddset(&nset, a);
	ALLSIGS
#undef	_DO
	    (void) sigprocmask(SIG_BLOCK, &nset, &oset);

	for (i = 0; sighdl[i] != -1; i++)
		if (el->el_signal[i] != SIG_ERR)
			(void) signal(sighdl[i], el->el_signal[i]);

	sel = NULL;		/* we are going to die if the handler is
				 * called */
	(void) sigprocmask(SIG_SETMASK, &oset, NULL);
@


