head	1.1;
branch	1.1.1;
access;
symbols
	tg-mergetmp-mirosx-1:1.1.1.5
	tg-mergefixes-1-branch:1.1.1.5.0.8
	tg-mergefixes-1-base:1.1.1.5
	MIROS_X:1.1.1.5.0.6
	MIROS_X_BASE:1.1.1.5
	tg-mergetmp-3:1.1.1.5
	cvs-200412031430:1.1.1.5
	MIRBSD_XP_MIRPPC:1.1.1.5.0.4
	MIRBSD_XP_SPARC_BASE:1.1.1.5
	MIRBSD_XP_SPARC:1.1.1.5.0.2
	cvs-200406230735:1.1.1.5
	MIRBSD_7quater:1.1.1.2
	cvs-200405160640:1.1.1.5
	cvs-200401271800:1.1.1.4
	cvs-200401261630:1.1.1.4
	cvs-200401021645:1.1.1.3
	MIRBSD_7_ALPHA:1.1.1.2.0.6
	MIRBSD_7:1.1.1.2.0.4
	cvs-200312222040:1.1.1.2
	MIRBSD_7ter:1.1.1.2
	MIRBSD_7_DEV:1.1.1.2.0.2
	cvs-200310020700:1.1.1.2
	cvs-200309271030:1.1.1.2
	cvs-200309251530:1.1.1.2
	cvs-200308302005:1.1.1.2
	cvs-200308171200:1.1.1.2
	ctm-3496:1.1.1.2
	ctm-3449:1.1.1.2
	ctm-3437:1.1.1.2
	cvs-200307191805:1.1.1.2
	ctm-3425:1.1.1.2
	cvs-200307091500:1.1.1.2
	ctm-3389:1.1.1.2
	cvs-200306291430:1.1.1.2
	ctm-3341:1.1.1.2
	MIRBSD_5:1.1.1.2
	cvs-200306082100:1.1.1.2
	ctm-3316:1.1.1.2
	ctm-3272:1.1.1.2
	ctm-3264:1.1.1.1
	cvs-200305071630:1.1.1.1
	ctm-3255:1.1.1.1
	MIRBSD_4:1.1.1.1
	ctm-3203:1.1.1.1
	cvs-20030410-1130:1.1.1.1
	ctm-3155:1.1.1.1
	ctm-3132:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@.\" @;


1.1
date	2003.03.22.17.47.02;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.03.22.17.47.02;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2003.05.21.18.59.13;	author tg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2004.01.02.17.57.55;	author tg;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2004.01.26.18.21.57;	author tg;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2004.05.16.09.27.41;	author tg;	state Stab;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@.\" $OpenBSD: pthreads.3,v 1.18 2002/05/01 08:03:30 mpech Exp $
.\" David Leonard <d@@openbsd.org>, 1998. Public domain.
.Dd August 17, 1998
.Dt PTHREADS 3
.Os
.Sh NAME
.Nm pthreads
.Nd POSIX 1003.1c thread interface
.Sh DESCRIPTION
A thread is a flow of control within a process.
Each thread represents a minimal amount of state;
normally just the cpu state and a signal mask.
All other process state (such as memory, file descriptors)
is shared among all of the threads in the process.
.Pp
In
.Ox ,
threads are implemented in a user-level library.
A program using these routines must be linked with the
.Fl pthread
option.
.Pp
The
.Dv SIGINFO
signal can be sent to a threaded process to have the library show the state of
all of its threads.
The information is sent to the process'
controlling tty and describes each thread's
ID,
state (see
.Sx Thread states ) ,
current priority,
flags (see
.Sx Thread flags ) ,
signal mask, and name (as set by
.Xr pthread_set_name_np 3 ) .
If the environment variable
.Ev PTHREAD_DEBUG
is defined additional information is displayed.
.Ss Thread states
Threads can be in one of these states:
.Bl -tag -offset indent -width Dv -compact
.It cond_wait
Executing
.Xr pthread_cond_wait 3
or
.Xr pthread_cond_timedwait 3 .
.It dead
Waiting for resource deallocation by the thread garbage collector.
.It deadlock
Waiting for a resource held by the thread itself.
.It fdlr_wait
File descriptor read lock wait.
.It fdlw_wait
File descriptor write lock wait.
.It fdr_wait
Executing one of
.Xr accept 2 ,
.Xr read 2 ,
.Xr readv 2 ,
.Xr recvfrom 2 ,
.Xr recvmsg 2 .
.It fdw_wait
Executing one of
.Xr connect 2 ,
.Xr sendmsg 2 ,
.Xr sendto 2 ,
.Xr write 2 ,
.Xr writev 2 .
.It file_wait
Executing
.Xr flockfile 3
or similar.
.It join
Executing
.Xr pthread_join 3 .
.It mutex_wait
Executing
.Xr pthread_mutex_lock 3 .
.It poll_wait
Executing
.Xr poll 2 .
.It running
Scheduled for, or engaged in, program execution.
.It select_wait
Executing
.Xr select 2 .
.It sigsuspend
Executing
.Xr sigsuspend 2 .
.It sigwait
Executing
.Xr sigwait 3 .
.It sleep_wait
Executing
.Xr sleep 3
or
.Xr nanosleep 2 .
.It spinblock
Waiting for a machine-level atomic lock.
.It suspended
Suspended with
.Xr pthread_suspend_np 3 .
.It wait_wait
Executing
.Xr wait4 2
or similar.
.El
.Ss Thread flags
The first three flags are one of:
.Bl -tag -offset indent -width 3en -compact
.It "p"
Private, system thread (e.g., the garbage collector).
.It "E, C, or c"
Thread is exiting (E), has a cancellation pending (C) (see
.Xr pthread_cancel 3 ) ,
or is at a cancellation point (c).
.It "t"
Thread is being traced.
.El
The next 7 flags refer to thread attributes:
.Bl -tag -offset indent -width 3en -compact
.It "C"
Thread is in the
.Dv CONDQ .
.It "R"
Thread is in the
.Dv WORKQ .
.It "W"
Thread is in the
.Dv WAITQ .
.It "P"
Thread is in the
.Dv PRIOQ .
.It "d"
Thread has been detached (see
.Xr pthread_detach 3 ) .
.It "i"
Thread inherits scheduler properties.
.It "f"
Thread will save floating point context.
.El
.Ss Scheduling algorithm
The scheduling algorithm used by the user-level thread library is
roughly as follows:
.Bl -enum -compact
.It
Threads each have a time slice credit which is debited
by the actual time the thread spends in running.
Freshly scheduled threads are given a time slice credit of 100000 usec.
.It
Give an incremental priority update to run-enabled threads that
have not run since the last time that an incremental priority update
was given to them.
.It
Choose the next run-enabled thread with the highest priority,
that became inactive least recently, and has
the largest remaining time slice.
.El
.Pp
When all threads are blocked, the process also blocks.
When there are no threads remaining,
the process terminates with an exit code of zero.
.Ss Thread stacks
Each thread has (or should have) a different stack, whether it be provided by a
user attribute, or provided automatically by the system.
If a thread overflows its stack, unpredictable results may occur.
System-allocated stacks (including that of the initial thread)
are typically allocated in such a way that a
.Dv SIGSEGV
signal is delivered to the process when a stack overflows.
.Pp
Signals handlers are normally run on the stack of the currently executing
thread.
Hence, if you want to handle the
.Dv SIGSEGV
signal, you should make use of
.Xr sigaltstack 2
or
.Xr sigprocmask 2 .
.Sh ENVIRONMENT
.Bl -tag -width "PTHREAD_DEBUG"
.It Ev PTHREAD_DEBUG
Enables verbose
.Dv SIGINFO
signal output.
.It Ev LIBC_R_DEBUG
Display thread status every time the garbage collection thread runs,
approximately once every 10 seconds.
The status display verbosity is controled by the
.Ev PTHREAD_DEBUG
environment variable.
.El
.Sh SEE ALSO
.Xr pthread_cleanup_pop 3 ,
.Xr pthread_cleanup_push 3 ,
.Xr pthread_cond_broadcast 3 ,
.Xr pthread_cond_destroy 3 ,
.Xr pthread_cond_init 3 ,
.Xr pthread_cond_signal 3 ,
.Xr pthread_cond_timedwait 3 ,
.Xr pthread_cond_wait 3 ,
.Xr pthread_create 3 ,
.Xr pthread_detach 3 ,
.Xr pthread_equal 3 ,
.Xr pthread_exit 3 ,
.Xr pthread_getspecific 3 ,
.Xr pthread_join 3 ,
.Xr pthread_key_create 3 ,
.Xr pthread_key_delete 3 ,
.Xr pthread_kill 3 ,
.Xr pthread_mutex_destroy 3 ,
.Xr pthread_mutex_init 3 ,
.Xr pthread_mutex_lock 3 ,
.Xr pthread_mutex_trylock 3 ,
.Xr pthread_mutex_unlock 3 ,
.Xr pthread_once 3 ,
.Xr pthread_rwlock_destroy 3 ,
.Xr pthread_rwlock_init 3 ,
.Xr pthread_rwlock_rdlock 3 ,
.Xr pthread_rwlock_unlock 3 ,
.Xr pthread_rwlock_wrlock 3 ,
.Xr pthread_rwlockattr_destroy 3 ,
.Xr pthread_rwlockattr_getpshared 3 ,
.Xr pthread_rwlockattr_init 3 ,
.Xr pthread_rwlockattr_setpshared 3 ,
.Xr pthread_self 3 ,
.Xr pthread_setspecific 3
.Sh STANDARDS
The user-level thread library provides functions that
conform to ISO/IEC 9945-1 ANSI/IEEE
.Pq Dq Tn POSIX
Std 1003.1 Second Edition 1996-07-12.
.Sh AUTHORS
John Birrell
.Pa ( jb@@freebsd.org )
wrote the majority of the user level thread library.
.\" David Leonard did a fair bit too, but is far too modest.
.Sh BUGS
The library contains a scheduler that uses the
process virtual interval timer to pre-empt running threads.
This means that using
.Xr setitimer 2
to alter the process virtual timer will have undefined effects.
The
.Dv SIGVTALRM
will never be delivered to threads in a process.
.Pp
Some pthread functions fail to work correctly when linked using the
.Fl g
option to
.Xr cc 1
or
.Xr gcc 1 .
The problems do not occur when linked using the
.Fl ggdb
option.
@


1.1.1.1
log
@Import OpenBSD 3.3 source repository from CTM 3132 the first time
This opens an OpenBSD-mirabile (aka MirBSD) repository.

### MirBSD is:
# Copyright (c) 1982-2003 by Thorsten "mirabile" Glaser <x86@@ePost.de>
# Copyright © 1968-2003  The authors of And contributors to UNIX®, the
#       C Language, BSD/Berkeley Unix; 386BSD, NetBSD 1.1 and OpenBSD.
#
# Anyone who obtained a copy of this work is hereby permitted to freely use,
# distribute, modify, merge, sublicence, give away or sell it as long as the
# authors are given due credit and the following notice is retained:
#
# This work is provided "as is", with no explicit or implicit warranty what-
# soever. Use it only at your own risk. In no event may an author or contri-
# butor be held liable for any damage, directly or indirectly, that origina-
# ted through or is caused by creation or modification of this work.

MirBSD is my private tree. MirBSD does not differ very much from OpenBSD
and intentionally tracks OpenBSD. That's why it _is_ OpenBSD, just not the
official one. It's like with DarrenBSD.

At time of this writing, no advertising for MirBSD must be done,
because the advertising clause has not yet been sorted out.

http://templeofhate.com/tglaser/MirBSD/index.php
@
text
@@


1.1.1.2
log
@Sync MirBSD main source tree against OpenBSD-current,
which should be fairly stable after the Hackathon now.
@
text
@d1 1
a1 1
.\" $OpenBSD: pthreads.3,v 1.19 2003/05/18 13:06:33 jmc Exp $
d12 1
a12 1
normally just the CPU state and a signal mask.
d190 1
a190 1
The status display verbosity is controlled by the
@


1.1.1.3
log
@Import OpenBSD again, for various reasons.
@
text
@d1 1
a1 1
.\" $OpenBSD: pthreads.3,v 1.21 2004/01/02 09:28:36 jmc Exp $
a41 1
.Pp
a110 1
.Pp
a120 1
.Pp
a121 1
.Pp
a145 1
.Pp
a180 86
.Ss Thread safety
The following functions are not thread safe:
.Bd -filled
asctime(),
basename(),
catgets(),
crypt(),
ctime(),
dbm_clearerr(),
dbm_close(),
dbm_delete(),
dbm_error(),
dbm_fetch(),
dbm_firstkey(),
dbm_nextkey(),
dbm_open(),
dbm_store(),
dirname(),
dlerror(),
drand48(),
ecvt(),
encrypt(),
endgrent(),
endpwent(),
fcvt(),
ftw(),
gcvt(),
getc_unlocked(),
getchar_unlocked(),
getenv(),
getgrent(),
getgrgid(),
getgrnam(),
gethostbyaddr(),
gethostbyname(),
gethostent(),
getlogin(),
getnetbyaddr(),
getnetbyname(),
getnetent(),
getopt(),
getprotobyname(),
getprotobynumber(),
getprotoent(),
getpwent(),
getpwnam(),
getpwuid(),
getservbyname(),
getservbyport(),
getservent(),
gmtime(),
hcreate(),
hdestroy(),
hsearch(),
inet_ntoa(),
l64a(),
lgamma(),
lgammaf(),
localeconv(),
localtime(),
lrand48(),
mrand48(),
nftw(),
nl_langinfo(),
putc_unlocked(),
putchar_unlocked(),
putenv(),
rand(),
readdir(),
setenv(),
setgrent(),
setkey(),
setpwent(),
strerror(),
strtok(),
ttyname(),
unsetenv(),
.Ed
.Pp
The
.Fn ctermid
and
.Fn tmpnam
functions are not thread safe when passed a
.Dv NULL
argument.
d182 1
a182 1
.Bl -tag -width "LIBPTHREAD_DEBUG"
d187 1
a187 1
.It Ev LIBPTHREAD_DEBUG
@


1.1.1.4
log
@Import OpenBSD as of today again (seems pretty stable, I hope)

Prominent changes: more bgpd, tcpmd5; tcpdump/isakmpd fixes
@
text
@d1 1
a1 1
.\" $OpenBSD: pthreads.3,v 1.23 2004/01/15 23:17:19 marc Exp $
a39 189
.Pp
For the purpose of this document,
the functions available are grouped in the following categories.
For further information, see the individual man page for each function.
.Pp
.Bl -dash -offset indent -compact
.It
Attribute Object Routines
.It
Cancellation Routines
.It
Condition Variable Routines
.It
Data Management Routines
.It
Mutex Routines
.It
Non Portable Extensions
.It
Read/Write Lock Routines
.It
Thread Routines
.El
.Ss Attribute Object Routines
The functions available are as follows:
.Pp
.Bl -tag -width "pthread_attr_getdetachstate()" -compact
.It Fn pthread_attr_init
Initialise a threads attribute object.
.It Fn pthread_attr_destroy
Destroy a threads attribute object.
.It Fn pthread_attr_getdetachstate
Get detachstate attribute.
.It Fn pthread_attr_setdetachstate
Set detachstate attribute.
.It Fn pthread_attr_getstackaddr
Get stackaddr attribute.
.It Fn pthread_attr_setstackaddr
Set stackaddr attribute.
.It Fn pthread_attr_getstacksize
Get stacksize attribute.
.It Fn pthread_attr_setstacksize
Set stacksize attribute.
.El
.Ss Cancellation Routines
The functions available are as follows:
.Pp
.Bl -tag -width "pthread_setcancelstate()" -compact
.It Fn pthread_cancel
Cancel execution of a thread.
.It Fn pthread_cleanup_pop
Call the first cleanup routine.
.It Fn pthread_cleanup_push
Add a cleanup function for thread exit.
.It Fn pthread_setcancelstate
Set cancelability state.
.It Fn pthread_setcanceltype
Set cancelability state.
.It Fn pthread_testcancel
Set cancelability state.
.El
.Ss Condition Variable Routines
The functions available are as follows:
.Pp
.Bl -tag -width "pthread_cond_timedwait()" -compact
.It Fn pthread_cond_broadcast
Unblock all threads waiting for a condition variable.
.It Fn pthread_cond_destroy
Destroy a condition variable.
.It Fn pthread_cond_init
Create a condition variable.
.It Fn pthread_cond_signal
Unblock a thread waiting for a condition variable.
.It Fn pthread_cond_timedwait
Wait on a condition variable for a specific amount of time.
.It Fn pthread_cond_wait
Wait on a condition variable.
.El
.Ss Data Management Routines
The functions available are as follows:
.Pp
.Bl -tag -width "pthread_getspecific()" -compact
.It Fn pthread_getspecific
Get a thread-specific data value.
.It Fn pthread_setspecific
Set a thread-specific data value.
.It Fn pthread_key_create
Thread-specific data key creation.
.It Fn pthread_key_delete
Delete a thread-specific data key.
.El
.Ss Mutex Routines
The functions available are as follows:
.Pp
.Bl -tag -width "pthread_mutexattr_getprioceiling()" -compact
.It Fn pthread_mutex_destroy
Free resources allocated for a mutex.
.It Fn pthread_mutex_init
Create a mutex.
.It Fn pthread_mutex_lock
Lock a mutex.
.It Fn pthread_mutex_trylock
Attempt to lock a mutex without blocking.
.It Fn pthread_mutex_unlock
Unlock a mutex.
.It Fn pthread_mutexattr_init
Mutex attribute operations.
.It Fn pthread_mutexattr_destroy
Mutex attribute operations.
.It Fn pthread_mutexattr_getprioceiling
Mutex attribute operations.
.It Fn pthread_mutexattr_setprioceiling
Mutex attribute operations.
.It Fn pthread_mutexattr_getprotocol
Mutex attribute operations.
.It Fn pthread_mutexattr_setprotocol
Mutex attribute operations.
.It Fn pthread_mutexattr_gettype
Mutex attribute operations.
.It Fn pthread_mutexattr_settype
Mutex attribute operations.
.El
.Ss Non Portable Extensions
The functions available are as follows:
.Pp
.Bl -tag -width "pthread_set_name_np()" -compact
.It Fn pthread_main_np
Identify the main thread.
.It Fn pthread_set_name_np
Set the name of a thread.
.It Fn pthread_single_np
Switch thread scheduling mode.
.It Fn pthread_multi_np
Switch thread scheduling mode.
.It Fn pthread_stackseg_np
Return stack size and location.
.It Fn pthread_yield
Yield control of the current thread.
.El
.Ss Read/Write Lock Routines
The functions available are as follows:
.Pp
.Bl -tag -width "pthread_rwlockattr_getpshared()" -compact
.It Fn pthread_rwlock_destroy
Destroy a read/write lock.
.It Fn pthread_rwlock_init
Initialise a read/write lock.
.It Fn pthread_rwlock_rdlock
Acquire a read/write lock for reading.
.It Fn pthread_rwlock_unlock
Release a read/write lock.
.It Fn pthread_rwlock_wrlock
Acquire a read/write lock for writing.
.It Fn pthread_rwlockattr_destroy
Destroy a read/write lock.
.It Fn pthread_rwlockattr_getpshared
Get the process shared attribute.
.It Fn pthread_rwlockattr_init
Initialise a read/write lock.
.It Fn pthread_rwlockattr_setpshared
Set the process shared attribute.
.El
.Ss Thread Routines
The functions available are as follows:
.Pp
.Bl -tag -width "pthread_getconcurrency()" -compact
.It Fn pthread_create
Create a new thread.
.It Fn pthread_detach
Detach a thread.
.It Fn pthread_equal
Compare thread IDs.
.It Fn pthread_exit
Terminate the calling thread.
.It Fn pthread_getconcurrency
Get level of concurrency.
.It Fn pthread_setconcurrency
Set level of concurrency.
.It Fn pthread_join
Wait for thread termination.
.It Fn pthread_kill
Send a signal to a specific thread.
.It Fn pthread_once
Dynamic package initialisation.
.It Fn pthread_self
Get the calling thread's ID.
.It Fn pthread_sigmask
Examine/change a thread's signal mask.
.El
a285 5
.Xr pthread_attr_init 3 ,
.Xr pthread_attr_setdetachstate 3 ,
.Xr pthread_attr_setstackaddr 3 ,
.Xr pthread_attr_setstacksize 3 ,
.Xr pthread_cancel 3 ,
a302 1
.Xr pthread_main_np 3 ,
a307 1
.Xr pthread_mutexattr 3 ,
a317 1
.Xr pthread_schedparam 3 ,
d319 1
a319 8
.Xr pthread_set_name_np 3 ,
.Xr pthread_setspecific 3 ,
.Xr pthread_sigmask 3 ,
.Xr pthread_single_np 3 ,
.Xr pthread_stackseg_np 3 ,
.Xr pthread_suspend_np 3 ,
.Xr pthread_testcancel 3 ,
.Xr pthread_yield 3
@


1.1.1.5
log
@large-scale import of OpenBSD 3.5-current source base including many fixes
note: from now, we will not be binary compatible with OpenBSD apps any
longer (due to syscall numbering differences); both an OpenBSD compat and
a conversion tool for old MirOS #7 apps will be delivered later.

The src/ tree is locked from now.
@
text
@d1 1
a1 1
.\" $OpenBSD: pthreads.3,v 1.24 2004/05/01 22:15:10 marc Exp $
d165 1
a165 1
.Bl -tag -width "pthread_suspend_all_np()" -compact
a175 8
.It Fn pthread_suspend_np
Suspend given thread.
.It Fn pthread_suspend_all_np
Suspend all threads except current thread.
.It Fn pthread_resume_np
Resumes given thread.
.It Fn pthread_resume_all_np
Resumes all suspended threads.
d293 1
a293 3
.Xr pthread_suspend_np 3
or
.Xr pthread_suspend_all_np 3 .
a504 2
.Xr pthread_resume_all_np 3 ,
.Xr pthread_resume_np 3 ,
a520 1
.Xr pthread_suspend_all_np 3 ,
@


