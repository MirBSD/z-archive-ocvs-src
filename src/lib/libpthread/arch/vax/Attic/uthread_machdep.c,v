head	1.2;
access;
symbols
	cvs-200412031430:1.1.1.2
	cvs-200406230735:1.1.1.2
	cvs-200405160640:1.1.1.2
	cvs-200401271800:1.1.1.2
	cvs-200401261630:1.1.1.2
	cvs-200401021645:1.1.1.2
	cvs-200312222040:1.1.1.2
	cvs-200310020700:1.1.1.2
	cvs-200309271030:1.1.1.2
	cvs-200309251530:1.1.1.2
	cvs-200308302005:1.1.1.2
	cvs-200308171200:1.1.1.2
	ctm-3496:1.1.1.2
	ctm-3449:1.1.1.2
	ctm-3437:1.1.1.2
	cvs-200307191805:1.1.1.2
	ctm-3425:1.1.1.2
	cvs-200307091500:1.1.1.2
	ctm-3389:1.1.1.2
	cvs-200306291430:1.1.1.2
	ctm-3341:1.1.1.2
	cvs-200306082100:1.1.1.2
	ctm-3316:1.1.1.2
	ctm-3272:1.1.1.1
	ctm-3264:1.1.1.1
	cvs-200305071630:1.1.1.1
	ctm-3255:1.1.1.1
	MIRBSD_4:1.1.1.1
	ctm-3203:1.1.1.1
	cvs-20030410-1130:1.1.1.1
	ctm-3155:1.1.1.1
	ctm-3132:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.2
date	2003.05.22.14.07.36;	author tg;	state dead;
branches;
next	1.1;

1.1
date	2003.03.22.17.47.01;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.03.22.17.47.01;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2003.06.05.17.26.53;	author tg;	state Exp;
branches;
next	;


desc
@@


1.2
log
@merge CVS import stuff
@
text
@/* $OpenBSD: uthread_machdep.c,v 1.1 2003/01/23 02:43:49 marc Exp $ */
/* PUBLIC DOMAIN <marc@@snafu.org> */

/*
 * Machine-dependent thread state functions for OpenBSD/sparc.
 */

#if 0
#include <sys/types.h>
#include <machine/frame.h>
#include <machine/param.h>
#include <pthread.h>
#include "pthread_private.h"
#endif

/*
 * Given a stack and an entry function, initialise a state
 * structure that can be later switched to.
 */
void
_thread_machdep_init(struct _machdep_state* statep, void *base, int len,
		     void (*entry)(void))
{
	/* XXX implement, please */
}

void
_thread_machdep_save_float_state(struct _machdep_state* statep)
{
	/* XXX implement, please */
}

void
_thread_machdep_restore_float_state(struct _machdep_state* statep)
{
	/* XXX implement, please */
}
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Import OpenBSD 3.3 source repository from CTM 3132 the first time
This opens an OpenBSD-mirabile (aka MirBSD) repository.

### MirBSD is:
# Copyright (c) 1982-2003 by Thorsten "mirabile" Glaser <x86@@ePost.de>
# Copyright © 1968-2003  The authors of And contributors to UNIX®, the
#       C Language, BSD/Berkeley Unix; 386BSD, NetBSD 1.1 and OpenBSD.
#
# Anyone who obtained a copy of this work is hereby permitted to freely use,
# distribute, modify, merge, sublicence, give away or sell it as long as the
# authors are given due credit and the following notice is retained:
#
# This work is provided "as is", with no explicit or implicit warranty what-
# soever. Use it only at your own risk. In no event may an author or contri-
# butor be held liable for any damage, directly or indirectly, that origina-
# ted through or is caused by creation or modification of this work.

MirBSD is my private tree. MirBSD does not differ very much from OpenBSD
and intentionally tracks OpenBSD. That's why it _is_ OpenBSD, just not the
official one. It's like with DarrenBSD.

At time of this writing, no advertising for MirBSD must be done,
because the advertising clause has not yet been sorted out.

http://templeofhate.com/tglaser/MirBSD/index.php
@
text
@@


1.1.1.2
log
@Import latest OpenBSD CVS tree by CTM in order
to sync the base system and ports tree with Them.

This includes the recent licence changes as well - by
importing the changed base and re-applying the diffs
(with cvs up -j -j) they are inherited, and we're not
bound to the removed clauses any longer.
@
text
@d1 2
a2 1
/*	$OpenBSD: uthread_machdep.c,v 1.2 2003/05/27 22:59:33 miod Exp $	*/
d5 1
a5 2
 * Machine-dependent thread state functions for OpenBSD/vax
 * Written by Miodrag Vallat <miod@@openbsd.org> - placed in the public domain.
d8 4
d14 1
a14 18

/* XXX we need <machine/asm.h> but it conflicts with <machine/cdefs.h> */
#undef	_C_LABEL
#undef	WEAK_ALIAS
#include <machine/asm.h>

#define	ALIGNBYTES	3

struct frame {
	/* a CALLS frame */
	long	condition;		/* sp and fp point here */
	long	psw;
	long	ap;	/* r12 */
	long 	fp;	/* r13 */
	long	pc;	/* r15 */
	long	r[10];	/* r2 - r11 */
	long	numarg;			/* ap points here */
};
d17 1
a17 1
 * Given a stack and an entry function, initialize a state
d22 1
a22 1
    void (*entry)(void))
d24 1
a24 23
	struct frame *f;

	/* Locate the initial frame, aligned at the top of the stack */
	f = (struct frame *)(((long)base + len - sizeof *f) & ~ALIGNBYTES);
	
	/* Set up initial frame */
	f->condition = 0;
	f->psw = (1 << 29) /* CALLS */ |
	    ((R2|R3|R4|R5|R6|R7|R8|R9|R10|R11) << 16);
	f->ap = (long)&f->numarg;
	f->fp = (long)f;

	/*
	 * DANGER WILL ROBINSON! The thread entry point is a CALLS target
	 * routine, hence it starts with two bytes being the entry
	 * mask. We rely here upon the following facts:
	 * - MI code will always pass _thread_start as the entry argument
	 * - the entry mask for _thread_start is zero (no registers saved)
	 */
	f->pc = (long)entry + 2;	/* skip entry mask */
	f->numarg = 0;	/* safety */

	statep->frame = f->fp;
d30 1
a30 1
	/* nothing to do */
d36 1
a36 1
	/* nothing to do */
@

