head	1.2;
access;
symbols
	cvs-200408220000:1.1.1.1
	MIRBSD_7quater:1.1.1.1
	openssl-0_9_7d:1.1.3.1
	cvs-200405160640:1.1.1.1
	cvs-200403222025:1.1.1.1
	cvs-200403181737:1.1.1.1
	cvs-200401271800:1.1.1.1
	cvs-200401261630:1.1.1.1
	cvs-200401021645:1.1.1.1
	MIRBSD_7_ALPHA:1.1.1.1.0.6
	MIRBSD_7:1.1.1.1.0.4
	cvs-200312222040:1.1.1.1
	MIRBSD_7ter:1.1.1.1
	openssl-0_9_7c:1.1.3.1
	openssl-0_9_7b:1.1.3.1
	tg:1.1.3
	MIRBSD_7_DEV:1.1.1.1.0.2
	cvs-200310020700:1.1.1.1
	cvs-200309271030:1.1.1.1
	cvs-200309261655:1.1.1.1
	cvs-200309251530:1.1.1.1
	cvs-200308302005:1.1.1.1
	cvs-200308171200:1.1.1.1
	ctm-3496:1.1.1.1
	ctm-3449:1.1.1.1
	ctm-3437:1.1.1.1
	cvs-200307191805:1.1.1.1
	ctm-3425:1.1.1.1
	cvs-200307091500:1.1.1.1
	ctm-3389:1.1.1.1
	cvs-200306291430:1.1.1.1
	ctm-3341:1.1.1.1
	MIRBSD_5:1.1.1.1
	cvs-200306082100:1.1.1.1
	ctm-3316:1.1.1.1
	ctm-3272:1.1.1.1
	ctm-3264:1.1.1.1
	cvs-200305071630:1.1.1.1
	ctm-3255:1.1.1.1
	MIRBSD_4:1.1.1.1
	ctm-3203:1.1.1.1
	cvs-20030410-1130:1.1.1.1
	ctm-3155:1.1.1.1
	ctm-3132:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@# @;


1.2
date	2003.10.29.18.37.25;	author tg;	state dead;
branches;
next	1.1;

1.1
date	2003.03.22.17.47.43;	author tg;	state Exp;
branches
	1.1.1.1
	1.1.3.1;
next	;

1.1.1.1
date	2003.03.22.17.47.43;	author tg;	state Exp;
branches;
next	;

1.1.3.1
date	2003.10.29.16.05.14;	author tg;	state Exp;
branches;
next	;


desc
@@


1.2
log
@nuke a small bunch of files considered unused
also, note that RC5 (TM?) is only patented in U.S.of.A.
@
text
@There are two ways to build this code;

(1) Manually

(2) Using all-singing all-dancing (all-confusing) autotools, ie. autoconf,
automake, and their little friends (autoheader, etc).

=================
Building Manually
=================

There is a basic "Makefile" in this directory that gets moved out of the way and
ignored when building with autoconf et al. This Makefile is suitable for
building tunala on Linux using gcc. Any other platform probably requires some
tweaking. Here are the various bits you might need to do if you want to build
this way and the default Makefile isn't sufficient;

* Compiler: Edit the "CC" definition in Makefile

* Headers, features: tunala.h controls what happens in the non-autoconf world.
  It, by default, assumes the system has *everything* (except autoconf's
  "config.h") so if a target system is missing something it must define the
  appropriate "NO_***" symbols in CFLAGS. These include;

  - NO_HAVE_UNISTD_H, NO_HAVE_FCNTL_H, NO_HAVE_LIMITS_H
    Indicates the compiling system doesn't have (or need) these header files.
  - NO_HAVE_STRSTR, NO_HAVE_STRTOUL
    Indicates the compiling system doesn't have these functions. Replacements
    are compiled and used in breakage.c
  - NO_HAVE_SELECT, NO_HAVE_SOCKET
    Pointless symbols - these indicate select() and/or socket() are missing in
    which case the program won't compile anyway.

  If you want to specify any of these, add them with "-D" prefixed to each in
  the CFLAGS definition in Makefile.

* Compilation flags: edit DEBUG_FLAGS and/or CFLAGS directly to control the
  flags passed to the compiler. This can also be used to change the degree of
  optimisation.

* Linker flags: some systems (eg. Solaris) require extra linker flags such as;
  -ldl, -lsocket, -lnsl, etc. If unsure, bring up the man page for whichever
  function is "undefined" when the linker fails - that usually indicates what
  you need to add. Make changes to the LINK_FLAGS symbol.

* Linker command: if a different linker syntax or even a different program is
  required to link, edit the linker line directly in the "tunala:" target
  definition - it currently assumes the "CC" (compiler) program is used to link.

======================
Building Automagically
======================

Automagic building is handled courtesy of autoconf, automake, etc. There are in
fact two steps required to build, and only the first has to be done on a system
with these tools installed (and if I was prepared to bloat out the CVS
repository, I could store these extra files, but I'm not).

First step: "autogunk.sh"
-------------------------

The "./autogunk.sh" script will call all the necessary autotool commands to
create missing files and run automake and autoconf. The result is that a
"./configure" script should be generated and a "Makefile.in" generated from the
supplied "Makefile.am". NB: This script also moves the "manual" Makefile (see
above) out of the way and calls it "Makefile.plain" - the "ungunk" script
reverses this to leave the directory it was previously.

Once "ungunk" has been run, the resulting directory should be able to build on
other systems without autoconf, automake, or libtool. Which is what the second
step describes;

Second step: "./configure"
--------------------------

The second step is to run the generated "./configure" script to create a
config.h header for your system and to generate a "Makefile" (generated from
"Makefile.in") tweaked to compile on your system. This is the standard sort of
thing you see in GNU packages, for example, and the standard tricks also work.
Eg. to override "configure"'s choice of compiler, set the CC environment
variable prior to running configure, eg.

    CC=gcc ./configure

would cause "gcc" to be used even if there is an otherwise preferable (to
autoconf) native compiler on your system.

After this run "make" and it should build the "tunala" executable.

Notes
-----

- Some versions of autoconf (or automake?) generate a Makefile syntax that gives
  trouble to some "make" programs on some systems (eg. OpenBSD). If this
  happens, either build 'Manually' (see above) or use "gmake" instead of "make".
  I don't like this either but like even less the idea of sifting into all the
  script magic crud that's involved.

- On a solaris system I tried, the "configure" script specified some broken
  compiler flags in the resulting Makefile that don't even get echoed to
  stdout/err when the error happens (evil!). If this happens, go into the
  generated Makefile, find the two affected targets ("%.o:" and "%.lo"), and
  remove the offending hidden option in the $(COMPILE) line all the sludge after
  the two first lines of script (ie. after the "echo" and the "COMPILE" lines).
  NB: This will probably only function if "--disable-shared" was used, otherwise
  who knows what would result ...

@


1.1
log
@Initial revision
@
text
@@


1.1.3.1
log
@for the damned sixth time: try to import (stock) OpenSSL 0.9.7b (on which
the OpenBSD-openssl and our libcrypto and libssl are based) into a vendor
branch in order to schedule an update to OpenSSL.

CVS hates me today.
@
text
@@


1.1.1.1
log
@Import OpenBSD 3.3 source repository from CTM 3132 the first time
This opens an OpenBSD-mirabile (aka MirBSD) repository.

### MirBSD is:
# Copyright (c) 1982-2003 by Thorsten "mirabile" Glaser <x86@@ePost.de>
# Copyright © 1968-2003  The authors of And contributors to UNIX®, the
#       C Language, BSD/Berkeley Unix; 386BSD, NetBSD 1.1 and OpenBSD.
#
# Anyone who obtained a copy of this work is hereby permitted to freely use,
# distribute, modify, merge, sublicence, give away or sell it as long as the
# authors are given due credit and the following notice is retained:
#
# This work is provided "as is", with no explicit or implicit warranty what-
# soever. Use it only at your own risk. In no event may an author or contri-
# butor be held liable for any damage, directly or indirectly, that origina-
# ted through or is caused by creation or modification of this work.

MirBSD is my private tree. MirBSD does not differ very much from OpenBSD
and intentionally tracks OpenBSD. That's why it _is_ OpenBSD, just not the
official one. It's like with DarrenBSD.

At time of this writing, no advertising for MirBSD must be done,
because the advertising clause has not yet been sorted out.

http://templeofhate.com/tglaser/MirBSD/index.php
@
text
@@
