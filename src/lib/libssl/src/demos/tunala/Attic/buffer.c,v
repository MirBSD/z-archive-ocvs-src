head	1.2;
access;
symbols
	cvs-200408220000:1.1.1.1
	MIRBSD_7quater:1.1.1.1
	openssl-0_9_7d:1.1.3.1
	cvs-200405160640:1.1.1.1
	cvs-200403222025:1.1.1.1
	cvs-200403181737:1.1.1.1
	cvs-200401271800:1.1.1.1
	cvs-200401261630:1.1.1.1
	cvs-200401021645:1.1.1.1
	MIRBSD_7_ALPHA:1.1.1.1.0.6
	MIRBSD_7:1.1.1.1.0.4
	cvs-200312222040:1.1.1.1
	MIRBSD_7ter:1.1.1.1
	openssl-0_9_7c:1.1.3.1
	openssl-0_9_7b:1.1.3.1
	tg:1.1.3
	MIRBSD_7_DEV:1.1.1.1.0.2
	cvs-200310020700:1.1.1.1
	cvs-200309271030:1.1.1.1
	cvs-200309261655:1.1.1.1
	cvs-200309251530:1.1.1.1
	cvs-200308302005:1.1.1.1
	cvs-200308171200:1.1.1.1
	ctm-3496:1.1.1.1
	ctm-3449:1.1.1.1
	ctm-3437:1.1.1.1
	cvs-200307191805:1.1.1.1
	ctm-3425:1.1.1.1
	cvs-200307091500:1.1.1.1
	ctm-3389:1.1.1.1
	cvs-200306291430:1.1.1.1
	ctm-3341:1.1.1.1
	MIRBSD_5:1.1.1.1
	cvs-200306082100:1.1.1.1
	ctm-3316:1.1.1.1
	ctm-3272:1.1.1.1
	ctm-3264:1.1.1.1
	cvs-200305071630:1.1.1.1
	ctm-3255:1.1.1.1
	MIRBSD_4:1.1.1.1
	ctm-3203:1.1.1.1
	cvs-20030410-1130:1.1.1.1
	ctm-3155:1.1.1.1
	ctm-3132:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.2
date	2003.10.29.18.37.32;	author tg;	state dead;
branches;
next	1.1;

1.1
date	2003.03.22.17.47.43;	author tg;	state Exp;
branches
	1.1.1.1
	1.1.3.1;
next	;

1.1.1.1
date	2003.03.22.17.47.43;	author tg;	state Exp;
branches;
next	;

1.1.3.1
date	2003.10.29.16.05.11;	author tg;	state Exp;
branches;
next	;


desc
@@


1.2
log
@nuke a small bunch of files considered unused
also, note that RC5 (TM?) is only patented in U.S.of.A.
@
text
@#include "tunala.h"

#ifndef NO_BUFFER

void buffer_init(buffer_t *buf)
{
	buf->used = 0;
	buf->total_in = buf->total_out = 0;
}

void buffer_close(buffer_t *buf)
{
	/* Our data is static - nothing needs "release", just reset it */
	buf->used = 0;
}

/* Code these simple ones in compact form */
unsigned int buffer_used(buffer_t *buf) {
	return buf->used; }
unsigned int buffer_unused(buffer_t *buf) {
	return (MAX_DATA_SIZE - buf->used); }
int buffer_full(buffer_t *buf) {
	return (buf->used == MAX_DATA_SIZE ? 1 : 0); }
int buffer_notfull(buffer_t *buf) {
	return (buf->used < MAX_DATA_SIZE ? 1 : 0); }
int buffer_empty(buffer_t *buf) {
	return (buf->used == 0 ? 1 : 0); }
int buffer_notempty(buffer_t *buf) {
	return (buf->used > 0 ? 1 : 0); }
unsigned long buffer_total_in(buffer_t *buf) {
	return buf->total_in; }
unsigned long buffer_total_out(buffer_t *buf) {
	return buf->total_out; }

/* These 3 static (internal) functions don't adjust the "total" variables as
 * it's not sure when they're called how it should be interpreted. Only the
 * higher-level "buffer_[to|from]_[fd|SSL|BIO]" functions should alter these
 * values. */
#if 0 /* To avoid "unused" warnings */
static unsigned int buffer_adddata(buffer_t *buf, const unsigned char *ptr,
		unsigned int size)
{
	unsigned int added = MAX_DATA_SIZE - buf->used;
	if(added > size)
		added = size;
	if(added == 0)
		return 0;
	memcpy(buf->data + buf->used, ptr, added);
	buf->used += added;
	buf->total_in += added;
	return added;
}

static unsigned int buffer_tobuffer(buffer_t *to, buffer_t *from, int cap)
{
	unsigned int moved, tomove = from->used;
	if((int)tomove > cap)
		tomove = cap;
	if(tomove == 0)
		return 0;
	moved = buffer_adddata(to, from->data, tomove);
	if(moved == 0)
		return 0;
	buffer_takedata(from, NULL, moved);
	return moved;
}
#endif

static unsigned int buffer_takedata(buffer_t *buf, unsigned char *ptr,
		unsigned int size)
{
	unsigned int taken = buf->used;
	if(taken > size)
		taken = size;
	if(taken == 0)
		return 0;
	if(ptr)
		memcpy(ptr, buf->data, taken);
	buf->used -= taken;
	/* Do we have to scroll? */
	if(buf->used > 0)
		memmove(buf->data, buf->data + taken, buf->used);
	return taken;
}

#ifndef NO_IP

int buffer_from_fd(buffer_t *buf, int fd)
{
	int toread = buffer_unused(buf);
	if(toread == 0)
		/* Shouldn't be called in this case! */
		abort();
	toread = read(fd, buf->data + buf->used, toread);
	if(toread > 0) {
		buf->used += toread;
		buf->total_in += toread;
	}
	return toread;
}

int buffer_to_fd(buffer_t *buf, int fd)
{
	int towrite = buffer_used(buf);
	if(towrite == 0)
		/* Shouldn't be called in this case! */
		abort();
	towrite = write(fd, buf->data, towrite);
	if(towrite > 0) {
		buffer_takedata(buf, NULL, towrite);
		buf->total_out += towrite;
	}
	return towrite;
}

#endif /* !defined(NO_IP) */

#ifndef NO_OPENSSL

static void int_ssl_check(SSL *s, int ret)
{
	int e = SSL_get_error(s, ret);
	switch(e) {
		/* These seem to be harmless and already "dealt with" by our
		 * non-blocking environment. NB: "ZERO_RETURN" is the clean
		 * "error" indicating a successfully closed SSL tunnel. We let
		 * this happen because our IO loop should not appear to have
		 * broken on this condition - and outside the IO loop, the
		 * "shutdown" state is checked. */
	case SSL_ERROR_NONE:
	case SSL_ERROR_WANT_READ:
	case SSL_ERROR_WANT_WRITE:
	case SSL_ERROR_WANT_X509_LOOKUP:
	case SSL_ERROR_ZERO_RETURN:
		return;
		/* These seem to be indications of a genuine error that should
		 * result in the SSL tunnel being regarded as "dead". */
	case SSL_ERROR_SYSCALL:
	case SSL_ERROR_SSL:
		SSL_set_app_data(s, (char *)1);
		return;
	default:
		break;
	}
	/* For any other errors that (a) exist, and (b) crop up - we need to
	 * interpret what to do with them - so "politely inform" the caller that
	 * the code needs updating here. */
	abort();
}

void buffer_from_SSL(buffer_t *buf, SSL *ssl)
{
	int ret;
	if(!ssl || buffer_full(buf))
		return;
	ret = SSL_read(ssl, buf->data + buf->used, buffer_unused(buf));
	if(ret > 0) {
		buf->used += ret;
		buf->total_in += ret;
	}
	if(ret < 0)
		int_ssl_check(ssl, ret);
}

void buffer_to_SSL(buffer_t *buf, SSL *ssl)
{
	int ret;
	if(!ssl || buffer_empty(buf))
		return;
	ret = SSL_write(ssl, buf->data, buf->used);
	if(ret > 0) {
		buffer_takedata(buf, NULL, ret);
		buf->total_out += ret;
	}
	if(ret < 0)
		int_ssl_check(ssl, ret);
}

void buffer_from_BIO(buffer_t *buf, BIO *bio)
{
	int ret;
	if(!bio || buffer_full(buf))
		return;
	ret = BIO_read(bio, buf->data + buf->used, buffer_unused(buf));
	if(ret > 0) {
		buf->used += ret;
		buf->total_in += ret;
	}
}

void buffer_to_BIO(buffer_t *buf, BIO *bio)
{
	int ret;
	if(!bio || buffer_empty(buf))
		return;
	ret = BIO_write(bio, buf->data, buf->used);
	if(ret > 0) {
		buffer_takedata(buf, NULL, ret);
		buf->total_out += ret;
	}
}

#endif /* !defined(NO_OPENSSL) */

#endif /* !defined(NO_BUFFER) */
@


1.1
log
@Initial revision
@
text
@@


1.1.3.1
log
@for the damned sixth time: try to import (stock) OpenSSL 0.9.7b (on which
the OpenBSD-openssl and our libcrypto and libssl are based) into a vendor
branch in order to schedule an update to OpenSSL.

CVS hates me today.
@
text
@@


1.1.1.1
log
@Import OpenBSD 3.3 source repository from CTM 3132 the first time
This opens an OpenBSD-mirabile (aka MirBSD) repository.

### MirBSD is:
# Copyright (c) 1982-2003 by Thorsten "mirabile" Glaser <x86@@ePost.de>
# Copyright © 1968-2003  The authors of And contributors to UNIX®, the
#       C Language, BSD/Berkeley Unix; 386BSD, NetBSD 1.1 and OpenBSD.
#
# Anyone who obtained a copy of this work is hereby permitted to freely use,
# distribute, modify, merge, sublicence, give away or sell it as long as the
# authors are given due credit and the following notice is retained:
#
# This work is provided "as is", with no explicit or implicit warranty what-
# soever. Use it only at your own risk. In no event may an author or contri-
# butor be held liable for any damage, directly or indirectly, that origina-
# ted through or is caused by creation or modification of this work.

MirBSD is my private tree. MirBSD does not differ very much from OpenBSD
and intentionally tracks OpenBSD. That's why it _is_ OpenBSD, just not the
official one. It's like with DarrenBSD.

At time of this writing, no advertising for MirBSD must be done,
because the advertising clause has not yet been sorted out.

http://templeofhate.com/tglaser/MirBSD/index.php
@
text
@@
