head	1.2;
access;
symbols
	cvs-200408220000:1.1.1.2
	MIRBSD_7quater:1.1.1.2
	openssl-0_9_7d:1.1.3.2
	cvs-200405160640:1.1.1.2
	cvs-200403222025:1.1.1.2
	cvs-200403181737:1.1.1.2
	cvs-200401271800:1.1.1.2
	cvs-200401261630:1.1.1.2
	cvs-200401021645:1.1.1.2
	MIRBSD_7_ALPHA:1.1.1.2.0.6
	MIRBSD_7:1.1.1.2.0.4
	cvs-200312222040:1.1.1.2
	MIRBSD_7ter:1.1.1.2
	openssl-0_9_7c:1.1.3.2
	openssl-0_9_7b:1.1.3.1
	tg:1.1.3
	MIRBSD_7_DEV:1.1.1.2.0.2
	cvs-200310020700:1.1.1.2
	cvs-200309271030:1.1.1.2
	cvs-200309261655:1.1.1.2
	cvs-200309251530:1.1.1.2
	cvs-200308302005:1.1.1.2
	cvs-200308171200:1.1.1.2
	ctm-3496:1.1.1.2
	ctm-3449:1.1.1.2
	ctm-3437:1.1.1.2
	cvs-200307191805:1.1.1.2
	ctm-3425:1.1.1.2
	cvs-200307091500:1.1.1.2
	ctm-3389:1.1.1.2
	cvs-200306291430:1.1.1.2
	ctm-3341:1.1.1.2
	MIRBSD_5:1.1.1.2
	cvs-200306082100:1.1.1.2
	ctm-3316:1.1.1.2
	ctm-3272:1.1.1.2
	ctm-3264:1.1.1.2
	cvs-200305071630:1.1.1.2
	ctm-3255:1.1.1.2
	MIRBSD_4:1.1.1.1
	ctm-3203:1.1.1.1
	cvs-20030410-1130:1.1.1.1
	ctm-3155:1.1.1.1
	ctm-3132:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.2
date	2003.10.29.18.36.57;	author tg;	state dead;
branches;
next	1.1;

1.1
date	2003.03.22.17.47.43;	author tg;	state Exp;
branches
	1.1.1.1
	1.1.3.1;
next	;

1.1.1.1
date	2003.03.22.17.47.43;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2003.05.05.20.58.13;	author tg;	state Exp;
branches;
next	;

1.1.3.1
date	2003.10.29.16.04.46;	author tg;	state Exp;
branches;
next	1.1.3.2;

1.1.3.2
date	2003.10.29.16.28.07;	author tg;	state Exp;
branches;
next	;


desc
@@


1.2
log
@nuke a small bunch of files considered unused
also, note that RC5 (TM?) is only patented in U.S.of.A.
@
text
@/* File : /crypto/engine/vendor_defns/hw_zencod.h */
/* ====================================================================
 * Written by Donnat Frederic (frederic.donnat@@zencod.com) from ZENCOD
 * for "zencod" ENGINE integration in OpenSSL project.
 */


 #ifndef	_HW_ZENCOD_H_
#define	_HW_ZENCOD_H_

#include <stdio.h>

#ifdef	__cplusplus
extern "C" {
#endif	/* __cplusplus */

#define ZENBRIDGE_MAX_KEYSIZE_RSA	2048
#define ZENBRIDGE_MAX_KEYSIZE_RSA_CRT	1024
#define ZENBRIDGE_MAX_KEYSIZE_DSA_SIGN	1024
#define ZENBRIDGE_MAX_KEYSIZE_DSA_VRFY	1024

/* Library version computation */
#define	ZENBRIDGE_VERSION_MAJOR(x)	(((x) >> 16) | 0xff)
#define	ZENBRIDGE_VERSION_MINOR(x)	(((x) >>  8) | 0xff)
#define	ZENBRIDGE_VERSION_PATCH(x)	(((x) >>  0) | 0xff)
#define	ZENBRIDGE_VERSION(x, y, z)		((x) << 16 | (y) << 8 | (z))

/*
 * Memory type
 */
typedef struct zencod_number_s {
	unsigned long len;
	unsigned char *data;
} zen_nb_t;

#define KEY	zen_nb_t


/*
 * Misc
 */
typedef int t_zencod_lib_version (void);
typedef int t_zencod_hw_version (void);
typedef int t_zencod_test (void);
typedef int t_zencod_dump_key (FILE *stream, char *msg, KEY *key);


/*
 * Key managment tools
 */
typedef KEY *t_zencod_new_number (unsigned long len, unsigned char *data);
typedef int t_zencod_init_number (KEY *n, unsigned long len, unsigned char *data);
typedef unsigned long t_zencod_bytes2bits (unsigned char *n, unsigned long bytes);
typedef unsigned long t_zencod_bits2bytes (unsigned long bits);


/*
 * RSA API
 */
/* Compute modular exponential : y = x**e | n */
typedef int t_zencod_rsa_mod_exp (KEY *y, KEY *x, KEY *n, KEY *e);
/* Compute modular exponential : y1 = (x | p)**edp | p, y2 = (x | p)**edp | p, y = y2 + (qinv * (y1 - y2) | p) * q */
typedef int t_zencod_rsa_mod_exp_crt (KEY *y, KEY *x, KEY *p, KEY *q,
					KEY *edp, KEY *edq, KEY *qinv);


/*
 * DSA API
 */
typedef int t_zencod_dsa_do_sign (unsigned int hash, KEY *data, KEY *random,
				    KEY *p, KEY *q, KEY *g, KEY *x, KEY *r, KEY *s);
typedef int t_zencod_dsa_do_verify (unsigned int hash, KEY *data,
				      KEY *p, KEY *q, KEY *g, KEY *y,
				      KEY *r, KEY *s, KEY *v);


/*
 * DH API
 */
 /* Key generation : compute public value y = g**x | n */
typedef int t_zencod_dh_generate_key (KEY *y, KEY *x, KEY *g, KEY *n, int gen_x);
typedef int t_zencod_dh_compute_key (KEY *k, KEY *y, KEY *x, KEY *n);


/*
 * RNG API
 */
#define ZENBRIDGE_RNG_DIRECT		0
#define ZENBRIDGE_RNG_SHA1		1
typedef int t_zencod_rand_bytes (KEY *rand, unsigned int flags);


/*
 * Math API
 */
typedef int t_zencod_math_mod_exp (KEY *r, KEY *a, KEY *e, KEY *n);




/*
 * Symetric API
 */
/* Define a data structure for digests operations */
typedef struct ZEN_data_st
{
	unsigned int HashBufferSize ;
	unsigned char *HashBuffer ;
} ZEN_MD_DATA ;

/*
 * Functions for Digest (MD5, SHA1) stuff
 */
/* output : output data buffer */
/* input : input data buffer */
/* algo : hash algorithm, MD5 or SHA1 */
/* typedef int t_zencod_hash ( KEY *output, const KEY *input, int algo ) ;
 * typedef int t_zencod_sha_hash ( KEY *output, const KEY *input, int algo ) ;
 */
/* For now separate this stuff that mad it easier to test */
typedef int t_zencod_md5_init ( ZEN_MD_DATA *data ) ;
typedef int t_zencod_md5_update ( ZEN_MD_DATA *data, const KEY *input ) ;
typedef int t_zencod_md5_do_final ( ZEN_MD_DATA *data, KEY *output ) ;

typedef int t_zencod_sha1_init ( ZEN_MD_DATA *data ) ;
typedef int t_zencod_sha1_update ( ZEN_MD_DATA *data, const KEY *input ) ;
typedef int t_zencod_sha1_do_final ( ZEN_MD_DATA *data, KEY *output ) ;


/*
 * Functions for Cipher (RC4, DES, 3DES) stuff
 */
/* output : output data buffer */
/* input : input data buffer */
/* key : rc4 key data */
/* index_1 : value of index x from RC4 key structure */
/* index_2 : value of index y from RC4 key structure */
/* Be carefull : RC4 key should be expanded before calling this method (Should we provide an expand function ??) */
typedef int t_zencod_rc4_cipher ( KEY *output, const KEY *input, const KEY *key,
		unsigned char *index_1, unsigned char *index_2, int mode ) ;

/* output : output data buffer */
/* input : input data buffer */
/* key_1 : des first key data */
/* key_2 : des second key data */
/* key_3 : des third key data */
/* iv : initial vector */
/* mode : xdes mode (encrypt or decrypt) */
/* Be carefull : In DES mode key_1 = key_2 = key_3 (as far as i can see !!) */
typedef int t_zencod_xdes_cipher ( KEY *output, const KEY *input, const KEY *key_1,
		const KEY *key_2, const KEY *key_3, const KEY *iv, int mode ) ;


#undef KEY

#ifdef	__cplusplus
}
#endif	/* __cplusplus */

#endif	/* !_HW_ZENCOD_H_ */
@


1.1
log
@Initial revision
@
text
@@


1.1.3.1
log
@for the damned sixth time: try to import (stock) OpenSSL 0.9.7b (on which
the OpenBSD-openssl and our libcrypto and libssl are based) into a vendor
branch in order to schedule an update to OpenSSL.

CVS hates me today.
@
text
@@


1.1.3.2
log
@Okay. Now get OpenSSL-0.9.7c (latest as of 30 Sep 2003), from a german server
@
text
@d49 1
a49 1
 * Key management tools
@


1.1.1.1
log
@Import OpenBSD 3.3 source repository from CTM 3132 the first time
This opens an OpenBSD-mirabile (aka MirBSD) repository.

### MirBSD is:
# Copyright (c) 1982-2003 by Thorsten "mirabile" Glaser <x86@@ePost.de>
# Copyright © 1968-2003  The authors of And contributors to UNIX®, the
#       C Language, BSD/Berkeley Unix; 386BSD, NetBSD 1.1 and OpenBSD.
#
# Anyone who obtained a copy of this work is hereby permitted to freely use,
# distribute, modify, merge, sublicence, give away or sell it as long as the
# authors are given due credit and the following notice is retained:
#
# This work is provided "as is", with no explicit or implicit warranty what-
# soever. Use it only at your own risk. In no event may an author or contri-
# butor be held liable for any damage, directly or indirectly, that origina-
# ted through or is caused by creation or modification of this work.

MirBSD is my private tree. MirBSD does not differ very much from OpenBSD
and intentionally tracks OpenBSD. That's why it _is_ OpenBSD, just not the
official one. It's like with DarrenBSD.

At time of this writing, no advertising for MirBSD must be done,
because the advertising clause has not yet been sorted out.

http://templeofhate.com/tglaser/MirBSD/index.php
@
text
@@


1.1.1.2
log
@sync the libraries as well before doing flag day
@
text
@d49 1
a49 1
 * Key management tools
@

