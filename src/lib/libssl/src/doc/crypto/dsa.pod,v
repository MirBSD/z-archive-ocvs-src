head	1.2;
branch	1.1.1;
access;
symbols
	tg-mergetmp-mirosx-1:1.1.1.1
	tg-mergefixes-1-branch:1.1.1.1.0.10
	tg-mergefixes-1-base:1.1.1.1
	MIROS_X:1.1.1.1.0.8
	MIROS_X_BASE:1.1.1.1
	tg-mergetmp-3:1.1.1.1
	MIRBSD_XP_MIRPPC:1.2.0.4
	MIRBSD_XP_SPARC_BASE:1.2
	MIRBSD_XP_SPARC:1.2.0.2
	cvs-200408220000:1.1.1.1
	MIRBSD_7quater:1.1.1.1
	openssl-0_9_7d:1.1.3.1
	cvs-200405160640:1.1.1.1
	cvs-200403222025:1.1.1.1
	cvs-200403181737:1.1.1.1
	cvs-200401271800:1.1.1.1
	cvs-200401261630:1.1.1.1
	cvs-200401021645:1.1.1.1
	MIRBSD_7_ALPHA:1.1.1.1.0.6
	MIRBSD_7:1.1.1.1.0.4
	cvs-200312222040:1.1.1.1
	MIRBSD_7ter:1.1.1.1
	openssl-0_9_7c:1.1.3.1
	openssl-0_9_7b:1.1.3.1
	tg:1.1.3
	MIRBSD_7_DEV:1.1.1.1.0.2
	cvs-200310020700:1.1.1.1
	cvs-200309271030:1.1.1.1
	cvs-200309261655:1.1.1.1
	cvs-200309251530:1.1.1.1
	cvs-200308302005:1.1.1.1
	cvs-200308171200:1.1.1.1
	ctm-3496:1.1.1.1
	ctm-3449:1.1.1.1
	ctm-3437:1.1.1.1
	cvs-200307191805:1.1.1.1
	ctm-3425:1.1.1.1
	cvs-200307091500:1.1.1.1
	ctm-3389:1.1.1.1
	cvs-200306291430:1.1.1.1
	ctm-3341:1.1.1.1
	MIRBSD_5:1.1.1.1
	cvs-200306082100:1.1.1.1
	ctm-3316:1.1.1.1
	ctm-3272:1.1.1.1
	ctm-3264:1.1.1.1
	cvs-200305071630:1.1.1.1
	ctm-3255:1.1.1.1
	MIRBSD_4:1.1.1.1
	ctm-3203:1.1.1.1
	cvs-20030410-1130:1.1.1.1
	ctm-3155:1.1.1.1
	ctm-3132:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@# @;


1.2
date	2003.10.29.18.57.06;	author tg;	state Stab;
branches;
next	1.1;

1.1
date	2003.03.22.17.47.47;	author tg;	state Exp;
branches
	1.1.1.1
	1.1.3.1;
next	;

1.1.1.1
date	2003.03.22.17.47.47;	author tg;	state Exp;
branches;
next	;

1.1.3.1
date	2003.10.29.16.07.08;	author tg;	state Exp;
branches;
next	;


desc
@@


1.2
log
@bring back in the OpenBSD changes (most of them, that is)
and some MirOS local changes
@
text
@=pod

=head1 NAME

dsa - Digital Signature Algorithm

=head1 SYNOPSIS

 #include <openssl/dsa.h>
 #include <openssl/engine.h>

 DSA *	DSA_new(void);
 void	DSA_free(DSA *dsa);

 int	DSA_size(const DSA *dsa);

 DSA *	DSA_generate_parameters(int bits, unsigned char *seed,
                int seed_len, int *counter_ret, unsigned long *h_ret,
		void (*callback)(int, int, void *), void *cb_arg);

 DH *	DSA_dup_DH(const DSA *r);

 int	DSA_generate_key(DSA *dsa);

 int	DSA_sign(int dummy, const unsigned char *dgst, int len,
		unsigned char *sigret, unsigned int *siglen, DSA *dsa);
 int	DSA_sign_setup(DSA *dsa, BN_CTX *ctx, BIGNUM **kinvp,
                BIGNUM **rp);
 int	DSA_verify(int dummy, const unsigned char *dgst, int len,
		const unsigned char *sigbuf, int siglen, DSA *dsa);

 void DSA_set_default_method(const DSA_METHOD *meth);
 const DSA_METHOD *DSA_get_default_method(void);
 int DSA_set_method(DSA *dsa, const DSA_METHOD *meth);
 DSA *DSA_new_method(ENGINE *engine);
 const DSA_METHOD *DSA_OpenSSL(void);

 int DSA_get_ex_new_index(long argl, char *argp, int (*new_func)(),
	     int (*dup_func)(), void (*free_func)());
 int DSA_set_ex_data(DSA *d, int idx, char *arg);
 char *DSA_get_ex_data(DSA *d, int idx);

 DSA_SIG *DSA_SIG_new(void);
 void	DSA_SIG_free(DSA_SIG *a);
 int	i2d_DSA_SIG(const DSA_SIG *a, unsigned char **pp);
 DSA_SIG *d2i_DSA_SIG(DSA_SIG **v, unsigned char **pp, long length);

 DSA_SIG *DSA_do_sign(const unsigned char *dgst, int dlen, DSA *dsa);
 int	DSA_do_verify(const unsigned char *dgst, int dgst_len,
	     DSA_SIG *sig, DSA *dsa);

 DSA *	d2i_DSAPublicKey(DSA **a, unsigned char **pp, long length);
 DSA *	d2i_DSAPrivateKey(DSA **a, unsigned char **pp, long length);
 DSA * 	d2i_DSAparams(DSA **a, unsigned char **pp, long length);
 int	i2d_DSAPublicKey(const DSA *a, unsigned char **pp);
 int 	i2d_DSAPrivateKey(const DSA *a, unsigned char **pp);
 int	i2d_DSAparams(const DSA *a,unsigned char **pp);

 int	DSAparams_print(BIO *bp, const DSA *x);
 int	DSAparams_print_fp(FILE *fp, const DSA *x);
 int	DSA_print(BIO *bp, const DSA *x, int off);
 int	DSA_print_fp(FILE *bp, const DSA *x, int off);

=head1 DESCRIPTION

These functions implement the Digital Signature Algorithm (DSA).  The
generation of shared DSA parameters is described in
L<DSA_generate_parameters(3)|DSA_generate_parameters(3)>;
L<DSA_generate_key(3)|DSA_generate_key(3)> describes how to
generate a signature key. Signature generation and verification are
described in L<DSA_sign(3)|DSA_sign(3)>.

The B<DSA> structure consists of several BIGNUM components.

 struct
        {
        BIGNUM *p;		// prime number (public)
        BIGNUM *q;		// 160-bit subprime, q | p-1 (public)
        BIGNUM *g;		// generator of subgroup (public)
        BIGNUM *priv_key;	// private key x
        BIGNUM *pub_key;	// public key y = g^x
        // ...
        }
 DSA;

In public keys, B<priv_key> is NULL.

Note that DSA keys may use non-standard B<DSA_METHOD> implementations,
either directly or by the use of B<ENGINE> modules. In some cases (eg. an
ENGINE providing support for hardware-embedded keys), these BIGNUM values
will not be used by the implementation or may be used for alternative data
storage. For this reason, applications should generally avoid using DSA
structure elements directly and instead use API functions to query or
modify keys.

=head1 CONFORMING TO

US Federal Information Processing Standard FIPS 186 (Digital Signature
Standard, DSS), ANSI X9.30

=head1 SEE ALSO

L<bn(3)|bn(3)>, L<dh(3)|dh(3)>, L<err(3)|err(3)>, L<rand(3)|rand(3)>,
L<rsa(3)|rsa(3)>, L<SHA1(3)|SHA1(3)>, L<DSA_new(3)|DSA_new(3)>,
L<DSA_size(3)|DSA_size(3)>,
L<DSA_generate_parameters(3)|DSA_generate_parameters(3)>,
L<DSA_dup_DH(3)|DSA_dup_DH(3)>,
L<DSA_generate_key(3)|DSA_generate_key(3)>,
L<DSA_sign(3)|DSA_sign(3)>, L<DSA_set_method(3)|DSA_set_method(3)>,
L<DSA_get_ex_new_index(3)|DSA_get_ex_new_index(3)>,
L<RSA_print(3)|RSA_print(3)>

=cut
@


1.1
log
@Initial revision
@
text
@@


1.1.3.1
log
@for the damned sixth time: try to import (stock) OpenSSL 0.9.7b (on which
the OpenBSD-openssl and our libcrypto and libssl are based) into a vendor
branch in order to schedule an update to OpenSSL.

CVS hates me today.
@
text
@d104 1
a104 2
L<rsa(3)|rsa(3)>, L<sha(3)|sha(3)>, L<engine(3)|engine(3)>,
L<DSA_new(3)|DSA_new(3)>,
@


1.1.1.1
log
@Import OpenBSD 3.3 source repository from CTM 3132 the first time
This opens an OpenBSD-mirabile (aka MirBSD) repository.

### MirBSD is:
# Copyright (c) 1982-2003 by Thorsten "mirabile" Glaser <x86@@ePost.de>
# Copyright © 1968-2003  The authors of And contributors to UNIX®, the
#       C Language, BSD/Berkeley Unix; 386BSD, NetBSD 1.1 and OpenBSD.
#
# Anyone who obtained a copy of this work is hereby permitted to freely use,
# distribute, modify, merge, sublicence, give away or sell it as long as the
# authors are given due credit and the following notice is retained:
#
# This work is provided "as is", with no explicit or implicit warranty what-
# soever. Use it only at your own risk. In no event may an author or contri-
# butor be held liable for any damage, directly or indirectly, that origina-
# ted through or is caused by creation or modification of this work.

MirBSD is my private tree. MirBSD does not differ very much from OpenBSD
and intentionally tracks OpenBSD. That's why it _is_ OpenBSD, just not the
official one. It's like with DarrenBSD.

At time of this writing, no advertising for MirBSD must be done,
because the advertising clause has not yet been sorted out.

http://templeofhate.com/tglaser/MirBSD/index.php
@
text
@@
