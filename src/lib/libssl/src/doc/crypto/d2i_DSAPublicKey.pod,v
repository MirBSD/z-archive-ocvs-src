head	1.1;
branch	1.1.1;
access;
symbols
	tg-mergetmp-mirosx-1:1.1.1.2
	tg-mergefixes-1-branch:1.1.1.2.0.4
	tg-mergefixes-1-base:1.1.1.2
	MIROS_X:1.1.1.2.0.2
	MIROS_X_BASE:1.1.1.2
	tg-mergetmp-3:1.1.1.2
	MIRBSD_XP_MIRPPC:1.1.3.2.0.4
	MIRBSD_XP_SPARC_BASE:1.1.3.2
	MIRBSD_XP_SPARC:1.1.3.2.0.2
	cvs-200408220000:1.1.1.2
	MIRBSD_7quater:1.1.1.1
	openssl-0_9_7d:1.1.3.2
	cvs-200405160640:1.1.1.2
	cvs-200403222025:1.1.1.1
	cvs-200403181737:1.1.1.1
	cvs-200401271800:1.1.1.1
	cvs-200401261630:1.1.1.1
	cvs-200401021645:1.1.1.1
	MIRBSD_7_ALPHA:1.1.1.1.0.6
	MIRBSD_7:1.1.1.1.0.4
	cvs-200312222040:1.1.1.1
	MIRBSD_7ter:1.1.1.1
	openssl-0_9_7c:1.1.3.1
	openssl-0_9_7b:1.1.3.1
	tg:1.1.3
	MIRBSD_7_DEV:1.1.1.1.0.2
	cvs-200310020700:1.1.1.1
	cvs-200309271030:1.1.1.1
	cvs-200309261655:1.1.1.1
	cvs-200309251530:1.1.1.1
	cvs-200308302005:1.1.1.1
	cvs-200308171200:1.1.1.1
	ctm-3496:1.1.1.1
	ctm-3449:1.1.1.1
	ctm-3437:1.1.1.1
	cvs-200307191805:1.1.1.1
	ctm-3425:1.1.1.1
	cvs-200307091500:1.1.1.1
	ctm-3389:1.1.1.1
	cvs-200306291430:1.1.1.1
	ctm-3341:1.1.1.1
	MIRBSD_5:1.1.1.1
	cvs-200306082100:1.1.1.1
	ctm-3316:1.1.1.1
	ctm-3272:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@# @;


1.1
date	2003.05.21.19.01.02;	author tg;	state Exp;
branches
	1.1.1.1
	1.1.3.1;
next	;

1.1.1.1
date	2003.05.21.19.01.02;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2004.05.16.09.29.03;	author tg;	state Exp;
branches;
next	;

1.1.3.1
date	2003.10.29.16.06.47;	author tg;	state Exp;
branches;
next	1.1.3.2;

1.1.3.2
date	2004.05.23.17.10.58;	author tg;	state Stab;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@=pod

=head1 NAME

d2i_DSAPublicKey, i2d_DSAPublicKey, d2i_DSAPrivateKey, i2d_DSAPrivateKey,
d2i_DSA_PUBKEY, i2d_DSA_PUBKEY, d2i_DSA_SIG, i2d_DSA_SIG - DSA key encoding
and parsing functions.

=head1 SYNOPSIS

 #include <openssl/dsa.h>

 DSA * d2i_DSAPublicKey(DSA **a, const unsigned char **pp, long length);

 int i2d_DSAPublicKey(const DSA *a, unsigned char **pp);

 DSA * d2i_DSA_PUBKEY(DSA **a, const unsigned char **pp, long length);

 int i2d_DSA_PUBKEY(const DSA *a, unsigned char **pp);

 DSA * d2i_DSAPrivateKey(DSA **a, const unsigned char **pp, long length);

 int i2d_DSAPrivateKey(const DSA *a, unsigned char **pp);

 DSA * d2i_DSAparams(DSA **a, const unsigned char **pp, long length);

 int i2d_DSAparams(const DSA *a, unsigned char **pp);

 DSA * d2i_DSA_SIG(DSA_SIG **a, const unsigned char **pp, long length);

 int i2d_DSA_SIG(const DSA_SIG *a, unsigned char **pp);

=head1 DESCRIPTION

d2i_DSAPublicKey() and i2d_DSAPublicKey() decode and encode the DSA public key
components structure.

d2i_DSA_PUKEY() and i2d_DSA_PUKEY() decode and encode an DSA public key using a
SubjectPublicKeyInfo (certificate public key) structure.

d2i_DSAPrivateKey(), i2d_DSAPrivateKey() decode and encode the DSA private key
components.

d2i_DSAparams(), i2d_DSAparams() decode and encode the DSA parameters using
a B<Dss-Parms> structure as defined in RFC2459.

d2i_DSA_SIG(), i2d_DSA_SIG() decode and encode a DSA signature using a
B<Dss-Sig-Value> structure as defined in RFC2459.

The usage of all of these functions is similar to the d2i_X509() and
i2d_X509() described in the L<d2i_X509(3)|d2i_X509(3)> manual page.

=head1 NOTES

The B<DSA> structure passed to the private key encoding functions should have
all the private key components present.

The data encoded by the private key functions is unencrypted and therefore 
offers no private key security.

The B<DSA_PUBKEY> functions should be used in preference to the B<DSAPublicKey>
functions when encoding public keys because they use a standard format.

The B<DSAPublicKey> functions use an non standard format the actual data encoded
depends on the value of the B<write_params> field of the B<a> key parameter.
If B<write_params> is zero then only the B<pub_key> field is encoded as an
B<INTEGER>. If B<write_params> is 1 then a B<SEQUENCE> consisting of the
B<p>, B<q>, B<g> and B<pub_key> respectively fields are encoded.

The B<DSAPrivateKey> functions also use a non standard structure consiting
consisting of a SEQUENCE containing the B<p>, B<q>, B<g> and B<pub_key> and
B<priv_key> fields respectively.

=head1 SEE ALSO

L<d2i_X509(3)|d2i_X509(3)>

=head1 HISTORY

TBA

=cut
@


1.1.3.1
log
@for the damned sixth time: try to import (stock) OpenSSL 0.9.7b (on which
the OpenBSD-openssl and our libcrypto and libssl are based) into a vendor
branch in order to schedule an update to OpenSSL.

CVS hates me today.
@
text
@@


1.1.3.2
log
@Import OpenSSL 0.9.7d into vendor branch to ease future updates
OpenBSD has patched libssl up to 0.9.7d as well.
@
text
@a11 1
 #include <openssl/x509.h>
d38 2
a39 2
d2i_DSA_PUBKEY() and i2d_DSA_PUBKEY() decode and encode an DSA public key using
a SubjectPublicKeyInfo (certificate public key) structure.
@


1.1.1.1
log
@Sync MirBSD main source tree against OpenBSD-current,
which should be fairly stable after the Hackathon now.
@
text
@@


1.1.1.2
log
@large-scale import of OpenBSD 3.5-current source base including many fixes
note: from now, we will not be binary compatible with OpenBSD apps any
longer (due to syscall numbering differences); both an OpenBSD compat and
a conversion tool for old MirOS #7 apps will be delivered later.

The src/ tree is locked from now.
@
text
@a11 1
 #include <openssl/x509.h>
d38 2
a39 2
d2i_DSA_PUBKEY() and i2d_DSA_PUBKEY() decode and encode an DSA public key using
a SubjectPublicKeyInfo (certificate public key) structure.
@

