head	1.1;
branch	1.1.1;
access;
symbols
	tg-mergetmp-mirosx-1:1.1.1.3
	tg-mergefixes-1-branch:1.1.1.3.0.4
	tg-mergefixes-1-base:1.1.1.3
	MIROS_X:1.1.1.3.0.2
	MIROS_X_BASE:1.1.1.3
	tg-mergetmp-3:1.1.1.3
	MIRBSD_XP_MIRPPC:1.1.3.2.0.4
	MIRBSD_XP_SPARC_BASE:1.1.3.2
	MIRBSD_XP_SPARC:1.1.3.2.0.2
	cvs-200408220000:1.1.1.3
	MIRBSD_7quater:1.1.1.2
	openssl-0_9_7d:1.1.3.2
	cvs-200405160640:1.1.1.3
	cvs-200403222025:1.1.1.3
	cvs-200403181737:1.1.1.3
	cvs-200401271800:1.1.1.3
	cvs-200401261630:1.1.1.3
	cvs-200401021645:1.1.1.3
	MIRBSD_7_ALPHA:1.1.1.2.0.6
	MIRBSD_7:1.1.1.2.0.4
	cvs-200312222040:1.1.1.3
	MIRBSD_7ter:1.1.1.2
	openssl-0_9_7c:1.1.3.2
	openssl-0_9_7b:1.1.3.1
	tg:1.1.3
	MIRBSD_7_DEV:1.1.1.2.0.2
	cvs-200310020700:1.1.1.2
	cvs-200309271030:1.1.1.2
	cvs-200309261655:1.1.1.2
	cvs-200309251530:1.1.1.2
	cvs-200308302005:1.1.1.2
	cvs-200308171200:1.1.1.2
	ctm-3496:1.1.1.2
	ctm-3449:1.1.1.2
	ctm-3437:1.1.1.2
	cvs-200307191805:1.1.1.2
	ctm-3425:1.1.1.2
	cvs-200307091500:1.1.1.2
	ctm-3389:1.1.1.2
	cvs-200306291430:1.1.1.2
	ctm-3341:1.1.1.2
	MIRBSD_5:1.1.1.2
	cvs-200306082100:1.1.1.2
	ctm-3316:1.1.1.2
	ctm-3272:1.1.1.2
	ctm-3264:1.1.1.1
	cvs-200305071630:1.1.1.1
	ctm-3255:1.1.1.1
	MIRBSD_4:1.1.1.1
	ctm-3203:1.1.1.1
	cvs-20030410-1130:1.1.1.1
	ctm-3155:1.1.1.1
	ctm-3132:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@# @;


1.1
date	2003.03.22.17.47.35;	author tg;	state Exp;
branches
	1.1.1.1
	1.1.3.1;
next	;

1.1.1.1
date	2003.03.22.17.47.35;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2003.05.21.19.00.22;	author tg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2003.12.22.21.08.34;	author tg;	state Exp;
branches;
next	;

1.1.3.1
date	2003.10.29.16.00.12;	author tg;	state Exp;
branches;
next	1.1.3.2;

1.1.3.2
date	2003.10.29.16.24.54;	author tg;	state Stab;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@#!/usr/local/bin/perl

package x86ms;

$label="L000";

%lb=(	'eax',	'al',
	'ebx',	'bl',
	'ecx',	'cl',
	'edx',	'dl',
	'ax',	'al',
	'bx',	'bl',
	'cx',	'cl',
	'dx',	'dl',
	);

%hb=(	'eax',	'ah',
	'ebx',	'bh',
	'ecx',	'ch',
	'edx',	'dh',
	'ax',	'ah',
	'bx',	'bh',
	'cx',	'ch',
	'dx',	'dh',
	);

sub main'asm_init_output { @@out=(); }
sub main'asm_get_output { return(@@out); }
sub main'get_labels { return(@@labels); }
sub main'external_label { push(@@labels,@@_); }

sub main'LB
	{
	(defined($lb{$_[0]})) || die "$_[0] does not have a 'low byte'\n";
	return($lb{$_[0]});
	}

sub main'HB
	{
	(defined($hb{$_[0]})) || die "$_[0] does not have a 'high byte'\n";
	return($hb{$_[0]});
	}

sub main'BP
	{
	&get_mem("BYTE",@@_);
	}

sub main'DWP
	{
	&get_mem("DWORD",@@_);
	}

sub main'BC
	{
	return @@_;
	}

sub main'DWC
	{
	return @@_;
	}

sub main'stack_push
	{
	local($num)=@@_;
	$stack+=$num*4;
	&main'sub("esp",$num*4);
	}

sub main'stack_pop
	{
	local($num)=@@_;
	$stack-=$num*4;
	&main'add("esp",$num*4);
	}

sub get_mem
	{
	local($size,$addr,$reg1,$reg2,$idx)=@@_;
	local($t,$post);
	local($ret)="$size PTR ";

	$addr =~ s/^\s+//;
	if ($addr =~ /^(.+)\+(.+)$/)
		{
		$reg2=&conv($1);
		$addr="_$2";
		}
	elsif ($addr =~ /^[_a-zA-Z]/)
		{
		$addr="_$addr";
		}

	$reg1="$regs{$reg1}" if defined($regs{$reg1});
	$reg2="$regs{$reg2}" if defined($regs{$reg2});
	if (($addr ne "") && ($addr ne 0))
		{
		if ($addr !~ /^-/)
			{ $ret.=$addr; }
		else	{ $post=$addr; }
		}
	if ($reg2 ne "")
		{
		$t="";
		$t="*$idx" if ($idx != 0);
		$reg1="+".$reg1 if ("$reg1$post" ne "");
		$ret.="[$reg2$t$reg1$post]";
		}
	else
		{
		$ret.="[$reg1$post]"
		}
	return($ret);
	}

sub main'mov	{ &out2("mov",@@_); }
sub main'movb	{ &out2("mov",@@_); }
sub main'and	{ &out2("and",@@_); }
sub main'or	{ &out2("or",@@_); }
sub main'shl	{ &out2("shl",@@_); }
sub main'shr	{ &out2("shr",@@_); }
sub main'xor	{ &out2("xor",@@_); }
sub main'xorb	{ &out2("xor",@@_); }
sub main'add	{ &out2("add",@@_); }
sub main'adc	{ &out2("adc",@@_); }
sub main'sub	{ &out2("sub",@@_); }
sub main'rotl	{ &out2("rol",@@_); }
sub main'rotr	{ &out2("ror",@@_); }
sub main'exch	{ &out2("xchg",@@_); }
sub main'cmp	{ &out2("cmp",@@_); }
sub main'lea	{ &out2("lea",@@_); }
sub main'mul	{ &out1("mul",@@_); }
sub main'div	{ &out1("div",@@_); }
sub main'dec	{ &out1("dec",@@_); }
sub main'inc	{ &out1("inc",@@_); }
sub main'jmp	{ &out1("jmp",@@_); }
sub main'jmp_ptr { &out1p("jmp",@@_); }
sub main'je	{ &out1("je",@@_); }
sub main'jle	{ &out1("jle",@@_); }
sub main'jz	{ &out1("jz",@@_); }
sub main'jge	{ &out1("jge",@@_); }
sub main'jl	{ &out1("jl",@@_); }
sub main'jb	{ &out1("jb",@@_); }
sub main'jc	{ &out1("jc",@@_); }
sub main'jnc	{ &out1("jnc",@@_); }
sub main'jnz	{ &out1("jnz",@@_); }
sub main'jne	{ &out1("jne",@@_); }
sub main'jno	{ &out1("jno",@@_); }
sub main'push	{ &out1("push",@@_); $stack+=4; }
sub main'pop	{ &out1("pop",@@_); $stack-=4; }
sub main'bswap	{ &out1("bswap",@@_); &using486(); }
sub main'not	{ &out1("not",@@_); }
sub main'call	{ &out1("call",'_'.$_[0]); }
sub main'ret	{ &out0("ret"); }
sub main'nop	{ &out0("nop"); }

sub out2
	{
	local($name,$p1,$p2)=@@_;
	local($l,$t);

	push(@@out,"\t$name\t");
	$t=&conv($p1).",";
	$l=length($t);
	push(@@out,$t);
	$l=4-($l+9)/8;
	push(@@out,"\t" x $l);
	push(@@out,&conv($p2));
	push(@@out,"\n");
	}

sub out0
	{
	local($name)=@@_;

	push(@@out,"\t$name\n");
	}

sub out1
	{
	local($name,$p1)=@@_;
	local($l,$t);

	push(@@out,"\t$name\t".&conv($p1)."\n");
	}

sub conv
	{
	local($p)=@@_;

	$p =~ s/0x([0-9A-Fa-f]+)/0$1h/;
	return $p;
	}

sub using486
	{
	return if $using486;
	$using486++;
	grep(s/\.386/\.486/,@@out);
	}

sub main'file
	{
	local($file)=@@_;

	local($tmp)=<<"EOF";
	TITLE	$file.asm
        .386
.model FLAT
EOF
	push(@@out,$tmp);
	}

sub main'function_begin
	{
	local($func,$extra)=@@_;

	push(@@labels,$func);

	local($tmp)=<<"EOF";
_TEXT	SEGMENT
PUBLIC	_$func
$extra
_$func PROC NEAR
	push	ebp
	push	ebx
	push	esi
	push	edi
EOF
	push(@@out,$tmp);
	$stack=20;
	}

sub main'function_begin_B
	{
	local($func,$extra)=@@_;

	local($tmp)=<<"EOF";
_TEXT	SEGMENT
PUBLIC	_$func
$extra
_$func PROC NEAR
EOF
	push(@@out,$tmp);
	$stack=4;
	}

sub main'function_end
	{
	local($func)=@@_;

	local($tmp)=<<"EOF";
	pop	edi
	pop	esi
	pop	ebx
	pop	ebp
	ret
_$func ENDP
_TEXT	ENDS
EOF
	push(@@out,$tmp);
	$stack=0;
	%label=();
	}

sub main'function_end_B
	{
	local($func)=@@_;

	local($tmp)=<<"EOF";
_$func ENDP
_TEXT	ENDS
EOF
	push(@@out,$tmp);
	$stack=0;
	%label=();
	}

sub main'function_end_A
	{
	local($func)=@@_;

	local($tmp)=<<"EOF";
	pop	edi
	pop	esi
	pop	ebx
	pop	ebp
	ret
EOF
	push(@@out,$tmp);
	}

sub main'file_end
	{
	push(@@out,"END\n");
	}

sub main'wparam
	{
	local($num)=@@_;

	return(&main'DWP($stack+$num*4,"esp","",0));
	}

sub main'swtmp
	{
	return(&main'DWP($_[0]*4,"esp","",0));
	}

# Should use swtmp, which is above esp.  Linix can trash the stack above esp
#sub main'wtmp
#	{
#	local($num)=@@_;
#
#	return(&main'DWP(-(($num+1)*4),"esp","",0));
#	}

sub main'comment
	{
	foreach (@@_)
		{
		push(@@out,"\t; $_\n");
		}
	}

sub main'label
	{
	if (!defined($label{$_[0]}))
		{
		$label{$_[0]}="\$${label}${_[0]}";
		$label++;
		}
	return($label{$_[0]});
	}

sub main'set_label
	{
	if (!defined($label{$_[0]}))
		{
		$label{$_[0]}="${label}${_[0]}";
		$label++;
		}
	if((defined $_[2]) && ($_[2] == 1))
		{
		push(@@out,"$label{$_[0]}::\n");
		}
	else
		{
		push(@@out,"$label{$_[0]}:\n");
		}
	}

sub main'data_word
	{
	push(@@out,"\tDD\t$_[0]\n");
	}

sub out1p
	{
	local($name,$p1)=@@_;
	local($l,$t);

	push(@@out,"\t$name\t ".&conv($p1)."\n");
	}
@


1.1.3.1
log
@for the damned sixth time: try to import (stock) OpenSSL 0.9.7b (on which
the OpenBSD-openssl and our libcrypto and libssl are based) into a vendor
branch in order to schedule an update to OpenSSL.

CVS hates me today.
@
text
@a94 2
	if ($addr =~ /^.+\-.+$/) { $addr="($addr)"; }

a113 1
	$ret =~ s/\[\]//;	# in case $addr was the only argument
d154 1
a154 1
sub main'call	{ &out1("call",($_[0]=~/^\$L/?'':'_').$_[0]); }
d341 1
a341 1
		$label{$_[0]}="\$${label}${_[0]}";
a365 8

sub main'picmeup
	{
	local($dst,$sym)=@@_;
	&main'lea($dst,&main'DWP($sym));
	}

sub main'blindpop { &out1("pop",@@_); }
@


1.1.3.2
log
@Okay. Now get OpenSSL-0.9.7c (latest as of 30 Sep 2003), from a german server
@
text
@a146 2
sub main'ja	{ &out1("ja",@@_); }
sub main'jae	{ &out1("jae",@@_); }
a147 1
sub main'jbe	{ &out1("jbe",@@_); }
@


1.1.1.1
log
@Import OpenBSD 3.3 source repository from CTM 3132 the first time
This opens an OpenBSD-mirabile (aka MirBSD) repository.

### MirBSD is:
# Copyright (c) 1982-2003 by Thorsten "mirabile" Glaser <x86@@ePost.de>
# Copyright © 1968-2003  The authors of And contributors to UNIX®, the
#       C Language, BSD/Berkeley Unix; 386BSD, NetBSD 1.1 and OpenBSD.
#
# Anyone who obtained a copy of this work is hereby permitted to freely use,
# distribute, modify, merge, sublicence, give away or sell it as long as the
# authors are given due credit and the following notice is retained:
#
# This work is provided "as is", with no explicit or implicit warranty what-
# soever. Use it only at your own risk. In no event may an author or contri-
# butor be held liable for any damage, directly or indirectly, that origina-
# ted through or is caused by creation or modification of this work.

MirBSD is my private tree. MirBSD does not differ very much from OpenBSD
and intentionally tracks OpenBSD. That's why it _is_ OpenBSD, just not the
official one. It's like with DarrenBSD.

At time of this writing, no advertising for MirBSD must be done,
because the advertising clause has not yet been sorted out.

http://templeofhate.com/tglaser/MirBSD/index.php
@
text
@@


1.1.1.2
log
@Sync MirBSD main source tree against OpenBSD-current,
which should be fairly stable after the Hackathon now.
@
text
@a94 2
	if ($addr =~ /^.+\-.+$/) { $addr="($addr)"; }

a113 1
	$ret =~ s/\[\]//;	# in case $addr was the only argument
d154 1
a154 1
sub main'call	{ &out1("call",($_[0]=~/^\$L/?'':'_').$_[0]); }
d341 1
a341 1
		$label{$_[0]}="\$${label}${_[0]}";
a365 8

sub main'picmeup
	{
	local($dst,$sym)=@@_;
	&main'lea($dst,&main'DWP($sym));
	}

sub main'blindpop { &out1("pop",@@_); }
@


1.1.1.3
log
@Time to import OpenBSD once again. Expect breakage.
@
text
@a146 2
sub main'ja	{ &out1("ja",@@_); }
sub main'jae	{ &out1("jae",@@_); }
a147 1
sub main'jbe	{ &out1("jbe",@@_); }
@


