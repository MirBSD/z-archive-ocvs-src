head	1.2;
access;
symbols
	cvs-200405160640:1.1.1.2
	cvs-200401271800:1.1.1.2
	cvs-200401261630:1.1.1.2
	cvs-200401021645:1.1.1.2
	cvs-200312222040:1.1.1.2
	cvs-200310020700:1.1.1.1
	cvs-200309271030:1.1.1.1
	cvs-200309251530:1.1.1.1
	cvs-200308302005:1.1.1.1
	cvs-200308171200:1.1.1.1
	ctm-3496:1.1.1.1
	ctm-3449:1.1.1.1
	ctm-3437:1.1.1.1
	cvs-200307191805:1.1.1.1
	ctm-3425:1.1.1.1
	cvs-200307091500:1.1.1.1
	ctm-3389:1.1.1.1
	cvs-200306291430:1.1.1.1
	ctm-3341:1.1.1.1
	cvs-200306082100:1.1.1.1
	ctm-3316:1.1.1.1
	ctm-3272:1.1.1.1
	ctm-3264:1.1.1.1
	cvs-200305071630:1.1.1.1
	ctm-3255:1.1.1.1
	ctm-3203:1.1.1.1
	cvs-20030410-1130:1.1.1.1
	ctm-3155:1.1.1.1
	ctm-3132:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.2
date	2003.04.12.20.54.44;	author tg;	state dead;
branches;
next	1.1;

1.1
date	2003.03.22.17.46.01;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.03.22.17.46.01;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2003.12.22.21.05.48;	author tg;	state Exp;
branches;
next	;


desc
@@


1.2
log
@remove more non-x86-32 from src
@
text
@/* $OpenBSD: bwx.c,v 1.3 2002/08/24 17:21:44 matthieu Exp $ */
/*-
 * Copyright (c) 1998 Doug Rabson
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include <sys/cdefs.h>

#define vm_page_size (sysconf(_SC_PAGESIZE)) /* XXX  */
#include <sys/param.h>
#include <sys/mman.h>
#include <sys/fcntl.h>
#include <sys/sysctl.h>
#include <err.h>
#include <paths.h>
#include <machine/bwx.h>
#include <machine/sysarch.h>
#include <stdlib.h>
#include <unistd.h>

#include "io.h"

#define PATH_APERTURE "/dev/xf86"

#define mb()	__asm__ __volatile__("mb"  : : : "memory")
#define wmb()	__asm__ __volatile__("wmb" : : : "memory")

static int		mem_fd = -1;	/* file descriptor to /dev/mem */
static void	       *bwx_int1_ports = MAP_FAILED; /* mapped int1 io ports */
static void	       *bwx_int2_ports = MAP_FAILED; /* mapped int2 io ports */
static void	       *bwx_int4_ports = MAP_FAILED; /* mapped int4 io ports */
static u_int64_t	bwx_io_base;	/* physical address of ports */
static u_int64_t	bwx_mem_base;	/* physical address of bwx mem */

static void
bwx_open_mem(void)
{

	if (mem_fd != -1) 
		return;
	mem_fd = open(_PATH_MEM, O_RDWR);
	if (mem_fd < 0) 
		mem_fd = open(PATH_APERTURE, O_RDWR);
	if (mem_fd < 0)
		err(1, "Failed to open both %s and %s", _PATH_MEM, 
		    PATH_APERTURE);
}

static void 
bwx_close_mem(void)
{

	if (mem_fd != -1) {
		close(mem_fd);
		mem_fd = -1;
	}
}

static void
bwx_init(void)
{
	size_t len = sizeof(u_int64_t);
	int error;
	int mib[3];
	
	mib[0] = CTL_MACHDEP;
	mib[1] = CPU_CHIPSET;
	mib[2] = CPU_CHIPSET_PORTS;
	if ((error = sysctl(mib, 3, &bwx_io_base, &len, NULL, 0)) < 0)
		err(1, "machdep.chipset.ports_base");
	mib[2] = CPU_CHIPSET_MEM;
	if ((error = sysctl(mib, 3, &bwx_mem_base, &len, 0, 0)) < 0)
		err(1, "machdep.chipset.memory");
}

static int
bwx_ioperm(u_int32_t from, u_int32_t num, int on)
{
	u_int32_t start, end;

	if (bwx_int1_ports == MAP_FAILED)
		bwx_init();

	if (!on)
		return -1;		/* XXX can't unmap yet */

	if (bwx_int1_ports != MAP_FAILED)
		return 0;
	
	bwx_open_mem();
	start = trunc_page(from);
	end = round_page(from + num);
	if ((bwx_int1_ports = mmap(0, end-start, PROT_READ|PROT_WRITE,
	    MAP_SHARED, mem_fd, bwx_io_base + BWX_EV56_INT1 + start)) ==
	    MAP_FAILED) 
		err(1, "mmap int1");
	if ((bwx_int2_ports = mmap(0, end-start, PROT_READ|PROT_WRITE,
	    MAP_SHARED, mem_fd, bwx_io_base + BWX_EV56_INT2 + start)) ==
	    MAP_FAILED)
		err(1, "mmap int2");
	if ((bwx_int4_ports = mmap(0, end-start, PROT_READ|PROT_WRITE,
	    MAP_SHARED, mem_fd, bwx_io_base + BWX_EV56_INT4 + start)) ==
	    MAP_FAILED) 
		err(1, "mmap int4");
	bwx_close_mem();
	return 0;
}

static u_int8_t
bwx_inb(u_int32_t port)
{
	mb();
	return alpha_ldbu(bwx_int1_ports + port);
}

static u_int16_t
bwx_inw(u_int32_t port)
{
	mb();
	return alpha_ldwu(bwx_int2_ports + port);
}

static u_int32_t
bwx_inl(u_int32_t port)
{
	mb();
	return alpha_ldlu(bwx_int4_ports + port);
}

static void
bwx_outb(u_int32_t port, u_int8_t val)
{
	alpha_stb(bwx_int1_ports + port, val);
	mb();
	wmb();
}

static void
bwx_outw(u_int32_t port, u_int16_t val)
{
	alpha_stw(bwx_int2_ports + port, val);
	mb();
	wmb();
}

static void
bwx_outl(u_int32_t port, u_int32_t val)
{
	alpha_stl(bwx_int4_ports + port, val);
	mb();
	wmb();
}

struct bwx_mem_handle {
	void	*virt1;		/* int1 address in user address-space */
	void	*virt2;		/* int2 address in user address-space */
	void	*virt4;		/* int4 address in user address-space */
};

static void *
bwx_map_memory(u_int32_t address, u_int32_t size)
{
	struct bwx_mem_handle *h;

	h = malloc(sizeof(struct bwx_mem_handle));
	if (h == NULL) return NULL;
	bwx_open_mem();
	h->virt1 = mmap(0, size << 5, PROT_READ|PROT_WRITE, MAP_SHARED,
	    mem_fd, bwx_mem_base + BWX_EV56_INT1 + address);
	if (h->virt1 == MAP_FAILED) {
		bwx_close_mem();
		free(h);
		return NULL;
	}
	h->virt2 = mmap(0, size << 5, PROT_READ|PROT_WRITE, MAP_SHARED,
	    mem_fd, bwx_mem_base + BWX_EV56_INT2 + address);
	if (h->virt2 == MAP_FAILED) {
		munmap(h->virt1, size);
		bwx_close_mem();
		free(h);
		return NULL;
	}
	h->virt4 = mmap(0, size << 5, PROT_READ|PROT_WRITE, MAP_SHARED,
	    mem_fd, bwx_mem_base + BWX_EV56_INT4 + address);
	if (h->virt4 == MAP_FAILED) {
		munmap(h->virt1, size);
		munmap(h->virt2, size);
		bwx_close_mem();
		free(h);
		return NULL;
	}
	bwx_close_mem();
	return h;
}

static void
bwx_unmap_memory(void *handle, u_int32_t size)
{
	struct bwx_mem_handle *h = handle;

	munmap(h->virt1, size);
	munmap(h->virt2, size);
	munmap(h->virt4, size);
	free(h);
}

static u_int8_t
bwx_readb(void *handle, u_int32_t offset)
{
	struct bwx_mem_handle *h = handle;

	return alpha_ldbu(h->virt1 + offset);
}

static u_int16_t
bwx_readw(void *handle, u_int32_t offset)
{
	struct bwx_mem_handle *h = handle;

	return alpha_ldwu(h->virt2 + offset);
}

static u_int32_t
bwx_readl(void *handle, u_int32_t offset)
{
	struct bwx_mem_handle *h = handle;

	return alpha_ldlu(h->virt4 + offset);
}

static void
bwx_writeb(void *handle, u_int32_t offset, u_int8_t val)
{
	struct bwx_mem_handle *h = handle;

	alpha_stb(h->virt1 + offset, val);
}

static void
bwx_writew(void *handle, u_int32_t offset, u_int16_t val)
{
	struct bwx_mem_handle *h = handle;

	alpha_stw(h->virt2 + offset, val);
}

static void
bwx_writel(void *handle, u_int32_t offset, u_int32_t val)
{
	struct bwx_mem_handle *h = handle;

	alpha_stl(h->virt4 + offset, val);
}

struct io_ops bwx_io_ops = {
	bwx_ioperm,
	bwx_inb,
	bwx_inw,
	bwx_inl,
	bwx_outb,
	bwx_outw,
	bwx_outl,
	bwx_map_memory,
	bwx_unmap_memory,
	bwx_readb,
	bwx_readw,
	bwx_readl,
	bwx_writeb,
	bwx_writew,
	bwx_writel,
};
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Import OpenBSD 3.3 source repository from CTM 3132 the first time
This opens an OpenBSD-mirabile (aka MirBSD) repository.

### MirBSD is:
# Copyright (c) 1982-2003 by Thorsten "mirabile" Glaser <x86@@ePost.de>
# Copyright © 1968-2003  The authors of And contributors to UNIX®, the
#       C Language, BSD/Berkeley Unix; 386BSD, NetBSD 1.1 and OpenBSD.
#
# Anyone who obtained a copy of this work is hereby permitted to freely use,
# distribute, modify, merge, sublicence, give away or sell it as long as the
# authors are given due credit and the following notice is retained:
#
# This work is provided "as is", with no explicit or implicit warranty what-
# soever. Use it only at your own risk. In no event may an author or contri-
# butor be held liable for any damage, directly or indirectly, that origina-
# ted through or is caused by creation or modification of this work.

MirBSD is my private tree. MirBSD does not differ very much from OpenBSD
and intentionally tracks OpenBSD. That's why it _is_ OpenBSD, just not the
official one. It's like with DarrenBSD.

At time of this writing, no advertising for MirBSD must be done,
because the advertising clause has not yet been sorted out.

http://templeofhate.com/tglaser/MirBSD/index.php
@
text
@@


1.1.1.2
log
@Time to import OpenBSD once again. Expect breakage.
@
text
@d1 1
a1 1
/* $OpenBSD: bwx.c,v 1.4 2003/10/06 22:29:45 miod Exp $ */
a184 1
	size_t sz = (size_t)size << 5;
d189 1
a189 1
	h->virt1 = mmap(0, sz, PROT_READ|PROT_WRITE, MAP_SHARED,
d196 1
a196 1
	h->virt2 = mmap(0, sz, PROT_READ|PROT_WRITE, MAP_SHARED,
d199 1
a199 1
		munmap(h->virt1, sz);
d204 1
a204 1
	h->virt4 = mmap(0, sz, PROT_READ|PROT_WRITE, MAP_SHARED,
d207 2
a208 2
		munmap(h->virt1, sz);
		munmap(h->virt2, sz);
a220 1
	size_t sz = (size_t)size << 5;
d222 3
a224 3
	munmap(h->virt1, sz);
	munmap(h->virt2, sz);
	munmap(h->virt4, sz);
@

