head	1.2;
access;
symbols
	tg-mergetmp-mirosx-1:1.2
	tg-mergefixes-1-branch:1.2.0.4
	tg-mergefixes-1-base:1.2
	MIROS_X:1.2.0.2
	MIROS_X_BASE:1.2
	tg-mergetmp-3:1.2
	cvs-200412111650:1.1.1.4
	MIRBSD_XP_MIRPPC:1.1.1.3.0.10
	cvs-200410171015:1.1.1.4
	MIRBSD_XP_SPARC_BASE:1.1.1.3
	MIRBSD_XP_SPARC:1.1.1.3.0.8
	MIRBSD_7quater:1.1.1.3
	cvs-200405160640:1.1.1.3
	cvs-200401271800:1.1.1.3
	cvs-200401261630:1.1.1.3
	cvs-200401021645:1.1.1.3
	MIRBSD_7_ALPHA:1.1.1.3.0.6
	MIRBSD_7:1.1.1.3.0.4
	cvs-200312222040:1.1.1.3
	MIRBSD_7ter:1.1.1.3
	MIRBSD_7_DEV:1.1.1.3.0.2
	cvs-200310020700:1.1.1.3
	cvs-200309271030:1.1.1.3
	cvs-200309251530:1.1.1.3
	cvs-200308302005:1.1.1.3
	cvs-200308171200:1.1.1.3
	ctm-3496:1.1.1.3
	ctm-3449:1.1.1.3
	ctm-3437:1.1.1.3
	cvs-200307191805:1.1.1.3
	ctm-3425:1.1.1.3
	cvs-200307091500:1.1.1.3
	cvs-200307072125:1.1.1.2
	ctm-3389:1.1.1.2
	cvs-200306291430:1.1.1.2
	ctm-3341:1.1.1.2
	MIRBSD_5:1.1.1.2
	cvs-200306082100:1.1.1.2
	ctm-3316:1.1.1.2
	ctm-3272:1.1.1.1
	ctm-3264:1.1.1.1
	cvs-200305071630:1.1.1.1
	MIRBSD_4:1.1.1.1
	ctm-3203:1.1.1.1
	cvs-20030410-1130:1.1.1.1
	ctm-3155:1.1.1.1
	ctm-3132:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.2
date	2004.11.07.13.10.26;	author tg;	state Exp;
branches;
next	1.1;

1.1
date	2003.03.22.17.53.11;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.03.22.17.53.11;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2003.06.05.17.43.51;	author tg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2003.07.09.16.49.31;	author tg;	state Stab;
branches;
next	1.1.1.4;

1.1.1.4
date	2004.10.17.10.17.17;	author tg;	state Exp;
branches;
next	;


desc
@@


1.2
log
@add -I option
-Wall -W -pedantic clean
@
text
@/**	$MirBSD$ */
/*	$OpenBSD: socks.c,v 1.9 2004/10/17 03:13:55 djm Exp $	*/

/*
 * Copyright (c) 1999 Niklas Hallqvist.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>

#include <err.h>
#include <errno.h>
#include <netdb.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>

__RCSID("$MirBSD$");

#define SOCKS_PORT	"1080"
#define HTTP_PROXY_PORT	"3128"
#define HTTP_MAXHDRS	64
#define SOCKS_V5	5
#define SOCKS_V4	4
#define SOCKS_NOAUTH	0
#define SOCKS_NOMETHOD	0xff
#define SOCKS_CONNECT	1
#define SOCKS_IPV4	1


int	remote_connect(char *, char *, struct addrinfo);
int	socks_connect(char *host, char *port, struct addrinfo hints,
	    char *proxyhost, char *proxyport, struct addrinfo proxyhints,
	    int socksv);

static in_addr_t
decode_addr(const char *s)
{
	struct hostent *hp = gethostbyname (s);
	struct in_addr retval;

	if (hp)
		return *(in_addr_t *)hp->h_addr_list[0];
	if (inet_aton (s, &retval))
		return retval.s_addr;
	errx (1, "cannot decode address \"%s\"", s);
}

static in_port_t
decode_port(const char *s)
{
	struct servent *sp;
	in_port_t port;
	char *p;

	port = strtol (s, &p, 10);
	if (s == p) {
		sp = getservbyname (s, "tcp");
		if (sp)
			return sp->s_port;
	}
	if (*s != '\0' && *p == '\0')
		return htons (port);
	errx (1, "cannot decode port \"%s\"", s);
}

static int
proxy_read_line(int fd, char *buf, int bufsz)
{
	int r, off;

	for(off = 0;;) {
		if (off >= bufsz)
			errx(1, "proxy read too long");
		if ((r = read(fd, buf + off, 1)) <= 0) {
			if (r == -1 && errno == EINTR)
				continue;
			err(1, "proxy read");
		}
		/* Skip CR */
		if (buf[off] == '\r')
			continue;
		if (buf[off] == '\n') {
			buf[off] = '\0';
			break;
		}
		off++;
	}
	return (off);
}

int
socks_connect(char *host, char *port,
    struct addrinfo hints __attribute__((unused)),
    char *proxyhost, char *proxyport, struct addrinfo proxyhints,
    int socksv)
{
	int proxyfd, r;
	unsigned char buf[1024];
	ssize_t cnt;
	in_addr_t serveraddr;
	in_port_t serverport;

	if (proxyport == NULL)
		proxyport = (socksv == -1) ? HTTP_PROXY_PORT : SOCKS_PORT;

	proxyfd = remote_connect(proxyhost, proxyport, proxyhints);

	if (proxyfd < 0)
		return -1;

	serveraddr = decode_addr (host);
	serverport = decode_port (port);

	if (socksv == 5) {
		/* Version 5, one method: no authentication */
		buf[0] = SOCKS_V5;
		buf[1] = 1;
		buf[2] = SOCKS_NOAUTH;
		cnt = write (proxyfd, buf, 3);
		if (cnt == -1)
			err (1, "write failed");
		if (cnt != 3)
			errx (1, "short write, %d (expected 3)", cnt);

		read (proxyfd, buf, 2);
		if (buf[1] == SOCKS_NOMETHOD)
			errx (1, "authentication method negotiation failed");

		/* Version 5, connect: IPv4 address */
		buf[0] = SOCKS_V5;
		buf[1] = SOCKS_CONNECT;
		buf[2] = 0;
		buf[3] = SOCKS_IPV4;
		memcpy (buf + 4, &serveraddr, sizeof serveraddr);
		memcpy (buf + 8, &serverport, sizeof serverport);

		/* XXX Handle short writes better */
		cnt = write (proxyfd, buf, 10);
		if (cnt == -1)
			err (1, "write failed");
		if (cnt != 10)
			errx (1, "short write, %d (expected 10)", cnt);

		/* XXX Handle short reads better */
		cnt = read (proxyfd, buf, sizeof buf);
		if (cnt == -1)
			err (1, "read failed");
		if (cnt != 10)
			errx (1, "unexpected reply size %d (expected 10)", cnt);
		if (buf[1] != 0)
			errx (1, "connection failed, SOCKS error %d", buf[1]);
	} else if (socksv == 4) {
		/* Version 4 */
		buf[0] = SOCKS_V4;
		buf[1] = SOCKS_CONNECT;	/* connect */
		memcpy (buf + 2, &serverport, sizeof serverport);
		memcpy (buf + 4, &serveraddr, sizeof serveraddr);
		buf[8] = 0;	/* empty username */

		cnt = write (proxyfd, buf, 9);
		if (cnt == -1)
			err (1, "write failed");
		if (cnt != 9)
			errx (1, "short write, %d (expected 9)", cnt);

		/* XXX Handle short reads better */
		cnt = read (proxyfd, buf, 8);
		if (cnt == -1)
			err (1, "read failed");
		if (cnt != 8)
			errx (1, "unexpected reply size %d (expected 8)", cnt);
		if (buf[1] != 90)
			errx (1, "connection failed, SOCKS error %d", buf[1]);
	} else if (socksv == -1) {
		/* HTTP proxy CONNECT */

		/* Disallow bad chars in hostname */
		if (strcspn(host, "\r\n\t []:") != strlen(host))
			errx (1, "Invalid hostname");

		/* Try to be sane about numeric IPv6 addresses */
		if (strchr(host, ':') != NULL) {
			r = snprintf((char *)buf, sizeof(buf),
			    "CONNECT [%s]:%d HTTP/1.0\r\n\r\n",
			    host, ntohs(serverport));
		} else {
			r = snprintf((char *)buf, sizeof(buf),
			    "CONNECT %s:%d HTTP/1.0\r\n\r\n",
			    host, ntohs(serverport));
		}
		if (r == -1 || r >= (ssize_t)sizeof(buf))
			errx (1, "hostname too long");
		r = strlen((char *)buf);

		/* XXX atomicio */
		cnt = write (proxyfd, buf, r);
		if (cnt == -1)
			err (1, "write failed");
		if (cnt != r)
			errx (1, "short write, %d (expected %d)", cnt, r);

		/* Read reply */
		for (r = 0; r < HTTP_MAXHDRS; r++) {
			proxy_read_line(proxyfd, (char *)buf, sizeof(buf));
			if (r == 0 &&
			    strncmp((char *)buf, "HTTP/1.0 200 ", 12) != 0)
				errx (1, "Proxy error: \"%s\"", buf);
			/* Discard headers until we hit an empty line */
			if (*buf == '\0')
				break;
		}
	} else
		errx (1, "Unknown proxy protocol %d", socksv);

	return proxyfd;
}
@


1.1
log
@Initial revision
@
text
@d1 2
a2 1
/*	$OpenBSD: socks.c,v 1.6 2002/12/30 17:55:25 stevesk Exp $	*/
a14 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by Niklas Hallqvist.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
d34 1
d41 2
d44 2
d52 1
a52 1
#define SOCKS_MAXCMDSZ	10
d55 3
d60 1
a60 1
decode_addr (const char *s)
d73 1
a73 1
decode_port (const char *s)
d90 25
d116 2
a117 1
socks_connect (char *host, char *port, struct addrinfo hints,
d121 2
a122 2
	int proxyfd;
	unsigned char buf[SOCKS_MAXCMDSZ];
d127 4
a130 4
	if (proxyport)
		proxyfd = remote_connect(proxyhost, proxyport, proxyhints);
	else
		proxyfd = remote_connect(proxyhost, SOCKS_PORT, proxyhints);
d176 1
a176 1
	} else {
d198 40
a237 1
	}
@


1.1.1.1
log
@Import OpenBSD 3.3 source repository from CTM 3132 the first time
This opens an OpenBSD-mirabile (aka MirBSD) repository.

### MirBSD is:
# Copyright (c) 1982-2003 by Thorsten "mirabile" Glaser <x86@@ePost.de>
# Copyright © 1968-2003  The authors of And contributors to UNIX®, the
#       C Language, BSD/Berkeley Unix; 386BSD, NetBSD 1.1 and OpenBSD.
#
# Anyone who obtained a copy of this work is hereby permitted to freely use,
# distribute, modify, merge, sublicence, give away or sell it as long as the
# authors are given due credit and the following notice is retained:
#
# This work is provided "as is", with no explicit or implicit warranty what-
# soever. Use it only at your own risk. In no event may an author or contri-
# butor be held liable for any damage, directly or indirectly, that origina-
# ted through or is caused by creation or modification of this work.

MirBSD is my private tree. MirBSD does not differ very much from OpenBSD
and intentionally tracks OpenBSD. That's why it _is_ OpenBSD, just not the
official one. It's like with DarrenBSD.

At time of this writing, no advertising for MirBSD must be done,
because the advertising clause has not yet been sorted out.

http://templeofhate.com/tglaser/MirBSD/index.php
@
text
@@


1.1.1.2
log
@Import latest OpenBSD CVS tree by CTM in order
to sync the base system and ports tree with Them.

This includes the recent licence changes as well - by
importing the changed base and re-applying the diffs
(with cvs up -j -j) they are inherited, and we're not
bound to the removed clauses any longer.
@
text
@d1 1
a1 1
/*	$OpenBSD: socks.c,v 1.7 2003/06/03 20:49:29 deraadt Exp $	*/
d14 5
@


1.1.1.3
log
@Bring the entire base system and ports tree in sync with OpenBSD
@
text
@d1 1
a1 1
/*	$OpenBSD: socks.c,v 1.8 2003/07/07 21:36:23 deraadt Exp $	*/
a48 3
int	socks_connect(char *host, char *port, struct addrinfo hints,
	    char *proxyhost, char *proxyport, struct addrinfo proxyhints,
	    int socksv);
d51 1
a51 1
decode_addr(const char *s)
d64 1
a64 1
decode_port(const char *s)
d82 1
a82 1
socks_connect(char *host, char *port, struct addrinfo hints,
@


1.1.1.4
log
@better proxy support
@
text
@d1 1
a1 1
/*	$OpenBSD: socks.c,v 1.9 2004/10/17 03:13:55 djm Exp $	*/
a32 1
#include <errno.h>
a39 2
#define HTTP_PROXY_PORT	"3128"
#define HTTP_MAXHDRS	64
d46 1
a46 1

a83 25
static int
proxy_read_line(int fd, char *buf, int bufsz)
{
	int r, off;

	for(off = 0;;) {
		if (off >= bufsz)
			errx(1, "proxy read too long");
		if ((r = read(fd, buf + off, 1)) <= 0) {
			if (r == -1 && errno == EINTR)
				continue;
			err(1, "proxy read");
		}
		/* Skip CR */
		if (buf[off] == '\r')
			continue;
		if (buf[off] == '\n') {
			buf[off] = '\0';
			break;
		}
		off++;
	}
	return (off);
}

d89 2
a90 2
	int proxyfd, r;
	unsigned char buf[1024];
d95 4
a98 4
	if (proxyport == NULL)
		proxyport = (socksv == -1) ? HTTP_PROXY_PORT : SOCKS_PORT;

	proxyfd = remote_connect(proxyhost, proxyport, proxyhints);
d144 1
a144 1
	} else if (socksv == 4) {
d166 1
a166 39
	} else if (socksv == -1) {
		/* HTTP proxy CONNECT */

		/* Disallow bad chars in hostname */
		if (strcspn(host, "\r\n\t []:") != strlen(host))
			errx (1, "Invalid hostname");

		/* Try to be sane about numeric IPv6 addresses */
		if (strchr(host, ':') != NULL) {
			r = snprintf(buf, sizeof(buf),
			    "CONNECT [%s]:%d HTTP/1.0\r\n\r\n",
			    host, ntohs(serverport));
		} else {
			r = snprintf(buf, sizeof(buf),
			    "CONNECT %s:%d HTTP/1.0\r\n\r\n",
			    host, ntohs(serverport));
		}
		if (r == -1 || r >= sizeof(buf))
			errx (1, "hostname too long");
		r = strlen(buf);

		/* XXX atomicio */
		cnt = write (proxyfd, buf, r);
		if (cnt == -1)
			err (1, "write failed");
		if (cnt != r)
			errx (1, "short write, %d (expected %d)", cnt, r);

		/* Read reply */
		for (r = 0; r < HTTP_MAXHDRS; r++) {
			proxy_read_line(proxyfd, buf, sizeof(buf));
			if (r == 0 && strncmp(buf, "HTTP/1.0 200 ", 12) != 0)
				errx (1, "Proxy error: \"%s\"", buf);
			/* Discard headers until we hit an empty line */
			if (*buf == '\0')
				break;
		}
	} else
		errx (1, "Unknown proxy protocol %d", socksv);
@


