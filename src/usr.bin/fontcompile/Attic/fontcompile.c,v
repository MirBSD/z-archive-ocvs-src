head	1.5;
access;
symbols
	MIRBSD_7quater:1.4
	MIRBSD_7_ALPHA:1.4.0.6
	MIRBSD_7:1.4.0.4
	MIRBSD_7ter:1.4
	MIRBSD_7_DEV:1.4.0.2
	MIRBSD_5:1.3;
locks; strict;
comment	@ * @;


1.5
date	2004.06.03.16.40.02;	author tg;	state dead;
branches;
next	1.4;

1.4
date	2003.07.06.20.22.51;	author tg;	state Exp;
branches;
next	1.3;

1.3
date	2003.06.02.19.56.30;	author tg;	state Exp;
branches;
next	1.2;

1.2
date	2003.05.20.21.26.36;	author tg;	state Exp;
branches;
next	1.1;

1.1
date	2003.05.20.21.25.42;	author tg;	state Exp;
branches;
next	;


desc
@@


1.5
log
@remove unfinished project
volunteers may still finish it
@
text
@/* $MirBSD: src/usr.bin/fontcompile/fontcompile.c,v 1.4 2003/07/06 20:22:51 tg Exp $
 *-
 * Copyright (c) 2003 Thorsten Glaser <x86@@ePost.de>
 *
 * Subject to these terms, everybody who obtained a copy of this work
 * is hereby permitted to deal in the work without restriction inclu-
 * ding without limitation the rights to use, distribute, sell, modi-
 * fy, give away, merge or sublicense it provided this notice is kept
 * and the authors and contributors are given due credit in derivates
 * or accompanying documents.
 * This work is provided "as is" with no explicit or implicit warran-
 * ties whatsoever to the maximum extend permitted by applicable law;
 * in no event may an author or contributor be held liable for damage
 * that is, directly or indirectly, caused by the work, even if advi-
 * sed of the possibility of such damage.
 *-
 * This programme works as a simple filter. In decompile (standard)
 * mode, it reads its input byte-wise and outputs it in binary form.
 * In compile mode, it parses the first eight bytes of input per
 * line and outputs a byte. Empty lines are ignored.
 */

#include <sys/types.h>
#include <sys/mman.h>
#include <sys/stat.h>
#include <err.h>
#include <errno.h>
#include <fcntl.h>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>

int main(int, char **, char **);
int fontcompile(void);
int fontdecompile(void);
int usage(void);

extern char *__progname;
int verbose = 0;
int lines = 0;
u_int8_t zero = ' ';
u_int8_t eins = '*';
int only = 0;

int main(int argc, char **argv, char **envp)
{
	int mode, ch, force = 0;
	u_int8_t *oa;

	mode = 1;
	while ((ch = getopt(argc, argv, "cdfhl:0:1:ov")) != -1) {
		switch (ch) {
		case 'c':
			mode = 2;
			break;
		case 'd':
			mode = 1;
			break;
		case 'v':
			verbose = 1;
			break;
		case '0':
		case '1':
			oa = optarg;
			if (*oa == '>') return usage();
			if ((*oa < 32) || \
			    ((*oa > 126) && (*oa < 160)) || \
			    (*oa == '%'))
				if (!force) return usage();
			if (argv[optind-2][1] == '0')
				zero = *oa;
			  else	eins = *oa;
			break;
		case 'f':
			force = 1;
			break;
		case 'o':
			only = 1;
			break;
		case 'l':
			if ((atoi(optarg) > 0) && (atoi(optarg) < 65))
				lines = atoi(optarg);
			break;
		case 'h':
		default:
			return usage();
		}
	}

	if (mode == 1)
		return fontdecompile();

	if (mode == 2)
		return fontcompile();

	return (-1);
}

int usage(void)
{
	fprintf(stderr,
"Usage:"
"	%s [-c | -d] [-l <n>] [-fhov] [-[01] <x>]\n"
" -c: compile font description to binary file\n"
" -d: decompile binary file (default)\n"
" -0: set the bit=0 character for discompile (space)\n"
" -1: set the bit=1 character for discompile (*)\n"
" -f: force overriding forbidden chars (percent, control chars)\n"
" -o: only check for given chars in compile mode\n"
" -l: put in line breaks and counters after <n> lines\n"
" -v: be verbose\n"
" -h: display this help screen\n",
	    __progname);
	return (254);
}

int fontdecompile(void)
{
	u_int8_t c, j, *p;
	off_t i, s;
	struct stat sb;
	char ob[]="********";

	if (fstat(STDIN_FILENO, &sb))
		err(2, "stat");

	if ((p = mmap(0, 65536, PROT_READ, MAP_FILE, \
	    STDIN_FILENO, 0)) == MAP_FAILED)
		err(2, "mmap");

	if (verbose)
		fprintf(stderr, "size=%08X\n", (u_int32_t)sb.st_size);

	s = (sb.st_size > 65535) ? 65536 : sb.st_size;

	for (i = 0; i < s; ++i) {
		if (lines && !(i % lines))
			printf( i ? "\n> %04X\n" : "> %04X\n", i / lines);
		c = p[i];
		for (j = 8; j; --j) {
			ob[j-1] = \
			   ( (c & 1) ? eins : zero );
			c >>= 1;
		}
		puts(ob);
	}

	return (0);
}

int fontcompile(void)
{
	return ENOCOFFEE;
}
@


1.4
log
@mop up
@
text
@d1 1
a1 1
/* $MirBSD: licence.template,v 1.3 2003/07/04 20:03:27 tg Exp $
@


1.3
log
@licence cleanup
@
text
@d1 3
a3 9
/*	$MirBSD: fontcompile.c,v 1.2 2003/05/20 21:26:36 tg Exp $	*/

/*-
 * Copyright (c) 1982-2003 Thorsten Glaser <x86@@ePost.de>
 *
 * Everybody who obtained a copy of this work is hereby permitted to,
 * without further restrictions as long as due credit is given to the
 * authors and the notice below is retained, use, distribute, modify,
 * sell, give away, merge or sublicense it.
d5 6
d12 4
a15 3
 * ty whatsoever. Use it only at your own risk. In no event an author
 * or contributor may be held liable for any damage that, directly or
 * indirectly, originated through or is caused by this work.
@


1.2
log
@return the correct errno for the "not yet implemented" case:
 ENOCOFFEE
@
text
@d1 1
a1 1
/*	$MirBSD: fontcompile.c,v 1.1 2003/05/20 21:25:42 tg Exp $	*/
d3 2
a4 2
/*
 * Copyright (c) 1982-2003 by Thorsten "mirabile" Glaser <x86@@ePost.de>
d6 4
a9 3
 * Anyone who obtained a copy of this work is hereby permitted to freely use,
 * distribute, modify, merge, sublicence, give away or sell it as long as the
 * authors are given due credit and the following notice is retained:
d11 6
a16 7
 * This work is provided "as is", with no explicit or implicit warranty what-
 * soever. Use it only at your own risk. In no event may an author or contri-
 * butor be held liable for any damage, directly or indirectly, that origina-
 * ted through or is caused by creation or modification of this work.
 */

/* This programme works as a simple filter. In decompile (standard)
@


1.1
log
@add a font compiler/discompiler for the pcvtfonts
so people can design their own

currently only discompiling coded
@
text
@d1 1
a1 1
/*	$MirBSD$	*/
d26 1
d152 1
a152 1
	return 1;
@

