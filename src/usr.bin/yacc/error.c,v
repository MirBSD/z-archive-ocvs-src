head	1.1;
branch	1.1.1;
access;
symbols
	tg-mergetmp-mirosx-1:1.1.1.3
	tg-mergefixes-1-branch:1.1.1.3.0.14
	tg-mergefixes-1-base:1.1.1.3
	MIROS_X:1.1.1.3.0.12
	MIROS_X_BASE:1.1.1.3
	tg-mergetmp-3:1.1.1.3
	MIRBSD_XP_MIRPPC:1.1.1.3.0.10
	MIRBSD_XP_SPARC_BASE:1.1.1.3
	MIRBSD_XP_SPARC:1.1.1.3.0.8
	MIRBSD_7quater:1.1.1.3
	cvs-200405160640:1.1.1.3
	cvs-200401271800:1.1.1.3
	cvs-200401261630:1.1.1.3
	cvs-200401021645:1.1.1.3
	MIRBSD_7_ALPHA:1.1.1.3.0.6
	MIRBSD_7:1.1.1.3.0.4
	cvs-200312222040:1.1.1.3
	MIRBSD_7ter:1.1.1.3
	MIRBSD_7_DEV:1.1.1.3.0.2
	cvs-200310020700:1.1.1.3
	cvs-200309271030:1.1.1.3
	cvs-200309251530:1.1.1.3
	cvs-200308302005:1.1.1.3
	cvs-200308171200:1.1.1.3
	ctm-3496:1.1.1.3
	ctm-3449:1.1.1.3
	ctm-3437:1.1.1.3
	cvs-200307191805:1.1.1.3
	ctm-3425:1.1.1.3
	cvs-200307091500:1.1.1.3
	ctm-3389:1.1.1.3
	cvs-200306291430:1.1.1.3
	ctm-3341:1.1.1.2
	MIRBSD_5:1.1.1.2
	cvs-200306082100:1.1.1.2
	ctm-3316:1.1.1.2
	ctm-3272:1.1.1.1
	ctm-3264:1.1.1.1
	cvs-200305071630:1.1.1.1
	MIRBSD_4:1.1.1.1
	ctm-3203:1.1.1.1
	cvs-20030410-1130:1.1.1.1
	ctm-3155:1.1.1.1
	ctm-3132:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.1
date	2003.03.22.17.53.51;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.03.22.17.53.51;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2003.06.05.17.45.41;	author tg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2003.06.29.17.38.08;	author tg;	state Stab;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@/*	$OpenBSD: error.c,v 1.7 2002/06/19 03:24:56 deraadt Exp $	*/
/*	$NetBSD: error.c,v 1.4 1996/03/19 03:21:32 jtc Exp $	*/

/*
 * Copyright (c) 1989 The Regents of the University of California.
 * All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * Robert Paul Corbett.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#ifndef lint
#if 0
static char sccsid[] = "@@(#)error.c	5.3 (Berkeley) 6/1/90";
#else
static char rcsid[] = "$OpenBSD: error.c,v 1.7 2002/06/19 03:24:56 deraadt Exp $";
#endif
#endif /* not lint */

/* routines for printing error messages  */

#include "defs.h"


void
fatal(msg)
char *msg;
{
    fprintf(stderr, "%s: %s\n", input_file_name, msg);
    done(2);
}


void
no_space()
{
    fprintf(stderr, "%s: yacc is out of space\n", input_file_name);
    done(2);
}


void
open_error(filename)
char *filename;
{
    fprintf(stderr, "%s: cannot open source file\n", input_file_name);
    done(2);
}


void
unexpected_EOF()
{
    fprintf(stderr, "%s:%d: unexpected end-of-file\n",
	    input_file_name, lineno);
    done(1);
}


void
print_pos(st_line, st_cptr)
char *st_line;
char *st_cptr;
{
    char *s;

    if (st_line == 0) return;
    for (s = st_line; *s != '\n'; ++s)
    {
	if (isprint(*s) || *s == '\t')
	    putc(*s, stderr);
	else
	    putc('?', stderr);
    }
    putc('\n', stderr);
    for (s = st_line; s < st_cptr; ++s)
    {
	if (*s == '\t')
	    putc('\t', stderr);
	else
	    putc(' ', stderr);
    }
    putc('^', stderr);
    putc('\n', stderr);
}

void
syntax_error(st_lineno, st_line, st_cptr)
int st_lineno;
char *st_line;
char *st_cptr;
{
    fprintf(stderr, "%s:%d: syntax error\n",
	    input_file_name, st_lineno);
    print_pos(st_line, st_cptr);
    done(1);
}

void
unterminated_comment(c_lineno, c_line, c_cptr)
int c_lineno;
char *c_line;
char *c_cptr;
{
    fprintf(stderr, "%s:%d: unmatched /*\n",
	    input_file_name, c_lineno);
    print_pos(c_line, c_cptr);
    done(1);
}

void
unterminated_string(s_lineno, s_line, s_cptr)
int s_lineno;
char *s_line;
char *s_cptr;
{
    fprintf(stderr, "%s:%d:, unterminated string\n",
	    input_file_name, s_lineno);
    print_pos(s_line, s_cptr);
    done(1);
}

void
unterminated_text(t_lineno, t_line, t_cptr)
int t_lineno;
char *t_line;
char *t_cptr;
{
    fprintf(stderr, "%s:%d: unmatched %%{\n",
	    input_file_name, t_lineno);
    print_pos(t_line, t_cptr);
    done(1);
}

void
unterminated_union(u_lineno, u_line, u_cptr)
int u_lineno;
char *u_line;
char *u_cptr;
{
    fprintf(stderr, "%s:%d: unterminated %%union declaration\n",
	    input_file_name, u_lineno);
    print_pos(u_line, u_cptr);
    done(1);
}

void
over_unionized(u_cptr)
char *u_cptr;
{
    fprintf(stderr, "%s:%d: too many %%union declarations\n",
	    input_file_name, lineno);
    print_pos(line, u_cptr);
    done(1);
}

void
illegal_tag(t_lineno, t_line, t_cptr)
int t_lineno;
char *t_line;
char *t_cptr;
{
    fprintf(stderr, "%s:%d: illegal tag\n",
	    input_file_name, t_lineno);
    print_pos(t_line, t_cptr);
    done(1);
}


void
illegal_character(c_cptr)
char *c_cptr;
{
    fprintf(stderr, "%s:%d: illegal character\n",
	    input_file_name, lineno);
    print_pos(line, c_cptr);
    done(1);
}


void
used_reserved(s)
char *s;
{
    fprintf(stderr, "%s:%d: illegal use of reserved symbol %s\n",
	    input_file_name, lineno, s);
    done(1);
}

void
tokenized_start(s)
char *s;
{
     fprintf(stderr, "%s:%d: the start symbol %s cannot be declared to be a token\n",
	    input_file_name, lineno, s);
     done(1);
}

void
retyped_warning(s)
char *s;
{
    fprintf(stderr, "%s:%d: the type of %s has been redeclared\n",
	    input_file_name, lineno, s);
}

void
reprec_warning(s)
char *s;
{
    fprintf(stderr, "%s:%d: the precedence of %s has been redeclared\n",
	    input_file_name, lineno, s);
}

void
revalued_warning(s)
char *s;
{
    fprintf(stderr, "%s:%d: the value of %s has been redeclared\n",
	    input_file_name, lineno, s);
}

void
terminal_start(s)
char *s;
{
    fprintf(stderr, "%s:%d: the start symbol %s is a token\n",
	    input_file_name, lineno, s);
    done(1);
}

void
restarted_warning()
{
    fprintf(stderr, "%s:%d: the start symbol has been redeclared\n",
	     input_file_name, lineno);
}

void
no_grammar()
{
    fprintf(stderr, "%s:%d: no grammar has been specified\n",
	    input_file_name, lineno);
    done(1);
}

void
terminal_lhs(s_lineno)
int s_lineno;
{
    fprintf(stderr, "%s:%d: a token appears on the lhs of a production\n",
	    input_file_name, s_lineno);
    done(1);
}

void
prec_redeclared()
{
    fprintf(stderr, "%s:%d: conflicting %%prec specifiers\n",
	    input_file_name, lineno);
}

void
unterminated_action(a_lineno, a_line, a_cptr)
int a_lineno;
char *a_line;
char *a_cptr;
{
    fprintf(stderr, "%s:%d: unterminated action\n",
	    input_file_name, a_lineno);
    print_pos(a_line, a_cptr);
    done(1);
}

void
dollar_warning(a_lineno, i)
int a_lineno;
int i;
{
    fprintf(stderr, "%s:%d: $%d references beyond the end of the current rule\n",
	    input_file_name, a_lineno, i);
}

void
dollar_error(a_lineno, a_line, a_cptr)
int a_lineno;
char *a_line;
char *a_cptr;
{
    fprintf(stderr, "%s:%d: illegal $-name\n",
	    input_file_name, a_lineno);
    print_pos(a_line, a_cptr);
    done(1);
}


void
untyped_lhs()
{
    fprintf(stderr, "%s:%d: $$ is untyped\n",
	    input_file_name, lineno);
    done(1);
}

void
untyped_rhs(i, s)
int i;
char *s;
{
    fprintf(stderr, "%s:%d: $%d (%s) is untyped\n",
	    input_file_name, lineno, i, s);
    done(1);
}

void
unknown_rhs(i)
int i;
{
    fprintf(stderr, "%s:%d: $%d is untyped\n",
	    input_file_name, lineno, i);
    done(1);
}

void
default_action_warning()
{
    fprintf(stderr, "%s:%d: the default action assigns an undefined value to $$\n",
	    input_file_name, lineno);
}

void
undefined_goal(s)
char *s;
{
    fprintf(stderr, "%s: the start symbol %s is undefined\n", input_file_name, s);
    done(1);
}

void
undefined_symbol_warning(s)
char *s;
{
    fprintf(stderr, "%s: the symbol %s is undefined\n", input_file_name, s);
}
@


1.1.1.1
log
@Import OpenBSD 3.3 source repository from CTM 3132 the first time
This opens an OpenBSD-mirabile (aka MirBSD) repository.

### MirBSD is:
# Copyright (c) 1982-2003 by Thorsten "mirabile" Glaser <x86@@ePost.de>
# Copyright © 1968-2003  The authors of And contributors to UNIX®, the
#       C Language, BSD/Berkeley Unix; 386BSD, NetBSD 1.1 and OpenBSD.
#
# Anyone who obtained a copy of this work is hereby permitted to freely use,
# distribute, modify, merge, sublicence, give away or sell it as long as the
# authors are given due credit and the following notice is retained:
#
# This work is provided "as is", with no explicit or implicit warranty what-
# soever. Use it only at your own risk. In no event may an author or contri-
# butor be held liable for any damage, directly or indirectly, that origina-
# ted through or is caused by creation or modification of this work.

MirBSD is my private tree. MirBSD does not differ very much from OpenBSD
and intentionally tracks OpenBSD. That's why it _is_ OpenBSD, just not the
official one. It's like with DarrenBSD.

At time of this writing, no advertising for MirBSD must be done,
because the advertising clause has not yet been sorted out.

http://templeofhate.com/tglaser/MirBSD/index.php
@
text
@@


1.1.1.2
log
@Import latest OpenBSD CVS tree by CTM in order
to sync the base system and ports tree with Them.

This includes the recent licence changes as well - by
importing the changed base and re-applying the diffs
(with cvs up -j -j) they are inherited, and we're not
bound to the removed clauses any longer.
@
text
@d1 1
a1 1
/*	$OpenBSD: error.c,v 1.8 2003/06/03 02:56:24 millert Exp $	*/
d19 5
a23 1
 * 3. Neither the name of the University nor the names of its contributors
d44 1
a44 1
static char rcsid[] = "$OpenBSD: error.c,v 1.8 2003/06/03 02:56:24 millert Exp $";
@


1.1.1.3
log
@the previous cvs import did not finish due to 'memory fault'
sync with OpenBSD-cvs
@
text
@d1 1
a1 1
/*	$OpenBSD: error.c,v 1.9 2003/06/19 16:34:53 pvalchev Exp $	*/
d40 1
a40 1
static char rcsid[] = "$OpenBSD: error.c,v 1.9 2003/06/19 16:34:53 pvalchev Exp $";
d50 2
a51 1
fatal(char *msg)
d59 1
a59 1
no_space(void)
d67 2
a68 1
open_error(char *filename)
d76 1
a76 1
unexpected_EOF(void)
d85 3
a87 1
print_pos(char *st_line, char *st_cptr)
d112 4
a115 1
syntax_error(int st_lineno, char *st_line, char *st_cptr)
d124 4
a127 1
unterminated_comment(int c_lineno, char *c_line, char *c_cptr)
d136 4
a139 1
unterminated_string(int s_lineno, char *s_line, char *s_cptr)
d148 4
a151 1
unterminated_text(int t_lineno, char *t_line, char *t_cptr)
d160 4
a163 1
unterminated_union(int u_lineno, char *u_line, char *u_cptr)
d172 2
a173 1
over_unionized(char *u_cptr)
d182 4
a185 1
illegal_tag(int t_lineno, char *t_line, char *t_cptr)
d195 2
a196 1
illegal_character(char *c_cptr)
d206 2
a207 1
used_reserved(char *s)
d215 2
a216 1
tokenized_start(char *s)
d224 2
a225 1
retyped_warning(char *s)
d232 2
a233 1
reprec_warning(char *s)
d240 2
a241 1
revalued_warning(char *s)
d248 2
a249 1
terminal_start(char *s)
d257 1
a257 1
restarted_warning(void)
d264 1
a264 1
no_grammar(void)
d272 2
a273 1
terminal_lhs(int s_lineno)
d281 1
a281 1
prec_redeclared(void)
d288 4
a291 1
unterminated_action(int a_lineno, char *a_line, char *a_cptr)
d300 3
a302 1
dollar_warning(int a_lineno, int i)
d309 4
a312 1
dollar_error(int a_lineno, char *a_line, char *a_cptr)
d322 1
a322 1
untyped_lhs(void)
d330 3
a332 1
untyped_rhs(int i, char *s)
d340 2
a341 1
unknown_rhs(int i)
d349 1
a349 1
default_action_warning(void)
d356 2
a357 1
undefined_goal(char *s)
d364 2
a365 1
undefined_symbol_warning(char *s)
@


