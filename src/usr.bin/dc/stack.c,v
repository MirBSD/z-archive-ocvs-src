head	1.1;
branch	1.1.1;
access;
symbols
	tg-mergetmp-mirosx-1:1.1.1.4
	tg-mergefixes-1-branch:1.1.1.4.0.8
	tg-mergefixes-1-base:1.1.1.4
	MIROS_X:1.1.1.4.0.6
	MIROS_X_BASE:1.1.1.4
	tg-mergetmp-3:1.1.1.4
	cvs-200412031430:1.1.1.4
	MIRBSD_XP_MIRPPC:1.1.1.4.0.4
	cvs-200410222040:1.1.1.4
	tg-mergetmp-1:1.1.1.4
	MIRBSD_XP_SPARC_BASE:1.1.1.4
	MIRBSD_XP_SPARC:1.1.1.4.0.2
	MIRBSD_7quater:1.1.1.2.2.1
	cvs-200405160640:1.1.1.4
	cvs-200401271800:1.1.1.4
	cvs-200401261630:1.1.1.4
	cvs-200401021645:1.1.1.4
	MIRBSD_7_ALPHA:1.1.1.2.2.1.0.4
	MIRBSD_7:1.1.1.2.2.1.0.2
	cvs-200312222040:1.1.1.4
	cvs-200312031730:1.1.1.4
	MIRBSD_7ter:1.1.1.2.2.1
	cvs-200310232020:1.1.1.3
	MIRBSD_7_DEV:1.1.1.2.0.2
	cvs-200310081755:1.1.1.2
	cvs-200310020700:1.1.1.2
	cvs-200309271030:1.1.1.1
	cvs-200309261610:1.1.1.1
	cvs-200309251530:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.1
date	2003.09.25.16.40.42;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.09.25.16.40.42;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2003.10.02.07.49.35;	author tg;	state Exp;
branches
	1.1.1.2.2.1;
next	1.1.1.3;

1.1.1.3
date	2003.10.23.20.23.37;	author tg;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2003.12.03.17.46.02;	author tg;	state Stab;
branches;
next	;

1.1.1.2.2.1
date	2003.10.23.20.49.14;	author tg;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@/*	$OpenBSD: stack.c,v 1.2 2003/09/19 19:00:36 deraadt Exp $	*/

/*
 * Copyright (c) 2003, Otto Moerbeek <otto@@drijf.net>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#ifndef lint
static const char rcsid[] = "$OpenBSD: stack.c,v 1.2 2003/09/19 19:00:36 deraadt Exp $";
#endif /* not lint */

#include <err.h>
#include <stdlib.h>
#include <string.h>

#include "extern.h"

static __inline bool	stack_empty(const struct stack *);
static void		stack_grow(struct stack *);
static struct array	*array_new(void);
static __inline void	array_free(struct array *);
static struct array *	array_dup(const struct array *);
static __inline void	array_grow(struct array *, size_t);
static __inline void	array_assign(struct array *, size_t, const struct value *);
static __inline struct value	*array_retrieve(const struct array *, size_t);

void
stack_init(struct stack *stack)
{
	stack->size = 0;
	stack->sp = -1;
	stack->stack = NULL;
}

static __inline bool
stack_empty(const struct stack * stack)
{
	bool empty = stack->sp == -1;
	if (empty)
		warnx("stack empty");
	return empty;
}

/* Clear number or string, but leave value itself */
void
stack_free_value(struct value *v)
{
	switch (v->type) {
	case BCODE_NONE:
		break;
	case BCODE_NUMBER:
		free_number(v->u.num);
		break;
	case BCODE_STRING:
		free(v->u.string);
		break;
	}
	if (v->array != NULL) {
		array_free(v->array);
		v->array = NULL;
	}
}

/* Copy number or string content into already allocated target */
struct value *
stack_dup_value(const struct value *a, struct value *copy)
{
	copy->type = a->type;

	switch (a->type) {
	case BCODE_NONE:
		break;
	case BCODE_NUMBER:
		copy->u.num = dup_number(a->u.num);
		break;
	case BCODE_STRING:
		copy->u.string = strdup(a->u.string);
		if (copy->u.string == NULL)
			err(1, "cannot dup string");
		break;
	}

	copy->array = a->array == NULL ? NULL : array_dup(a->array);

	return copy;
}

int
stack_size(const struct stack * stack)
{
	return stack->sp + 1;
}

void
stack_dup(struct stack *stack)
{
	struct value	*value;
	struct value	copy;

	value = stack_tos(stack);
	if (value == NULL) {
		warnx("stack empty");
		return;
	}
	stack_push(stack, stack_dup_value(value, &copy));
}

static void
stack_grow(struct stack *stack)
{
	int old_size, i;

	if (++stack->sp == stack->size) {
		old_size = stack->size;
		stack->size *= 2;
		stack->stack = brealloc(stack->stack,
		    ++stack->size * sizeof(*stack->stack));
		for (i = old_size; i < stack->size; i++)
			stack->stack[i].array = NULL;
	}
}

void
stack_pushnumber(struct stack *stack, struct number *b)
{
	stack_grow(stack);
	stack->stack[stack->sp].type = BCODE_NUMBER;
	stack->stack[stack->sp].u.num = b;
}

void
stack_pushstring(struct stack *stack, char *string)
{
	stack_grow(stack);
	stack->stack[stack->sp].type = BCODE_STRING;
	stack->stack[stack->sp].u.string = string;
}

void
stack_push(struct stack *stack, struct value *v)
{
	switch (v->type) {
	case BCODE_NONE:
		stack_grow(stack);
		stack->stack[stack->sp].type = BCODE_NONE;
		break;
	case BCODE_NUMBER:
		stack_pushnumber(stack, v->u.num);
		break;
	case BCODE_STRING:
		stack_pushstring(stack, v->u.string);
		break;
	}
	stack->stack[stack->sp].array = v->array == NULL ?
	    NULL : array_dup(v->array);
}

struct value *
stack_tos(const struct stack *stack)
{
	if (stack->sp == -1)
		return NULL;
	return &stack->stack[stack->sp];
}

void
stack_set_tos(struct stack *stack, struct value *v)
{
	if (stack->sp == -1)
		stack_push(stack, v);
	else {
		stack_free_value(&stack->stack[stack->sp]);
		stack->stack[stack->sp] = *v;
		stack->stack[stack->sp].array = v->array == NULL ?
			NULL : array_dup(v->array);
	}
}

struct value *
stack_pop(struct stack *stack)
{
	if (stack_empty(stack))
		return NULL;
	return &stack->stack[stack->sp--];
}

struct number *
stack_popnumber(struct stack *stack)
{
	if (stack_empty(stack))
		return NULL;
	if (stack->stack[stack->sp].array != NULL) {
		array_free(stack->stack[stack->sp].array);
		stack->stack[stack->sp].array = NULL;
	}
	if (stack->stack[stack->sp].type != BCODE_NUMBER) {
		warnx("not a number"); /* XXX remove */
		return NULL;
	}
	return stack->stack[stack->sp--].u.num;
}

char *
stack_popstring(struct stack *stack)
{
	if (stack_empty(stack))
		return NULL;
	if (stack->stack[stack->sp].array != NULL) {
		array_free(stack->stack[stack->sp].array);
		stack->stack[stack->sp].array = NULL;
	}
	if (stack->stack[stack->sp].type != BCODE_STRING) {
		warnx("not a string"); /* XXX remove */
		return NULL;
	}
	return stack->stack[stack->sp--].u.string;
}

void
stack_clear(struct stack *stack)
{
	while (stack->sp >= 0) {
		stack_free_value(&stack->stack[stack->sp--]);
	}
	free(stack->stack);
	stack_init(stack);
}

void
stack_print(FILE *f, const struct stack *stack, const char *prefix, u_int base)
{
	int i;

	for (i = stack->sp; i >= 0; i--) {
		print_value(f, &stack->stack[i], prefix, base);
		putc('\n', f);
	}
}


static struct array *
array_new(void)
{
	struct array *a;

	a = bmalloc(sizeof(*a));
	a->data = NULL;
	a->size = 0;
	return a;
}

static __inline void
array_free(struct array *a)
{
	u_int i;

	if (a == NULL)
		return;
	for (i = 0; i < a->size; i++)
		stack_free_value(&a->data[i]);
	free(a->data);
	free(a);
}

static struct array *
array_dup(const struct array *a)
{
	struct array	*n;
	u_int		i;

	if (a == NULL)
		return NULL;
	n = array_new();
	array_grow(n, a->size);
	for (i = 0; i < a->size; i++)
		stack_dup_value(&a->data[i], &n->data[i]);
	return n;
}

static __inline void
array_grow(struct array *array, size_t newsize)
{
	size_t i;

	array->data = brealloc(array->data, newsize * sizeof(*array->data));
	for (i = array->size; i < newsize; i++)
		array->data[i].array = NULL;
	array->size = newsize;
}

static __inline void
array_assign(struct array *array, size_t index, const struct value *v)
{
	if (index >= array->size)
		array_grow(array, index+1);
	array->data[index] = *v;
}

static __inline struct value *
array_retrieve(const struct array *array, size_t index)
{
	if (index >= array->size)
		return NULL;
	return &array->data[index];
}

void
frame_assign(struct stack *stack, size_t index, const struct value *v)
{
	struct array *a;
	struct value n;

	if (stack->sp == -1) {
		n.type = BCODE_NONE;
		n.array = NULL;
		stack_push(stack, &n);
	}

	a = stack->stack[stack->sp].array;
	if (a == NULL)
		a = stack->stack[stack->sp].array = array_new();
	array_assign(a, index, v);
}

struct value *
frame_retrieve(const struct stack *stack, size_t index)
{
	struct array *a;

	a = stack->stack[stack->sp].array;
	if (a == NULL)
		a = stack->stack[stack->sp].array = array_new();
	return array_retrieve(a, index);
}

/*
void
frame_free(struct stack *stack)
{
	struct array *a;

	a = stack->stack[stack->sp].array;
	if (a != NULL) {
		array_free(a);
		stack->stack[stack->sp].array = NULL;
	}
}
*/
@


1.1.1.1
log
@Release Time. Synchronize with OpenBSD 3.4-current (base system).
@
text
@@


1.1.1.2
log
@Import OpenBSD source tree again, with critical bug fixes
(OpenSSL, bc, dc, sensorsd, pf, ...)
@
text
@d1 1
a1 1
/*	$OpenBSD: stack.c,v 1.3 2003/09/28 19:29:33 otto Exp $	*/
d20 1
a20 1
static const char rcsid[] = "$OpenBSD: stack.c,v 1.3 2003/09/28 19:29:33 otto Exp $";
d122 1
a122 1
	int new_size, i;
d125 2
a126 1
		new_size = stack->size * 2 + 1;
d128 2
a129 2
		    new_size * sizeof(*stack->stack));
		for (i = stack->size; i < new_size; i++)
a130 1
		stack->size = new_size;
@


1.1.1.2.2.1
log
@that bc/dc fix sync with OpenBSD (must-have fix :)
@
text
@d1 1
a1 1
/*	$OpenBSD: stack.c,v 1.4 2003/10/18 20:34:26 otto Exp $	*/
d20 1
a20 1
static const char rcsid[] = "$OpenBSD: stack.c,v 1.4 2003/10/18 20:34:26 otto Exp $";
d90 1
a90 1
			err(1, NULL);
@


1.1.1.3
log
@Import fixed bc and dc from OpenBSD-current (a must-have :)
@
text
@d1 1
a1 1
/*	$OpenBSD: stack.c,v 1.4 2003/10/18 20:34:26 otto Exp $	*/
d20 1
a20 1
static const char rcsid[] = "$OpenBSD: stack.c,v 1.4 2003/10/18 20:34:26 otto Exp $";
d90 1
a90 1
			err(1, NULL);
@


1.1.1.4
log
@Import selected parts of the OpenBSD base system:
 * vnd change - you'll have to re-run MAKEDEV after booting a new kernel
 * misc. changes in /etc, mostly user related
 * Perl 5.8.2 (diff to MirPorts will be committed RSN)
 * some changes to binutils
 * Updates in bc and dc
@
text
@d1 1
a1 1
/*	$OpenBSD: stack.c,v 1.6 2003/11/26 19:30:52 otto Exp $	*/
d20 1
a20 1
static const char rcsid[] = "$OpenBSD: stack.c,v 1.6 2003/11/26 19:30:52 otto Exp $";
a118 14
void
stack_swap(struct stack *stack)
{
	struct value	copy;

	if (stack->sp < 1) {
		warnx("stack empty");
		return;
	}
	copy = stack->stack[stack->sp];
	stack->stack[stack->sp] = stack->stack[stack->sp-1];
	stack->stack[stack->sp-1] = copy;
}

a340 2
	if (stack->sp == -1)
		return NULL;
d346 14
@


