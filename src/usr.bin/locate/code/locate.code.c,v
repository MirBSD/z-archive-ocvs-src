head	1.1;
branch	1.1.1;
access;
symbols
	tg-mergetmp-mirosx-1:1.1.1.5
	tg-mergefixes-1-branch:1.1.1.5.0.8
	tg-mergefixes-1-base:1.1.1.5
	MIROS_X:1.1.1.5.0.6
	MIROS_X_BASE:1.1.1.5
	tg-mergetmp-3:1.1.1.5
	MIRBSD_XP_MIRPPC:1.1.1.5.0.4
	MIRBSD_XP_SPARC_BASE:1.1.1.5
	MIRBSD_XP_SPARC:1.1.1.5.0.2
	MIRBSD_7quater:1.1.1.4
	cvs-200405160640:1.1.1.5
	cvs-200401271800:1.1.1.5
	cvs-200401261630:1.1.1.5
	cvs-200401021645:1.1.1.5
	MIRBSD_7_ALPHA:1.1.1.4.0.6
	MIRBSD_7:1.1.1.4.0.4
	cvs-200312222040:1.1.1.5
	MIRBSD_7ter:1.1.1.4
	MIRBSD_7_DEV:1.1.1.4.0.2
	cvs-200310020700:1.1.1.4
	cvs-200309271030:1.1.1.3
	cvs-200309251530:1.1.1.3
	cvs-200308302005:1.1.1.3
	cvs-200308171200:1.1.1.3
	ctm-3496:1.1.1.3
	ctm-3449:1.1.1.3
	ctm-3437:1.1.1.3
	cvs-200307191805:1.1.1.3
	ctm-3425:1.1.1.3
	cvs-200307091500:1.1.1.3
	ctm-3389:1.1.1.2
	cvs-200306301405:1.1.1.2
	cvs-200306291430:1.1.1.2
	ctm-3341:1.1.1.2
	MIRBSD_5:1.1.1.2
	cvs-200306082100:1.1.1.2
	ctm-3316:1.1.1.2
	ctm-3272:1.1.1.1
	ctm-3264:1.1.1.1
	cvs-200305071630:1.1.1.1
	MIRBSD_4:1.1.1.1
	ctm-3203:1.1.1.1
	cvs-20030410-1130:1.1.1.1
	ctm-3155:1.1.1.1
	ctm-3132:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.1
date	2003.03.22.17.53.03;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.03.22.17.53.03;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2003.06.05.17.43.26;	author tg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2003.07.09.16.49.16;	author tg;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2003.10.02.07.50.04;	author tg;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2003.12.22.21.13.30;	author tg;	state Stab;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@/*
 *	$OpenBSD: locate.code.c,v 1.9 2002/02/16 21:27:48 millert Exp $
 *
 * Copyright (c) 1989, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * James A. Woods.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * 	$Id: locate.code.c,v 1.9 2002/02/16 21:27:48 millert Exp $
 */

#ifndef lint
static char copyright[] =
"@@(#) Copyright (c) 1989, 1993\n\
	The Regents of the University of California.  All rights reserved.\n";
#endif /* not lint */

#ifndef lint
#if 0
static char sccsid[] = "@@(#)locate.code.c	8.1 (Berkeley) 6/6/93";
#else
static char rcsid[] = "$OpenBSD: locate.code.c,v 1.9 2002/02/16 21:27:48 millert Exp $";
#endif
#endif /* not lint */

/*
 * PURPOSE:	sorted list compressor (works with a modified 'find'
 *		to encode/decode a filename database)
 *
 * USAGE:	bigram < list > bigrams
 *		process bigrams (see updatedb) > common_bigrams
 *		code common_bigrams < list > squozen_list
 *
 * METHOD:	Uses 'front compression' (see ";login:", Volume 8, Number 1
 *		February/March 1983, p. 8).  Output format is, per line, an
 *		offset differential count byte followed by a partially bigram-
 *		encoded ascii residue.  A bigram is a two-character sequence,
 *		the first 128 most common of which are encoded in one byte.
 *
 * EXAMPLE:	For simple front compression with no bigram encoding,
 *		if the input is...		then the output is...
 *
 *		/usr/src			 0 /usr/src
 *		/usr/src/cmd/aardvark.c		 8 /cmd/aardvark.c
 *		/usr/src/cmd/armadillo.c	14 armadillo.c
 *		/usr/tmp/zoo			 5 tmp/zoo
 *
 *	The codes are:
 *
 *	0-28	likeliest differential counts + offset to make nonnegative
 *	30	switch code for out-of-range count to follow in next word
 *      31      an 8 bit char followed
 *	128-255 bigram codes (128 most common, as determined by 'updatedb')
 *	32-127  single character (printable) ascii residue (ie, literal)
 *
 * The locate database store any character except newline ('\n') 
 * and NUL ('\0'). The 8-bit character support don't wast extra
 * space until you have characters in file names less than 32
 * or greather than 127.
 * 
 *
 * SEE ALSO:	updatedb.sh, ../bigram/locate.bigram.c
 *
 * AUTHOR:	James A. Woods, Informatics General Corp.,
 *		NASA Ames Research Center, 10/82
 *              8-bit file names characters: 
 *              	Wolfram Schneider, Berlin September 1996
 */

#include <sys/param.h>
#include <err.h>
#include <errno.h>
#include <stdlib.h>
#include <string.h>
#include <stdio.h>
#include "locate.h"

#define	BGBUFSIZE	(NBG * 2)	/* size of bigram buffer */

u_char buf1[MAXPATHLEN] = " ";	
u_char buf2[MAXPATHLEN];
u_char bigrams[BGBUFSIZE + 1] = { 0 };

#define LOOKUP 1 /* use a lookup array instead a function, 3x faster */

#ifdef LOOKUP
#define BGINDEX(x) (big[(u_char)*x][(u_char)*(x + 1)])
typedef short bg_t;
bg_t big[UCHAR_MAX + 1][UCHAR_MAX + 1];
#else
#define BGINDEX(x) bgindex(x)
typedef int bg_t;
int	bgindex(char *);
#endif /* LOOKUP */


void	usage(void);
extern int optind;
extern int optopt;

int
main(argc, argv)
	int argc;
	char *argv[];
{
	u_char *cp, *oldpath, *path;
	int ch, code, count, diffcount, oldcount;
	FILE *fp;
	int i, j;

	while ((ch = getopt(argc, argv, "")) != -1)
		switch(ch) {
		default:
			usage();
		}
	argc -= optind;
	argv += optind;

	if (argc != 1)
		usage();

	if ((fp = fopen(argv[0], "r")) == NULL)
		err(1, "%s", argv[0]);

	/* First copy bigram array to stdout. */
	(void)fgets(bigrams, BGBUFSIZE + 1, fp);

	if (fwrite(bigrams, 1, BGBUFSIZE, stdout) != BGBUFSIZE)
		err(1, "stdout");
	(void)fclose(fp);

#ifdef LOOKUP
	/* init lookup table */
	for (i = 0; i < UCHAR_MAX + 1; i++)
	    	for (j = 0; j < UCHAR_MAX + 1; j++) 
			big[i][j] = (bg_t)-1;

	for (cp = bigrams, i = 0; *cp != '\0'; i += 2, cp += 2)
	        big[(u_char)*cp][(u_char)*(cp + 1)] = (bg_t)i;

#endif /* LOOKUP */

	oldpath = buf1;
	path = buf2;
	oldcount = 0;

	while (fgets(path, sizeof(buf2), stdin) != NULL) {

		/* skip empty lines */
		if (*path == '\n')
			continue;

		/* remove newline */
		for (cp = path; *cp != '\0'; cp++) {
			/* chop newline */
			if (*cp == '\n')
				*cp = '\0';
		}

		/* Skip longest common prefix. */
		for (cp = path; *cp == *oldpath; cp++, oldpath++)
			if (*cp == '\0')
				break;

		count = cp - path;
		diffcount = count - oldcount + OFFSET;
		oldcount = count;
		if (diffcount < 0 || diffcount > 2 * OFFSET) {
			if (putchar(SWITCH) == EOF ||
			    putw(diffcount, stdout) == EOF)
				err(1, "stdout");
		} else
			if (putchar(diffcount) == EOF)
				err(1, "stdout");

		while (*cp != '\0') {
			/* print *two* characters */

			if ((code = BGINDEX(cp)) != (bg_t)-1) {
				/*
				 * print *one* as bigram
				 * Found, so mark byte with 
				 *  parity bit. 
				 */
				if (putchar((code / 2) | PARITY) == EOF)
					err(1, "stdout");
				cp += 2;
			}

			else {
				for (i = 0; i < 2; i++) {
					if (*cp == '\0')
						break;

					/* print umlauts in file names */
					if (*cp < ASCII_MIN || 
					    *cp > ASCII_MAX) {
						if (putchar(UMLAUT) == EOF ||
						    putchar(*cp++) == EOF)
							err(1, "stdout");
					} 

					else {
						/* normal character */
						if(putchar(*cp++) == EOF)
							err(1, "stdout");
					}
				}

			}
		}

		if (path == buf1) {		/* swap pointers */
			path = buf2;
			oldpath = buf1;
		} else {
			path = buf1;
			oldpath = buf2;
		}
	}
	/* Non-zero status if there were errors */
	if (fflush(stdout) != 0 || ferror(stdout))
		exit(1);
	exit(0);
}

#ifndef LOOKUP
int
bgindex(bg)			/* Return location of bg in bigrams or -1. */
	char *bg;
{
	char bg0, bg1, *p;

	bg0 = bg[0];
	bg1 = bg[1];
	for (p = bigrams; *p != NULL; p++)
		if (*p++ == bg0 && *p == bg1)
			break;
	return (*p == NULL ? -1 : (--p - bigrams));
}
#endif /* !LOOKUP */

void
usage()
{
	(void)fprintf(stderr,
	    "usage: locate.code common_bigrams < list > squozen_list\n");
	exit(1);
}
@


1.1.1.1
log
@Import OpenBSD 3.3 source repository from CTM 3132 the first time
This opens an OpenBSD-mirabile (aka MirBSD) repository.

### MirBSD is:
# Copyright (c) 1982-2003 by Thorsten "mirabile" Glaser <x86@@ePost.de>
# Copyright © 1968-2003  The authors of And contributors to UNIX®, the
#       C Language, BSD/Berkeley Unix; 386BSD, NetBSD 1.1 and OpenBSD.
#
# Anyone who obtained a copy of this work is hereby permitted to freely use,
# distribute, modify, merge, sublicence, give away or sell it as long as the
# authors are given due credit and the following notice is retained:
#
# This work is provided "as is", with no explicit or implicit warranty what-
# soever. Use it only at your own risk. In no event may an author or contri-
# butor be held liable for any damage, directly or indirectly, that origina-
# ted through or is caused by creation or modification of this work.

MirBSD is my private tree. MirBSD does not differ very much from OpenBSD
and intentionally tracks OpenBSD. That's why it _is_ OpenBSD, just not the
official one. It's like with DarrenBSD.

At time of this writing, no advertising for MirBSD must be done,
because the advertising clause has not yet been sorted out.

http://templeofhate.com/tglaser/MirBSD/index.php
@
text
@@


1.1.1.2
log
@Import latest OpenBSD CVS tree by CTM in order
to sync the base system and ports tree with Them.

This includes the recent licence changes as well - by
importing the changed base and re-applying the diffs
(with cvs up -j -j) they are inherited, and we're not
bound to the removed clauses any longer.
@
text
@d2 1
a2 1
 *	$OpenBSD: locate.code.c,v 1.10 2003/06/03 02:56:10 millert Exp $
d18 5
a22 1
 * 3. Neither the name of the University nor the names of its contributors
d38 1
a38 1
 * 	$Id: locate.code.c,v 1.10 2003/06/03 02:56:10 millert Exp $
d51 1
a51 1
static char rcsid[] = "$OpenBSD: locate.code.c,v 1.10 2003/06/03 02:56:10 millert Exp $";
@


1.1.1.3
log
@Bring the entire base system and ports tree in sync with OpenBSD
@
text
@d2 1
a2 1
 *	$OpenBSD: locate.code.c,v 1.11 2003/07/07 21:36:16 deraadt Exp $
d34 1
a34 1
 * 	$Id: locate.code.c,v 1.11 2003/07/07 21:36:16 deraadt Exp $
d47 1
a47 1
static char rcsid[] = "$OpenBSD: locate.code.c,v 1.11 2003/07/07 21:36:16 deraadt Exp $";
d127 3
a129 1
main(int argc, char *argv[])
d254 2
a255 1
bgindex(char *bg)			/* Return location of bg in bigrams or -1. */
d269 1
a269 1
usage(void)
@


1.1.1.4
log
@Import OpenBSD source tree again, with critical bug fixes
(OpenSSL, bc, dc, sensorsd, pf, ...)
@
text
@d2 1
a2 1
 *	$OpenBSD: locate.code.c,v 1.12 2003/09/29 16:03:16 deraadt Exp $
d34 1
a34 1
 * 	$Id: locate.code.c,v 1.12 2003/09/29 16:03:16 deraadt Exp $
d47 1
a47 1
static char rcsid[] = "$OpenBSD: locate.code.c,v 1.12 2003/09/29 16:03:16 deraadt Exp $";
d81 1
a81 1
 * The locate database store any character except newline ('\n')
d85 1
a85 1
 *
d91 1
a91 1
 *              8-bit file names characters:
d105 1
a105 1
u_char buf1[MAXPATHLEN] = " ";
d135 1
a135 1
		switch (ch) {
d158 1
a158 1
	    	for (j = 0; j < UCHAR_MAX + 1; j++)
d162 1
a162 1
		big[(u_char)*cp][(u_char)*(cp + 1)] = (bg_t)i;
d205 2
a206 2
				 * Found, so mark byte with
				 *  parity bit.
d211 3
a213 1
			} else {
d219 1
a219 1
					if (*cp < ASCII_MIN ||
d224 3
a226 1
					} else {
d228 1
a228 1
						if (putchar(*cp++) == EOF)
@


1.1.1.5
log
@Time to import OpenBSD once again. Expect breakage.
@
text
@d2 1
a2 1
 *	$OpenBSD: locate.code.c,v 1.13 2003/11/09 20:13:57 otto Exp $
d34 1
a34 1
 * 	$Id: locate.code.c,v 1.13 2003/11/09 20:13:57 otto Exp $
d47 1
a47 1
static char rcsid[] = "$OpenBSD: locate.code.c,v 1.13 2003/11/09 20:13:57 otto Exp $";
d84 1
a84 1
 * or greater than 127.
@


