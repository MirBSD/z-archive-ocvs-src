head	1.1;
branch	1.1.1;
access;
symbols
	tg-mergetmp-mirosx-1:1.1.1.4
	tg-mergefixes-1-branch:1.1.1.4.0.8
	tg-mergefixes-1-base:1.1.1.4
	MIROS_X:1.1.1.4.0.6
	MIROS_X_BASE:1.1.1.4
	tg-mergetmp-3:1.1.1.4
	MIRBSD_XP_MIRPPC:1.1.1.4.0.4
	MIRBSD_XP_SPARC_BASE:1.1.1.4
	MIRBSD_XP_SPARC:1.1.1.4.0.2
	MIRBSD_7quater:1.1.1.3
	cvs-200405160640:1.1.1.4
	cvs-200401271800:1.1.1.4
	cvs-200401261630:1.1.1.4
	cvs-200401021645:1.1.1.4
	MIRBSD_7_ALPHA:1.1.1.3.0.6
	MIRBSD_7:1.1.1.3.0.4
	cvs-200312222040:1.1.1.4
	MIRBSD_7ter:1.1.1.3
	MIRBSD_7_DEV:1.1.1.3.0.2
	cvs-200310020700:1.1.1.3
	cvs-200309271030:1.1.1.3
	cvs-200309251530:1.1.1.3
	cvs-200308302005:1.1.1.3
	cvs-200308171200:1.1.1.3
	ctm-3496:1.1.1.3
	ctm-3449:1.1.1.2
	ctm-3437:1.1.1.2
	cvs-200307191805:1.1.1.2
	ctm-3425:1.1.1.2
	cvs-200307091500:1.1.1.2
	ctm-3389:1.1.1.2
	cvs-200306291430:1.1.1.2
	ctm-3341:1.1.1.2
	MIRBSD_5:1.1.1.1
	cvs-200306082100:1.1.1.1
	ctm-3316:1.1.1.1
	ctm-3272:1.1.1.1
	ctm-3264:1.1.1.1
	cvs-200305071630:1.1.1.1
	MIRBSD_4:1.1.1.1
	ctm-3203:1.1.1.1
	cvs-20030410-1130:1.1.1.1
	ctm-3155:1.1.1.1
	ctm-3132:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.1
date	2003.03.22.17.53.15;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.03.22.17.53.15;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2003.06.19.12.53.37;	author tg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2003.08.11.18.45.45;	author tg;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2003.12.22.21.14.02;	author tg;	state Stab;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@/*	$OpenBSD: rup.c,v 1.16 2002/05/27 03:14:07 deraadt Exp $	*/

/*-
 * Copyright (c) 1993, John Brezak
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#ifndef lint
static char rcsid[] = "$OpenBSD: rup.c,v 1.16 2002/05/27 03:14:07 deraadt Exp $";
#endif /* not lint */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>
#include <sys/param.h>
#include <sys/socket.h>
#include <netdb.h>
#include <rpc/rpc.h>
#include <rpc/pmap_clnt.h>
#include <arpa/inet.h>
#include <err.h>

#undef FSHIFT			/* Use protocol's shift and scale values */
#undef FSCALE
#include <rpcsvc/rstat.h>

#define HOST_WIDTH 27

int printtime;			/* print the remote host(s)'s time */

struct host_list {
	struct host_list *next;
	struct in_addr addr;
} *hosts;

void usage(void);
int print_rup_data(char *, statstime *host_stat);

int
search_host(addr)
	struct in_addr addr;
{
	struct host_list *hp;
	
	if (!hosts)
		return(0);

	for (hp = hosts; hp != NULL; hp = hp->next) {
		if (hp->addr.s_addr == addr.s_addr)
			return(1);
	}
	return(0);
}

void
remember_host(addr)
	struct in_addr addr;
{
	struct host_list *hp;

	if (!(hp = (struct host_list *)malloc(sizeof(struct host_list)))) {
		err(1, NULL);
		/* NOTREACHED */
	}
	hp->addr.s_addr = addr.s_addr;
	hp->next = hosts;
	hosts = hp;
}



struct rup_data {
	char *host;
	struct statstime statstime;
};
struct rup_data *rup_data;
int rup_data_idx = 0;
int rup_data_max = 0;

enum sort_type { 
	SORT_NONE,
	SORT_HOST,
	SORT_LDAV,
	SORT_UPTIME
};
enum sort_type sort_type;

int
compare(d1, d2)
	struct rup_data *d1;
	struct rup_data *d2;
{
	switch(sort_type) {
	case SORT_HOST:
		return strcmp(d1->host, d2->host);
	case SORT_LDAV:
		return d1->statstime.avenrun[0]
			- d2->statstime.avenrun[0];
	case SORT_UPTIME:
		return d1->statstime.boottime.tv_sec 
			- d2->statstime.boottime.tv_sec;
	default:
		/* something's really wrong here */
		abort();
	}
}

void
remember_rup_data(host, st)
	char *host;
	struct statstime *st;
{
	if (rup_data_idx >= rup_data_max) {
		rup_data_max += 16;
		rup_data = realloc(rup_data, 
		    rup_data_max * sizeof(struct rup_data));
		if (rup_data == NULL) {
			err(1, NULL);
			/* NOTREACHED */
		}
	}
	
	rup_data[rup_data_idx].host = strdup(host);
	rup_data[rup_data_idx].statstime = *st;
	rup_data_idx++;
}


int
rstat_reply(replyp, raddrp)
	char *replyp;
	struct sockaddr_in *raddrp;
{
	struct hostent *hp;
	char *host;
	statstime *host_stat = (statstime *)replyp;

	if (!search_host(raddrp->sin_addr)) {
		hp = gethostbyaddr((char *)&raddrp->sin_addr.s_addr,
		    sizeof(struct in_addr), AF_INET);
		if (hp)
			host = hp->h_name;
		else
			host = inet_ntoa(raddrp->sin_addr);

		remember_host(raddrp->sin_addr);

		if (sort_type != SORT_NONE)
			remember_rup_data(host, host_stat);
		else
			print_rup_data(host, host_stat);
	}

	return (0);
}


int
print_rup_data(host, host_stat)
	char *host;
	statstime *host_stat;
{
	unsigned int ups = 0, upm = 0, uph = 0, upd = 0;
	struct tm *tmp_time, host_time;
	char days_buf[16], hours_buf[16];

	if (printtime)
		printf("%-*.*s", HOST_WIDTH-8, HOST_WIDTH-8, host);
	else
		printf("%-*.*s", HOST_WIDTH, HOST_WIDTH, host);

	tmp_time = localtime((time_t *)&host_stat->curtime.tv_sec);
	host_time = *tmp_time;

	host_stat->curtime.tv_sec -= host_stat->boottime.tv_sec;

	if (host_stat->curtime.tv_sec > 0)
		ups=host_stat->curtime.tv_sec;
	upd=ups/(3600*24);
	ups-=upd*3600*24;
	uph=ups/3600;
	ups-=uph*3600;
	upm=ups/60;

	if (upd != 0)
		snprintf(days_buf, sizeof days_buf, "%3u day%s, ", upd,
		    (upd > 1) ? "s" : "");
	else
		days_buf[0] = '\0';

	if (uph != 0)
		snprintf(hours_buf, sizeof hours_buf, "%2u:%02u, ",
		    uph, upm);
	else
		if (upm != 0)
			snprintf(hours_buf, sizeof hours_buf, "%2u min%s ",
			    upm, (upm == 1) ? ", " : "s,");
		else
			hours_buf[0] = '\0';

	if (printtime)
		printf(" %2d:%02d%cm",
		    (host_time.tm_hour % 12) ? (host_time.tm_hour % 12) : 12,
		    host_time.tm_min,
		    (host_time.tm_hour >= 12) ? 'p' : 'a');

	printf(" up %9.9s%9.9s load average: %.2f %.2f %.2f\n",
	    days_buf, hours_buf,
	    (double)host_stat->avenrun[0]/FSCALE,
	    (double)host_stat->avenrun[1]/FSCALE,
	    (double)host_stat->avenrun[2]/FSCALE);

	return(0);
}


void
onehost(host)
	char *host;
{
	CLIENT *rstat_clnt;
	statstime host_stat;
	static struct timeval timeout = {25, 0};
	extern char *__progname;
	
	rstat_clnt = clnt_create(host, RSTATPROG, RSTATVERS_TIME, "udp");
	if (rstat_clnt == NULL) {
		fprintf(stderr, "%s: %s", __progname,
		    clnt_spcreateerror(host));
		return;
	}

	bzero((char *)&host_stat, sizeof(host_stat));
	if (clnt_call(rstat_clnt, RSTATPROC_STATS, xdr_void, NULL,
	    xdr_statstime, &host_stat, timeout) != RPC_SUCCESS) {
		fprintf(stderr, "%s: %s", __progname,
		    clnt_sperror(rstat_clnt, host));
		clnt_destroy(rstat_clnt);
		return;
	}

	print_rup_data(host, &host_stat);
	clnt_destroy(rstat_clnt);
}

void
allhosts()
{
	statstime host_stat;
	enum clnt_stat clnt_stat;
	extern char *__progname;
	size_t i;

	if (sort_type != SORT_NONE) {
		printf("collecting responses...");
		fflush(stdout);
	}

	clnt_stat = clnt_broadcast(RSTATPROG, RSTATVERS_TIME, RSTATPROC_STATS,
	    xdr_void, NULL, xdr_statstime, (char *)&host_stat, rstat_reply);
	if (clnt_stat != RPC_SUCCESS && clnt_stat != RPC_TIMEDOUT) {
		fprintf(stderr, "%s: %s\n", __progname, clnt_sperrno(clnt_stat));
		exit(1);
	}

	if (sort_type != SORT_NONE) {
		putchar('\n');
		qsort(rup_data, rup_data_idx, sizeof(struct rup_data),
		    compare);

		for (i = 0; i < rup_data_idx; i++) {
			print_rup_data(rup_data[i].host,
			    &rup_data[i].statstime);
		}
	}
}

int
main(argc, argv)
	int argc;
	char *argv[];
{
	int ch;
	extern int optind;

	sort_type = SORT_NONE;
	while ((ch = getopt(argc, argv, "dhlt")) != -1)
		switch (ch) {
		case 'd':
			printtime = 1;
			break;
		case 'h':
			sort_type = SORT_HOST;
			break;
		case 'l':
			sort_type = SORT_LDAV;
			break;
		case 't':
			sort_type = SORT_UPTIME;
			break;
		default:
			usage();
			/*NOTREACHED*/
		}
	
	setlinebuf(stdout);

	if (argc == optind)
		allhosts();
	else {
		for (; optind < argc; optind++)
			onehost(argv[optind]);
	}

	exit(0);
}


void
usage()
{
	fprintf(stderr, "Usage: rup [-dhlt] [hosts ...]\n");
	exit(1);
}
@


1.1.1.1
log
@Import OpenBSD 3.3 source repository from CTM 3132 the first time
This opens an OpenBSD-mirabile (aka MirBSD) repository.

### MirBSD is:
# Copyright (c) 1982-2003 by Thorsten "mirabile" Glaser <x86@@ePost.de>
# Copyright © 1968-2003  The authors of And contributors to UNIX®, the
#       C Language, BSD/Berkeley Unix; 386BSD, NetBSD 1.1 and OpenBSD.
#
# Anyone who obtained a copy of this work is hereby permitted to freely use,
# distribute, modify, merge, sublicence, give away or sell it as long as the
# authors are given due credit and the following notice is retained:
#
# This work is provided "as is", with no explicit or implicit warranty what-
# soever. Use it only at your own risk. In no event may an author or contri-
# butor be held liable for any damage, directly or indirectly, that origina-
# ted through or is caused by creation or modification of this work.

MirBSD is my private tree. MirBSD does not differ very much from OpenBSD
and intentionally tracks OpenBSD. That's why it _is_ OpenBSD, just not the
official one. It's like with DarrenBSD.

At time of this writing, no advertising for MirBSD must be done,
because the advertising clause has not yet been sorted out.

http://templeofhate.com/tglaser/MirBSD/index.php
@
text
@@


1.1.1.2
log
@sync with OpenBSD, this gives us a fair amount of fixes
@
text
@d1 1
a1 1
/*	$OpenBSD: rup.c,v 1.17 2003/06/10 22:20:50 deraadt Exp $	*/
d37 1
a37 1
static char rcsid[] = "$OpenBSD: rup.c,v 1.17 2003/06/10 22:20:50 deraadt Exp $";
d69 2
a70 1
search_host(struct in_addr addr)
d85 2
a86 1
remember_host(struct in_addr addr)
d100 1
d109 1
a109 1
enum sort_type {
d118 3
a120 1
compare(const void *v1, const void *v2)
a121 3
	const struct rup_data *d1 = v1;
	const struct rup_data *d2 = v2;

d129 1
a129 1
		return d1->statstime.boottime.tv_sec
d138 3
a140 1
remember_rup_data(char *host, struct statstime *st)
d144 1
a144 1
		rup_data = realloc(rup_data,
d159 3
a161 1
rstat_reply(char *replyp, struct sockaddr_in *raddrp)
d188 3
a190 1
print_rup_data(char *host, statstime *host_stat)
d247 2
a248 1
onehost(char *host)
d276 1
a276 1
allhosts(void)
d308 3
a310 1
main(int argc, char *argv[])
d349 1
a349 1
usage(void)
@


1.1.1.3
log
@Import the complete OpenBSD source tree (base system)
as of CTM delta 3496 (roughly 1200 UTC today) into the
vendor branch.
Attention: this is a big update. Don't even try to
build this system, OpenBSD 3.4-beta, yet on your own.
@
text
@d1 1
a1 1
/*	$OpenBSD: rup.c,v 1.18 2003/08/04 17:06:45 deraadt Exp $	*/
d37 1
a37 1
static char rcsid[] = "$OpenBSD: rup.c,v 1.18 2003/08/04 17:06:45 deraadt Exp $";
d68 1
a68 1
static int
d83 1
a83 1
static void
d114 1
a114 1
static int
d135 1
a135 1
static void
d154 1
a154 1
static int
d238 1
a238 1
static void
d266 1
a266 1
static void
@


1.1.1.4
log
@Time to import OpenBSD once again. Expect breakage.
@
text
@d1 1
a1 1
/*	$OpenBSD: rup.c,v 1.20 2003/12/12 05:25:06 deraadt Exp $	*/
d15 7
a21 2
 *  3. The name of the author may not be used to endorse or promote products
 *     derived from this software without specific prior written permission.
d37 1
a37 1
static char rcsid[] = "$OpenBSD: rup.c,v 1.20 2003/12/12 05:25:06 deraadt Exp $";
d139 4
a142 6
		int newsize;
		struct rup_data *newrup;

		newsize = rup_data_max + 16;
		newrup = realloc(rup_data, newsize * sizeof(struct rup_data));
		if (newrup == NULL) {
a145 2
		rup_data = newrup;
		rup_data_max = newsize;
d148 1
a148 2
	if ((rup_data[rup_data_idx].host = strdup(host)) == NULL)
		err(1, NULL);
@


