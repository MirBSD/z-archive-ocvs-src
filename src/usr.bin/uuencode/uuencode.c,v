head	1.2;
access;
symbols
	tg-mergetmp-mirosx-1:1.2
	tg-mergefixes-1-branch:1.2.0.8
	tg-mergefixes-1-base:1.2
	MIROS_X:1.2.0.6
	MIROS_X_BASE:1.2
	tg-mergetmp-3:1.2
	MIRBSD_XP_MIRPPC:1.2.0.4
	MIRBSD_XP_SPARC_BASE:1.2
	MIRBSD_XP_SPARC:1.2.0.2
	MIRBSD_7quater:1.1.1.3
	cvs-200405160640:1.1.1.4
	cvs-200401271800:1.1.1.3
	cvs-200401261630:1.1.1.3
	cvs-200401021645:1.1.1.3
	MIRBSD_7_ALPHA:1.1.1.3.0.6
	MIRBSD_7:1.1.1.3.0.4
	cvs-200312222040:1.1.1.3
	MIRBSD_7ter:1.1.1.3
	MIRBSD_7_DEV:1.1.1.3.0.2
	cvs-200310020700:1.1.1.3
	cvs-200309271030:1.1.1.3
	cvs-200309251530:1.1.1.3
	cvs-200308302005:1.1.1.3
	cvs-200308171200:1.1.1.3
	ctm-3496:1.1.1.3
	ctm-3449:1.1.1.3
	ctm-3437:1.1.1.3
	cvs-200307191805:1.1.1.3
	ctm-3425:1.1.1.3
	cvs-200307091500:1.1.1.3
	ctm-3389:1.1.1.3
	cvs-200306291430:1.1.1.3
	ctm-3341:1.1.1.3
	MIRBSD_5:1.1.1.2
	cvs-200306082100:1.1.1.2
	ctm-3316:1.1.1.2
	ctm-3272:1.1.1.1
	ctm-3264:1.1.1.1
	cvs-200305071630:1.1.1.1
	MIRBSD_4:1.1.1.1
	ctm-3203:1.1.1.1
	cvs-20030410-1130:1.1.1.1
	ctm-3155:1.1.1.1
	ctm-3132:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.2
date	2004.09.18.12.23.19;	author tg;	state Exp;
branches;
next	1.1;

1.1
date	2003.03.22.17.53.39;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.03.22.17.53.39;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2003.06.05.17.45.05;	author tg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2003.06.19.12.54.22;	author tg;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2004.05.16.08.13.47;	author tg;	state Stab;
branches;
next	;


desc
@@


1.2
log
@* sync after make b-r (full)
* fix the permissions (root:wheel, not root:bin) for X11R6
* clean up while there
* allow uuencode to have -r and uudecode -r to function correctly
@
text
@/**	$MirBSD$ */
/*	$OpenBSD: uuencode.c,v 1.7 2004/04/09 22:54:02 millert Exp $	*/
/*	$FreeBSD: uuencode.c,v 1.18 2004/01/22 07:23:35 grehan Exp $	*/

/*-
 * Copyright (c) 1983, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#ifndef lint
static const char copyright[] =
"@@(#) Copyright (c) 1983, 1993\n\
	The Regents of the University of California.  All rights reserved.\n";
#endif /* not lint */

/*
 * Encode a file so it can be mailed to a remote system.
 */

#include <sys/param.h>
#include <sys/socket.h>
#include <sys/stat.h>

#include <netinet/in.h>

#include <err.h>
#include <locale.h>
#include <resolv.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>

__SCCSID("@@(#)uuencode.c	8.2 (Berkeley) 4/2/94");
__RCSID("$MirBSD$");

void encode(void);
void base64_encode(void);
static void usage(void);

FILE *output;
int mode, rflag = 0;
char **av;

int
main(int argc, char *argv[])
{
	struct stat sb;
	int base64;
	int ch;
	char *outfile;
	extern char *__progname;

	base64 = 0;
	outfile = NULL;

	if (strcmp(__progname, "b64encode") == 0)
		base64 = 1;

	setlocale(LC_ALL, "");
	while ((ch = getopt(argc, argv, "mro:")) != -1) {
		switch (ch) {
		case 'm':
			base64 = 1;
			break;
		case 'r':
			rflag = 1;
			break;
		case 'o':
			outfile = optarg;
			break;
		case '?':
		default:
			usage();
		}
	}
	argv += optind;
	argc -= optind;

	switch(argc) {
	case 2:			/* optional first argument is input file */
		if (!freopen(*argv, "r", stdin) || fstat(fileno(stdin), &sb))
			err(1, "%s", *argv);
#define	RWX	(S_IRWXU|S_IRWXG|S_IRWXO)
		mode = sb.st_mode & RWX;
		++argv;
		break;
	case 1:
#define	RW	(S_IRUSR|S_IWUSR|S_IRGRP|S_IWGRP|S_IROTH|S_IWOTH)
		mode = RW & ~umask(RW);
		break;
	case 0:
		if (rflag)
			break;
		/* FALLTHROUGH */
	default:
		usage();
	}

	av = argv;

	if (outfile != NULL) {
		output = fopen(outfile, "w+");
		if (output == NULL)
			err(1, "unable to open %s for output", outfile);
	} else
		output = stdout;
	if (base64)
		base64_encode();
	else
		encode();
	if (ferror(output))
		errx(1, "write error");
	exit(0);
}

/* ENC is the basic 1 character encoding function to make a char printing */
#define	ENC(c) ((c) ? ((c) & 077) + ' ': '`')

/*
 * Copy from in to out, encoding in base64 as you go along.
 */
void
base64_encode(void)
{
	/*
	 * Output must fit into 80 columns, chunks come in 4, leave 1.
	 */
#define	GROUPS	((80 / 4) - 1)
	unsigned char buf[3];
	char buf2[sizeof(buf) * 2 + 1];
	size_t n;
	int rv, sequence;

	sequence = 0;

	if (!rflag)
		fprintf(output, "begin-base64 %o %s\n", mode, *av);
	while ((n = fread(buf, 1, sizeof(buf), stdin))) {
		++sequence;
		rv = b64_ntop(buf, n, buf2, (sizeof(buf2) / sizeof(buf2[0])));
		if (rv == -1)
			errx(1, "b64_ntop: error encoding base64");
		fprintf(output, "%s%s", buf2, (sequence % GROUPS) ? "" : "\n");
	}
	if (sequence % GROUPS)
		fprintf(output, "\n");
	if (!rflag)
		fprintf(output, "====\n");
}

/*
 * Copy from in to out, encoding as you go along.
 */
void
encode(void)
{
	int ch, n;
	char *p;
	char buf[80];

	if (!rflag)
		(void)fprintf(output, "begin %o %s\n", mode, *av);
	while ((n = fread(buf, 1, 45, stdin))) {
		ch = ENC(n);
		if (fputc(ch, output) == EOF)
			break;
		for (p = buf; n > 0; n -= 3, p += 3) {
			/* Pad with nulls if not a multiple of 3. */
			if (n < 3) {
				p[2] = '\0';
				if (n < 2)
					p[1] = '\0';
			}
			ch = *p >> 2;
			ch = ENC(ch);
			if (fputc(ch, output) == EOF)
				break;
			ch = ((*p << 4) & 060) | ((p[1] >> 4) & 017);
			ch = ENC(ch);
			if (fputc(ch, output) == EOF)
				break;
			ch = ((p[1] << 2) & 074) | ((p[2] >> 6) & 03);
			ch = ENC(ch);
			if (fputc(ch, output) == EOF)
				break;
			ch = p[2] & 077;
			ch = ENC(ch);
			if (fputc(ch, output) == EOF)
				break;
		}
		if (fputc('\n', output) == EOF)
			break;
	}
	if (ferror(stdin))
		errx(1, "read error");
	if (!rflag)
		(void)fprintf(output, "%c\nend\n", ENC('\0'));
}

static void
usage(void)
{
	(void)fprintf(stderr,
	    "usage: uuencode [-mr] [-o outfile] [infile] remotefile\n"
	    "       b64encode [-r] [-o outfile] [infile] remotefile\n");
	exit(1);
}
@


1.1
log
@Initial revision
@
text
@d1 3
a3 2
/*	$OpenBSD: uuencode.c,v 1.4 2001/11/19 19:02:17 mpech Exp $	*/
/*	$NetBSD: uuencode.c,v 1.7 1994/11/17 07:41:15 jtc Exp $	*/
d17 1
a17 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
d34 2
a35 1
char copyright[] =
a37 6

#ifndef lint
#if 0
static char sccsid[] = "@@(#)uuencode.c	8.2 (Berkeley) 4/2/94";
#endif
static char rcsid[] = "$OpenBSD: uuencode.c,v 1.4 2001/11/19 19:02:17 mpech Exp $";
a40 2
 * uuencode [input] output
 *
d43 10
a55 4
#include <locale.h>
#include <errno.h>
#include <sys/types.h>
#include <sys/stat.h>
d58 10
a67 2
static void encode();
static __dead void usage();
d70 1
a70 3
main(argc, argv)
	int argc;
	char *argv[];
d73 10
a82 1
	int mode;
d85 16
a100 3

	while (getopt(argc, argv, "") != -1)
		usage();
d106 2
a107 5
		if (!freopen(*argv, "r", stdin) || fstat(fileno(stdin), &sb)) {
			(void)fprintf(stderr, "uuencode: %s: %s.\n",
			    *argv, strerror(errno));
			exit(1);
		}
d117 3
d124 14
a137 7
	(void)printf("begin %o %s\n", mode, *argv);
	encode();
	(void)printf("end\n");
	if (ferror(stdout)) {
		(void)fprintf(stderr, "uuencode: write error.\n");
		exit(1);
	}
d145 1
a145 1
 * copy from in to out, encoding as you go along.
d147 34
a180 2
static void
encode()
d186 2
d190 1
a190 1
		if (putchar(ch) == EOF)
d193 6
d201 1
a201 1
			if (putchar(ch) == EOF)
d203 1
a203 1
			ch = (*p << 4) & 060 | (p[1] >> 4) & 017;
d205 1
a205 1
			if (putchar(ch) == EOF)
d207 1
a207 1
			ch = (p[1] << 2) & 074 | (p[2] >> 6) & 03;
d209 1
a209 1
			if (putchar(ch) == EOF)
d213 1
a213 1
			if (putchar(ch) == EOF)
d216 1
a216 1
		if (putchar('\n') == EOF)
d219 4
a222 7
	if (ferror(stdin)) {
		(void)fprintf(stderr, "uuencode: read error.\n");
		exit(1);
	}
	ch = ENC('\0');
	(void)putchar(ch);
	(void)putchar('\n');
d226 1
a226 1
usage()
d228 3
a230 1
	(void)fprintf(stderr,"usage: uuencode [infile] remotefile\n");
@


1.1.1.1
log
@Import OpenBSD 3.3 source repository from CTM 3132 the first time
This opens an OpenBSD-mirabile (aka MirBSD) repository.

### MirBSD is:
# Copyright (c) 1982-2003 by Thorsten "mirabile" Glaser <x86@@ePost.de>
# Copyright © 1968-2003  The authors of And contributors to UNIX®, the
#       C Language, BSD/Berkeley Unix; 386BSD, NetBSD 1.1 and OpenBSD.
#
# Anyone who obtained a copy of this work is hereby permitted to freely use,
# distribute, modify, merge, sublicence, give away or sell it as long as the
# authors are given due credit and the following notice is retained:
#
# This work is provided "as is", with no explicit or implicit warranty what-
# soever. Use it only at your own risk. In no event may an author or contri-
# butor be held liable for any damage, directly or indirectly, that origina-
# ted through or is caused by creation or modification of this work.

MirBSD is my private tree. MirBSD does not differ very much from OpenBSD
and intentionally tracks OpenBSD. That's why it _is_ OpenBSD, just not the
official one. It's like with DarrenBSD.

At time of this writing, no advertising for MirBSD must be done,
because the advertising clause has not yet been sorted out.

http://templeofhate.com/tglaser/MirBSD/index.php
@
text
@@


1.1.1.2
log
@Import latest OpenBSD CVS tree by CTM in order
to sync the base system and ports tree with Them.

This includes the recent licence changes as well - by
importing the changed base and re-applying the diffs
(with cvs up -j -j) they are inherited, and we're not
bound to the removed clauses any longer.
@
text
@d1 1
a1 1
/*	$OpenBSD: uuencode.c,v 1.5 2003/06/03 02:56:21 millert Exp $	*/
d16 5
a20 1
 * 3. Neither the name of the University nor the names of its contributors
d45 1
a45 1
static char rcsid[] = "$OpenBSD: uuencode.c,v 1.5 2003/06/03 02:56:21 millert Exp $";
@


1.1.1.3
log
@sync with OpenBSD, this gives us a fair amount of fixes
@
text
@d1 1
a1 1
/*	$OpenBSD: uuencode.c,v 1.6 2003/06/10 22:20:53 deraadt Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: uuencode.c,v 1.6 2003/06/10 22:20:53 deraadt Exp $";
d58 2
a59 2
static void encode(void);
static __dead void usage(void);
d62 3
a64 1
main(int argc, char *argv[])
d113 1
a113 1
encode(void)
d154 1
a154 1
usage(void)
@


1.1.1.4
log
@large-scale import of OpenBSD 3.5-current source base including many fixes
note: from now, we will not be binary compatible with OpenBSD apps any
longer (due to syscall numbering differences); both an OpenBSD compat and
a conversion tool for old MirOS #7 apps will be delivered later.

The src/ tree is locked from now.
@
text
@d1 2
a2 2
/*	$OpenBSD: uuencode.c,v 1.7 2004/04/09 22:54:02 millert Exp $	*/
/*	$FreeBSD: uuencode.c,v 1.18 2004/01/22 07:23:35 grehan Exp $	*/
d33 1
a33 2
#ifndef lint
static const char copyright[] =
a35 1
#endif /* not lint */
d39 1
a39 1
static const char sccsid[] = "@@(#)uuencode.c	8.2 (Berkeley) 4/2/94";
d41 1
a41 1
static const char rcsid[] = "$OpenBSD: uuencode.c,v 1.7 2004/04/09 22:54:02 millert Exp $";
d45 2
a48 10

#include <sys/param.h>
#include <sys/socket.h>
#include <sys/stat.h>

#include <netinet/in.h>

#include <err.h>
#include <locale.h>
#include <resolv.h>
d52 4
d58 2
a59 7
void encode(void);
void base64_encode(void);
static void usage(void);

FILE *output;
int mode;
char **av;
d65 1
a65 4
	int base64;
	int ch;
	char *outfile;
	extern char *__progname;
d67 1
a67 2
	base64 = 0;
	outfile = NULL;
d69 2
a70 17
	if (strcmp(__progname, "b64encode") == 0)
		base64 = 1;

	setlocale(LC_ALL, "");
	while ((ch = getopt(argc, argv, "mo:")) != -1) {
		switch (ch) {
		case 'm':
			base64 = 1;
			break;
		case 'o':
			outfile = optarg;
			break;
		case '?':
		default:
			usage();
		}
	}
d76 5
a80 2
		if (!freopen(*argv, "r", stdin) || fstat(fileno(stdin), &sb))
			err(1, "%s", *argv);
d94 7
a100 14
	av = argv;

	if (outfile != NULL) {
		output = fopen(outfile, "w+");
		if (output == NULL)
			err(1, "unable to open %s for output", outfile);
	} else
		output = stdout;
	if (base64)
		base64_encode();
	else
		encode();
	if (ferror(output))
		errx(1, "write error");
d108 1
a108 1
 * Copy from in to out, encoding in base64 as you go along.
d110 1
a110 31
void
base64_encode(void)
{
	/*
	 * Output must fit into 80 columns, chunks come in 4, leave 1.
	 */
#define	GROUPS	((80 / 4) - 1)
	unsigned char buf[3];
	char buf2[sizeof(buf) * 2 + 1];
	size_t n;
	int rv, sequence;

	sequence = 0;

	fprintf(output, "begin-base64 %o %s\n", mode, *av);
	while ((n = fread(buf, 1, sizeof(buf), stdin))) {
		++sequence;
		rv = b64_ntop(buf, n, buf2, (sizeof(buf2) / sizeof(buf2[0])));
		if (rv == -1)
			errx(1, "b64_ntop: error encoding base64");
		fprintf(output, "%s%s", buf2, (sequence % GROUPS) ? "" : "\n");
	}
	if (sequence % GROUPS)
		fprintf(output, "\n");
	fprintf(output, "====\n");
}

/*
 * Copy from in to out, encoding as you go along.
 */
void
a116 1
	(void)fprintf(output, "begin %o %s\n", mode, *av);
d119 1
a119 1
		if (fputc(ch, output) == EOF)
a121 6
			/* Pad with nulls if not a multiple of 3. */
			if (n < 3) {
				p[2] = '\0';
				if (n < 2)
					p[1] = '\0';
			}
d124 1
a124 1
			if (fputc(ch, output) == EOF)
d126 1
a126 1
			ch = ((*p << 4) & 060) | ((p[1] >> 4) & 017);
d128 1
a128 1
			if (fputc(ch, output) == EOF)
d130 1
a130 1
			ch = ((p[1] << 2) & 074) | ((p[2] >> 6) & 03);
d132 1
a132 1
			if (fputc(ch, output) == EOF)
d136 1
a136 1
			if (fputc(ch, output) == EOF)
d139 1
a139 1
		if (fputc('\n', output) == EOF)
d142 7
a148 3
	if (ferror(stdin))
		errx(1, "read error");
	(void)fprintf(output, "%c\nend\n", ENC('\0'));
d154 1
a154 3
	(void)fprintf(stderr,
	    "usage: uuencode [-m] [-o outfile] [infile] remotefile\n"
	    "       b64encode [-o outfile] [infile] remotefile\n");
@


