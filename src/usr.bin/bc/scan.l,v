head	1.1;
branch	1.1.1;
access;
symbols
	tg-mergetmp-mirosx-1:1.1.1.8
	tg-mergefixes-1-branch:1.1.1.8.0.4
	tg-mergefixes-1-base:1.1.1.8
	MIROS_X:1.1.1.8.0.2
	MIROS_X_BASE:1.1.1.8
	tg-mergetmp-3:1.1.1.8
	cvs-200412031430:1.1.1.8
	MIRBSD_XP_MIRPPC:1.1.1.6.0.4
	cvs-200410222040:1.1.1.7
	tg-mergetmp-1:1.1.1.6
	MIRBSD_XP_SPARC_BASE:1.1.1.6
	MIRBSD_XP_SPARC:1.1.1.6.0.2
	MIRBSD_7quater:1.1.1.4.2.1
	cvs-200405160640:1.1.1.6
	cvs-200401271800:1.1.1.6
	cvs-200401261630:1.1.1.6
	cvs-200401021645:1.1.1.6
	MIRBSD_7_ALPHA:1.1.1.4.2.1.0.4
	MIRBSD_7:1.1.1.4.2.1.0.2
	cvs-200312222040:1.1.1.6
	cvs-200312031730:1.1.1.6
	MIRBSD_7ter:1.1.1.4.2.1
	cvs-200310232020:1.1.1.5
	MIRBSD_7_DEV:1.1.1.4.0.2
	cvs-200310081755:1.1.1.4
	cvs-200310020700:1.1.1.4
	cvs-200309281115:1.1.1.3
	cvs-200309271030:1.1.1.2
	cvs-200309261610:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.1
date	2003.09.26.16.12.42;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.09.26.16.12.42;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2003.09.27.11.19.03;	author tg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2003.09.28.11.21.10;	author tg;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2003.10.02.07.49.29;	author tg;	state Exp;
branches
	1.1.1.4.2.1;
next	1.1.1.5;

1.1.1.5
date	2003.10.23.20.23.37;	author tg;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2003.12.03.17.46.01;	author tg;	state Stab;
branches;
next	1.1.1.7;

1.1.1.7
date	2004.10.22.20.49.18;	author tg;	state Exp;
branches;
next	1.1.1.8;

1.1.1.8
date	2004.12.03.14.35.05;	author tg;	state Exp;
branches;
next	;

1.1.1.4.2.1
date	2003.10.23.20.49.09;	author tg;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@%{
/*      $OpenBSD: scan.l,v 1.3 2003/09/26 07:04:25 deraadt Exp $	*/

/*
 * Copyright (c) 2003, Otto Moerbeek <otto@@drijf.net>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#ifndef lint
static const char rcsid[] = "$OpenBSD: scan.l,v 1.3 2003/09/26 07:04:25 deraadt Exp $";
#endif /* not lint */

#include <err.h>
#include <stdbool.h>
#include <string.h>

#include "extern.h"
#include "y.tab.h"

int		lineno;

static char	*strbuf = NULL;
static size_t	strbuf_sz = 1;
static bool	dot_seen;

static void	init_strbuf(void);
static void	add_str(const char *);

%}

DIGIT		[0-9A-F]
%x		comment string number

%%

"/*"		BEGIN(comment);
<comment>{
	"*/"	BEGIN(INITIAL);
	\n	lineno++;
	\*	;
	[^*\n]+	;
}

\"		BEGIN(string); init_strbuf();
<string>{
	[^"\n]+	add_str(yytext);
	\n	add_str("\n"); lineno++;
	\"	BEGIN(INITIAL); yylval.str = strbuf; return STRING;
}

{DIGIT}+	{
			BEGIN(number);
			dot_seen = false;
			init_strbuf();
			add_str(yytext);
		}
\.		{
			BEGIN(number);
			dot_seen = true;
			init_strbuf();
			add_str(".");
		}
<number>{
	{DIGIT}+	add_str(yytext);
	\.	{
			if (dot_seen) {
				BEGIN(INITIAL);
				yylval.str = strbuf;
				unput('.');
				return NUMBER;
			} else {
				dot_seen = true;
				add_str(".");
			}
		}
	\\\n[ \t]*	lineno++;
	[^0-9A-F\.]	{
			if (strcmp(strbuf, ".") == 0) {
				warnx("unexpected ascii char 0x%x at line %d",
				    yytext[0], lineno);
				BEGIN(INITIAL);
				REJECT;
			}
			else {
				BEGIN(INITIAL);
				yylval.str = strbuf;
				unput(yytext[0]);
				return NUMBER;
			}
		}
}

"auto"		return AUTO;
"break"		return BREAK;
"define"	return DEFINE;
"ibase"		return IBASE;
"if"		return IF;
"for"		return FOR;
"length"	return LENGTH;
"obase"		return OBASE;
"quit"		return QUIT;
"return"	return RETURN;
"scale"		return SCALE;
"sqrt"		return SQRT;
"while"		return WHILE;

"^"		return EXPONENT;
"*"		return MULTIPLY;
"/"		return DIVIDE;
"%"		return REMAINDER;

"+"		return PLUS;
"-"		return MINUS;

"++"		return INCR;
"--"		return DECR;

"="		yylval.str = "";  return ASSIGN_OP;
"+="		yylval.str = "+"; return ASSIGN_OP;
"-="		yylval.str = "-"; return ASSIGN_OP;
"*="		yylval.str = "*"; return ASSIGN_OP;
"/="		yylval.str = "/"; return ASSIGN_OP;
"%="		yylval.str = "%"; return ASSIGN_OP;
"^="		yylval.str = "^"; return ASSIGN_OP;

"=="		return EQUALS;
"<="		return LESS_EQ;
">="		return GREATER_EQ;
"!="		return UNEQUALS;
"<"		return LESS;
">"		return GREATER;

","		return COMMA;
";"		return SEMICOLON;

"("		return LPAR;
")"		return RPAR;

"["		return LBRACKET;
"]"		return RBRACKET;

"{"		return LBRACE;
"}"		return RBRACE;

[a-z]		yylval.str = yytext; return LETTER;

\\\n		lineno++;
\n		lineno++; return NEWLINE;

[ \t]		;
.		warnx("unexpected character %c at line %d", yytext[0], lineno);

%%

static void
init_strbuf(void)
{
	if (strbuf == NULL) {
		strbuf = malloc(strbuf_sz);
		if (strbuf == NULL)
			err(1, "cannot allocate string buffer");
	}
	strbuf[0] = '\0';
}

static void
add_str(const char *str)
{
	size_t arglen;

	arglen = strlen(str);

	if (strlen(strbuf) + arglen + 1> strbuf_sz) {
		size_t newsize;
		char *p;

		newsize = strbuf_sz + arglen + 1;
		p = realloc(strbuf, newsize);
		if (p == NULL) {
			free(strbuf);
			err(1, "cannot realloc string buffer");
		}
		strbuf_sz = newsize;
		strbuf = p;
	}
	strlcat(strbuf, str, strbuf_sz);
}

void
abort_line(int sig)
{
	if (isatty(fileno(yyin))) {
		YY_FLUSH_BUFFER;
		printf("[\n]P\n");
	}
}
@


1.1.1.1
log
@Import Unix bc and dc from OpenBSD-current sources
@
text
@@


1.1.1.2
log
@cvs is playing games with me.

@@@@@@ CONSIDER THE TREE LOCKED NOW @@@@@@
@
text
@d2 1
a2 1
/*      $OpenBSD: scan.l,v 1.4 2003/09/26 19:00:38 deraadt Exp $	*/
d21 1
a21 1
static const char rcsid[] = "$OpenBSD: scan.l,v 1.4 2003/09/26 19:00:38 deraadt Exp $";
d129 1
a129 1
"="		yylval.str = ""; return ASSIGN_OP;
@


1.1.1.3
log
@Bug fixes from OpenBSD
@
text
@d2 1
a2 1
/*      $OpenBSD: scan.l,v 1.5 2003/09/28 07:57:57 otto Exp $	*/
d21 1
a21 1
static const char rcsid[] = "$OpenBSD: scan.l,v 1.5 2003/09/28 07:57:57 otto Exp $";
a52 1
	<<EOF>>	fatal("end of file in comment");
a59 1
	<<EOF>>	fatal("end of file in string");
d90 2
a91 1
				yyerror("syntax error");
d162 1
a162 1
.		yyerror("illegal character");
@


1.1.1.4
log
@Import OpenBSD source tree again, with critical bug fixes
(OpenSSL, bc, dc, sensorsd, pf, ...)
@
text
@d2 1
a2 1
/*      $OpenBSD: scan.l,v 1.7 2003/09/30 18:46:11 otto Exp $	*/
d21 1
a21 1
static const char rcsid[] = "$OpenBSD: scan.l,v 1.7 2003/09/30 18:46:11 otto Exp $";
d58 1
a58 4
	[^"\n\\\[\]]+	add_str(yytext);
	\[	add_str("\\[");
	\]	add_str("\\]");
	\\	add_str("\\\\");
d91 5
a95 4
			BEGIN(INITIAL);
			unput(yytext[0]);
			if (strcmp(strbuf, ".") == 0)
				return DOT;
d97 1
d99 1
@


1.1.1.4.2.1
log
@that bc/dc fix sync with OpenBSD (must-have fix :)
@
text
@d2 1
a2 1
/*      $OpenBSD: scan.l,v 1.9 2003/10/18 20:35:36 otto Exp $	*/
d21 1
a21 1
static const char rcsid[] = "$OpenBSD: scan.l,v 1.9 2003/10/18 20:35:36 otto Exp $";
a106 1
"continue"	return CONTINUE;
a107 1
"else"		return ELSE;
d173 1
a173 1
			err(1, NULL);
d193 1
a193 1
			err(1, NULL);
@


1.1.1.5
log
@Import fixed bc and dc from OpenBSD-current (a must-have :)
@
text
@d2 1
a2 1
/*      $OpenBSD: scan.l,v 1.9 2003/10/18 20:35:36 otto Exp $	*/
d21 1
a21 1
static const char rcsid[] = "$OpenBSD: scan.l,v 1.9 2003/10/18 20:35:36 otto Exp $";
a106 1
"continue"	return CONTINUE;
a107 1
"else"		return ELSE;
d173 1
a173 1
			err(1, NULL);
d193 1
a193 1
			err(1, NULL);
@


1.1.1.6
log
@Import selected parts of the OpenBSD base system:
 * vnd change - you'll have to re-run MAKEDEV after booting a new kernel
 * misc. changes in /etc, mostly user related
 * Perl 5.8.2 (diff to MirPorts will be committed RSN)
 * some changes to binutils
 * Updates in bc and dc
@
text
@d2 1
a2 1
/*      $OpenBSD: scan.l,v 1.14 2003/12/02 09:00:07 otto Exp $	*/
d21 1
a21 1
static const char rcsid[] = "$OpenBSD: scan.l,v 1.14 2003/12/02 09:00:07 otto Exp $";
a42 3
ALPHA		[a-z_]
ALPHANUM	[a-z_0-9]

a111 1
"last"		return DOT;
a114 1
"print"		return PRINT;
a125 4
"!"		return BOOL_NOT;
"&&"		return BOOL_AND;
"||"		return BOOL_OR;

d159 1
a159 9
{ALPHA}{ALPHANUM}* {
			/* alloc an extra byte for the type marker */
			char *p = malloc(yyleng + 2);
			if (p == NULL)
				err(1, NULL);
			strlcpy(p, yytext, yyleng + 1);
			yylval.astr = p;
			return LETTER;
		}
a163 1
#[^\n]*		;
a164 1
<<EOF>>		return QUIT;
d187 1
a187 1
	if (strlen(strbuf) + arglen + 1 > strbuf_sz) {
@


1.1.1.7
log
@import some updates/fixes from openbsd
@
text
@d2 1
a2 1
/*      $OpenBSD: scan.l,v 1.15 2004/10/19 07:36:51 otto Exp $	*/
d21 1
a21 1
static const char rcsid[] = "$OpenBSD: scan.l,v 1.15 2004/10/19 07:36:51 otto Exp $";
a28 1
#include "pathnames.h"
a229 43

int
yywrap(void)
{
	static int state;
	static YY_BUFFER_STATE buf;

	if (fileindex == 0 && sargc > 0 && strcmp(sargv[0], _PATH_LIBB) == 0) {
		filename = sargv[fileindex++];
		yyin = fopen(filename, "r");
		lineno = 1;
		if (yyin == NULL)
			err(1, "cannot open %s", filename);
		return (0);
	}
	if (state == 0 && cmdexpr[0] != '\0') {
		buf = yy_scan_string(cmdexpr);
		state++;
		lineno = 1;
		filename = "command line";
		return (0);
	} else if (state == 1) {
		yy_delete_buffer(buf);
		free(cmdexpr);
		state++;
	}
	if (fileindex < sargc) {
		filename = sargv[fileindex++];
		yyin = fopen(filename, "r");
		lineno = 1;
		if (yyin == NULL)
			err(1, "cannot open %s", filename);
		return (0);
	} else if (fileindex == sargc) {
		fileindex++;
		yyin = stdin;
		lineno = 1;
		filename = "stdin";
		return (0);
	}
	return (1);
}

@


1.1.1.8
log
@your daily dose of bugfixes and security updates from obsd
@
text
@d2 1
a2 1
/*      $OpenBSD: scan.l,v 1.16 2004/12/02 19:30:05 otto Exp $	*/
d21 1
a21 1
static const char rcsid[] = "$OpenBSD: scan.l,v 1.16 2004/12/02 19:30:05 otto Exp $";
a24 1
#include <signal.h>
a36 1
static volatile sig_atomic_t	interactive = 0;
d226 1
a226 5
	const char str[] = "[\n]P\n";
	int save_errno;

	if (interactive) {
		save_errno = errno;
d228 1
a228 2
		write(STDOUT_FILENO, str, sizeof(str) - 1);
		errno = save_errno;
a266 1
		interactive = isatty(fileno(yyin));
@


