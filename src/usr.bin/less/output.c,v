head	1.1;
branch	1.1.1;
access;
symbols
	tg-mergetmp-mirosx-1:1.1.1.2
	tg-mergefixes-1-branch:1.1.1.2.0.14
	tg-mergefixes-1-base:1.1.1.2
	MIROS_X:1.1.1.2.0.12
	MIROS_X_BASE:1.1.1.2
	tg-mergetmp-3:1.1.1.2
	MIRBSD_XP_MIRPPC:1.1.1.2.0.10
	MIRBSD_XP_SPARC_BASE:1.1.1.2
	MIRBSD_XP_SPARC:1.1.1.2.0.8
	MIRBSD_7quater:1.1.1.2
	cvs-200405160640:1.1.1.2
	cvs-200401271800:1.1.1.2
	cvs-200401261630:1.1.1.2
	cvs-200401021645:1.1.1.2
	MIRBSD_7_ALPHA:1.1.1.2.0.6
	MIRBSD_7:1.1.1.2.0.4
	cvs-200312222040:1.1.1.2
	MIRBSD_7ter:1.1.1.2
	MIRBSD_7_DEV:1.1.1.2.0.2
	cvs-200310020700:1.1.1.2
	cvs-200309271030:1.1.1.2
	cvs-200309261655:1.1.1.2
	cvs-200309251530:1.1.1.2
	cvs-200308302005:1.1.1.2
	cvs-200308171200:1.1.1.2
	ctm-3496:1.1.1.2
	ctm-3449:1.1.1.2
	ctm-3437:1.1.1.2
	cvs-200307191805:1.1.1.2
	ctm-3425:1.1.1.2
	cvs-200307091500:1.1.1.2
	ctm-3389:1.1.1.2
	cvs-200306291430:1.1.1.2
	ctm-3341:1.1.1.2
	MIRBSD_5:1.1.1.2
	cvs-200306082100:1.1.1.2
	ctm-3316:1.1.1.2
	ctm-3272:1.1.1.2
	ctm-3264:1.1.1.2
	cvs-200305071630:1.1.1.2
	MIRBSD_4:1.1.1.2
	ctm-3203:1.1.1.2
	cvs-20030410-1130:1.1.1.1
	ctm-3155:1.1.1.1
	ctm-3132:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.1
date	2003.03.22.17.52.57;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.03.22.17.52.57;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2003.04.15.17.47.05;	author tg;	state Stab;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@/*	$OpenBSD: output.c,v 1.4 2001/11/19 19:02:14 mpech Exp $	*/

/*
 * Copyright (c) 1984,1985,1989,1994,1995  Mark Nudelman
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice in the documentation and/or other materials provided with 
 *    the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR 
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT 
 * OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR 
 * BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE 
 * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN 
 * IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */


/*
 * High level routines dealing with the output to the screen.
 */

#include "less.h"

public int errmsgs;	/* Count of messages displayed by error() */
public int need_clr;

extern int sigs;
extern int sc_width;
extern int so_s_width, so_e_width;
extern int screen_trashed;
extern int any_display;

/*
 * Display the line which is in the line buffer.
 */
	public void
put_line()
{
	int c;
	int i;
	int a;
	int curr_attr;

	if (ABORT_SIGS())
	{
		/*
		 * Don't output if a signal is pending.
		 */
		screen_trashed = 1;
		return;
	}

	curr_attr = AT_NORMAL;

	for (i = 0;  (c = gline(i, &a)) != '\0';  i++)
	{
		if (a != curr_attr)
		{
			/*
			 * Changing attributes.
			 * Display the exit sequence for the old attribute
			 * and the enter sequence for the new one.
			 */
			switch (curr_attr)
			{
			case AT_UNDERLINE:	ul_exit();	break;
			case AT_BOLD:		bo_exit();	break;
			case AT_BLINK:		bl_exit();	break;
			case AT_STANDOUT:	so_exit();	break;
			}
			switch (a)
			{
			case AT_UNDERLINE:	ul_enter();	break;
			case AT_BOLD:		bo_enter();	break;
			case AT_BLINK:		bl_enter();	break;
			case AT_STANDOUT:	so_enter();	break;
			}
			curr_attr = a;
		}
		if (curr_attr == AT_INVIS)
			continue;
		if (c == '\b')
			putbs();
		else
			putchr(c);
	}

	switch (curr_attr)
	{
	case AT_UNDERLINE:	ul_exit();	break;
	case AT_BOLD:		bo_exit();	break;
	case AT_BLINK:		bl_exit();	break;
	case AT_STANDOUT:	so_exit();	break;
	}
}

static char obuf[1024];
static char *ob = obuf;

/*
 * Flush buffered output.
 *
 * If we haven't displayed any file data yet,
 * output messages on error output (file descriptor 2),
 * otherwise output on standard output (file descriptor 1).
 *
 * This has the desirable effect of producing all
 * error messages on error output if standard output
 * is directed to a file.  It also does the same if
 * we never produce any real output; for example, if
 * the input file(s) cannot be opened.  If we do
 * eventually produce output, code in edit() makes
 * sure these messages can be seen before they are
 * overwritten or scrolled away.
 */
	public void
flush()
{
	int n;
	int fd;

#if MSOFTC
	*ob = '\0';
	_outtext(obuf);
	ob = obuf;
#else
	n = ob - obuf;
	if (n == 0)
		return;
	fd = (any_display) ? 1 : 2;
	if (write(fd, obuf, n) != n)
		screen_trashed = 1;
	ob = obuf;
#endif
}

/*
 * Output a character.
 */
	public int
putchr(c)
	int c;
{
	if (ob >= &obuf[sizeof(obuf)])
		flush();
	if (need_clr)
	{
		need_clr = 0;
		clear_bot();
	}
#if MSOFTC
	if (c == '\n')
		putchr('\r');
#endif
	*ob++ = c;
	return (c);
}

/*
 * Output a string.
 */
	public void
putstr(s)
	char *s;
{
	while (*s != '\0')
		putchr(*s++);
}


/*
 * Output an integer in a given radix.
 */
	static int
iprintnum(num, radix)
	int num;
	int radix;
{
	char *s;
	int r;
	int neg;
	char buf[10];

	if (neg = (num < 0))
		num = -num;

	s = buf;
	do
	{
		*s++ = (num % radix) + '0';
	} while ((num /= radix) != 0);

	if (neg)
		*s++ = '-';
	r = s - buf;

	while (s > buf)
		putchr(*--s);
	return (r);
}

/*
 * This function implements printf-like functionality
 * using a more portable argument list mechanism than printf's.
 */
	static int
iprintf(fmt, parg)
	char *fmt;
	PARG *parg;
{
	char *s;
	int n;
	int col;

	col = 0;
	while (*fmt != '\0')
	{
		if (*fmt != '%')
		{
			putchr(*fmt++);
			col++;
		} else
		{
			++fmt;
			switch (*fmt++) {
			case 's':
				s = parg->p_string;
				parg++;
				while (*s != '\0')
				{
					putchr(*s++);
					col++;
				}
				break;
			case 'd':
				n = parg->p_int;
				parg++;
				col += iprintnum(n, 10);
				break;
			}
		}
	}
	return (col);
}

/*
 * Output a message in the lower left corner of the screen
 * and wait for carriage return.
 */
	public void
error(fmt, parg)
	char *fmt;
	PARG *parg;
{
	int c;
	int col = 0;
	static char return_to_continue[] = "  (press RETURN)";

	errmsgs++;

	if (any_display)
	{
		clear_bot();
		so_enter();
		col += so_s_width;
	}

	col += iprintf(fmt, parg);

	if (!any_display)
	{
		putchr('\n');
		return;
	}

	putstr(return_to_continue);
	so_exit();
	col += sizeof(return_to_continue) + so_e_width;

#if ONLY_RETURN
	while ((c = getchr()) != '\n' && c != '\r')
		bell();
#else
	c = getchr();
	if (c == 'q')
		quit(QUIT_OK);
	if (c != '\n' && c != '\r' && c != ' ' && c != READ_INTR)
		ungetcc(c);
#endif
	lower_left();

	if (col >= sc_width)
		/*
		 * Printing the message has probably scrolled the screen.
		 * {{ Unless the terminal doesn't have auto margins,
		 *    in which case we just hammered on the right margin. }}
		 */
		screen_trashed = 1;

	flush();
}

static char intr_to_abort[] = "... (interrupt to abort)";

/*
 * Output a message in the lower left corner of the screen
 * and don't wait for carriage return.
 * Usually used to warn that we are beginning a potentially
 * time-consuming operation.
 */
	public void
ierror(fmt, parg)
	char *fmt;
	PARG *parg;
{
	clear_bot();
	so_enter();
	(void) iprintf(fmt, parg);
	putstr(intr_to_abort);
	so_exit();
	flush();
	need_clr = 1;
}

/*
 * Output a message in the lower left corner of the screen
 * and return a single-character response.
 */
	public int
query(fmt, parg)
	char *fmt;
	PARG *parg;
{
	int c;
	int col = 0;

	if (any_display)
		clear_bot();

	(void) iprintf(fmt, parg);
	c = getchr();

	if (!any_display)
	{
		putchr('\n');
		return (c);
	}

	lower_left();
	if (col >= sc_width)
		screen_trashed = 1;
	flush();

	return (c);
}
@


1.1.1.1
log
@Import OpenBSD 3.3 source repository from CTM 3132 the first time
This opens an OpenBSD-mirabile (aka MirBSD) repository.

### MirBSD is:
# Copyright (c) 1982-2003 by Thorsten "mirabile" Glaser <x86@@ePost.de>
# Copyright © 1968-2003  The authors of And contributors to UNIX®, the
#       C Language, BSD/Berkeley Unix; 386BSD, NetBSD 1.1 and OpenBSD.
#
# Anyone who obtained a copy of this work is hereby permitted to freely use,
# distribute, modify, merge, sublicence, give away or sell it as long as the
# authors are given due credit and the following notice is retained:
#
# This work is provided "as is", with no explicit or implicit warranty what-
# soever. Use it only at your own risk. In no event may an author or contri-
# butor be held liable for any damage, directly or indirectly, that origina-
# ted through or is caused by creation or modification of this work.

MirBSD is my private tree. MirBSD does not differ very much from OpenBSD
and intentionally tracks OpenBSD. That's why it _is_ OpenBSD, just not the
official one. It's like with DarrenBSD.

At time of this writing, no advertising for MirBSD must be done,
because the advertising clause has not yet been sorted out.

http://templeofhate.com/tglaser/MirBSD/index.php
@
text
@@


1.1.1.2
log
@Import OpenBSD source with the "new" command line as well,
in order to be able to provide a MirBSD release which bases
upon a fairly current OpenBSD base source code tree deemed
stable enough.
@
text
@d1 2
d4 2
a5 1
 * Copyright (C) 1984-2002  Mark Nudelman
d7 8
a14 2
 * You may distribute under the terms of either the GNU General Public
 * License or the Less License, as specified in the README file.
d16 11
a26 2
 * For more information about less, or for information on how to 
 * contact the author, see the README file.
a34 3
#if MSDOS_COMPILER==WIN32C
#include "windows.h"
#endif
a37 1
public int final_attr;
a43 10
extern int is_tty;

#if MSDOS_COMPILER==BORLANDC || MSDOS_COMPILER==DJGPPC
extern int ctldisp;
extern int nm_fg_color, nm_bg_color;
extern int bo_fg_color, bo_bg_color;
extern int ul_fg_color, ul_bg_color;
extern int so_fg_color, so_bg_color;
extern int bl_fg_color, bl_bg_color;
#endif
d51 2
a52 2
	register int c;
	register int i;
a106 1
	final_attr = curr_attr;
d109 1
a109 1
static char obuf[OUTBUF_SIZE];
d131 2
a132 2
	register int n;
	register int fd;
d134 5
a141 217
#if MSDOS_COMPILER==WIN32C
	if (is_tty && any_display)
	{
		char *op;
		DWORD nwritten = 0;
		CONSOLE_SCREEN_BUFFER_INFO scr;
		int row;
		int col;
		int olen;
		extern HANDLE con_out;

		olen = ob - obuf;
		/*
		 * There is a bug in Win32 WriteConsole() if we're
		 * writing in the last cell with a different color.
		 * To avoid color problems in the bottom line,
		 * we scroll the screen manually, before writing.
		 */
		GetConsoleScreenBufferInfo(con_out, &scr);
		col = scr.dwCursorPosition.X;
		row = scr.dwCursorPosition.Y;
		for (op = obuf;  op < obuf + olen;  op++)
		{
			if (*op == '\n')
			{
				col = 0;
				row++;
			} else if (*op == '\r')
			{
				col = 0;
			} else
			{
				col++;
				if (col >= sc_width)
				{
					col = 0;
					row++;
				}
			}
		}
		if (row > scr.srWindow.Bottom)
			win32_scroll_up(row - scr.srWindow.Bottom);
		WriteConsole(con_out, obuf, olen, &nwritten, NULL);
		ob = obuf;
		return;
	}
#else
#if MSDOS_COMPILER==MSOFTC
	if (is_tty && any_display)
	{
		*ob = '\0';
		_outtext(obuf);
		ob = obuf;
		return;
	}
#else
#if MSDOS_COMPILER==BORLANDC || MSDOS_COMPILER==DJGPPC
	if (is_tty && any_display)
	{
		*ob = '\0';
		if (ctldisp != OPT_ONPLUS)
			cputs(obuf);
		else
		{
			/*
			 * Look for SGR escape sequences, and convert them
			 * to color commands.  Replace bold, underline,
			 * and italic escapes into colors specified via
			 * the -D command-line option.
			 */
			char *anchor, *p, *p_next;
			int buflen = ob - obuf;
			unsigned char fg, bg, norm_attr;
			/*
			 * Only dark colors mentioned here, so that
			 * bold has visible effect.
			 */
			static enum COLORS screen_color[] = {
				BLACK, RED, GREEN, BROWN,
				BLUE, MAGENTA, CYAN, LIGHTGRAY
			};

			/* Normal text colors are used as baseline. */
			bg = nm_bg_color & 0xf;
			fg = nm_fg_color & 0xf;
			norm_attr = (bg << 4) | fg;
			for (anchor = p_next = obuf;
			     (p_next = memchr (p_next, ESC,
					       buflen - (p_next - obuf)))
			       != NULL; )
			{
				p = p_next;

				/*
				 * Handle the null escape sequence
				 * (ESC-[m), which is used to restore
				 * the original color.
				 */
				if (p[1] == '[' && is_ansi_end(p[2]))
				{
					textattr(norm_attr);
					p += 3;
					anchor = p_next = p;
					continue;
				}

				if (p[1] == '[')	/* "Esc-[" sequence */
				{
					/*
					 * If some chars seen since
					 * the last escape sequence,
					 * write it out to the screen
					 * using current text attributes.
					 */
					if (p > anchor)
					{
						*p = '\0';
						cputs (anchor);
						*p = ESC;
						anchor = p;
					}
					p += 2;
					p_next = p;
					while (!is_ansi_end(*p))
					{
						char *q;
						long code = strtol(p, &q, 10);

						if (!*q)
						{
							/*
							 * Incomplete sequence.
							 * Leave it unprocessed
							 * in the buffer.
							 */
							int slop = q - anchor;
							strlcpy(obuf, anchor,
							    sizeof(obuf));
							ob = &obuf[slop];
							return;
						}

						if (q == p
						    || code > 49 || code < 0
						    || (!is_ansi_end(*q)
							&& *q != ';'))
						{
							p_next = q;
							break;
						}
						if (*q == ';')
							q++;

						switch (code)
						{
						case 1:	/* bold on */
							fg = bo_fg_color;
							bg = bo_bg_color;
							break;
						case 3:	/* italic on */
							fg = so_fg_color;
							bg = so_bg_color;
							break;
						case 4:	/* underline on */
							fg = ul_fg_color;
							bg = ul_bg_color;
							break;
						case 8:	/* concealed on */
							fg = (bg & 7) | 8;
							break;
						case 0:	/* all attrs off */
						case 22:/* bold off */
						case 23:/* italic off */
						case 24:/* underline off */
							fg = nm_fg_color;
							bg = nm_bg_color;
							break;
						case 30: case 31: case 32:
						case 33: case 34: case 35:
						case 36: case 37:
							fg = (fg & 8) | (screen_color[code - 30]);
							break;
						case 39: /* default fg */
							fg = nm_fg_color;
							break;
						case 40: case 41: case 42:
						case 43: case 44: case 45:
						case 46: case 47:
							bg = (bg & 8) | (screen_color[code - 40]);
							break;
						case 49: /* default fg */
							bg = nm_bg_color;
							break;
						}
						p = q;
					}
					if (is_ansi_end(*p) && p > p_next)
					{
						bg &= 15;
						fg &= 15;
						textattr ((bg << 4)| fg);
						p_next = anchor = p + 1;
					} else
						break;
				} else
					p_next++;
			}

			/* Output what's left in the buffer.  */
			cputs (anchor);
		}
		ob = obuf;
		return;
	}
#endif
#endif
#endif
d146 1
d156 2
d163 2
a164 4
#if MSDOS_COMPILER
	if (c == '\n' && is_tty)
	{
		/* remove_top(1); */
a165 5
	}
#else
#ifdef _OSK
	if (c == '\n' && is_tty)  /* In OS-9, '\n' == 0x0D */
		putchr(0x0A);
a166 7
#endif
	/*
	 * Some versions of flush() write to *ob, so we must flush
	 * when we are still one char from the end of obuf.
	 */
	if (ob >= &obuf[sizeof(obuf)-1])
		flush();
d176 1
a176 1
	register char *s;
a183 25
 * Convert an integral type to a string.
 */
#define TYPE_TO_A_FUNC(funcname, type) \
void funcname(num, buf, len) \
	type num; \
	char *buf; \
	size_t len; \
{ \
	int neg = (num < 0); \
	char tbuf[INT_STRLEN_BOUND(num)+2]; \
	register char *s = tbuf + sizeof(tbuf); \
	if (neg) num = -num; \
	*--s = '\0'; \
	do { \
		*--s = (num % 10) + '0'; \
	} while ((num /= 10) != 0); \
	if (neg) *--s = '-'; \
	strlcpy(buf, s, len); \
}

TYPE_TO_A_FUNC(postoa, POSITION)
TYPE_TO_A_FUNC(linenumtoa, LINENUM)
TYPE_TO_A_FUNC(inttoa, int)

/*
d187 1
a187 1
iprint_int(num)
d189 1
d191 7
a197 1
	char buf[INT_STRLEN_BOUND(num)];
d199 5
a203 4
	inttoa(num, buf, sizeof(buf));
	putstr(buf);
	return (strlen(buf));
}
d205 3
a207 8
/*
 * Output a line number in a given radix.
 */
	static int
iprint_linenum(num)
	LINENUM num;
{
	char buf[INT_STRLEN_BOUND(num)];
d209 3
a211 3
	linenumtoa(num, buf, sizeof(buf));
	putstr(buf);
	return (strlen(buf));
d219 2
a220 2
less_printf(fmt, parg)
	register char *fmt;
d223 3
a225 2
	register char *s;
	register int col;
d237 1
a237 2
			switch (*fmt++)
			{
d248 1
a248 5
				col += iprint_int(parg->p_int);
				parg++;
				break;
			case 'n':
				col += iprint_linenum(parg->p_linenum);
d250 1
a258 22
 * Get a RETURN.
 * If some other non-trivial char is pressed, unget it, so it will
 * become the next command.
 */
	public void
get_return()
{
	int c;

#if ONLY_RETURN
	while ((c = getchr()) != '\n' && c != '\r')
		bell();
#else
	c = getchr();
	if (c == 'q')
		quit(QUIT_OK);
	if (c != '\n' && c != '\r' && c != ' ' && c != READ_INTR)
		ungetcc(c);
#endif
}

/*
d267 1
d273 1
a273 1
	if (any_display && is_tty)
d280 1
a280 1
	col += less_printf(fmt, parg);
d282 1
a282 1
	if (!(any_display && is_tty))
d292 10
a301 1
	get_return();
d330 1
a330 1
	(void) less_printf(fmt, parg);
d346 1
a346 1
	register int c;
d349 1
a349 1
	if (any_display && is_tty)
d352 1
a352 1
	(void) less_printf(fmt, parg);
d355 1
a355 1
	if (!(any_display && is_tty))
@

