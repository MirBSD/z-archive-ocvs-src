head	1.1;
branch	1.1.1;
access;
symbols
	tg-mergetmp-mirosx-1:1.1.1.7
	tg-mergefixes-1-branch:1.1.1.7.0.4
	tg-mergefixes-1-base:1.1.1.7
	MIROS_X:1.1.1.7.0.2
	MIROS_X_BASE:1.1.1.7
	tg-mergetmp-3:1.1.1.7
	cvs-200411210200:1.1.1.7
	MIRBSD_XP_MIRPPC:1.1.1.6.0.10
	cvs-200411031540:1.1.1.7
	MIRBSD_XP_SPARC_BASE:1.1.1.6
	MIRBSD_XP_SPARC:1.1.1.6.0.8
	MIRBSD_7quater:1.1.1.6
	cvs-200405160640:1.1.1.6
	cvs-200401271800:1.1.1.6
	cvs-200401261630:1.1.1.6
	cvs-200401021645:1.1.1.6
	MIRBSD_7_ALPHA:1.1.1.6.0.6
	MIRBSD_7:1.1.1.6.0.4
	cvs-200312222040:1.1.1.6
	MIRBSD_7ter:1.1.1.6
	MIRBSD_7_DEV:1.1.1.6.0.2
	cvs-200310020700:1.1.1.6
	cvs-200309271030:1.1.1.6
	cvs-200309251530:1.1.1.6
	cvs-200308302005:1.1.1.6
	cvs-200308171200:1.1.1.6
	ctm-3496:1.1.1.6
	ctm-3449:1.1.1.5
	ctm-3437:1.1.1.4
	cvs-200307191805:1.1.1.3
	ctm-3425:1.1.1.3
	cvs-200307091500:1.1.1.2
	ctm-3389:1.1.1.2
	cvs-200306291430:1.1.1.2
	ctm-3341:1.1.1.2
	MIRBSD_5:1.1.1.2
	cvs-200306082100:1.1.1.2
	ctm-3316:1.1.1.2
	ctm-3272:1.1.1.2
	ctm-3264:1.1.1.2
	cvs-200305071630:1.1.1.2
	MIRBSD_4:1.1.1.2
	ctm-3203:1.1.1.2
	cvs-20030410-1130:1.1.1.2
	ctm-3155:1.1.1.1
	ctm-3132:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.1
date	2003.03.22.17.53.11;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.03.22.17.53.11;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2003.04.10.14.55.17;	author tg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2003.07.18.13.52.53;	author tg;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2003.07.22.15.02.40;	author tg;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2003.07.26.13.24.19;	author tg;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2003.08.11.18.45.26;	author tg;	state Stab;
branches;
next	1.1.1.7;

1.1.1.7
date	2004.11.03.15.45.17;	author tg;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@/*	$OpenBSD: backupfile.c,v 1.7 1999/12/04 21:00:03 provos Exp $	*/

/* backupfile.c -- make Emacs style backup file names
   Copyright (C) 1990 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it without restriction.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  */

/* David MacKenzie <djm@@ai.mit.edu>.
   Some algorithms adapted from GNU Emacs. */

#ifndef lint
static char rcsid[] = "$OpenBSD: backupfile.c,v 1.7 1999/12/04 21:00:03 provos Exp $";
#endif /* not lint */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>
#include <libgen.h>
#include <sys/types.h>
#include "backupfile.h"
#include "config.h"

#ifdef DIRENT
#include <dirent.h>
#ifdef direct
#undef direct
#endif
#define direct dirent
#define NLENGTH(direct) (strlen((direct)->d_name))
#else /* !DIRENT */
#define NLENGTH(direct) ((direct)->d_namlen)
#ifdef USG
#ifdef SYSNDIR
#include <sys/ndir.h>
#else /* !SYSNDIR */
#include <ndir.h>
#endif /* !SYSNDIR */
#else /* !USG */
#ifdef SYSDIR
#include <sys/dir.h>
#endif /* SYSDIR */
#endif /* !USG */
#endif /* !DIRENT */

#ifndef isascii
#define ISDIGIT(c) (isdigit ((unsigned char) (c)))
#else
#define ISDIGIT(c) (isascii (c) && isdigit (c))
#endif

#if defined (HAVE_UNISTD_H)
#include <unistd.h>
#endif

#if defined (_POSIX_VERSION)
/* POSIX does not require that the d_ino field be present, and some
   systems do not provide it. */
#define REAL_DIR_ENTRY(dp) 1
#else
#define REAL_DIR_ENTRY(dp) ((dp)->d_ino != 0)
#endif

/* Which type of backup file names are generated. */
enum backup_type backup_type = none;

/* The extension added to file names to produce a simple (as opposed
   to numbered) backup file name. */
char *simple_backup_suffix = "~";

static char *concat ();
char *find_backup_file_name ();
static char *make_version_name ();
static int max_backup_version ();
static int version_number ();

#ifndef NODIR
/* Return the name of the new backup file for file FILE,
   allocated with malloc.  Return 0 if out of memory.
   FILE must not end with a '/' unless it is the root directory.
   Do not call this function if backup_type == none. */

char *
find_backup_file_name (file)
     char *file;
{
  char *dir;
  char *base_versions;
  int highest_backup;

  if (backup_type == simple)
    return concat (file, simple_backup_suffix);
  base_versions = concat (basename (file), ".~");
  if (base_versions == 0)
    return 0;
  dir = dirname (file);
  if (dir == 0)
    {
      free (base_versions);
      return 0;
    }
  highest_backup = max_backup_version (base_versions, dir);
  free (base_versions);
  if (backup_type == numbered_existing && highest_backup == 0)
    return concat (file, simple_backup_suffix);
  return make_version_name (file, highest_backup + 1);
}

/* Return the number of the highest-numbered backup file for file
   FILE in directory DIR.  If there are no numbered backups
   of FILE in DIR, or an error occurs reading DIR, return 0.
   FILE should already have ".~" appended to it. */

static int
max_backup_version (file, dir)
     char *file, *dir;
{
  DIR *dirp;
  struct direct *dp;
  int highest_version;
  int this_version;
  int file_name_length;
  
  dirp = opendir (dir);
  if (!dirp)
    return 0;
  
  highest_version = 0;
  file_name_length = strlen (file);

  while ((dp = readdir (dirp)) != 0)
    {
      if (!REAL_DIR_ENTRY (dp) || NLENGTH (dp) <= file_name_length)
	continue;
      
      this_version = version_number (file, dp->d_name, file_name_length);
      if (this_version > highest_version)
	highest_version = this_version;
    }
  closedir (dirp);
  return highest_version;
}

/* Return a string, allocated with malloc, containing
   "FILE.~VERSION~".  Return 0 if out of memory. */

static char *
make_version_name (file, version)
     char *file;
     int version;
{
  char *backup_name;

  backup_name = malloc (strlen (file) + 16);
  if (backup_name == 0)
    return 0;
  sprintf (backup_name, "%s.~%d~", file, version);
  return backup_name;
}

/* If BACKUP is a numbered backup of BASE, return its version number;
   otherwise return 0.  BASE_LENGTH is the length of BASE.
   BASE should already have ".~" appended to it. */

static int
version_number (base, backup, base_length)
     char *base;
     char *backup;
     int base_length;
{
  int version;
  char *p;
  
  version = 0;
  if (!strncmp (base, backup, base_length) && ISDIGIT (backup[base_length]))
    {
      for (p = &backup[base_length]; ISDIGIT (*p); ++p)
	version = version * 10 + *p - '0';
      if (p[0] != '~' || p[1])
	version = 0;
    }
  return version;
}

/* Return the newly-allocated concatenation of STR1 and STR2.
   If out of memory, return 0. */

static char *
concat (str1, str2)
     char *str1, *str2;
{
  char *newstr;
  int str1_length = strlen (str1);

  newstr = malloc (str1_length + strlen (str2) + 1);
  if (newstr == 0)
    return 0;
  strcpy (newstr, str1);
  strcpy (newstr + str1_length, str2);
  return newstr;
}

/* If ARG is an unambiguous match for an element of the
   null-terminated array OPTLIST, return the index in OPTLIST
   of the matched element, else -1 if it does not match any element
   or -2 if it is ambiguous (is a prefix of more than one element). */

int
argmatch (arg, optlist)
     char *arg;
     char **optlist;
{
  int i;			/* Temporary index in OPTLIST. */
  int arglen;			/* Length of ARG. */
  int matchind = -1;		/* Index of first nonexact match. */
  int ambiguous = 0;		/* If nonzero, multiple nonexact match(es). */
  
  arglen = strlen (arg);
  
  /* Test all elements for either exact match or abbreviated matches.  */
  for (i = 0; optlist[i]; i++)
    {
      if (!strncmp (optlist[i], arg, arglen))
	{
	  if (strlen (optlist[i]) == arglen)
	    /* Exact match found.  */
	    return i;
	  else if (matchind == -1)
	    /* First nonexact match found.  */
	    matchind = i;
	  else
	    /* Second nonexact match found.  */
	    ambiguous = 1;
	}
    }
  if (ambiguous)
    return -2;
  else
    return matchind;
}

/* Error reporting for argmatch.
   KIND is a description of the type of entity that was being matched.
   VALUE is the invalid value that was given.
   PROBLEM is the return value from argmatch. */

void
invalid_arg (kind, value, problem)
     char *kind;
     char *value;
     int problem;
{
  fprintf (stderr, "patch: ");
  if (problem == -1)
    fprintf (stderr, "invalid");
  else				/* Assume -2. */
    fprintf (stderr, "ambiguous");
  fprintf (stderr, " %s `%s'\n", kind, value);
}

static char *backup_args[] =
{
  "never", "simple", "nil", "existing", "t", "numbered", 0
};

static enum backup_type backup_types[] =
{
  simple, simple, numbered_existing, numbered_existing, numbered, numbered
};

/* Return the type of backup indicated by VERSION.
   Unique abbreviations are accepted. */

enum backup_type
get_version (version)
     char *version;
{
  int i;

  if (version == 0 || *version == 0)
    return numbered_existing;
  i = argmatch (version, backup_args);
  if (i >= 0)
    return backup_types[i];
  invalid_arg ("version control type", version, i);
  exit (1);
}
#endif /* NODIR */
@


1.1.1.1
log
@Import OpenBSD 3.3 source repository from CTM 3132 the first time
This opens an OpenBSD-mirabile (aka MirBSD) repository.

### MirBSD is:
# Copyright (c) 1982-2003 by Thorsten "mirabile" Glaser <x86@@ePost.de>
# Copyright © 1968-2003  The authors of And contributors to UNIX®, the
#       C Language, BSD/Berkeley Unix; 386BSD, NetBSD 1.1 and OpenBSD.
#
# Anyone who obtained a copy of this work is hereby permitted to freely use,
# distribute, modify, merge, sublicence, give away or sell it as long as the
# authors are given due credit and the following notice is retained:
#
# This work is provided "as is", with no explicit or implicit warranty what-
# soever. Use it only at your own risk. In no event may an author or contri-
# butor be held liable for any damage, directly or indirectly, that origina-
# ted through or is caused by creation or modification of this work.

MirBSD is my private tree. MirBSD does not differ very much from OpenBSD
and intentionally tracks OpenBSD. That's why it _is_ OpenBSD, just not the
official one. It's like with DarrenBSD.

At time of this writing, no advertising for MirBSD must be done,
because the advertising clause has not yet been sorted out.

http://templeofhate.com/tglaser/MirBSD/index.php
@
text
@@


1.1.1.2
log
@Import OpenBSD cvs as of roughly 11:11 UTC today,
or CTM delta 3188/3189/3190.
@
text
@d1 1
a1 1
/*	$OpenBSD: backupfile.c,v 1.9 2003/04/06 04:14:09 millert Exp $	*/
d17 1
a17 1
static char rcsid[] = "$OpenBSD: backupfile.c,v 1.9 2003/04/06 04:14:09 millert Exp $";
d159 2
a160 1
  if (asprintf (&backup_name, "%s.~%d~", file, version) == -1)
d162 1
d198 1
d200 2
a201 1
  if (asprintf(&newstr, "%s%s", str1, str2) == -1)
d203 2
@


1.1.1.3
log
@Synchronize source tree with OpenBSD
note: due to recent changes in the codebase of OpenBSD,
out libcom_err will be incompatible with theirs...
but this is no issue because we don't provide a dynamically
linked one, and theirs won't be provided longer any more anyways.
@
text
@d1 1
a1 1
/*	$OpenBSD: backupfile.c,v 1.10 2003/07/18 02:00:09 deraadt Exp $	*/
d17 1
a17 1
static char rcsid[] = "$OpenBSD: backupfile.c,v 1.10 2003/07/18 02:00:09 deraadt Exp $";
d57 1
d59 1
d76 5
a80 7
static char *concat(char *, char *);
char *find_backup_file_name(char *);
static char *make_version_name(char *, int);
static int max_backup_version(char *, char *);
static int version_number(char *, char *, int);
static int argmatch(char *, char **);
static void invalid_arg(char *, char *, int);
d128 1
a128 1

d132 1
a132 1

d140 1
a140 1

d176 1
a176 1

d216 1
a216 1

d218 1
a218 1

@


1.1.1.4
log
@Sync to OpenBSD 3.3-current
@
text
@d1 1
a1 1
/*	$OpenBSD: backupfile.c,v 1.12 2003/07/21 14:32:21 deraadt Exp $	*/
d3 12
a14 15
/*
 * backupfile.c -- make Emacs style backup file names Copyright (C) 1990 Free
 * Software Foundation, Inc.
 * 
 * This program is free software; you can redistribute it and/or modify it
 * without restriction.
 * 
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 */

/*
 * David MacKenzie <djm@@ai.mit.edu>. Some algorithms adapted from GNU Emacs.
 */
d17 2
a18 2
static char     rcsid[] = "$OpenBSD: backupfile.c,v 1.12 2003/07/21 14:32:21 deraadt Exp $";
#endif				/* not lint */
d36 1
a36 1
#else				/* !DIRENT */
d38 12
a49 1
#endif				/* !DIRENT */
d51 3
d55 1
d60 2
a61 4
/*
 * POSIX does not require that the d_ino field be present, and some systems
 * do not provide it.
 */
d70 18
a87 19
/*
 * The extension added to file names to produce a simple (as opposed to
 * numbered) backup file name.
 */
char           *simple_backup_suffix = "~";

static char    *concat(char *, char *);
char           *find_backup_file_name(char *);
static char    *make_version_name(char *, int);
static int      max_backup_version(char *, char *);
static int      version_number(char *, char *, int);
static int      argmatch(char *, char **);
static void     invalid_arg(char *, char *, int);

/*
 * Return the name of the new backup file for file FILE, allocated with
 * malloc.  Return 0 if out of memory. FILE must not end with a '/' unless it
 * is the root directory. Do not call this function if backup_type == none.
 */
d89 2
a90 1
find_backup_file_name(char *file)
d92 21
a112 2
	char	*dir, *base_versions;
	int	highest_backup;
d114 4
a117 16
	if (backup_type == simple)
		return concat(file, simple_backup_suffix);
	base_versions = concat(basename(file), ".~");
	if (base_versions == 0)
		return 0;
	dir = dirname(file);
	if (dir == 0) {
		free(base_versions);
		return 0;
	}
	highest_backup = max_backup_version(base_versions, dir);
	free(base_versions);
	if (backup_type == numbered_existing && highest_backup == 0)
		return concat(file, simple_backup_suffix);
	return make_version_name(file, highest_backup + 1);
}
a118 6
/*
 * Return the number of the highest-numbered backup file for file FILE in
 * directory DIR.  If there are no numbered backups of FILE in DIR, or an
 * error occurs reading DIR, return 0. FILE should already have ".~" appended
 * to it.
 */
d120 2
a121 1
max_backup_version(char *file, char *dir)
d123 24
a146 21
	DIR	*dirp;
	struct direct	*dp;
	int	highest_version, this_version, file_name_length;

	dirp = opendir(dir);
	if (!dirp)
		return 0;

	highest_version = 0;
	file_name_length = strlen(file);

	while ((dp = readdir(dirp)) != 0) {
		if (!REAL_DIR_ENTRY(dp) || NLENGTH(dp) <= file_name_length)
			continue;

		this_version = version_number(file, dp->d_name, file_name_length);
		if (this_version > highest_version)
			highest_version = this_version;
	}
	closedir(dirp);
	return highest_version;
d149 3
a151 4
/*
 * Return a string, allocated with malloc, containing "FILE.~VERSION~".
 * Return 0 if out of memory.
 */
d153 3
a155 1
make_version_name(char *file, int version)
d157 1
a157 1
	char	*backup_name;
d159 3
a161 3
	if (asprintf(&backup_name, "%s.~%d~", file, version) == -1)
		return 0;
	return backup_name;
d164 4
a167 5
/*
 * If BACKUP is a numbered backup of BASE, return its version number;
 * otherwise return 0.  BASE_LENGTH is the length of BASE. BASE should
 * already have ".~" appended to it.
 */
d169 4
a172 1
version_number(char *base, char *backup, int base_length)
d174 2
a175 2
	int	version;
	char	*p;
d177 6
d184 2
a185 7
	if (!strncmp(base, backup, base_length) && ISDIGIT(backup[base_length])) {
		for (p = &backup[base_length]; ISDIGIT(*p); ++p)
			version = version * 10 + *p - '0';
		if (p[0] != '~' || p[1])
			version = 0;
	}
	return version;
d188 6
a193 6
/*
 * Return the newly-allocated concatenation of STR1 and STR2. If out of
 * memory, return 0.
 */
static char  *
concat(char *str1, char *str2)
d195 1
a195 1
	char	*newstr;
d197 3
a199 3
	if (asprintf(&newstr, "%s%s", str1, str2) == -1)
		return 0;
	return newstr;
d202 5
a206 6
/*
 * If ARG is an unambiguous match for an element of the null-terminated array
 * OPTLIST, return the index in OPTLIST of the matched element, else -1 if it
 * does not match any element or -2 if it is ambiguous (is a prefix of more
 * than one element).
 */
d208 3
a210 1
argmatch(char *arg, char **optlist)
d212 21
a232 20
	int	i;	/* Temporary index in OPTLIST. */
	int	arglen;	/* Length of ARG. */
	int	matchind = -1;	/* Index of first nonexact match. */
	int	ambiguous = 0;	/* If nonzero, multiple nonexact match(es). */

	arglen = strlen(arg);

	/* Test all elements for either exact match or abbreviated matches.  */
	for (i = 0; optlist[i]; i++) {
		if (!strncmp(optlist[i], arg, arglen)) {
			if (strlen(optlist[i]) == arglen)
				/* Exact match found.  */
				return i;
			else if (matchind == -1)
				/* First nonexact match found.  */
				matchind = i;
			else
				/* Second nonexact match found.  */
				ambiguous = 1;
		}
d234 5
a238 4
	if (ambiguous)
		return -2;
	else
		return matchind;
d241 5
a245 5
/*
 * Error reporting for argmatch. KIND is a description of the type of entity
 * that was being matched. VALUE is the invalid value that was given. PROBLEM
 * is the return value from argmatch.
 */
d247 4
a250 1
invalid_arg(char *kind, char *value, int problem)
d252 6
a257 6
	fprintf(stderr, "patch: ");
	if (problem == -1)
		fprintf(stderr, "invalid");
	else			/* Assume -2. */
		fprintf(stderr, "ambiguous");
	fprintf(stderr, " %s `%s'\n", kind, value);
d260 3
a262 2
static char *backup_args[] = {
	"never", "simple", "nil", "existing", "t", "numbered", 0
d265 3
a267 3
static enum backup_type backup_types[] = {
	simple, simple, numbered_existing,
	numbered_existing, numbered, numbered
d270 3
a272 4
/*
 * Return the type of backup indicated by VERSION. Unique abbreviations are
 * accepted.
 */
d274 2
a275 1
get_version(char *version)
d277 1
a277 1
	int	i;
d279 7
a285 7
	if (version == 0 || *version == 0)
		return numbered_existing;
	i = argmatch(version, backup_args);
	if (i >= 0)
		return backup_types[i];
	invalid_arg("version control type", version, i);
	exit(1);
d287 1
@


1.1.1.5
log
@Import latest OpenBSD ports, XFree and source in sync
@
text
@d1 1
a1 1
/*	$OpenBSD: backupfile.c,v 1.14 2003/07/22 17:52:20 deraadt Exp $	*/
d20 2
a21 2
static const char rcsid[] = "$OpenBSD: backupfile.c,v 1.14 2003/07/22 17:52:20 deraadt Exp $";
#endif /* not lint */
a22 2
#include <ctype.h>
#include <libgen.h>
d26 3
a28 1

d30 1
a30 6

/*
 * DIRHEADER: This definition indicates which directory library header to
 * use.
 */
#define DIRENT
d67 1
d89 1
a89 1
		return NULL;
d93 1
a93 1
		return NULL;
d144 1
a144 1
		return NULL;
d179 1
a179 1
		return NULL;
d189 1
a189 1
static int
d224 1
a224 1
static void
@


1.1.1.6
log
@Import the complete OpenBSD source tree (base system)
as of CTM delta 3496 (roughly 1200 UTC today) into the
vendor branch.
Attention: this is a big update. Don't even try to
build this system, OpenBSD 3.4-beta, yet on your own.
@
text
@d1 1
a1 1
/*	$OpenBSD: backupfile.c,v 1.17 2003/08/01 20:30:48 otto Exp $	*/
d20 1
a20 1
static const char rcsid[] = "$OpenBSD: backupfile.c,v 1.17 2003/08/01 20:30:48 otto Exp $";
a23 1
#include <dirent.h>
a27 1
#include <unistd.h>
d31 16
d50 12
d71 6
a76 6
static char    *concat(const char *, const char *);
static char    *make_version_name(const char *, int);
static int      max_backup_version(const char *, const char *);
static int      version_number(const char *, const char *, int);
static int      argmatch(const char *, const char **);
static void     invalid_arg(const char *, const char *, int);
d84 1
a84 1
find_backup_file_name(const char *file)
d92 1
a92 1
	if (base_versions == NULL)
d95 1
a95 1
	if (dir == NULL) {
d113 1
a113 1
max_backup_version(const char *file, const char *dir)
d116 1
a116 1
	struct dirent	*dp;
d120 1
a120 1
	if (dirp == NULL)
d126 2
a127 2
	while ((dp = readdir(dirp)) != NULL) {
		if (dp->d_namlen <= file_name_length)
d143 1
a143 1
make_version_name(const char *file, int version)
d158 1
a158 1
version_number(const char *base, const char *backup, int base_length)
d160 2
a161 2
	int		version;
	const char	*p;
d178 1
a178 1
concat(const char *str1, const char *str2)
d194 1
a194 1
argmatch(const char *arg, const char **optlist)
d197 1
a197 1
	size_t	arglen;	/* Length of ARG. */
d229 1
a229 1
invalid_arg(const char *kind, const char *value, int problem)
d239 1
a239 1
static const char *backup_args[] = {
d253 1
a253 1
get_version(const char *version)
d257 1
a257 1
	if (version == NULL || *version == '\0')
d263 1
a263 1
	exit(2);
@


1.1.1.7
log
@better patch(1) fixes from obsd
@
text
@d1 1
a1 1
/*	$OpenBSD: backupfile.c,v 1.18 2004/08/05 21:47:24 deraadt Exp $	*/
d20 1
a20 1
static const char rcsid[] = "$OpenBSD: backupfile.c,v 1.18 2004/08/05 21:47:24 deraadt Exp $";
d43 1
a43 1
char		*simple_backup_suffix = "~";
d45 6
a50 6
static char	*concat(const char *, const char *);
static char	*make_version_name(const char *, int);
static int	max_backup_version(const char *, const char *);
static int	version_number(const char *, const char *, int);
static int	argmatch(const char *, const char **);
static void	invalid_arg(const char *, const char *, int);
@


