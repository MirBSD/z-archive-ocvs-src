head	1.1;
branch	1.1.1;
access;
symbols
	tg-mergetmp-mirosx-1:1.1.1.2
	tg-mergefixes-1-branch:1.1.1.2.0.8
	tg-mergefixes-1-base:1.1.1.2
	MIROS_X:1.1.1.2.0.6
	MIROS_X_BASE:1.1.1.2
	tg-mergetmp-3:1.1.1.2
	MIRBSD_XP_MIRPPC:1.1.1.2.0.4
	MIRBSD_XP_SPARC_BASE:1.1.1.2
	MIRBSD_XP_SPARC:1.1.1.2.0.2
	MIRBSD_7quater:1.1.1.1
	cvs-200405160640:1.1.1.2
	cvs-200401271800:1.1.1.1
	cvs-200401261630:1.1.1.1
	cvs-200401021645:1.1.1.1
	MIRBSD_7_ALPHA:1.1.1.1.0.6
	MIRBSD_7:1.1.1.1.0.4
	cvs-200312222040:1.1.1.1
	MIRBSD_7ter:1.1.1.1
	MIRBSD_7_DEV:1.1.1.1.0.2
	cvs-200310020700:1.1.1.1
	cvs-200309271030:1.1.1.1
	cvs-200309251530:1.1.1.1
	cvs-200308302005:1.1.1.1
	cvs-200308171200:1.1.1.1
	ctm-3496:1.1.1.1
	ctm-3449:1.1.1.1
	ctm-3437:1.1.1.1
	cvs-200307191805:1.1.1.1
	ctm-3425:1.1.1.1
	cvs-200307091500:1.1.1.1
	ctm-3389:1.1.1.1
	cvs-200306291430:1.1.1.1
	ctm-3341:1.1.1.1
	MIRBSD_5:1.1.1.1
	cvs-200306082100:1.1.1.1
	ctm-3316:1.1.1.1
	ctm-3272:1.1.1.1
	ctm-3264:1.1.1.1
	cvs-200305071630:1.1.1.1
	MIRBSD_4:1.1.1.1
	ctm-3203:1.1.1.1
	cvs-20030410-1130:1.1.1.1
	ctm-3155:1.1.1.1
	ctm-3132:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.1
date	2003.03.22.17.53.07;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.03.22.17.53.07;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2004.05.16.08.09.36;	author tg;	state Stab;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@/* $OpenPackages$ */
/* $OpenBSD: stats.c,v 1.6 2002/08/12 00:42:56 aaron Exp $ */

/*
 * Copyright (c) 1999 Marc Espie.
 *
 * Code written for the OpenBSD project.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE OPENBSD PROJECT AND CONTRIBUTORS
 * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OPENBSD
 * PROJECT OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */


/* statistics gathering */

/* collection across make invocations is done with an mmap shared file,
   to allow for concurrent adjustment to variables.
 */

#include "config.h"
#include "defines.h"
#include "stats.h"

#ifdef HAS_STATS
#include <fcntl.h>
#include <stdio.h>
#include <stdlib.h>
#include <sys/time.h>
#include <sys/mman.h>
#include <sys/types.h>
#include <sys/resource.h>
#include "memory.h"

static void print_stats(void);
void Init_Stats(void);
static float average_runs(unsigned long val);
unsigned long *statarray;

static bool mmapped = false;

static float
average_runs(val)
    unsigned long val;
{
    return (float)val / STAT_INVOCATIONS;
}

static void
print_stats()
{
    struct rusage ru;

    if (getrusage(RUSAGE_SELF, &ru) != -1) {
	STAT_USER_SECONDS += ru.ru_utime.tv_sec;
	STAT_USER_MS += ru.ru_utime.tv_usec;
	if (STAT_USER_MS > 1000000) {
	    STAT_USER_MS -= 1000000;
	    STAT_USER_SECONDS++;
	}
	STAT_SYS_SECONDS += ru.ru_stime.tv_sec;
	STAT_SYS_MS += ru.ru_stime.tv_usec;
	if (STAT_SYS_MS > 1000000) {
	    STAT_SYS_MS -= 1000000;
	    STAT_SYS_SECONDS++;
	}
    }
    fprintf(stderr, "Make runs: %lu\n", STAT_INVOCATIONS);
    fprintf(stderr, "Time user: %lu.%06lu, sys %lu.%06lu\n",
	STAT_USER_SECONDS, STAT_USER_MS,
	STAT_SYS_SECONDS, STAT_SYS_MS);
#ifdef STATS_VAR_LOOKUP
	/* to get the average total of MAXSIZE, we need this value */
    STAT_VAR_POWER +=
	STAT_VAR_HASH_MAXSIZE * STAT_VAR_HASH_CREATION;
    fprintf(stderr, "Var finds: %f, lookups: %f, average: %f, max: %lu\n",
	average_runs(STAT_VAR_FIND),
	average_runs(STAT_VAR_SEARCHES),
	(float)STAT_VAR_COUNT/STAT_VAR_SEARCHES,
	STAT_VAR_MAXCOUNT);
    fprintf(stderr, "Average hash: %f, creation: %f, from env %f\n",
	average_runs(STAT_VAR_HASH_CREATION),
	average_runs(STAT_VAR_CREATION),
	average_runs(STAT_VAR_FROM_ENV));
    fprintf(stderr, "Local hash max: %lu, global hash max: %lu, average local: %f\n",
	STAT_VAR_HASH_MAXSIZE,
	STAT_VAR_GHASH_MAXSIZE,
	(float)STAT_VAR_POWER/STAT_VAR_HASH_CREATION);
#endif
#ifdef STATS_GN_CREATION
    fprintf(stderr, "Average GN: %f\n", average_runs(STAT_GN_COUNT));
#endif
#ifdef STATS_BUF
    fprintf(stderr, "Buf tot: %f, def: %f, exp %f, weird %f, bad %f\n",
	average_runs(STAT_TOTAL_BUFS),
	average_runs(STAT_DEFAULT_BUFS),
	average_runs(STAT_BUFS_EXPANSION),
	average_runs(STAT_WEIRD_BUFS),
	average_runs(STAT_WEIRD_INEFFICIENT));
#endif
#ifdef STATS_HASH
    fprintf(stderr, "Hashes new: %f, exp: %f, lookup %f, l: %f, +: %f, ent : %f\n",
	average_runs(STAT_HASH_CREATION),
	average_runs(STAT_HASH_EXPAND),
	average_runs(STAT_HASH_LOOKUP),
	(float)STAT_HASH_LENGTH/STAT_HASH_LOOKUP,
	(float)STAT_HASH_POSITIVE/STAT_HASH_LOOKUP,
	(float)STAT_HASH_ENTRIES/STAT_HASH_SIZE);
#endif
#ifdef STATS_GROW
    fprintf(stderr, "Grow: %f\n", average_runs(STAT_GROWARRAY));
#endif
    if (mmapped)
	munmap(statarray, STAT_NUMBER * sizeof(unsigned long));
}

void
Init_Stats()
{
    char *name;
    int fd;

	/* try to get ahold of a stats collecting file */
    name = getenv("MAKESTATS");
    if (name) {
	while ((fd = open(name, O_RDWR)) == -1) {
		/* if collecting file does not already exist, fill it with
		 * zeros (so all stats starting values should be 0) */
	    unsigned long n;
	    int i;
	    FILE *f;

	    f = fopen(name, "w");

	    n = 0;
	    for (i = 0; i < STAT_NUMBER; i++)
		fwrite(&n, sizeof(unsigned long), 1, f);
	    fclose(f);
	}

    /* either we've got the file -> share it across makes */
	if (fd) {
	    statarray = mmap(0, STAT_NUMBER * sizeof(unsigned long),
		PROT_READ | PROT_WRITE, MAP_SHARED, fd, 0);
	    if (statarray == MAP_FAILED)
		exit(1);
	    mmapped = true;
	}
    } else
    /* or we don't -> simple stats gathering */
	statarray = ecalloc(STAT_NUMBER, sizeof(unsigned long));
    STAT_INVOCATIONS++;
    atexit(print_stats);
}

#endif

@


1.1.1.1
log
@Import OpenBSD 3.3 source repository from CTM 3132 the first time
This opens an OpenBSD-mirabile (aka MirBSD) repository.

### MirBSD is:
# Copyright (c) 1982-2003 by Thorsten "mirabile" Glaser <x86@@ePost.de>
# Copyright © 1968-2003  The authors of And contributors to UNIX®, the
#       C Language, BSD/Berkeley Unix; 386BSD, NetBSD 1.1 and OpenBSD.
#
# Anyone who obtained a copy of this work is hereby permitted to freely use,
# distribute, modify, merge, sublicence, give away or sell it as long as the
# authors are given due credit and the following notice is retained:
#
# This work is provided "as is", with no explicit or implicit warranty what-
# soever. Use it only at your own risk. In no event may an author or contri-
# butor be held liable for any damage, directly or indirectly, that origina-
# ted through or is caused by creation or modification of this work.

MirBSD is my private tree. MirBSD does not differ very much from OpenBSD
and intentionally tracks OpenBSD. That's why it _is_ OpenBSD, just not the
official one. It's like with DarrenBSD.

At time of this writing, no advertising for MirBSD must be done,
because the advertising clause has not yet been sorted out.

http://templeofhate.com/tglaser/MirBSD/index.php
@
text
@@


1.1.1.2
log
@large-scale import of OpenBSD 3.5-current source base including many fixes
note: from now, we will not be binary compatible with OpenBSD apps any
longer (due to syscall numbering differences); both an OpenBSD compat and
a conversion tool for old MirOS #7 apps will be delivered later.

The src/ tree is locked from now.
@
text
@d2 1
a2 1
/* $OpenBSD: stats.c,v 1.8 2004/05/05 09:10:47 espie Exp $ */
d60 2
a61 1
average_runs(unsigned long val)
d67 1
a67 1
print_stats(void)
a109 5
#ifdef STATS_SUFF
    fprintf(stderr, "Average Suffix lookup: %f, transforms: %f\n",
    	average_runs(STAT_SUFF_LOOKUP_NAME),
	average_runs(STAT_TRANSFORM_LOOKUP_NAME));
#endif
d135 1
a135 1
Init_Stats(void)
@

