head	1.1;
branch	1.1.1;
access;
symbols
	tg-mergetmp-mirosx-1:1.1.1.2
	tg-mergefixes-1-branch:1.1.1.2.0.14
	tg-mergefixes-1-base:1.1.1.2
	MIROS_X:1.1.1.2.0.12
	MIROS_X_BASE:1.1.1.2
	tg-mergetmp-3:1.1.1.2
	MIRBSD_XP_MIRPPC:1.1.1.2.0.10
	MIRBSD_XP_SPARC_BASE:1.1.1.2
	MIRBSD_XP_SPARC:1.1.1.2.0.8
	MIRBSD_7quater:1.1.1.2
	cvs-200405160640:1.1.1.2
	cvs-200401271800:1.1.1.2
	cvs-200401261630:1.1.1.2
	cvs-200401021645:1.1.1.2
	MIRBSD_7_ALPHA:1.1.1.2.0.6
	MIRBSD_7:1.1.1.2.0.4
	cvs-200312222040:1.1.1.2
	MIRBSD_7ter:1.1.1.2
	MIRBSD_7_DEV:1.1.1.2.0.2
	cvs-200310020700:1.1.1.2
	cvs-200309271030:1.1.1.2
	cvs-200309251530:1.1.1.2
	cvs-200308302005:1.1.1.2
	cvs-200308171200:1.1.1.2
	ctm-3496:1.1.1.2
	ctm-3449:1.1.1.2
	ctm-3437:1.1.1.2
	cvs-200307191805:1.1.1.2
	ctm-3425:1.1.1.2
	cvs-200307091500:1.1.1.2
	ctm-3389:1.1.1.2
	cvs-200306291430:1.1.1.2
	ctm-3341:1.1.1.2
	MIRBSD_5:1.1.1.2
	cvs-200306082100:1.1.1.2
	ctm-3316:1.1.1.2
	ctm-3272:1.1.1.1
	ctm-3264:1.1.1.1
	cvs-200305071630:1.1.1.1
	MIRBSD_4:1.1.1.1
	ctm-3203:1.1.1.1
	cvs-20030410-1130:1.1.1.1
	ctm-3155:1.1.1.1
	ctm-3132:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.1
date	2003.03.22.17.53.07;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.03.22.17.53.07;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2003.06.05.17.43.36;	author tg;	state Stab;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@#ifndef _LST_H_
#define _LST_H_

/*	$OpenPackages$ */
/*	$OpenBSD: lst.h,v 1.24 2001/11/11 12:35:02 espie Exp $ */
/*	$NetBSD: lst.h,v 1.7 1996/11/06 17:59:12 christos Exp $ */

/*
 * Copyright (c) 1988, 1989, 1990 The Regents of the University of California.
 * Copyright (c) 1988, 1989 by Adam de Boor
 * Copyright (c) 1989 by Berkeley Softworks
 * All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * Adam de Boor.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	from: @@(#)lst.h 8.1 (Berkeley) 6/6/93
 */

/*-
 * lst.h --
 *	Header for using the list library
 */

/* These data structures are PRIVATE !!!
 * Here for efficiency, so that some functions can be recoded as inlines,
 * and so that lst headers don't need dynamic allocation most of the time.  */
struct ListNode_ {
	struct ListNode_    *prevPtr;	/* previous element in list */
	struct ListNode_    *nextPtr;	/* next in list */
	void		    *datum;	/* datum associated with this element */
};

#ifndef LIST_TYPE
#include "lst_t.h"
#endif

typedef void (*SimpleProc)(void *);
typedef int (*FindProc)(void *, void *);
typedef int (*FindProcConst)(void *, const void *);
typedef void (*ForEachProc)(void *, void *);
typedef void *(*DuplicateProc)(void *);

/*
 * NOFREE can be used as the freeProc to Lst_Destroy when the elements are
 *	not to be freed.
 * NOCOPY performs similarly when given as the copyProc to Lst_Duplicate.
 */
#define NOFREE		((SimpleProc) 0)
#define NOCOPY		((DuplicateProc) 0)

/*
 * Creation/destruction functions
 */
/* Create a new list */
#define Lst_Init(l)	(l)->firstPtr = (l)->lastPtr = NULL
/* Static lists are already okay */
#define Static_Lst_Init(l)

/* Duplicate an existing list */
extern Lst		Lst_Clone(Lst, Lst, DuplicateProc);
/* Destroy an old one */
extern void		Lst_Destroy(LIST *, SimpleProc);
/* True if list is empty */
#define 	Lst_IsEmpty(l)	((l)->firstPtr == NULL)

/*
 * Functions to modify a list
 */
/* Insert an element before another */
extern void		Lst_Insert(Lst, LstNode, void *);
extern void		Lst_AtFront(Lst, void *);
/* Insert an element after another */
extern void		Lst_Append(Lst, LstNode, void *);
extern void		Lst_AtEnd(Lst, void *);
/* Remove an element */
extern void		Lst_Remove(Lst, LstNode);
/* Replace a node with a new value */
extern void		Lst_Replace(LstNode, void *);
/* Concatenate two lists, destructive.	*/
extern void		Lst_ConcatDestroy(Lst, Lst);
/* Concatenate two lists, non-destructive.  */
extern void		Lst_Concat(Lst, Lst);

/*
 * Node-specific functions
 */
/* Return first element in list */
/* Return last element in list */
/* Return successor to given element */
extern LstNode		Lst_Succ(LstNode);

/*
 * Functions for entire lists
 */
/* Find an element starting from somewhere */
extern LstNode		Lst_FindFrom(LstNode, FindProc, void *);
/*
 * See if the given datum is on the list. Returns the LstNode containing
 * the datum
 */
extern LstNode		Lst_Member(Lst, void *);
/* Apply a function to elements of a lst starting from a certain point.  */
extern void		Lst_ForEachFrom(LstNode, ForEachProc, void *);
extern void		Lst_Every(Lst, SimpleProc);

extern bool		Lst_AddNew(Lst, void *);
/*
 * for using the list as a queue
 */
/* Place an element at tail of queue */
#define Lst_EnQueue	Lst_AtEnd
#define Lst_QueueNew	Lst_AddNew

/*
 * for using the list as a stack
 */
#define Lst_Push	Lst_AtFront
#define Lst_Pop		Lst_DeQueue

/* Remove an element from head of queue */
extern void *	Lst_DeQueue(Lst);

#define Lst_Datum(ln)	((ln)->datum)
#define Lst_First(l)	((l)->firstPtr)
#define Lst_Last(l)	((l)->lastPtr)
#define Lst_ForEach(l, proc, d) Lst_ForEachFrom(Lst_First(l), proc, d)
#define Lst_Find(l, cProc, d)	Lst_FindFrom(Lst_First(l), cProc, d)
#define Lst_Adv(ln)	((ln)->nextPtr)
#define Lst_Rev(ln)	((ln)->prevPtr)


/* Inlines are preferable to macros here because of the type checking. */
#ifdef HAS_INLINES
static INLINE LstNode
Lst_FindConst(Lst l, FindProcConst cProc, const void *d)
{
	return Lst_FindFrom(Lst_First(l), (FindProc)cProc, (void *)d);
}

static INLINE LstNode
Lst_FindFromConst(LstNode ln, FindProcConst cProc, const void *d)
{
	return Lst_FindFrom(ln, (FindProc)cProc, (void *)d);
}
#else
#define Lst_FindConst(l, cProc, d) \
	Lst_FindFrom(Lst_First(l), (FindProc)cProc, (void *)d)
#define Lst_FindFromConst(ln, cProc, d) \
	Lst_FindFrom(ln, (FindProc)cProc, (void *)d)
#endif

#endif /* _LST_H_ */
@


1.1.1.1
log
@Import OpenBSD 3.3 source repository from CTM 3132 the first time
This opens an OpenBSD-mirabile (aka MirBSD) repository.

### MirBSD is:
# Copyright (c) 1982-2003 by Thorsten "mirabile" Glaser <x86@@ePost.de>
# Copyright © 1968-2003  The authors of And contributors to UNIX®, the
#       C Language, BSD/Berkeley Unix; 386BSD, NetBSD 1.1 and OpenBSD.
#
# Anyone who obtained a copy of this work is hereby permitted to freely use,
# distribute, modify, merge, sublicence, give away or sell it as long as the
# authors are given due credit and the following notice is retained:
#
# This work is provided "as is", with no explicit or implicit warranty what-
# soever. Use it only at your own risk. In no event may an author or contri-
# butor be held liable for any damage, directly or indirectly, that origina-
# ted through or is caused by creation or modification of this work.

MirBSD is my private tree. MirBSD does not differ very much from OpenBSD
and intentionally tracks OpenBSD. That's why it _is_ OpenBSD, just not the
official one. It's like with DarrenBSD.

At time of this writing, no advertising for MirBSD must be done,
because the advertising clause has not yet been sorted out.

http://templeofhate.com/tglaser/MirBSD/index.php
@
text
@@


1.1.1.2
log
@Import latest OpenBSD CVS tree by CTM in order
to sync the base system and ports tree with Them.

This includes the recent licence changes as well - by
importing the changed base and re-applying the diffs
(with cvs up -j -j) they are inherited, and we're not
bound to the removed clauses any longer.
@
text
@d5 1
a5 1
/*	$OpenBSD: lst.h,v 1.25 2003/06/03 02:56:11 millert Exp $ */
d25 5
a29 1
 * 3. Neither the name of the University nor the names of its contributors
@

