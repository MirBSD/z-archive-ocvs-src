head	1.1;
branch	1.1.1;
access;
symbols
	tg-mergetmp-mirosx-1:1.1.1.9
	tg-mergefixes-1-branch:1.1.1.9.0.4
	tg-mergefixes-1-base:1.1.1.9
	MIROS_X:1.1.1.9.0.2
	MIROS_X_BASE:1.1.1.9
	tg-mergetmp-3:1.1.1.9
	cvs-200412091955:1.1.1.9
	cvs-200412071730:1.1.1.9
	cvs-200411281330:1.1.1.9
	MIRBSD_XP_MIRPPC:1.1.1.7.0.4
	cvs-200410222040:1.1.1.8
	tg-mergetmp-1:1.1.1.8
	cvs-200410141645:1.1.1.8
	MIRBSD_XP_SPARC_BASE:1.1.1.7
	MIRBSD_XP_SPARC:1.1.1.7.0.2
	cvs-200407041700:1.1.1.7
	MIRBSD_7quater:1.1.1.5
	cvs-200405160640:1.1.1.7
	cvs-200401271800:1.1.1.6
	cvs-200401261630:1.1.1.6
	cvs-200401021645:1.1.1.6
	MIRBSD_7_ALPHA:1.1.1.5.0.6
	MIRBSD_7:1.1.1.5.0.4
	cvs-200312222040:1.1.1.6
	MIRBSD_7ter:1.1.1.5
	MIRBSD_7_DEV:1.1.1.5.0.2
	cvs-200310020700:1.1.1.5
	cvs-200309271030:1.1.1.5
	cvs-200309251530:1.1.1.5
	cvs-200308302005:1.1.1.5
	cvs-200308171200:1.1.1.5
	ctm-3496:1.1.1.5
	ctm-3449:1.1.1.5
	ctm-3437:1.1.1.5
	cvs-200307191805:1.1.1.4
	ctm-3425:1.1.1.4
	cvs-200307091500:1.1.1.4
	cvs-200307081345:1.1.1.3
	cvs-200307072125:1.1.1.3
	ctm-3389:1.1.1.2
	cvs-200306291430:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.1
date	2003.06.29.17.35.37;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.06.29.17.35.37;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2003.07.06.15.49.55;	author tg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2003.07.07.21.27.51;	author tg;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2003.07.09.16.48.28;	author tg;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2003.07.22.15.01.36;	author tg;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2003.12.22.21.12.52;	author tg;	state Exp;
branches;
next	1.1.1.7;

1.1.1.7
date	2004.05.16.08.06.59;	author tg;	state Stab;
branches;
next	1.1.1.8;

1.1.1.8
date	2004.10.14.17.17.16;	author tg;	state Exp;
branches;
next	1.1.1.9;

1.1.1.9
date	2004.11.28.13.40.45;	author tg;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@/*	$OpenBSD: diffdir.c,v 1.15 2003/06/27 20:28:13 tedu Exp $	*/

/*
 * Copyright (C) Caldera International Inc.  2001-2002.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code and documentation must retain the above
 *    copyright notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed or owned by Caldera
 *	International, Inc.
 * 4. Neither the name of Caldera International, Inc. nor the names of other
 *    contributors may be used to endorse or promote products derived from
 *    this software without specific prior written permission.
 *
 * USE OF THE SOFTWARE PROVIDED FOR UNDER THIS LICENSE BY CALDERA
 * INTERNATIONAL, INC. AND CONTRIBUTORS ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL CALDERA INTERNATIONAL, INC. BE LIABLE FOR ANY DIRECT,
 * INDIRECT INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
 * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

#include <sys/types.h>
#include <sys/wait.h>

#include <dirent.h>
#include <errno.h>
#include <fcntl.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>

#include "diff.h"

#if 0
static const char sccsid[] = "@@(#)diffdir.c	4.12 (Berkeley) 4/30/89";
#endif

/*
 * diff - directory comparison
 */
#define	d_flags	d_ino

#define	ONLY	1		/* Only in this directory */
#define	SAME	2		/* Both places and same */
#define	DIFFER	4		/* Both places and different */
#define	DIRECT	8		/* Directory */

struct dir {
	u_long d_ino;
	short d_reclen;
	short d_namlen;
	char *d_entry;
};

int header;
static int dirstatus;		/* exit status from diffdir */
extern int status;
char title[2 * BUFSIZ];
char *etitle;
char *prargs[] = {"pr", "-h", 0, "-f", 0, 0};


static struct dir *setupdir(char *);
static int ascii(int);
static void compare(struct dir *);
static void calldiff(char *);
static void setfile(char **fpp, char **epp, char *file);
static int useless(char *);
static void only(struct dir *dp, int which);
static void scanpr(struct dir *, int, char *, char *, char *, char *, char *);
static int entcmp(const void *, const void *);

void
diffdir(char **argv)
{
	struct dir *dir1, *dir2;
	struct dir *d1, *d2;
	int i, cmp;

	if (opt == D_IFDEF)
		warnx("can't specify -I with directories");
	if (opt == D_EDIT && (sflag || lflag))
		warnx("warning: shouldn't give -s or -l with -e");
	strlcpy(title, "diff ", sizeof title);
	for (i = 1; diffargv[i + 2]; i++) {
		if (!strcmp(diffargv[i], "-"))
			continue;	/* was -S, dont look silly */
		strlcat(title, diffargv[i], sizeof title);
		strlcat(title, " ", sizeof title);
	}
	for (etitle = title; *etitle; etitle++)
		;
	setfile(&file1, &efile1, file1);
	setfile(&file2, &efile2, file2);
	argv[0] = file1;
	argv[1] = file2;
	dir1 = setupdir(file1);
	dir2 = setupdir(file2);
	d1 = dir1;
	d2 = dir2;
	while (d1->d_entry != 0 || d2->d_entry != 0) {
		if (d1->d_entry && useless(d1->d_entry)) {
			d1++;
			continue;
		}
		if (d2->d_entry && useless(d2->d_entry)) {
			d2++;
			continue;
		}
		if (d1->d_entry == 0)
			cmp = 1;
		else if (d2->d_entry == 0)
			cmp = -1;
		else
			cmp = strcmp(d1->d_entry, d2->d_entry);
		if (cmp < 0) {
			if (lflag)
				d1->d_flags |= ONLY;
			else if (opt == 0 || opt == 2)
				only(d1, 1);
			d1++;
			dirstatus |= 1;
		} else if (cmp == 0) {
			compare(d1);
			d1++;
			d2++;
		} else {
			if (lflag)
				d2->d_flags |= ONLY;
			else if (opt == 0 || opt == 2)
				only(d2, 2);
			d2++;
			dirstatus |= 1;
		}
	}
	if (lflag) {
		scanpr(dir1, ONLY, "Only in %.*s", file1, efile1, 0, 0);
		scanpr(dir2, ONLY, "Only in %.*s", file2, efile2, 0, 0);
		scanpr(dir1, SAME, "Common identical files in %.*s and %.*s",
		    file1, efile1, file2, efile2);
		scanpr(dir1, DIFFER, "Binary files which differ in %.*s and %.*s",
		    file1, efile1, file2, efile2);
		scanpr(dir1, DIRECT, "Common subdirectories of %.*s and %.*s",
		    file1, efile1, file2, efile2);
	}
	if (rflag) {
		if (header && lflag)
			printf("\f");
		for (d1 = dir1; d1->d_entry; d1++) {
			if ((d1->d_flags & DIRECT) == 0)
				continue;
			strlcpy(efile1, d1->d_entry,
			    file1 + MAXPATHLEN - efile1);
			strlcpy(efile2, d1->d_entry,
			    file2 + MAXPATHLEN - efile2);
			calldiff(0);
		}
	}
	status = dirstatus;
}

void
setfile(char **fpp, char **epp, char *file)
{
	char *cp;
	size_t len;

	if (*file == '\0')
		file = ".";
	*fpp = emalloc(MAXPATHLEN);
	len = strlcpy(*fpp, file, MAXPATHLEN);
	if (len >= MAXPATHLEN - 1)
		errorx("%s: %s", file, strerror(ENAMETOOLONG));
	cp = *fpp + len - 1;
	if (*cp == '/')
		++cp;
	else {
		*++cp = '/';
		*++cp = '\0';
	}
	*epp = cp;
}

static void
scanpr(struct dir *dp, int test, char *title, char *file1, char *efile1,
    char *file2, char *efile2)
{
	int titled = 0;

	for (; dp->d_entry; dp++) {
		if ((dp->d_flags & test) == 0)
			continue;
		if (titled == 0) {
			if (header == 0)
				header = 1;
			else
				printf("\n");
			printf(title,
			    efile1 - file1 - 1, file1,
			    efile2 - file2 - 1, file2);
			printf(":\n");
			titled = 1;
		}
		printf("\t%s\n", dp->d_entry);
	}
}

void
only(struct dir *dp, int which)
{
	char *file = which == 1 ? file1 : file2;
	char *efile = which == 1 ? efile1 : efile2;

	printf("Only in %.*s: %s\n", (int)(efile - file - 1), file, dp->d_entry);
}

struct dir *
setupdir(char *cp)
{
	struct dir *dp, *ep;
	struct dirent *rp;
	int nitems;
	DIR *dirp;

	dirp = opendir(cp);
	if (dirp == NULL)
		error("%s", cp);
	nitems = 0;
	dp = emalloc(sizeof(struct dir));
	while ((rp = readdir(dirp))) {
		ep = &dp[nitems++];
		ep->d_reclen = rp->d_reclen;
		ep->d_namlen = rp->d_namlen;
		ep->d_entry = 0;
		ep->d_flags = 0;
		if (ep->d_namlen > 0) {
			ep->d_entry = emalloc(ep->d_namlen + 1);
			strlcpy(ep->d_entry, rp->d_name, ep->d_namlen + 1);
		}
		dp = erealloc(dp, (nitems + 1) * sizeof(struct dir));
	}
	dp[nitems].d_entry = 0;	/* delimiter */
	closedir(dirp);
	qsort(dp, nitems, sizeof(struct dir), entcmp);
	return (dp);
}

static int
entcmp(const void *v1, const void *v2)
{
	const struct dir *d1, *d2;

	d1 = v1;
	d2 = v2;
	return (strcmp(d1->d_entry, d2->d_entry));
}

static void
compare(struct dir *dp)
{
	char buf1[BUFSIZ], buf2[BUFSIZ];
	int i, j, f1, f2, fmt1, fmt2;
	struct stat stb1, stb2;

	strlcpy(efile1, dp->d_entry, file1 + MAXPATHLEN - efile1);
	strlcpy(efile2, dp->d_entry, file2 + MAXPATHLEN - efile2);
	f1 = open(file1, 0);
	if (f1 < 0) {
		warn("%s", file1);
		return;
	}
	f2 = open(file2, 0);
	if (f2 < 0) {
		warn("%s", file2);
		close(f1);
		return;
	}
	fstat(f1, &stb1);
	fstat(f2, &stb2);
	fmt1 = stb1.st_mode & S_IFMT;
	fmt2 = stb2.st_mode & S_IFMT;
	if (fmt1 != S_IFREG || fmt2 != S_IFREG) {
		if (fmt1 == fmt2) {
			if (fmt1 != S_IFDIR && stb1.st_rdev == stb2.st_rdev)
				goto same;
			if (fmt1 == S_IFDIR) {
				dp->d_flags = DIRECT;
				if (lflag || opt == D_EDIT)
					goto closem;
				printf("Common subdirectories: %s and %s\n",
				    file1, file2);
				goto closem;
			}
		}
		goto notsame;
	}
	if (stb1.st_size != stb2.st_size)
		goto notsame;
	for (;;) {
		i = read(f1, buf1, BUFSIZ);
		j = read(f2, buf2, BUFSIZ);
		if (i < 0 || j < 0 || i != j)
			goto notsame;
		if (i == 0 && j == 0)
			goto same;
		for (j = 0; j < i; j++)
			if (buf1[j] != buf2[j])
				goto notsame;
	}
same:
	if (sflag == 0)
		goto closem;
	if (lflag)
		dp->d_flags = SAME;
	else
		printf("Files %s and %s are identical\n", file1, file2);
	goto closem;
notsame:
	dirstatus |= 1;
	if (!ascii(f1) || !ascii(f2)) {
		if (lflag)
			dp->d_flags |= DIFFER;
		else if (opt == D_NORMAL || opt == D_CONTEXT || opt == D_UNIFIED)
			printf("Binary files %s and %s differ\n",
			    file1, file2);
		goto closem;
	}
	close(f1);
	close(f2);
	anychange = 1;
	if (lflag)
		calldiff(title);
	else {
		if (opt == D_EDIT) {
			printf("ed - %s << '-*-END-*-'\n", dp->d_entry);
			calldiff(0);
		} else {
			printf("%s%s %s\n", title, file1, file2);
			calldiff(0);
		}
		if (opt == D_EDIT)
			printf("w\nq\n-*-END-*-\n");
	}
	return;
closem:
	close(f1);
	close(f2);
}

static void
calldiff(char *wantpr)
{
	int lstatus, lstatus2, pv[2];
	pid_t pid;

	prargs[2] = wantpr;
	fflush(stdout);
	if (wantpr) {
		snprintf(etitle, title + sizeof title - etitle,
		    "%s %s", file1, file2);
		pipe(pv);
		pid = fork();
		if (pid == -1)
			errorx("No more processes");
		if (pid == 0) {
			close(0);
			dup(pv[0]);
			close(pv[0]);
			close(pv[1]);
			execv(pr + 4, prargs);
			execv(pr, prargs);
			errorx("%s", pr);
		}
	}
	pid = fork();
	if (pid == -1)
		errorx("No more processes");
	if (pid == 0) {
		if (wantpr) {
			close(1);
			dup(pv[1]);
			close(pv[0]);
			close(pv[1]);
		}
		execv(diff + 4, diffargv);
		execv(diff, diffargv);
		error("%s", diff);
	}
	if (wantpr) {
		close(pv[0]);
		close(pv[1]);
	}
	while (wait(&lstatus) != pid)
		continue;
	while (wait(&lstatus2) != -1)
		continue;
	/*
		if ((lstatus >> 8) >= 2)
			done(0);
	*/
	dirstatus |= lstatus >> 8;
}

int
ascii(int f)
{
	char buf[BUFSIZ], *cp;
	int cnt;

	if (aflag)
		return (1);

	lseek(f, (off_t)0, SEEK_SET);
	cnt = read(f, buf, BUFSIZ);
	cp = buf;
	while (--cnt >= 0)
		if (*cp++ & 0200)
			return (0);
	return (1);
}

/*
 * THIS IS CRUDE.
 */
int
useless(char *cp)
{
	if (cp[0] == '.') {
		if (cp[1] == '\0')
			return (1);	/* directory "." */
		if (cp[1] == '.' && cp[2] == '\0')
			return (1);	/* directory ".." */
	}
	if (start && strcmp(start, cp) > 0)
		return (1);
	return (0);
}
@


1.1.1.1
log
@the previous cvs import did not finish due to 'memory fault'
sync with OpenBSD-cvs
@
text
@@


1.1.1.2
log
@Import OpenBSD base system minus kerberos from CTM,
kernel source from CVS right now (no diffs though)
@
text
@d1 1
a1 1
/*	$OpenBSD: diffdir.c,v 1.18 2003/07/06 02:11:12 millert Exp $	*/
a48 1
#include "pathnames.h"
d59 4
a62 1
#define	DIRECT	1		/* Directory */
d71 1
d73 4
a76 1
static char title[2 * BUFSIZ];
d82 1
a82 1
static void calldiff(void);
d86 1
d98 2
a99 2
	if (opt == D_EDIT && sflag)
		warnx("warning: shouldn't give -s with -e");
d107 2
d133 3
a135 2
			if (opt == D_NORMAL || opt == D_CONTEXT ||
			    opt == D_UNIFIED)
d144 3
a146 2
			if (opt == D_NORMAL || opt == D_CONTEXT ||
			    opt == D_UNIFIED)
d152 10
d163 2
d172 1
a172 1
			calldiff();
d200 24
d304 1
a304 1
				if (opt == D_EDIT)
d327 5
a331 1
	if (sflag != 0)
d337 3
a339 1
		if (opt == D_NORMAL || opt == D_CONTEXT || opt == D_UNIFIED)
d347 12
a358 6
	if (opt == D_EDIT) {
		printf("ed - %s << '-*-END-*-'\n", dp->d_entry);
		calldiff();
	} else {
		printf("%s%s %s\n", title, file1, file2);
		calldiff();
a359 2
	if (opt == D_EDIT)
		printf("w\nq\n-*-END-*-\n");
d367 1
a367 1
calldiff(void)
d369 1
a369 1
	int lstatus;
d372 1
d374 17
d395 13
a407 2
		execv(_PATH_DIFF, diffargv);
		error("%s", _PATH_DIFF);
d410 2
@


1.1.1.3
log
@Sync some stuff with OpenBSD
@
text
@d1 1
a1 1
/*	$OpenBSD: diffdir.c,v 1.21 2003/07/06 22:17:21 millert Exp $	*/
d4 2
a5 1
 * Copyright (c) 2003 Todd C. Miller <Todd.Miller@@courtesan.com>
d7 15
a21 3
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
d23 12
a34 11
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 *
 * Sponsored in part by the Defense Advanced Research Projects
 * Agency (DARPA) and Air Force Research Laboratory, Air Force
 * Materiel Command, USAF, under agreement number F39502-99-1-0512.
d37 2
a38 6
#ifndef lint
static const char rcsid[] = "$OpenBSD: diffdir.c,v 1.21 2003/07/06 22:17:21 millert Exp $";
#endif /* not lint */

#include <sys/param.h>
#include <sys/stat.h>
a40 1
#include <err.h>
a42 2
#include <fnmatch.h>
#include <paths.h>
d49 1
d51 3
a53 4
static int dircompare(const void *, const void *);
static int excluded(const char *);
static struct dirent **slurpdir(char *, char **, int);
static void diffit(struct dirent *, char *, size_t, char *, size_t);
d56 1
a56 1
 * Diff directory traveral. Will be called recursively if -r was specified.
d58 1
a58 30
void
diffdir(char *p1, char *p2)
{
	struct dirent **dirp1, **dirp2, **dp1, **dp2;
	struct dirent *dent1, *dent2;
	size_t dirlen1, dirlen2;
	char path1[MAXPATHLEN], path2[MAXPATHLEN];
	char *dirbuf1, *dirbuf2;
	int pos;

	dirlen1 = strlcpy(path1, *p1 ? p1 : ".", sizeof(path1));
	if (dirlen1 >= sizeof(path1) - 1) {
		warnx("%s: %s", p1, strerror(ENAMETOOLONG));
		status = 2;
		return;
	}
	if (path1[dirlen1 - 1] != '/') {
		path1[dirlen1++] = '/';
		path1[dirlen1] = '\0';
	}
	dirlen2 = strlcpy(path2, *p2 ? p2 : ".", sizeof(path2));
	if (dirlen2 >= sizeof(path2) - 1) {
		warnx("%s: %s", p2, strerror(ENAMETOOLONG));
		status = 2;
		return;
	}
	if (path2[dirlen2 - 1] != '/') {
		path2[dirlen2++] = '/';
		path2[dirlen2] = '\0';
	}
d60 1
a60 5
	/* get a list of the entries in each directory */
	dp1 = dirp1 = slurpdir(path1, &dirbuf1, Nflag + Pflag);
	dp2 = dirp2 = slurpdir(path2, &dirbuf2, Nflag);
	if (dirp1 == NULL || dirp2 == NULL)
		return;
d62 19
a80 9
	/*
	 * If we were given a starting point, find it.
	 */
	if (start != NULL) {
		while (*dp1 != NULL && strcmp((*dp1)->d_name, start) < 0)
			dp1++;
		while (*dp2 != NULL && strcmp((*dp2)->d_name, start) < 0)
			dp2++;
	}
d82 51
a132 24
	/*
	 * Iterate through the two directory lists, diffing as we go.
	 */
	while (*dp1 != NULL || *dp2 != NULL) {
		dent1 = *dp1;
		dent2 = *dp2;

		pos = dent1 == NULL ? 1 : dent2 == NULL ? -1 :
		    strcmp(dent1->d_name, dent2->d_name);
		if (pos == 0) {
			/* file exists in both dirs, diff it */
			diffit(dent1, path1, dirlen1, path2, dirlen2);
			dp1++;
			dp2++;
		} else if (pos < 0) {
			/* file only in first dir, only diff if -N */
			if (Nflag)
				diffit(dent1, path1, dirlen1, path2, dirlen2);
			else if (format == D_NORMAL || format == D_CONTEXT ||
			    format == D_UNIFIED || format == D_BRIEF)
				/* XXX GNU diff always prints this XXX */
				printf("Only in %.*s: %s\n", (int)(dirlen1 - 1),
				    path1, dent1->d_name);
			dp1++;
d134 5
a138 9
			/* file only in second dir, only diff if -N or -P */
			if (Nflag || Pflag)
				diffit(dent2, path1, dirlen1, path2, dirlen2);
			else if (format == D_NORMAL || format == D_CONTEXT ||
			    format == D_UNIFIED || format == D_BRIEF)
				/* XXX GNU diff always prints this XXX */
				printf("Only in %.*s: %s\n", (int)(dirlen2 - 1),
				    path2, dent2->d_name);
			dp2++;
d141 10
a150 8

	if (dirbuf1 != NULL) {
		free(dirp1);
		free(dirbuf1);
	}
	if (dirbuf2 != NULL) {
		free(dirp2);
		free(dirbuf2);
d152 1
d155 2
a156 8
/*
 * Read in a whole directory's worth of struct dirents, culling
 * out the "excluded" ones.
 * Returns an array of struct dirent *'s that point into the buffer
 * returned via bufp.  Caller is responsible for free()ing both of these.
 */
static struct dirent **
slurpdir(char *path, char **bufp, int enoentok)
d158 2
a159 18
	char *buf, *ebuf, *cp;
	size_t bufsize;
	long base;
	int fd, nbytes, entries;
	struct stat sb;
	struct dirent **dirlist, *dp;

	*bufp = NULL;
	if ((fd = open(path, O_RDONLY, 0644)) == -1) {
		static struct dirent *dummy;

		if (!enoentok || errno != ENOENT) {
			warn("%s", path);
			return (NULL);
		}
		return (&dummy);
	}
	fstat(fd, &sb);
d161 12
a172 10
	bufsize = sb.st_size;
	if (bufsize < sb.st_blksize)
		bufsize = sb.st_blksize;
	buf = emalloc(bufsize);

	nbytes = getdirentries(fd, buf, bufsize, &base);
	if (nbytes <= 0) {
		free(buf);
		warn("%s", path);
		return (NULL);
d174 2
a175 2
	ebuf = buf + nbytes;
	close(fd);
d177 5
a181 24
	/*
	 * We now have all the directory entries in our buffer.
	 * However, in order to easily sort them we need to convert
	 * the buffer into an array.
	 */
	for (entries = 0, cp = buf; cp < ebuf; ) {
		dp = (struct dirent *)cp;
		if (dp->d_fileno != 0 && dp->d_type != DT_WHT)
			entries++;
		if (dp->d_reclen <= 0)
			break;
		cp += dp->d_reclen;
	}
	dirlist = emalloc(sizeof(struct dirent *) * (entries + 1));
	for (entries = 0, cp = buf; cp < ebuf; ) {
		dp = (struct dirent *)cp;
		if (dp->d_fileno != 0 && dp->d_type != DT_WHT &&
		    !excluded(dp->d_name))
			dirlist[entries++] = dp;
		if (dp->d_reclen <= 0)
			break;
		cp += dp->d_reclen;
	}
	dirlist[entries] = NULL;
d183 2
a184 1
	qsort(dirlist, entries, sizeof(struct dir *), dircompare);
d186 29
a214 2
	*bufp = buf;
	return (dirlist);
a216 3
/*
 * Compare d_name in two dirent structures; for qsort(3).
 */
d218 1
a218 1
dircompare(const void *vp1, const void *vp2)
d220 1
a220 2
	struct dirent *dp1 = *((struct dirent **) vp1);
	struct dirent *dp2 = *((struct dirent **) vp2);
d222 3
a224 1
	return (strcmp(dp1->d_name, dp2->d_name));
a226 3
/*
 * Do the actual diff by calling either diffreg() or diffdir().
 */
d228 1
a228 1
diffit(struct dirent *dp, char *path1, size_t plen1, char *path2, size_t plen2)
d230 33
a262 7
	int flags = D_HEADER;

	strlcpy(path1 + plen1, dp->d_name, MAXPATHLEN - plen1);
	if (stat(path1, &stb1) != 0) {
		if (!(Nflag || Pflag) || errno != ENOENT) {
			warn("%s", path1);
			return;
d264 1
a264 2
		flags |= D_EMPTY1;
		memset(&stb1, 0, sizeof(stb1));
d266 42
d309 13
a321 21
	strlcpy(path2 + plen2, dp->d_name, MAXPATHLEN - plen2);
	if (stat(path2, &stb2) != 0) {
		if (!Nflag || errno != ENOENT) {
			warn("%s", path2);
			return;
		}
		flags |= D_EMPTY2;
		memset(&stb2, 0, sizeof(stb2));
		stb2.st_mode = stb1.st_mode;
	}
	if (stb1.st_mode == 0)
		stb1.st_mode = stb2.st_mode;

	if (S_ISDIR(stb1.st_mode) && S_ISDIR(stb2.st_mode)) {
		if (rflag)
			diffdir(path1, path2);
		else if (format != D_EDIT)
			/* XXX GNU diff always prints this for dirs XXX */
			printf("Common subdirectories: %s and %s\n",
			    path1, path2);
		return;
d323 7
a329 1
	diffreg(path1, path2, flags);
d332 2
a333 5
/*
 * Exclude the given directory entry?
 */
static int
excluded(const char *entry)
d335 2
a336 1
	struct excludes *excl;
d338 1
a338 3
	/* always skip "." and ".." */
	if (entry[0] == '.' &&
	    (entry[1] == '\0' || (entry[1] == '.' && entry[2] == '\0')))
d341 8
a348 4
	/* check excludes list */
	for (excl = excludes_list; excl != NULL; excl = excl->next)
		if (fnmatch(excl->pattern, entry, FNM_PATHNAME) == 0)
			return (1);
d350 14
@


1.1.1.4
log
@Bring the entire base system and ports tree in sync with OpenBSD
@
text
@d1 1
a1 1
/*	$OpenBSD: diffdir.c,v 1.22 2003/07/09 00:07:44 millert Exp $	*/
d24 1
a24 1
static const char rcsid[] = "$OpenBSD: diffdir.c,v 1.22 2003/07/09 00:07:44 millert Exp $";
a47 2
#define d_status	d_type		/* we need to store status for -l */

a115 2
			else if (lflag)
				dent1->d_status |= D_ONLY;
a125 2
			else if (lflag)
				dent2->d_status |= D_ONLY;
a133 13
	if (lflag) {
		path1[dirlen1 - 1] = '\0';
		path2[dirlen2 - 1] = '\0';
		for (dp1 = dirp1; (dent1 = *dp1) != NULL; dp1++) {
			print_status(dent1->d_status, path1, path2,
			    dent1->d_name);
		}
		for (dp2 = dirp2; (dent2 = *dp2) != NULL; dp2++) {
			if (dent2->d_status == D_ONLY)
				print_status(dent2->d_status, path2, NULL,
				    dent2->d_name);
		}
	}
d204 1
a204 2
		    !excluded(dp->d_name)) {
			dp->d_status = 0;
a205 1
		}
a263 2
		else if (lflag)
			dp->d_status |= D_COMMON;
d270 1
a270 1
	dp->d_status = diffreg(path1, path2, flags);
@


1.1.1.5
log
@Sync to OpenBSD 3.3-current
@
text
@d1 1
a1 1
/*	$OpenBSD: diffdir.c,v 1.24 2003/07/21 23:28:00 millert Exp $	*/
d24 1
a24 1
static const char rcsid[] = "$OpenBSD: diffdir.c,v 1.24 2003/07/21 23:28:00 millert Exp $";
d120 3
a122 1
			else
d132 3
a134 1
			else
d141 2
a142 2
		path1[dirlen1] = '\0';
		path2[dirlen2] = '\0';
d287 2
a288 1
		else
a293 2
	if (!lflag)
		print_status(dp->d_status, path1, path2, NULL);
@


1.1.1.6
log
@Time to import OpenBSD once again. Expect breakage.
@
text
@d1 1
a1 1
/*	$OpenBSD: diffdir.c,v 1.26 2003/11/09 20:13:57 otto Exp $	*/
d24 1
a24 1
static const char rcsid[] = "$OpenBSD: diffdir.c,v 1.26 2003/11/09 20:13:57 otto Exp $";
d51 1
a51 1
 * Diff directory traversal. Will be called recursively if -r was specified.
d121 2
a122 1
				print_only(path1, dirlen1, dent1->d_name);
d131 2
a132 1
				print_only(path2, dirlen2, dent2->d_name);
@


1.1.1.7
log
@large-scale import of OpenBSD 3.5-current source base including many fixes
note: from now, we will not be binary compatible with OpenBSD apps any
longer (due to syscall numbering differences); both an OpenBSD compat and
a conversion tool for old MirOS #7 apps will be delivered later.

The src/ tree is locked from now.
@
text
@d1 1
a1 1
/*	$OpenBSD: diffdir.c,v 1.27 2004/03/16 00:40:34 millert Exp $	*/
d24 1
a24 1
static const char rcsid[] = "$OpenBSD: diffdir.c,v 1.27 2004/03/16 00:40:34 millert Exp $";
d286 1
a286 6
	if (!S_ISREG(stb1.st_mode) && !S_ISDIR(stb1.st_mode))
		dp->d_status = D_SKIPPED1;
	else if (!S_ISREG(stb2.st_mode) && !S_ISDIR(stb2.st_mode))
		dp->d_status = D_SKIPPED2;
	else
		dp->d_status = diffreg(path1, path2, flags);
@


1.1.1.8
log
@updates for diff
@
text
@d1 1
a1 1
/*	$OpenBSD: diffdir.c,v 1.28 2004/10/02 18:13:24 millert Exp $	*/
d24 1
a24 1
static const char rcsid[] = "$OpenBSD: diffdir.c,v 1.28 2004/10/02 18:13:24 millert Exp $";
d186 12
a197 20
	bufsize = 0;
	ebuf = buf = NULL;
	do {
		bufsize += roundup(MAX(sb.st_size, sb.st_blksize),
		    sizeof(struct dirent));
		if (buf == NULL)
		    buf = ebuf = emalloc(bufsize);
		else {
		    cp = erealloc(buf, bufsize);
		    ebuf = cp + (ebuf - buf);
		    buf = cp;
		}
		nbytes = getdirentries(fd, ebuf, bufsize, &base);
		if (nbytes == -1) {
			free(buf);
			warn("%s", path);
			return (NULL);
		}
		ebuf += nbytes;
	} while (nbytes == bufsize);
@


1.1.1.9
log
@some more fixes from otto@@openbsd, good work
@
text
@d1 1
a1 1
/*	$OpenBSD: diffdir.c,v 1.29 2004/11/26 20:09:56 otto Exp $	*/
d24 1
a24 1
static const char rcsid[] = "$OpenBSD: diffdir.c,v 1.29 2004/11/26 20:09:56 otto Exp $";
d168 1
a168 1
	size_t bufsize, have, need;
d184 1
a184 10
	if (fstat(fd, &sb) == -1) {
		warn("%s", path);
		close(fd);
		return (NULL);
	}

	need = roundup(sb.st_blksize, sizeof(struct dirent));
	have = bufsize = roundup(MAX(sb.st_size, sb.st_blksize),
	    sizeof(struct dirent)) + need;
	ebuf = buf = emalloc(bufsize);
d186 2
d189 5
a193 3
		if (have < need) {
		    bufsize += need;
		    have += need;
d198 1
a198 1
		nbytes = getdirentries(fd, ebuf, have, &base);
d200 1
a201 2
			free(buf);
			close(fd);
d205 1
a205 2
		have -= nbytes;
	} while (nbytes != 0);
d235 1
a235 1
	qsort(dirlist, entries, sizeof(struct dirent *), dircompare);
@


