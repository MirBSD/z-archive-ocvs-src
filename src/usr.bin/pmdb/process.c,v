head	1.1;
branch	1.1.1;
access;
symbols
	tg-mergetmp-mirosx-1:1.1.1.4
	tg-mergefixes-1-branch:1.1.1.4.0.14
	tg-mergefixes-1-base:1.1.1.4
	MIROS_X:1.1.1.4.0.12
	MIROS_X_BASE:1.1.1.4
	tg-mergetmp-3:1.1.1.4
	MIRBSD_XP_MIRPPC:1.1.1.4.0.10
	MIRBSD_XP_SPARC_BASE:1.1.1.4
	MIRBSD_XP_SPARC:1.1.1.4.0.8
	MIRBSD_7quater:1.1.1.4
	cvs-200405160640:1.1.1.4
	cvs-200401271800:1.1.1.4
	cvs-200401261630:1.1.1.4
	cvs-200401021645:1.1.1.4
	MIRBSD_7_ALPHA:1.1.1.4.0.6
	MIRBSD_7:1.1.1.4.0.4
	cvs-200312222040:1.1.1.4
	MIRBSD_7ter:1.1.1.4
	MIRBSD_7_DEV:1.1.1.4.0.2
	cvs-200310020700:1.1.1.4
	cvs-200309271030:1.1.1.4
	cvs-200309251530:1.1.1.4
	cvs-200308302005:1.1.1.4
	cvs-200308171200:1.1.1.3
	ctm-3496:1.1.1.3
	ctm-3449:1.1.1.2
	ctm-3437:1.1.1.2
	cvs-200307191805:1.1.1.2
	ctm-3425:1.1.1.2
	cvs-200307091500:1.1.1.2
	ctm-3389:1.1.1.2
	cvs-200306291430:1.1.1.2
	ctm-3341:1.1.1.2
	MIRBSD_5:1.1.1.2
	cvs-200306082100:1.1.1.2
	ctm-3316:1.1.1.2
	ctm-3272:1.1.1.1
	ctm-3264:1.1.1.1
	cvs-200305071630:1.1.1.1
	MIRBSD_4:1.1.1.1
	ctm-3203:1.1.1.1
	cvs-20030410-1130:1.1.1.1
	ctm-3155:1.1.1.1
	ctm-3132:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.1
date	2003.03.22.17.53.14;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.03.22.17.53.14;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2003.06.05.17.43.48;	author tg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2003.08.11.18.45.29;	author tg;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2003.08.30.23.36.28;	author tg;	state Stab;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@/*	$OpenBSD: process.c,v 1.10 2002/08/08 18:27:57 art Exp $	*/
/*
 * Copyright (c) 2002 Artur Grabowski <art@@openbsd.org>
 * All rights reserved. 
 *
 * Redistribution and use in source and binary forms, with or without 
 * modification, are permitted provided that the following conditions 
 * are met: 
 *
 * 1. Redistributions of source code must retain the above copyright 
 *    notice, this list of conditions and the following disclaimer. 
 * 2. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission. 
 *
 * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES,
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
 * AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
 * THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL  DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. 
 */

#include <sys/types.h>
#include <sys/ptrace.h>
#include <sys/wait.h>
#include <sys/stat.h>

#include <machine/reg.h>

#include <err.h>
#include <errno.h>
#include <signal.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>

#include "pmdb.h"
#include "core.h"
#include "symbol.h"
#include "break.h"

int
process_load(struct pstate *ps)
{
	if (ps->ps_state == LOADED)
		return (0);

	if (access(*ps->ps_argv, R_OK|X_OK) < 0) {
		fprintf(stderr, "%s: %s.\n", *ps->ps_argv,
		    strerror(errno));
		return (0);
	}

	if (stat(ps->ps_argv[0], &(ps->exec_stat)) < 0)
		err(1, "stat()");

	if ((ps->ps_flags & PSF_SYMBOLS) == 0) {
		sym_init_exec(ps, ps->ps_argv[0]);
		ps->ps_flags |= PSF_SYMBOLS;
	}

	ps->ps_state = LOADED;

	if (ps->ps_pid != 0) {
		/* attach to an already running process */
		if (ptrace(PT_ATTACH, ps->ps_pid, (caddr_t) 0, 0) < 0)
			err(1, "failed to ptrace process");
		ps->ps_state = STOPPED;
		ps->ps_flags |= PSF_ATCH;
	}

	return (0);
}


int
process_run(struct pstate *ps)
{
	int status;

	if ((ps->ps_state == RUNNING) || (ps->ps_state == STOPPED)) {
		warnx("process is already running");
		return 0;
	}

	switch (ps->ps_pid = fork()) {
	case 0:
		if (ptrace(PT_TRACE_ME, getpid(), NULL, 0) != 0)
			err(1, "ptrace(PT_TRACE_ME)");
		execvp(*ps->ps_argv, ps->ps_argv);
		err(1, "exec");
		/* NOTREACHED */
	case -1:
		err(1, "fork");
		/* NOTREACHED */
	default:
		warnx("process started with PID %d", ps->ps_pid);
		break;
	}

	ps->ps_state = LOADED;

	if (wait(&status) == 0)
		err(1, "wait");

	return (0);
}


int
process_kill(struct pstate *ps)
{
	switch(ps->ps_state) {
	case RUNNING:
	case STOPPED:
		if (ptrace(PT_KILL, ps->ps_pid, NULL, 0) != 0)
			err(1, "ptrace(PT_KILL)");
		return (1);
	default:
		return (0);
	}
}

int
process_read(struct pstate *ps, off_t from, void *to, size_t size)
{
	struct ptrace_io_desc piod;

	if (((ps->ps_state == NONE) || (ps->ps_state == LOADED) ||
	    (ps->ps_state == TERMINATED)) && (ps->ps_flags & PSF_CORE)) {
		return core_read(ps, from, to, size);
	} else {
		piod.piod_op = PIOD_READ_D;
		piod.piod_offs = (void *)(long)from;
		piod.piod_addr = to;
		piod.piod_len = size;

		return (ptrace(PT_IO, ps->ps_pid, (caddr_t)&piod, 0));
	}
}

int
process_write(struct pstate *ps, off_t to, void *from, size_t size)
{
	struct ptrace_io_desc piod;

	if ((ps->ps_state == NONE) && (ps->ps_flags & PSF_CORE)) {
		return core_write(ps, to, from, size);
	} else {
		piod.piod_op = PIOD_WRITE_D;
		piod.piod_offs = (void *)(long)to;
		piod.piod_addr = from;
		piod.piod_len = size;

		return (ptrace(PT_IO, ps->ps_pid, (caddr_t)&piod, 0));
	}
}

int
process_getregs(struct pstate *ps, struct reg *r)
{

	if (ps->ps_flags & PSF_CORE) {
		memcpy(r, ps->ps_core->regs, sizeof(*r));

		return (0);
	}

	return (ptrace(PT_GETREGS, ps->ps_pid, (caddr_t)r, 0));
}

int
cmd_process_kill(int argc, char **argv, void *arg)
{
	struct pstate *ps = arg;

	process_kill(ps);

	return (1);
}

int
process_bkpt_main(struct pstate *ps, void *arg)
{
	sym_update(ps);

	return (BKPT_DEL_CONT);
}

int
cmd_process_run(int argc, char **argv, void *arg)
{
	struct pstate *ps = arg;

	if (ps->ps_state == NONE) {
		reg main_addr;

		process_load(ps);
		if (sym_lookup(ps, "main", &main_addr))
			warnx("no main");
		else if (bkpt_add_cb(ps, main_addr, process_bkpt_main, NULL))
			warn("no bkpt at main 0x%lx", main_addr);
	}

	if (ps->ps_state != LOADED) {
		fprintf(stderr, "Process already running.\n");
		return (0);
	}

	process_run(ps);
	/*
	 * XXX - there isn't really any difference between STOPPED and
	 * LOADED, we should probably get rid of one.
	 */
	ps->ps_state = STOPPED;
	ps->ps_signum = 0;

	return (cmd_process_cont(argc, argv, arg));
}

int
cmd_process_cont(int argc, char **argv, void *arg)
{
	struct pstate *ps = arg;
	int signum;
	int req = (ps->ps_flags & PSF_STEP) ? PT_STEP : PT_CONTINUE;

	if (ps->ps_state != STOPPED) {
		fprintf(stderr, "Process not loaded and stopped %d\n",
		    ps->ps_state);
		return (0);
	}

	/* Catch SIGINT and SIGTRAP, pass all other signals. */
	switch (ps->ps_signum) {
	case SIGINT:
	case SIGTRAP:
		signum = 0;
		break;
	default:
		signum = ps->ps_signum;
		break;
	}

	if (ptrace(req, ps->ps_pid, (caddr_t)ps->ps_npc, signum) != 0) {
		err(1, "ptrace(%s)", req == PT_STEP ? "PT_STEP":"PT_CONTINUE");
	}

	ps->ps_state = RUNNING;
	ps->ps_npc = 1;

	return (1);
}

int
cmd_process_setenv(int argc, char **argv, void *arg)
{
	if (setenv(argv[1], argv[2], 1))
		err(1, "setenv");

	return (0);
}
@


1.1.1.1
log
@Import OpenBSD 3.3 source repository from CTM 3132 the first time
This opens an OpenBSD-mirabile (aka MirBSD) repository.

### MirBSD is:
# Copyright (c) 1982-2003 by Thorsten "mirabile" Glaser <x86@@ePost.de>
# Copyright © 1968-2003  The authors of And contributors to UNIX®, the
#       C Language, BSD/Berkeley Unix; 386BSD, NetBSD 1.1 and OpenBSD.
#
# Anyone who obtained a copy of this work is hereby permitted to freely use,
# distribute, modify, merge, sublicence, give away or sell it as long as the
# authors are given due credit and the following notice is retained:
#
# This work is provided "as is", with no explicit or implicit warranty what-
# soever. Use it only at your own risk. In no event may an author or contri-
# butor be held liable for any damage, directly or indirectly, that origina-
# ted through or is caused by creation or modification of this work.

MirBSD is my private tree. MirBSD does not differ very much from OpenBSD
and intentionally tracks OpenBSD. That's why it _is_ OpenBSD, just not the
official one. It's like with DarrenBSD.

At time of this writing, no advertising for MirBSD must be done,
because the advertising clause has not yet been sorted out.

http://templeofhate.com/tglaser/MirBSD/index.php
@
text
@@


1.1.1.2
log
@Import latest OpenBSD CVS tree by CTM in order
to sync the base system and ports tree with Them.

This includes the recent licence changes as well - by
importing the changed base and re-applying the diffs
(with cvs up -j -j) they are inherited, and we're not
bound to the removed clauses any longer.
@
text
@d1 1
a1 1
/*	$OpenBSD: process.c,v 1.11 2003/05/30 18:03:01 miod Exp $	*/
d56 1
a56 1
		return (1);
d203 1
a203 3
		if (process_load(ps) != 0)
			return (0);

@


1.1.1.3
log
@Import the complete OpenBSD source tree (base system)
as of CTM delta 3496 (roughly 1200 UTC today) into the
vendor branch.
Attention: this is a big update. Don't even try to
build this system, OpenBSD 3.4-beta, yet on your own.
@
text
@d1 1
a1 1
/*	$OpenBSD: process.c,v 1.12 2003/08/02 20:38:38 mickey Exp $	*/
d143 1
a143 2
		return (ptrace(PT_IO, ps->ps_pid, (caddr_t)&piod, 0) < 0?
		    -1 : piod.piod_len);
d160 1
a160 2
		return (ptrace(PT_IO, ps->ps_pid, (caddr_t)&piod, 0) < 0?
		    -1 : piod.piod_len);
@


1.1.1.4
log
@Synchronize with OpenBSD 3.4-beta
@
text
@d1 1
a1 1
/*	$OpenBSD: process.c,v 1.13 2003/08/18 17:55:57 jfb Exp $	*/
a76 31
	return (0);
}


int
process_setargv(struct pstate *ps, int argc, char **argv)
{
	int i;

	if (ps->ps_argv != NULL) {
		for (i = 0; i < ps->ps_argc; i++)
			free(ps->ps_argv[i]);
		free(ps->ps_argv);
	}

	ps->ps_argv = (char **)calloc((argc + 1), sizeof(char *));
	if (ps->ps_argv == NULL) {
		warn("failed to allocate argument vector");
		return (-1);
	}

	ps->ps_argc = argc;
	for (i = 0; i < argc; i++) {
		ps->ps_argv[i] = strdup(argv[i]);
		if (ps->ps_argv[i] == NULL) {
			warn("failed to copy argument");
			return (-1);
		}
	}

	ps->ps_argv[i] = NULL;
@


