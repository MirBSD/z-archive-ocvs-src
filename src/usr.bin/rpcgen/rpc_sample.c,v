head	1.1;
branch	1.1.1;
access;
symbols
	tg-mergetmp-mirosx-1:1.1.1.2
	tg-mergefixes-1-branch:1.1.1.2.0.14
	tg-mergefixes-1-base:1.1.1.2
	MIROS_X:1.1.1.2.0.12
	MIROS_X_BASE:1.1.1.2
	tg-mergetmp-3:1.1.1.2
	MIRBSD_XP_MIRPPC:1.1.1.2.0.10
	MIRBSD_XP_SPARC_BASE:1.1.1.2
	MIRBSD_XP_SPARC:1.1.1.2.0.8
	MIRBSD_7quater:1.1.1.2
	cvs-200405160640:1.1.1.2
	cvs-200401271800:1.1.1.2
	cvs-200401261630:1.1.1.2
	cvs-200401021645:1.1.1.2
	MIRBSD_7_ALPHA:1.1.1.2.0.6
	MIRBSD_7:1.1.1.2.0.4
	cvs-200312222040:1.1.1.2
	MIRBSD_7ter:1.1.1.2
	MIRBSD_7_DEV:1.1.1.2.0.2
	cvs-200310020700:1.1.1.2
	cvs-200309271030:1.1.1.2
	cvs-200309251530:1.1.1.2
	cvs-200308302005:1.1.1.2
	cvs-200308171200:1.1.1.2
	ctm-3496:1.1.1.2
	ctm-3449:1.1.1.2
	ctm-3437:1.1.1.2
	cvs-200307191805:1.1.1.2
	ctm-3425:1.1.1.2
	cvs-200307091500:1.1.1.2
	ctm-3389:1.1.1.1
	cvs-200306291430:1.1.1.1
	ctm-3341:1.1.1.1
	MIRBSD_5:1.1.1.1
	cvs-200306082100:1.1.1.1
	ctm-3316:1.1.1.1
	ctm-3272:1.1.1.1
	ctm-3264:1.1.1.1
	cvs-200305071630:1.1.1.1
	MIRBSD_4:1.1.1.1
	ctm-3203:1.1.1.1
	cvs-20030410-1130:1.1.1.1
	ctm-3155:1.1.1.1
	ctm-3132:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.1
date	2003.03.22.17.53.15;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.03.22.17.53.15;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2003.07.09.16.49.45;	author tg;	state Stab;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@/*	$OpenBSD: rpc_sample.c,v 1.13 2002/07/05 05:39:42 deraadt Exp $	*/
/*	$NetBSD: rpc_sample.c,v 1.2 1995/06/11 21:50:01 pk Exp $	*/
/*
 * Sun RPC is a product of Sun Microsystems, Inc. and is provided for
 * unrestricted use provided that this legend is included on all tape
 * media and as a part of the software program in whole or part.  Users
 * may copy or modify Sun RPC without charge, but are not authorized
 * to license or distribute it to anyone else except as part of a product or
 * program developed by the user or with the express written consent of
 * Sun Microsystems, Inc.
 *
 * SUN RPC IS PROVIDED AS IS WITH NO WARRANTIES OF ANY KIND INCLUDING THE
 * WARRANTIES OF DESIGN, MERCHANTIBILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE, OR ARISING FROM A COURSE OF DEALING, USAGE OR TRADE PRACTICE.
 *
 * Sun RPC is provided with no support and without any obligation on the
 * part of Sun Microsystems, Inc. to assist in its use, correction,
 * modification or enhancement.
 *
 * SUN MICROSYSTEMS, INC. SHALL HAVE NO LIABILITY WITH RESPECT TO THE
 * INFRINGEMENT OF COPYRIGHTS, TRADE SECRETS OR ANY PATENTS BY SUN RPC
 * OR ANY PART THEREOF.
 *
 * In no event will Sun Microsystems, Inc. be liable for any lost revenue
 * or profits or other special, indirect and consequential damages, even if
 * Sun has been advised of the possibility of such damages.
 *
 * Sun Microsystems, Inc.
 * 2550 Garcia Avenue
 * Mountain View, California  94043
 */

#ifndef lint
static char sccsid[] = "@@(#)rpc_sample.c  1.1  90/08/30  (C) 1987 SMI";

#endif

/*
 * rpc_sample.c, Sample client-server code outputter for the RPC protocol compiler
 */

#include <sys/cdefs.h>
#include <stdio.h>
#include <string.h>
#include "rpc_parse.h"
#include "rpc_util.h"

static char RQSTP[] = "rqstp";

void printarglist();
static void write_sample_client(char *, version_list *);
static void write_sample_server(definition *);
static void return_type(proc_list *);

void
write_sample_svc(def)
	definition *def;
{

	if (def->def_kind != DEF_PROGRAM)
		return;
	write_sample_server(def);
}


int
write_sample_clnt(def)
	definition *def;
{
	version_list *vp;
	int count = 0;

	if (def->def_kind != DEF_PROGRAM)
		return(0);
	/* generate sample code for each version */
	for (vp = def->def.pr.versions; vp != NULL; vp = vp->next) {
		write_sample_client(def->def_name, vp);
		++count;
	}
	return(count);
}


static void
write_sample_client(program_name, vp)
	char *program_name;
	version_list *vp;
{
	proc_list *proc;
	int i;
	decl_list *l;

	fprintf(fout, "\n\nvoid\n");
	pvname(program_name, vp->vers_num);
	if (Cflag)
		fprintf(fout,"(char *host)\n{\n");
	else
		fprintf(fout, "(host)\nchar *host;\n{\n");
	fprintf(fout, "\tCLIENT *clnt;\n");

	i = 0;
	for (proc = vp->procs; proc != NULL; proc = proc->next) {
		fprintf(fout, "\t");
		ptype(proc->res_prefix, proc->res_type, 1);
		fprintf(fout, " *result_%d;\n",++i);
		/* print out declarations for arguments */
		if (proc->arg_num < 2 && !newstyle) {
			fprintf(fout, "\t");
			if (!streq(proc->args.decls->decl.type, "void"))
				ptype(proc->args.decls->decl.prefix,
				    proc->args.decls->decl.type, 1);
			else
				fprintf(fout, "char *"); /* cannot have "void" type */
			fprintf(fout, " ");
			pvname(proc->proc_name, vp->vers_num);
			fprintf(fout, "_arg;\n");
		} else if (!streq(proc->args.decls->decl.type, "void")) {
			for (l = proc->args.decls; l != NULL; l = l->next) {
				fprintf(fout, "\t");
				ptype(l->decl.prefix, l->decl.type, 1);
				fprintf(fout, " ");
				pvname(proc->proc_name, vp->vers_num);
				fprintf(fout, "_%s;\n", l->decl.name);
		/*		pdeclaration(proc->args.argname, &l->decl, 1, ";\n");*/
			}
		}
	}

	/* generate creation of client handle */
	fprintf(fout, "\tclnt = clnt_create(host, %s, %s, \"%s\");\n",
	    program_name, vp->vers_name, tirpcflag? "netpath" : "udp");
	fprintf(fout, "\tif (clnt == NULL) {\n");
	fprintf(fout, "\t\tclnt_pcreateerror(host);\n");
	fprintf(fout, "\t\texit(1);\n\t}\n");

	/* generate calls to procedures */
	i = 0;
	for (proc = vp->procs; proc != NULL; proc = proc->next) {
		fprintf(fout, "\tresult_%d = ",++i);
		pvname(proc->proc_name, vp->vers_num);
		if (proc->arg_num < 2 && !newstyle) {
			fprintf(fout, "(");
			if (streq(proc->args.decls->decl.type, "void"))
				fprintf(fout, "(void*)");
			fprintf(fout, "&");
			pvname(proc->proc_name, vp->vers_num);
			fprintf(fout, "_arg, clnt);\n");
		} else if (streq(proc->args.decls->decl.type, "void")) {
			fprintf(fout, "(clnt);\n");
		} else {
			fprintf(fout, "(");
			for (l = proc->args.decls;	l != NULL; l = l->next) {
				pvname(proc->proc_name, vp->vers_num);
				fprintf(fout, "_%s, ", l->decl.name);
			}
			fprintf(fout, "clnt);\n");
		}
		fprintf(fout, "\tif (result_%d == NULL) {\n", i);
		fprintf(fout, "\t\tclnt_perror(clnt, \"call failed:\");\n");
		fprintf(fout, "\t}\n");
	}

	fprintf(fout, "\tclnt_destroy(clnt);\n");
	fprintf(fout, "}\n");
}

static void
write_sample_server(def)
	definition *def;
{
	version_list *vp;
	proc_list *proc;

	for (vp = def->def.pr.versions; vp != NULL; vp = vp->next) {
		for (proc = vp->procs; proc != NULL; proc = proc->next) {
			fprintf(fout, "\n");
/*			if (Cflag)
				fprintf(fout, "extern \"C\"{\n");
*/
			return_type(proc);
			fprintf(fout, "* \n");
			pvname_svc(proc->proc_name, vp->vers_num);
			printarglist(proc, RQSTP, "struct svc_req *");

			fprintf(fout, "{\n");
			fprintf(fout, "\n\tstatic ");
			if (!streq(proc->res_type, "void"))
				return_type(proc);
			else
				fprintf(fout, "char*");  /* cannot have void type */
			fprintf(fout, " result;\n");
			fprintf(fout,
			    "\n\t/*\n\t * insert server code here\n\t */\n\n");
			if (!streq(proc->res_type, "void"))
				fprintf(fout, "\treturn(&result);\n}\n");
			else  /* cast back to void * */
				fprintf(fout, "\treturn((void*) &result);\n}\n");
/*			if (Cflag)
				fprintf(fout, "}\n");
*/
		}
	}
}

static void
return_type(plist)
	proc_list *plist;
{
	ptype(plist->res_prefix, plist->res_type, 1);
}

void
add_sample_msg()
{
	fprintf(fout, "/*\n");
	fprintf(fout, " * This is sample code generated by rpcgen.\n");
	fprintf(fout, " * These are only templates and you can use them\n");
	fprintf(fout, " * as a guideline for developing your own functions.\n");
	fprintf(fout, " */\n\n");
}

void
write_sample_clnt_main()
{
	list *l;
	definition *def;
	version_list *vp;

	fprintf(fout, "\n\n");
	if (Cflag)
		fprintf(fout,"main(int argc, char *argv[])\n{\n");
	else
		fprintf(fout, "main(argc, argv)\nint argc;\nchar *argv[];\n{\n");

	fprintf(fout, "\tchar *host;");
	fprintf(fout, "\n\n\tif (argc < 2) {");
	fprintf(fout, "\n\t\tprintf(\"usage: %%s server_host\\n\", argv[0]);\n");
	fprintf(fout, "\t\texit(1);\n\t}");
	fprintf(fout, "\n\thost = argv[1];\n");

	for (l = defined; l != NULL; l = l->next) {
		def = l->val;
		if (def->def_kind != DEF_PROGRAM)
			continue;
		for (vp = def->def.pr.versions; vp != NULL; vp = vp->next) {
			fprintf(fout, "\t");
			pvname(def->def_name, vp->vers_num);
			fprintf(fout, "(host);\n");
		}
	}
	fprintf(fout, "}\n");
}
@


1.1.1.1
log
@Import OpenBSD 3.3 source repository from CTM 3132 the first time
This opens an OpenBSD-mirabile (aka MirBSD) repository.

### MirBSD is:
# Copyright (c) 1982-2003 by Thorsten "mirabile" Glaser <x86@@ePost.de>
# Copyright © 1968-2003  The authors of And contributors to UNIX®, the
#       C Language, BSD/Berkeley Unix; 386BSD, NetBSD 1.1 and OpenBSD.
#
# Anyone who obtained a copy of this work is hereby permitted to freely use,
# distribute, modify, merge, sublicence, give away or sell it as long as the
# authors are given due credit and the following notice is retained:
#
# This work is provided "as is", with no explicit or implicit warranty what-
# soever. Use it only at your own risk. In no event may an author or contri-
# butor be held liable for any damage, directly or indirectly, that origina-
# ted through or is caused by creation or modification of this work.

MirBSD is my private tree. MirBSD does not differ very much from OpenBSD
and intentionally tracks OpenBSD. That's why it _is_ OpenBSD, just not the
official one. It's like with DarrenBSD.

At time of this writing, no advertising for MirBSD must be done,
because the advertising clause has not yet been sorted out.

http://templeofhate.com/tglaser/MirBSD/index.php
@
text
@@


1.1.1.2
log
@Bring the entire base system and ports tree in sync with OpenBSD
@
text
@d1 1
a1 1
/*	$OpenBSD: rpc_sample.c,v 1.14 2003/07/09 03:35:21 deraadt Exp $	*/
d50 1
d213 1
a213 1
add_sample_msg(void)
@

