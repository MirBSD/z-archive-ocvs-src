head	1.1;
branch	1.1.1;
access;
symbols
	tg-mergetmp-mirosx-1:1.1.1.6
	tg-mergefixes-1-branch:1.1.1.6.0.4
	tg-mergefixes-1-base:1.1.1.6
	MIROS_X:1.1.1.6.0.2
	MIROS_X_BASE:1.1.1.6
	tg-mergetmp-3:1.1.1.6
	cvs-200412031430:1.1.1.6
	cvs-200411231430:1.1.1.5
	MIRBSD_XP_MIRPPC:1.1.1.4.0.4
	cvs-200411131700:1.1.1.5
	cvs-200410141645:1.1.1.5
	MIRBSD_XP_SPARC_BASE:1.1.1.4
	MIRBSD_XP_SPARC:1.1.1.4.0.2
	MIRBSD_7quater:1.1.1.3
	cvs-200405160640:1.1.1.4
	cvs-200401271800:1.1.1.4
	cvs-200401261630:1.1.1.4
	cvs-200401021645:1.1.1.3
	MIRBSD_7_ALPHA:1.1.1.3.0.6
	MIRBSD_7:1.1.1.3.0.4
	cvs-200312222040:1.1.1.3
	MIRBSD_7ter:1.1.1.3
	MIRBSD_7_DEV:1.1.1.3.0.2
	cvs-200310020700:1.1.1.3
	cvs-200309271030:1.1.1.3
	cvs-200309251530:1.1.1.3
	cvs-200308302005:1.1.1.3
	cvs-200308171200:1.1.1.3
	ctm-3496:1.1.1.3
	ctm-3449:1.1.1.3
	ctm-3437:1.1.1.3
	cvs-200307191805:1.1.1.3
	ctm-3425:1.1.1.3
	cvs-200307091500:1.1.1.3
	ctm-3389:1.1.1.3
	cvs-200306291430:1.1.1.3
	ctm-3341:1.1.1.3
	MIRBSD_5:1.1.1.3
	cvs-200306082100:1.1.1.3
	ctm-3316:1.1.1.3
	ctm-3272:1.1.1.3
	ctm-3264:1.1.1.3
	cvs-200305071630:1.1.1.3
	MIRBSD_4:1.1.1.2
	ctm-3203:1.1.1.2
	cvs-20030410-1130:1.1.1.2
	ctm-3155:1.1.1.1
	ctm-3132:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.1
date	2003.03.22.17.53.27;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.03.22.17.53.27;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2003.04.10.14.55.52;	author tg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2003.05.07.17.54.16;	author tg;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2004.01.26.19.01.33;	author tg;	state Stab;
branches;
next	1.1.1.5;

1.1.1.5
date	2004.10.14.17.18.34;	author tg;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2004.12.03.14.35.46;	author tg;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@/*
 * Copyright (c) 1993-1996,1998-2003 Todd C. Miller <Todd.Miller@@courtesan.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * 3. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * 4. Products derived from this software may not be called "Sudo" nor
 *    may "Sudo" appear in their names without specific prior written
 *    permission from the author.
 *
 * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES,
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
 * AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL
 * THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * $Sudo: sudo.h,v 1.192 2003/03/15 20:31:02 millert Exp $
 */

#ifndef _SUDO_SUDO_H
#define _SUDO_SUDO_H

#include <pathnames.h>
#include "compat.h"
#include "defaults.h"
#include "logging.h"

/*
 * Info pertaining to the invoking user.
 */
struct sudo_user {
    struct passwd *pw;
    struct passwd *_runas_pw;
    char *path;
    char *shell;
    char *tty;
    char  cwd[MAXPATHLEN];
    char *host;
    char *shost;
    char **runas;
    char *prompt;
    char *cmnd_safe;
    char *cmnd;
    char *cmnd_args;
    char *class_name;
};

/*
 * Return values for sudoers_lookup(), also used as arguments for log_auth()
 * Note: cannot use '0' as a value here.
 */
/* XXX - VALIDATE_SUCCESS and VALIDATE_FAILURE instead? */
#define VALIDATE_ERROR          0x01
#define VALIDATE_OK		0x02
#define VALIDATE_NOT_OK		0x04
#define FLAG_NOPASS		0x10
#define FLAG_NO_USER		0x20
#define FLAG_NO_HOST		0x40
#define FLAG_NO_CHECK		0x80

/*
 * Boolean values
 */
#undef TRUE
#define TRUE                     1
#undef FALSE
#define FALSE                    0

/*
 * find_path()/load_cmnd() return values
 */
#define FOUND                    1
#define NOT_FOUND                0
#define NOT_FOUND_DOT		-1

/*
 * Various modes sudo can be in (based on arguments) in octal
 */
#define MODE_RUN                 000001
#define MODE_VALIDATE            000002
#define MODE_INVALIDATE          000004
#define MODE_KILL                000010
#define MODE_VERSION             000020
#define MODE_HELP                000040
#define MODE_LIST                000100
#define MODE_LISTDEFS            000200
#define MODE_BACKGROUND          000400
#define MODE_SHELL               001000
#define MODE_IMPLIED_SHELL       002000
#define MODE_RESET_HOME          004000
#define MODE_PRESERVE_GROUPS     010000

/*
 * Used with set_perms()
 */
#define PERM_ROOT                0x00
#define PERM_FULL_ROOT           0x01
#define PERM_USER                0x02
#define PERM_FULL_USER           0x03
#define PERM_SUDOERS             0x04
#define PERM_RUNAS               0x05
#define PERM_TIMESTAMP           0x06

/*
 * Shortcuts for sudo_user contents.
 */
#define user_name		(sudo_user.pw->pw_name)
#define user_passwd		(sudo_user.pw->pw_passwd)
#define user_uid		(sudo_user.pw->pw_uid)
#define user_gid		(sudo_user.pw->pw_gid)
#define user_dir		(sudo_user.pw->pw_dir)
#define user_shell		(sudo_user.shell)
#define user_tty		(sudo_user.tty)
#define user_cwd		(sudo_user.cwd)
#define user_runas		(sudo_user.runas)
#define user_cmnd		(sudo_user.cmnd)
#define user_args		(sudo_user.cmnd_args)
#define user_path		(sudo_user.path)
#define user_prompt		(sudo_user.prompt)
#define user_host		(sudo_user.host)
#define user_shost		(sudo_user.shost)
#define safe_cmnd		(sudo_user.cmnd_safe)
#define login_class		(sudo_user.class_name)
#define runas_pw		(sudo_user._runas_pw)

/*
 * We used to use the system definition of PASS_MAX or _PASSWD_LEN,
 * but that caused problems with various alternate authentication
 * methods.  So, we just define our own and assume that it is >= the
 * system max.
 */
#define SUDO_PASS_MAX	256

/*
 * Flags for lock_file()
 */
#define SUDO_LOCK	1		/* lock a file */
#define SUDO_TLOCK	2		/* test & lock a file (non-blocking) */
#define SUDO_UNLOCK	4		/* unlock a file */

/*
 * Flags for sudoers_lookup:
 *  PASSWD_NEVER:  user never has to give a passwd
 *  PASSWD_ALL:    no passwd needed if all entries for host have NOPASSWD flag
 *  PASSWD_ANY:    no passwd needed if any entry for host has a NOPASSWD flag
 *  PASSWD_ALWAYS: passwd always needed
 */
#define PWCHECK_NEVER	0x01
#define PWCHECK_ALL	0x02
#define PWCHECK_ANY	0x04
#define PWCHECK_ALWAYS	0x08

/*
 * Flags for tgetpass()
 */
#define TGP_ECHO	0x01		/* leave echo on when reading passwd */
#define TGP_STDIN	0x02		/* read from stdin, not /dev/tty */

/*
 * Function prototypes
 */
#define YY_DECL int yylex __P((void))

#ifndef HAVE_GETCWD
char *getcwd		__P((char *, size_t size));
#endif
#ifndef HAVE_SNPRINTF
int snprintf		__P((char *, size_t, const char *, ...));
#endif
#ifndef HAVE_VSNPRINTF
int vsnprintf		__P((char *, size_t, const char *, va_list));
#endif
#ifndef HAVE_ASPRINTF
int asprintf		__P((char **, const char *, ...));
#endif
#ifndef HAVE_VASPRINTF
int vasprintf		__P((char **, const char *, va_list));
#endif
#ifndef HAVE_STRCASECMP
int strcasecmp		__P((const char *, const char *));
#endif
#ifndef HAVE_STRLCAT
size_t strlcat		__P((char *, const char *, size_t));
#endif
#ifndef HAVE_STRLCPY
size_t strlcpy		__P((char *, const char *, size_t));
#endif
char *sudo_goodpath	__P((const char *));
char *tgetpass		__P((const char *, int, int));
int find_path		__P((char *, char **, char *));
void check_user		__P((void));
void verify_user	__P((struct passwd *, char *));
int sudoers_lookup	__P((int));
void set_perms_nosuid	__P((int));
void set_perms_posix	__P((int));
void set_perms_suid	__P((int));
void remove_timestamp	__P((int));
int check_secureware	__P((char *));
void sia_attempt_auth	__P((void));
void pam_attempt_auth	__P((void));
int yyparse		__P((void));
void pass_warn		__P((FILE *));
VOID *emalloc		__P((size_t));
VOID *emalloc2		__P((size_t, size_t));
VOID *erealloc		__P((VOID *, size_t));
VOID *erealloc3		__P((VOID *, size_t, size_t));
char *estrdup		__P((const char *));
int easprintf		__P((char **, const char *, ...));
int evasprintf		__P((char **, const char *, va_list));
void dump_defaults	__P((void));
void dump_auth_methods	__P((void));
void init_envtables	__P((void));
int lock_file		__P((int, int));
int touch		__P((char *, time_t));
int user_is_exempt	__P((void));
void set_fqdn		__P((void));
char *sudo_getepw	__P((struct passwd *));
int pam_prep_user	__P((struct passwd *));
YY_DECL;

/* Only provide extern declarations outside of sudo.c. */
#ifndef _SUDO_SUDO_C
extern struct sudo_user sudo_user;
extern struct passwd *auth_pw;

extern int Argc;
extern char **Argv;
extern FILE *sudoers_fp;
extern int tgetpass_flags;
extern uid_t timestamp_uid;

extern void (*set_perms) __P((int));
#endif
extern int errno;

#endif /* _SUDO_SUDO_H */
@


1.1.1.1
log
@Import OpenBSD 3.3 source repository from CTM 3132 the first time
This opens an OpenBSD-mirabile (aka MirBSD) repository.

### MirBSD is:
# Copyright (c) 1982-2003 by Thorsten "mirabile" Glaser <x86@@ePost.de>
# Copyright © 1968-2003  The authors of And contributors to UNIX®, the
#       C Language, BSD/Berkeley Unix; 386BSD, NetBSD 1.1 and OpenBSD.
#
# Anyone who obtained a copy of this work is hereby permitted to freely use,
# distribute, modify, merge, sublicence, give away or sell it as long as the
# authors are given due credit and the following notice is retained:
#
# This work is provided "as is", with no explicit or implicit warranty what-
# soever. Use it only at your own risk. In no event may an author or contri-
# butor be held liable for any damage, directly or indirectly, that origina-
# ted through or is caused by creation or modification of this work.

MirBSD is my private tree. MirBSD does not differ very much from OpenBSD
and intentionally tracks OpenBSD. That's why it _is_ OpenBSD, just not the
official one. It's like with DarrenBSD.

At time of this writing, no advertising for MirBSD must be done,
because the advertising clause has not yet been sorted out.

http://templeofhate.com/tglaser/MirBSD/index.php
@
text
@@


1.1.1.2
log
@Import OpenBSD cvs as of roughly 11:11 UTC today,
or CTM delta 3188/3189/3190.
@
text
@d34 1
a34 1
 * $Sudo: sudo.h,v 1.193 2003/04/02 18:25:19 millert Exp $
d239 1
a239 1
#ifndef _SUDO_MAIN
d243 2
@


1.1.1.3
log
@Import OpenBSD source tree of short before 17:00 UTC today
@
text
@d34 1
a34 5
 * Sponsored in part by the Defense Advanced Research Projects
 * Agency (DARPA) and Air Force Research Laboratory, Air Force
 * Materiel Command, USAF, under agreement number F39502-99-1-0512.
 *
 * $Sudo: sudo.h,v 1.194 2003/04/16 00:42:10 millert Exp $
@


1.1.1.4
log
@Import OpenBSD as of today again (seems pretty stable, I hope)

Prominent changes: more bgpd, tcpmd5; tcpdump/isakmpd fixes
@
text
@a184 3
#ifndef HAVE_CLOSEFROM
void closefrom		__P((int));
#endif
a239 1
void zero_bytes		__P((volatile VOID *, size_t));
@


1.1.1.5
log
@newer sudo
@
text
@d2 2
a3 1
 * Copyright (c) 1993-1996,1998-2004 Todd C. Miller <Todd.Miller@@courtesan.com>
d5 28
a32 11
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
d38 1
a38 1
 * $Sudo: sudo.h,v 1.213 2004/09/08 15:48:23 millert Exp $
a44 1
#include <limits.h>
a54 1
    struct stat *cmnd_stat;
d58 1
a58 1
    char  cwd[PATH_MAX];
d63 1
a65 2
    char *cmnd_base;
    char *cmnd_safe;
d74 7
a80 9
#define VALIDATE_ERROR          0x001
#define VALIDATE_OK		0x002
#define VALIDATE_NOT_OK		0x004
#define FLAG_CHECK_USER		0x010
#define FLAG_NOPASS		0x020
#define FLAG_NO_USER		0x040
#define FLAG_NO_HOST		0x080
#define FLAG_NO_CHECK		0x100
#define FLAG_NOEXEC		0x200
d83 1
a83 1
 * Pseudo-boolean values
a88 4
#undef NOMATCH
#define NOMATCH                 -1
#undef UNSPEC
#define UNSPEC                  -2
d110 3
a112 5
#define MODE_LOGIN_SHELL         002000
#define MODE_IMPLIED_SHELL       004000
#define MODE_RESET_HOME          010000
#define MODE_PRESERVE_GROUPS     020000
#define MODE_EDIT                040000
d123 1
a123 2
#define PERM_FULL_RUNAS          0x06
#define PERM_TIMESTAMP           0x07
a138 2
#define user_base		(sudo_user.cmnd_base)
#define user_stat		(sudo_user.cmnd_stat)
d163 12
a190 6
#ifndef HAVE_UTIMES
int utimes		__P((const char *, const struct timeval *));
#endif
#ifdef HAVE_FUTIME
int futimes		__P((int, const struct timeval *));
#endif
d212 1
a212 1
char *sudo_goodpath	__P((const char *, struct stat *));
d214 2
a215 2
int find_path		__P((char *, char **, struct stat *, char *));
void check_user		__P((int));
a217 4
#ifdef HAVE_LDAP
int sudo_ldap_check	__P((int));
void sudo_ldap_list_matches __P((void));
#endif
d238 1
a238 1
int touch		__P((int, char *, struct timespec *));
d241 1
a241 2
int set_runaspw		__P((char *));
char *sudo_getepw	__P((const struct passwd *));
a243 1
int gettime		__P((struct timespec *));
a256 1
#ifndef errno
a257 1
#endif
@


1.1.1.6
log
@your daily dose of bugfixes and security updates from obsd
@
text
@a163 4
struct passwd;
struct timespec;
struct timeval;

@


