head	1.2;
access;
symbols
	tg-mergetmp-mirosx-1:1.2
	tg-mergefixes-1-branch:1.2.0.4
	tg-mergefixes-1-base:1.2
	MIROS_X:1.2.0.2
	MIROS_X_BASE:1.2
	tg-mergetmp-3:1.2
	MIRBSD_XP_MIRPPC:1.1.1.2.0.10
	MIRBSD_XP_SPARC_BASE:1.1.1.2
	MIRBSD_XP_SPARC:1.1.1.2.0.8
	MIRBSD_7quater:1.1.1.2
	cvs-200405160640:1.1.1.2
	cvs-200401271800:1.1.1.2
	cvs-200401261630:1.1.1.2
	cvs-200401021645:1.1.1.2
	MIRBSD_7_ALPHA:1.1.1.2.0.6
	MIRBSD_7:1.1.1.2.0.4
	cvs-200312222040:1.1.1.2
	MIRBSD_7ter:1.1.1.2
	MIRBSD_7_DEV:1.1.1.2.0.2
	cvs-200310020700:1.1.1.2
	cvs-200309271030:1.1.1.2
	cvs-200309251530:1.1.1.1
	cvs-200308302005:1.1.1.1
	cvs-200308221505:1.1.1.1
	cvs-200308171200:1.1.1.1
	ctm-3496:1.1.1.1
	ctm-3449:1.1.1.1
	ctm-3437:1.1.1.1
	cvs-200307191805:1.1.1.1
	ctm-3425:1.1.1.1
	cvs-200307091500:1.1.1.1
	cvs-200307072125:1.1.1.1
	ctm-3389:1.1.1.1
	cvs-200306291430:1.1.1.1
	ctm-3341:1.1.1.1
	MIRBSD_5:1.1.1.1
	cvs-200306082100:1.1.1.1
	ctm-3316:1.1.1.1
	ctm-3272:1.1.1.1
	ctm-3264:1.1.1.1
	cvs-200305071630:1.1.1.1
	MIRBSD_4:1.1.1.1
	ctm-3203:1.1.1.1
	cvs-20030410-1130:1.1.1.1
	ctm-3155:1.1.1.1
	ctm-3132:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@.\" @;


1.2
date	2004.10.14.17.55.47;	author tg;	state Exp;
branches;
next	1.1;

1.1
date	2003.03.22.17.48.54;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.03.22.17.48.54;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2003.09.27.11.18.15;	author tg;	state Stab;
branches;
next	;


desc
@@


1.2
log
@fixes from obsd
@
text
@.\"	$OpenBSD: dlfcn.3,v 1.17 2004/08/12 23:59:37 jmc Exp $
.\"	$NetBSD: dlfcn.3,v 1.3 1996/01/09 19:43:34 pk Exp $
.\"
.\" Copyright (c) 1995 Paul Kranenburg
.\" All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. All advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"      This product includes software developed by Paul Kranenburg.
.\" 3. The name of the author may not be used to endorse or promote products
.\"    derived from this software without specific prior written permission
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
.\" IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
.\" OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
.\" IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
.\" INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
.\" NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
.\" DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
.\" THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
.\" (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
.\" THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
.\"
.Dd September 30, 1995
.Dt DLFCN 3
.Os
.Sh NAME
.Nm dlopen ,
.Nm dlclose ,
.Nm dlsym ,
.Nm dladdr ,
.Nm dlctl ,
.Nm dlerror
.Nd dynamic link interface
.Sh SYNOPSIS
.Fd #include <dlfcn.h>
.Ft "void *"
.Fn dlopen "const char *path" "int mode"
.Ft "int"
.Fn dlclose "void *handle"
.Ft "void *"
.Fn dlsym "void *handle" "const char *symbol"
.Ft "int"
.Fn dladdr "const void *addr" "Dl_info *info"
.Ft "int"
.Fn dlctl "void *handle" "int cmd" "void *data"
.Ft "const char *"
.Fn dlerror "void"
.Sh DESCRIPTION
These functions provide an interface to the run-time linker
.Xr ld.so 1 .
They allow new shared objects to be loaded into a process's address space
under program control.
.Pp
The
.Fn dlopen
function takes a name of a shared object as its first argument.
The shared object is mapped into the address space, relocated, and its external
references are resolved in the same way as is done with the implicitly loaded
shared libraries at program startup.
.Pp
The
.Fa path
argument can either be an absolute pathname or it can be of the form
.Sm off
.Do Xo lib Ao name Ac .so
.Op .xx Op .yy Xc
.Dc
.Sm on
in which case the same library search rules apply that are used for
.Dq intrinsic
shared library searches.
A null pointer supplied for path is interpreted as a reference to the main
executable of the process.
The second argument currently has no effect, but should be set to
.Dv DL_LAZY
for future compatibility.
.Pp
.Fn dlopen
returns a handle to be used in calls to
.Fn dlclose ,
.Fn dlsym ,
and
.Fn dlctl .
If the named shared object has already been loaded by a previous call to
.Fn dlopen
.Pq and not yet unloaded by Fn dlclose ,
a handle referring to the resident copy is returned.
.Pp
.Fn dlclose
unlinks and removes the object referred to by
.Fa handle
from the process address space.
If multiple calls to
.Fn dlopen
have been done on this object
.Po or the object was once loaded at startup time
.Pc
the object is removed when its reference count drops to zero.
.Pp
.Fn dlsym
looks for a definition of
.Fa symbol
in the shared object designated by
.Fa handle .
The symbol's address is returned.
If the symbol cannot be resolved,
.Dv NULL
is returned.
.Pp
If
.Fn dlsym
is called with the special
.Fa handle
.Dv NULL ,
it is interpreted as a reference to the executable or shared object
from which the call is being made.
Thus a shared object can reference its own symbols.
.Pp
If
.Fn dlsym
is called with the special
.Fa handle
.Dv RTLD_DEFAULT ,
all the shared objects will be searched in the order they were loaded.
.Pp
If
.Fn dlsym
is called with the special
.Fa handle
.Dv RTLD_NEXT ,
then the search for the symbol is limited to the shared objects
which were loaded after the one issuing the call to
.Fn dlsym .
Thus, if the function is called from the main program, all
the shared libraries are searched.
If it is called from a shared library, all subsequent shared
libraries are searched.
.Pp
If
.Fn dlsym
is called with the special
.Fa handle
.Dv RTLD_SELF ,
then the search for the symbol is limited to the shared object
issuing the call to
.Fn dlsym
and those shared objects which were loaded after it.
.Pp
.Fn dladdr
queries the dynamic linker for information about the shared object
containing the address
.Fa addr .
The information is returned in the structure specified by
.Fa info .
The structure contains at least the following members:
.Bl -tag -width "XXXconst char *dli_fname"
.It Li "const char *dli_fname"
The pathname of the shared object containing the address
.Fa addr .
.It Li "void *dli_fbase"
The base address at which the shared object is mapped into the
address space of the calling process.
.It Li "const char *dli_sname"
The name of the nearest run-time symbol with a address less than or
equal to
.Fa addr .
.Pp
If no symbol with a suitable address is found, both this field and
.Va dli_saddr
are set to
.Dv NULL .
.It Li "void *dli_saddr"
The address of the symbol returned in
.Va dli_sname .
.El
.Pp
If a mapped shared object containing
.Fa addr
cannot be found,
.Fn dladdr
returns 0.
In that case, a message detailing the failure can be retrieved by
calling
.Fn dlerror .
On success, a non-zero value is returned.
Note: both strings pointed at by
.Va dli_fname
and
.Va dli_sname
reside in memory private to the run-time linker module and should not
be modified by the caller.
.Pp
In dynamically linked programs, the address of a global function will
point to its program linkage table entry, rather than to the entry
point of the function itself.
This causes most global functions to appear to be defined within the
main executable, rather than in the shared libraries where the actual
code resides.
.Pp
.Fn dlctl
provides an interface similar to
.Xr ioctl 2
to control several aspects of the run-time linker's operation.
This interface is
.Ud .
.Pp
.Fn dlerror
returns a character string representing the most recent error that has
occurred while processing one of the other functions described here.
If no dynamic linking errors have occurred since the last invocation of
.Fn dlerror ,
.Fn dlerror
returns
.Dv NULL .
Thus, invoking
.Fn dlerror
a second time, immediately following a prior invocation, will result in
.Dv NULL
being returned.
.Sh SEE ALSO
.Xr ld 1 ,
.Xr ld.so 1 ,
.Xr link 5
.Sh HISTORY
Some of the
.Nm dl*
functions first appeared in SunOS 4.
.Sh BUGS
An error that occurs while processing a
.Fn dlopen
request results in the termination of the program.
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
.\"	$OpenBSD: dlfcn.3,v 1.14 2002/12/30 13:51:59 millert Exp $
d39 1
d52 2
d81 2
d119 90
d219 10
@


1.1.1.1
log
@Import OpenBSD 3.3 source repository from CTM 3132 the first time
This opens an OpenBSD-mirabile (aka MirBSD) repository.

### MirBSD is:
# Copyright (c) 1982-2003 by Thorsten "mirabile" Glaser <x86@@ePost.de>
# Copyright © 1968-2003  The authors of And contributors to UNIX®, the
#       C Language, BSD/Berkeley Unix; 386BSD, NetBSD 1.1 and OpenBSD.
#
# Anyone who obtained a copy of this work is hereby permitted to freely use,
# distribute, modify, merge, sublicence, give away or sell it as long as the
# authors are given due credit and the following notice is retained:
#
# This work is provided "as is", with no explicit or implicit warranty what-
# soever. Use it only at your own risk. In no event may an author or contri-
# butor be held liable for any damage, directly or indirectly, that origina-
# ted through or is caused by creation or modification of this work.

MirBSD is my private tree. MirBSD does not differ very much from OpenBSD
and intentionally tracks OpenBSD. That's why it _is_ OpenBSD, just not the
official one. It's like with DarrenBSD.

At time of this writing, no advertising for MirBSD must be done,
because the advertising clause has not yet been sorted out.

http://templeofhate.com/tglaser/MirBSD/index.php
@
text
@@


1.1.1.2
log
@cvs is playing games with me.

@@@@@@ CONSIDER THE TREE LOCKED NOW @@@@@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: dlfcn.3,v 1.15 2003/09/25 21:56:20 millert Exp $
a123 10
If no dynamic linking errors have occurred since the last invocation of
.Fn dlerror ,
.Fn dlerror
returns
.Dv NULL .
Thus, invoking
.Fn dlerror
a second time, immediately following a prior invocation, will result in
.Dv NULL
being returned.
@

