head	1.1;
access;
symbols
	MIRBSD_7_DEV:1.1.0.2;
locks; strict;
comment	@ * @;


1.1
date	2003.12.02.13.58.19;	author tg;	state dead;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2003.12.02.13.58.19;	author tg;	state Exp;
branches;
next	1.1.2.2;

1.1.2.2
date	2003.12.02.14.02.14;	author tg;	state Exp;
branches;
next	1.1.2.3;

1.1.2.3
date	2003.12.03.18.25.52;	author tg;	state Exp;
branches;
next	1.1.2.4;

1.1.2.4
date	2003.12.09.22.19.37;	author tg;	state Exp;
branches;
next	;


desc
@@


1.1
log
@file parse.y was initially added on branch MIRBSD_7_DEV.
@
text
@@


1.1.2.1
log
@commit vexecctl on behalf of wbx@@ (minus y.tab.c)
@
text
@a0 183
%{
/* $MirBSD$ */

/*
 * Vexec Port for MirBSD extracted from Stephanie for OpenBSD 3.4
 * Waldemar Brodkorb miros at thinknow.de
*/

/*
 * $Id: parse.y,v 1.1 2003/09/10 10:01:59 brian Exp $
 * $NetBSD: veriexecctl_parse.y,v 1.1 2002/11/23 10:52:49 blymn Exp $
 *
 * Stephanie for OpenBSD 3.4
 *
 * Parser for Vexec fingerprint database.
 */

#include <sys/param.h>
#include <sys/ioctl.h>
#include <sys/vexec.h>
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <err.h>

#include "my_stack.h"

extern int yylex(void);
extern void yyerror(const char *);

int convert(char *fp, u_int count, u_char *out);

extern struct my_stack *filestack;
extern int fd, no_mem;

struct vexec_params params;

%}

%union {
	char *string;
	int intval;
}

%token <string> PATH
%token <string> STRING
%token EOL

%%

statement	:	/* empty */
		|	statement path type fingerprint flags eol {
				do_ioctl();
				bzero(&params, sizeof(params));
			}
		|	statement eol
		|	statement error eol {
				yyerrok;
			}
		;

path		:	PATH {
				strlcpy(params.vxp_file, $1, MAXPATHLEN);
			}
		;

type		:	STRING {
				if (strcasecmp($1, "md5") == 0) {
					params.vxp_fptype = FPTYPE_MD5;
				} else if (strcasecmp($1, "sha1") == 0) {
					params.vxp_fptype = FPTYPE_SHA1;
				} else if (strcasecmp($1, "rmd160") == 0) {
					params.vxp_fptype = FPTYPE_RMD160;
				} else {
					yyerror("Bad fingerprint type");
					YYERROR;
				}
			}
		;


fingerprint	:	STRING {
				unsigned int count;

				switch (params.vxp_fptype) {
				case FPTYPE_MD5:
					count = FPLEN_MD5;
					break;

				case FPTYPE_SHA1:
					count = FPLEN_SHA1;
					break;

				case FPTYPE_RMD160:
					count = FPLEN_RMD160;
					break;
				}

				if (convert($1, count, params.vxp_fp) == -1) {
					yyerror("Bad fingerprint");
					YYERROR;
				}
			}
		;

flags		:	/* empty */ {
				params.vxp_type = VEXEC_DIRECT;
			}
		|	flags flag_spec
		;

flag_spec	:	STRING {
				if (strcasecmp($1, "indirect") == 0) {
					params.vxp_type = VEXEC_INDIRECT;
				} else if (strcasecmp($1, "file") == 0) {
					params.vxp_type = VEXEC_FILE;
				} else if (strcasecmp($1, "direct") == 0) {
					params.vxp_type = VEXEC_DIRECT;
				} else {
					yyerror("Bad option");
					YYERROR;
				}
			}
		;

eol		:	EOL
		;

%%
		
/*
 * Takes the hexadecimal string pointed to by "fp" and converts it to a 
 * "count" byte binary number which is stored in the array pointed to
 * by "out".  Returns -1 if the conversion fails.
 */
int convert(char *fp, u_int count, u_char *out) {
        int i, value, error;

	error = 0;

	for (i = 0; i < count; i++) {
		if ((fp[2*i] >= '0') && (fp[2*i] <= '9')) {
			value = 16 * (fp[2*i] - '0');
		} else if ((fp[2*i] >= 'a') && (fp[2*i] <= 'f')) {
			value = 16 * (10 + fp[2*i] - 'a');
		} else {
			error = -1;
			break;
		}

		if ((fp[2*i + 1] >= '0') && (fp[2*i + 1] <= '9')) {
			value += fp[2*i + 1] - '0';
		} else if ((fp[2*i + 1] >= 'a') && (fp[2*i + 1] <= 'f')) {
			value += fp[2*i + 1] - 'a' + 10;
		} else {
			error = -1;
			break;
		}

		out[i] = value;
	}

	return (error);
}

/*
 * Load the fingerprint. Assumes that the fingerprint pseudo-device is
 * opened and the file handle is in fd.
 */
void do_ioctl(void) {
	extern int errno;

	if (ioctl(fd, VEXEC_LOAD, &params) == -1) {
		if (!no_mem && filestack) {
			(void) fprintf(stderr, "%s:%u: %s: %s\n",
			    filestack->name, filestack->line,
			    params.vxp_file, strerror(errno));
		} else {
			(void) fprintf(stderr, "%s: %s\n",
			    params.vxp_file, strerror(errno));
		}
	}
}
@


1.1.2.2
log
@* y.tab.c is a generated file
* whitespace cleanup
* remove $Id tags, because they are overwritten
  by cvs anyways. The importer should either have
  changed them to read $Stephanie$ or whatever
  source they have been taken from, or changed the
  first dollar sign to an underscore (for an example,
  see /sys/arch/i386/conf/RAMDISK*).
@
text
@d2 1
a2 1
/* $MirBSD: parse.y,v 1.1.2.1 2003/12/02 13:58:19 tg Exp $ */
d7 1
a7 1
 */
d10 1
d130 1
a130 1

d132 1
a132 1
 * Takes the hexadecimal string pointed to by "fp" and converts it to a
@


1.1.2.3
log
@first round of
 * licence
 * white-space
cleanup.
@
text
@d2 1
a2 1
/* $MirBSD: parse.y,v 1.1.2.2 2003/12/02 14:02:14 tg Exp $ */
d14 1
a14 1
 * Parser for Vexec fingerprint database. Contributed by Brett Lymn <blymn@@baesystems.com.au> (licence to ask).
@


1.1.2.4
log
@Apparently the author permitted us to throw the same licence as
the .c file onto the .l and .y files (wbx@@ correct me if I'm wrong).

The licencing audit of vexec(ctl) is now done (I think), unless
wbx@@ wants to add his own (c) for work he'd done.
@
text
@d2 9
a10 5
/* $MirBSD$
 *-
 * Copyright (c) 1998-1999 Brett Lymn
 *	<blymn@@baesystems.com.au> <blymn@@baea.com.au> <brett_lymn@@yahoo.com.au>
 * All rights reserved.
d12 1
a12 1
 * This code has been donated to The NetBSD Foundation by the Author.
d14 1
a14 23
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. The name of the author may not be used to endorse or promote products
 *    derived from this software withough specific prior written permission
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR "AS IS" AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *-
 * Waldemar Brodkorb <miros@@thinknow.de>
 * Stephanie for OpenBSD 3.4 / MirOS BSD
 *
 * Based on Brett Lymn's original code; contains enhancements.
@


