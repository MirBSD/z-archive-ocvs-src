head	1.1;
branch	1.1.1;
access;
symbols
	tg-mergetmp-mirosx-1:1.1.1.7
	tg-mergefixes-1-branch:1.1.1.7.0.4
	tg-mergefixes-1-base:1.1.1.7
	MIROS_X:1.1.1.7.0.2
	MIROS_X_BASE:1.1.1.7
	tg-mergetmp-3:1.1.1.7
	cvs-200411261545:1.1.1.7
	MIRBSD_XP_MIRPPC:1.1.1.6.0.4
	MIRBSD_XP_SPARC_BASE:1.1.1.6
	MIRBSD_XP_SPARC:1.1.1.6.0.2
	MIRBSD_7quater:1.1.1.4
	cvs-200405160640:1.1.1.6
	cvs-200401271800:1.1.1.5
	cvs-200401261630:1.1.1.5
	cvs-200401021645:1.1.1.4
	MIRBSD_7_ALPHA:1.1.1.4.0.6
	MIRBSD_7:1.1.1.4.0.4
	cvs-200312222040:1.1.1.4
	MIRBSD_7ter:1.1.1.4
	MIRBSD_7_DEV:1.1.1.4.0.2
	cvs-200310020700:1.1.1.4
	cvs-200309271030:1.1.1.4
	cvs-200309251530:1.1.1.4
	cvs-200308302005:1.1.1.4
	cvs-200308171200:1.1.1.4
	ctm-3496:1.1.1.4
	ctm-3449:1.1.1.4
	ctm-3437:1.1.1.4
	cvs-200307191805:1.1.1.4
	ctm-3425:1.1.1.4
	cvs-200307091500:1.1.1.4
	ctm-3389:1.1.1.4
	cvs-200306291430:1.1.1.4
	ctm-3341:1.1.1.4
	MIRBSD_5:1.1.1.4
	cvs-200306082100:1.1.1.4
	ctm-3316:1.1.1.4
	ctm-3272:1.1.1.3
	ctm-3264:1.1.1.2
	cvs-200305071630:1.1.1.2
	MIRBSD_4:1.1.1.2
	ctm-3203:1.1.1.2
	cvs-20030410-1130:1.1.1.1
	ctm-3155:1.1.1.1
	ctm-3132:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.1
date	2003.03.22.17.48.28;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.03.22.17.48.28;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2003.04.15.17.36.54;	author tg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2003.05.21.19.02.37;	author tg;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2003.06.05.17.31.01;	author tg;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2004.01.26.18.29.21;	author tg;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2004.05.16.08.24.21;	author tg;	state Stab;
branches;
next	1.1.1.7;

1.1.1.7
date	2004.11.26.15.50.50;	author tg;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@/*	$OpenBSD: isakmpd.c,v 1.48 2002/12/03 20:05:10 ho Exp $	*/
/*	$EOM: isakmpd.c,v 1.54 2000/10/05 09:28:22 niklas Exp $	*/

/*
 * Copyright (c) 1998, 1999, 2000, 2001 Niklas Hallqvist.  All rights reserved.
 * Copyright (c) 1999, 2000 Angelos D. Keromytis.  All rights reserved.
 * Copyright (c) 1999, 2000, 2001 Håkan Olsson.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by Ericsson Radio Systems.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * This code was written under funding by Ericsson Radio Systems.
 */

#include <errno.h>
#include <sys/param.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <signal.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <fcntl.h>

#include "sysdep.h"

#include "app.h"
#include "conf.h"
#include "connection.h"
#include "init.h"
#include "libcrypto.h"
#include "log.h"
#include "sa.h"
#include "timer.h"
#include "transport.h"
#include "udp.h"
#include "ui.h"
#include "util.h"
#include "cert.h"

#ifdef USE_POLICY
#include "policy.h"
#endif

static void usage (void);

/*
 * Set if -d is given, currently just for running in the foreground and log
 * to stderr instead of syslog.
 */
int debug = 0;

/*
 * If we receive a SIGHUP signal, this flag gets set to show we need to
 * reconfigure ASAP.
 */
volatile sig_atomic_t sighupped = 0;

/*
 * If we receive a USR1 signal, this flag gets set to show we need to dump
 * a report over our internal state ASAP.  The file to report to is settable
 * via the -R parameter.
 */
volatile sig_atomic_t sigusr1ed = 0;
static char *report_file = "/var/run/isakmpd.report";

/*
 * If we receive a USR2 signal, this flag gets set to show we need to
 * rehash our SA soft expiration timers to a uniform distribution.
 * XXX Perhaps this is a really bad idea?
 */
volatile sig_atomic_t sigusr2ed = 0;

/*
 * If we receive a TERM signal, perform a "clean shutdown" of the daemon.
 * This includes to send DELETE notifications for all our active SAs.
 */
volatile sig_atomic_t sigtermed = 0;
void daemon_shutdown_now (int);

/* The default path of the PID file.  */
static char *pid_file = "/var/run/isakmpd.pid";

#ifdef USE_DEBUG
/* The path of the IKE packet capture log file.  */
static char *pcap_file = 0;
#endif

static void
usage (void)
{
  fprintf (stderr,
	   "usage: %s [-4] [-6] [-c config-file] [-d] [-D class=level]\n"
	   "          [-f fifo] [-i pid-file] [-n] [-p listen-port]\n"
	   "          [-P local-port] [-L] [-l packetlog-file] [-r seed]\n"
	   "          [-R report-file]\n",
	   sysdep_progname ());
  exit (1);
}

static void
parse_args (int argc, char *argv[])
{
  int ch;
  char *ep;
#ifdef USE_DEBUG
  int cls, level;
  int do_packetlog = 0;
#endif

  while ((ch = getopt (argc, argv, "46c:dD:f:i:np:P:Ll:r:R:")) != -1) {
    switch (ch) {
    case '4':
      bind_family |= BIND_FAMILY_INET4;
      break;

    case '6':
      bind_family |= BIND_FAMILY_INET6;
      break;

    case 'c':
      conf_path = optarg;
      break;

    case 'd':
      debug++;
      break;

#ifdef USE_DEBUG
    case 'D':
      if (sscanf (optarg, "%d=%d", &cls, &level) != 2)
	{
	    if (sscanf (optarg, "A=%d", &level) == 1)
	      {
		  for (cls = 0; cls < LOG_ENDCLASS; cls++)
		    log_debug_cmd (cls, level);
	      }
	    else
	      log_print ("parse_args: -D argument unparseable: %s", optarg);
	}
      else
	log_debug_cmd (cls, level);
      break;
#endif /* USE_DEBUG */

    case 'f':
      ui_fifo = optarg;
      break;

    case 'i':
      pid_file = optarg;
      break;

    case 'n':
      app_none++;
      break;

    case 'p':
      udp_default_port = optarg;
      break;

    case 'P':
      udp_bind_port = optarg;
      break;

#ifdef USE_DEBUG
    case 'l':
      pcap_file = optarg;
      /* Fallthrough intended.  */

    case 'L':
      do_packetlog++;
      break;
#endif /* USE_DEBUG */

    case 'r':
      seed = strtoul (optarg, &ep, 0);
      srandom (seed);
      if (*ep != '\0')
	log_fatal ("parse_args: invalid numeric arg to -r (%s)", optarg);
      regrand = 1;
      break;

    case 'R':
      report_file = optarg;
      break;

    case '?':
    default:
      usage ();
    }
  }
  argc -= optind;
  argv += optind;

#ifdef USE_DEBUG
  if (do_packetlog && !pcap_file)
    pcap_file = PCAP_FILE_DEFAULT;
#endif
}

static void
sighup (int sig)
{
  sighupped = 1;
}

/* Report internal state on SIGUSR1.  */
static void
report (void)
{
  FILE *rfp, *old;
  mode_t old_umask;

  old_umask = umask (S_IRWXG | S_IRWXO);
  rfp = fopen (report_file, "w");
  umask (old_umask);

  if (!rfp)
    {
      log_error ("fopen (\"%s\", \"w\") failed", report_file);
      return;
    }

  /* Divert the log channel to the report file during the report.  */
  old = log_current ();
  log_to (rfp);
  ui_report ("r");
  log_to (old);
  fclose (rfp);

  sigusr1ed = 0;
}

static void
sigusr1 (int sig)
{
  sigusr1ed = 1;
}

/* Rehash soft expiration timers on SIGUSR2.  */
static void
rehash_timers (void)
{
#if 0
  /* XXX - not yet */
  log_print ("SIGUSR2 received, rehasing soft expiration timers.");

  timer_rehash_timers ();
#endif

  sigusr2ed = 0;
}

static void
sigusr2 (int sig)
{
  sigusr2ed = 1;
}

static int
phase2_sa_check (struct sa *sa, void *arg)
{
  return sa->phase == 2;
}

static void
daemon_shutdown (void)
{
  /* Perform a (protocol-wise) clean shutdown of the daemon.  */
  struct sa *sa;

  if (sigtermed == 1)
    {
      log_print ("isakmpd: shutting down...");

      /* Delete all active phase 2 SAs.  */
      while ((sa = sa_find (phase2_sa_check, NULL)))
	{
	  /* Each DELETE is another (outgoing) message.  */
	  sa_delete (sa, 1);
	}
      sigtermed++;
    }

  if (transport_prio_sendqs_empty ())
    {
      /*
       * When the prioritized transport sendq:s are empty, i.e all
       * the DELETE notifications have been sent, we can shutdown.
       */
	
#ifdef USE_DEBUG
      log_packet_stop ();
#endif
      log_print ("isakmpd: exit");
      exit (0);
    }
}

/* Called on SIGTERM, or by ui_shutdown_daemon().  */
void
daemon_shutdown_now (int sig)
{
  sigtermed = 1;
}

/* Write pid file.  */
static void
write_pid_file (void)
{
  FILE *fp;

  /* Ignore errors.  */
  unlink (pid_file);

  fp = fopen (pid_file, "w");
  if (fp != NULL)
    {
      /* XXX Error checking!  */
      fprintf (fp, "%ld\n", (long) getpid ());
      fclose (fp);
    }
  else
    log_fatal ("main: fopen (\"%s\", \"w\") failed", pid_file);
}

int
main (int argc, char *argv[])
{
  fd_set *rfds, *wfds;
  int n, m;
  size_t mask_size;
  struct timeval tv, *timeout;

  /* Make sure init() won't alloc fd 0, 1 or 2, as daemon() will close them. */
  for (n = 0; n <= 2; n++)
    if (fcntl (n, F_GETFL, 0) == -1 && errno == EBADF)
      (void)open ("/dev/null", n ? O_WRONLY : O_RDONLY, 0);

  /* Log cmd line parsing and initialization errors to stderr.  */
  log_to (stderr);
  parse_args (argc, argv);
  init ();

  if (!debug)
    {
      if (daemon (0, 0))
	log_fatal ("main: daemon (0, 0) failed");
      /* Switch to syslog.  */
      log_to (0);
    }

  write_pid_file ();

  /* Reinitialize on HUP reception.  */
  signal (SIGHUP, sighup);

  /* Report state on USR1 reception.  */
  signal (SIGUSR1, sigusr1);

  /* Rehash soft expiration timers on USR2 reception.  */
  signal (SIGUSR2, sigusr2);

  /* Do a clean daemon shutdown on TERM reception.  */
  signal (SIGTERM, daemon_shutdown_now);

#ifdef USE_DEBUG
  /* If we wanted IKE packet capture to file, initialize it now.  */
  if (pcap_file != 0)
    log_packet_init (pcap_file);
#endif

  /* Allocate the file descriptor sets just big enough.  */
  n = getdtablesize ();
  mask_size = howmany (n, NFDBITS) * sizeof (fd_mask);
  rfds = (fd_set *)malloc (mask_size);
  if (!rfds)
    log_fatal ("main: malloc (%lu) failed", (unsigned long)mask_size);
  wfds = (fd_set *)malloc (mask_size);
  if (!wfds)
    log_fatal ("main: malloc (%lu) failed", (unsigned long)mask_size);

  while (1)
    {
      /* If someone has sent SIGHUP to us, reconfigure.  */
      if (sighupped)
	{
	  log_print ("SIGHUP received");
	  reinit ();
	  sighupped = 0;
	}

      /* and if someone sent SIGUSR1, do a state report.  */
      if (sigusr1ed)
	{
	  log_print ("SIGUSR1 received");
	  report ();
	}

      /* and if someone sent SIGUSR2, do a timer rehash.  */
      if (sigusr2ed)
	{
	  log_print ("SIGUSR2 received");
	  rehash_timers ();
	}

      /*
       * and if someone set 'sigtermed' (SIGTERM or via the UI), this
       * indicated we should start a shutdown of the daemon.
       *
       * Note: Since _one_ message is sent per iteration of this enclosing
       * while-loop, and we want to send a number of DELETE notifications,
       * we must loop atleast this number of times. The daemon_shutdown()
       * function starts by queueing the DELETEs, all other calls just
       * increments the 'sigtermed' variable until it reaches a "safe"
       * value, and the daemon exits.
       */
      if (sigtermed)
	daemon_shutdown ();

      /* Setup the descriptors to look for incoming messages at.  */
      memset (rfds, 0, mask_size);
      n = transport_fd_set (rfds);
      FD_SET (ui_socket, rfds);
      if (ui_socket + 1 > n)
	n = ui_socket + 1;

      /*
       * XXX Some day we might want to deal with an abstract application
       * class instead, with many instantiations possible.
       */
      if (!app_none && app_socket >= 0)
	{
	  FD_SET (app_socket, rfds);
	  if (app_socket + 1 > n)
	    n = app_socket + 1;
	}

      /* Setup the descriptors that have pending messages to send.  */
      memset (wfds, 0, mask_size);
      m = transport_pending_wfd_set (wfds);
      if (m > n)
	n = m;

      /* Find out when the next timed event is.  */
      timeout = &tv;
      timer_next_event (&timeout);

      n = select (n, rfds, wfds, 0, timeout);
      if (n == -1)
	{
	  if (errno != EINTR)
	    {
	      log_error ("select");

	      /*
	       * In order to give the unexpected error condition time to
	       * resolve without letting this process eat up all available CPU
	       * we sleep for a short while.
	       */
	      sleep (1);
	    }
	}
      else if (n)
	{
	  transport_handle_messages (rfds);
	  transport_send_messages (wfds);
	  if (FD_ISSET (ui_socket, rfds))
	    ui_handler ();
	  if (!app_none && app_socket >= 0 && FD_ISSET (app_socket, rfds))
	    app_handler ();
	}
      timer_handle_expirations ();
    }
}
@


1.1.1.1
log
@Import OpenBSD 3.3 source repository from CTM 3132 the first time
This opens an OpenBSD-mirabile (aka MirBSD) repository.

### MirBSD is:
# Copyright (c) 1982-2003 by Thorsten "mirabile" Glaser <x86@@ePost.de>
# Copyright © 1968-2003  The authors of And contributors to UNIX®, the
#       C Language, BSD/Berkeley Unix; 386BSD, NetBSD 1.1 and OpenBSD.
#
# Anyone who obtained a copy of this work is hereby permitted to freely use,
# distribute, modify, merge, sublicence, give away or sell it as long as the
# authors are given due credit and the following notice is retained:
#
# This work is provided "as is", with no explicit or implicit warranty what-
# soever. Use it only at your own risk. In no event may an author or contri-
# butor be held liable for any damage, directly or indirectly, that origina-
# ted through or is caused by creation or modification of this work.

MirBSD is my private tree. MirBSD does not differ very much from OpenBSD
and intentionally tracks OpenBSD. That's why it _is_ OpenBSD, just not the
official one. It's like with DarrenBSD.

At time of this writing, no advertising for MirBSD must be done,
because the advertising clause has not yet been sorted out.

http://templeofhate.com/tglaser/MirBSD/index.php
@
text
@@


1.1.1.2
log
@Import OpenBSD source with the "new" command line as well,
in order to be able to provide a MirBSD release which bases
upon a fairly current OpenBSD base source code tree deemed
stable enough.
@
text
@d1 1
a1 1
/*	$OpenBSD: isakmpd.c,v 1.49 2003/04/14 13:08:42 ho Exp $	*/
a320 3
      /* Remove FIFO and pid files.  */
      unlink (ui_fifo);
      unlink (pid_file);
@


1.1.1.3
log
@Sync MirBSD main source tree against OpenBSD-current,
which should be fairly stable after the Hackathon now.
@
text
@d1 1
a1 1
/*	$OpenBSD: isakmpd.c,v 1.52 2003/05/18 19:37:46 ho Exp $	*/
a57 1
#include "monitor.h"
d241 1
a241 1
  rfp = monitor_fopen (report_file, "w");
d272 1
a272 1
  log_print ("SIGUSR2 received, rehashing soft expiration timers.");
d342 1
a342 1
  /* Ignore errors. XXX Will fail with USE_PRIVSEP.  */
d345 1
a345 1
  fp = monitor_fopen (pid_file, "w");
a371 21
  log_init ();

  /* Do a clean daemon shutdown on TERM reception. (Needed by monitor).  */
  signal (SIGTERM, daemon_shutdown_now);

#if defined (USE_PRIVSEP)
  if (monitor_init ())
    {
      /* The parent, with privileges.  */
      if (!debug)
	if (daemon (0, 0))
	  log_fatal ("main [priv]: daemon (0, 0) failed");

      /* Enter infinite monitor loop.  */
      monitor_loop (debug);
      exit (0); /* Never reached.  */
    }

  /* Child process only from this point on, no privileges left.  */
#endif

d393 4
a396 1
#if defined (USE_DEBUG)
@


1.1.1.4
log
@Import latest OpenBSD CVS tree by CTM in order
to sync the base system and ports tree with Them.

This includes the recent licence changes as well - by
importing the changed base and re-applying the diffs
(with cvs up -j -j) they are inherited, and we're not
bound to the removed clauses any longer.
@
text
@d1 1
a1 1
/*	$OpenBSD: isakmpd.c,v 1.53 2003/06/04 07:31:17 ho Exp $	*/
d17 5
@


1.1.1.5
log
@Import OpenBSD as of today again (seems pretty stable, I hope)

Prominent changes: more bgpd, tcpmd5; tcpdump/isakmpd fixes
@
text
@d1 1
a1 1
/*	$OpenBSD: isakmpd.c,v 1.54 2004/01/16 10:51:57 hshoexer Exp $	*/
d117 1
a117 1
	   "          [-R report-file] [-v]\n",
d132 1
a132 1
  while ((ch = getopt (argc, argv, "46c:dD:f:i:np:P:Ll:r:R:v")) != -1) {
a206 4
      break;

    case 'v':
      verbose_logging = 1;
@


1.1.1.6
log
@large-scale import of OpenBSD 3.5-current source base including many fixes
note: from now, we will not be binary compatible with OpenBSD apps any
longer (due to syscall numbering differences); both an OpenBSD compat and
a conversion tool for old MirOS #7 apps will be delivered later.

The src/ tree is locked from now.
@
text
@d1 2
a2 2
/* $OpenBSD: isakmpd.c,v 1.61 2004/04/15 18:39:26 deraadt Exp $	 */
/* $EOM: isakmpd.c,v 1.54 2000/10/05 09:28:22 niklas Exp $	 */
a41 1
#include <time.h>
d66 1
a66 1
static void     usage(void);
d72 1
a72 1
int             debug = 0;
d86 1
a86 1
static char    *report_file = "/var/run/isakmpd.report";
a97 1
 * Also on recv of an INT signal (Ctrl-C out of an '-d' session, typically).
d100 1
a100 1
void            daemon_shutdown_now(int);
d103 1
a103 1
static char    *pid_file = "/var/run/isakmpd.pid";
d107 1
a107 1
static char    *pcap_file = 0;
d111 1
a111 1
usage(void)
d113 7
a119 7
	fprintf(stderr,
	    "usage: %s [-4] [-6] [-c config-file] [-d] [-D class=level]\n"
	    "          [-f fifo] [-i pid-file] [-n] [-p listen-port]\n"
	    "          [-P local-port] [-L] [-l packetlog-file] [-r seed]\n"
	    "          [-R report-file] [-v]\n",
	    sysdep_progname());
	exit(1);
d123 1
a123 1
parse_args(int argc, char *argv[])
d125 2
a126 2
	int             ch;
	char           *ep;
d128 2
a129 2
	int             cls, level;
	int             do_packetlog = 0;
d132 17
a148 17
	while ((ch = getopt(argc, argv, "46c:dD:f:i:np:P:Ll:r:R:v")) != -1) {
		switch (ch) {
		case '4':
			bind_family |= BIND_FAMILY_INET4;
			break;

		case '6':
			bind_family |= BIND_FAMILY_INET6;
			break;

		case 'c':
			conf_path = optarg;
			break;

		case 'd':
			debug++;
			break;
d151 35
a185 31
		case 'D':
			if (sscanf(optarg, "%d=%d", &cls, &level) != 2) {
				if (sscanf(optarg, "A=%d", &level) == 1) {
					for (cls = 0; cls < LOG_ENDCLASS; cls++)
						log_debug_cmd(cls, level);
				} else
					log_print("parse_args: -D argument unparseable: %s", optarg);
			} else
				log_debug_cmd(cls, level);
			break;
#endif				/* USE_DEBUG */

		case 'f':
			ui_fifo = optarg;
			break;

		case 'i':
			pid_file = optarg;
			break;

		case 'n':
			app_none++;
			break;

		case 'p':
			udp_default_port = optarg;
			break;

		case 'P':
			udp_bind_port = optarg;
			break;
d188 32
a219 32
		case 'l':
			pcap_file = optarg;
			/* Fallthrough intended.  */

		case 'L':
			do_packetlog++;
			break;
#endif				/* USE_DEBUG */

		case 'r':
			seed = strtoul(optarg, &ep, 0);
			srandom(seed);
			if (*ep != '\0')
				log_fatal("parse_args: invalid numeric arg to -r (%s)", optarg);
			regrand = 1;
			break;

		case 'R':
			report_file = optarg;
			break;

		case 'v':
			verbose_logging = 1;
			break;

		case '?':
		default:
			usage();
		}
	}
	argc -= optind;
	argv += optind;
d222 2
a223 2
	if (do_packetlog && !pcap_file)
		pcap_file = PCAP_FILE_DEFAULT;
d228 1
a228 1
sighup(int sig)
d230 1
a230 1
	sighupped = 1;
d235 1
a235 1
report(void)
d237 2
a238 2
	FILE	*rfp, *old;
	mode_t	old_umask;
d240 16
a255 14
	old_umask = umask(S_IRWXG | S_IRWXO);
	rfp = monitor_fopen(report_file, "w");
	umask(old_umask);

	if (!rfp) {
		log_error("report: fopen (\"%s\", \"w\") failed", report_file);
		return;
	}
	/* Divert the log channel to the report file during the report.  */
	old = log_current();
	log_to(rfp);
	ui_report("r");
	log_to(old);
	fclose(rfp);
d257 1
a257 1
	sigusr1ed = 0;
d261 1
a261 1
sigusr1(int sig)
d263 1
a263 1
	sigusr1ed = 1;
d268 1
a268 1
rehash_timers(void)
d271 2
a272 2
	/* XXX - not yet */
	log_print("SIGUSR2 received, rehashing soft expiration timers.");
d274 1
a274 1
	timer_rehash_timers();
d277 1
a277 1
	sigusr2ed = 0;
d281 1
a281 1
sigusr2(int sig)
d283 1
a283 1
	sigusr2ed = 1;
d287 1
a287 1
phase2_sa_check(struct sa * sa, void *arg)
d289 1
a289 1
	return sa->phase == 2;
d293 1
a293 1
daemon_shutdown(void)
d295 2
a296 2
	/* Perform a (protocol-wise) clean shutdown of the daemon.  */
	struct sa      *sa;
d298 9
a306 9
	if (sigtermed == 1) {
		log_print("isakmpd: shutting down...");

		/* Delete all active phase 2 SAs.  */
		while ((sa = sa_find(phase2_sa_check, NULL))) {
			/* Each DELETE is another (outgoing) message.  */
			sa_delete(sa, 1);
		}
		sigtermed++;
d308 2
a309 5
	if (transport_prio_sendqs_empty()) {
		/*
		 * When the prioritized transport sendq:s are empty, i.e all
		 * the DELETE notifications have been sent, we can shutdown.
	         */
d311 7
d319 1
a319 1
		log_packet_stop();
d321 6
a326 6
		/* Remove FIFO and pid files.  */
		unlink(ui_fifo);
		unlink(pid_file);
		log_print("isakmpd: exit");
		exit(0);
	}
d329 1
a329 1
/* Called on SIGTERM, SIGINT or by ui_shutdown_daemon().  */
d331 1
a331 1
daemon_shutdown_now(int sig)
d333 1
a333 1
	sigtermed = 1;
d338 1
a338 1
write_pid_file(void)
d340 1
a340 1
	FILE           *fp;
d342 2
a343 2
	/* Ignore errors. This will fail with USE_PRIVSEP.  */
	unlink(pid_file);
d345 9
a353 8
	fp = monitor_fopen(pid_file, "w");
	if (fp != NULL) {
		if (fprintf(fp, "%ld\n", (long) getpid()) < 0)
			log_error("write_pid_file: failed to write PID to \"%.100s\"",
			    pid_file);
		fclose(fp);
	} else
		log_fatal("write_pid_file: fopen (\"%.100s\", \"w\") failed", pid_file);
d357 1
a357 1
main(int argc, char *argv[])
d359 14
a372 12
	fd_set         *rfds, *wfds;
	int             n, m;
	size_t          mask_size;
	struct timeval  tv, *timeout;

#if defined (HAVE_CLOSEFROM) && (!defined (OpenBSD) || (OpenBSD >= 200405))
	closefrom(STDERR_FILENO + 1);
#else
	m = getdtablesize();
	for (n = STDERR_FILENO + 1; n < m; n++)
		(void) close(n);
#endif
d374 2
a375 28
	/*
	 * Make sure init() won't alloc fd 0, 1 or 2, as daemon() will close
	 * them.
	 */
	for (n = 0; n <= 2; n++)
		if (fcntl(n, F_GETFL, 0) == -1 && errno == EBADF)
			(void) open("/dev/null", n ? O_WRONLY : O_RDONLY, 0);

	for (n = 1; n < _NSIG; n++)
		signal(n, SIG_DFL);

	/* Log cmd line parsing and initialization errors to stderr.  */
	log_to(stderr);
	parse_args(argc, argv);
	log_init(debug);

	/*
	 * Do a clean daemon shutdown on TERM/INT. These signals must be
	 * initialized before monitor_init(). INT is only used with '-d'.
         */
	signal(SIGTERM, daemon_shutdown_now);
	if (debug == 1)		/* i.e '-dd' will skip this.  */
		signal(SIGINT, daemon_shutdown_now);

	/* Daemonize before forking unpriv'ed child */
	if (!debug)
		if (daemon(0, 0))
			log_fatal("main: daemon (0, 0) failed");
d377 12
a388 2
	/* Set timezone before priv'separation */
	tzset();
d390 1
a390 7
#if defined (USE_PRIVSEP)
	if (monitor_init()) {
		/* The parent, with privileges enters infinite monitor loop.  */
		monitor_loop(debug);
		exit(0);	/* Never reached.  */
	}
	/* Child process only from this point on, no privileges left.  */
d393 1
a393 1
	init();
d395 9
a403 1
	write_pid_file();
d405 2
a406 2
	/* Reinitialize on HUP reception.  */
	signal(SIGHUP, sighup);
d408 2
a409 2
	/* Report state on USR1 reception.  */
	signal(SIGUSR1, sigusr1);
d411 2
a412 2
	/* Rehash soft expiration timers on USR2 reception.  */
	signal(SIGUSR2, sigusr2);
d415 3
a417 3
	/* If we wanted IKE packet capture to file, initialize it now.  */
	if (pcap_file != 0)
		log_packet_init(pcap_file);
d420 33
a452 9
	/* Allocate the file descriptor sets just big enough.  */
	n = getdtablesize();
	mask_size = howmany(n, NFDBITS) * sizeof(fd_mask);
	rfds = (fd_set *) malloc(mask_size);
	if (!rfds)
		log_fatal("main: malloc (%lu) failed", (unsigned long) mask_size);
	wfds = (fd_set *) malloc(mask_size);
	if (!wfds)
		log_fatal("main: malloc (%lu) failed", (unsigned long) mask_size);
d454 31
a484 3
#if defined (USE_PRIVSEP)
	monitor_init_done();
#endif
d486 33
a518 79
	while (1) {
		/* If someone has sent SIGHUP to us, reconfigure.  */
		if (sighupped) {
			log_print("SIGHUP received");
			reinit();
			sighupped = 0;
		}
		/* and if someone sent SIGUSR1, do a state report.  */
		if (sigusr1ed) {
			log_print("SIGUSR1 received");
			report();
		}
		/* and if someone sent SIGUSR2, do a timer rehash.  */
		if (sigusr2ed) {
			log_print("SIGUSR2 received");
			rehash_timers();
		}
		/*
		 * and if someone set 'sigtermed' (SIGTERM, SIGINT or via the UI),
		 * this indicates we should start a controlled shutdown of the daemon.
	         *
		 * Note: Since _one_ message is sent per iteration of this enclosing
		 * while-loop, and we want to send a number of DELETE notifications,
		 * we must loop atleast this number of times. The daemon_shutdown()
		 * function starts by queueing the DELETEs, all other calls just
		 * increments the 'sigtermed' variable until it reaches a "safe"
		 * value, and the daemon exits.
	         */
		if (sigtermed)
			daemon_shutdown();

		/* Setup the descriptors to look for incoming messages at.  */
		memset(rfds, 0, mask_size);
		n = transport_fd_set(rfds);
		FD_SET(ui_socket, rfds);
		if (ui_socket + 1 > n)
			n = ui_socket + 1;

		/*
		 * XXX Some day we might want to deal with an abstract application
		 * class instead, with many instantiations possible.
	         */
		if (!app_none && app_socket >= 0) {
			FD_SET(app_socket, rfds);
			if (app_socket + 1 > n)
				n = app_socket + 1;
		}
		/* Setup the descriptors that have pending messages to send.  */
		memset(wfds, 0, mask_size);
		m = transport_pending_wfd_set(wfds);
		if (m > n)
			n = m;

		/* Find out when the next timed event is.  */
		timeout = &tv;
		timer_next_event(&timeout);

		n = select(n, rfds, wfds, 0, timeout);
		if (n == -1) {
			if (errno != EINTR) {
				log_error("main: select");

				/*
				 * In order to give the unexpected error
				 * condition time to resolve without letting
				 * this process eat up all available CPU
				 * we sleep for a short while.
			         */
				sleep(1);
			}
		} else if (n) {
			transport_handle_messages(rfds);
			transport_send_messages(wfds);
			if (FD_ISSET(ui_socket, rfds))
				ui_handler();
			if (!app_none && app_socket >= 0 && FD_ISSET(app_socket, rfds))
				app_handler();
		}
		timer_handle_expirations();
d520 2
@


1.1.1.7
log
@another bunch of fixes from obsd, and a big isakmpd update (need testers!)
@
text
@d1 1
a1 1
/* $OpenBSD: isakmpd.c,v 1.68 2004/09/17 14:54:09 hshoexer Exp $	 */
a42 1
#include <netdb.h>
a74 3
/* Set when no policy file is found. */
int		acquire_only = 0;

d116 2
a117 2
	    "usage: %s [-4] [-6] [-a] [-c config-file] [-d] [-D class=level]\n"
	    "          [-f fifo] [-i pid-file] [-K] [-n] [-p listen-port]\n"
d134 1
a134 1
	while ((ch = getopt(argc, argv, "46ac:dD:f:i:Knp:P:Ll:r:R:v")) != -1) {
a143 4
		case 'a':
			acquire_only++;
			break;

d156 1
a156 2
					for (cls = 0; cls < LOG_ENDCLASS;
					     cls++)
d159 1
a159 2
					log_print("parse_args: -D argument "
					    "unparseable: %s", optarg);
a172 6
#ifdef USE_POLICY
		case 'K':
			ignore_policy++;
			break;
#endif

d199 1
a199 2
				log_fatal("parse_args: invalid numeric arg "
				    "to -r (%s)", optarg);
d252 2
d272 2
d283 1
a283 1
phase2_sa_check(struct sa *sa, void *arg)
d292 1
a292 1
	struct sa	*sa;
d332 1
a332 1
	FILE	*fp;
d340 2
a341 2
			log_error("write_pid_file: failed to write PID to "
			    "\"%.100s\"", pid_file);
d344 1
a344 2
		log_fatal("write_pid_file: fopen (\"%.100s\", \"w\") failed",
		    pid_file);
a378 4
	/* Open protocols and services databases.  */
	setprotoent(1);
	setservent(1);

d396 2
a397 2
	if (monitor_init(debug)) {
		/* The parent, with privileges enters infinite monitor loop. */
d428 1
a428 2
		log_fatal("main: malloc (%lu) failed",
		    (unsigned long)mask_size);
d431 1
a431 2
		log_fatal("main: malloc (%lu) failed",
		    (unsigned long)mask_size);
a439 1
			sighupped = 0;
d442 1
a445 1
			sigusr1ed = 0;
a450 1
			sigusr2ed = 0;
d455 2
a456 3
		 * and if someone set 'sigtermed' (SIGTERM, SIGINT or via the
		 * UI), this indicates we should start a controlled shutdown
		 * of the daemon.
d458 6
a463 7
		 * Note: Since _one_ message is sent per iteration of this
		 * enclosing while-loop, and we want to send a number of
		 * DELETE notifications, we must loop atleast this number of
		 * times. The daemon_shutdown() function starts by queueing
		 * the DELETEs, all other calls just increments the
		 * 'sigtermed' variable until it reaches a "safe" value, and
		 * the daemon exits.
d476 2
a477 3
		 * XXX Some day we might want to deal with an abstract
		 * application class instead, with many instantiations
		 * possible.
d484 1
a484 1
		/* Setup the descriptors that have pending messages to send. */
d512 1
a512 2
			if (!app_none && app_socket >= 0 &&
			    FD_ISSET(app_socket, rfds))
@


