head	1.1;
branch	1.1.1;
access;
symbols
	tg-mergetmp-mirosx-1:1.1.1.6
	tg-mergefixes-1-branch:1.1.1.6.0.4
	tg-mergefixes-1-base:1.1.1.6
	MIROS_X:1.1.1.6.0.2
	MIROS_X_BASE:1.1.1.6
	tg-mergetmp-3:1.1.1.6
	cvs-200411261545:1.1.1.6
	MIRBSD_XP_MIRPPC:1.1.1.5.0.4
	MIRBSD_XP_SPARC_BASE:1.1.1.5
	MIRBSD_XP_SPARC:1.1.1.5.0.2
	MIRBSD_7quater:1.1.1.3
	cvs-200405160640:1.1.1.5
	cvs-200401271800:1.1.1.4
	cvs-200401261630:1.1.1.4
	cvs-200401021645:1.1.1.4
	MIRBSD_7_ALPHA:1.1.1.3.0.6
	MIRBSD_7:1.1.1.3.0.4
	cvs-200312222040:1.1.1.4
	MIRBSD_7ter:1.1.1.3
	MIRBSD_7_DEV:1.1.1.3.0.2
	cvs-200310020700:1.1.1.3
	cvs-200309271030:1.1.1.3
	cvs-200309251530:1.1.1.3
	cvs-200308302005:1.1.1.2
	cvs-200308171200:1.1.1.2
	ctm-3496:1.1.1.2
	ctm-3449:1.1.1.2
	ctm-3437:1.1.1.2
	cvs-200307191805:1.1.1.2
	ctm-3425:1.1.1.2
	cvs-200307091500:1.1.1.2
	ctm-3389:1.1.1.2
	cvs-200306291430:1.1.1.2
	ctm-3341:1.1.1.2
	MIRBSD_5:1.1.1.2
	cvs-200306082100:1.1.1.2
	ctm-3316:1.1.1.2
	ctm-3272:1.1.1.1
	ctm-3264:1.1.1.1
	cvs-200305071630:1.1.1.1
	MIRBSD_4:1.1.1.1
	ctm-3203:1.1.1.1
	cvs-20030410-1130:1.1.1.1
	ctm-3155:1.1.1.1
	ctm-3132:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.1
date	2003.03.22.17.48.28;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.03.22.17.48.28;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2003.06.05.17.30.59;	author tg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2003.09.25.16.32.15;	author tg;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2003.12.22.21.10.33;	author tg;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2004.05.16.08.24.06;	author tg;	state Stab;
branches;
next	1.1.1.6;

1.1.1.6
date	2004.11.26.15.50.24;	author tg;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@/*	$OpenBSD: if.c,v 1.13 2003/02/12 15:11:31 markus Exp $	*/
/*	$EOM: if.c,v 1.12 1999/10/01 13:45:20 niklas Exp $	*/

/*
 * Copyright (c) 1998, 1999 Niklas Hallqvist.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by Ericsson Radio Systems.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * This code was written under funding by Ericsson Radio Systems.
 */

#include <sys/ioctl.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <net/if.h>
#include <stdlib.h>
#include <unistd.h>
#ifdef HAVE_GETIFADDRS
#include <ifaddrs.h>
#endif

#include "sysdep.h"

#include "log.h"
#include "if.h"

#ifndef HAVE_GETIFADDRS
/* XXX Unsafe if either x or y has side-effects.  */
#ifndef MAX
#define MAX(x, y) ((x) > (y) ? (x) : (y))
#endif

/* Most boxes has less than 16 interfaces, so this might be a good guess.  */
#define INITIAL_IFREQ_COUNT 16

/*
 * Get all network interface configurations.
 * Return 0 if successful, -1 otherwise.
 */
int
siocgifconf (struct ifconf *ifcp)
{
  int s;
  int len;
  caddr_t buf, new_buf;

  /* Get a socket to ask for the network interface configurations.  */
  s = socket (AF_INET, SOCK_DGRAM, 0);
  if (s == -1)
    {
      log_error ("siocgifconf: socket (AF_INET, SOCK_DGRAM, 0) failed");
      return -1;
    }

  len = sizeof (struct ifreq) * INITIAL_IFREQ_COUNT;
  buf = 0;
  while (1)
    {
      /*
       * Allocate a larger buffer each time around the loop and get the
       * network interfaces configurations into it.
       */
      ifcp->ifc_len = len;
      new_buf = realloc (buf, len);
      if (!new_buf)
	{
	  log_error ("siocgifconf: realloc (%p, %d) failed", buf, len);
	  goto err;
	}
      ifcp->ifc_buf = buf = new_buf;
      if (ioctl (s, SIOCGIFCONF, ifcp) == -1)
	{
	  log_error ("siocgifconf: ioctl (%d, SIOCGIFCONF, ...) failed", s);
	  goto err;
	}

      /*
       * If there is place for another ifreq we can be sure that the buffer
       * was big enough, otherwise double the size and try again.
       */
      if (len - ifcp->ifc_len >= sizeof (struct ifreq))
	break;
      len *= 2;
    }
  close (s);
  return 0;

err:
  if (buf)
    free (buf);
  close (s);
  return -1;
}
#endif

int
if_map (int (*func) (char *, struct sockaddr *, void *), void *arg)
{
  int err = 0;
#ifdef HAVE_GETIFADDRS
  struct ifaddrs *ifap, *ifa;

  if (getifaddrs(&ifap) < 0)
    return -1;

  for (ifa = ifap; ifa; ifa = ifa->ifa_next)
    if ((*func) (ifa->ifa_name, ifa->ifa_addr, arg) == -1)
      err = -1;
  freeifaddrs(ifap);
#else
  struct ifconf ifc;
  struct ifreq *ifrp;
  caddr_t limit, p;
  size_t len;

  if (siocgifconf (&ifc))
    return -1;

  limit = ifc.ifc_buf + ifc.ifc_len;
  for (p = ifc.ifc_buf; p < limit; p += len)
    {
      ifrp = (struct ifreq *)p;
      if ((*func) (ifrp->ifr_name, &ifrp->ifr_addr, arg) == -1)
	err = -1;
      len = sizeof ifrp->ifr_name
	+ MAX (sysdep_sa_len (&ifrp->ifr_addr), sizeof ifrp->ifr_addr);
    }
  free (ifc.ifc_buf);
#endif
  return err;
}
@


1.1.1.1
log
@Import OpenBSD 3.3 source repository from CTM 3132 the first time
This opens an OpenBSD-mirabile (aka MirBSD) repository.

### MirBSD is:
# Copyright (c) 1982-2003 by Thorsten "mirabile" Glaser <x86@@ePost.de>
# Copyright © 1968-2003  The authors of And contributors to UNIX®, the
#       C Language, BSD/Berkeley Unix; 386BSD, NetBSD 1.1 and OpenBSD.
#
# Anyone who obtained a copy of this work is hereby permitted to freely use,
# distribute, modify, merge, sublicence, give away or sell it as long as the
# authors are given due credit and the following notice is retained:
#
# This work is provided "as is", with no explicit or implicit warranty what-
# soever. Use it only at your own risk. In no event may an author or contri-
# butor be held liable for any damage, directly or indirectly, that origina-
# ted through or is caused by creation or modification of this work.

MirBSD is my private tree. MirBSD does not differ very much from OpenBSD
and intentionally tracks OpenBSD. That's why it _is_ OpenBSD, just not the
official one. It's like with DarrenBSD.

At time of this writing, no advertising for MirBSD must be done,
because the advertising clause has not yet been sorted out.

http://templeofhate.com/tglaser/MirBSD/index.php
@
text
@@


1.1.1.2
log
@Import latest OpenBSD CVS tree by CTM in order
to sync the base system and ports tree with Them.

This includes the recent licence changes as well - by
importing the changed base and re-applying the diffs
(with cvs up -j -j) they are inherited, and we're not
bound to the removed clauses any longer.
@
text
@d1 1
a1 1
/*	$OpenBSD: if.c,v 1.14 2003/06/03 14:28:16 ho Exp $	*/
d15 5
@


1.1.1.3
log
@Release Time. Synchronize with OpenBSD 3.4-current (base system).
@
text
@d1 1
a1 1
/*	$OpenBSD: if.c,v 1.15 2003/09/25 14:15:15 cloder Exp $	*/
d83 1
a89 1
      ifcp->ifc_len = len;
a110 2
  ifcp->ifc_len = 0;
  ifcp->ifc_buf = 0;
@


1.1.1.4
log
@Time to import OpenBSD once again. Expect breakage.
@
text
@d1 1
a1 1
/*	$OpenBSD: if.c,v 1.16 2003/11/06 16:12:07 ho Exp $	*/
d125 1
a125 1
  if (getifaddrs (&ifap) < 0)
d131 1
a131 1
  freeifaddrs (ifap);
@


1.1.1.5
log
@large-scale import of OpenBSD 3.5-current source base including many fixes
note: from now, we will not be binary compatible with OpenBSD apps any
longer (due to syscall numbering differences); both an OpenBSD compat and
a conversion tool for old MirOS #7 apps will be delivered later.

The src/ tree is locked from now.
@
text
@d1 1
a1 1
/*	$OpenBSD: if.c,v 1.19 2004/04/15 18:39:25 deraadt Exp $	*/
a44 1
#include "monitor.h"
d61 1
a61 1
siocgifconf(struct ifconf *ifcp)
d63 25
a87 8
	caddr_t	buf, new_buf;
	int	s, len;

	/* Get a socket to ask for the network interface configurations.  */
	s = monitor_socket(AF_INET, SOCK_DGRAM, 0);
	if (s == -1) {
		log_error("siocgifconf: socket (AF_INET, SOCK_DGRAM, 0) failed");
		return -1;
d89 6
a94 25
	len = sizeof(struct ifreq) * INITIAL_IFREQ_COUNT;
	buf = 0;
	while (1) {
		/*
		 * Allocate a larger buffer each time around the loop and get the
		 * network interfaces configurations into it.
	         */
		new_buf = realloc(buf, len);
		if (!new_buf) {
			log_error("siocgifconf: realloc (%p, %d) failed", buf, len);
			goto err;
		}
		ifcp->ifc_len = len;
		ifcp->ifc_buf = buf = new_buf;
		if (ioctl(s, SIOCGIFCONF, ifcp) == -1) {
			log_error("siocgifconf: ioctl (%d, SIOCGIFCONF, ...) failed", s);
			goto err;
		}
		/*
		 * If there is place for another ifreq we can be sure that the buffer
		 * was big enough, otherwise double the size and try again.
	         */
		if (len - ifcp->ifc_len >= sizeof(struct ifreq))
			break;
		len *= 2;
d96 11
a106 2
	close(s);
	return 0;
d109 6
a114 6
	if (buf)
		free(buf);
	ifcp->ifc_len = 0;
	ifcp->ifc_buf = 0;
	close(s);
	return -1;
d119 1
a119 1
if_map(int (*func)(char *, struct sockaddr *, void *), void *arg)
d121 1
a121 2
	int	err = 0;

d123 1
a123 1
	struct ifaddrs *ifap, *ifa;
d125 2
a126 2
	if (getifaddrs(&ifap) < 0)
		return -1;
d128 4
a131 4
	for (ifa = ifap; ifa; ifa = ifa->ifa_next)
		if ((*func) (ifa->ifa_name, ifa->ifa_addr, arg) == -1)
			err = -1;
	freeifaddrs(ifap);
d133 18
a150 17
	struct ifconf	ifc;
	struct ifreq	*ifrp;
	caddr_t		limit, p;
	size_t		len;

	if (siocgifconf(&ifc))
		return -1;

	limit = ifc.ifc_buf + ifc.ifc_len;
	for (p = ifc.ifc_buf; p < limit; p += len) {
		ifrp = (struct ifreq *) p;
		if ((*func) (ifrp->ifr_name, &ifrp->ifr_addr, arg) == -1)
			err = -1;
		len = sizeof ifrp->ifr_name +
		    MAX(sysdep_sa_len(&ifrp->ifr_addr), sizeof ifrp->ifr_addr);
	}
	free(ifc.ifc_buf);
d152 1
a152 1
	return err;
@


1.1.1.6
log
@another bunch of fixes from obsd, and a big isakmpd update (need testers!)
@
text
@d1 1
a1 1
/*	$OpenBSD: if.c,v 1.22 2004/06/14 09:55:41 ho Exp $	*/
d68 1
a68 1
	s = socket(AF_INET, SOCK_DGRAM, 0);
d70 1
a70 2
		log_error("siocgifconf: "
		    "socket (AF_INET, SOCK_DGRAM, 0) failed");
d77 2
a78 2
		 * Allocate a larger buffer each time around the loop and get
		 * the network interfaces configurations into it.
d82 1
a82 2
			log_error("siocgifconf: realloc (%p, %d) failed", buf,
			    len);
d88 1
a88 2
			log_error("siocgifconf: ioctl (%d, SIOCGIFCONF, ...) "
			    "failed", s);
a90 1

d92 2
a93 3
		 * If there is place for another ifreq we can be sure that the
		 * buffer was big enough, otherwise double the size and try
		 * again.
d124 1
a124 1
		if ((*func)(ifa->ifa_name, ifa->ifa_addr, arg) == -1)
d138 2
a139 2
		ifrp = (struct ifreq *)p;
		if ((*func)(ifrp->ifr_name, &ifrp->ifr_addr, arg) == -1)
@


