head	1.1;
branch	1.1.1;
access;
symbols
	tg-mergetmp-mirosx-1:1.1.1.5
	tg-mergefixes-1-branch:1.1.1.5.0.4
	tg-mergefixes-1-base:1.1.1.5
	MIROS_X:1.1.1.5.0.2
	MIROS_X_BASE:1.1.1.5
	tg-mergetmp-3:1.1.1.5
	cvs-200411261545:1.1.1.5
	MIRBSD_XP_MIRPPC:1.1.1.4.0.4
	MIRBSD_XP_SPARC_BASE:1.1.1.4
	MIRBSD_XP_SPARC:1.1.1.4.0.2
	MIRBSD_7quater:1.1.1.2
	cvs-200405160640:1.1.1.4
	cvs-200401271800:1.1.1.3
	cvs-200401261630:1.1.1.3
	cvs-200401021645:1.1.1.3
	MIRBSD_7_ALPHA:1.1.1.2.0.6
	MIRBSD_7:1.1.1.2.0.4
	cvs-200312222040:1.1.1.3
	MIRBSD_7ter:1.1.1.2
	MIRBSD_7_DEV:1.1.1.2.0.2
	cvs-200310020700:1.1.1.2
	cvs-200309271030:1.1.1.2
	cvs-200309251530:1.1.1.2
	cvs-200308302005:1.1.1.2
	cvs-200308171200:1.1.1.2
	ctm-3496:1.1.1.2
	ctm-3449:1.1.1.2
	ctm-3437:1.1.1.2
	cvs-200307191805:1.1.1.2
	ctm-3425:1.1.1.2
	cvs-200307091500:1.1.1.2
	ctm-3389:1.1.1.2
	cvs-200306291430:1.1.1.2
	ctm-3341:1.1.1.2
	MIRBSD_5:1.1.1.2
	cvs-200306082100:1.1.1.2
	ctm-3316:1.1.1.2
	ctm-3272:1.1.1.1
	ctm-3264:1.1.1.1
	cvs-200305071630:1.1.1.1
	MIRBSD_4:1.1.1.1
	ctm-3203:1.1.1.1
	cvs-20030410-1130:1.1.1.1
	ctm-3155:1.1.1.1
	ctm-3132:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.1
date	2003.03.22.17.48.28;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.03.22.17.48.28;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2003.06.05.17.31.05;	author tg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2003.12.22.21.10.36;	author tg;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2004.05.16.08.24.35;	author tg;	state Stab;
branches;
next	1.1.1.5;

1.1.1.5
date	2004.11.26.15.51.06;	author tg;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@/*	$OpenBSD: message.h,v 1.15 2001/10/26 11:37:16 ho Exp $	*/
/*	$EOM: message.h,v 1.51 2000/10/10 12:36:39 provos Exp $	*/

/*
 * Copyright (c) 1998, 1999 Niklas Hallqvist.  All rights reserved.
 * Copyright (c) 1999 Angelos D. Keromytis.  All rights reserved.
 * Copyright (c) 2001 Håkan Olsson.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by Ericsson Radio Systems.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * This code was written under funding by Ericsson Radio Systems.
 */

#ifndef _MESSAGE_H_
#define _MESSAGE_H_

#include <sys/param.h>
#include <sys/queue.h>
#include <sys/socket.h>
#include <sys/uio.h>

#include "isakmp.h"

struct event;
struct message;
struct proto;
struct sa;
struct transport;

struct payload {
  /* Link all payloads of the same type through here.  */
  TAILQ_ENTRY (payload) link;

  /* The pointer to the actual payload data.  */
  u_int8_t *p;

  /*
   * A pointer to the parent payload, used for proposal and transform payloads.
   */
  struct payload *context;

  /* Payload flags described below.  */
  int flags;
};

/* Payload flags.  */

/*
 * Set this when a payload has been handled, so we later can sweep over
 * unhandled ones.
 */
#define PL_MARK 1

/* A post-send chain of functions to be called.  */
struct post_send {
  /* Link to the next function in the chain.  */
  TAILQ_ENTRY (post_send) link;

  /* The actual function.  */
  void (*func) (struct message *);
};

struct message {
  /* Link message in send queues via this link.  */
  TAILQ_ENTRY (message) link;

  /* Message flags described below.  */
  u_int flags;

  /*
   * This is the transport the message either arrived on or will be sent to.
   */
  struct transport *transport;

  /*
   * This is the ISAKMP SA protecting this message.
   * XXX Needs to be redone to some keystate pointer or something.
   */
  struct sa *isakmp_sa;

  /* This is the exchange where this message appears.  */
  struct exchange *exchange;

  /*
   * A segmented buffer structure holding the messages raw contents.  On input
   * only segment 0 will be filled, holding all of the message.  On output, as
   * long as the message body is unencrypted each segment will be one payload,
   * after encryption segment 0 will be the unencrypted header, and segment 1
   * will be the encrypted payloads, all of them.
   */
  struct iovec *iov;

  /* The segment count.  */
  u_int iovlen;

  /* Pointer to the last "next payload" field.  */
  u_int8_t *nextp;

  /* "Smart" pointers to each payload, sorted by type.  */
  TAILQ_HEAD (payload_head, payload) payload[ISAKMP_PAYLOAD_RESERVED_MIN];

  /* Number of times this message has been sent.  */
  int xmits;

  /* The timeout event causing retransmission of this message.  */
  struct event *retrans;

  /* The (possibly encrypted) message text, used for duplicate testing.  */
  u_int8_t *orig;
  size_t orig_sz;

  /*
   * Extra baggage needed to travel with the message.  Used transiently
   * in context sensitive ways.
   */
  void *extra;

  /*
   * Hooks for stuff needed to be done after the message has gone out to
   * the wire.
   */
  TAILQ_HEAD (post_send_head, post_send) post_send;
};

/* Message flags.  */

/*
 * This is the last message of an exchange, meaning it should not be
 * retransmitted other than if we see duplicates from our peer's last
 * message.
 */
#define MSG_LAST	1

/* The message has already been encrypted.  */
#define MSG_ENCRYPTED	2

/* The message is on the send queue.  */
#define MSG_IN_TRANSIT	4

/* This message should be kept on the prioritized sendq.  */
#define MSG_PRIORITIZED	8

TAILQ_HEAD(msg_head, message);

extern int message_add_payload (struct message *, u_int8_t, u_int8_t *,
				size_t, int);
extern int message_add_sa_payload (struct message *);
extern struct message *message_alloc (struct transport *, u_int8_t *, size_t);
extern struct message *message_alloc_reply (struct message *);
extern u_int8_t *message_copy (struct message *, size_t, size_t *);
extern void message_drop (struct message *, int, struct proto *, int, int);
extern void message_dump_raw (char *, struct message *, int);
extern void message_free (struct message *);
extern int message_negotiate_sa (struct message *,
				 int (*) (struct exchange *, struct sa *,
					  struct sa *));
extern int message_recv (struct message *);
extern int message_register_post_send (struct message *,
				       void (*) (struct message *));
extern void message_post_send (struct message *);
extern void message_send (struct message *);
extern void message_send_expire (struct message *);
extern void message_send_delete (struct sa *);
extern int message_send_info (struct message *);
extern void message_send_notification (struct message *, struct sa *,
				       u_int16_t, struct proto *, int);
extern void message_setup_header (struct message *, u_int8_t, u_int8_t,
				  u_int8_t *);

#endif /* _MESSAGE_H_ */
@


1.1.1.1
log
@Import OpenBSD 3.3 source repository from CTM 3132 the first time
This opens an OpenBSD-mirabile (aka MirBSD) repository.

### MirBSD is:
# Copyright (c) 1982-2003 by Thorsten "mirabile" Glaser <x86@@ePost.de>
# Copyright © 1968-2003  The authors of And contributors to UNIX®, the
#       C Language, BSD/Berkeley Unix; 386BSD, NetBSD 1.1 and OpenBSD.
#
# Anyone who obtained a copy of this work is hereby permitted to freely use,
# distribute, modify, merge, sublicence, give away or sell it as long as the
# authors are given due credit and the following notice is retained:
#
# This work is provided "as is", with no explicit or implicit warranty what-
# soever. Use it only at your own risk. In no event may an author or contri-
# butor be held liable for any damage, directly or indirectly, that origina-
# ted through or is caused by creation or modification of this work.

MirBSD is my private tree. MirBSD does not differ very much from OpenBSD
and intentionally tracks OpenBSD. That's why it _is_ OpenBSD, just not the
official one. It's like with DarrenBSD.

At time of this writing, no advertising for MirBSD must be done,
because the advertising clause has not yet been sorted out.

http://templeofhate.com/tglaser/MirBSD/index.php
@
text
@@


1.1.1.2
log
@Import latest OpenBSD CVS tree by CTM in order
to sync the base system and ports tree with Them.

This includes the recent licence changes as well - by
importing the changed base and re-applying the diffs
(with cvs up -j -j) they are inherited, and we're not
bound to the removed clauses any longer.
@
text
@d1 1
a1 1
/*	$OpenBSD: message.h,v 1.16 2003/06/04 07:31:17 ho Exp $	*/
d17 5
@


1.1.1.3
log
@Time to import OpenBSD once again. Expect breakage.
@
text
@d1 1
a1 1
/*	$OpenBSD: message.h,v 1.17 2003/11/06 16:12:07 ho Exp $	*/
d163 1
a163 1
TAILQ_HEAD (msg_head, message);
@


1.1.1.4
log
@large-scale import of OpenBSD 3.5-current source base including many fixes
note: from now, we will not be binary compatible with OpenBSD apps any
longer (due to syscall numbering differences); both an OpenBSD compat and
a conversion tool for old MirOS #7 apps will be delivered later.

The src/ tree is locked from now.
@
text
@d1 2
a2 2
/* $OpenBSD: message.h,v 1.18 2004/04/15 18:39:26 deraadt Exp $	 */
/* $EOM: message.h,v 1.51 2000/10/10 12:36:39 provos Exp $	 */
d51 2
a52 2
	/* Link all payloads of the same type through here.  */
	TAILQ_ENTRY(payload) link;
d54 2
a55 2
	/* The pointer to the actual payload data.  */
	u_int8_t       *p;
d57 4
a60 4
	/*
	 * A pointer to the parent payload, used for proposal and transform payloads.
         */
	struct payload *context;
d62 2
a63 2
	/* Payload flags described below.  */
	int             flags;
d76 2
a77 2
	/* Link to the next function in the chain.  */
	TAILQ_ENTRY(post_send) link;
d79 2
a80 2
	/* The actual function.  */
	void            (*func) (struct message *);
d84 2
a85 2
	/* Link message in send queues via this link.  */
	TAILQ_ENTRY(message) link;
d87 2
a88 2
	/* Message flags described below.  */
	u_int           flags;
d90 53
a142 53
	/*
	 * This is the transport the message either arrived on or will be sent to.
         */
	struct transport *transport;

	/*
	 * This is the ISAKMP SA protecting this message.
	 * XXX Needs to be redone to some keystate pointer or something.
         */
	struct sa      *isakmp_sa;

	/* This is the exchange where this message appears.  */
	struct exchange *exchange;

	/*
	 * A segmented buffer structure holding the messages raw contents.  On input
	 * only segment 0 will be filled, holding all of the message.  On output, as
	 * long as the message body is unencrypted each segment will be one payload,
	 * after encryption segment 0 will be the unencrypted header, and segment 1
	 * will be the encrypted payloads, all of them.
         */
	struct iovec   *iov;

	/* The segment count.  */
	u_int           iovlen;

	/* Pointer to the last "next payload" field.  */
	u_int8_t       *nextp;

	/* "Smart" pointers to each payload, sorted by type.  */
	                TAILQ_HEAD(payload_head, payload) payload[ISAKMP_PAYLOAD_RESERVED_MIN];

	/* Number of times this message has been sent.  */
	int             xmits;

	/* The timeout event causing retransmission of this message.  */
	struct event   *retrans;

	/* The (possibly encrypted) message text, used for duplicate testing.  */
	u_int8_t       *orig;
	size_t          orig_sz;

	/*
	 * Extra baggage needed to travel with the message.  Used transiently
	 * in context sensitive ways.
         */
	void           *extra;

	/*
	 * Hooks for stuff needed to be done after the message has gone out to
	 * the wire.
         */
	                TAILQ_HEAD(post_send_head, post_send) post_send;
d163 1
a163 1
TAILQ_HEAD(msg_head, message);
d165 24
a188 26
extern int
message_add_payload(struct message *, u_int8_t, u_int8_t *,
		    size_t, int);
extern int      message_add_sa_payload(struct message *);
extern struct message *message_alloc(struct transport *, u_int8_t *, size_t);
extern struct message *message_alloc_reply(struct message *);
extern u_int8_t *message_copy(struct message *, size_t, size_t *);
extern void     message_drop(struct message *, int, struct proto *, int, int);
extern void     message_dump_raw(char *, struct message *, int);
extern void     message_free(struct message *);
extern int
message_negotiate_sa(struct message *,
		     int (*) (struct exchange *, struct sa *,
			      struct sa *));
	extern int      message_recv(struct message *);
	extern int      message_register_post_send(struct message *,
			                       void (*) (struct message *));
	extern void     message_post_send(struct message *);
	extern void     message_send(struct message *);
	extern void     message_send_expire(struct message *);
	extern void     message_send_delete(struct sa *);
	extern int      message_send_info(struct message *);
	extern void     message_send_notification(struct message *, struct sa *,
			                    u_int16_t, struct proto *, int);
	extern void     message_setup_header(struct message *, u_int8_t, u_int8_t,
					                     u_int8_t *);
d190 1
a190 1
#endif				/* _MESSAGE_H_ */
@


1.1.1.5
log
@another bunch of fixes from obsd, and a big isakmpd update (need testers!)
@
text
@d1 1
a1 1
/* $OpenBSD: message.h,v 1.22 2004/08/10 15:59:10 ho Exp $	 */
d7 1
a7 1
 * Copyright (c) 2001, 2004 Håkan Olsson.  All rights reserved.
d58 1
a58 2
	 * A pointer to the parent payload, used for proposal and transform
	 * payloads.
d91 1
a91 2
	 * This is the transport the message either arrived on or will be sent
	 * to.
d105 5
a109 6
	 * A segmented buffer structure holding the messages raw contents.  On
	 * input only segment 0 will be filled, holding all of the message.
	 * On output, as long as the message body is unencrypted each segment
	 * will be one payload, after encryption segment 0 will be the
	 * unencrypted header, and segment 1 will be the encrypted payloads,
	 * all of them.
d120 1
a120 1
	TAILQ_HEAD(payload_head, payload) *payload;
d128 1
a128 1
	/* The (possibly encrypted) message text, used for duplicate testing. */
d142 1
a142 1
	TAILQ_HEAD(post_send_head, post_send) post_send;
d152 1
a152 1
#define MSG_LAST	0x01
d155 1
a155 1
#define MSG_ENCRYPTED	0x02
d158 1
a158 1
#define MSG_IN_TRANSIT	0x04
d161 1
a161 4
#define MSG_PRIORITIZED	0x08

/* This message has successfully been authenticated. */
#define MSG_AUTHENTICATED	0x10
d165 2
a166 4
/* The number of different ISAKMP payloads supported.  */
extern u_int8_t payload_index_max;

extern int	message_add_payload(struct message *, u_int8_t, u_int8_t *,
d175 16
a190 21
extern void	message_init(void);
extern int	message_negotiate_sa(struct message *,
		    int (*)(struct exchange *, struct sa *, struct sa *));
extern int      message_recv(struct message *);
extern int      message_register_post_send(struct message *,
		    void (*) (struct message *));
extern void     message_post_send(struct message *);
extern void     message_send(struct message *);
extern void     message_send_expire(struct message *);
extern void     message_send_delete(struct sa *);
extern int      message_send_info(struct message *);
extern void     message_send_notification(struct message *, struct sa *,
		    u_int16_t, struct proto *, int);
extern void     message_setup_header(struct message *, u_int8_t, u_int8_t,
		    u_int8_t *);
struct payload *payload_first(struct message *, u_int8_t);
struct payload *payload_last(struct message *, u_int8_t);

#if defined (USE_DPD)
extern void	message_send_dpd_notify(struct sa*, u_int16_t, u_int32_t);
#endif
@


