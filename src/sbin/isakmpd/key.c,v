head	1.1;
branch	1.1.1;
access;
symbols
	tg-mergetmp-mirosx-1:1.1.1.4
	tg-mergefixes-1-branch:1.1.1.4.0.4
	tg-mergefixes-1-base:1.1.1.4
	MIROS_X:1.1.1.4.0.2
	MIROS_X_BASE:1.1.1.4
	tg-mergetmp-3:1.1.1.4
	cvs-200411261545:1.1.1.4
	MIRBSD_XP_MIRPPC:1.1.1.3.0.4
	MIRBSD_XP_SPARC_BASE:1.1.1.3
	MIRBSD_XP_SPARC:1.1.1.3.0.2
	MIRBSD_7quater:1.1.1.1
	cvs-200405160640:1.1.1.3
	cvs-200401271800:1.1.1.2
	cvs-200401261630:1.1.1.2
	cvs-200401021645:1.1.1.2
	MIRBSD_7_ALPHA:1.1.1.1.0.6
	MIRBSD_7:1.1.1.1.0.4
	cvs-200312222040:1.1.1.2
	MIRBSD_7ter:1.1.1.1
	MIRBSD_7_DEV:1.1.1.1.0.2
	cvs-200310020700:1.1.1.1
	cvs-200309271030:1.1.1.1
	cvs-200309251530:1.1.1.1
	cvs-200308302005:1.1.1.1
	cvs-200308171200:1.1.1.1
	ctm-3496:1.1.1.1
	ctm-3449:1.1.1.1
	ctm-3437:1.1.1.1
	cvs-200307191805:1.1.1.1
	ctm-3425:1.1.1.1
	cvs-200307091500:1.1.1.1
	ctm-3389:1.1.1.1
	cvs-200306291430:1.1.1.1
	ctm-3341:1.1.1.1
	MIRBSD_5:1.1.1.1
	cvs-200306082100:1.1.1.1
	ctm-3316:1.1.1.1
	ctm-3272:1.1.1.1
	ctm-3264:1.1.1.1
	cvs-200305071630:1.1.1.1
	MIRBSD_4:1.1.1.1
	ctm-3203:1.1.1.1
	cvs-20030410-1130:1.1.1.1
	ctm-3155:1.1.1.1
	ctm-3132:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.1
date	2003.03.22.17.48.28;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.03.22.17.48.28;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2003.12.22.21.10.35;	author tg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2004.05.16.08.24.23;	author tg;	state Stab;
branches;
next	1.1.1.4;

1.1.1.4
date	2004.11.26.15.50.52;	author tg;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@/*	$OpenBSD: key.c,v 1.12 2002/09/11 09:50:44 ho Exp $	*/
/*
 * The author of this code is Angelos D. Keromytis (angelos@@cis.upenn.edu)
 *
 * Copyright (c) 2000-2001 Angelos D. Keromytis.
 *
 * Permission to use, copy, and modify this software with or without fee
 * is hereby granted, provided that this entire notice is included in
 * all copies of any software which is or includes a copy or
 * modification of this software.
 * You may use this code under the GNU public license if you so wish. Please
 * contribute changes back to the authors under this freer than GPL license
 * so that we may further the use of strong encryption without limitations to
 * all.
 *
 * THIS SOFTWARE IS BEING PROVIDED "AS IS", WITHOUT ANY EXPRESS OR
 * IMPLIED WARRANTY. IN PARTICULAR, NONE OF THE AUTHORS MAKES ANY
 * REPRESENTATION OR WARRANTY OF ANY KIND CONCERNING THE
 * MERCHANTABILITY OF THIS SOFTWARE OR ITS FITNESS FOR ANY PARTICULAR
 * PURPOSE.
 */

#include <string.h>

#include "sysdep.h"

#include "key.h"
#include "libcrypto.h"
#include "log.h"
#include "util.h"
#include "x509.h"

void
key_free (int type, int private, void *key)
{
  switch (type)
    {
    case ISAKMP_KEY_PASSPHRASE:
      free (key);
      break;
    case ISAKMP_KEY_RSA:
      RSA_free (key);
      break;
    case ISAKMP_KEY_NONE:
    default:
      log_error ("key_free: unknown/unsupportedkey type %d", type);
      break;
    }
}

/* Convert from internal form to serialized */
void
key_serialize (int type, int private, void *key, u_int8_t **data, size_t *datalen)
{
  u_int8_t *p;

  switch (type)
    {
    case ISAKMP_KEY_PASSPHRASE:
      *datalen = strlen ((char *)key);
      *data = (u_int8_t *)strdup ((char *)key);
      break;
    case ISAKMP_KEY_RSA:
      switch (private)
	{
	case ISAKMP_KEYTYPE_PUBLIC:
	  *datalen = i2d_RSAPublicKey ((RSA *)key, NULL);
	  *data = p = malloc (*datalen);
	  if (!p)
	    {
	      log_error("key_serialize: malloc (%lu) failed",
		(unsigned long)*datalen);
	      return;
	    }
	  *datalen = i2d_RSAPublicKey ((RSA *)key, &p);
	  break;

	case ISAKMP_KEYTYPE_PRIVATE:
	  *datalen = i2d_RSAPrivateKey ((RSA *)key, NULL);
	  *data = p = malloc (*datalen);
	  if (!p)
	    {
	      log_error("key_serialize: malloc (%lu) failed",
		(unsigned long)*datalen);
	      return;
	    }
	  *datalen = i2d_RSAPrivateKey ((RSA *)key, &p);
	  break;
	}
      break;
    default:
      log_error ("key_serialize: unknown/unsupported key type %d", type);
      break;
    }
}

/* Convert from serialized to printable */
char *
key_printable (int type, int private, u_int8_t *data, int datalen)
{
  char *s;
  int i;

  switch (type)
    {
    case ISAKMP_KEY_PASSPHRASE:
      return strdup ((char *)data);

    case ISAKMP_KEY_RSA:
      s = malloc (datalen * 2 + 1);
      if (!s)
	{
	  log_error ("key_printable: malloc (%d) failed", datalen * 2 + 1);
	  return 0;
	}
      for (i = 0; i < datalen; i++)
	snprintf (s + (2 * i), 2 * (datalen - i) + 1, "%02x", data[i]);
      return s;

    default:
      log_error ("key_printable: unknown/unsupported key type %d", type);
      return 0;
    }
}

/* Convert from serialized to internal.  */
void *
key_internalize (int type, int private, u_int8_t *data, int datalen)
{
  switch (type)
    {
    case ISAKMP_KEY_PASSPHRASE:
      return strdup ((char *)data);
    case ISAKMP_KEY_RSA:
      switch (private)
	{
#if OPENSSL_VERSION_NUMBER >= 0x00907000L
	case ISAKMP_KEYTYPE_PUBLIC:
	  return d2i_RSAPublicKey (NULL, (const u_int8_t **)&data, datalen);
	case ISAKMP_KEYTYPE_PRIVATE:
	  return d2i_RSAPrivateKey (NULL, (const u_int8_t **)&data, datalen);
#else
	case ISAKMP_KEYTYPE_PUBLIC:
	  return d2i_RSAPublicKey (NULL, &data, datalen);
	case ISAKMP_KEYTYPE_PRIVATE:
	  return d2i_RSAPrivateKey (NULL, &data, datalen);
#endif
	default:
	  log_error ("key_internalize: not public or private RSA key passed");
	  return 0;
	}
      break;
    default:
      log_error ("key_internalize: unknown/unsupported key type %d", type);
      break;
    }

  return 0;
}

/* Convert from printable to serialized */
void
key_from_printable (int type, int private, char *key, u_int8_t **data,
		    u_int32_t *datalen)
{
  switch (type)
    {
    case ISAKMP_KEY_PASSPHRASE:
      *datalen = strlen (key);
      *data = (u_int8_t *)strdup (key);
      break;

    case ISAKMP_KEY_RSA:
      *datalen = (strlen (key) + 1) / 2; /* Round up, just in case */
      *data = malloc (*datalen);
      if (!*data)
	{
	  log_error ("key_from_printable: malloc (%d) failed", *datalen);
	  return;
	}
      *datalen = hex2raw (key, *data, *datalen);
      break;

    default:
      log_error ("key_from_printable: unknown/unsupported key type %d", type);
      break;
    }
}
@


1.1.1.1
log
@Import OpenBSD 3.3 source repository from CTM 3132 the first time
This opens an OpenBSD-mirabile (aka MirBSD) repository.

### MirBSD is:
# Copyright (c) 1982-2003 by Thorsten "mirabile" Glaser <x86@@ePost.de>
# Copyright © 1968-2003  The authors of And contributors to UNIX®, the
#       C Language, BSD/Berkeley Unix; 386BSD, NetBSD 1.1 and OpenBSD.
#
# Anyone who obtained a copy of this work is hereby permitted to freely use,
# distribute, modify, merge, sublicence, give away or sell it as long as the
# authors are given due credit and the following notice is retained:
#
# This work is provided "as is", with no explicit or implicit warranty what-
# soever. Use it only at your own risk. In no event may an author or contri-
# butor be held liable for any damage, directly or indirectly, that origina-
# ted through or is caused by creation or modification of this work.

MirBSD is my private tree. MirBSD does not differ very much from OpenBSD
and intentionally tracks OpenBSD. That's why it _is_ OpenBSD, just not the
official one. It's like with DarrenBSD.

At time of this writing, no advertising for MirBSD must be done,
because the advertising clause has not yet been sorted out.

http://templeofhate.com/tglaser/MirBSD/index.php
@
text
@@


1.1.1.2
log
@Time to import OpenBSD once again. Expect breakage.
@
text
@d1 1
a1 1
/*	$OpenBSD: key.c,v 1.13 2003/11/06 16:12:07 ho Exp $	*/
d71 2
a72 2
	      log_error ("key_serialize: malloc (%lu) failed",
			 (unsigned long)*datalen);
d83 2
a84 2
	      log_error ("key_serialize: malloc (%lu) failed",
			 (unsigned long)*datalen);
@


1.1.1.3
log
@large-scale import of OpenBSD 3.5-current source base including many fixes
note: from now, we will not be binary compatible with OpenBSD apps any
longer (due to syscall numbering differences); both an OpenBSD compat and
a conversion tool for old MirOS #7 apps will be delivered later.

The src/ tree is locked from now.
@
text
@d1 1
a1 1
/* $OpenBSD: key.c,v 1.15 2004/04/15 18:39:26 deraadt Exp $	 */
d34 1
a34 1
key_free(int type, int private, void *key)
d36 13
a48 12
	switch (type) {
		case ISAKMP_KEY_PASSPHRASE:
		free(key);
		break;
	case ISAKMP_KEY_RSA:
		RSA_free(key);
		break;
	case ISAKMP_KEY_NONE:
	default:
		log_error("key_free: unknown/unsupportedkey type %d", type);
		break;
	}
d53 1
a53 1
key_serialize(int type, int private, void *key, u_int8_t **data, size_t *datalen)
d55 1
a55 1
	u_int8_t       *p;
d57 32
a88 33
	switch (type) {
	case ISAKMP_KEY_PASSPHRASE:
		*datalen = strlen((char *) key);
		*data = (u_int8_t *) strdup((char *) key);
		break;
	case ISAKMP_KEY_RSA:
		switch (private) {
		case ISAKMP_KEYTYPE_PUBLIC:
			*datalen = i2d_RSAPublicKey((RSA *) key, NULL);
			*data = p = malloc(*datalen);
			if (!p) {
				log_error("key_serialize: malloc (%lu) failed",
				    (unsigned long) *datalen);
				return;
			}
			*datalen = i2d_RSAPublicKey((RSA *) key, &p);
			break;

		case ISAKMP_KEYTYPE_PRIVATE:
			*datalen = i2d_RSAPrivateKey((RSA *) key, NULL);
			*data = p = malloc(*datalen);
			if (!p) {
				log_error("key_serialize: malloc (%lu) failed",
				    (unsigned long) *datalen);
				return;
			}
			*datalen = i2d_RSAPrivateKey((RSA *) key, &p);
			break;
		}
		break;
	default:
		log_error("key_serialize: unknown/unsupported key type %d", type);
		break;
d90 5
d99 1
a99 1
key_printable(int type, int private, u_int8_t *data, int datalen)
d101 2
a102 18
	char           *s;
	int             i;

	switch (type) {
	case ISAKMP_KEY_PASSPHRASE:
		return strdup((char *) data);

	case ISAKMP_KEY_RSA:
		s = malloc(datalen * 2 + 1);
		if (!s) {
			log_error("key_printable: malloc (%d) failed",
			    datalen * 2 + 1);
			return 0;
		}
		for (i = 0; i < datalen; i++)
			snprintf(s + (2 * i), 2 * (datalen - i) + 1, "%02x",
			    data[i]);
		return s;
d104 11
a114 3
	default:
		log_error("key_printable: unknown/unsupported key type %d", type);
		return 0;
d116 8
d128 1
a128 1
key_internalize(int type, int private, u_int8_t *data, int datalen)
d130 7
a136 5
	switch (type) {
	case ISAKMP_KEY_PASSPHRASE:
		return strdup((char *) data);
	case ISAKMP_KEY_RSA:
		switch (private) {
d138 4
a141 6
		case ISAKMP_KEYTYPE_PUBLIC:
			return d2i_RSAPublicKey(NULL,
			    (const u_int8_t **)&data, datalen);
		case ISAKMP_KEYTYPE_PRIVATE:
			return d2i_RSAPrivateKey(NULL,
			    (const u_int8_t **)&data, datalen);
d143 4
a146 4
		case ISAKMP_KEYTYPE_PUBLIC:
			return d2i_RSAPublicKey(NULL, &data, datalen);
		case ISAKMP_KEYTYPE_PRIVATE:
			return d2i_RSAPrivateKey(NULL, &data, datalen);
a147 6
		default:
			log_error("key_internalize: not public or private "
			    "RSA key passed");
			return 0;
		}
		break;
d149 2
a150 3
		log_error("key_internalize: unknown/unsupported key type %d",
		    type);
		break;
d152 5
d158 1
a158 1
	return 0;
d163 2
a164 2
key_from_printable(int type, int private, char *key, u_int8_t **data,
    u_int32_t *datalen)
d166 17
a182 15
	switch (type) {
	case ISAKMP_KEY_PASSPHRASE:
		*datalen = strlen(key);
		*data = (u_int8_t *) strdup(key);
		break;

	case ISAKMP_KEY_RSA:
		*datalen = (strlen(key) + 1) / 2;	/* Round up, just in case */
		*data = malloc(*datalen);
		if (!*data) {
			log_error("key_from_printable: malloc (%d) failed", *datalen);
			return;
		}
		*datalen = hex2raw(key, *data, *datalen);
		break;
d184 4
a187 5
	default:
		log_error("key_from_printable: unknown/unsupported key type %d", type);
		*data = 0;
		break;
	}
@


1.1.1.4
log
@another bunch of fixes from obsd, and a big isakmpd update (need testers!)
@
text
@d1 1
a1 1
/* $OpenBSD: key.c,v 1.19 2004/09/17 13:53:08 ho Exp $	 */
a23 1
#include <stdlib.h>
a30 1
#ifdef USE_X509
a31 1
#endif
d37 1
a37 1
	case ISAKMP_KEY_PASSPHRASE:
a40 1
#ifdef USE_X509
a42 1
#endif
d52 1
a52 2
key_serialize(int type, int private, void *key, u_int8_t **data,
    size_t *datalenp)
a53 1
#ifdef USE_X509
a54 2
	size_t		datalen;
#endif
d58 2
a59 2
		*datalenp = strlen((char *)key);
		*data = (u_int8_t *)strdup((char *)key);
a61 1
#ifdef USE_X509
d64 2
a65 2
			datalen = i2d_RSAPublicKey((RSA *)key, NULL);
			*data = p = malloc(datalen);
d68 1
a68 1
				    (unsigned long)datalen);
d71 1
a71 1
			*datalenp = i2d_RSAPublicKey((RSA *) key, &p);
d75 2
a76 2
			datalen = i2d_RSAPrivateKey((RSA *)key, NULL);
			*data = p = malloc(datalen);
d79 1
a79 1
				    (unsigned long)datalen);
d82 1
a82 1
			*datalenp = i2d_RSAPrivateKey((RSA *)key, &p);
a84 1
#endif
d87 1
a87 2
		log_error("key_serialize: unknown/unsupported key type %d",
		    type);
d96 2
a97 4
#ifdef USE_X509
	char	*s;
	int	 i;
#endif
d101 1
a101 1
		return strdup((char *)data);
a103 1
#ifdef USE_X509
a113 1
#endif
d116 1
a116 2
		log_error("key_printable: unknown/unsupported key type %d",
		    type);
d127 1
a127 1
		return strdup((char *)data);
a128 1
#ifdef USE_X509
a148 1
#endif /* USE_X509 */
d161 1
a161 1
    u_int32_t *datalenp)
a162 4
#ifdef USE_X509
	u_int32_t datalen;
#endif

d165 1
a165 1
		*datalenp = strlen(key);
d170 2
a171 3
#ifdef USE_X509
		datalen = (strlen(key) + 1) / 2; /* Round up, just in case */
		*data = malloc(datalen);
d173 1
a173 3
			log_error("key_from_printable: malloc (%d) failed",
			    datalen);
			*datalenp = 0;
d176 1
a176 1
		*datalenp = hex2raw(key, *data, datalen);
a177 1
#endif
d180 2
a181 4
		log_error("key_from_printable: "
		    "unknown/unsupported key type %d", type);
		*data = NULL;
		*datalenp = 0;
@


