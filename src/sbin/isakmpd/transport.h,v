head	1.1;
branch	1.1.1;
access;
symbols
	tg-mergetmp-mirosx-1:1.1.1.4
	tg-mergefixes-1-branch:1.1.1.4.0.4
	tg-mergefixes-1-base:1.1.1.4
	MIROS_X:1.1.1.4.0.2
	MIROS_X_BASE:1.1.1.4
	tg-mergetmp-3:1.1.1.4
	cvs-200411261545:1.1.1.4
	MIRBSD_XP_MIRPPC:1.1.1.3.0.4
	MIRBSD_XP_SPARC_BASE:1.1.1.3
	MIRBSD_XP_SPARC:1.1.1.3.0.2
	MIRBSD_7quater:1.1.1.2
	cvs-200405160640:1.1.1.3
	cvs-200401271800:1.1.1.2
	cvs-200401261630:1.1.1.2
	cvs-200401021645:1.1.1.2
	MIRBSD_7_ALPHA:1.1.1.2.0.6
	MIRBSD_7:1.1.1.2.0.4
	cvs-200312222040:1.1.1.2
	MIRBSD_7ter:1.1.1.2
	MIRBSD_7_DEV:1.1.1.2.0.2
	cvs-200310020700:1.1.1.2
	cvs-200309271030:1.1.1.2
	cvs-200309251530:1.1.1.2
	cvs-200308302005:1.1.1.2
	cvs-200308171200:1.1.1.2
	ctm-3496:1.1.1.2
	ctm-3449:1.1.1.2
	ctm-3437:1.1.1.2
	cvs-200307191805:1.1.1.2
	ctm-3425:1.1.1.2
	cvs-200307091500:1.1.1.2
	ctm-3389:1.1.1.2
	cvs-200306291430:1.1.1.2
	ctm-3341:1.1.1.2
	MIRBSD_5:1.1.1.2
	cvs-200306082100:1.1.1.2
	ctm-3316:1.1.1.2
	ctm-3272:1.1.1.1
	ctm-3264:1.1.1.1
	cvs-200305071630:1.1.1.1
	MIRBSD_4:1.1.1.1
	ctm-3203:1.1.1.1
	cvs-20030410-1130:1.1.1.1
	ctm-3155:1.1.1.1
	ctm-3132:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.1
date	2003.03.22.17.48.32;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.03.22.17.48.32;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2003.06.05.17.31.07;	author tg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2004.05.16.08.24.47;	author tg;	state Stab;
branches;
next	1.1.1.4;

1.1.1.4
date	2004.11.26.15.51.28;	author tg;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@/*	$OpenBSD: transport.h,v 1.12 2002/06/09 08:13:07 todd Exp $	*/
/*	$EOM: transport.h,v 1.16 2000/07/17 18:57:59 provos Exp $	*/

/*
 * Copyright (c) 1998, 1999 Niklas Hallqvist.  All rights reserved.
 * Copyright (c) 2001 Håkan Olsson.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by Ericsson Radio Systems.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * This code was written under funding by Ericsson Radio Systems.
 */

/*
 * The transport module tries to separate out details concerning the
 * actual transferral of ISAKMP messages to other parties.
 */

#ifndef _TRANSPORT_H_
#define _TRANSPORT_H_

#include <sys/param.h>
#include <sys/queue.h>
#include <sys/types.h>
#include <sys/socket.h>

#include "message.h"

struct transport;

/* This describes a tranport "method" like UDP or similar.  */
struct transport_vtbl {
  /* All transport methods are linked together.  */
  LIST_ENTRY (transport_vtbl) link;

  /* A textual name of the transport method.  */
  char *name;

  /* Create a transport instance of this method.  */
  struct transport *(*create) (char *);

  /* Reinitialize specific transport.  */
  void (*reinit) (void);

  /* Remove a transport instance of this method.  */
  void (*remove) (struct transport *);

  /* Report status of given transport */
  void (*report) (struct transport *);

  /* Let the given transport set it's bit in the fd_set passed in.  */
  int (*fd_set) (struct transport *, fd_set *, int);

  /* Is the given transport ready for I/O?  */
  int (*fd_isset) (struct transport *, fd_set *);

  /*
   * Read a message from the transport's incoming pipe and start
   * handling it.
   */
  void (*handle_message) (struct transport *);

  /* Send a message through the outgoing pipe.  */
  int (*send_message) (struct message *);

  /*
   * Fill out a sockaddr structure with the transport's destination end's
   * address info.
   */
  void (*get_dst) (struct transport *, struct sockaddr **);

  /*
   * Fill out a sockaddr structure with the transport's source end's
   * address info.
   */
  void (*get_src) (struct transport *, struct sockaddr **);

  /*
   * Return a string with decoded src and dst information
   */
  char *(*decode_ids) (struct transport *);
};

struct transport {
  /* All transports used are linked together.  */
  LIST_ENTRY (transport) link;

  /* What transport method is this an instance of?  */
  struct transport_vtbl *vtbl;

  /* The queue holding messages to send on this transport.  */
  struct msg_head sendq;

  /*
   * Prioritized send queue.  Messages in this queue will be transmitted
   * before the normal sendq, they will also all be transmitted prior
   * to a daemon shutdown.  Currently only used for DELETE notifications.
   */
  struct msg_head prio_sendq;

  /* Flags describing the transport.  */
  int flags;

  /* References counter.  */
  int refcnt;
};

/* Set if this is a transport we want to listen on.  */
#define TRANSPORT_LISTEN	1
/* Used for mark-and-sweep-type garbage collection of transports */
#define TRANSPORT_MARK		2

extern void transport_add (struct transport *);
extern struct transport *transport_create (char *, char *);
extern int transport_fd_set (fd_set *);
extern void transport_handle_messages (fd_set *);
extern void transport_init (void);
extern void transport_map (void (*) (struct transport *));
extern void transport_method_add (struct transport_vtbl *);
extern int transport_pending_wfd_set (fd_set *);
extern void transport_reference (struct transport *);
extern void transport_release (struct transport *);
extern void transport_report (void);
extern void transport_send_messages (fd_set *);
extern void transport_reinit (void);
extern int transport_prio_sendqs_empty (void);
#endif /* _TRANSPORT_H_ */
@


1.1.1.1
log
@Import OpenBSD 3.3 source repository from CTM 3132 the first time
This opens an OpenBSD-mirabile (aka MirBSD) repository.

### MirBSD is:
# Copyright (c) 1982-2003 by Thorsten "mirabile" Glaser <x86@@ePost.de>
# Copyright © 1968-2003  The authors of And contributors to UNIX®, the
#       C Language, BSD/Berkeley Unix; 386BSD, NetBSD 1.1 and OpenBSD.
#
# Anyone who obtained a copy of this work is hereby permitted to freely use,
# distribute, modify, merge, sublicence, give away or sell it as long as the
# authors are given due credit and the following notice is retained:
#
# This work is provided "as is", with no explicit or implicit warranty what-
# soever. Use it only at your own risk. In no event may an author or contri-
# butor be held liable for any damage, directly or indirectly, that origina-
# ted through or is caused by creation or modification of this work.

MirBSD is my private tree. MirBSD does not differ very much from OpenBSD
and intentionally tracks OpenBSD. That's why it _is_ OpenBSD, just not the
official one. It's like with DarrenBSD.

At time of this writing, no advertising for MirBSD must be done,
because the advertising clause has not yet been sorted out.

http://templeofhate.com/tglaser/MirBSD/index.php
@
text
@@


1.1.1.2
log
@Import latest OpenBSD CVS tree by CTM in order
to sync the base system and ports tree with Them.

This includes the recent licence changes as well - by
importing the changed base and re-applying the diffs
(with cvs up -j -j) they are inherited, and we're not
bound to the removed clauses any longer.
@
text
@d1 1
a1 1
/*	$OpenBSD: transport.h,v 1.13 2003/06/03 14:28:16 ho Exp $	*/
d16 5
@


1.1.1.3
log
@large-scale import of OpenBSD 3.5-current source base including many fixes
note: from now, we will not be binary compatible with OpenBSD apps any
longer (due to syscall numbering differences); both an OpenBSD compat and
a conversion tool for old MirOS #7 apps will be delivered later.

The src/ tree is locked from now.
@
text
@d1 2
a2 2
/* $OpenBSD: transport.h,v 1.14 2004/04/15 18:39:26 deraadt Exp $	 */
/* $EOM: transport.h,v 1.16 2000/07/17 18:57:59 provos Exp $	 */
d52 2
a53 2
	/* All transport methods are linked together.  */
	LIST_ENTRY(transport_vtbl) link;
d55 2
a56 2
	/* A textual name of the transport method.  */
	char           *name;
d58 2
a59 2
	/* Create a transport instance of this method.  */
	struct transport *(*create) (char *);
d61 40
a100 40
	/* Reinitialize specific transport.  */
	void            (*reinit) (void);

	/* Remove a transport instance of this method.  */
	void            (*remove) (struct transport *);

	/* Report status of given transport */
	void            (*report) (struct transport *);

	/* Let the given transport set it's bit in the fd_set passed in.  */
	int             (*fd_set) (struct transport *, fd_set *, int);

	/* Is the given transport ready for I/O?  */
	int             (*fd_isset) (struct transport *, fd_set *);

	/*
	 * Read a message from the transport's incoming pipe and start
	 * handling it.
         */
	void            (*handle_message) (struct transport *);

	/* Send a message through the outgoing pipe.  */
	int             (*send_message) (struct message *);

	/*
	 * Fill out a sockaddr structure with the transport's destination end's
	 * address info.
         */
	void            (*get_dst) (struct transport *, struct sockaddr **);

	/*
	 * Fill out a sockaddr structure with the transport's source end's
	 * address info.
         */
	void            (*get_src) (struct transport *, struct sockaddr **);

	/*
	 * Return a string with decoded src and dst information
         */
	char           *(*decode_ids) (struct transport *);
d104 2
a105 2
	/* All transports used are linked together.  */
	LIST_ENTRY(transport) link;
d107 2
a108 2
	/* What transport method is this an instance of?  */
	struct transport_vtbl *vtbl;
d110 2
a111 2
	/* The queue holding messages to send on this transport.  */
	struct msg_head sendq;
d113 6
a118 6
	/*
	 * Prioritized send queue.  Messages in this queue will be transmitted
	 * before the normal sendq, they will also all be transmitted prior
	 * to a daemon shutdown.  Currently only used for DELETE notifications.
         */
	struct msg_head prio_sendq;
d120 2
a121 2
	/* Flags describing the transport.  */
	int             flags;
d123 2
a124 2
	/* References counter.  */
	int             refcnt;
d132 15
a146 15
extern void     transport_add(struct transport *);
extern struct transport *transport_create(char *, char *);
extern int      transport_fd_set(fd_set *);
extern void     transport_handle_messages(fd_set *);
extern void     transport_init(void);
extern void     transport_map(void (*) (struct transport *));
extern void     transport_method_add(struct transport_vtbl *);
extern int      transport_pending_wfd_set(fd_set *);
extern void     transport_reference(struct transport *);
extern void     transport_release(struct transport *);
extern void     transport_report(void);
extern void     transport_send_messages(fd_set *);
extern void     transport_reinit(void);
extern int      transport_prio_sendqs_empty(void);
#endif				/* _TRANSPORT_H_ */
@


1.1.1.4
log
@another bunch of fixes from obsd, and a big isakmpd update (need testers!)
@
text
@d1 1
a1 1
/* $OpenBSD: transport.h,v 1.15 2004/06/20 15:24:05 ho Exp $	 */
d6 1
a6 1
 * Copyright (c) 2001, 2004 Håkan Olsson.  All rights reserved.
d83 1
a83 1
	int             (*send_message) (struct message *, struct transport *);
a100 10

	/*
	 * Clone a transport for outbound use.
	 */
	struct transport *(*clone) (struct transport *, struct sockaddr *);

	/*
	 * Locate the correct sendq to use for outbound messages.
	 */
	struct msg_head *(*get_queue) (struct message *);
d123 1
a123 1
	/* Reference counter.  */
a124 3

	/* Pointer to parent virtual transport, if any.  */
	struct transport *virtual;
d132 1
a139 1
extern int      transport_prio_sendqs_empty(void);
a140 1
extern void     transport_reinit(void);
d144 2
a145 1
extern void     transport_setup(struct transport *, int);
@


