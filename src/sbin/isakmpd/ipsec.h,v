head	1.1;
branch	1.1.1;
access;
symbols
	tg-mergetmp-mirosx-1:1.1.1.4
	tg-mergefixes-1-branch:1.1.1.4.0.4
	tg-mergefixes-1-base:1.1.1.4
	MIROS_X:1.1.1.4.0.2
	MIROS_X_BASE:1.1.1.4
	tg-mergetmp-3:1.1.1.4
	cvs-200411261545:1.1.1.4
	MIRBSD_XP_MIRPPC:1.1.1.3.0.4
	MIRBSD_XP_SPARC_BASE:1.1.1.3
	MIRBSD_XP_SPARC:1.1.1.3.0.2
	MIRBSD_7quater:1.1.1.2
	cvs-200405160640:1.1.1.3
	cvs-200401271800:1.1.1.2
	cvs-200401261630:1.1.1.2
	cvs-200401021645:1.1.1.2
	MIRBSD_7_ALPHA:1.1.1.2.0.6
	MIRBSD_7:1.1.1.2.0.4
	cvs-200312222040:1.1.1.2
	MIRBSD_7ter:1.1.1.2
	MIRBSD_7_DEV:1.1.1.2.0.2
	cvs-200310020700:1.1.1.2
	cvs-200309271030:1.1.1.2
	cvs-200309251530:1.1.1.2
	cvs-200308302005:1.1.1.2
	cvs-200308171200:1.1.1.2
	ctm-3496:1.1.1.2
	ctm-3449:1.1.1.2
	ctm-3437:1.1.1.2
	cvs-200307191805:1.1.1.2
	ctm-3425:1.1.1.2
	cvs-200307091500:1.1.1.2
	ctm-3389:1.1.1.2
	cvs-200306291430:1.1.1.2
	ctm-3341:1.1.1.2
	MIRBSD_5:1.1.1.2
	cvs-200306082100:1.1.1.2
	ctm-3316:1.1.1.2
	ctm-3272:1.1.1.1
	ctm-3264:1.1.1.1
	cvs-200305071630:1.1.1.1
	MIRBSD_4:1.1.1.1
	ctm-3203:1.1.1.1
	cvs-20030410-1130:1.1.1.1
	ctm-3155:1.1.1.1
	ctm-3132:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.1
date	2003.03.22.17.48.28;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.03.22.17.48.28;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2003.06.05.17.31.00;	author tg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2004.05.16.08.24.15;	author tg;	state Stab;
branches;
next	1.1.1.4;

1.1.1.4
date	2004.11.26.15.50.40;	author tg;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@/*	$OpenBSD: ipsec.h,v 1.21 2002/06/09 08:13:06 todd Exp $	*/
/*	$EOM: ipsec.h,v 1.42 2000/12/03 07:58:20 angelos Exp $	*/

/*
 * Copyright (c) 1998, 1999, 2001 Niklas Hallqvist.  All rights reserved.
 * Copyright (c) 1999 Angelos D. Keromytis.  All rights reserved.
 * Copyright (c) 2001 Håkan Olsson.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by Ericsson Radio Systems.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * This code was written under funding by Ericsson Radio Systems.
 */

#ifndef _IPSEC_H_
#define _IPSEC_H_

#include <sys/queue.h>
#include <sys/types.h>
#include <netinet/in.h>

#include "ipsec_doi.h"
#ifdef USE_ISAKMP_CFG
#include "isakmp_cfg.h"
#endif

struct group;
struct hash;
struct ike_auth;
struct message;
struct proto;
struct sa;

/*
 * IPsec-specific data to be linked into the exchange struct.
 * XXX Should probably be several different structs, one for each kind
 * of exchange, i.e. phase 1, phase 2 and ISAKMP configuration parameters
 * separated.
 */
struct ipsec_exch {
  u_int flags;
  struct hash *hash;
  struct ike_auth *ike_auth;
  struct group *group;
  u_int16_t prf_type;

  /* 0 if no KEY_EXCH was proposed, 1 otherwise */
  u_int8_t pfs;

  /*
   * A copy of the initiator SA payload body for later computation of hashes.
   * Phase 1 only.
   */
  size_t sa_i_b_len;
  u_int8_t *sa_i_b;

  /* Diffie-Hellman values.  */
  size_t g_x_len;
  u_int8_t *g_xi;
  u_int8_t *g_xr;
  u_int8_t* g_xy;

  /* SKEYIDs.  XXX Phase 1 only?  */
  size_t skeyid_len;
  u_int8_t *skeyid;
  u_int8_t *skeyid_d;
  u_int8_t *skeyid_a;
  u_int8_t *skeyid_e;

  /* HASH_I & HASH_R.  XXX Do these need to be saved here?  */
  u_int8_t *hash_i;
  u_int8_t *hash_r;

  /* KEYMAT */
  size_t keymat_len;

  /* Phase 2.  */
  u_int8_t *id_ci;
  size_t id_ci_sz;
  u_int8_t *id_cr;
  size_t id_cr_sz;

#ifdef USE_ISAKMP_CFG
  /* ISAKMP configuration mode parameters */
  u_int16_t cfg_id;
  u_int16_t cfg_type;
  LIST_HEAD (isakmp_cfg_attr_head, isakmp_cfg_attr) attrs;
#endif
};

#define IPSEC_EXCH_FLAG_NO_ID 1

struct ipsec_sa {
  /* Phase 1.  */
  u_int8_t hash;
  size_t skeyid_len;
  u_int8_t *skeyid_d;
  u_int8_t *skeyid_a;
  u_int16_t prf_type;

  /* Phase 2.  */
  u_int16_t group_desc;

  /* Tunnel parameters.  These are in network byte order.  */
  struct sockaddr *src_net;
  struct sockaddr *src_mask;
  struct sockaddr *dst_net;
  struct sockaddr *dst_mask;
  u_int8_t  tproto;
  u_int16_t sport;
  u_int16_t dport;
};

struct ipsec_proto {
  /* Phase 2.  */
  u_int16_t encap_mode;
  u_int16_t auth;
  u_int16_t keylen;
  u_int16_t keyrounds;

  /* This is not negotiated, but rather configured.  */
  int32_t replay_window;

  /* KEYMAT */
  u_int8_t *keymat[2];
};

extern u_int8_t *ipsec_add_hash_payload (struct message *msg, size_t);
extern int ipsec_ah_keylength (struct proto *);
extern u_int8_t *ipsec_build_id (char *, size_t *);
extern int ipsec_decode_attribute (u_int16_t, u_int8_t *, u_int16_t, void *);
extern void ipsec_decode_transform (struct message *, struct sa *,
				    struct proto *, u_int8_t *);
extern int ipsec_esp_authkeylength (struct proto *);
extern int ipsec_esp_enckeylength (struct proto *);
extern int ipsec_fill_in_hash (struct message *msg);
extern int ipsec_gen_g_x (struct message *);
extern int ipsec_get_id (char *, int *, struct sockaddr **,
			 struct sockaddr **, u_int8_t *, u_int16_t *);
extern ssize_t ipsec_id_size (char *, u_int8_t *);
extern char *ipsec_id_string (u_int8_t *, size_t);
extern void ipsec_init (void);
extern int ipsec_initial_contact (struct message *msg);
extern int ipsec_is_attribute_incompatible (u_int16_t, u_int8_t *, u_int16_t,
					    void *);
extern int ipsec_keymat_length (struct proto *);
extern int ipsec_save_g_x (struct message *);
extern struct sa *ipsec_sa_lookup (struct sockaddr *, u_int32_t, u_int8_t);

extern char *ipsec_decode_ids(char *, u_int8_t *, size_t, u_int8_t *, size_t,
			      int);
extern int ipsec_clone_id(u_int8_t **, size_t *, u_int8_t *, size_t);

#endif /* _IPSEC_H_ */
@


1.1.1.1
log
@Import OpenBSD 3.3 source repository from CTM 3132 the first time
This opens an OpenBSD-mirabile (aka MirBSD) repository.

### MirBSD is:
# Copyright (c) 1982-2003 by Thorsten "mirabile" Glaser <x86@@ePost.de>
# Copyright © 1968-2003  The authors of And contributors to UNIX®, the
#       C Language, BSD/Berkeley Unix; 386BSD, NetBSD 1.1 and OpenBSD.
#
# Anyone who obtained a copy of this work is hereby permitted to freely use,
# distribute, modify, merge, sublicence, give away or sell it as long as the
# authors are given due credit and the following notice is retained:
#
# This work is provided "as is", with no explicit or implicit warranty what-
# soever. Use it only at your own risk. In no event may an author or contri-
# butor be held liable for any damage, directly or indirectly, that origina-
# ted through or is caused by creation or modification of this work.

MirBSD is my private tree. MirBSD does not differ very much from OpenBSD
and intentionally tracks OpenBSD. That's why it _is_ OpenBSD, just not the
official one. It's like with DarrenBSD.

At time of this writing, no advertising for MirBSD must be done,
because the advertising clause has not yet been sorted out.

http://templeofhate.com/tglaser/MirBSD/index.php
@
text
@@


1.1.1.2
log
@Import latest OpenBSD CVS tree by CTM in order
to sync the base system and ports tree with Them.

This includes the recent licence changes as well - by
importing the changed base and re-applying the diffs
(with cvs up -j -j) they are inherited, and we're not
bound to the removed clauses any longer.
@
text
@d1 1
a1 1
/*	$OpenBSD: ipsec.h,v 1.22 2003/06/04 07:31:17 ho Exp $	*/
d17 5
@


1.1.1.3
log
@large-scale import of OpenBSD 3.5-current source base including many fixes
note: from now, we will not be binary compatible with OpenBSD apps any
longer (due to syscall numbering differences); both an OpenBSD compat and
a conversion tool for old MirOS #7 apps will be delivered later.

The src/ tree is locked from now.
@
text
@d1 2
a2 2
/* $OpenBSD: ipsec.h,v 1.23 2004/04/15 18:39:25 deraadt Exp $	 */
/* $EOM: ipsec.h,v 1.42 2000/12/03 07:58:20 angelos Exp $	 */
d60 41
a100 41
	u_int           flags;
	struct hash    *hash;
	struct ike_auth *ike_auth;
	struct group   *group;
	u_int16_t       prf_type;

	/* 0 if no KEY_EXCH was proposed, 1 otherwise */
	u_int8_t        pfs;

	/*
	 * A copy of the initiator SA payload body for later computation of hashes.
	 * Phase 1 only.
         */
	size_t          sa_i_b_len;
	u_int8_t       *sa_i_b;

	/* Diffie-Hellman values.  */
	size_t          g_x_len;
	u_int8_t       *g_xi;
	u_int8_t       *g_xr;
	u_int8_t       *g_xy;

	/* SKEYIDs.  XXX Phase 1 only?  */
	size_t          skeyid_len;
	u_int8_t       *skeyid;
	u_int8_t       *skeyid_d;
	u_int8_t       *skeyid_a;
	u_int8_t       *skeyid_e;

	/* HASH_I & HASH_R.  XXX Do these need to be saved here?  */
	u_int8_t       *hash_i;
	u_int8_t       *hash_r;

	/* KEYMAT */
	size_t          keymat_len;

	/* Phase 2.  */
	u_int8_t       *id_ci;
	size_t          id_ci_sz;
	u_int8_t       *id_cr;
	size_t          id_cr_sz;
d103 4
a106 4
	/* ISAKMP configuration mode parameters */
	u_int16_t       cfg_id;
	u_int16_t       cfg_type;
	                LIST_HEAD(isakmp_cfg_attr_head, isakmp_cfg_attr) attrs;
d113 18
a130 18
	/* Phase 1.  */
	u_int8_t        hash;
	size_t          skeyid_len;
	u_int8_t       *skeyid_d;
	u_int8_t       *skeyid_a;
	u_int16_t       prf_type;

	/* Phase 2.  */
	u_int16_t       group_desc;

	/* Tunnel parameters.  These are in network byte order.  */
	struct sockaddr *src_net;
	struct sockaddr *src_mask;
	struct sockaddr *dst_net;
	struct sockaddr *dst_mask;
	u_int8_t        tproto;
	u_int16_t       sport;
	u_int16_t       dport;
d134 5
a138 5
	/* Phase 2.  */
	u_int16_t       encap_mode;
	u_int16_t       auth;
	u_int16_t       keylen;
	u_int16_t       keyrounds;
d140 2
a141 2
	/* This is not negotiated, but rather configured.  */
	int32_t         replay_window;
d143 2
a144 2
	/* KEYMAT */
	u_int8_t       *keymat[2];
d147 25
a171 29
extern u_int8_t *ipsec_add_hash_payload(struct message * msg, size_t);
extern int      ipsec_ah_keylength(struct proto *);
extern u_int8_t *ipsec_build_id(char *, size_t *);
extern int      ipsec_decode_attribute(u_int16_t, u_int8_t *, u_int16_t, void *);
extern void
ipsec_decode_transform(struct message *, struct sa *,
		       struct proto *, u_int8_t *);
extern int      ipsec_esp_authkeylength(struct proto *);
extern int      ipsec_esp_enckeylength(struct proto *);
extern int      ipsec_fill_in_hash(struct message * msg);
extern int      ipsec_gen_g_x(struct message *);
extern int
ipsec_get_id(char *, int *, struct sockaddr **,
	     struct sockaddr **, u_int8_t *, u_int16_t *);
extern ssize_t  ipsec_id_size(char *, u_int8_t *);
extern char    *ipsec_id_string(u_int8_t *, size_t);
extern void     ipsec_init(void);
extern int      ipsec_initial_contact(struct message * msg);
extern int
ipsec_is_attribute_incompatible(u_int16_t, u_int8_t *, u_int16_t,
				void *);
extern int      ipsec_keymat_length(struct proto *);
extern int      ipsec_save_g_x(struct message *);
extern struct sa *ipsec_sa_lookup(struct sockaddr *, u_int32_t, u_int8_t);

extern char    *
ipsec_decode_ids(char *, u_int8_t *, size_t, u_int8_t *, size_t,
		 int);
extern int      ipsec_clone_id(u_int8_t **, size_t *, u_int8_t *, size_t);
d173 1
a173 1
#endif				/* _IPSEC_H_ */
@


1.1.1.4
log
@another bunch of fixes from obsd, and a big isakmpd update (need testers!)
@
text
@d1 1
a1 1
/* $OpenBSD: ipsec.h,v 1.24 2004/05/23 18:17:56 hshoexer Exp $	 */
d70 2
a71 2
	 * A copy of the initiator SA payload body for later computation of
	 * hashes.  Phase 1 only.
d147 1
a147 1
extern u_int8_t *ipsec_add_hash_payload(struct message *, size_t);
d151 3
a153 2
extern void	ipsec_decode_transform(struct message *, struct sa *,
		    struct proto *, u_int8_t *);
d156 1
a156 1
extern int      ipsec_fill_in_hash(struct message *);
d158 3
a160 2
extern int	ipsec_get_id(char *, int *, struct sockaddr **,
		    struct sockaddr **, u_int8_t *, u_int16_t *);
d164 4
a167 3
extern int      ipsec_initial_contact(struct message *);
extern int	ipsec_is_attribute_incompatible(u_int16_t, u_int8_t *,
		    u_int16_t, void *);
d172 3
a174 2
extern char	*ipsec_decode_ids(char *, u_int8_t *, size_t, u_int8_t *,
		    size_t, int);
@


