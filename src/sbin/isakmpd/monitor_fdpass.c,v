head	1.1;
branch	1.1.1;
access;
symbols
	tg-mergetmp-mirosx-1:1.1.1.4
	tg-mergefixes-1-branch:1.1.1.4.0.4
	tg-mergefixes-1-base:1.1.1.4
	MIROS_X:1.1.1.4.0.2
	MIROS_X_BASE:1.1.1.4
	tg-mergetmp-3:1.1.1.4
	cvs-200411261545:1.1.1.4
	MIRBSD_XP_MIRPPC:1.1.1.3.0.4
	MIRBSD_XP_SPARC_BASE:1.1.1.3
	MIRBSD_XP_SPARC:1.1.1.3.0.2
	MIRBSD_7quater:1.1.1.1
	cvs-200405160640:1.1.1.3
	cvs-200401271800:1.1.1.2
	cvs-200401261630:1.1.1.2
	cvs-200401021645:1.1.1.2
	MIRBSD_7_ALPHA:1.1.1.1.0.6
	MIRBSD_7:1.1.1.1.0.4
	cvs-200312222040:1.1.1.2
	MIRBSD_7ter:1.1.1.1
	MIRBSD_7_DEV:1.1.1.1.0.2
	cvs-200310020700:1.1.1.1
	cvs-200309271030:1.1.1.1
	cvs-200309251530:1.1.1.1
	cvs-200308302005:1.1.1.1
	cvs-200308171200:1.1.1.1
	ctm-3496:1.1.1.1
	ctm-3449:1.1.1.1
	ctm-3437:1.1.1.1
	cvs-200307191805:1.1.1.1
	ctm-3425:1.1.1.1
	cvs-200307091500:1.1.1.1
	ctm-3389:1.1.1.1
	cvs-200306291430:1.1.1.1
	ctm-3341:1.1.1.1
	MIRBSD_5:1.1.1.1
	cvs-200306082100:1.1.1.1
	ctm-3316:1.1.1.1
	ctm-3272:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.1
date	2003.05.21.19.02.40;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.05.21.19.02.40;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2003.12.22.21.10.37;	author tg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2004.05.16.08.24.36;	author tg;	state Stab;
branches;
next	1.1.1.4;

1.1.1.4
date	2004.11.26.15.51.09;	author tg;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@/*
 * Copyright 2001 Niels Provos <provos@@citi.umich.edu>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#include <sys/types.h>
#include <sys/uio.h>
#include <errno.h>
#include <string.h>

#include "log.h"
#include "monitor.h"

int
mm_send_fd (int socket, int fd)
{
  struct msghdr msg;
  char tmp[CMSG_SPACE (sizeof (int))];
  struct cmsghdr *cmsg;
  struct iovec vec;
  char ch = '\0';
  ssize_t n;

  memset(&msg, 0, sizeof msg);
  msg.msg_control = (caddr_t)tmp;
  msg.msg_controllen = CMSG_LEN (sizeof (int));
  cmsg = CMSG_FIRSTHDR (&msg);
  cmsg->cmsg_len = CMSG_LEN (sizeof (int));
  cmsg->cmsg_level = SOL_SOCKET;
  cmsg->cmsg_type = SCM_RIGHTS;
  *(int *)CMSG_DATA (cmsg) = fd;

  vec.iov_base = &ch;
  vec.iov_len = 1;
  msg.msg_iov = &vec;
  msg.msg_iovlen = 1;

  if ((n = sendmsg (socket, &msg, 0)) == -1)
    {
      log_error ("%s: sendmsg(%d)", __func__, fd);
      return -1;
    }
  if (n != 1)
    {
      log_error ("%s: sendmsg: expected sent 1 got %ld", __func__, (long)n);
      return -1;
    }
  return 0;
}

int
mm_receive_fd (int socket)
{
  struct msghdr msg;
  char tmp[CMSG_SPACE (sizeof (int))];
  struct cmsghdr *cmsg;
  struct iovec vec;
  ssize_t n;
  char ch;
  int fd;

  memset (&msg, 0, sizeof msg);
  vec.iov_base = &ch;
  vec.iov_len = 1;
  msg.msg_iov = &vec;
  msg.msg_iovlen = 1;
  msg.msg_control = tmp;
  msg.msg_controllen = sizeof tmp;

  if ((n = recvmsg(socket, &msg, 0)) == -1)
    {
      log_error ("%s: recvmsg", __func__);
      return -1;
    }
  if (n != 1)
    {
      log_error ("%s: recvmsg: expected received 1 got %ld", __func__,
		 (long)n);
      return -1;
    }

  cmsg = CMSG_FIRSTHDR (&msg);
  if (cmsg->cmsg_type != SCM_RIGHTS)
    {
      log_error ("%s: expected type %d got %d", __func__, SCM_RIGHTS,
		 cmsg->cmsg_type);
      return -1;
    }
  fd = (*(int *)CMSG_DATA (cmsg));

  return fd;
}
@


1.1.1.1
log
@Sync MirBSD main source tree against OpenBSD-current,
which should be fairly stable after the Hackathon now.
@
text
@@


1.1.1.2
log
@Time to import OpenBSD once again. Expect breakage.
@
text
@d44 1
a44 1
  memset (&msg, 0, sizeof msg);
d90 1
a90 1
  if ((n = recvmsg (socket, &msg, 0)) == -1)
@


1.1.1.3
log
@large-scale import of OpenBSD 3.5-current source base including many fixes
note: from now, we will not be binary compatible with OpenBSD apps any
longer (due to syscall numbering differences); both an OpenBSD compat and
a conversion tool for old MirOS #7 apps will be delivered later.

The src/ tree is locked from now.
@
text
@d35 1
a35 1
mm_send_fd(int socket, int fd)
d37 32
a68 30
	struct msghdr   msg;
	char            tmp[CMSG_SPACE(sizeof(int))], ch = '\0';
	struct cmsghdr *cmsg;
	struct iovec    vec;
	ssize_t         n;

	memset(&msg, 0, sizeof msg);
	msg.msg_control = (caddr_t) tmp;
	msg.msg_controllen = CMSG_LEN(sizeof(int));
	cmsg = CMSG_FIRSTHDR(&msg);
	cmsg->cmsg_len = CMSG_LEN(sizeof(int));
	cmsg->cmsg_level = SOL_SOCKET;
	cmsg->cmsg_type = SCM_RIGHTS;
	*(int *) CMSG_DATA(cmsg) = fd;

	vec.iov_base = &ch;
	vec.iov_len = 1;
	msg.msg_iov = &vec;
	msg.msg_iovlen = 1;

	if ((n = sendmsg(socket, &msg, 0)) == -1) {
		log_error("%s: sendmsg(%d)", __func__, fd);
		return -1;
	}
	if (n != 1) {
		log_error("%s: sendmsg: expected sent 1 got %ld",
		    __func__, (long) n);
		return -1;
	}
	return 0;
d72 1
a72 1
mm_receive_fd(int socket)
d74 38
a111 32
	struct msghdr   msg;
	char            tmp[CMSG_SPACE(sizeof(int))], ch;
	struct cmsghdr *cmsg;
	struct iovec    vec;
	ssize_t         n;
	int             fd;

	memset(&msg, 0, sizeof msg);
	vec.iov_base = &ch;
	vec.iov_len = 1;
	msg.msg_iov = &vec;
	msg.msg_iovlen = 1;
	msg.msg_control = tmp;
	msg.msg_controllen = sizeof tmp;

	if ((n = recvmsg(socket, &msg, 0)) == -1) {
		log_error("%s: recvmsg", __func__);
		return -1;
	}
	if (n != 1) {
		log_error("%s: recvmsg: expected received 1 got %ld", __func__,
		    (long) n);
		return -1;
	}
	cmsg = CMSG_FIRSTHDR(&msg);
	if (cmsg->cmsg_type != SCM_RIGHTS) {
		log_error("%s: expected type %d got %d", __func__, SCM_RIGHTS,
		    cmsg->cmsg_type);
		return -1;
	}
	fd = (*(int *) CMSG_DATA(cmsg));
	return fd;
@


1.1.1.4
log
@another bunch of fixes from obsd, and a big isakmpd update (need testers!)
@
text
@a0 2
/*	$OpenBSD: monitor_fdpass.c,v 1.11 2004/10/01 04:08:45 jsg Exp $	*/

a26 1
#include <sys/socket.h>
a27 1

d50 1
a50 1
	*(int *)CMSG_DATA(cmsg) = fd;
d58 1
a58 1
		log_error("mm_send_fd: sendmsg(%d)", fd);
d62 2
a63 2
		log_error("mm_send_fd: sendmsg: expected sent 1 got %ld",
		    (long)n);
d88 1
a88 1
		log_error("mm_receive_fd: recvmsg");
d92 2
a93 2
		log_error("mm_receive_fd: recvmsg: expected received 1 got %ld",
		    (long)n);
a96 4
	if (cmsg == NULL) {
		log_error("mm_receive_fd: no message header");
		return -1;
	}
d98 1
a98 1
		log_error("mm_receive_fd: expected type %d got %d", SCM_RIGHTS,
d102 1
a102 1
	fd = (*(int *)CMSG_DATA(cmsg));
@


