head	1.1;
branch	1.1.1;
access;
symbols
	tg-mergetmp-mirosx-1:1.1.1.4
	tg-mergefixes-1-branch:1.1.1.4.0.4
	tg-mergefixes-1-base:1.1.1.4
	MIROS_X:1.1.1.4.0.2
	MIROS_X_BASE:1.1.1.4
	tg-mergetmp-3:1.1.1.4
	cvs-200411261545:1.1.1.4
	MIRBSD_XP_MIRPPC:1.1.1.3.0.4
	MIRBSD_XP_SPARC_BASE:1.1.1.3
	MIRBSD_XP_SPARC:1.1.1.3.0.2
	MIRBSD_7quater:1.1.1.2
	cvs-200405160640:1.1.1.3
	cvs-200401271800:1.1.1.2
	cvs-200401261630:1.1.1.2
	cvs-200401021645:1.1.1.2
	MIRBSD_7_ALPHA:1.1.1.2.0.6
	MIRBSD_7:1.1.1.2.0.4
	cvs-200312222040:1.1.1.2
	MIRBSD_7ter:1.1.1.2
	MIRBSD_7_DEV:1.1.1.2.0.2
	cvs-200310020700:1.1.1.2
	cvs-200309271030:1.1.1.2
	cvs-200309251530:1.1.1.2
	cvs-200308302005:1.1.1.2
	cvs-200308171200:1.1.1.2
	ctm-3496:1.1.1.2
	ctm-3449:1.1.1.2
	ctm-3437:1.1.1.2
	cvs-200307191805:1.1.1.2
	ctm-3425:1.1.1.2
	cvs-200307091500:1.1.1.2
	ctm-3389:1.1.1.2
	cvs-200306291430:1.1.1.2
	ctm-3341:1.1.1.2
	MIRBSD_5:1.1.1.2
	cvs-200306082100:1.1.1.2
	ctm-3316:1.1.1.2
	ctm-3272:1.1.1.1
	ctm-3264:1.1.1.1
	cvs-200305071630:1.1.1.1
	MIRBSD_4:1.1.1.1
	ctm-3203:1.1.1.1
	cvs-20030410-1130:1.1.1.1
	ctm-3155:1.1.1.1
	ctm-3132:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.1
date	2003.03.22.17.48.28;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.03.22.17.48.28;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2003.06.05.17.30.59;	author tg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2004.05.16.08.24.06;	author tg;	state Stab;
branches;
next	1.1.1.4;

1.1.1.4
date	2004.11.26.15.50.25;	author tg;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@/*	$OpenBSD: ike_aggressive.c,v 1.4 2000/02/01 02:46:18 niklas Exp $	*/
/*	$EOM: ike_aggressive.c,v 1.4 2000/01/31 22:33:45 niklas Exp $	*/

/*
 * Copyright (c) 1999 Niklas Hallqvist.  All rights reserved.
 * Copyright (c) 1999 Angelos D. Keromytis.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by Ericsson Radio Systems.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * This code was written under funding by Ericsson Radio Systems.
 */

#include <sys/types.h>
#include <netinet/in.h>
#include <stdlib.h>
#include <string.h>

#include "sysdep.h"

#include "attribute.h"
#include "conf.h"
#include "constants.h"
#include "crypto.h"
#include "dh.h"
#include "doi.h"
#include "exchange.h"
#include "hash.h"
#include "ike_auth.h"
#include "ike_aggressive.h"
#include "ike_phase_1.h"
#include "ipsec.h"
#include "ipsec_doi.h"
#include "isakmp.h"
#include "log.h"
#include "math_group.h"
#include "message.h"
#include "prf.h"
#include "sa.h"
#include "transport.h"
#include "util.h"

static int initiator_recv_SA_KE_NONCE_ID_AUTH (struct message *);
static int initiator_send_SA_KE_NONCE_ID (struct message *);
static int initiator_send_AUTH (struct message *);
static int responder_recv_SA_KE_NONCE_ID (struct message *);
static int responder_send_SA_KE_NONCE_ID_AUTH (struct message *);

int (*ike_aggressive_initiator[]) (struct message *) = {
  initiator_send_SA_KE_NONCE_ID,
  initiator_recv_SA_KE_NONCE_ID_AUTH,
  initiator_send_AUTH
};

int (*ike_aggressive_responder[]) (struct message *) = {
  responder_recv_SA_KE_NONCE_ID,
  responder_send_SA_KE_NONCE_ID_AUTH,
  ike_phase_1_recv_AUTH
};

/* Offer a set of transforms to the responder in the MSG message.  */
static int
initiator_send_SA_KE_NONCE_ID (struct message *msg)
{
  if (ike_phase_1_initiator_send_SA (msg))
    return -1;

  if (ike_phase_1_initiator_send_KE_NONCE (msg))
    return -1;

  return ike_phase_1_send_ID (msg);
}

/* Figure out what transform the responder chose.  */
static int
initiator_recv_SA_KE_NONCE_ID_AUTH (struct message *msg)
{
  if (ike_phase_1_initiator_recv_SA (msg))
    return -1;

  if (ike_phase_1_initiator_recv_KE_NONCE (msg))
    return -1;

  return ike_phase_1_recv_ID_AUTH (msg);
}

static int
initiator_send_AUTH (struct message *msg)
{
  msg->exchange->flags |= EXCHANGE_FLAG_ENCRYPT;

  if (ike_phase_1_send_AUTH (msg))
    return -1;

  /*
   * RFC 2407 4.6.3 says that, among others, INITIAL-CONTACT MUST NOT
   * be sent in Aggressive Mode.  This leaves us with the choice of
   * doing it in an informational exchange of its own with no delivery
   * guarantee or in the first Quick Mode, or not at all.
   * draft-jenkins-ipsec-rekeying-01.txt has some text that requires
   * INITIAL-CONTACT in phase 1, thus contradicting what we learned
   * above.  I will bring this up in the IPsec list.  For now we don't
   * do INITIAL-CONTACT at all when using aggressive mode.
   */
  return 0;
}

/*
 * Accept a set of transforms offered by the initiator and chose one we can
 * handle.  Also accept initiator's public DH value, nonce and ID.
 */
static int
responder_recv_SA_KE_NONCE_ID (struct message *msg)
{
  if (ike_phase_1_responder_recv_SA (msg))
    return -1;

  if (ike_phase_1_recv_ID (msg))
    return -1;

  return ike_phase_1_recv_KE_NONCE (msg);
}

/*
 * Reply with the transform we chose.  Send our public DH value and a nonce
 * to the initiator.
 */
static int
responder_send_SA_KE_NONCE_ID_AUTH (struct message *msg)
{
  /* Add the SA payload with the transform that was chosen.  */
  if (ike_phase_1_responder_send_SA (msg))
   return -1;

  /* XXX Should we really just use the initiator's nonce size?  */
  if (ike_phase_1_send_KE_NONCE (msg, msg->exchange->nonce_i_len))
    return -1;

  if (ike_phase_1_post_exchange_KE_NONCE (msg))
    return -1;

  return ike_phase_1_responder_send_ID_AUTH (msg);
    return -1;
}
@


1.1.1.1
log
@Import OpenBSD 3.3 source repository from CTM 3132 the first time
This opens an OpenBSD-mirabile (aka MirBSD) repository.

### MirBSD is:
# Copyright (c) 1982-2003 by Thorsten "mirabile" Glaser <x86@@ePost.de>
# Copyright © 1968-2003  The authors of And contributors to UNIX®, the
#       C Language, BSD/Berkeley Unix; 386BSD, NetBSD 1.1 and OpenBSD.
#
# Anyone who obtained a copy of this work is hereby permitted to freely use,
# distribute, modify, merge, sublicence, give away or sell it as long as the
# authors are given due credit and the following notice is retained:
#
# This work is provided "as is", with no explicit or implicit warranty what-
# soever. Use it only at your own risk. In no event may an author or contri-
# butor be held liable for any damage, directly or indirectly, that origina-
# ted through or is caused by creation or modification of this work.

MirBSD is my private tree. MirBSD does not differ very much from OpenBSD
and intentionally tracks OpenBSD. That's why it _is_ OpenBSD, just not the
official one. It's like with DarrenBSD.

At time of this writing, no advertising for MirBSD must be done,
because the advertising clause has not yet been sorted out.

http://templeofhate.com/tglaser/MirBSD/index.php
@
text
@@


1.1.1.2
log
@Import latest OpenBSD CVS tree by CTM in order
to sync the base system and ports tree with Them.

This includes the recent licence changes as well - by
importing the changed base and re-applying the diffs
(with cvs up -j -j) they are inherited, and we're not
bound to the removed clauses any longer.
@
text
@d1 1
a1 1
/*	$OpenBSD: ike_aggressive.c,v 1.5 2003/06/04 07:31:16 ho Exp $	*/
d16 5
@


1.1.1.3
log
@large-scale import of OpenBSD 3.5-current source base including many fixes
note: from now, we will not be binary compatible with OpenBSD apps any
longer (due to syscall numbering differences); both an OpenBSD compat and
a conversion tool for old MirOS #7 apps will be delivered later.

The src/ tree is locked from now.
@
text
@d1 2
a2 2
/* $OpenBSD: ike_aggressive.c,v 1.6 2004/04/15 18:39:25 deraadt Exp $	 */
/* $EOM: ike_aggressive.c,v 1.4 2000/01/31 22:33:45 niklas Exp $	 */
d62 10
a71 10
static int      initiator_recv_SA_KE_NONCE_ID_AUTH(struct message *);
static int      initiator_send_SA_KE_NONCE_ID(struct message *);
static int      initiator_send_AUTH(struct message *);
static int      responder_recv_SA_KE_NONCE_ID(struct message *);
static int      responder_send_SA_KE_NONCE_ID_AUTH(struct message *);

int             (*ike_aggressive_initiator[]) (struct message *) = {
	initiator_send_SA_KE_NONCE_ID,
	initiator_recv_SA_KE_NONCE_ID_AUTH,
	initiator_send_AUTH
d74 4
a77 4
int             (*ike_aggressive_responder[]) (struct message *) = {
	responder_recv_SA_KE_NONCE_ID,
	responder_send_SA_KE_NONCE_ID_AUTH,
	ike_phase_1_recv_AUTH
d82 1
a82 1
initiator_send_SA_KE_NONCE_ID(struct message * msg)
d84 2
a85 2
	if (ike_phase_1_initiator_send_SA(msg))
		return -1;
d87 2
a88 2
	if (ike_phase_1_initiator_send_KE_NONCE(msg))
		return -1;
d90 1
a90 1
	return ike_phase_1_send_ID(msg);
d95 1
a95 1
initiator_recv_SA_KE_NONCE_ID_AUTH(struct message * msg)
d97 2
a98 2
	if (ike_phase_1_initiator_recv_SA(msg))
		return -1;
d100 2
a101 2
	if (ike_phase_1_initiator_recv_KE_NONCE(msg))
		return -1;
d103 1
a103 1
	return ike_phase_1_recv_ID_AUTH(msg);
d107 1
a107 1
initiator_send_AUTH(struct message * msg)
d109 1
a109 1
	msg->exchange->flags |= EXCHANGE_FLAG_ENCRYPT;
d111 2
a112 2
	if (ike_phase_1_send_AUTH(msg))
		return -1;
d114 11
a124 11
	/*
	 * RFC 2407 4.6.3 says that, among others, INITIAL-CONTACT MUST NOT
	 * be sent in Aggressive Mode.  This leaves us with the choice of
	 * doing it in an informational exchange of its own with no delivery
	 * guarantee or in the first Quick Mode, or not at all.
	 * draft-jenkins-ipsec-rekeying-01.txt has some text that requires
	 * INITIAL-CONTACT in phase 1, thus contradicting what we learned
	 * above.  I will bring this up in the IPsec list.  For now we don't
	 * do INITIAL-CONTACT at all when using aggressive mode.
         */
	return 0;
d132 1
a132 1
responder_recv_SA_KE_NONCE_ID(struct message * msg)
d134 2
a135 2
	if (ike_phase_1_responder_recv_SA(msg))
		return -1;
d137 2
a138 2
	if (ike_phase_1_recv_ID(msg))
		return -1;
d140 1
a140 1
	return ike_phase_1_recv_KE_NONCE(msg);
d148 1
a148 1
responder_send_SA_KE_NONCE_ID_AUTH(struct message * msg)
d150 7
a156 7
	/* Add the SA payload with the transform that was chosen.  */
	if (ike_phase_1_responder_send_SA(msg))
		return -1;

	/* XXX Should we really just use the initiator's nonce size?  */
	if (ike_phase_1_send_KE_NONCE(msg, msg->exchange->nonce_i_len))
		return -1;
d158 2
a159 2
	if (ike_phase_1_post_exchange_KE_NONCE(msg))
		return -1;
d161 2
a162 2
	return ike_phase_1_responder_send_ID_AUTH(msg);
	return -1;
@


1.1.1.4
log
@another bunch of fixes from obsd, and a big isakmpd update (need testers!)
@
text
@d1 1
a1 1
/* $OpenBSD: ike_aggressive.c,v 1.8 2004/07/29 08:54:08 ho Exp $	 */
a56 3
#if defined (USE_NAT_TRAVERSAL)
#include "nat_traversal.h"
#endif
d62 5
a66 6
static int	initiator_recv_SA_KE_NONCE_ID_AUTH(struct message *);
static int	initiator_send_SA_KE_NONCE_ID(struct message *);
static int	initiator_send_AUTH(struct message *);
static int	responder_recv_SA_KE_NONCE_ID(struct message *);
static int	responder_send_SA_KE_NONCE_ID_AUTH(struct message *);
static int	responder_recv_AUTH(struct message *);
d68 1
a68 1
int (*ike_aggressive_initiator[])(struct message *) = {
d74 1
a74 1
int (*ike_aggressive_responder[])(struct message *) = {
d77 1
a77 1
	responder_recv_AUTH
d82 1
a82 1
initiator_send_SA_KE_NONCE_ID(struct message *msg)
d95 1
a95 1
initiator_recv_SA_KE_NONCE_ID_AUTH(struct message *msg)
d107 1
a107 1
initiator_send_AUTH(struct message *msg)
d132 1
a132 1
responder_recv_SA_KE_NONCE_ID(struct message *msg)
d148 1
a148 1
responder_send_SA_KE_NONCE_ID_AUTH(struct message *msg)
d162 1
a162 18
}

/*
 * Reply with the transform we chose.  Send our public DH value and a nonce
 * to the initiator.
 */
static int
responder_recv_AUTH(struct message *msg)
{
	if (ike_phase_1_recv_AUTH(msg))
		return -1;

#if defined (USE_NAT_TRAVERSAL)
	/* Aggressive: Check for NAT-D payloads and contents.  */
	if (msg->exchange->flags & EXCHANGE_FLAG_NAT_T_CAP_PEER)
		(void)nat_t_exchange_check_nat_d(msg);
#endif
	return 0;
@


