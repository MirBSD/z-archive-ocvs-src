head	1.3;
access;
symbols
	tg-mergetmp-mirosx-1:1.3
	tg-mergefixes-1-branch:1.3.0.4
	tg-mergefixes-1-base:1.3
	MIROS_X:1.3.0.2
	MIROS_X_BASE:1.3
	tg-mergetmp-3:1.3
	cvs-200411261545:1.1.1.4
	MIRBSD_XP_MIRPPC:1.2.0.4
	MIRBSD_XP_SPARC_BASE:1.2
	MIRBSD_XP_SPARC:1.2.0.2
	MIRBSD_7quater:1.1.1.2
	cvs-200405160640:1.1.1.3
	cvs-200401271800:1.1.1.2
	cvs-200401261630:1.1.1.2
	cvs-200401021645:1.1.1.2
	MIRBSD_7_ALPHA:1.1.1.2.0.6
	MIRBSD_7:1.1.1.2.0.4
	cvs-200312222040:1.1.1.2
	MIRBSD_7ter:1.1.1.2
	MIRBSD_7_DEV:1.1.1.2.0.2
	cvs-200310020700:1.1.1.2
	cvs-200309271030:1.1.1.2
	cvs-200309251530:1.1.1.2
	cvs-200308302005:1.1.1.2
	cvs-200308171200:1.1.1.2
	ctm-3496:1.1.1.2
	ctm-3449:1.1.1.2
	ctm-3437:1.1.1.2
	cvs-200307191805:1.1.1.2
	ctm-3425:1.1.1.2
	cvs-200307091500:1.1.1.2
	ctm-3389:1.1.1.2
	cvs-200306291430:1.1.1.2
	ctm-3341:1.1.1.2
	MIRBSD_5:1.1.1.2
	cvs-200306082100:1.1.1.2
	ctm-3316:1.1.1.2
	ctm-3272:1.1.1.1
	ctm-3264:1.1.1.1
	cvs-200305071630:1.1.1.1
	MIRBSD_4:1.1.1.1
	ctm-3203:1.1.1.1
	cvs-20030410-1130:1.1.1.1
	ctm-3155:1.1.1.1
	ctm-3132:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.3
date	2004.11.26.16.46.12;	author tg;	state Exp;
branches;
next	1.2;

1.2
date	2004.06.11.20.06.41;	author tg;	state Stab;
branches;
next	1.1;

1.1
date	2003.03.22.17.48.32;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.03.22.17.48.32;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2003.06.05.17.31.07;	author tg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2004.05.16.08.24.46;	author tg;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2004.11.26.15.51.26;	author tg;	state Exp;
branches;
next	;


desc
@@


1.3
log
@* merge
* fix a time_t bug I apparently introduced,
  which would show up in ~2038
* fix some more time_t and bcopy stuff
* fix all the Makefiles (bad ho@@!)
* check for tests

There's quite some discussion ongoing at license-discuss@@opensource.org
recently, not only about licences. The D-FSL was submitted, and it's
apparent that we can be liable for known bugs in our code too, depending
on the mood of the judge. That's why I rather full-update this one.
We're now en par with #7-stable again.
@
text
@/* $MirBSD: src/sbin/isakmpd/timer.c,v 1.2 2004/06/11 20:06:41 tg Stab $ */
/* $OpenBSD: timer.c,v 1.14 2004/06/14 09:55:42 ho Exp $	 */
/* $EOM: timer.c,v 1.13 2000/02/20 19:58:42 niklas Exp $	 */

/*
 * Copyright (c) 1998, 1999 Niklas Hallqvist.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * This code was written under funding by Ericsson Radio Systems.
 */

#include <sys/queue.h>
#include <stdlib.h>
#include <string.h>

#include "sysdep.h"

#include "log.h"
#include "timer.h"

static	TAILQ_HEAD(event_list, event) events;

void
timer_init(void)
{
	TAILQ_INIT(&events);
}

void
timer_next_event(struct timeval **timeout)
{
	struct timeval  now;

	if (TAILQ_FIRST(&events)) {
		gettimeofday(&now, 0);
		if (timercmp(&now, &TAILQ_FIRST(&events)->expiration, >=))
			timerclear(*timeout);
		else
			timersub(&TAILQ_FIRST(&events)->expiration, &now,
			    *timeout);
	} else
		*timeout = 0;
}

void
timer_handle_expirations(void)
{
	struct timeval  now;
	struct event   *n;

	gettimeofday(&now, 0);
	for (n = TAILQ_FIRST(&events); n && timercmp(&now, &n->expiration, >=);
	    n = TAILQ_FIRST(&events)) {
		LOG_DBG((LOG_TIMER, 10,
		    "timer_handle_expirations: event %s(%p)", n->name,
		    n->arg));
		TAILQ_REMOVE(&events, n, link);
		(*n->func)(n->arg);
		free(n);
	}
}

struct event *
timer_add_event(char *name, void (*func)(void *), void *arg,
    struct timeval *expiration)
{
	struct event   *ev = (struct event *) malloc(sizeof *ev);
	struct event   *n;
	struct timeval  now;

	if (!ev)
		return 0;
	ev->name = name;
	ev->func = func;
	ev->arg = arg;
	gettimeofday(&now, 0);
	memcpy(&ev->expiration, expiration, sizeof *expiration);
	for (n = TAILQ_FIRST(&events);
	    n && timercmp(expiration, &n->expiration, >=);
	    n = TAILQ_NEXT(n, link))
		;
	if (n) {
		LOG_DBG((LOG_TIMER, 10,
		    "timer_add_event: event %s(%p) added before %s(%p), "
		    "expiration in %lds", name,
		    arg, n->name, n->arg,
		    (long)(expiration->tv_sec - now.tv_sec)));
		TAILQ_INSERT_BEFORE(n, ev, link);
	} else {
		LOG_DBG((LOG_TIMER, 10, "timer_add_event: event %s(%p) added "
		    "last, expiration in %llds", name, arg,
		    (int64_t)(expiration->tv_sec - now.tv_sec)));
		TAILQ_INSERT_TAIL(&events, ev, link);
	}
	return ev;
}

void
timer_remove_event(struct event *ev)
{
	LOG_DBG((LOG_TIMER, 10, "timer_remove_event: removing event %s(%p)",
	    ev->name, ev->arg));
	TAILQ_REMOVE(&events, ev, link);
	free(ev);
}

void
timer_report(void)
{
	struct event   *ev;
	struct timeval  now;

	gettimeofday(&now, 0);

	for (ev = TAILQ_FIRST(&events); ev; ev = TAILQ_NEXT(ev, link))
		LOG_DBG((LOG_REPORT, 0,
		    "timer_report: event %s(%p) scheduled in %d seconds",
		    (ev->name ? ev->name : "<unknown>"), ev,
		    (int) (ev->expiration.tv_sec - now.tv_sec)));
}
@


1.2
log
@more conversion warnings
@
text
@d1 2
a2 2
/* $MirBSD$ */
/* $OpenBSD: timer.c,v 1.12 2004/04/15 18:39:26 deraadt Exp $	 */
d60 2
a61 1
			timersub(&TAILQ_FIRST(&events)->expiration, &now, *timeout);
d76 2
a77 1
		    "timer_handle_expirations: event %s(%p)", n->name, n->arg));
d111 3
a113 3
		LOG_DBG((LOG_TIMER, 10, "timer_add_event: event %s(%p) added last, "
		    "expiration in %lds", name, arg,
		    (long)(expiration->tv_sec - now.tv_sec)));
@


1.1
log
@Initial revision
@
text
@d1 3
a3 2
/*	$OpenBSD: timer.c,v 1.10 2002/06/09 08:13:07 todd Exp $	*/
/*	$EOM: timer.c,v 1.13 2000/02/20 19:58:42 niklas Exp $	*/
a15 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by Ericsson Radio Systems.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
d42 1
a42 1
static TAILQ_HEAD (event_list, event) events;
d45 1
a45 1
timer_init (void)
d47 1
a47 1
  TAILQ_INIT (&events);
d51 1
a51 1
timer_next_event (struct timeval **timeout)
d53 1
a53 1
  struct timeval now;
d55 8
a62 10
  if (TAILQ_FIRST (&events))
    {
      gettimeofday (&now, 0);
      if (timercmp (&now, &TAILQ_FIRST (&events)->expiration, >=))
	timerclear (*timeout);
      else
	timersub (&TAILQ_FIRST (&events)->expiration, &now, *timeout);
    }
  else
    *timeout = 0;
d66 1
a66 1
timer_handle_expirations (void)
d68 2
a69 2
  struct timeval now;
  struct event *n;
d71 9
a79 10
  gettimeofday (&now, 0);
  for (n = TAILQ_FIRST (&events); n && timercmp (&now, &n->expiration, >=);
       n = TAILQ_FIRST (&events))
    {
      LOG_DBG ((LOG_TIMER, 10,
		"timer_handle_expirations: event %s(%p)", n->name, n->arg));
      TAILQ_REMOVE (&events, n, link);
      (*n->func) (n->arg);
      free (n);
    }
d83 2
a84 2
timer_add_event (char *name, void (*func) (void *), void *arg,
		 struct timeval *expiration)
d86 29
a114 31
  struct event *ev = (struct event *)malloc (sizeof *ev);
  struct event *n;
  struct timeval now;

  if (!ev)
    return 0;
  ev->name = name;
  ev->func = func;
  ev->arg = arg;
  gettimeofday (&now, 0);
  memcpy (&ev->expiration, expiration, sizeof *expiration);
  for (n = TAILQ_FIRST (&events);
       n && timercmp (expiration, &n->expiration, >=);
       n = TAILQ_NEXT (n, link))
    ;
  if (n)
    {
      LOG_DBG ((LOG_TIMER, 10,
		"timer_add_event: event %s(%p) added before %s(%p), "
		"expiration in %lds", name,
		arg, n->name, n->arg, expiration->tv_sec - now.tv_sec));
      TAILQ_INSERT_BEFORE (n, ev, link);
    }
  else
    {
      LOG_DBG ((LOG_TIMER, 10, "timer_add_event: event %s(%p) added last, "
		"expiration in %lds", name, arg,
		expiration->tv_sec - now.tv_sec));
      TAILQ_INSERT_TAIL (&events, ev, link);
    }
  return ev;
d118 1
a118 1
timer_remove_event (struct event *ev)
d120 1
a120 1
  LOG_DBG ((LOG_TIMER, 10, "timer_remove_event: removing event %s(%p)",
d122 2
a123 2
  TAILQ_REMOVE (&events, ev, link);
  free (ev);
d127 1
a127 1
timer_report (void)
d129 2
a130 2
  struct event *ev;
  struct timeval now;
d132 1
a132 1
  gettimeofday (&now, 0);
d134 5
a138 5
  for (ev = TAILQ_FIRST (&events); ev; ev = TAILQ_NEXT (ev, link))
    LOG_DBG ((LOG_REPORT, 0,
	      "timer_report: event %s(%p) scheduled in %d seconds",
	      (ev->name ? ev->name : "<unknown>"), ev,
	      (int)(ev->expiration.tv_sec - now.tv_sec)));
@


1.1.1.1
log
@Import OpenBSD 3.3 source repository from CTM 3132 the first time
This opens an OpenBSD-mirabile (aka MirBSD) repository.

### MirBSD is:
# Copyright (c) 1982-2003 by Thorsten "mirabile" Glaser <x86@@ePost.de>
# Copyright © 1968-2003  The authors of And contributors to UNIX®, the
#       C Language, BSD/Berkeley Unix; 386BSD, NetBSD 1.1 and OpenBSD.
#
# Anyone who obtained a copy of this work is hereby permitted to freely use,
# distribute, modify, merge, sublicence, give away or sell it as long as the
# authors are given due credit and the following notice is retained:
#
# This work is provided "as is", with no explicit or implicit warranty what-
# soever. Use it only at your own risk. In no event may an author or contri-
# butor be held liable for any damage, directly or indirectly, that origina-
# ted through or is caused by creation or modification of this work.

MirBSD is my private tree. MirBSD does not differ very much from OpenBSD
and intentionally tracks OpenBSD. That's why it _is_ OpenBSD, just not the
official one. It's like with DarrenBSD.

At time of this writing, no advertising for MirBSD must be done,
because the advertising clause has not yet been sorted out.

http://templeofhate.com/tglaser/MirBSD/index.php
@
text
@@


1.1.1.2
log
@Import latest OpenBSD CVS tree by CTM in order
to sync the base system and ports tree with Them.

This includes the recent licence changes as well - by
importing the changed base and re-applying the diffs
(with cvs up -j -j) they are inherited, and we're not
bound to the removed clauses any longer.
@
text
@d1 1
a1 1
/*	$OpenBSD: timer.c,v 1.11 2003/06/03 14:28:16 ho Exp $	*/
d15 5
@


1.1.1.3
log
@large-scale import of OpenBSD 3.5-current source base including many fixes
note: from now, we will not be binary compatible with OpenBSD apps any
longer (due to syscall numbering differences); both an OpenBSD compat and
a conversion tool for old MirOS #7 apps will be delivered later.

The src/ tree is locked from now.
@
text
@d1 2
a2 2
/* $OpenBSD: timer.c,v 1.12 2004/04/15 18:39:26 deraadt Exp $	 */
/* $EOM: timer.c,v 1.13 2000/02/20 19:58:42 niklas Exp $	 */
d41 1
a41 1
static	TAILQ_HEAD(event_list, event) events;
d44 1
a44 1
timer_init(void)
d46 1
a46 1
	TAILQ_INIT(&events);
d50 1
a50 1
timer_next_event(struct timeval **timeout)
d52 1
a52 1
	struct timeval  now;
d54 10
a63 8
	if (TAILQ_FIRST(&events)) {
		gettimeofday(&now, 0);
		if (timercmp(&now, &TAILQ_FIRST(&events)->expiration, >=))
			timerclear(*timeout);
		else
			timersub(&TAILQ_FIRST(&events)->expiration, &now, *timeout);
	} else
		*timeout = 0;
d67 1
a67 1
timer_handle_expirations(void)
d69 2
a70 2
	struct timeval  now;
	struct event   *n;
d72 10
a81 9
	gettimeofday(&now, 0);
	for (n = TAILQ_FIRST(&events); n && timercmp(&now, &n->expiration, >=);
	    n = TAILQ_FIRST(&events)) {
		LOG_DBG((LOG_TIMER, 10,
		    "timer_handle_expirations: event %s(%p)", n->name, n->arg));
		TAILQ_REMOVE(&events, n, link);
		(*n->func)(n->arg);
		free(n);
	}
d85 2
a86 2
timer_add_event(char *name, void (*func)(void *), void *arg,
    struct timeval *expiration)
d88 31
a118 28
	struct event   *ev = (struct event *) malloc(sizeof *ev);
	struct event   *n;
	struct timeval  now;

	if (!ev)
		return 0;
	ev->name = name;
	ev->func = func;
	ev->arg = arg;
	gettimeofday(&now, 0);
	memcpy(&ev->expiration, expiration, sizeof *expiration);
	for (n = TAILQ_FIRST(&events);
	    n && timercmp(expiration, &n->expiration, >=);
	    n = TAILQ_NEXT(n, link))
		;
	if (n) {
		LOG_DBG((LOG_TIMER, 10,
		    "timer_add_event: event %s(%p) added before %s(%p), "
		    "expiration in %lds", name,
		    arg, n->name, n->arg, expiration->tv_sec - now.tv_sec));
		TAILQ_INSERT_BEFORE(n, ev, link);
	} else {
		LOG_DBG((LOG_TIMER, 10, "timer_add_event: event %s(%p) added last, "
		    "expiration in %lds", name, arg,
		    expiration->tv_sec - now.tv_sec));
		TAILQ_INSERT_TAIL(&events, ev, link);
	}
	return ev;
d122 1
a122 1
timer_remove_event(struct event *ev)
d124 1
a124 1
	LOG_DBG((LOG_TIMER, 10, "timer_remove_event: removing event %s(%p)",
d126 2
a127 2
	TAILQ_REMOVE(&events, ev, link);
	free(ev);
d131 1
a131 1
timer_report(void)
d133 2
a134 2
	struct event   *ev;
	struct timeval  now;
d136 1
a136 1
	gettimeofday(&now, 0);
d138 5
a142 5
	for (ev = TAILQ_FIRST(&events); ev; ev = TAILQ_NEXT(ev, link))
		LOG_DBG((LOG_REPORT, 0,
		    "timer_report: event %s(%p) scheduled in %d seconds",
		    (ev->name ? ev->name : "<unknown>"), ev,
		    (int) (ev->expiration.tv_sec - now.tv_sec)));
@


1.1.1.4
log
@another bunch of fixes from obsd, and a big isakmpd update (need testers!)
@
text
@d1 1
a1 1
/* $OpenBSD: timer.c,v 1.14 2004/06/14 09:55:42 ho Exp $	 */
d59 1
a59 2
			timersub(&TAILQ_FIRST(&events)->expiration, &now,
			    *timeout);
d74 1
a74 2
		    "timer_handle_expirations: event %s(%p)", n->name,
		    n->arg));
d107 2
a108 2
		LOG_DBG((LOG_TIMER, 10, "timer_add_event: event %s(%p) added "
		    "last, expiration in %lds", name, arg,
@


