head	1.1;
branch	1.1.1;
access;
symbols
	tg-mergetmp-mirosx-1:1.1.1.6
	tg-mergefixes-1-branch:1.1.1.6.0.4
	tg-mergefixes-1-base:1.1.1.6
	MIROS_X:1.1.1.6.0.2
	MIROS_X_BASE:1.1.1.6
	tg-mergetmp-3:1.1.1.6
	cvs-200411261545:1.1.1.6
	MIRBSD_XP_MIRPPC:1.1.1.5.0.4
	MIRBSD_XP_SPARC_BASE:1.1.1.5
	MIRBSD_XP_SPARC:1.1.1.5.0.2
	MIRBSD_7quater:1.1.1.3.4.1
	cvs-200405160640:1.1.1.5
	cvs-200401271800:1.1.1.4
	cvs-200401261630:1.1.1.4
	cvs-200401021645:1.1.1.4
	MIRBSD_7_ALPHA:1.1.1.3.0.6
	MIRBSD_7:1.1.1.3.0.4
	cvs-200312222040:1.1.1.4
	MIRBSD_7ter:1.1.1.3
	MIRBSD_7_DEV:1.1.1.3.0.2
	cvs-200310020700:1.1.1.3
	cvs-200309271030:1.1.1.3
	cvs-200309251530:1.1.1.3
	cvs-200308302005:1.1.1.3
	cvs-200308171200:1.1.1.3
	ctm-3496:1.1.1.3
	ctm-3449:1.1.1.2
	ctm-3437:1.1.1.2
	cvs-200307191805:1.1.1.2
	ctm-3425:1.1.1.2
	cvs-200307091500:1.1.1.2
	ctm-3389:1.1.1.2
	cvs-200306291430:1.1.1.2
	ctm-3341:1.1.1.2
	MIRBSD_5:1.1.1.2
	cvs-200306082100:1.1.1.2
	ctm-3316:1.1.1.2
	ctm-3272:1.1.1.1
	ctm-3264:1.1.1.1
	cvs-200305071630:1.1.1.1
	MIRBSD_4:1.1.1.1
	ctm-3203:1.1.1.1
	cvs-20030410-1130:1.1.1.1
	ctm-3155:1.1.1.1
	ctm-3132:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.1
date	2003.03.22.17.48.28;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.03.22.17.48.28;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2003.06.05.17.31.01;	author tg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2003.08.11.18.29.47;	author tg;	state Exp;
branches
	1.1.1.3.4.1;
next	1.1.1.4;

1.1.1.4
date	2003.12.22.21.10.34;	author tg;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2004.05.16.08.24.19;	author tg;	state Stab;
branches;
next	1.1.1.6;

1.1.1.6
date	2004.11.26.15.50.46;	author tg;	state Exp;
branches;
next	;

1.1.1.3.4.1
date	2004.03.19.19.03.12;	author bsiegert;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@/*	$OpenBSD: isakmp_doi.c,v 1.14 2001/07/05 12:36:52 ho Exp $	*/
/*	$EOM: isakmp_doi.c,v 1.42 2000/09/12 16:29:41 ho Exp $	*/

/*
 * Copyright (c) 1998, 1999, 2001 Niklas Hallqvist.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by Ericsson Radio Systems.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * This code was written under funding by Ericsson Radio Systems.
 */

/*
 * XXX This DOI is very fuzzily defined, and should perhaps be short-circuited
 * to the IPsec DOI instead.  At the moment I will have it as its own DOI,
 * as the ISAKMP architecture seems to imply it should be done like this.
 */

#include <sys/types.h>

#include "sysdep.h"

#include "doi.h"
#include "exchange.h"
#include "isakmp.h"
#include "isakmp_doi.h"
#include "ipsec.h"
#include "log.h"
#include "message.h"
#include "sa.h"
#include "util.h"

#ifdef USE_DEBUG
static int isakmp_debug_attribute (u_int16_t, u_int8_t *, u_int16_t, void *);
#endif
static void isakmp_finalize_exchange (struct message *);
static struct keystate *isakmp_get_keystate (struct message *);
static int isakmp_initiator (struct message *);
static int isakmp_responder (struct message *);
static void isakmp_setup_situation (u_int8_t *);
static size_t isakmp_situation_size (void);
static u_int8_t isakmp_spi_size (u_int8_t);
static int isakmp_validate_attribute (u_int16_t, u_int8_t *, u_int16_t,
				      void *);
static int isakmp_validate_exchange (u_int8_t);
static int isakmp_validate_id_information (u_int8_t, u_int8_t *, u_int8_t *,
					   size_t, struct exchange *);
static int isakmp_validate_key_information (u_int8_t *, size_t);
static int isakmp_validate_notification (u_int16_t);
static int isakmp_validate_proto (u_int8_t);
static int isakmp_validate_situation (u_int8_t *, size_t *);
static int isakmp_validate_transform_id (u_int8_t, u_int8_t);

static struct doi isakmp_doi = {
  { 0 }, ISAKMP_DOI_ISAKMP, 0, 0, 0,
#ifdef USE_DEBUG
  isakmp_debug_attribute,
#endif
  0,				/* delete_spi not needed.  */
  0,				/* exchange_script not needed.  */
  isakmp_finalize_exchange,
  0,				/* free_exchange_data not needed.  */
  0,				/* free_proto_data not needed.  */
  0,				/* free_sa_data not needed.  */
  isakmp_get_keystate,
  0,				/* get_spi not needed.  */
  0,				/* handle_leftover_payload not needed.  */
  0,				/* informational_post_hook not needed.  */
  0,				/* informational_pre_hook not needed.  */
  0,				/* XXX need maybe be filled-in.  */
  0,				/* proto_init not needed.  */
  isakmp_setup_situation,
  isakmp_situation_size,
  isakmp_spi_size,
  isakmp_validate_attribute,
  isakmp_validate_exchange,
  isakmp_validate_id_information,
  isakmp_validate_key_information,
  isakmp_validate_notification,
  isakmp_validate_proto,
  isakmp_validate_situation,
  isakmp_validate_transform_id,
  isakmp_initiator,
  isakmp_responder,
#ifdef USE_DEBUG
  ipsec_decode_ids
#endif
};

/* Requires doi_init to already have been called.  */
void
isakmp_doi_init (void)
{
  doi_register (&isakmp_doi);
}

#ifdef USE_DEBUG
int
isakmp_debug_attribute (u_int16_t type, u_int8_t *value, u_int16_t len,
			void *vmsg)
{
  /* XXX Not implemented yet.  */
  return 0;
}
#endif /* USE_DEBUG */

static void
isakmp_finalize_exchange (struct message *msg)
{
}

static struct keystate *
isakmp_get_keystate (struct message *msg)
{
  return 0;
}

static void
isakmp_setup_situation (u_int8_t *buf)
{
  /* Nothing to do.  */
}

static size_t
isakmp_situation_size (void)
{
  return 0;
}

static u_int8_t
isakmp_spi_size (u_int8_t proto)
{
  /* One way to specify ISAKMP SPIs is to say they're zero-sized.  */
  return 0;
}

static int
isakmp_validate_attribute (u_int16_t type, u_int8_t *value, u_int16_t len,
			   void *vmsg)
{
  /* XXX Not implemented yet.  */
  return -1;
}

static int
isakmp_validate_exchange (u_int8_t exch)
{
  /* If we get here the exchange is invalid.  */
  return -1;
}

static int
isakmp_validate_id_information (u_int8_t type, u_int8_t *extra, u_int8_t *buf,
				size_t sz, struct exchange *exchange)
{
  return zero_test (extra, ISAKMP_ID_DOI_DATA_LEN);
}

static int
isakmp_validate_key_information (u_int8_t *buf, size_t sz)
{
  /* Nothing to do.  */
  return 0;
}

static int
isakmp_validate_notification (u_int16_t type)
{
  /* If we get here the message type is invalid.  */
  return -1;
}

static int
isakmp_validate_proto (u_int8_t proto)
{
  /* If we get here the protocol is invalid.  */
  return -1;
}

static int
isakmp_validate_situation (u_int8_t *buf, size_t *sz)
{
  /* There are no situations in the ISAKMP DOI.  */
  *sz = 0;
  return 0;
}

static int
isakmp_validate_transform_id (u_int8_t proto, u_int8_t transform_id)
{
  /* XXX Not yet implemented.  */
  return -1;
}

static int
isakmp_initiator (struct message *msg)
{
  if (msg->exchange->type != ISAKMP_EXCH_INFO)
    {
      log_print ("isakmp_initiator: unsupported exchange type %d in phase %d",
		 msg->exchange->type, msg->exchange->phase);
      return -1;
    }

  return message_send_info (msg);
}

static int
isakmp_responder (struct message *msg)
{
  struct payload *p;

  switch (msg->exchange->type)
    {
    case ISAKMP_EXCH_INFO:
      for (p = TAILQ_FIRST (&msg->payload[ISAKMP_PAYLOAD_NOTIFY]); p;
	   p = TAILQ_NEXT (p, link))
	{
	  LOG_DBG ((LOG_EXCHANGE, 10,
		    "isakmp_responder: got NOTIFY of type %s, ignoring",
		    constant_lookup (isakmp_notify_cst,
				     GET_ISAKMP_NOTIFY_MSG_TYPE (p->p))));
	  p->flags |= PL_MARK;
	}

      for (p = TAILQ_FIRST (&msg->payload[ISAKMP_PAYLOAD_DELETE]); p;
	   p = TAILQ_NEXT (p, link))
	{
	  LOG_DBG ((LOG_EXCHANGE, 10,
		    "isakmp_responder: got DELETE, ignoring"));
	  p->flags |= PL_MARK;
	}
      return 0;

#ifdef USE_ISAKMP_CFG
    case ISAKMP_EXCH_TRANSACTION:
      /* return 0 isakmp_cfg_responder (msg); */
#endif /* USE_ISAKMP_CFG */

    default:
      /* XXX So far we don't accept any proposals.  */
      if (TAILQ_FIRST (&msg->payload[ISAKMP_PAYLOAD_SA]))
	{
	  message_drop (msg, ISAKMP_NOTIFY_NO_PROPOSAL_CHOSEN, 0, 1, 0);
	  return -1;
	}
    }
  return 0;
}
@


1.1.1.1
log
@Import OpenBSD 3.3 source repository from CTM 3132 the first time
This opens an OpenBSD-mirabile (aka MirBSD) repository.

### MirBSD is:
# Copyright (c) 1982-2003 by Thorsten "mirabile" Glaser <x86@@ePost.de>
# Copyright © 1968-2003  The authors of And contributors to UNIX®, the
#       C Language, BSD/Berkeley Unix; 386BSD, NetBSD 1.1 and OpenBSD.
#
# Anyone who obtained a copy of this work is hereby permitted to freely use,
# distribute, modify, merge, sublicence, give away or sell it as long as the
# authors are given due credit and the following notice is retained:
#
# This work is provided "as is", with no explicit or implicit warranty what-
# soever. Use it only at your own risk. In no event may an author or contri-
# butor be held liable for any damage, directly or indirectly, that origina-
# ted through or is caused by creation or modification of this work.

MirBSD is my private tree. MirBSD does not differ very much from OpenBSD
and intentionally tracks OpenBSD. That's why it _is_ OpenBSD, just not the
official one. It's like with DarrenBSD.

At time of this writing, no advertising for MirBSD must be done,
because the advertising clause has not yet been sorted out.

http://templeofhate.com/tglaser/MirBSD/index.php
@
text
@@


1.1.1.2
log
@Import latest OpenBSD CVS tree by CTM in order
to sync the base system and ports tree with Them.

This includes the recent licence changes as well - by
importing the changed base and re-applying the diffs
(with cvs up -j -j) they are inherited, and we're not
bound to the removed clauses any longer.
@
text
@d1 1
a1 1
/*	$OpenBSD: isakmp_doi.c,v 1.15 2003/06/03 14:28:16 ho Exp $	*/
d15 5
@


1.1.1.3
log
@Import the complete OpenBSD source tree (base system)
as of CTM delta 3496 (roughly 1200 UTC today) into the
vendor branch.
Attention: this is a big update. Don't even try to
build this system, OpenBSD 3.4-beta, yet on your own.
@
text
@d1 1
a1 1
/*	$OpenBSD: isakmp_doi.c,v 1.16 2003/08/08 08:46:59 ho Exp $	*/
a230 1
  char *tag;
a237 2
	  tag = constant_lookup (isakmp_notify_cst,
				 GET_ISAKMP_NOTIFY_MSG_TYPE (p->p));
d240 2
a241 1
		    tag ? tag : "<unknown>"));
@


1.1.1.3.4.1
log
@SECURITY: Fix multiple isakmpd vulnerabilities.

Several bugs have been found in the ISAKMP daemon which can lead to memory
leaks and a remote denial of service condition. An attacker can craft
malformed payloads that can cause the isakmpd(8) process to stop
processing requests.
@
text
@d70 1
a70 1
static int isakmp_validate_situation (u_int8_t *, size_t *, size_t);
d200 1
a200 1
isakmp_validate_situation (u_int8_t *buf, size_t *sz, size_t len)
@


1.1.1.4
log
@Time to import OpenBSD once again. Expect breakage.
@
text
@d1 1
a1 1
/*	$OpenBSD: isakmp_doi.c,v 1.17 2003/10/14 14:29:15 ho Exp $	*/
d231 1
d239 2
d243 1
a243 2
		    constant_name (isakmp_notify_cst,
				   GET_ISAKMP_NOTIFY_MSG_TYPE (p->p))));
@


1.1.1.5
log
@large-scale import of OpenBSD 3.5-current source base including many fixes
note: from now, we will not be binary compatible with OpenBSD apps any
longer (due to syscall numbering differences); both an OpenBSD compat and
a conversion tool for old MirOS #7 apps will be delivered later.

The src/ tree is locked from now.
@
text
@d1 2
a2 2
/* $OpenBSD: isakmp_doi.c,v 1.19 2004/04/15 18:39:26 deraadt Exp $	 */
/* $EOM: isakmp_doi.c,v 1.42 2000/09/12 16:29:41 ho Exp $	 */
d53 1
a53 1
static int      isakmp_debug_attribute(u_int16_t, u_int8_t *, u_int16_t, void *);
d55 17
a71 19
static void     isakmp_finalize_exchange(struct message *);
static struct keystate *isakmp_get_keystate(struct message *);
static int      isakmp_initiator(struct message *);
static int      isakmp_responder(struct message *);
static void     isakmp_setup_situation(u_int8_t *);
static size_t   isakmp_situation_size(void);
static u_int8_t isakmp_spi_size(u_int8_t);
static int
isakmp_validate_attribute(u_int16_t, u_int8_t *, u_int16_t,
			  void *);
static int      isakmp_validate_exchange(u_int8_t);
static int
isakmp_validate_id_information(u_int8_t, u_int8_t *, u_int8_t *,
			       size_t, struct exchange *);
static int      isakmp_validate_key_information(u_int8_t *, size_t);
static int      isakmp_validate_notification(u_int16_t);
static int      isakmp_validate_proto(u_int8_t);
static int      isakmp_validate_situation(u_int8_t *, size_t *, size_t);
static int      isakmp_validate_transform_id(u_int8_t, u_int8_t);
d74 1
a74 1
	{0}, ISAKMP_DOI_ISAKMP, 0, 0, 0,
d76 1
a76 1
	isakmp_debug_attribute,
d78 26
a103 26
	0,			/* delete_spi not needed.  */
	0,			/* exchange_script not needed.  */
	isakmp_finalize_exchange,
	0,			/* free_exchange_data not needed.  */
	0,			/* free_proto_data not needed.  */
	0,			/* free_sa_data not needed.  */
	isakmp_get_keystate,
	0,			/* get_spi not needed.  */
	0,			/* handle_leftover_payload not needed.  */
	0,			/* informational_post_hook not needed.  */
	0,			/* informational_pre_hook not needed.  */
	0,			/* XXX need maybe be filled-in.  */
	0,			/* proto_init not needed.  */
	isakmp_setup_situation,
	isakmp_situation_size,
	isakmp_spi_size,
	isakmp_validate_attribute,
	isakmp_validate_exchange,
	isakmp_validate_id_information,
	isakmp_validate_key_information,
	isakmp_validate_notification,
	isakmp_validate_proto,
	isakmp_validate_situation,
	isakmp_validate_transform_id,
	isakmp_initiator,
	isakmp_responder,
d105 1
a105 1
	ipsec_decode_ids
d111 1
a111 1
isakmp_doi_init(void)
d113 1
a113 1
	doi_register(&isakmp_doi);
d118 2
a119 2
isakmp_debug_attribute(u_int16_t type, u_int8_t * value, u_int16_t len,
		       void *vmsg)
d121 2
a122 2
	/* XXX Not implemented yet.  */
	return 0;
d124 1
a124 1
#endif				/* USE_DEBUG */
d127 1
a127 1
isakmp_finalize_exchange(struct message * msg)
d132 1
a132 1
isakmp_get_keystate(struct message * msg)
d134 1
a134 1
	return 0;
d138 1
a138 1
isakmp_setup_situation(u_int8_t * buf)
d140 1
a140 1
	/* Nothing to do.  */
d144 1
a144 1
isakmp_situation_size(void)
d146 1
a146 1
	return 0;
d150 1
a150 1
isakmp_spi_size(u_int8_t proto)
d152 2
a153 2
	/* One way to specify ISAKMP SPIs is to say they're zero-sized.  */
	return 0;
d157 2
a158 2
isakmp_validate_attribute(u_int16_t type, u_int8_t *value, u_int16_t len,
    void *vmsg)
d160 2
a161 2
	/* XXX Not implemented yet.  */
	return -1;
d165 1
a165 1
isakmp_validate_exchange(u_int8_t exch)
d167 2
a168 2
	/* If we get here the exchange is invalid.  */
	return -1;
d172 2
a173 2
isakmp_validate_id_information(u_int8_t type, u_int8_t *extra, u_int8_t *buf,
    size_t sz, struct exchange *exchange)
d175 1
a175 1
	return zero_test(extra, ISAKMP_ID_DOI_DATA_LEN);
d179 1
a179 1
isakmp_validate_key_information(u_int8_t *buf, size_t sz)
d181 2
a182 2
	/* Nothing to do.  */
	return 0;
d186 1
a186 1
isakmp_validate_notification(u_int16_t type)
d188 2
a189 2
	/* If we get here the message type is invalid.  */
	return -1;
d193 1
a193 1
isakmp_validate_proto(u_int8_t proto)
d195 2
a196 2
	/* If we get here the protocol is invalid.  */
	return -1;
d200 1
a200 1
isakmp_validate_situation(u_int8_t *buf, size_t *sz, size_t len)
d202 3
a204 3
	/* There are no situations in the ISAKMP DOI.  */
	*sz = 0;
	return 0;
d208 1
a208 1
isakmp_validate_transform_id(u_int8_t proto, u_int8_t transform_id)
d210 2
a211 2
	/* XXX Not yet implemented.  */
	return -1;
d215 1
a215 1
isakmp_initiator(struct message *msg)
d217 8
a224 6
	if (msg->exchange->type != ISAKMP_EXCH_INFO) {
		log_print("isakmp_initiator: unsupported exchange type %d in phase %d",
		    msg->exchange->type, msg->exchange->phase);
		return -1;
	}
	return message_send_info(msg);
d228 1
a228 1
isakmp_responder(struct message * msg)
d230 1
a230 1
	struct payload *p;
d232 21
a252 18
	switch (msg->exchange->type) {
	case ISAKMP_EXCH_INFO:
		for (p = TAILQ_FIRST(&msg->payload[ISAKMP_PAYLOAD_NOTIFY]); p;
		    p = TAILQ_NEXT(p, link)) {
			LOG_DBG((LOG_EXCHANGE, 10,
			    "isakmp_responder: got NOTIFY of type %s, ignoring",
			    constant_name(isakmp_notify_cst,
			    GET_ISAKMP_NOTIFY_MSG_TYPE(p->p))));
			p->flags |= PL_MARK;
		}

		for (p = TAILQ_FIRST(&msg->payload[ISAKMP_PAYLOAD_DELETE]); p;
		    p = TAILQ_NEXT(p, link)) {
			LOG_DBG((LOG_EXCHANGE, 10,
			    "isakmp_responder: got DELETE, ignoring"));
			p->flags |= PL_MARK;
		}
		return 0;
d255 2
a256 2
	case ISAKMP_EXCH_TRANSACTION:
		/* return 0 isakmp_cfg_responder (msg); */
d259 6
a264 6
	default:
		/* XXX So far we don't accept any proposals.  */
		if (TAILQ_FIRST(&msg->payload[ISAKMP_PAYLOAD_SA])) {
			message_drop(msg, ISAKMP_NOTIFY_NO_PROPOSAL_CHOSEN, 0, 1, 0);
			return -1;
		}
d266 2
a267 1
	return 0;
@


1.1.1.6
log
@another bunch of fixes from obsd, and a big isakmpd update (need testers!)
@
text
@d1 1
a1 1
/* $OpenBSD: isakmp_doi.c,v 1.22 2004/06/20 17:17:35 ho Exp $	 */
d53 1
a53 2
static int      isakmp_debug_attribute(u_int16_t, u_int8_t *, u_int16_t,
    void *);
d62 3
a64 2
static int	isakmp_validate_attribute(u_int16_t, u_int8_t *, u_int16_t,
    void *);
d66 3
a68 2
static int	isakmp_validate_id_information(u_int8_t, u_int8_t *,
    u_int8_t *, size_t, struct exchange *);
d120 2
a121 2
isakmp_debug_attribute(u_int16_t type, u_int8_t *value, u_int16_t len,
    void *vmsg)
d129 1
a129 1
isakmp_finalize_exchange(struct message *msg)
d134 1
a134 1
isakmp_get_keystate(struct message *msg)
d140 1
a140 1
isakmp_setup_situation(u_int8_t *buf)
d220 2
a221 2
		log_print("isakmp_initiator: unsupported exchange type %d "
		    "in phase %d", msg->exchange->type, msg->exchange->phase);
d228 1
a228 1
isakmp_responder(struct message *msg)
d234 1
a234 1
		for (p = payload_first(msg, ISAKMP_PAYLOAD_NOTIFY); p;
d236 2
a237 2
			LOG_DBG((LOG_EXCHANGE, 10, "isakmp_responder: "
			    "got NOTIFY of type %s, ignoring",
d243 1
a243 1
		for (p = payload_first(msg, ISAKMP_PAYLOAD_DELETE); p;
d258 2
a259 3
		if (payload_first(msg, ISAKMP_PAYLOAD_SA)) {
			message_drop(msg, ISAKMP_NOTIFY_NO_PROPOSAL_CHOSEN,
			    0, 1, 0);
@


