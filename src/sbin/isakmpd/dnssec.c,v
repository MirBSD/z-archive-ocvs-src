head	1.1;
branch	1.1.1;
access;
symbols
	tg-mergetmp-mirosx-1:1.1.1.5
	tg-mergefixes-1-branch:1.1.1.5.0.4
	tg-mergefixes-1-base:1.1.1.5
	MIROS_X:1.1.1.5.0.2
	MIROS_X_BASE:1.1.1.5
	tg-mergetmp-3:1.1.1.5
	cvs-200411261545:1.1.1.5
	MIRBSD_XP_MIRPPC:1.1.1.4.0.4
	MIRBSD_XP_SPARC_BASE:1.1.1.4
	MIRBSD_XP_SPARC:1.1.1.4.0.2
	MIRBSD_7quater:1.1.1.2
	cvs-200405160640:1.1.1.4
	cvs-200401271800:1.1.1.3
	cvs-200401261630:1.1.1.3
	cvs-200401021645:1.1.1.3
	MIRBSD_7_ALPHA:1.1.1.2.0.6
	MIRBSD_7:1.1.1.2.0.4
	cvs-200312222040:1.1.1.3
	MIRBSD_7ter:1.1.1.2
	MIRBSD_7_DEV:1.1.1.2.0.2
	cvs-200310020700:1.1.1.2
	cvs-200309271030:1.1.1.2
	cvs-200309251530:1.1.1.2
	cvs-200308302005:1.1.1.2
	cvs-200308171200:1.1.1.2
	ctm-3496:1.1.1.2
	ctm-3449:1.1.1.2
	ctm-3437:1.1.1.2
	cvs-200307191805:1.1.1.2
	ctm-3425:1.1.1.2
	cvs-200307091500:1.1.1.2
	ctm-3389:1.1.1.2
	cvs-200306291430:1.1.1.2
	ctm-3341:1.1.1.2
	MIRBSD_5:1.1.1.2
	cvs-200306082100:1.1.1.2
	ctm-3316:1.1.1.2
	ctm-3272:1.1.1.1
	ctm-3264:1.1.1.1
	cvs-200305071630:1.1.1.1
	MIRBSD_4:1.1.1.1
	ctm-3203:1.1.1.1
	cvs-20030410-1130:1.1.1.1
	ctm-3155:1.1.1.1
	ctm-3132:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.1
date	2003.03.22.17.48.28;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.03.22.17.48.28;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2003.06.05.17.30.59;	author tg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2003.12.22.21.10.32;	author tg;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2004.05.16.08.23.59;	author tg;	state Stab;
branches;
next	1.1.1.5;

1.1.1.5
date	2004.11.26.15.50.14;	author tg;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@/*	$OpenBSD: dnssec.c,v 1.14 2002/06/10 18:08:58 ho Exp $	*/

/*
 * Copyright (c) 2001 Håkan Olsson.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#include <sys/types.h>
#include <netinet/in.h>
#include <arpa/nameser.h>
#include <arpa/inet.h>
#include <stdlib.h>

#include <openssl/rsa.h>

#ifdef LWRES
#include <lwres/netdb.h>
#include <dns/keyvalues.h>
#else
#include <netdb.h>
#endif

#include "sysdep.h"

#include "dnssec.h"
#include "exchange.h"
#include "ipsec_num.h"
#include "libcrypto.h"
#include "log.h"
#include "message.h"
#include "transport.h"
#include "util.h"

#ifndef DNS_UFQDN_SEPARATOR
#define DNS_UFQDN_SEPARATOR "._ipsec."
#endif

/* adapted from <dns/rdatastruct.h> / RFC 2535  */
struct dns_rdata_key {
  u_int16_t flags;
  u_int8_t protocol;
  u_int8_t algorithm;
  u_int16_t datalen;
  unsigned char *data;
};

void *
dns_get_key (int type, struct message *msg, int *keylen)
{
  struct exchange *exchange = msg->exchange;
  struct rrsetinfo *rr;
  struct dns_rdata_key key_rr;
  char name[MAXHOSTNAMELEN];
  in_addr_t ip4;
  u_int8_t algorithm;
  u_int8_t *id, *umark;
  size_t id_len;
  int ret, i;

  switch (type)
    {
    case IKE_AUTH_RSA_SIG:
      algorithm = DNS_KEYALG_RSA;
      break;

    case IKE_AUTH_RSA_ENC:
    case IKE_AUTH_RSA_ENC_REV:
      /* XXX Not yet. */
      /* algorithm = DNS_KEYALG_RSA; */
      return 0;

    case IKE_AUTH_DSS:
      /* XXX Not yet. */
      /* algorithm = DNS_KEYALG_DSS; */
      return 0;

    case IKE_AUTH_PRE_SHARED:
    default:
      return 0;
    }

  id = exchange->initiator ? exchange->id_r : exchange->id_i;
  id_len = exchange->initiator ? exchange->id_r_len : exchange->id_i_len;
  memset (name, 0, MAXHOSTNAMELEN);

  if (!id || id_len == 0)
    {
      log_print ("dns_get_key: ID is missing");
      return 0;
    }

  /* Exchanges (and SAs) don't carry the ID in ISAKMP form */
  id -= ISAKMP_GEN_SZ;
  id_len += ISAKMP_GEN_SZ - ISAKMP_ID_DATA_OFF;

  switch (GET_ISAKMP_ID_TYPE (id))
    {
    case IPSEC_ID_IPV4_ADDR:
      /* We want to lookup a KEY RR in the reverse zone.  */
      if (id_len < sizeof ip4)
	return 0;
      memcpy (&ip4, id + ISAKMP_ID_DATA_OFF, sizeof ip4);
      snprintf (name, MAXHOSTNAMELEN, "%d.%d.%d.%d.in-addr.arpa.", ip4 >> 24,
	       (ip4 >> 16) & 0xFF, (ip4 >> 8) & 0xFF, ip4 & 0xFF);
      break;

    case IPSEC_ID_IPV6_ADDR:
      /* XXX Not yet. */
      return 0;
      break;

    case IPSEC_ID_FQDN:
      if ((id_len + 1) >= MAXHOSTNAMELEN)
	return 0;
      /* ID is not NULL-terminated. Add trailing dot and terminate.  */
      memcpy (name, id + ISAKMP_ID_DATA_OFF, id_len);
      *(name + id_len) = '.';
      *(name + id_len + 1) = '\0';
      break;

    case IPSEC_ID_USER_FQDN:
      /*
       * Some special handling here. We want to convert the ID
       * 'user@@host.domain' string into 'user._ipsec.host.domain.'.
       */
      if ((id_len + sizeof (DNS_UFQDN_SEPARATOR)) >= MAXHOSTNAMELEN)
	return 0;
      /* Look for the '@@' separator.  */
      for (umark = id + ISAKMP_ID_DATA_OFF; (umark - id) < id_len; umark++)
	if (*umark == '@@')
	  break;
      if (*umark != '@@')
	{
	  LOG_DBG((LOG_MISC, 50, "dns_get_key: bad UFQDN ID"));
	  return 0;
	}
      *umark++ = '\0';
      /* id is now terminated. 'umark', however, is not.  */
      snprintf (name, MAXHOSTNAMELEN, "%s%s", id + ISAKMP_ID_DATA_OFF,
		DNS_UFQDN_SEPARATOR);
      memcpy (name + strlen (name), umark, id_len - strlen (id) - 1);
      *(name + id_len + sizeof (DNS_UFQDN_SEPARATOR) - 2) = '.';
      *(name + id_len + sizeof (DNS_UFQDN_SEPARATOR) - 1) = '\0';
      break;

    default:
      return 0;
    }

  LOG_DBG ((LOG_MISC, 50, "dns_get_key: trying KEY RR for %s", name));
  ret = getrrsetbyname (name, C_IN, T_KEY, 0, &rr);

  if (ret)
    {
      LOG_DBG ((LOG_MISC, 30, "dns_get_key: no DNS responses (error %d)",
		ret));
      return 0;
    }

  LOG_DBG ((LOG_MISC, 80,
	    "dns_get_key: rrset class %d type %d ttl %d nrdatas %d nrsigs %d",
	    rr->rri_rdclass, rr->rri_rdtype, rr->rri_ttl, rr->rri_nrdatas,
	    rr->rri_nsigs));

  /* We don't accept unvalidated data. */
  if (!(rr->rri_flags & RRSET_VALIDATED))
    {
      LOG_DBG ((LOG_MISC, 10, "dns_get_key: got unvalidated response"));
      freerrset (rr);
      return 0;
    }

  /* Sanity. */
  if (rr->rri_nrdatas == 0 || rr->rri_rdtype != T_KEY)
    {
      LOG_DBG ((LOG_MISC, 30, "dns_get_key: no KEY RRs received"));
      freerrset (rr);
      return 0;
    }

  memset (&key_rr, 0, sizeof key_rr);

  /*
   * Find a key with the wanted algorithm, if any.
   * XXX If there are several keys present, we currently only find the first.
   */
  for (i = 0; i < rr->rri_nrdatas && key_rr.datalen == 0; i++)
    {
      key_rr.flags     = ntohs ((u_int16_t) *rr->rri_rdatas[i].rdi_data);
      key_rr.protocol  = *(rr->rri_rdatas[i].rdi_data + 2);
      key_rr.algorithm = *(rr->rri_rdatas[i].rdi_data + 3);

      if (key_rr.protocol != DNS_KEYPROTO_IPSEC)
	{
	  LOG_DBG ((LOG_MISC, 50, "dns_get_key: ignored non-IPsec key"));
	  continue;
	}

      if (key_rr.algorithm != algorithm)
	{
	  LOG_DBG ((LOG_MISC, 50, "dns_get_key: ignored key with other alg"));
	  continue;
	}

      key_rr.datalen = rr->rri_rdatas[i].rdi_length - 4;
      if (key_rr.datalen <= 0)
	{
	  LOG_DBG ((LOG_MISC, 50, "dns_get_key: ignored bad key"));
	  key_rr.datalen = 0;
	  continue;
	}

      /* This key seems to fit our requirements... */
      key_rr.data = (char *)malloc (key_rr.datalen);
      if (!key_rr.data)
	{
	  log_error ("dns_get_key: malloc (%d) failed", key_rr.datalen);
	  freerrset (rr);
	  return 0;
	}
      memcpy (key_rr.data, rr->rri_rdatas[i].rdi_data + 4, key_rr.datalen);
      *keylen = key_rr.datalen;
    }

  freerrset (rr);

  if (key_rr.datalen)
    return key_rr.data;
  else
    return 0;
}

int
dns_RSA_dns_to_x509 (u_int8_t *key, int keylen, RSA **rsa_key)
{
  RSA *rsa;
  int key_offset;
  u_int8_t e_len;

  if (!key || keylen <= 0)
    {
      log_print ("dns_RSA_dns_to_x509: invalid public key");
      return -1;
    }

  rsa = RSA_new ();
  if (rsa == NULL)
    {
      log_error ("dns_RSA_dns_to_x509: failed to allocate new RSA struct");
      return -1;
    }

  e_len = *key;
  key_offset = 1;

  if (e_len == 0)
    {
      if (keylen < 3)
	{
	  log_print ("dns_RSA_dns_to_x509: invalid public key");
	  RSA_free (rsa);
	  return -1;
	}
      e_len  = *(key + key_offset++) << 8;
      e_len += *(key + key_offset++);
    }

  if (e_len > (keylen - key_offset))
    {
      log_print ("dns_RSA_dns_to_x509: invalid public key");
      RSA_free (rsa);
      return -1;
    }

  rsa->e = BN_bin2bn (key + key_offset, e_len, NULL);
  key_offset += e_len;

  /* XXX if (keylen <= key_offset) -> "invalid public key" ? */

  rsa->n = BN_bin2bn (key + key_offset, keylen - key_offset, NULL);

  *rsa_key = rsa;

  LOG_DBG ((LOG_MISC, 30, "dns_RSA_dns_to_x509: got %d bits RSA key",
	    BN_num_bits (rsa->n)));

  return 0;
}

#if notyet
int
dns_RSA_x509_to_dns (RSA *rsa_key, u_int8_t *key, int *keylen)
{
  return 0;
}
#endif
@


1.1.1.1
log
@Import OpenBSD 3.3 source repository from CTM 3132 the first time
This opens an OpenBSD-mirabile (aka MirBSD) repository.

### MirBSD is:
# Copyright (c) 1982-2003 by Thorsten "mirabile" Glaser <x86@@ePost.de>
# Copyright © 1968-2003  The authors of And contributors to UNIX®, the
#       C Language, BSD/Berkeley Unix; 386BSD, NetBSD 1.1 and OpenBSD.
#
# Anyone who obtained a copy of this work is hereby permitted to freely use,
# distribute, modify, merge, sublicence, give away or sell it as long as the
# authors are given due credit and the following notice is retained:
#
# This work is provided "as is", with no explicit or implicit warranty what-
# soever. Use it only at your own risk. In no event may an author or contri-
# butor be held liable for any damage, directly or indirectly, that origina-
# ted through or is caused by creation or modification of this work.

MirBSD is my private tree. MirBSD does not differ very much from OpenBSD
and intentionally tracks OpenBSD. That's why it _is_ OpenBSD, just not the
official one. It's like with DarrenBSD.

At time of this writing, no advertising for MirBSD must be done,
because the advertising clause has not yet been sorted out.

http://templeofhate.com/tglaser/MirBSD/index.php
@
text
@@


1.1.1.2
log
@Import latest OpenBSD CVS tree by CTM in order
to sync the base system and ports tree with Them.

This includes the recent licence changes as well - by
importing the changed base and re-applying the diffs
(with cvs up -j -j) they are inherited, and we're not
bound to the removed clauses any longer.
@
text
@d1 1
a1 1
/*	$OpenBSD: dnssec.c,v 1.16 2003/06/03 14:28:16 ho Exp $	*/
d14 2
d105 1
a105 1
  memset (name, 0, sizeof name);
d124 1
a124 1
      snprintf (name, sizeof name, "%d.%d.%d.%d.in-addr.arpa.", ip4 >> 24,
d134 1
a134 1
      if ((id_len + 1) >= sizeof name)
d147 1
a147 1
      if ((id_len + sizeof (DNS_UFQDN_SEPARATOR)) >= sizeof name)
d160 1
a160 1
      snprintf (name, sizeof name, "%s%s", id + ISAKMP_ID_DATA_OFF,
@


1.1.1.3
log
@Time to import OpenBSD once again. Expect breakage.
@
text
@d1 1
a1 1
/*	$OpenBSD: dnssec.c,v 1.17 2003/11/06 16:12:07 ho Exp $	*/
d153 1
a153 1
	  LOG_DBG ((LOG_MISC, 50, "dns_get_key: bad UFQDN ID"));
@


1.1.1.4
log
@large-scale import of OpenBSD 3.5-current source base including many fixes
note: from now, we will not be binary compatible with OpenBSD apps any
longer (due to syscall numbering differences); both an OpenBSD compat and
a conversion tool for old MirOS #7 apps will be delivered later.

The src/ tree is locked from now.
@
text
@d1 1
a1 1
/* $OpenBSD: dnssec.c,v 1.19 2004/05/14 08:42:56 hshoexer Exp $	 */
d59 5
a63 5
	u_int16_t       flags;
	u_int8_t        protocol;
	u_int8_t        algorithm;
	u_int16_t       datalen;
	unsigned char  *data;
d67 1
a67 1
dns_get_key(int type, struct message *msg, int *keylen)
d69 61
a129 29
	struct exchange *exchange = msg->exchange;
	struct rrsetinfo *rr;
	struct dns_rdata_key key_rr;
	char            name[MAXHOSTNAMELEN];
	in_addr_t       ip4;
	u_int8_t        algorithm, *id, *umark;
	size_t          id_len;
	int             ret, i;

	switch (type) {
	case IKE_AUTH_RSA_SIG:
		algorithm = DNS_KEYALG_RSA;
		break;

	case IKE_AUTH_RSA_ENC:
	case IKE_AUTH_RSA_ENC_REV:
		/* XXX Not yet. */
		/* algorithm = DNS_KEYALG_RSA; */
		return 0;

	case IKE_AUTH_DSS:
		/* XXX Not yet. */
		/* algorithm = DNS_KEYALG_DSS; */
		return 0;

	case IKE_AUTH_PRE_SHARED:
	default:
		return 0;
	}
d131 47
a177 67
	id = exchange->initiator ? exchange->id_r : exchange->id_i;
	id_len = exchange->initiator ? exchange->id_r_len : exchange->id_i_len;
	memset(name, 0, sizeof name);

	if (!id || id_len == 0) {
		log_print("dns_get_key: ID is missing");
		return 0;
	}
	/* Exchanges (and SAs) don't carry the ID in ISAKMP form */
	id -= ISAKMP_GEN_SZ;
	id_len += ISAKMP_GEN_SZ - ISAKMP_ID_DATA_OFF;

	switch (GET_ISAKMP_ID_TYPE(id)) {
	case IPSEC_ID_IPV4_ADDR:
		/* We want to lookup a KEY RR in the reverse zone.  */
		if (id_len < sizeof ip4)
			return 0;
		memcpy(&ip4, id + ISAKMP_ID_DATA_OFF, sizeof ip4);
		snprintf(name, sizeof name, "%d.%d.%d.%d.in-addr.arpa.", ip4
		    >> 24, (ip4 >> 16) & 0xFF, (ip4 >> 8) & 0xFF, ip4 & 0xFF);
		break;

	case IPSEC_ID_IPV6_ADDR:
		/* XXX Not yet. */
		return 0;
		break;

	case IPSEC_ID_FQDN:
		if ((id_len + 1) >= sizeof name)
			return 0;
		/* ID is not NULL-terminated. Add trailing dot and terminate. */
		memcpy(name, id + ISAKMP_ID_DATA_OFF, id_len);
		*(name + id_len) = '.';
		*(name + id_len + 1) = '\0';
		break;

	case IPSEC_ID_USER_FQDN:
		/*
		 * Some special handling here. We want to convert the ID
		 * 'user@@host.domain' string into 'user._ipsec.host.domain.'.
	         */
		if ((id_len + sizeof(DNS_UFQDN_SEPARATOR)) >= sizeof name)
			return 0;
		/* Look for the '@@' separator.  */
		for (umark = id + ISAKMP_ID_DATA_OFF; (umark - id) < id_len;
		    umark++)
			if (*umark == '@@')
				break;
		if (*umark != '@@') {
			LOG_DBG((LOG_MISC, 50, "dns_get_key: bad UFQDN ID"));
			return 0;
		}
		*umark++ = '\0';
		/* id is now terminated. 'umark', however, is not.  */
		snprintf(name, sizeof name, "%s%s", id + ISAKMP_ID_DATA_OFF,
		    DNS_UFQDN_SEPARATOR);
		memcpy(name + strlen(name), umark, id_len - strlen(id) - 1);
		*(name + id_len + sizeof(DNS_UFQDN_SEPARATOR) - 2) = '.';
		*(name + id_len + sizeof(DNS_UFQDN_SEPARATOR) - 1) = '\0';
		break;

	default:
		return 0;
	}

	LOG_DBG((LOG_MISC, 50, "dns_get_key: trying KEY RR for %s", name));
	ret = getrrsetbyname(name, C_IN, T_KEY, 0, &rr);
d179 1
a179 6
	if (ret) {
		LOG_DBG((LOG_MISC, 30, "dns_get_key: no DNS responses "
		    "(error %d)", ret));
		return 0;
	}
	LOG_DBG((LOG_MISC, 80,
d184 66
a249 58
	/* We don't accept unvalidated data. */
	if (!(rr->rri_flags & RRSET_VALIDATED)) {
		LOG_DBG((LOG_MISC, 10, "dns_get_key: got unvalidated response"));
		freerrset(rr);
		return 0;
	}
	/* Sanity. */
	if (rr->rri_nrdatas == 0 || rr->rri_rdtype != T_KEY) {
		LOG_DBG((LOG_MISC, 30, "dns_get_key: no KEY RRs received"));
		freerrset(rr);
		return 0;
	}
	memset(&key_rr, 0, sizeof key_rr);

	/*
	 * Find a key with the wanted algorithm, if any.
	 * XXX If there are several keys present, we currently only find the
	 * first.
         */
	for (i = 0; i < rr->rri_nrdatas && key_rr.datalen == 0; i++) {
		key_rr.flags = ntohs((u_int16_t) * rr->rri_rdatas[i].rdi_data);
		key_rr.protocol = *(rr->rri_rdatas[i].rdi_data + 2);
		key_rr.algorithm = *(rr->rri_rdatas[i].rdi_data + 3);

		if (key_rr.protocol != DNS_KEYPROTO_IPSEC) {
			LOG_DBG((LOG_MISC, 50, "dns_get_key: ignored "
			    "non-IPsec key"));
			continue;
		}
		if (key_rr.algorithm != algorithm) {
			LOG_DBG((LOG_MISC, 50, "dns_get_key: ignored "
			    "key with other alg"));
			continue;
		}
		key_rr.datalen = rr->rri_rdatas[i].rdi_length - 4;
		if (key_rr.datalen <= 0) {
			LOG_DBG((LOG_MISC, 50, "dns_get_key: ignored bad key"));
			key_rr.datalen = 0;
			continue;
		}
		/* This key seems to fit our requirements... */
		key_rr.data = (char *)malloc(key_rr.datalen);
		if (!key_rr.data) {
			log_error("dns_get_key: malloc (%d) failed",
			    key_rr.datalen);
			freerrset(rr);
			return 0;
		}
		memcpy(key_rr.data, rr->rri_rdatas[i].rdi_data + 4,
		    key_rr.datalen);
		*keylen = key_rr.datalen;
	}

	freerrset(rr);

	if (key_rr.datalen)
		return key_rr.data;
	return 0;
d253 1
a253 1
dns_RSA_dns_to_x509(u_int8_t *key, int keylen, RSA **rsa_key)
d255 43
a297 15
	RSA	*rsa;
	int	 key_offset;
	u_int8_t e_len;

	if (!key || keylen <= 0) {
		log_print("dns_RSA_dns_to_x509: invalid public key");
		return -1;
	}
	rsa = RSA_new();
	if (rsa == NULL) {
		log_error("dns_RSA_dns_to_x509: failed to allocate new RSA struct");
		return -1;
	}
	e_len = *key;
	key_offset = 1;
d299 1
a299 18
	if (e_len == 0) {
		if (keylen < 3) {
			log_print("dns_RSA_dns_to_x509: invalid public key");
			RSA_free(rsa);
			return -1;
		}
		e_len = *(key + key_offset++) << 8;
		e_len += *(key + key_offset++);
	}
	if (e_len > (keylen - key_offset)) {
		log_print("dns_RSA_dns_to_x509: invalid public key");
		RSA_free(rsa);
		return -1;
	}
	rsa->e = BN_bin2bn(key + key_offset, e_len, NULL);
	key_offset += e_len;

	/* XXX if (keylen <= key_offset) -> "invalid public key" ? */
d301 1
a301 1
	rsa->n = BN_bin2bn(key + key_offset, keylen - key_offset, NULL);
d303 2
a304 1
	*rsa_key = rsa;
d306 1
a306 3
	LOG_DBG((LOG_MISC, 30, "dns_RSA_dns_to_x509: got %d bits RSA key",
	    BN_num_bits(rsa->n)));
	return 0;
d311 1
a311 1
dns_RSA_x509_to_dns(RSA *rsa_key, u_int8_t *key, int *keylen)
d313 1
a313 1
	return 0;
@


1.1.1.5
log
@another bunch of fixes from obsd, and a big isakmpd update (need testers!)
@
text
@d1 1
a1 1
/* $OpenBSD: dnssec.c,v 1.20 2004/06/14 09:55:41 ho Exp $	 */
d129 1
a129 1
		/* ID is not NULL-terminated. Add trailing dot and NULL.  */
d179 1
a179 2
		LOG_DBG((LOG_MISC, 10, "dns_get_key: "
		    "got unvalidated response"));
d213 1
a213 2
			LOG_DBG((LOG_MISC, 50, "dns_get_key: "
			    "ignored bad key"));
d250 1
a250 2
		log_error("dns_RSA_dns_to_x509: "
		    "failed to allocate new RSA struct");
@


