head	1.1;
branch	1.1.1;
access;
symbols
	tg-mergetmp-mirosx-1:1.1.1.7
	tg-mergefixes-1-branch:1.1.1.7.0.4
	tg-mergefixes-1-base:1.1.1.7
	MIROS_X:1.1.1.7.0.2
	MIROS_X_BASE:1.1.1.7
	tg-mergetmp-3:1.1.1.7
	cvs-200411261545:1.1.1.7
	MIRBSD_XP_MIRPPC:1.1.1.6.0.4
	MIRBSD_XP_SPARC_BASE:1.1.1.6
	MIRBSD_XP_SPARC:1.1.1.6.0.2
	MIRBSD_7quater:1.1.1.4
	cvs-200405160640:1.1.1.6
	cvs-200401271800:1.1.1.5
	cvs-200401261630:1.1.1.5
	cvs-200401021645:1.1.1.5
	MIRBSD_7_ALPHA:1.1.1.4.0.6
	MIRBSD_7:1.1.1.4.0.4
	cvs-200312222040:1.1.1.5
	MIRBSD_7ter:1.1.1.4
	MIRBSD_7_DEV:1.1.1.4.0.2
	cvs-200310020700:1.1.1.4
	cvs-200309271030:1.1.1.4
	cvs-200309251530:1.1.1.4
	cvs-200308302005:1.1.1.4
	cvs-200308171200:1.1.1.4
	ctm-3496:1.1.1.4
	ctm-3449:1.1.1.4
	ctm-3437:1.1.1.4
	cvs-200307191805:1.1.1.4
	ctm-3425:1.1.1.4
	cvs-200307091500:1.1.1.4
	ctm-3389:1.1.1.4
	cvs-200306291430:1.1.1.4
	ctm-3341:1.1.1.3
	MIRBSD_5:1.1.1.2
	cvs-200306082100:1.1.1.2
	ctm-3316:1.1.1.2
	ctm-3272:1.1.1.1
	ctm-3264:1.1.1.1
	cvs-200305071630:1.1.1.1
	MIRBSD_4:1.1.1.1
	ctm-3203:1.1.1.1
	cvs-20030410-1130:1.1.1.1
	ctm-3155:1.1.1.1
	ctm-3132:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.1
date	2003.03.22.17.48.32;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.03.22.17.48.32;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2003.06.05.17.31.07;	author tg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2003.06.19.12.42.34;	author tg;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2003.06.29.17.27.14;	author tg;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2003.12.22.21.10.38;	author tg;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2004.05.16.08.24.46;	author tg;	state Stab;
branches;
next	1.1.1.7;

1.1.1.7
date	2004.11.26.15.51.27;	author tg;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@/*	$OpenBSD: transport.c,v 1.19 2003/03/14 14:49:08 ho Exp $	*/
/*	$EOM: transport.c,v 1.43 2000/10/10 12:36:39 provos Exp $	*/

/*
 * Copyright (c) 1998, 1999 Niklas Hallqvist.  All rights reserved.
 * Copyright (c) 2001 Håkan Olsson.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by Ericsson Radio Systems.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * This code was written under funding by Ericsson Radio Systems.
 */

#include <sys/param.h>
#include <sys/queue.h>
#include <string.h>

#include "sysdep.h"

#include "conf.h"
#include "exchange.h"
#include "log.h"
#include "message.h"
#include "sa.h"
#include "timer.h"
#include "transport.h"

/* If no retransmit limit is given, use this as a default.  */
#define RETRANSMIT_DEFAULT 10

LIST_HEAD (transport_list, transport) transport_list;
LIST_HEAD (transport_method_list, transport_vtbl) transport_method_list;

/* Call the reinit function of the various transports.  */
void
transport_reinit (void)
{
  struct transport_vtbl *method;

  for (method = LIST_FIRST (&transport_method_list); method;
       method = LIST_NEXT (method, link))
    method->reinit ();
}

/* Initialize the transport maintenance module.  */
void
transport_init (void)
{
  LIST_INIT (&transport_list);
  LIST_INIT (&transport_method_list);
}

/* Register another transport T.  */
void
transport_add (struct transport *t)
{
  LOG_DBG ((LOG_TRANSPORT, 70, "transport_add: adding %p", t));
  TAILQ_INIT (&t->sendq);
  TAILQ_INIT (&t->prio_sendq);
  LIST_INSERT_HEAD (&transport_list, t, link);
  t->flags = 0;
  t->refcnt = 0;
}

/* Add a referer to transport T.  */
void
transport_reference (struct transport *t)
{
  t->refcnt++;
  LOG_DBG ((LOG_TRANSPORT, 95,
	    "transport_reference: transport %p now has %d references", t,
	    t->refcnt));
}

/*
 * Remove a referer from transport T, removing all of T when no referers left.
 */
void
transport_release (struct transport *t)
{
  LOG_DBG ((LOG_TRANSPORT, 95,
	    "transport_release: transport %p had %d references", t,
	    t->refcnt));
  if (--t->refcnt)
    return;

  LOG_DBG ((LOG_TRANSPORT, 70, "transport_release: freeing %p", t));
  LIST_REMOVE (t, link);
  t->vtbl->remove (t);
}

void
transport_report (void)
{
  struct transport *t;
  struct message *msg;

  for (t = LIST_FIRST (&transport_list); t; t = LIST_NEXT (t, link))
    {
      LOG_DBG ((LOG_REPORT, 0,
		"transport_report: transport %p flags %x refcnt %d", t,
		t->flags, t->refcnt));

      t->vtbl->report (t);

      /* This is the reason message_dump_raw lives outside message.c.  */
      for (msg = TAILQ_FIRST (&t->prio_sendq); msg;
	   msg = TAILQ_NEXT (msg, link))
        message_dump_raw ("udp_report", msg, LOG_REPORT);

      for (msg = TAILQ_FIRST (&t->sendq); msg; msg = TAILQ_NEXT (msg, link))
        message_dump_raw ("udp_report", msg, LOG_REPORT);
    }
}

int
transport_prio_sendqs_empty (void)
{
  struct transport *t;

  for (t = LIST_FIRST (&transport_list); t; t = LIST_NEXT (t, link))
    if (TAILQ_FIRST (&t->prio_sendq))
      return 0;
  return 1;
}

/* Register another transport method T.  */
void
transport_method_add (struct transport_vtbl *t)
{
  LIST_INSERT_HEAD (&transport_method_list, t, link);
}

/* Apply a function FUNC on all registered transports.  */
void
transport_map (void (*func) (struct transport *))
{
  struct transport *t;

  for (t = LIST_FIRST (&transport_list); t; t = LIST_NEXT (t, link))
    (*func) (t);
}

/*
 * Build up a file descriptor set FDS with all transport descriptors we want
 * to read from.  Return the number of file descriptors select(2) needs to
 * check in order to cover the ones we setup in here.
 */
int
transport_fd_set (fd_set *fds)
{
  int n;
  int max = -1;
  struct transport *t;

  for (t = LIST_FIRST (&transport_list); t; t = LIST_NEXT (t, link))
    if (t->flags & TRANSPORT_LISTEN)
      {
	n = t->vtbl->fd_set (t, fds, 1);
	if (n > max)
	  max = n;
      }
  return max + 1;
}

/*
 * Build up a file descriptor set FDS with all the descriptors belonging to
 * transport where messages are queued for transmittal.  Return the number
 * of file descriptors select(2) needs to check in order to cover the ones
 * we setup in here.
 */
int
transport_pending_wfd_set (fd_set *fds)
{
  int n;
  int max = -1;
  struct transport *t;

  for (t = LIST_FIRST (&transport_list); t; t = LIST_NEXT (t, link))
    {
      if (TAILQ_FIRST (&t->sendq) || TAILQ_FIRST (&t->prio_sendq))
	{
	  n = t->vtbl->fd_set (t, fds, 1);
	  if (n > max)
	    max = n;
	}
    }
  return max + 1;
}

/*
 * For each transport with a file descriptor in FDS, try to get an
 * incoming message and start processing it.
 */
void
transport_handle_messages (fd_set *fds)
{
  struct transport *t;

  for (t = LIST_FIRST (&transport_list); t; t = LIST_NEXT (t, link))
    if ((t->flags & TRANSPORT_LISTEN) && (*t->vtbl->fd_isset) (t, fds))
      (*t->vtbl->handle_message) (t);
}

/*
 * Send the first queued message on the transports found whose file
 * descriptor is in FDS and has messages queued.  Remove the fd bit from
 * FDS as soon as one message has been sent on it so other transports
 * sharing the socket won't get service without an intervening select
 * call.  Perhaps a fairness strategy should be implemented between
 * such transports.  Now early transports in the list will potentially
 * be favoured to later ones sharing the file descriptor.
 */
void
transport_send_messages (fd_set *fds)
{
  struct transport *t, *next;
  struct message *msg;
  struct exchange *exchange;
  struct timeval expiration;
  int expiry, ok_to_drop_message;

  /* Reference all transports first so noone will disappear while in use.  */
  for (t = LIST_FIRST (&transport_list); t; t = LIST_NEXT (t, link))
    transport_reference (t);

  for (t = LIST_FIRST (&transport_list); t; t = LIST_NEXT (t, link))
    {
      if ((TAILQ_FIRST (&t->sendq) || TAILQ_FIRST (&t->prio_sendq))
	  && t->vtbl->fd_isset (t, fds))
	{
	  t->vtbl->fd_set (t, fds, 0);

	  /* Prefer a message from the prioritized sendq.  */
	  if (TAILQ_FIRST (&t->prio_sendq))
 	    {
	      msg = TAILQ_FIRST (&t->prio_sendq);
	      TAILQ_REMOVE (&t->prio_sendq, msg, link);
	    }
	  else
	    {
	      msg = TAILQ_FIRST (&t->sendq);
	      TAILQ_REMOVE (&t->sendq, msg, link);
	    }

	  msg->flags &= ~MSG_IN_TRANSIT;
	  exchange = msg->exchange;
	  exchange->in_transit = 0;

	  /*
	   * We disregard the potential error message here, hoping that the
	   * retransmit will go better.
	   * XXX Consider a retry/fatal error discriminator.
	   */
	  t->vtbl->send_message (msg);
	  msg->xmits++;

	  /*
	   * This piece of code has been proven to be quite delicate.
	   * Think twice for before altering.  Here's an outline:
	   *
	   * If this message is not the one which finishes an exchange,
	   * check if we have reached the number of retransmit before
	   * queuing it up for another.
	   *
	   * If it is a finishing message we still may have to keep it
	   * around for an on-demand retransmit when seeing a duplicate
	   * of our peer's previous message.
	   *
	   * If we have no previous message from our peer, we need not
	   * to keep the message around.
	   */
	  if ((msg->flags & MSG_LAST) == 0)
	    {
	      if (msg->xmits > conf_get_num ("General", "retransmits",
					     RETRANSMIT_DEFAULT))
		{
		  log_print ("transport_send_messages: "
			     "giving up on message %p",
			     msg);
		  exchange->last_sent = 0;
		}
	      else
		{
		  gettimeofday (&expiration, 0);

		  /*
		   * XXX Calculate from round trip timings and a backoff func.
		   */
		  expiry = msg->xmits * 2 + 5;
		  expiration.tv_sec += expiry;
		  LOG_DBG ((LOG_TRANSPORT, 30,
			    "transport_send_messages: message %p "
			    "scheduled for retransmission %d in %d secs",
			    msg, msg->xmits, expiry));
		  if (msg->retrans)
		    timer_remove_event (msg->retrans);
		  msg->retrans
		    = timer_add_event ("message_send_expire",
				       (void (*) (void *))message_send_expire,
				       msg, &expiration);
		  /* If we cannot retransmit, we cannot...  */
		  exchange->last_sent = msg->retrans ? msg : 0;
		}
	    }
	  else
	    exchange->last_sent = exchange->last_received ? msg : 0;

	  /*
	   * If this message is not referred to for later retransmission
	   * it will be ok for us to drop it after the post-send function.
	   * But as the post-send function may remove the exchange, we need
	   * to remember this fact here.
	   */
	  ok_to_drop_message = exchange->last_sent == 0;

	  /*
	   * If this is not a retransmit call post-send functions that allows
	   * parallel work to be done while the network and peer does their
	   * share of the job.  Note that a post-send function may take
	   * away the exchange we belong to, but only if no retransmits
	   * are possible.
	   */
	  if (msg->xmits == 1)
	    message_post_send (msg);

	  if (ok_to_drop_message)
	    message_free (msg);
	}
    }

  for (t = LIST_FIRST (&transport_list); t; t = next)
    {
      next = LIST_NEXT (t, link);
      transport_release (t);
    }
}

/*
 * Textual search after the transport method denoted by NAME, then create
 * a transport connected to the peer with address ADDR, given in a transport-
 * specific string format.
 */
struct transport *
transport_create (char *name, char *addr)
{
  struct transport_vtbl *method;

  for (method = LIST_FIRST (&transport_method_list); method;
       method = LIST_NEXT (method, link))
    if (strcmp (method->name, name) == 0)
      return (*method->create) (addr);
  return 0;
}
@


1.1.1.1
log
@Import OpenBSD 3.3 source repository from CTM 3132 the first time
This opens an OpenBSD-mirabile (aka MirBSD) repository.

### MirBSD is:
# Copyright (c) 1982-2003 by Thorsten "mirabile" Glaser <x86@@ePost.de>
# Copyright © 1968-2003  The authors of And contributors to UNIX®, the
#       C Language, BSD/Berkeley Unix; 386BSD, NetBSD 1.1 and OpenBSD.
#
# Anyone who obtained a copy of this work is hereby permitted to freely use,
# distribute, modify, merge, sublicence, give away or sell it as long as the
# authors are given due credit and the following notice is retained:
#
# This work is provided "as is", with no explicit or implicit warranty what-
# soever. Use it only at your own risk. In no event may an author or contri-
# butor be held liable for any damage, directly or indirectly, that origina-
# ted through or is caused by creation or modification of this work.

MirBSD is my private tree. MirBSD does not differ very much from OpenBSD
and intentionally tracks OpenBSD. That's why it _is_ OpenBSD, just not the
official one. It's like with DarrenBSD.

At time of this writing, no advertising for MirBSD must be done,
because the advertising clause has not yet been sorted out.

http://templeofhate.com/tglaser/MirBSD/index.php
@
text
@@


1.1.1.2
log
@Import latest OpenBSD CVS tree by CTM in order
to sync the base system and ports tree with Them.

This includes the recent licence changes as well - by
importing the changed base and re-applying the diffs
(with cvs up -j -j) they are inherited, and we're not
bound to the removed clauses any longer.
@
text
@d1 1
a1 1
/*	$OpenBSD: transport.c,v 1.20 2003/06/03 14:28:16 ho Exp $	*/
d16 5
@


1.1.1.3
log
@sync with OpenBSD, this gives us a fair amount of fixes
@
text
@d1 1
a1 1
/*	$OpenBSD: transport.c,v 1.21 2003/06/10 16:41:29 deraadt Exp $	*/
d255 1
a255 1
	    {
@


1.1.1.4
log
@the previous cvs import did not finish due to 'memory fault'
sync with OpenBSD-cvs
@
text
@d1 1
a1 1
/*	$OpenBSD: transport.c,v 1.22 2003/06/20 09:14:14 ho Exp $	*/
d297 3
a299 14
		  log_print ("transport_send_messages: giving up on "
			     "message %p", msg);
		  /* Be more verbose here.  */
		  if (exchange->phase == 1)
		    {
		      log_print ("transport_send_messages: either this "
				 "message did not reach the other peer");
		      if (exchange->initiator)
			log_print ("transport_send_messages: or the response"
				   "message did not reach us back");
		      else
			log_print ("transport_send_messages: or this is "
				   "an attempted IKE scan");
		    }
@


1.1.1.5
log
@Time to import OpenBSD once again. Expect breakage.
@
text
@d1 1
a1 1
/*	$OpenBSD: transport.c,v 1.23 2003/12/18 02:03:28 ho Exp $	*/
d298 1
a298 2
			     "message %p, exchange %s", msg,
			     exchange->name ? exchange->name : "<unnamed>");
@


1.1.1.6
log
@large-scale import of OpenBSD 3.5-current source base including many fixes
note: from now, we will not be binary compatible with OpenBSD apps any
longer (due to syscall numbering differences); both an OpenBSD compat and
a conversion tool for old MirOS #7 apps will be delivered later.

The src/ tree is locked from now.
@
text
@d1 2
a2 2
/* $OpenBSD: transport.c,v 1.24 2004/04/15 18:39:26 deraadt Exp $	 */
/* $EOM: transport.c,v 1.43 2000/10/10 12:36:39 provos Exp $	 */
d50 2
a51 2
LIST_HEAD(transport_list, transport) transport_list;
LIST_HEAD(transport_method_list, transport_vtbl) transport_method_list;
d54 2
a55 2
	void
	                transport_reinit(void)
d57 1
a57 1
	struct transport_vtbl *method;
d59 3
a61 3
	for (method = LIST_FIRST(&transport_method_list); method;
	     method = LIST_NEXT(method, link))
		method->reinit();
d66 1
a66 1
transport_init(void)
d68 2
a69 2
	LIST_INIT(&transport_list);
	LIST_INIT(&transport_method_list);
d74 1
a74 1
transport_add(struct transport * t)
d76 6
a81 6
	LOG_DBG((LOG_TRANSPORT, 70, "transport_add: adding %p", t));
	TAILQ_INIT(&t->sendq);
	TAILQ_INIT(&t->prio_sendq);
	LIST_INSERT_HEAD(&transport_list, t, link);
	t->flags = 0;
	t->refcnt = 0;
d86 1
a86 1
transport_reference(struct transport * t)
d88 4
a91 4
	t->refcnt++;
	LOG_DBG((LOG_TRANSPORT, 95,
	       "transport_reference: transport %p now has %d references", t,
		 t->refcnt));
d98 1
a98 1
transport_release(struct transport * t)
d100 9
a108 9
	LOG_DBG((LOG_TRANSPORT, 95,
		 "transport_release: transport %p had %d references", t,
		 t->refcnt));
	if (--t->refcnt)
		return;

	LOG_DBG((LOG_TRANSPORT, 70, "transport_release: freeing %p", t));
	LIST_REMOVE(t, link);
	t->vtbl->remove(t);
d112 1
a112 1
transport_report(void)
d114 2
a115 17
	struct transport *t;
	struct message *msg;

	for (t = LIST_FIRST(&transport_list); t; t = LIST_NEXT(t, link)) {
		LOG_DBG((LOG_REPORT, 0,
		     "transport_report: transport %p flags %x refcnt %d", t,
			 t->flags, t->refcnt));

		t->vtbl->report(t);

		/*
		 * This is the reason message_dump_raw lives outside
		 * message.c.
		 */
		for (msg = TAILQ_FIRST(&t->prio_sendq); msg;
		     msg = TAILQ_NEXT(msg, link))
			message_dump_raw("udp_report", msg, LOG_REPORT);
d117 16
a132 3
		for (msg = TAILQ_FIRST(&t->sendq); msg; msg = TAILQ_NEXT(msg, link))
			message_dump_raw("udp_report", msg, LOG_REPORT);
	}
d136 1
a136 1
transport_prio_sendqs_empty(void)
d138 1
a138 1
	struct transport *t;
d140 4
a143 4
	for (t = LIST_FIRST(&transport_list); t; t = LIST_NEXT(t, link))
		if (TAILQ_FIRST(&t->prio_sendq))
			return 0;
	return 1;
d148 1
a148 1
transport_method_add(struct transport_vtbl * t)
d150 1
a150 1
	LIST_INSERT_HEAD(&transport_method_list, t, link);
d155 1
a155 1
transport_map(void (*func) (struct transport *))
d157 1
a157 1
	struct transport *t;
d159 2
a160 2
	for (t = LIST_FIRST(&transport_list); t; t = LIST_NEXT(t, link))
		(*func) (t);
d169 1
a169 1
transport_fd_set(fd_set * fds)
d171 12
a182 11
	int             n;
	int             max = -1;
	struct transport *t;

	for (t = LIST_FIRST(&transport_list); t; t = LIST_NEXT(t, link))
		if (t->flags & TRANSPORT_LISTEN) {
			n = t->vtbl->fd_set(t, fds, 1);
			if (n > max)
				max = n;
		}
	return max + 1;
d192 1
a192 1
transport_pending_wfd_set(fd_set * fds)
d194 11
a204 10
	int             n;
	int             max = -1;
	struct transport *t;

	for (t = LIST_FIRST(&transport_list); t; t = LIST_NEXT(t, link)) {
		if (TAILQ_FIRST(&t->sendq) || TAILQ_FIRST(&t->prio_sendq)) {
			n = t->vtbl->fd_set(t, fds, 1);
			if (n > max)
				max = n;
		}
d206 2
a207 1
	return max + 1;
d215 1
a215 1
transport_handle_messages(fd_set * fds)
d217 1
a217 1
	struct transport *t;
d219 3
a221 3
	for (t = LIST_FIRST(&transport_list); t; t = LIST_NEXT(t, link))
		if ((t->flags & TRANSPORT_LISTEN) && (*t->vtbl->fd_isset) (t, fds))
			(*t->vtbl->handle_message) (t);
d234 1
a234 1
transport_send_messages(fd_set * fds)
d236 121
a356 116
	struct transport *t, *next;
	struct message *msg;
	struct exchange *exchange;
	struct timeval  expiration;
	int             expiry, ok_to_drop_message;

	/*
	 * Reference all transports first so noone will disappear while in
	 * use.
	 */
	for (t = LIST_FIRST(&transport_list); t; t = LIST_NEXT(t, link))
		transport_reference(t);

	for (t = LIST_FIRST(&transport_list); t; t = LIST_NEXT(t, link)) {
		if ((TAILQ_FIRST(&t->sendq) || TAILQ_FIRST(&t->prio_sendq))
		    && t->vtbl->fd_isset(t, fds)) {
			t->vtbl->fd_set(t, fds, 0);

			/* Prefer a message from the prioritized sendq.  */
			if (TAILQ_FIRST(&t->prio_sendq)) {
				msg = TAILQ_FIRST(&t->prio_sendq);
				TAILQ_REMOVE(&t->prio_sendq, msg, link);
			} else {
				msg = TAILQ_FIRST(&t->sendq);
				TAILQ_REMOVE(&t->sendq, msg, link);
			}

			msg->flags &= ~MSG_IN_TRANSIT;
			exchange = msg->exchange;
			exchange->in_transit = 0;

			/*
			 * We disregard the potential error message here, hoping that the
			 * retransmit will go better.
			 * XXX Consider a retry/fatal error discriminator.
		         */
			t->vtbl->send_message(msg);
			msg->xmits++;

			/*
			 * This piece of code has been proven to be quite delicate.
			 * Think twice for before altering.  Here's an outline:
		         *
			 * If this message is not the one which finishes an exchange,
			 * check if we have reached the number of retransmit before
			 * queuing it up for another.
		         *
			 * If it is a finishing message we still may have to keep it
			 * around for an on-demand retransmit when seeing a duplicate
			 * of our peer's previous message.
		         *
			 * If we have no previous message from our peer, we need not
			 * to keep the message around.
		         */
			if ((msg->flags & MSG_LAST) == 0) {
				if (msg->xmits > conf_get_num("General", "retransmits",
						      RETRANSMIT_DEFAULT)) {
					log_print("transport_send_messages: giving up on "
					     "message %p, exchange %s", msg,
						  exchange->name ? exchange->name : "<unnamed>");
					/* Be more verbose here.  */
					if (exchange->phase == 1) {
						log_print("transport_send_messages: either this "
							  "message did not reach the other peer");
						if (exchange->initiator)
							log_print("transport_send_messages: or the response"
								  "message did not reach us back");
						else
							log_print("transport_send_messages: or this is "
								  "an attempted IKE scan");
					}
					exchange->last_sent = 0;
				} else {
					gettimeofday(&expiration, 0);

					/*
					 * XXX Calculate from round trip timings and a backoff func.
				         */
					expiry = msg->xmits * 2 + 5;
					expiration.tv_sec += expiry;
					LOG_DBG((LOG_TRANSPORT, 30,
						 "transport_send_messages: message %p "
						 "scheduled for retransmission %d in %d secs",
						 msg, msg->xmits, expiry));
					if (msg->retrans)
						timer_remove_event(msg->retrans);
					msg->retrans
						= timer_add_event("message_send_expire",
								  (void (*) (void *)) message_send_expire,
							  msg, &expiration);
					/*
					 * If we cannot retransmit, we
					 * cannot...
					 */
					exchange->last_sent = msg->retrans ? msg : 0;
				}
			} else
				exchange->last_sent = exchange->last_received ? msg : 0;

			/*
			 * If this message is not referred to for later retransmission
			 * it will be ok for us to drop it after the post-send function.
			 * But as the post-send function may remove the exchange, we need
			 * to remember this fact here.
		         */
			ok_to_drop_message = exchange->last_sent == 0;

			/*
			 * If this is not a retransmit call post-send functions that allows
			 * parallel work to be done while the network and peer does their
			 * share of the job.  Note that a post-send function may take
			 * away the exchange we belong to, but only if no retransmits
			 * are possible.
		         */
			if (msg->xmits == 1)
				message_post_send(msg);
d358 2
a359 3
			if (ok_to_drop_message)
				message_free(msg);
		}
d361 1
d363 5
a367 4
	for (t = LIST_FIRST(&transport_list); t; t = next) {
		next = LIST_NEXT(t, link);
		transport_release(t);
	}
d376 1
a376 1
transport_create(char *name, char *addr)
d378 1
a378 1
	struct transport_vtbl *method;
d380 5
a384 5
	for (method = LIST_FIRST(&transport_method_list); method;
	     method = LIST_NEXT(method, link))
		if (strcmp(method->name, name) == 0)
			return (*method->create) (addr);
	return 0;
@


1.1.1.7
log
@another bunch of fixes from obsd, and a big isakmpd update (need testers!)
@
text
@d1 1
a1 1
/* $OpenBSD: transport.c,v 1.30 2004/08/08 19:11:06 deraadt Exp $	 */
d6 1
a6 1
 * Copyright (c) 2001, 2004 Håkan Olsson.  All rights reserved.
a45 1
#include "virtual.h"
d54 2
a55 2
void
transport_reinit(void)
d61 1
a61 2
		if (method->reinit)
			method->reinit();
d74 1
a74 1
transport_setup(struct transport *t, int toplevel)
d76 4
a79 14
	if (toplevel) {
		/* Only the toplevel (virtual) transport has sendqueues.  */
		LOG_DBG((LOG_TRANSPORT, 70,
		    "transport_setup: virtual transport %p", t));
		TAILQ_INIT(&t->sendq);
		TAILQ_INIT(&t->prio_sendq);
		t->refcnt = 0;
	} else {
		/* udp and udp_encap trp goes into the transport list.  */
		LOG_DBG((LOG_TRANSPORT, 70,
		    "transport_setup: added %p to transport list", t));
		LIST_INSERT_HEAD(&transport_list, t, link);
		t->refcnt = 1;
	}
d81 1
d86 1
a86 1
transport_reference(struct transport *t)
d90 2
a91 2
	    "transport_reference: transport %p now has %d references", t,
	    t->refcnt));
d98 1
a98 1
transport_release(struct transport *t)
d101 2
a102 2
	    "transport_release: transport %p had %d references", t,
	    t->refcnt));
d107 1
a113 1
	struct virtual_transport *v;
a121 1
		/* XXX Report sth on the virtual transport?  */
d128 6
a133 13
		v = (struct virtual_transport *)t->virtual;
		if ((v->encap_is_active && v->encap == t) ||
		    (!v->encap_is_active && v->main == t)) {
			for (msg = TAILQ_FIRST(&t->virtual->prio_sendq); msg;
			     msg = TAILQ_NEXT(msg, link))
				message_dump_raw("udp_report(prio)", msg,
				    LOG_REPORT);

			for (msg = TAILQ_FIRST(&t->virtual->sendq); msg;
			     msg = TAILQ_NEXT(msg, link))
				message_dump_raw("udp_report", msg,
				    LOG_REPORT);
		}
d143 1
a143 1
		if (TAILQ_FIRST(&t->virtual->prio_sendq))
d150 1
a150 1
transport_method_add(struct transport_vtbl *t)
d155 1
a155 1
/* Apply a function FUNC on all registered (non-toplevel) transports.  */
d173 2
a175 2
	int	n;
	int	max = -1;
d178 1
a178 1
		if (t->virtual->flags & TRANSPORT_LISTEN) {
a181 4

			LOG_DBG((LOG_TRANSPORT, 95, "transport_fd_set: "
			    "transport %p (virtual %p) fd %d", t,
			    t->virtual, n));
d195 2
a197 2
	int	n;
	int	max = -1;
d200 1
a200 2
		if (TAILQ_FIRST(&t->virtual->sendq) ||
		    TAILQ_FIRST(&t->virtual->prio_sendq)) {
a201 4
			LOG_DBG((LOG_TRANSPORT, 95,
			    "transport_pending_wfd_set: "
			    "transport %p (virtual %p) fd %d pending", t,
			    t->virtual, n));
d214 1
a214 1
transport_handle_messages(fd_set *fds)
d218 3
a220 7
	for (t = LIST_FIRST(&transport_list); t; t = LIST_NEXT(t, link)) {
		if ((t->flags & TRANSPORT_LISTEN) &&
		    (*t->vtbl->fd_isset)(t, fds)) {
			(*t->virtual->vtbl->handle_message)(t);
			(*t->vtbl->fd_set)(t, fds, 0);
		}
	}
d246 1
a246 1
		transport_reference(t->virtual);
d249 2
a250 4
		if ((TAILQ_FIRST(&t->virtual->sendq) ||
		    TAILQ_FIRST(&t->virtual->prio_sendq)) &&
		    t->vtbl->fd_isset(t, fds)) {
			/* Remove fd bit.  */
d254 3
a256 4
			if (TAILQ_FIRST(&t->virtual->prio_sendq)) {
				msg = TAILQ_FIRST(&t->virtual->prio_sendq);
				TAILQ_REMOVE(&t->virtual->prio_sendq, msg,
				    link);
d258 2
a259 2
				msg = TAILQ_FIRST(&t->virtual->sendq);
				TAILQ_REMOVE(&t->virtual->sendq, msg, link);
d267 2
a268 2
			 * We disregard the potential error message here,
			 * hoping that the retransmit will go better.
d271 1
a271 1
			t->virtual->vtbl->send_message(msg, 0);
d275 2
a276 3
			 * This piece of code has been proven to be quite
			 * delicate. Think twice for before altering.
			 * Here's an outline:
d278 3
a280 3
			 * If this message is not the one which finishes an
			 * exchange, check if we have reached the number of
			 * retransmit before queuing it up for another.
d282 3
a284 3
			 * If it is a finishing message we still may have to
			 * keep it around for an on-demand retransmit when
			 * seeing a duplicate of our peer's previous message.
d286 2
d290 5
a294 7
				if (msg->xmits > conf_get_num("General",
				    "retransmits", RETRANSMIT_DEFAULT)) {
					log_print("transport_send_messages: "
					    "giving up on message %p, "
					    "exchange %s", msg,
					    exchange->name ? exchange->name :
					    "<unnamed>");
d297 2
a298 5
						log_print(
						    "transport_send_messages: "
						    "either this message did "
						    "not reach the other "
						    "peer");
d300 2
a301 4
							log_print("transport_send_messages: "
							    "or the response"
							    "message did not "
							    "reach us back");
d303 2
a304 4
							log_print("transport_send_messages: "
							    "or this is an "
							    "attempted IKE "
							    "scan");
a306 4
#ifdef notyet
					exchange_free(exchange);
					exchange = 0;
#endif
d311 1
a311 2
					 * XXX Calculate from round trip
					 * timings and a backoff func.
d316 3
a318 4
					    "transport_send_messages: "
					    "message %p scheduled for "
					    "retransmission %d in %d secs",
					    msg, msg->xmits, expiry));
d322 3
a324 3
					    = timer_add_event("message_send_expire",
						(void (*) (void *)) message_send_expire,
						msg, &expiration);
d329 1
a329 2
					exchange->last_sent =
					    msg->retrans ? msg : 0;
d332 1
a332 2
				exchange->last_sent =
				    exchange->last_received ? msg : 0;
d335 4
a338 5
			 * If this message is not referred to for later
			 * retransmission it will be ok for us to drop it
			 * after the post-send function. But as the post-send
			 * function may remove the exchange, we need to
			 * remember this fact here.
d343 5
a347 6
			 * If this is not a retransmit call post-send
			 * functions that allows parallel work to be done
			 * while the network and peer does their share of
			 * the job.  Note that a post-send function may take
			 * away the exchange we belong to, but only if no
			 * retransmits are possible.
d359 1
a359 1
		transport_release(t->virtual);
@


