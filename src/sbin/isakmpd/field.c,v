head	1.1;
branch	1.1.1;
access;
symbols
	tg-mergetmp-mirosx-1:1.1.1.5
	tg-mergefixes-1-branch:1.1.1.5.0.4
	tg-mergefixes-1-base:1.1.1.5
	MIROS_X:1.1.1.5.0.2
	MIROS_X_BASE:1.1.1.5
	tg-mergetmp-3:1.1.1.5
	cvs-200411261545:1.1.1.5
	MIRBSD_XP_MIRPPC:1.1.1.4.0.4
	MIRBSD_XP_SPARC_BASE:1.1.1.4
	MIRBSD_XP_SPARC:1.1.1.4.0.2
	MIRBSD_7quater:1.1.1.2
	cvs-200405160640:1.1.1.4
	cvs-200401271800:1.1.1.3
	cvs-200401261630:1.1.1.3
	cvs-200401021645:1.1.1.3
	MIRBSD_7_ALPHA:1.1.1.2.0.6
	MIRBSD_7:1.1.1.2.0.4
	cvs-200312222040:1.1.1.3
	MIRBSD_7ter:1.1.1.2
	MIRBSD_7_DEV:1.1.1.2.0.2
	cvs-200310020700:1.1.1.2
	cvs-200309271030:1.1.1.2
	cvs-200309251530:1.1.1.2
	cvs-200308302005:1.1.1.2
	cvs-200308171200:1.1.1.2
	ctm-3496:1.1.1.2
	ctm-3449:1.1.1.2
	ctm-3437:1.1.1.2
	cvs-200307191805:1.1.1.2
	ctm-3425:1.1.1.2
	cvs-200307091500:1.1.1.2
	ctm-3389:1.1.1.2
	cvs-200306291430:1.1.1.2
	ctm-3341:1.1.1.2
	MIRBSD_5:1.1.1.2
	cvs-200306082100:1.1.1.2
	ctm-3316:1.1.1.2
	ctm-3272:1.1.1.1
	ctm-3264:1.1.1.1
	cvs-200305071630:1.1.1.1
	MIRBSD_4:1.1.1.1
	ctm-3203:1.1.1.1
	cvs-20030410-1130:1.1.1.1
	ctm-3155:1.1.1.1
	ctm-3132:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.1
date	2003.03.22.17.48.28;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.03.22.17.48.28;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2003.06.05.17.30.59;	author tg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2003.12.22.21.10.33;	author tg;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2004.05.16.08.24.03;	author tg;	state Stab;
branches;
next	1.1.1.5;

1.1.1.5
date	2004.11.26.15.50.20;	author tg;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@/*	$OpenBSD: field.c,v 1.11 2003/03/06 13:48:18 cedric Exp $	*/
/*	$EOM: field.c,v 1.11 2000/02/20 19:58:37 niklas Exp $	*/

/*
 * Copyright (c) 1998, 1999 Niklas Hallqvist.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by Ericsson Radio Systems.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * This code was written under funding by Ericsson Radio Systems.
 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "sysdep.h"

#include "constants.h"
#include "field.h"
#include "log.h"
#include "util.h"

static char *field_debug_raw (u_int8_t *, size_t, struct constant_map **);
static char *field_debug_num (u_int8_t *, size_t, struct constant_map **);
static char *field_debug_mask (u_int8_t *, size_t, struct constant_map **);
static char *field_debug_ign (u_int8_t *, size_t, struct constant_map **);
static char *field_debug_cst (u_int8_t *, size_t, struct constant_map **);

/* Contents must match the enum in struct field.  */
static char *(*decode_field[]) (u_int8_t *, size_t, struct constant_map **) = {
  field_debug_raw,
  field_debug_num,
  field_debug_mask,
  field_debug_ign,
  field_debug_cst
};

/*
 * Return a string showing the hexadecimal contents of the LEN-sized buffer
 * BUF.  MAPS should be zero and is only here because the API requires it.
 */
static char *
field_debug_raw (u_int8_t *buf, size_t len, struct constant_map **maps)
{
  char *retval, *p;

  if (len == 0)
    return 0;
  retval = malloc (3 + len * 2);
  if (!retval)
    return 0;
  strlcpy (retval, "0x", 3 + len * 2);
  p = retval + 2;
  for(; len > 0; len--)
    {
      snprintf (p, 1 + len * 2, "%02x", *buf++);
      p += 2;
    }
  return retval;
}

/*
 * Convert the unsigned LEN-sized number at BUF of network byteorder to a
 * 32-bit unsigned integer of host byteorder pointed to by VAL.
 */
static int
extract_val (u_int8_t *buf, size_t len, u_int32_t *val)
{
  switch (len)
    {
    case 1:
      *val = *buf;
      break;
    case 2:
      *val = decode_16 (buf);
      break;
    case 4:
      *val = decode_32 (buf);
      break;
    default:
      return -1;
    }
  return 0;
}

/*
 * Return a textual representation of the unsigned number pointed to by BUF
 * which is LEN octets long.  MAPS should be zero and is only here because
 * the API requires it.
 */
static char *
field_debug_num (u_int8_t *buf, size_t len, struct constant_map **maps)
{
  char *retval;
  u_int32_t val;

  if (extract_val (buf, len, &val))
    return 0;
  /* 3 decimal digits are enough to represent each byte.  */
  retval = malloc (3 * len);
  snprintf (retval, 3 * len, "%u", val);
  return retval;
}

/*
 * Return the symbolic names of the flags pointed to by BUF which is LEN
 * octets long, using the constant maps MAPS.
 */
static char *
field_debug_mask (u_int8_t *buf, size_t len, struct constant_map **maps)
{
  u_int32_t val;
  u_int32_t bit;
  char *retval, *new_buf, *name;
  size_t buf_sz;

  if (extract_val (buf, len, &val))
    return 0;

  /* Size for brackets, two spaces and a NUL terminator.  */
  buf_sz = 4;
  retval = malloc (buf_sz);
  if (!retval)
    return 0;

  strlcpy (retval, "[ ", buf_sz);
  for (bit = 1; bit; bit <<= 1)
    {
      if (val & bit)
	{
	  name = constant_name_maps (maps, bit);
	  buf_sz += strlen (name) + 1;
	  new_buf = realloc (retval, buf_sz);
	  if (!new_buf)
	    {
	      free (retval);
	      return 0;
	    }
	  retval = new_buf;
	  strlcat (retval, name, buf_sz);
	  strlcat (retval, " ", buf_sz);
	}
    }
  strlcat (retval, "]", buf_sz);
  return retval;
}

/*
 * Just a dummy needed to skip the unused LEN sized space at BUF.  MAPS
 * should be zero and is only here because the API requires it.
 */
static char *
field_debug_ign (u_int8_t *buf, size_t len, struct constant_map **maps)
{
  return 0;
}

/*
 * Return the symbolic name of a constant pointed to by BUF which is LEN
 * octets long, using the constant maps MAPS.
 */
static char *
field_debug_cst (u_int8_t *buf, size_t len, struct constant_map **maps)
{
  u_int32_t val;

  if (extract_val (buf, len, &val))
    return 0;

  return strdup (constant_name_maps (maps, val));
}

/* Pretty-print a field from BUF as described by F.  */
void
field_dump_field (struct field *f, u_int8_t *buf)
{
  char *value;

  value = decode_field[(int)f->type] (buf + f->offset, f->len, f->maps);
  if (value)
    {
      LOG_DBG ((LOG_MESSAGE, 70, "%s: %s", f->name, value));
      free (value);
    }
}

/* Pretty-print all the fields of BUF as described in FIELDS.  */
void
field_dump_payload (struct field *fields, u_int8_t *buf)
{
  struct field *field;

  for (field = fields; field->name; field++)
    field_dump_field (field, buf);
}

/* Return the numeric value of the field F of BUF.  */
u_int32_t
field_get_num (struct field *f, u_int8_t *buf)
{
  u_int32_t val;

  if (extract_val (buf + f->offset, f->len, &val))
    return 0;
  return val;
}

/* Stash the number VAL into BUF's field F.  */
void
field_set_num (struct field *f, u_int8_t *buf, u_int32_t val)
{
  switch (f->len)
    {
    case 1:
      buf[f->offset] = val;
      break;
    case 2:
      encode_16 (buf + f->offset, val);
      break;
    case 4:
      encode_32 (buf + f->offset, val);
      break;
    }
}

/* Stash BUF's raw field F into VAL.  */
void
field_get_raw (struct field *f, u_int8_t *buf, u_int8_t *val)
{
  memcpy (val, buf + f->offset, f->len);
}

/* Stash the buffer VAL into BUF's field F.  */
void
field_set_raw (struct field *f, u_int8_t *buf, u_int8_t *val)
{
  memcpy (buf + f->offset, val, f->len);
}
@


1.1.1.1
log
@Import OpenBSD 3.3 source repository from CTM 3132 the first time
This opens an OpenBSD-mirabile (aka MirBSD) repository.

### MirBSD is:
# Copyright (c) 1982-2003 by Thorsten "mirabile" Glaser <x86@@ePost.de>
# Copyright © 1968-2003  The authors of And contributors to UNIX®, the
#       C Language, BSD/Berkeley Unix; 386BSD, NetBSD 1.1 and OpenBSD.
#
# Anyone who obtained a copy of this work is hereby permitted to freely use,
# distribute, modify, merge, sublicence, give away or sell it as long as the
# authors are given due credit and the following notice is retained:
#
# This work is provided "as is", with no explicit or implicit warranty what-
# soever. Use it only at your own risk. In no event may an author or contri-
# butor be held liable for any damage, directly or indirectly, that origina-
# ted through or is caused by creation or modification of this work.

MirBSD is my private tree. MirBSD does not differ very much from OpenBSD
and intentionally tracks OpenBSD. That's why it _is_ OpenBSD, just not the
official one. It's like with DarrenBSD.

At time of this writing, no advertising for MirBSD must be done,
because the advertising clause has not yet been sorted out.

http://templeofhate.com/tglaser/MirBSD/index.php
@
text
@@


1.1.1.2
log
@Import latest OpenBSD CVS tree by CTM in order
to sync the base system and ports tree with Them.

This includes the recent licence changes as well - by
importing the changed base and re-applying the diffs
(with cvs up -j -j) they are inherited, and we're not
bound to the removed clauses any longer.
@
text
@d1 1
a1 1
/*	$OpenBSD: field.c,v 1.12 2003/06/03 14:28:16 ho Exp $	*/
d15 5
@


1.1.1.3
log
@Time to import OpenBSD once again. Expect breakage.
@
text
@d1 1
a1 1
/*	$OpenBSD: field.c,v 1.13 2003/11/06 16:12:07 ho Exp $	*/
d74 1
a74 1
  for (; len > 0; len--)
@


1.1.1.4
log
@large-scale import of OpenBSD 3.5-current source base including many fixes
note: from now, we will not be binary compatible with OpenBSD apps any
longer (due to syscall numbering differences); both an OpenBSD compat and
a conversion tool for old MirOS #7 apps will be delivered later.

The src/ tree is locked from now.
@
text
@d1 2
a2 2
/* $OpenBSD: field.c,v 1.14 2004/04/15 18:39:25 deraadt Exp $	 */
/* $EOM: field.c,v 1.11 2000/02/20 19:58:37 niklas Exp $	 */
d43 5
a47 5
static char    *field_debug_raw(u_int8_t *, size_t, struct constant_map **);
static char    *field_debug_num(u_int8_t *, size_t, struct constant_map **);
static char    *field_debug_mask(u_int8_t *, size_t, struct constant_map **);
static char    *field_debug_ign(u_int8_t *, size_t, struct constant_map **);
static char    *field_debug_cst(u_int8_t *, size_t, struct constant_map **);
d50 6
a55 6
static char    *(*decode_field[]) (u_int8_t *, size_t, struct constant_map **) = {
	field_debug_raw,
	field_debug_num,
	field_debug_mask,
	field_debug_ign,
	field_debug_cst
d63 1
a63 1
field_debug_raw(u_int8_t *buf, size_t len, struct constant_map **maps)
d65 1
a65 1
	char           *retval, *p;
d67 13
a79 12
	if (len == 0)
		return 0;
	retval = malloc(3 + len * 2);
	if (!retval)
		return 0;
	strlcpy(retval, "0x", 3 + len * 2);
	p = retval + 2;
	for (; len > 0; len--) {
		snprintf(p, 1 + len * 2, "%02x", *buf++);
		p += 2;
	}
	return retval;
d87 1
a87 1
extract_val(u_int8_t *buf, size_t len, u_int32_t *val)
d89 15
a103 14
	switch (len) {
	case 1:
		*val = *buf;
		break;
	case 2:
		*val = decode_16(buf);
		break;
	case 4:
		*val = decode_32(buf);
		break;
	default:
		return -1;
	}
	return 0;
d112 1
a112 1
field_debug_num(u_int8_t *buf, size_t len, struct constant_map **maps)
d114 2
a115 2
	char           *retval;
	u_int32_t       val;
d117 6
a122 6
	if (extract_val(buf, len, &val))
		return 0;
	/* 3 decimal digits are enough to represent each byte.  */
	retval = malloc(3 * len);
	snprintf(retval, 3 * len, "%u", val);
	return retval;
d130 1
a130 1
field_debug_mask(u_int8_t *buf, size_t len, struct constant_map **maps)
d132 30
a161 28
	u_int32_t       val;
	u_int32_t       bit;
	char           *retval, *new_buf, *name;
	size_t          buf_sz;

	if (extract_val(buf, len, &val))
		return 0;

	/* Size for brackets, two spaces and a NUL terminator.  */
	buf_sz = 4;
	retval = malloc(buf_sz);
	if (!retval)
		return 0;

	strlcpy(retval, "[ ", buf_sz);
	for (bit = 1; bit; bit <<= 1) {
		if (val & bit) {
			name = constant_name_maps(maps, bit);
			buf_sz += strlen(name) + 1;
			new_buf = realloc(retval, buf_sz);
			if (!new_buf) {
				free(retval);
				return 0;
			}
			retval = new_buf;
			strlcat(retval, name, buf_sz);
			strlcat(retval, " ", buf_sz);
		}
d163 3
a165 2
	strlcat(retval, "]", buf_sz);
	return retval;
d173 1
a173 1
field_debug_ign(u_int8_t *buf, size_t len, struct constant_map **maps)
d175 1
a175 1
	return 0;
d183 1
a183 1
field_debug_cst(u_int8_t *buf, size_t len, struct constant_map **maps)
d185 1
a185 1
	u_int32_t       val;
d187 2
a188 2
	if (extract_val(buf, len, &val))
		return 0;
d190 1
a190 1
	return strdup(constant_name_maps(maps, val));
d195 1
a195 1
field_dump_field(struct field *f, u_int8_t *buf)
d197 1
a197 1
	char           *value;
d199 6
a204 5
	value = decode_field[(int) f->type] (buf + f->offset, f->len, f->maps);
	if (value) {
		LOG_DBG((LOG_MESSAGE, 70, "%s: %s", f->name, value));
		free(value);
	}
d209 1
a209 1
field_dump_payload(struct field *fields, u_int8_t *buf)
d211 1
a211 1
	struct field   *field;
d213 2
a214 2
	for (field = fields; field->name; field++)
		field_dump_field(field, buf);
d219 1
a219 1
field_get_num(struct field *f, u_int8_t *buf)
d221 1
a221 1
	u_int32_t       val;
d223 3
a225 3
	if (extract_val(buf + f->offset, f->len, &val))
		return 0;
	return val;
d230 1
a230 1
field_set_num(struct field *f, u_int8_t *buf, u_int32_t val)
d232 12
a243 11
	switch (f->len) {
	case 1:
		buf[f->offset] = val;
		break;
	case 2:
		encode_16(buf + f->offset, val);
		break;
	case 4:
		encode_32(buf + f->offset, val);
		break;
	}
d248 1
a248 1
field_get_raw(struct field * f, u_int8_t * buf, u_int8_t * val)
d250 1
a250 1
	memcpy(val, buf + f->offset, f->len);
d255 1
a255 1
field_set_raw(struct field * f, u_int8_t * buf, u_int8_t * val)
d257 1
a257 1
	memcpy(buf + f->offset, val, f->len);
@


1.1.1.5
log
@another bunch of fixes from obsd, and a big isakmpd update (need testers!)
@
text
@d1 1
a1 1
/* $OpenBSD: field.c,v 1.16 2004/06/14 09:55:41 ho Exp $	 */
d50 1
a50 2
static char    *(*decode_field[]) (u_int8_t *, size_t,
    struct constant_map **) = {
d65 1
a65 1
	char	*retval, *p;
d192 1
a192 1
	char	*value;
d241 1
a241 1
field_get_raw(struct field *f, u_int8_t *buf, u_int8_t *val)
d248 1
a248 1
field_set_raw(struct field *f, u_int8_t *buf, u_int8_t *val)
@


