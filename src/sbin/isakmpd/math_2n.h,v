head	1.1;
branch	1.1.1;
access;
symbols
	tg-mergetmp-mirosx-1:1.1.1.3
	tg-mergefixes-1-branch:1.1.1.3.0.8
	tg-mergefixes-1-base:1.1.1.3
	MIROS_X:1.1.1.3.0.6
	MIROS_X_BASE:1.1.1.3
	tg-mergetmp-3:1.1.1.3
	cvs-200411261545:1.1.1.3
	MIRBSD_XP_MIRPPC:1.1.1.3.0.4
	MIRBSD_XP_SPARC_BASE:1.1.1.3
	MIRBSD_XP_SPARC:1.1.1.3.0.2
	MIRBSD_7quater:1.1.1.2
	cvs-200405160640:1.1.1.3
	cvs-200401271800:1.1.1.2
	cvs-200401261630:1.1.1.2
	cvs-200401021645:1.1.1.2
	MIRBSD_7_ALPHA:1.1.1.2.0.6
	MIRBSD_7:1.1.1.2.0.4
	cvs-200312222040:1.1.1.2
	MIRBSD_7ter:1.1.1.2
	MIRBSD_7_DEV:1.1.1.2.0.2
	cvs-200310020700:1.1.1.2
	cvs-200309271030:1.1.1.2
	cvs-200309251530:1.1.1.2
	cvs-200308302005:1.1.1.2
	cvs-200308171200:1.1.1.2
	ctm-3496:1.1.1.2
	ctm-3449:1.1.1.2
	ctm-3437:1.1.1.2
	cvs-200307191805:1.1.1.2
	ctm-3425:1.1.1.2
	cvs-200307091500:1.1.1.2
	ctm-3389:1.1.1.2
	cvs-200306291430:1.1.1.2
	ctm-3341:1.1.1.2
	MIRBSD_5:1.1.1.2
	cvs-200306082100:1.1.1.2
	ctm-3316:1.1.1.2
	ctm-3272:1.1.1.1
	ctm-3264:1.1.1.1
	cvs-200305071630:1.1.1.1
	MIRBSD_4:1.1.1.1
	ctm-3203:1.1.1.1
	cvs-20030410-1130:1.1.1.1
	ctm-3155:1.1.1.1
	ctm-3132:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.1
date	2003.03.22.17.48.28;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.03.22.17.48.28;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2003.06.05.17.31.02;	author tg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2004.05.16.08.24.27;	author tg;	state Stab;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@/*	$OpenBSD: math_2n.h,v 1.5 2002/01/23 17:43:24 ho Exp $	*/
/*	$EOM: math_2n.h,v 1.9 1999/04/17 23:20:32 niklas Exp $	*/

/*
 * Copyright (c) 1998 Niels Provos.  All rights reserved.
 * Copyright (c) 1999 Niklas Hallqvist.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by Ericsson Radio Systems.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * This code was written under funding by Ericsson Radio Systems.
 */

#ifndef _MATH_2N_H
#define _MATH_2N_H_

/*
 * The chunk size we use is variable, this allows speed ups
 * for processors like the Alpha with 64bit words.
 * XXX - b2n_mask is only up to 32 bit at the moment.
 */

#define USE_32BIT	/* XXX - This obviously needs fixing */

#ifdef USE_32BIT
#define CHUNK_TYPE	u_int32_t
#define CHUNK_BITS	32
#define CHUNK_SHIFTS	5
#define CHUNK_BMASK	0xffffffff
#define CHUNK_MASK	(CHUNK_BITS - 1)
#define CHUNK_BYTES	(CHUNK_BITS >> 3)
#define CHUNK_NIBBLES	(CHUNK_BITS >> 2)
#else
#define CHUNK_TYPE	u_int8_t
#define CHUNK_BITS	8
#define CHUNK_SHIFTS	3
#define CHUNK_BMASK	0xff
#define CHUNK_MASK	(CHUNK_BITS - 1)
#define CHUNK_BYTES	(CHUNK_BITS >> 3)
#define CHUNK_NIBBLES	(CHUNK_BITS >> 2)
#endif

extern CHUNK_TYPE b2n_mask[CHUNK_BITS];

/* An element of GF(2**n), n = bits */

typedef struct {
  u_int16_t chunks;
  u_int16_t bits;
  u_int8_t dirty;		/* Sig bits are dirty */
  CHUNK_TYPE *limp;
} _b2n;

typedef _b2n *b2n_ptr;
typedef _b2n b2n_t[1];

#define B2N_SET(x,y) do \
  { \
    (x)->chunks = (y)->chunks; \
    (x)->bits = (y)->bits; \
    (x)->limp = (y)->limp; \
    (x)->dirty = (y)->dirty; \
  } \
while (0)

#define B2N_SWAP(x,y) do \
  { \
    b2n_t _t_; \
\
    B2N_SET (_t_, (x)); \
    B2N_SET ((x), (y)); \
    B2N_SET ((y), _t_); \
  } \
while (0)

#define B2N_MIN(x,y) ((x)->chunks > (y)->chunks ? (y) : (x))
#define B2N_MAX(x,y) ((x)->chunks > (y)->chunks ? (x) : (y))

int b2n_3mul (b2n_ptr, b2n_ptr);
int b2n_add (b2n_ptr, b2n_ptr, b2n_ptr);
int b2n_cmp (b2n_ptr, b2n_ptr);
int b2n_cmp_null (b2n_ptr);
int b2n_div (b2n_ptr, b2n_ptr, b2n_ptr, b2n_ptr);
int b2n_div_mod (b2n_ptr, b2n_ptr, b2n_ptr, b2n_ptr);
int b2n_div_q (b2n_ptr, b2n_ptr, b2n_ptr);
int b2n_div_r (b2n_ptr, b2n_ptr, b2n_ptr);
int b2n_exp_mod (b2n_ptr, b2n_ptr, u_int32_t, b2n_ptr);
void b2n_init (b2n_ptr);
void b2n_clear (b2n_ptr);
int b2n_gcd (b2n_ptr, b2n_ptr, b2n_ptr);
int b2n_halftrace (b2n_ptr, b2n_ptr, b2n_ptr);
int b2n_lshift (b2n_ptr, b2n_ptr, unsigned int);
int b2n_mod (b2n_ptr, b2n_ptr, b2n_ptr);
int b2n_mul (b2n_ptr, b2n_ptr, b2n_ptr);
int b2n_mul_inv (b2n_ptr, b2n_ptr, b2n_ptr);
int b2n_nadd (b2n_ptr, b2n_ptr, b2n_ptr);
int b2n_nsub (b2n_ptr, b2n_ptr, b2n_ptr);
void b2n_print (b2n_ptr);
int b2n_random (b2n_ptr, u_int32_t);
int b2n_resize (b2n_ptr, unsigned int);
int b2n_rshift (b2n_ptr, b2n_ptr, unsigned int);
int b2n_set (b2n_ptr, b2n_ptr);
int b2n_set_null (b2n_ptr);
int b2n_set_str (b2n_ptr, char *);
int b2n_set_ui (b2n_ptr, unsigned int);
u_int32_t b2n_sigbit (b2n_ptr);
int b2n_snprint (char *, size_t, b2n_ptr);
int b2n_sqrt (b2n_ptr, b2n_ptr, b2n_ptr);
int b2n_square (b2n_ptr, b2n_ptr);
#define b2n_sub b2n_add
int b2n_trace (b2n_ptr, b2n_ptr, b2n_ptr);

#endif /* _MATH_2N_H_ */
@


1.1.1.1
log
@Import OpenBSD 3.3 source repository from CTM 3132 the first time
This opens an OpenBSD-mirabile (aka MirBSD) repository.

### MirBSD is:
# Copyright (c) 1982-2003 by Thorsten "mirabile" Glaser <x86@@ePost.de>
# Copyright © 1968-2003  The authors of And contributors to UNIX®, the
#       C Language, BSD/Berkeley Unix; 386BSD, NetBSD 1.1 and OpenBSD.
#
# Anyone who obtained a copy of this work is hereby permitted to freely use,
# distribute, modify, merge, sublicence, give away or sell it as long as the
# authors are given due credit and the following notice is retained:
#
# This work is provided "as is", with no explicit or implicit warranty what-
# soever. Use it only at your own risk. In no event may an author or contri-
# butor be held liable for any damage, directly or indirectly, that origina-
# ted through or is caused by creation or modification of this work.

MirBSD is my private tree. MirBSD does not differ very much from OpenBSD
and intentionally tracks OpenBSD. That's why it _is_ OpenBSD, just not the
official one. It's like with DarrenBSD.

At time of this writing, no advertising for MirBSD must be done,
because the advertising clause has not yet been sorted out.

http://templeofhate.com/tglaser/MirBSD/index.php
@
text
@@


1.1.1.2
log
@Import latest OpenBSD CVS tree by CTM in order
to sync the base system and ports tree with Them.

This includes the recent licence changes as well - by
importing the changed base and re-applying the diffs
(with cvs up -j -j) they are inherited, and we're not
bound to the removed clauses any longer.
@
text
@d1 1
a1 1
/*	$OpenBSD: math_2n.h,v 1.6 2003/06/03 14:28:16 ho Exp $	*/
d16 5
@


1.1.1.3
log
@large-scale import of OpenBSD 3.5-current source base including many fixes
note: from now, we will not be binary compatible with OpenBSD apps any
longer (due to syscall numbering differences); both an OpenBSD compat and
a conversion tool for old MirOS #7 apps will be delivered later.

The src/ tree is locked from now.
@
text
@d1 2
a2 2
/* $OpenBSD: math_2n.h,v 1.7 2004/04/15 18:39:26 deraadt Exp $	 */
/* $EOM: math_2n.h,v 1.9 1999/04/17 23:20:32 niklas Exp $	 */
d42 1
a42 1
#define USE_32BIT		/* XXX - This obviously needs fixing */
d67 5
a71 5
	u_int16_t       chunks;
	u_int16_t       bits;
	u_int8_t        dirty;	/* Sig bits are dirty */
	CHUNK_TYPE     *limp;
}               _b2n;
d73 2
a74 2
typedef _b2n   *b2n_ptr;
typedef _b2n    b2n_t[1];
d98 31
a128 31
int             b2n_3mul(b2n_ptr, b2n_ptr);
int             b2n_add(b2n_ptr, b2n_ptr, b2n_ptr);
int             b2n_cmp(b2n_ptr, b2n_ptr);
int             b2n_cmp_null(b2n_ptr);
int             b2n_div(b2n_ptr, b2n_ptr, b2n_ptr, b2n_ptr);
int             b2n_div_mod(b2n_ptr, b2n_ptr, b2n_ptr, b2n_ptr);
int             b2n_div_q(b2n_ptr, b2n_ptr, b2n_ptr);
int             b2n_div_r(b2n_ptr, b2n_ptr, b2n_ptr);
int             b2n_exp_mod(b2n_ptr, b2n_ptr, u_int32_t, b2n_ptr);
void            b2n_init(b2n_ptr);
void            b2n_clear(b2n_ptr);
int             b2n_gcd(b2n_ptr, b2n_ptr, b2n_ptr);
int             b2n_halftrace(b2n_ptr, b2n_ptr, b2n_ptr);
int             b2n_lshift(b2n_ptr, b2n_ptr, unsigned int);
int             b2n_mod(b2n_ptr, b2n_ptr, b2n_ptr);
int             b2n_mul(b2n_ptr, b2n_ptr, b2n_ptr);
int             b2n_mul_inv(b2n_ptr, b2n_ptr, b2n_ptr);
int             b2n_nadd(b2n_ptr, b2n_ptr, b2n_ptr);
int             b2n_nsub(b2n_ptr, b2n_ptr, b2n_ptr);
void            b2n_print(b2n_ptr);
int             b2n_random(b2n_ptr, u_int32_t);
int             b2n_resize(b2n_ptr, unsigned int);
int             b2n_rshift(b2n_ptr, b2n_ptr, unsigned int);
int             b2n_set(b2n_ptr, b2n_ptr);
int             b2n_set_null(b2n_ptr);
int             b2n_set_str(b2n_ptr, char *);
int             b2n_set_ui(b2n_ptr, unsigned int);
u_int32_t       b2n_sigbit(b2n_ptr);
int             b2n_snprint(char *, size_t, b2n_ptr);
int             b2n_sqrt(b2n_ptr, b2n_ptr, b2n_ptr);
int             b2n_square(b2n_ptr, b2n_ptr);
d130 1
a130 1
int             b2n_trace(b2n_ptr, b2n_ptr, b2n_ptr);
d132 1
a132 1
#endif				/* _MATH_2N_H_ */
@


