head	1.1;
branch	1.1.1;
access;
symbols
	tg-mergetmp-mirosx-1:1.1.1.3
	tg-mergefixes-1-branch:1.1.1.3.0.4
	tg-mergefixes-1-base:1.1.1.3
	MIROS_X:1.1.1.3.0.2
	MIROS_X_BASE:1.1.1.3
	tg-mergetmp-3:1.1.1.3
	cvs-200411261545:1.1.1.3
	cvs-200411231505:1.1.1.3
	MIRBSD_XP_MIRPPC:1.1.1.2.0.4
	MIRBSD_XP_SPARC_BASE:1.1.1.2
	MIRBSD_XP_SPARC:1.1.1.2.0.2
	cvs-200405160640:1.1.1.2
	cvs-200401271800:1.1.1.1
	cvs-200401261630:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.1
date	2004.01.26.18.28.37;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2004.01.26.18.28.37;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2004.05.16.08.22.45;	author tg;	state Stab;
branches;
next	1.1.1.3;

1.1.1.3
date	2004.11.23.15.07.56;	author tg;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@/* conflex.c

   Lexical scanner for dhcpd config file... */

/*
 * Copyright (c) 1995, 1996, 1997 The Internet Software Consortium.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of The Internet Software Consortium nor the names
 *    of its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE INTERNET SOFTWARE CONSORTIUM AND
 * CONTRIBUTORS ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES,
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED.  IN NO EVENT SHALL THE INTERNET SOFTWARE CONSORTIUM OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
 * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
 * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * This software has been written for the Internet Software Consortium
 * by Ted Lemon <mellon@@fugue.com> in cooperation with Vixie
 * Enterprises.  To learn more about the Internet Software Consortium,
 * see ``http://www.vix.com/isc''.  To learn more about Vixie
 * Enterprises, see ``http://www.vix.com''.
 */

#include "dhcpd.h"
#include "dhctoken.h"
#include <ctype.h>

int lexline;
int lexchar;
char *token_line;
char *prev_line;
char *cur_line;
char *tlname;
int eol_token;

static char line1 [81];
static char line2 [81];
static int lpos;
static int line;
static int tlpos;
static int tline;
static int token;
static int ugflag;
static char *tval;
static char tokbuf [1500];

#ifdef OLD_LEXER
char comments [4096];
int comment_index;
#endif


static int get_char PROTO ((FILE *));
static int get_token PROTO ((FILE *));
static void skip_to_eol PROTO ((FILE *));
static int read_string PROTO ((FILE *));
static int read_number PROTO ((int, FILE *));
static int read_num_or_name PROTO ((int, FILE *));
static int intern PROTO ((char *, int));

void new_parse (name)
	char *name;
{
	tlname = name;
	lpos = line = 1;
	cur_line = line1;
	prev_line = line2;
	token_line = cur_line;
	cur_line [0] = prev_line [0] = 0;
	warnings_occurred = 0;
}

static int get_char (cfile)
	FILE *cfile;
{
	int c = getc (cfile);
	if (!ugflag) {
		if (c == EOL) {
			if (cur_line == line1) {	
				cur_line = line2;
				prev_line = line1;
			} else {
				cur_line = line2;
				prev_line = line1;
			}
			line++;
			lpos = 1;
			cur_line [0] = 0;
		} else if (c != EOF) {
			if (lpos <= 81) {
				cur_line [lpos - 1] = c;
				cur_line [lpos] = 0;
			}
			lpos++;
		}
	} else
		ugflag = 0;
	return c;		
}

static int get_token (cfile)
	FILE *cfile;
{
	int c;
	int ttok;
	static char tb [2];
	int l, p, u;

	do {
		l = line;
		p = lpos;
		u = ugflag;

		c = get_char (cfile);

		if (!(c == '\n' && eol_token) && isascii (c) && isspace (c))
			continue;
		if (c == '#') {
			skip_to_eol (cfile);
			continue;
		}
		if (c == '"') {
			lexline = l;
			lexchar = p;
			ttok = read_string (cfile);
			break;
		}
		if ((isascii (c) && isdigit (c)) || c == '-') {
			lexline = l;
			lexchar = p;
			ttok = read_number (c, cfile);
			break;
		} else if (isascii (c) && isalpha (c)) {
			lexline = l;
			lexchar = p;
			ttok = read_num_or_name (c, cfile);
			break;
		} else {
			lexline = l;
			lexchar = p;
			tb [0] = c;
			tb [1] = 0;
			tval = tb;
			ttok = c;
			break;
		}
	} while (1);
	return ttok;
}

int next_token (rval, cfile)
	char **rval;
	FILE *cfile;
{
	int rv;

	if (token) {
		if (lexline != tline)
			token_line = cur_line;
		lexchar = tlpos;
		lexline = tline;
		rv = token;
		token = 0;
	} else {
		rv = get_token (cfile);
		token_line = cur_line;
	}
	if (rval)
		*rval = tval;
#ifdef DEBUG_TOKENS
	fprintf (stderr, "%s:%d ", tval, rv);
#endif
	return rv;
}

int peek_token (rval, cfile)
	char **rval;
	FILE *cfile;
{
	int x;

	if (!token) {
		tlpos = lexchar;
		tline = lexline;
		token = get_token (cfile);
		if (lexline != tline)
			token_line = prev_line;
		x = lexchar; lexchar = tlpos; tlpos = x;
		x = lexline; lexline = tline; tline = x;
	}
	if (rval)
		*rval = tval;
#ifdef DEBUG_TOKENS
	fprintf (stderr, "(%s:%d) ", tval, token);
#endif
	return token;
}

static void skip_to_eol (cfile)
	FILE *cfile;
{
	int c;
	do {
		c = get_char (cfile);
		if (c == EOF)
			return;
		if (c == EOL)
			return;
	} while (1);
}

static int read_string (cfile)
	FILE *cfile;
{
	int i;
	int bs = 0;
	int c;

	for (i = 0; i < sizeof tokbuf; i++) {
		c = get_char (cfile);
		if (c == EOF) {
			parse_warn ("eof in string constant");
			break;
		}
		if (bs) {
			bs = 0;
			tokbuf [i] = c;
		} else if (c == '\\')
			bs = 1;
		else if (c == '"')
			break;
		else
			tokbuf [i] = c;
	}
	/* Normally, I'd feel guilty about this, but we're talking about
	   strings that'll fit in a DHCP packet here... */
	if (i == sizeof tokbuf) {
		parse_warn ("string constant larger than internal buffer");
		--i;
	}
	tokbuf [i] = 0;
	tval = tokbuf;
	return STRING;
}

static int read_number (c, cfile)
	int c;
	FILE *cfile;
{
	int seenx = 0;
	int i = 0;
	int token = NUMBER;

	tokbuf [i++] = c;
	for (; i < sizeof tokbuf; i++) {
		c = get_char (cfile);
		if (!seenx && c == 'x') {
			seenx = 1;
		} else if (!isascii (c) || !isxdigit (c)) {
			ungetc (c, cfile);
			ugflag = 1;
			break;
		}
		tokbuf [i] = c;
	}
	if (i == sizeof tokbuf) {
		parse_warn ("numeric token larger than internal buffer");
		--i;
	}
	tokbuf [i] = 0;
	tval = tokbuf;
	return token;
}

static int read_num_or_name (c, cfile)
	int c;
	FILE *cfile;
{
	int i = 0;
	int rv = NUMBER_OR_NAME;
	tokbuf [i++] = c;
	for (; i < sizeof tokbuf; i++) {
		c = get_char (cfile);
		if (!isascii (c) ||
		    (c != '-' && c != '_' && !isalnum (c))) {
			ungetc (c, cfile);
			ugflag = 1;
			break;
		}
		if (!isxdigit (c))
			rv = NAME;
		tokbuf [i] = c;
	}
	if (i == sizeof tokbuf) {
		parse_warn ("token larger than internal buffer");
		--i;
	}
	tokbuf [i] = 0;
	tval = tokbuf;
	return intern (tval, rv);
}

static int intern (atom, dfv)
	char *atom;
	int dfv;
{
	if (!isascii (atom [0]))
		return dfv;

	switch (tolower (atom [0])) {
	      case 'a':
		if (!strcasecmp (atom + 1, "lways-reply-rfc1048"))
			return ALWAYS_REPLY_RFC1048;
		if (!strcasecmp (atom + 1, "ppend"))
			return APPEND;
		if (!strcasecmp (atom + 1, "llow"))
			return ALLOW;
		if (!strcasecmp (atom + 1, "lias"))
			return ALIAS;
		if (!strcasecmp (atom + 1, "bandoned"))
			return ABANDONED;
		if (!strcasecmp (atom + 1, "uthoritative"))
			return AUTHORITATIVE;
		break;
	      case 'b':
		if (!strcasecmp (atom + 1, "ackoff-cutoff"))
			return BACKOFF_CUTOFF;
		if (!strcasecmp (atom + 1, "ootp"))
			return BOOTP;
		if (!strcasecmp (atom + 1, "ooting"))
			return BOOTING;
		if (!strcasecmp (atom + 1, "oot-unknown-clients"))
			return BOOT_UNKNOWN_CLIENTS;
	      case 'c':
		if (!strcasecmp (atom + 1, "lass"))
			return CLASS;
		if (!strcasecmp (atom + 1, "iaddr"))
			return CIADDR;
		if (!strcasecmp (atom + 1, "lient-identifier"))
			return CLIENT_IDENTIFIER;
		if (!strcasecmp (atom + 1, "lient-hostname"))
			return CLIENT_HOSTNAME;
		break;
	      case 'd':
		if (!strcasecmp (atom + 1, "omain"))
			return DOMAIN;
		if (!strcasecmp (atom + 1, "eny"))
			return DENY;
		if (!strncasecmp (atom + 1, "efault", 6)) {
			if (!atom [7])
				return DEFAULT;
			if (!strcasecmp (atom + 7, "-lease-time"))
				return DEFAULT_LEASE_TIME;
			break;
		}
		if (!strncasecmp (atom + 1, "ynamic-bootp", 12)) {
			if (!atom [13])
				return DYNAMIC_BOOTP;
			if (!strcasecmp (atom + 13, "-lease-cutoff"))
				return DYNAMIC_BOOTP_LEASE_CUTOFF;
			if (!strcasecmp (atom + 13, "-lease-length"))
				return DYNAMIC_BOOTP_LEASE_LENGTH;
			break;
		}
		break;
	      case 'e':
		if (!strcasecmp (atom + 1, "thernet"))
			return ETHERNET;
		if (!strcasecmp (atom + 1, "nds"))
			return ENDS;
		if (!strcasecmp (atom + 1, "xpire"))
			return EXPIRE;
		break;
	      case 'f':
		if (!strcasecmp (atom + 1, "ilename"))
			return FILENAME;
		if (!strcasecmp (atom + 1, "ixed-address"))
			return FIXED_ADDR;
		if (!strcasecmp (atom + 1, "ddi"))
			return FDDI;
		break;
	      case 'g':
		if (!strcasecmp (atom + 1, "iaddr"))
			return GIADDR;
		if (!strcasecmp (atom + 1, "roup"))
			return GROUP;
		if (!strcasecmp (atom + 1, "et-lease-hostnames"))
			return GET_LEASE_HOSTNAMES;
		break;
	      case 'h':
		if (!strcasecmp (atom + 1, "ost"))
			return HOST;
		if (!strcasecmp (atom + 1, "ardware"))
			return HARDWARE;
		if (!strcasecmp (atom + 1, "ostname"))
			return HOSTNAME;
		break;
	      case 'i':
		if (!strcasecmp (atom + 1, "nitial-interval"))
			return INITIAL_INTERVAL;
		if (!strcasecmp (atom + 1, "nterface"))
			return INTERFACE;
		break;
	      case 'l':
		if (!strcasecmp (atom + 1, "ease"))
			return LEASE;
		break;
	      case 'm':
		if (!strcasecmp (atom + 1, "ax-lease-time"))
			return MAX_LEASE_TIME;
		if (!strncasecmp (atom + 1, "edi", 3)) {
			if (!strcasecmp (atom + 4, "a"))
				return MEDIA;
			if (!strcasecmp (atom + 4, "um"))
				return MEDIUM;
			break;
		}
		break;
	      case 'n':
		if (!strcasecmp (atom + 1, "ameserver"))
			return NAMESERVER;
		if (!strcasecmp (atom + 1, "etmask"))
			return NETMASK;
		if (!strcasecmp (atom + 1, "ext-server"))
			return NEXT_SERVER;
		if (!strcasecmp (atom + 1, "ot"))
			return TOKEN_NOT;
		break;
	      case 'o':
		if (!strcasecmp (atom + 1, "ption"))
			return OPTION;
		if (!strcasecmp (atom + 1, "ne-lease-per-client"))
			return ONE_LEASE_PER_CLIENT;
		break;
	      case 'p':
		if (!strcasecmp (atom + 1, "repend"))
			return PREPEND;
		if (!strcasecmp (atom + 1, "acket"))
			return PACKET;
		break;
	      case 'r':
		if (!strcasecmp (atom + 1, "ange"))
			return RANGE;
		if (!strcasecmp (atom + 1, "equest"))
			return REQUEST;
		if (!strcasecmp (atom + 1, "equire"))
			return REQUIRE;
		if (!strcasecmp (atom + 1, "etry"))
			return RETRY;
		if (!strcasecmp (atom + 1, "enew"))
			return RENEW;
		if (!strcasecmp (atom + 1, "ebind"))
			return REBIND;
		if (!strcasecmp (atom + 1, "eboot"))
			return REBOOT;
		if (!strcasecmp (atom + 1, "eject"))
			return REJECT;
		break;
	      case 's':
		if (!strcasecmp (atom + 1, "earch"))
			return SEARCH;
		if (!strcasecmp (atom + 1, "tarts"))
			return STARTS;
		if (!strcasecmp (atom + 1, "iaddr"))
			return SIADDR;
		if (!strcasecmp (atom + 1, "ubnet"))
			return SUBNET;
		if (!strcasecmp (atom + 1, "hared-network"))
			return SHARED_NETWORK;
		if (!strcasecmp (atom + 1, "erver-name"))
			return SERVER_NAME;
		if (!strcasecmp (atom + 1, "erver-identifier"))
			return SERVER_IDENTIFIER;
		if (!strcasecmp (atom + 1, "elect-timeout"))
			return SELECT_TIMEOUT;
		if (!strcasecmp (atom + 1, "end"))
			return SEND;
		if (!strcasecmp (atom + 1, "cript"))
			return SCRIPT;
		if (!strcasecmp (atom + 1, "upersede"))
			return SUPERSEDE;
		break;
	      case 't':
		if (!strcasecmp (atom + 1, "imestamp"))
			return TIMESTAMP;
		if (!strcasecmp (atom + 1, "imeout"))
			return TIMEOUT;
		if (!strcasecmp (atom + 1, "oken-ring"))
			return TOKEN_RING;
		break;
	      case 'u':
		if (!strncasecmp (atom + 1, "se", 2)) {
			if (!strcasecmp (atom + 3, "r-class"))
				return USER_CLASS;
			if (!strcasecmp (atom + 3, "-host-decl-names"))
				return USE_HOST_DECL_NAMES;
			if (!strcasecmp (atom + 3,
					 "-lease-addr-for-default-route"))
				return USE_LEASE_ADDR_FOR_DEFAULT_ROUTE;
			break;
		}
		if (!strcasecmp (atom + 1, "id"))
			return UID;
		if (!strcasecmp (atom + 1, "nknown-clients"))
			return UNKNOWN_CLIENTS;
		break;
	      case 'v':
		if (!strcasecmp (atom + 1, "endor-class"))
			return VENDOR_CLASS;
		break;
	      case 'y':
		if (!strcasecmp (atom + 1, "iaddr"))
			return YIADDR;
		break;
	}
	return dfv;
}
@


1.1.1.1
log
@Import OpenBSD as of today again (seems pretty stable, I hope)

Prominent changes: more bgpd, tcpmd5; tcpdump/isakmpd fixes
@
text
@@


1.1.1.2
log
@large-scale import of OpenBSD 3.5-current source base including many fixes
note: from now, we will not be binary compatible with OpenBSD apps any
longer (due to syscall numbering differences); both an OpenBSD compat and
a conversion tool for old MirOS #7 apps will be delivered later.

The src/ tree is locked from now.
@
text
@d1 1
a1 1
/*	$OpenBSD: conflex.c,v 1.6 2004/02/24 13:08:26 henning Exp $	*/
d3 1
a3 1
/* Lexical scanner for dhcpd config file... */
a42 2
#include <ctype.h>

d45 1
d55 2
a56 2
static char line1[81];
static char line2[81];
d64 1
a64 1
static char tokbuf[1500];
d66 13
a78 7
static int get_char(FILE *);
static int get_token(FILE *);
static void skip_to_eol(FILE *);
static int read_string(FILE *);
static int read_number(int, FILE *);
static int read_num_or_name(int, FILE *);
static int intern(char *, int);
d80 2
a81 2
void
new_parse(char *name)
d88 1
a88 1
	cur_line[0] = prev_line[0] = 0;
d92 2
a93 2
static int
get_char(FILE *cfile)
d95 1
a95 1
	int c = getc(cfile);
d97 2
a98 2
		if (c == '\n') {
			if (cur_line == line1) {
d107 1
a107 1
			cur_line[0] = 0;
d110 2
a111 2
				cur_line[lpos - 1] = c;
				cur_line[lpos] = 0;
d117 1
a117 1
	return (c);
d120 2
a121 2
static int
get_token(FILE *cfile)
d123 4
a126 3
	int		c, ttok;
	static char	tb[2];
	int		l, p, u;
d133 1
a133 1
		c = get_char(cfile);
d135 1
a135 1
		if (!(c == '\n' && eol_token) && isascii(c) && isspace(c))
d138 1
a138 1
			skip_to_eol(cfile);
d144 1
a144 1
			ttok = read_string(cfile);
d147 1
a147 1
		if ((isascii(c) && isdigit(c)) || c == '-') {
d150 1
a150 1
			ttok = read_number(c, cfile);
d152 1
a152 1
		} else if (isascii(c) && isalpha(c)) {
d155 1
a155 1
			ttok = read_num_or_name(c, cfile);
d160 2
a161 2
			tb[0] = c;
			tb[1] = 0;
d167 1
a167 1
	return (ttok);
d170 3
a172 2
int
next_token(char **rval, FILE *cfile)
d174 1
a174 1
	int	rv;
d184 1
a184 1
		rv = get_token(cfile);
d189 4
a192 2

	return (rv);
d195 3
a197 2
int
peek_token(char **rval, FILE *cfile)
d199 1
a199 1
	int	x;
d204 1
a204 1
		token = get_token(cfile);
d207 2
a208 6
		x = lexchar;
		lexchar = tlpos;
		tlpos = x;
		x = lexline;
		lexline = tline;
		tline = x;
d212 4
a215 2

	return (token);
d218 2
a219 2
static void
skip_to_eol(FILE *cfile)
d221 1
a221 2
	int	c;

d223 1
a223 1
		c = get_char(cfile);
d226 1
a226 1
		if (c == '\n')
d231 2
a232 2
static int
read_string(FILE *cfile)
d234 3
a236 1
	int	i, c, bs = 0;
d238 2
a239 2
	for (i = 0; i < sizeof(tokbuf); i++) {
		c = get_char(cfile);
d241 1
a241 1
			parse_warn("eof in string constant");
d246 1
a246 1
			tokbuf[i] = c;
d252 1
a252 1
			tokbuf[i] = c;
d254 5
a258 7
	/*
	 * Normally, I'd feel guilty about this, but we're talking about
	 * strings that'll fit in a DHCP packet here...
	 */
	if (i == sizeof(tokbuf)) {
		parse_warn("string constant larger than internal buffer");
		i--;
d260 1
a260 1
	tokbuf[i] = 0;
d262 1
a262 1
	return (STRING);
d265 3
a267 2
static int
read_number(int c, FILE *cfile)
d269 8
a276 6
	int	seenx = 0, i = 0, token = NUMBER;

	tokbuf[i++] = c;
	for (; i < sizeof(tokbuf); i++) {
		c = get_char(cfile);
		if (!seenx && c == 'x')
d278 2
a279 2
		else if (!isascii(c) || !isxdigit(c)) {
			ungetc(c, cfile);
d283 1
a283 1
		tokbuf[i] = c;
d285 3
a287 3
	if (i == sizeof(tokbuf)) {
		parse_warn("numeric token larger than internal buffer");
		i--;
d289 1
a289 1
	tokbuf[i] = 0;
d291 1
a291 2

	return (token);
d294 3
a296 2
static int
read_num_or_name(int c, FILE *cfile)
d298 8
a305 8
	int	i = 0;
	int	rv = NUMBER_OR_NAME;

	tokbuf[i++] = c;
	for (; i < sizeof(tokbuf); i++) {
		c = get_char(cfile);
		if (!isascii(c) || (c != '-' && c != '_' && !isalnum(c))) {
			ungetc(c, cfile);
d309 1
a309 1
		if (!isxdigit(c))
d311 1
a311 1
		tokbuf[i] = c;
d313 3
a315 3
	if (i == sizeof(tokbuf)) {
		parse_warn("token larger than internal buffer");
		i--;
d317 1
a317 1
	tokbuf[i] = 0;
d319 1
a319 2

	return (intern(tval, rv));
d322 3
a324 2
static int
intern(char *atom, int dfv)
d326 2
a327 2
	if (!isascii(atom[0]))
		return (dfv);
d329 188
a516 188
	switch (tolower(atom[0])) {
	case 'a':
		if (!strcasecmp(atom + 1, "lways-reply-rfc1048"))
			return (ALWAYS_REPLY_RFC1048);
		if (!strcasecmp(atom + 1, "ppend"))
			return (APPEND);
		if (!strcasecmp(atom + 1, "llow"))
			return (ALLOW);
		if (!strcasecmp(atom + 1, "lias"))
			return (ALIAS);
		if (!strcasecmp(atom + 1, "bandoned"))
			return (ABANDONED);
		if (!strcasecmp(atom + 1, "uthoritative"))
			return (AUTHORITATIVE);
		break;
	case 'b':
		if (!strcasecmp(atom + 1, "ackoff-cutoff"))
			return (BACKOFF_CUTOFF);
		if (!strcasecmp(atom + 1, "ootp"))
			return (BOOTP);
		if (!strcasecmp(atom + 1, "ooting"))
			return (BOOTING);
		if (!strcasecmp(atom + 1, "oot-unknown-clients"))
			return (BOOT_UNKNOWN_CLIENTS);
	case 'c':
		if (!strcasecmp(atom + 1, "lass"))
			return (CLASS);
		if (!strcasecmp(atom + 1, "iaddr"))
			return (CIADDR);
		if (!strcasecmp(atom + 1, "lient-identifier"))
			return (CLIENT_IDENTIFIER);
		if (!strcasecmp(atom + 1, "lient-hostname"))
			return (CLIENT_HOSTNAME);
		break;
	case 'd':
		if (!strcasecmp(atom + 1, "omain"))
			return (DOMAIN);
		if (!strcasecmp(atom + 1, "eny"))
			return (DENY);
		if (!strncasecmp(atom + 1, "efault", 6)) {
			if (!atom[7])
				return (DEFAULT);
			if (!strcasecmp(atom + 7, "-lease-time"))
				return (DEFAULT_LEASE_TIME);
			break;
		}
		if (!strncasecmp(atom + 1, "ynamic-bootp", 12)) {
			if (!atom[13])
				return (DYNAMIC_BOOTP);
			if (!strcasecmp(atom + 13, "-lease-cutoff"))
				return (DYNAMIC_BOOTP_LEASE_CUTOFF);
			if (!strcasecmp(atom + 13, "-lease-length"))
				return (DYNAMIC_BOOTP_LEASE_LENGTH);
			break;
		}
		break;
	case 'e':
		if (!strcasecmp(atom + 1, "thernet"))
			return (ETHERNET);
		if (!strcasecmp(atom + 1, "nds"))
			return (ENDS);
		if (!strcasecmp(atom + 1, "xpire"))
			return (EXPIRE);
		break;
	case 'f':
		if (!strcasecmp(atom + 1, "ilename"))
			return (FILENAME);
		if (!strcasecmp(atom + 1, "ixed-address"))
			return (FIXED_ADDR);
		if (!strcasecmp(atom + 1, "ddi"))
			return (FDDI);
		break;
	case 'g':
		if (!strcasecmp(atom + 1, "iaddr"))
			return (GIADDR);
		if (!strcasecmp(atom + 1, "roup"))
			return (GROUP);
		if (!strcasecmp(atom + 1, "et-lease-hostnames"))
			return (GET_LEASE_HOSTNAMES);
		break;
	case 'h':
		if (!strcasecmp(atom + 1, "ost"))
			return (HOST);
		if (!strcasecmp(atom + 1, "ardware"))
			return (HARDWARE);
		if (!strcasecmp(atom + 1, "ostname"))
			return (HOSTNAME);
		break;
	case 'i':
		if (!strcasecmp(atom + 1, "nitial-interval"))
			return (INITIAL_INTERVAL);
		if (!strcasecmp(atom + 1, "nterface"))
			return (INTERFACE);
		break;
	case 'l':
		if (!strcasecmp(atom + 1, "ease"))
			return (LEASE);
		break;
	case 'm':
		if (!strcasecmp(atom + 1, "ax-lease-time"))
			return (MAX_LEASE_TIME);
		if (!strncasecmp(atom + 1, "edi", 3)) {
			if (!strcasecmp(atom + 4, "a"))
				return (MEDIA);
			if (!strcasecmp(atom + 4, "um"))
				return (MEDIUM);
			break;
		}
		break;
	case 'n':
		if (!strcasecmp(atom + 1, "ameserver"))
			return (NAMESERVER);
		if (!strcasecmp(atom + 1, "etmask"))
			return (NETMASK);
		if (!strcasecmp(atom + 1, "ext-server"))
			return (NEXT_SERVER);
		if (!strcasecmp(atom + 1, "ot"))
			return (TOKEN_NOT);
		break;
	case 'o':
		if (!strcasecmp(atom + 1, "ption"))
			return (OPTION);
		if (!strcasecmp(atom + 1, "ne-lease-per-client"))
			return (ONE_LEASE_PER_CLIENT);
		break;
	case 'p':
		if (!strcasecmp(atom + 1, "repend"))
			return (PREPEND);
		if (!strcasecmp(atom + 1, "acket"))
			return (PACKET);
		break;
	case 'r':
		if (!strcasecmp(atom + 1, "ange"))
			return (RANGE);
		if (!strcasecmp(atom + 1, "equest"))
			return (REQUEST);
		if (!strcasecmp(atom + 1, "equire"))
			return (REQUIRE);
		if (!strcasecmp(atom + 1, "etry"))
			return (RETRY);
		if (!strcasecmp(atom + 1, "enew"))
			return (RENEW);
		if (!strcasecmp(atom + 1, "ebind"))
			return (REBIND);
		if (!strcasecmp(atom + 1, "eboot"))
			return (REBOOT);
		if (!strcasecmp(atom + 1, "eject"))
			return (REJECT);
		break;
	case 's':
		if (!strcasecmp(atom + 1, "earch"))
			return (SEARCH);
		if (!strcasecmp(atom + 1, "tarts"))
			return (STARTS);
		if (!strcasecmp(atom + 1, "iaddr"))
			return (SIADDR);
		if (!strcasecmp(atom + 1, "ubnet"))
			return (SUBNET);
		if (!strcasecmp(atom + 1, "hared-network"))
			return (SHARED_NETWORK);
		if (!strcasecmp(atom + 1, "erver-name"))
			return (SERVER_NAME);
		if (!strcasecmp(atom + 1, "erver-identifier"))
			return (SERVER_IDENTIFIER);
		if (!strcasecmp(atom + 1, "elect-timeout"))
			return (SELECT_TIMEOUT);
		if (!strcasecmp(atom + 1, "end"))
			return (SEND);
		if (!strcasecmp(atom + 1, "cript"))
			return (SCRIPT);
		if (!strcasecmp(atom + 1, "upersede"))
			return (SUPERSEDE);
		break;
	case 't':
		if (!strcasecmp(atom + 1, "imestamp"))
			return (TIMESTAMP);
		if (!strcasecmp(atom + 1, "imeout"))
			return (TIMEOUT);
		if (!strcasecmp(atom + 1, "oken-ring"))
			return (TOKEN_RING);
		break;
	case 'u':
		if (!strncasecmp(atom + 1, "se", 2)) {
			if (!strcasecmp(atom + 3, "r-class"))
				return (USER_CLASS);
			if (!strcasecmp(atom + 3, "-host-decl-names"))
				return (USE_HOST_DECL_NAMES);
			if (!strcasecmp(atom + 3,
d518 1
a518 1
				return (USE_LEASE_ADDR_FOR_DEFAULT_ROUTE);
d521 4
a524 4
		if (!strcasecmp(atom + 1, "id"))
			return (UID);
		if (!strcasecmp(atom + 1, "nknown-clients"))
			return (UNKNOWN_CLIENTS);
d526 3
a528 3
	case 'v':
		if (!strcasecmp(atom + 1, "endor-class"))
			return (VENDOR_CLASS);
d530 3
a532 3
	case 'y':
		if (!strcasecmp(atom + 1, "iaddr"))
			return (YIADDR);
d535 1
a535 1
	return (dfv);
@


1.1.1.3
log
@another dose of updates
@
text
@d1 1
a1 1
/*	$OpenBSD: conflex.c,v 1.7 2004/09/15 19:02:38 deraadt Exp $	*/
d120 1
a120 1
	int		l, p;
d125 1
@


