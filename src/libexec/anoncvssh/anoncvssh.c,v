head	1.2;
access;
symbols
	tg-mergetmp-mirosx-1:1.2
	tg-mergefixes-1-branch:1.2.0.4
	tg-mergefixes-1-base:1.2
	MIROS_X:1.2.0.2
	MIROS_X_BASE:1.2
	MIRBSD_XP_MIRPPC:1.1.0.4
	MIRBSD_XP_SPARC_BASE:1.1
	MIRBSD_XP_SPARC:1.1.0.2;
locks; strict;
comment	@ * @;


1.2
date	2004.12.16.18.57.18;	author tg;	state Exp;
branches;
next	1.1;

1.1
date	2004.08.27.19.21.58;	author tg;	state Exp;
branches;
next	;


desc
@@


1.2
log
@KNF; add r/w access for multiple users; fix comments; ...
@
text
@/**	$MirBSD: src/share/misc/licence.template,v 1.20 2004/12/03 16:18:37 tg Rel $ */

/*-
 * Copyright (c) 2004
 *	Thorsten "mirabile" Glaser <tg@@66h.42h.de>
 *
 * Licensee is hereby permitted to deal in this work without restric-
 * tion, including unlimited rights to use, publicly perform, modify,
 * merge, distribute, sell, give away or sublicence, provided all co-
 * pyright notices above, these terms and the disclaimer are retained
 * in all redistributions or reproduced in accompanying documentation
 * or other materials provided with binary redistributions.
 *
 * All advertising materials mentioning features or use of this soft-
 * ware must display the following acknowledgement:
 *	This product includes material provided by Thorsten Glaser.
 *
 * Licensor hereby provides this work "AS IS" and WITHOUT WARRANTY of
 * any kind, expressed or implied, to the maximum extent permitted by
 * applicable law, but with the warranty of being written without ma-
 * licious intent or gross negligence; in no event shall licensor, an
 * author or contributor be held liable for any damage, direct, indi-
 * rect or other, however caused, arising in any way out of the usage
 * of this work, even if advised of the possibility of such damage.
 *-
 * user shell to be used for chrooted access (anonymous or personali-
 * sed, read-only or read-write) to cvs and possibly rsync.
 * This programme requires ANSI C.
 */

/*
 * Copyright (c) 2002 Todd C. Miller <Todd.Miller@@courtesan.com>
 * Copyright (c) 1997 Bob Beck <beck@@obtuse.com>
 * Copyright (c) 1996 Thorsten Lockert <tholo@@sigmasoft.com>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/types.h>
#include <sys/time.h>
#include <sys/resource.h>
#include <stdio.h>
#include <stdlib.h>
#if defined(__OpenBSD__) || defined(__NetBSD__) || defined(__FreeBSD__)
#include <paths.h>
#endif
#include <pwd.h>
#include <unistd.h>
#include <errno.h>

/*
 * You may need to change this path to ensure that RCS, CVS and diff
 * can be found
 */
#ifndef _PATH_DEFPATH
#define _PATH_DEFPATH	"/bin:/usr/bin"
#endif

/*
 * This should not normally have to be changed
 */
#ifndef _PATH_BSHELL
#define _PATH_BSHELL	"/bin/sh"
#endif

/*
 * Location of CVS tree, relative to the anonymous CVS user's
 * home directory
 */
#ifndef LOCALROOT
#define LOCALROOT	"/cvs"
#endif

/*
 * Account and host name to be used when accessing the
 * CVS repository remotely
 */
#ifndef HOSTNAME
#if defined(FQDN) && defined(ANONCVS_USER)
#define HOSTNAME	ANONCVS_USER "@@" FQDN
#else
#define HOSTNAME	"mirbsd-cvs@@mirbsd.bsdadvocacy.org"
#endif
#endif /* ndef HOSTNAME */

/*
 * This is our own programme name
 */
#ifndef ANONCVSSH_NAME
#define ANONCVSSH_NAME	"anoncvssh"
#endif

/*
 * This is the rsync server to invoke
 */
#ifndef RSYNC
#define RSYNC		"/usr/bin/rsync"
#endif
#define FULL_RSYNC	RSYNC " --server "

/*
 * Niceness increase
 */
#ifndef NICE_INC
#define NICE_INC	5
#endif
#if NICE_INC < 0
#error "may not decrease niceness"
#endif


/****************************************************************/

static const char progID[] = "@@(#) " HOSTNAME ":" LOCALROOT
    "\n@@(#) $MirBSD: src/libexec/anoncvssh/anoncvssh.c,v 1.1 2004/08/27 19:21:58 tg Exp $";

#ifdef USE_SYSLOG
#include <string.h>
#include <syslog.h>
#include <netinet/in.h>
#include <sys/socket.h>
#include <arpa/inet.h>
#define LOG_FACILITY	LOG_DAEMON
#define LOG_PRIO	LOG_INFO
#define DO_LOG(x)	syslog(LOG_NOTICE, x)
#else /* def USE_SYSLOG */
#define DO_LOG(x)	/* nothing */
#endif /* ! def USE_SYSLOG */

int main(int, char *[]);

char * const env[] = {
	"PATH=" _PATH_DEFPATH,
	"SHELL=" _PATH_BSHELL,
	"CVSROOT=" LOCALROOT,
	"HOME=/",
#ifndef ACCESS_READWRITE
	"CVSREADONLYFS=1",
#endif
	NULL
};

int
main(int argc, char *argv[])
{
	struct passwd *pw;
	int niceness;
	char *chrootdir;
#ifdef CHROOT_PARENT_DIR
	char *s;
#endif
#ifdef DEBUG
	int i;
#endif

	pw = getpwuid(getuid());
	if (pw == NULL) {
		fprintf(stderr, "no user for uid %d\n", getuid());
		exit(1);
	}
	if (pw->pw_dir == NULL) {
		fprintf(stderr, "no home directory\n");
		exit(1);
	}

#ifdef USE_SYSLOG
	openlog(ANONCVSSH_NAME, LOG_PID | LOG_NDELAY, LOG_FACILITY);
#endif

	/* drop priority by NICE_INC; anoncvs is a background process */
	errno = 0;
	niceness = NICE_INC + getpriority(PRIO_PROCESS, 0);
	if ((niceness == (NICE_INC - 1)) && errno) {
		DO_LOG("Can't get process priority!");
	} else if (setpriority(PRIO_PROCESS, 0, niceness)) {
		DO_LOG("Can't set process priority!");
	}

#ifdef ANONCVS_USER
	/*
	 * I love lusers who have to test every setuid binary on my machine.
	 */
	if (getuid() != 0 && (strcmp(pw->pw_name, ANONCVS_USER) != 0)) {
		fprintf(stderr, "You're not supposed to be running me!\n");
#ifdef USE_SYSLOG
		syslog(LOG_NOTICE,
		    "User %s(%d) invoked %s - Possible twink?",
		    pw->pw_name, pw->pw_uid, ANONCVSSH_NAME);
#endif /* def USE_SYSLOG */
		exit(1);
	}
#endif /* def ANONCVS_USER */

	setuid(0);
	if ((chrootdir = strdup(pw->pw_dir)) == NULL) {
		perror("strdup");
		exit(1);
	}
#ifdef CHROOT_PARENT_DIR
	if ((s = strrchr(chrootdir, '/')) == NULL) {
		fprintf(stderr, "No slash in user's home directory!\n");
		exit(1);
	}
	*s = '\0';
	if (strrchr(chrootdir, '/') == NULL) {
		fprintf(stderr, "No slash in user's parent directory!\n");
		exit(1);
	}
#endif
	if (chroot(chrootdir) == -1) {
		perror("chroot");
		exit(1);
	}
	chdir("/");
	setuid(pw->pw_uid);
	free(chrootdir);

	/*
	 * programme now "safe"
	 */


#ifdef ACCESS_PSERVER
	/* If we want pserver functionality (NOT! It's braindead!) */
	if ((argc == 2) && (strcmp("pserver", argv[1]) == 0)) {
#ifdef USE_SYSLOG
 	        int slen;
		struct sockaddr_in my_sa, peer_sa;
		char *us, *them;

		slen = sizeof(my_sa);
		if (getsockname(0, (struct sockaddr *) &my_sa, &slen) != 0) {
			perror("getsockname");
			exit(1);
		}
		us = strdup(inet_ntoa(my_sa.sin_addr));
		if (us == NULL) {
			fprintf(stderr, "malloc failed\n");
			exit(1);
		}
		slen = sizeof(peer_sa);
		if (getpeername(0, (struct sockaddr *) &peer_sa, &slen) != 0) {
			perror("getpeername");
			exit(1);
		}
		them = strdup(inet_ntoa(peer_sa.sin_addr));
		if (them == NULL) {
			fprintf(stderr, "malloc failed\n");
			exit(1);
		}
	        syslog(LOG_PRIO,
		    "pserver connection from %s:%d to %s:%d\n",
		    them, ntohs(peer_sa.sin_port),
		    us, ntohs(my_sa.sin_port));
#endif /* def USE_SYSLOG */
		execle("/usr/bin/cvs", "cvs",
		    "--allow-root=" LOCALROOT, "pserver", NULL, env);
		perror("execle: cvs");
		fprintf(stderr, "unable to exec CVS pserver!\n");
		exit(1);
		/* NOTREACHED */
	}
#endif /* def ACCESS_PSERVER */

	if ((argc == 3) && (!strcmp(ANONCVSSH_NAME, argv[0])) &&
	    (!strcmp("-c", argv[1]))) {
		if ((!strcmp("cvs server", argv[2])) ||
		    (!strcmp("cvs -d " LOCALROOT " server", argv[2]))) {
			execle("/usr/bin/cvs", "cvs", "server", NULL, env);
			perror("execle: cvs");
			DO_LOG("chaining to CVS failed!");
			fprintf(stderr, "unable to exec CVS server!\n");
			exit(1);
			/* NOTREACHED */
		} else if (!strncmp(FULL_RSYNC, argv[2], strlen(FULL_RSYNC))) {
#ifdef ACCESS_RSYNC
			int i = 0;
			char *newarg[256];
			char *p = argv[2] + 15;

			newarg[0] = "rsync";
		lp:
			newarg[++i] = strsep(&p, " ");
			if ((newarg[i] != NULL) && (i < 255))
				goto lp;
			execve(RSYNC, newarg, env);
			perror("execve: rsync");
			DO_LOG("chaining to " RSYNC " failed!");
			fprintf(stderr, "unable to exec RSYNC!\n");
			exit(1);
			/* NOTREACHED */
#else
			DO_LOG("access to RSYNC prohibited!");
#endif
		}
	}

	DO_LOG("parameter failure, printing help message");
	fprintf(stderr, "\n"
	    "To use anonymous CVS or RSYNC, install the latest version of the\n"
	    "client access software, as well as OpenSSH, on your computer.\n"
	    "Then, set your CVSROOT environment variable to the following\n"
	    "value for CVS access:\n\t%s:%s\n"
	    "For RSYNC specify the parameter --rsync-path=" RSYNC "\n"
	    "when connecting, and use SSH instead of RSH for both.\n",
	    HOSTNAME, LOCALROOT);
#ifdef DEBUG
	fprintf(stderr, "argc = %d\n", argc);
	for (i = 0; i < argc; i++)
		fprintf(stderr, "argv[%d] = \"%s\"\n", i, argv[i]);
#endif
	sleep(10);
	exit(0);
}
@


1.1
log
@move src/distrib/anoncvs to src/libexec/anoncvssh
@
text
@d1 3
a3 2
/* $MirBSD: src/distrib/anoncvs/anoncvssh.c,v 1.14 2004/08/13 16:18:46 tg Exp $
 *-
d8 9
a16 5
 * tion, including unlimited rights to use, publically perform, modi-
 * fy, merge, distribute, sell, give away or sublicence, provided the
 * above copyright notices, these terms and the disclaimer are retai-
 * ned in all redistributions, or reproduced in accompanying documen-
 * tation or other materials provided with binary redistributions.
d24 1
a24 1
 * of covered work, even if advised of the possibility of such damage.
d27 2
a28 2
 * zed, read-only or read-write) to cvs and possibly rsync.
 * requires ANSI C.
d65 2
a66 2
#ifndef	_PATH_DEFPATH
#define	_PATH_DEFPATH	"/bin:/usr/bin"
d72 2
a73 2
#ifndef	_PATH_BSHELL
#define	_PATH_BSHELL	"/bin/sh"
d80 2
a81 2
#ifndef	LOCALROOT
#define	LOCALROOT	"/cvs"
d88 1
a88 1
#ifndef	HOSTNAME
d90 1
a90 1
#define	HOSTNAME	ANONCVS_USER "@@" FQDN
d92 1
a92 1
#define	HOSTNAME	"mirbsd-cvs@@mirbsd.bsdadvocacy.org"
d94 1
a94 1
#endif	/* ndef HOSTNAME */
d99 2
a100 2
#ifndef	ANONCVSSH_NAME
#define	ANONCVSSH_NAME	"anoncvssh"
d106 4
a109 2
#define	RSYNC		"/usr/bin/rsync"
#define	FULL_RSYNC	RSYNC " --server "
d114 2
a115 2
#ifndef	NICE_INC
#define	NICE_INC	5
d125 1
a125 1
    "\n@@(#) $MirBSD: src/distrib/anoncvs/anoncvssh.c,v 1.14 2004/08/13 16:18:46 tg Exp $";
d127 1
a127 1
#ifdef	USE_SYSLOG
d133 6
a138 6
#define	LOG_FACILITY	LOG_DAEMON
#define	LOG_PRIO	LOG_INFO
#define	DO_LOG(x)	syslog(LOG_NOTICE, x)
#else	/* def USE_SYSLOG */
#define	DO_LOG(x)	/* nothing */
#endif	/* ! def USE_SYSLOG */
d147 1
a147 1
#ifndef	ACCESS_READWRITE
d157 6
a162 1
#ifdef	DEBUG
a164 1
	int niceness;
d172 1
a172 1
		fprintf(stderr, "no directory\n");
d176 1
a176 1
#ifdef	USE_SYSLOG
d180 1
a180 1
	/* drop priority by NICE_INC; anoncvs/-rsync is a background process */
d189 1
a189 1
#ifdef	ANONCVS_USER
d193 1
a193 1
	if (getuid() != 0 && (strcmp (pw->pw_name, ANONCVS_USER) != 0)) {
d195 1
a195 1
#ifdef	USE_SYSLOG
d197 3
a199 3
		       "User %s(%d) invoked %s - Possible twink?",
		       pw->pw_name, pw->pw_uid, ANONCVSSH_NAME);
#endif	/* def USE_SYSLOG */
d202 1
a202 1
#endif	/* def ANONCVS_USER */
d205 16
a220 1
	if (chroot(pw->pw_dir) == -1) {
d222 1
a222 1
		exit (1);
d226 1
d233 2
a234 2
#ifdef	ACCESS_PSERVER
	/* If we want pserver functionality */
d236 1
a236 1
#ifdef	USE_SYSLOG
d242 3
a244 4
		if (getsockname(0, (struct sockaddr *) &my_sa, &slen)
		    != 0) {
		  perror("getsockname");
		  exit(1);
d248 2
a249 2
		  fprintf(stderr, "malloc failed\n");
		  exit(1);
d252 3
a254 4
		if (getpeername(0, (struct sockaddr *) &peer_sa, &slen)
		    != 0) {
		  perror("getpeername");
		  exit(1);
d256 1
a256 1
		them=strdup(inet_ntoa(peer_sa.sin_addr));
d258 2
a259 2
		  fprintf(stderr, "malloc failed\n");
		  exit(1);
d262 4
a265 4
		       "pserver connection from %s:%d to %s:%d\n",
		       them, ntohs(peer_sa.sin_port),
		       us, ntohs(my_sa.sin_port));
#endif	/* def USE_SYSLOG */
d267 1
a267 1
		    "--allow-root=" LOCALROOT, "pserver", (void *)NULL, env);
d273 1
a273 1
#endif	/* def ACCESS_PSERVER */
d279 1
a279 2
			execle("/usr/bin/cvs", "cvs", "server",
			    (void *)NULL, env);
d286 1
a286 1
#ifdef	ACCESS_RSYNC
d292 2
a293 1
		    lp:	newarg[++i] = strsep(&p, " ");
d309 9
a317 11
	fprintf(stderr, "\nTo use anonymous CVS or RSYNC, install "
			"the latest version of the client access\n"
			"software, as well as OpenSSH, on your "
			"computer. Then, set your CVSROOT\n"
			"environment variable to the following "
			"value for CVS access:\n\t%s:%s\n"
			"For RSYNC, be sure to specify the "
			"parameter --rsync-path=" RSYNC "\n"
			"when connecting, and use SSH instead "
			"of RSH for both.\n", HOSTNAME, LOCALROOT);
#ifdef	DEBUG
@

