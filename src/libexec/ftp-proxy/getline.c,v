head	1.2;
access;
symbols
	tg-mergetmp-mirosx-1:1.2
	tg-mergefixes-1-branch:1.2.0.8
	tg-mergefixes-1-base:1.2
	MIROS_X:1.2.0.6
	MIROS_X_BASE:1.2
	tg-mergetmp-3:1.2
	MIRBSD_XP_MIRPPC:1.2.0.4
	MIRBSD_XP_SPARC_BASE:1.2
	MIRBSD_XP_SPARC:1.2.0.2
	MIRBSD_7quater:1.1.1.3
	cvs-200405160640:1.1.1.3
	cvs-200401271800:1.1.1.3
	cvs-200401261630:1.1.1.3
	cvs-200401021645:1.1.1.3
	MIRBSD_7_ALPHA:1.1.1.3.0.6
	MIRBSD_7:1.1.1.3.0.4
	cvs-200312222040:1.1.1.3
	MIRBSD_7ter:1.1.1.3
	MIRBSD_7_DEV:1.1.1.3.0.2
	cvs-200310020700:1.1.1.3
	cvs-200309271030:1.1.1.3
	cvs-200309251530:1.1.1.3
	cvs-200308302005:1.1.1.3
	cvs-200308171200:1.1.1.3
	ctm-3496:1.1.1.3
	ctm-3449:1.1.1.3
	ctm-3437:1.1.1.3
	cvs-200307191805:1.1.1.3
	ctm-3425:1.1.1.3
	cvs-200307091500:1.1.1.3
	cvs-200307072125:1.1.1.3
	ctm-3389:1.1.1.3
	cvs-200306291430:1.1.1.3
	ctm-3341:1.1.1.2
	MIRBSD_5:1.1.1.2
	cvs-200306082100:1.1.1.2
	ctm-3316:1.1.1.2
	ctm-3272:1.1.1.1
	ctm-3264:1.1.1.1
	cvs-200305071630:1.1.1.1
	MIRBSD_4:1.1.1.1
	ctm-3203:1.1.1.1
	cvs-20030410-1130:1.1.1.1
	ctm-3155:1.1.1.1
	ctm-3132:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.2
date	2004.01.10.04.56.50;	author tg;	state Stab;
branches;
next	1.1;

1.1
date	2003.03.22.17.48.00;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.03.22.17.48.00;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2003.06.05.17.29.28;	author tg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2003.06.29.17.25.50;	author tg;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Jumbo patch from wbx@@ to replace the
bcopy(3), bcmp(3) and bzero(3) func-
tions, having been deprecated earli-
er, by their ISO counterparts, name-
ly memmove(3) and the gcc3-optimized
memcmp(3) and memset(3) functions.

I didn't read every single line (be-
cause of the time of day), but looks
fine and builds through. I just nee-
ded to nuke three cases of whitespa-
ce at EOL. Good work wbx@@.

I've also sprinkled in a few patches
of mine addressing the issue that in
some kernel header files, bcopy() is
used as well... also there have been
quite some string cleaning fixes and
a missing header.
@
text
@/*	$OpenBSD: getline.c,v 1.15 2003/06/28 01:04:57 deraadt Exp $ */

/*
 * Copyright (c) 1985, 1988 Regents of the University of California.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *  @@(#)ftpcmd.y    5.24 (Berkeley) 2/25/91
 */

#include <sys/types.h>
#include <sys/socket.h>

#include <netinet/in.h>
#include <arpa/telnet.h>

#include <errno.h>
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <sysexits.h>
#include <syslog.h>
#include <unistd.h>

#include "util.h"

int		refill_buffer(struct csiob *iobp);

/*
 * Refill the io buffer if we KNOW that data is available
 *
 * Returns 1 if any new data was obtained, 0 otherwise.
 */

int
refill_buffer(struct csiob *iobp)
{
	int rqlen, rlen;

	if (!(iobp->data_available))
		return(0);

	if (iobp->got_eof)
		return(0);

	/*
	 * The buffer has been entirely consumed if next_byte == io_buffer_len.
	 * Otherwise, there is some still-to-be-used data in io_buffer.
	 * Shuffle it to the start of the buffer.
	 * Note that next_byte will never exceed io_buffer_len.
	 * Also, note that we MUST use bcopy because the two regions could
	 * overlap (memcpy isn't defined to work properly with overlapping
	 * regions).
	 */
	if (iobp->next_byte < iobp->io_buffer_len) {
		int dst_ix = 0;
		int src_ix = iobp->next_byte;
		int amount = iobp->io_buffer_len - iobp->next_byte;

		memmove(&iobp->io_buffer[dst_ix], &iobp->io_buffer[src_ix], amount);
		iobp->io_buffer_len = amount;
	} else if (iobp->next_byte == iobp->io_buffer_len)
		iobp->io_buffer_len = 0;
	else {
		syslog(LOG_ERR, "next_byte(%d) > io_buffer_len(%d)",
		    iobp->next_byte, iobp->io_buffer_len);
		exit(EX_OSERR);
	}

	iobp->next_byte = 0;

	/* don't do tiny reads, grow first if we need to */
	rqlen = iobp->io_buffer_size - iobp->io_buffer_len;
	if (rqlen <= 128) {
		char *tmp;

		iobp->io_buffer_size += 128;
		tmp = realloc(iobp->io_buffer, iobp->io_buffer_size);
		if (tmp == NULL) {
			syslog(LOG_INFO, "Insufficient memory");
			exit(EX_UNAVAILABLE);
		}
		iobp->io_buffer = tmp;
		rqlen = iobp->io_buffer_size - iobp->io_buffer_len;
	}

	/*
	 * Always leave an unused byte at the end of the buffer
	 * because the debug output uses that byte from time to time
	 * to ensure that something that is being printed is \0 terminated.
	 */
	rqlen -= 1;

 doread:
	rlen = read(iobp->fd, &iobp->io_buffer[iobp->io_buffer_len], rqlen);
	iobp->data_available = 0;
	switch (rlen) {
	case -1:
		if (errno == EAGAIN || errno == EINTR)
			goto doread;
		if (errno != ECONNRESET) {
			syslog(LOG_INFO, "read() failed on socket from %s (%m)",
			    iobp->who);
			exit(EX_DATAERR);
		}
		/* fall through to EOF case */
	case 0:
		iobp->got_eof = 1;
		return(0);
		break;
	default:
		iobp->io_buffer_len += rlen;
		break;
	}
	return(1);
}

/*
 * telnet_getline - a hacked up version of fgets to ignore TELNET escape codes.
 *
 * This code is derived from the getline routine found in the UC Berkeley
 * ftpd code.
 *
 */

int
telnet_getline(struct csiob *iobp, struct csiob *telnet_passthrough)
{
	unsigned char ch;
	int ix;
	char tbuf[100];

	iobp->line_buffer[0] = '\0';

	/*
	 * If the buffer is empty then refill it right away.
	 */
	if (iobp->next_byte == iobp->io_buffer_len)
		if (!refill_buffer(iobp))
			return(0);

	/*
	 * Is there a telnet command in the buffer?
	 */
	ch = iobp->io_buffer[iobp->next_byte];
	if (ch == IAC) {
		/*
		 * Yes - buffer must have at least three bytes in it
		 */
		if (iobp->io_buffer_len - iobp->next_byte < 3) {
			if (!refill_buffer(iobp))
				return(0);
			if (iobp->io_buffer_len - iobp->next_byte < 3)
				return(0);
		}

		iobp->next_byte++;
		ch = iobp->io_buffer[iobp->next_byte++];

		switch (ch) {
		case WILL:
		case WONT:
		case DO:
		case DONT:
			tbuf[0] = IAC;
			tbuf[1] = ch;
			tbuf[2] = iobp->io_buffer[iobp->next_byte++];
			(void)send(telnet_passthrough->fd, tbuf, 3,
			    telnet_passthrough->send_oob_flags);
			break;
		case IAC:
			break;
		default:
			break;
		}
		return(1);
	} else {
		int clen;

		/*
		 * Is there a newline in the buffer?
		 */
		for (ix = iobp->next_byte; ix < iobp->io_buffer_len;
		    ix += 1) {
			if (iobp->io_buffer[ix] == '\n')
				break;
			if (iobp->io_buffer[ix] == '\0') {
				syslog(LOG_INFO,
				    "got NUL byte from %s - bye!",
				    iobp->who);
				exit(EX_DATAERR);
			}
		}

		if (ix == iobp->io_buffer_len) {
			if (!refill_buffer(iobp))
				return(0);
			/*
			 * Empty line returned
			 * will try again soon!
			 */
			return(1);
		}

		/*
		 * Expand the line buffer if it isn't big enough.  We
		 * use a fudge factor of 5 rather than trying to
		 * figure out exactly how to account for the '\0 \r\n' and
		 * such.  The correct fudge factor is 0, 1 or 2 but
		 * anything higher also works. We also grow it by a
		 * bunch to avoid having to do this often. Yes this is
		 * nasty.
		 */
		if (ix - iobp->next_byte > iobp->line_buffer_size - 5) {
			char *tmp;

			iobp->line_buffer_size = 256 + ix - iobp->next_byte;
			tmp = realloc(iobp->line_buffer,
			    iobp->line_buffer_size);
			if (tmp == NULL) {
				syslog(LOG_INFO, "Insufficient memory");
				exit(EX_UNAVAILABLE);
			}
			iobp->line_buffer = tmp;
		}

		/* +1 is for the newline */
		clen = (ix+1) - iobp->next_byte;
		memcpy(iobp->line_buffer, &iobp->io_buffer[iobp->next_byte],
		    clen);
		iobp->next_byte += clen;
		iobp->line_buffer[clen] = '\0';
		return(1);
	}
}
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$OpenBSD: getline.c,v 1.13 2003/01/26 19:29:45 couderc Exp $ */
d15 1
a15 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *  This product includes software developed by the University of
 *  California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
d50 2
d83 1
a83 2
		bcopy(&iobp->io_buffer[src_ix], &iobp->io_buffer[dst_ix],
		    amount);
@


1.1.1.1
log
@Import OpenBSD 3.3 source repository from CTM 3132 the first time
This opens an OpenBSD-mirabile (aka MirBSD) repository.

### MirBSD is:
# Copyright (c) 1982-2003 by Thorsten "mirabile" Glaser <x86@@ePost.de>
# Copyright © 1968-2003  The authors of And contributors to UNIX®, the
#       C Language, BSD/Berkeley Unix; 386BSD, NetBSD 1.1 and OpenBSD.
#
# Anyone who obtained a copy of this work is hereby permitted to freely use,
# distribute, modify, merge, sublicence, give away or sell it as long as the
# authors are given due credit and the following notice is retained:
#
# This work is provided "as is", with no explicit or implicit warranty what-
# soever. Use it only at your own risk. In no event may an author or contri-
# butor be held liable for any damage, directly or indirectly, that origina-
# ted through or is caused by creation or modification of this work.

MirBSD is my private tree. MirBSD does not differ very much from OpenBSD
and intentionally tracks OpenBSD. That's why it _is_ OpenBSD, just not the
official one. It's like with DarrenBSD.

At time of this writing, no advertising for MirBSD must be done,
because the advertising clause has not yet been sorted out.

http://templeofhate.com/tglaser/MirBSD/index.php
@
text
@@


1.1.1.2
log
@Import latest OpenBSD CVS tree by CTM in order
to sync the base system and ports tree with Them.

This includes the recent licence changes as well - by
importing the changed base and re-applying the diffs
(with cvs up -j -j) they are inherited, and we're not
bound to the removed clauses any longer.
@
text
@d1 1
a1 1
/*	$OpenBSD: getline.c,v 1.14 2003/06/02 19:38:24 millert Exp $ */
d15 5
a19 1
 * 3. Neither the name of the University nor the names of its contributors
@


1.1.1.3
log
@the previous cvs import did not finish due to 'memory fault'
sync with OpenBSD-cvs
@
text
@d1 1
a1 1
/*	$OpenBSD: getline.c,v 1.15 2003/06/28 01:04:57 deraadt Exp $ */
a48 2

int		refill_buffer(struct csiob *iobp);
@


