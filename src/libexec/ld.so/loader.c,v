head	1.6;
access;
symbols
	tg-mergetmp-mirosx-1:1.6
	tg-mergefixes-1-branch:1.6.0.4
	tg-mergefixes-1-base:1.6
	MIROS_X:1.6.0.2
	MIROS_X_BASE:1.6
	tg-mergetmp-3:1.6
	cvs-200412031430:1.1.1.11
	MIRBSD_XP_MIRPPC:1.5.0.4
	cvs-200410171015:1.1.1.11
	cvs-200410141645:1.1.1.11
	MIRBSD_XP_SPARC_BASE:1.5
	MIRBSD_XP_SPARC:1.5.0.2
	MIRBSD_7quater:1.1.1.9
	cvs-200405160640:1.1.1.10
	cvs-200401271800:1.1.1.9
	cvs-200401261630:1.1.1.9
	cvs-200401021645:1.1.1.9
	MIRBSD_7_ALPHA:1.1.1.9.0.6
	MIRBSD_7:1.1.1.9.0.4
	cvs-200312222040:1.1.1.9
	MIRBSD_7ter:1.1.1.9
	MIRBSD_7_DEV:1.1.1.9.0.2
	cvs-200310081815:1.1.1.9
	cvs-200310040000:1.1.1.8
	cvs-200310020700:1.1.1.7
	cvs-200309271030:1.1.1.7
	cvs-200309261610:1.1.1.7
	cvs-200309251530:1.1.1.7
	cvs-200308302005:1.1.1.6
	cvs-200308171200:1.1.1.6
	ctm-3496:1.1.1.6
	ctm-3449:1.1.1.6
	ctm-3437:1.1.1.6
	cvs-200307191805:1.1.1.6
	ctm-3425:1.1.1.6
	cvs-200307091500:1.1.1.5
	cvs-200307072125:1.1.1.5
	ctm-3389:1.1.1.4
	cvs-200307021520:1.1.1.4
	cvs-200306291430:1.1.1.4
	ctm-3341:1.1.1.3
	MIRBSD_5:1.1.1.2
	cvs-200306082100:1.1.1.2
	ctm-3316:1.1.1.2
	ctm-3272:1.1.1.1
	ctm-3264:1.1.1.1
	cvs-200305071630:1.1.1.1
	ctm-3255:1.1.1.1
	ctm-3229:1.1.1.1
	MIRBSD_4:1.1
	ctm-3203:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.6
date	2004.10.14.19.43.05;	author tg;	state Exp;
branches;
next	1.5;

1.5
date	2004.09.17.20.16.41;	author tg;	state Exp;
branches;
next	1.4;

1.4
date	2004.05.23.16.09.49;	author tg;	state Stab;
branches;
next	1.3;

1.3
date	2004.01.23.23.59.30;	author tg;	state Exp;
branches;
next	1.2;

1.2
date	2003.11.27.22.37.33;	author tg;	state Exp;
branches;
next	1.1;

1.1
date	2003.03.27.14.19.03;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.04.15.17.35.51;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2003.06.05.17.29.31;	author tg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2003.06.19.12.41.18;	author tg;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2003.06.29.17.25.53;	author tg;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2003.07.07.21.27.31;	author tg;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2003.07.18.13.40.54;	author tg;	state Exp;
branches;
next	1.1.1.7;

1.1.1.7
date	2003.09.25.16.31.24;	author tg;	state Exp;
branches;
next	1.1.1.8;

1.1.1.8
date	2003.10.04.00.12.01;	author tg;	state Exp;
branches;
next	1.1.1.9;

1.1.1.9
date	2003.10.08.18.16.03;	author tg;	state Exp;
branches;
next	1.1.1.10;

1.1.1.10
date	2004.05.16.08.16.25;	author tg;	state Exp;
branches;
next	1.1.1.11;

1.1.1.11
date	2004.10.14.17.15.45;	author tg;	state Exp;
branches;
next	;


desc
@@


1.6
log
@merge
-Wall -Werror clean
@
text
@/**	$MirBSD: src/libexec/ld.so/loader.c,v 1.5 2004/09/17 20:16:41 tg Exp $	*/
/*	$OpenBSD: loader.c,v 1.83 2004/08/11 17:13:10 pefo Exp $ */

/*
 * Copyright (c) 1998 Per Fogelstrom, Opsycon AB
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS
 * OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 */

#define	_DYN_LOADER

#include <sys/param.h>
#include <sys/mman.h>
#include <sys/exec.h>
#include <sys/sysctl.h>
#include <nlist.h>
#include <string.h>
#include <link.h>
#include <dlfcn.h>

#include "syscall.h"
#include "archdep.h"
#include "resolve.h"
#include "sod.h"
#include "stdlib.h"

__RCSID("$MirBSD$");

/*
 * Local decls.
 */
static char *_dl_getenv(const char *, char **);
static void _dl_unsetenv(const char *, char **);
unsigned long _dl_boot(const char **, char **, const long, long *);
void _dl_debug_state(void);
void _dl_setup_env(char **);
void _dl_dtors(void);
void _dl_boot_bind(const long, long *, Elf_Dyn *);
void _dl_fixup_user_env(void);

const char *_dl_progname;
int  _dl_pagesz;

char *_dl_libpath;
char *_dl_preload;
char *_dl_bindnow;
char *_dl_traceld;
char *_dl_debug;
char *_dl_showmap;
char *_dl_norandom;

struct r_debug *_dl_debug_map;

void _dl_dopreload(char *paths);

void
_dl_debug_state(void)
{
	/* Debugger stub */
}

/*
 * Routine to walk through all of the objects except the first
 * (main executable).
 */
void
_dl_run_dtors(elf_object_t *object)
{
	if (object->dyn.fini) {
		DL_DEB(("doing dtors @@%p: [%s]\n",
		    object->dyn.fini, object->load_name));
		(*object->dyn.fini)();
	}
	if (object->next)
		_dl_run_dtors(object->next);
}

void
_dl_dtors(void)
{
	DL_DEB(("doing dtors\n"));
	if (_dl_objects->next)
		_dl_run_dtors(_dl_objects->next);
}

void
_dl_dopreload(char *paths)
{
	char		*cp, *dp;
	elf_object_t	*shlib;

	dp = paths = _dl_strdup(paths);
	if (dp == NULL) {
		_dl_printf("preload: out of memory");
		_dl_exit(1);
	}

	while ((cp = _dl_strsep(&dp, ":")) != NULL) {
		shlib = _dl_load_shlib(cp, _dl_objects, OBJTYPE_LIB,
		DL_LAZY|RTLD_GLOBAL);
		if (shlib == NULL) {
			_dl_printf("%s: can't load library '%s'\n",
			    _dl_progname, cp);
			_dl_exit(4);
		}
		_dl_add_object(shlib);
		_dl_link_sub(shlib, _dl_objects);
	}
	_dl_free(paths);
	return;
}

/*
 * grab interesting environment variables, zap bad env vars if
 * issetugid
 */
char **_dl_so_envp;
void
_dl_setup_env(char **envp)
{
	/*
	 * Get paths to various things we are going to use.
	 */
	_dl_libpath = _dl_getenv("LD_LIBRARY_PATH", envp);
	_dl_preload = _dl_getenv("LD_PRELOAD", envp);
	_dl_bindnow = _dl_getenv("LD_BIND_NOW", envp);
	_dl_traceld = _dl_getenv("LD_TRACE_LOADED_OBJECTS", envp);
	_dl_debug = _dl_getenv("LD_DEBUG", envp);
	_dl_norandom = _dl_getenv("LD_NORANDOM", envp);

	/*
	 * Don't allow someone to change the search paths if he runs
	 * a suid program without credentials high enough.
	 */
	if (_dl_issetugid()) {	/* Zap paths if s[ug]id... */
		if (_dl_libpath) {
			_dl_libpath = NULL;
			_dl_unsetenv("LD_LIBRARY_PATH", envp);
		}
		if (_dl_preload) {
			_dl_preload = NULL;
			_dl_unsetenv("LD_PRELOAD", envp);
		}
		if (_dl_bindnow) {
			_dl_bindnow = NULL;
			_dl_unsetenv("LD_BIND_NOW", envp);
		}
		if (_dl_debug) {
			_dl_debug = NULL;
			_dl_unsetenv("LD_DEBUG", envp);
		}
		if (_dl_norandom) {
			_dl_norandom = NULL;
			_dl_unsetenv("LD_NORANDOM", envp);
		}
	}
	_dl_so_envp = envp;
}

/*
 * This is the dynamic loader entrypoint. When entering here, depending
 * on architecture type, the stack and registers are set up according
 * to the architectures ABI specification. The first thing required
 * to do is to dig out all information we need to accomplish our task.
 */
unsigned long
_dl_boot(const char **argv, char **envp, const long loff, long *dl_data)
{
	struct elf_object *exe_obj;	/* Pointer to executable object */
	struct elf_object *dyn_obj;	/* Pointer to executable object */
	struct r_debug **map_link;	/* Where to put pointer for gdb */
	struct r_debug *debug_map;
	Elf_Dyn *dynp;
	elf_object_t *dynobj;
	Elf_Phdr *phdp;
	char *us = "";
	unsigned int i;
	int libcnt = 0;

	_dl_setup_env(envp);

	_dl_progname = argv[0];
	if (dl_data[AUX_pagesz] != 0)
		_dl_pagesz = dl_data[AUX_pagesz];
	else
		_dl_pagesz = 4096;

	/*
	 * now that GOT and PLT has been relocated, and we know
	 * page size, protect it from modification
	 */
	{
		extern char *__got_start;
		extern char *__got_end;
#ifdef RTLD_PROTECT_PLT
		extern char *__plt_start;
		extern char *__plt_end;
#endif

		_dl_mprotect((void *)ELF_TRUNC((long)&__got_start, _dl_pagesz),
		    ELF_ROUND((long)&__got_end,_dl_pagesz) -
		    ELF_TRUNC((long)&__got_start, _dl_pagesz),
		    GOT_PERMS);

#ifdef RTLD_PROTECT_PLT
		/* only for DATA_PLT or BSS_PLT */
		_dl_mprotect((void *)ELF_TRUNC((long)&__plt_start, _dl_pagesz),
		    ELF_ROUND((long)&__plt_end,_dl_pagesz) -
		    ELF_TRUNC((long)&__plt_start, _dl_pagesz),
		    PROT_READ|PROT_EXEC);
#endif
	}

	DL_DEB(("rtld loading: '%s'\n", _dl_progname));

	exe_obj = NULL;
	/*
	 * Examine the user application and set up object information.
	 */
	phdp = (Elf_Phdr *)dl_data[AUX_phdr];
	for (i = 0; i < dl_data[AUX_phnum]; i++) {
		if (phdp->p_type == PT_DYNAMIC) {
			exe_obj = _dl_finalize_object(argv[0],
			    (Elf_Dyn *)phdp->p_vaddr, dl_data, OBJTYPE_EXE,
			    0, 0);
			_dl_add_object(exe_obj);
		} else if (phdp->p_type == PT_INTERP) {
			us = _dl_strdup((char *)phdp->p_vaddr);
		}
		phdp++;
	}

	if (_dl_preload != NULL)
		_dl_dopreload(_dl_preload);

	/*
	 * Now, pick up and 'load' all libraries required. Start
	 * with the first on the list and then do whatever gets
	 * added along the tour.
	 */
	dynobj = _dl_objects;
	for (dynobj = _dl_objects; dynobj != NULL; dynobj = dynobj->next) {
		DL_DEB(("examining: '%s'\n", dynobj->load_name));
		libcnt = 0;
		for (dynp = dynobj->load_dyn; dynp->d_tag; dynp++) {
			if (dynp->d_tag == DT_NEEDED) {
				libcnt++;
			}
		}
		if ( libcnt != 0) {
			struct listent {
				Elf_Dyn *dynp;
				elf_object_t *dynobj;
			} *liblist;
			int *randomlist;

			liblist = _dl_malloc(libcnt * sizeof(struct listent));
			randomlist =  _dl_malloc(libcnt * sizeof(int));
			if (liblist == NULL)
				_dl_exit(5);

			for (dynp = dynobj->load_dyn, i = 0;
			    dynp->d_tag;
			    dynp++) {
				if (dynp->d_tag == DT_NEEDED) {
					liblist[i++].dynp = dynp;
				}

			}
			/* Randomize these */
			for (i = 0; i < libcnt; i++)
				randomlist[i] = i;

			if (!_dl_norandom)
				for (i = 1; i < libcnt; i++) {
					unsigned int rnd;
					int cur;

					rnd = _dl_random();

					rnd = rnd % (i+1);

					cur = randomlist[rnd];
					randomlist[rnd] = randomlist[i];
					randomlist[i] = cur;
				}

			for (i = 0; i < libcnt; i++) {
				elf_object_t *depobj;
				const char *libname;

				libname = dynobj->dyn.strtab;
				libname +=
				    liblist[randomlist[i]].dynp->d_un.d_val;
				DL_DEB(("needs: '%s'\n", libname));
				depobj = _dl_load_shlib(libname, dynobj,
				    OBJTYPE_LIB, DL_LAZY|RTLD_GLOBAL);
				if (depobj == 0) {
					_dl_printf(
					    "%s: can't load library '%s'\n",
					    _dl_progname, libname);
					_dl_exit(4);
				}
				liblist[randomlist[i]].dynobj = depobj;
			}
			for (i = 0; i < libcnt; i++) {
				_dl_add_object(liblist[i].dynobj);
				_dl_link_sub(liblist[i].dynobj, dynobj);
			}
			_dl_free(liblist);
		}
	}

	/*
	 * Now add the dynamic loader itself last in the object list
	 * so we can use the _dl_ code when serving dl.... calls.
	 */
	dynp = (Elf_Dyn *)((void *)_DYNAMIC);
	dyn_obj = _dl_finalize_object(us, dynp, 0, OBJTYPE_LDR,
	    dl_data[AUX_base], loff);
	_dl_add_object(dyn_obj);
	dyn_obj->status |= STAT_RELOC_DONE;

	/*
	 * Everything should be in place now for doing the relocation
	 * and binding. Call _dl_rtld to do the job. Fingers crossed.
	 */
	if (_dl_traceld == NULL)
		_dl_rtld(_dl_objects);

	if (_dl_debug || _dl_traceld)
		_dl_show_objects();

	DL_DEB(("dynamic loading done.\n"));

	if (_dl_traceld)
		_dl_exit(0);

	_dl_fixup_user_env();

	/*
	 * Finally make something to help gdb when poking around in the code.
	 */
#ifdef __mips__
	map_link = (struct r_debug **)(exe_obj->Dyn.info[DT_MIPS_RLD_MAP -
	    DT_LOPROC + DT_NUM]);
#else
	map_link = NULL;
	for (dynp = exe_obj->load_dyn; dynp->d_tag; dynp++) {
		if (dynp->d_tag == DT_DEBUG) {
			map_link = (struct r_debug **)&dynp->d_un.d_ptr;
			break;
		}
	}
	if (dynp->d_tag != DT_DEBUG)
		DL_DEB(("failed to mark DTDEBUG\n"));
#endif
	if (map_link) {
		debug_map = (struct r_debug *)_dl_malloc(sizeof(*debug_map));
		debug_map->r_version = 1;
		debug_map->r_map = (struct link_map *)_dl_objects;
		debug_map->r_brk = (Elf_Addr)_dl_debug_state;
		debug_map->r_state = RT_CONSISTENT;
		debug_map->r_ldbase = loff;
		_dl_debug_map = debug_map;
		*map_link = _dl_debug_map;
	}

	_dl_debug_state();

	/*
	 * The first object is the executable itself,
	 * it is responsible for running it's own ctors/dtors
	 * thus do NOT run the ctors for the executable, all of
	 * the shared libraries which follow.
	 * Do not run init code if run from ldd.
	 */
	if (_dl_objects->next != NULL) {
		_dl_objects->status |= STAT_INIT_DONE;
		_dl_call_init(_dl_objects);
	}

	/*
	 * Schedule a routine to be run at shutdown, by using atexit.
	 * Cannot call atexit directly from ld.so?
	 * Do not schedule destructors if run from ldd.
	 */
	{
		const elf_object_t *sobj;
		const Elf_Sym *sym;
		Elf_Addr ooff;

		sym = NULL;
		ooff = _dl_find_symbol("atexit", _dl_objects, &sym, &sobj,
		    SYM_SEARCH_ALL|SYM_NOWARNNOTFOUND|SYM_PLT, 0, dyn_obj);
		if (sym == NULL)
			_dl_printf("cannot find atexit, destructors will not be run!\n");
		else
#ifdef MD_ATEXIT
			MD_ATEXIT(sobj, sym, (Elf_Addr)&_dl_dtors);
#else
			(*(void (*)(Elf_Addr))(sym->st_value + ooff))
			    ((Elf_Addr)_dl_dtors);
#endif
	}

	DL_DEB(("entry point: 0x%lx\n", dl_data[AUX_entry]));

	/*
	 * Return the entry point.
	 */
	return(dl_data[AUX_entry]);
}

void
_dl_boot_bind(const long sp, long *dl_data, Elf_Dyn *dynamicp)
{
	struct elf_object  dynld;	/* Resolver data for the loader */
	AuxInfo		*auxstack;
	long		*stack;
	Elf_Dyn		*dynp;
	int		n, argc;
	char **argv, **envp;
	long loff;

	/*
	 * Scan argument and environment vectors. Find dynamic
	 * data vector put after them.
	 */
	stack = (long *)sp;
	argc = *stack++;
	argv = (char **)stack;
	envp = &argv[argc + 1];
	stack = (long *)envp;
	while (*stack++ != (long)NULL)
		;

	/*
	 * Zero out dl_data.
	 */
	for (n = 0; n < AUX_entry; n++)
		dl_data[n] = 0;

	/*
	 * Dig out auxiliary data set up by exec call. Move all known
	 * tags to an indexed local table for easy access.
	 */
	for (auxstack = (AuxInfo *)stack; auxstack->au_id != AUX_null;
	    auxstack++) {
		if (auxstack->au_id > AUX_entry)
			continue;
		dl_data[auxstack->au_id] = auxstack->au_v;
	}
	loff = dl_data[AUX_base];	/* XXX assumes linked at 0x0 */

	/*
	 * We need to do 'selfreloc' in case the code weren't
	 * loaded at the address it was linked to.
	 *
	 * Scan the DYNAMIC section for the loader.
	 * Cache the data for easier access.
	 */

#if defined(__alpha__)
	dynp = (Elf_Dyn *)((long)_DYNAMIC);
#elif defined(__sparc__) || defined(__sparc64__) || defined(__powerpc__) || \
    defined(__hppa__)
	dynp = dynamicp;
#else
	dynp = (Elf_Dyn *)((long)_DYNAMIC + loff);
#endif
	while (dynp != NULL && dynp->d_tag != DT_NULL) {
		if (dynp->d_tag < DT_NUM)
			dynld.Dyn.info[dynp->d_tag] = dynp->d_un.d_val;
		else if (dynp->d_tag >= DT_LOPROC &&
		    dynp->d_tag < DT_LOPROC + DT_PROCNUM)
			dynld.Dyn.info[dynp->d_tag - DT_LOPROC + DT_NUM] =
			    dynp->d_un.d_val;
		if (dynp->d_tag == DT_TEXTREL)
			dynld.dyn.textrel = 1;
		dynp++;
	}

	/*
	 * Do the 'bootstrap relocation'. This is really only needed if
	 * the code was loaded at another location than it was linked to.
	 * We don't do undefined symbols resolving (to difficult..)
	 */

	/* "relocate" dyn.X values if they represent addresses */
	{
		int i, val;
		/* must be code, not pic data */
		int table[20];

		i = 0;
		table[i++] = DT_PLTGOT;
		table[i++] = DT_HASH;
		table[i++] = DT_STRTAB;
		table[i++] = DT_SYMTAB;
		table[i++] = DT_RELA;
		table[i++] = DT_INIT;
		table[i++] = DT_FINI;
		table[i++] = DT_REL;
		table[i++] = DT_JMPREL;
		/* other processors insert their extras here */
		table[i++] = DT_NULL;
		for (i = 0; table[i] != DT_NULL; i++) {
			val = table[i];
			if (val > DT_HIPROC) /* ??? */
				continue;
			if (val > DT_LOPROC)
				val -= DT_LOPROC + DT_NUM;
			if (dynld.Dyn.info[val] != 0)
				dynld.Dyn.info[val] += loff;
		}
	}

	{
		u_int32_t rs;
		Elf_Rel *rp;
		int	i;

		rp = (Elf_Rel *)(dynld.Dyn.info[DT_REL]);
		rs = dynld.dyn.relsz;

		for (i = 0; i < rs; i += sizeof (Elf_Rel)) {
			Elf_Addr *ra;
			const Elf_Sym *sp;

			sp = dynld.dyn.symtab;
			sp += ELF_R_SYM(rp->r_info);

			if (ELF_R_SYM(rp->r_info) && sp->st_value == 0) {
#if 0
/* cannot printf in this function */
				_dl_wrstderr("Dynamic loader failure: self bootstrapping impossible.\n");
				_dl_wrstderr("Undefined symbol: ");
				_dl_wrstderr((char *)dynld.dyn.strtab +
				    sp->st_name);
#endif
				_dl_exit(5);
			}

			ra = (Elf_Addr *)(rp->r_offset + loff);
			RELOC_REL(rp, sp, ra, loff);
			rp++;
		}
	}

	for (n = 0; n < 2; n++) {
		unsigned long rs;
		Elf_RelA *rp;
		int	i;

		switch (n) {
		case 0:
			rp = (Elf_RelA *)(dynld.Dyn.info[DT_JMPREL]);
			rs = dynld.dyn.pltrelsz;
			break;
		case 1:
			rp = (Elf_RelA *)(dynld.Dyn.info[DT_RELA]);
			rs = dynld.dyn.relasz;
			break;
		default:
			rp = NULL;
			rs = 0;
		}
		for (i = 0; i < rs; i += sizeof (Elf_RelA)) {
			Elf_Addr *ra;
			const Elf_Sym *sp;

			sp = dynld.dyn.symtab;
			sp += ELF_R_SYM(rp->r_info);
			if (ELF_R_SYM(rp->r_info) && sp->st_value == 0) {
#if 0
				_dl_wrstderr("Dynamic loader failure: self bootstrapping impossible.\n");
				_dl_wrstderr("Undefined symbol: ");
				_dl_wrstderr((char *)dynld.dyn.strtab +
				    sp->st_name);
#endif
				_dl_exit(6);
			}

			ra = (Elf_Addr *)(rp->r_offset + loff);
			RELOC_RELA(rp, sp, ra, loff);
			rp++;
		}
	}

	RELOC_GOT(&dynld, loff);

	/*
	 * we have been fully relocated here, so most things no longer
	 * need the loff adjustment
	 */
}

#define DL_SM_SYMBUF_CNT 512
sym_cache _dl_sm_symcache_buffer[DL_SM_SYMBUF_CNT];

void
_dl_rtld(elf_object_t *object)
{
	size_t sz;
	if (object->next)
		_dl_rtld(object->next);

	if (object->status & STAT_RELOC_DONE)
		return;

	sz = 0;
	if (object->nchains < DL_SM_SYMBUF_CNT) {
		_dl_symcache = _dl_sm_symcache_buffer;
		DL_DEB(("using static buffer for %d entries\n",
		    object->nchains));
		_dl_memset(_dl_symcache, 0,
		    sizeof (sym_cache) * object->nchains);
	} else {
		sz = ELF_ROUND(sizeof (sym_cache) * object->nchains,
		    _dl_pagesz);
		DL_DEB(("allocating symcache sz %x with mmap\n", sz));

		_dl_symcache = (void *)_dl_mmap(0, sz, PROT_READ|PROT_WRITE,
		    MAP_PRIVATE|MAP_ANON, -1, 0);
		if (_dl_symcache == (void *)MAP_FAILED) {
			sz = 0;
			_dl_symcache = NULL;
		}
	}
	/*
	 * Do relocation information first, then GOT.
	 */
	_dl_md_reloc(object, DT_REL, DT_RELSZ);
	_dl_md_reloc(object, DT_RELA, DT_RELASZ);
	_dl_md_reloc_got(object, !(_dl_bindnow || object->dyn.bind_now));

	if (_dl_symcache != NULL) {
		if (sz != 0)
			_dl_munmap( _dl_symcache, sz);
		_dl_symcache = NULL;
	}
	object->status |= STAT_RELOC_DONE;
}

void
_dl_call_init(elf_object_t *object)
{
	struct dep_node *n;

	for (n = object->first_child; n; n = n->next_sibling) {
		if (n->data->status & STAT_INIT_DONE)
			continue;
		_dl_call_init(n->data);
	}

	if (object->status & STAT_INIT_DONE)
		return;

	if (object->dyn.init) {
		DL_DEB(("doing ctors @@%p: [%s]\n",
		    object->dyn.init, object->load_name));
		(*object->dyn.init)();
	}

	/* What about loops? */
	object->status |= STAT_INIT_DONE;
}

static char *
_dl_getenv(const char *var, char **env)
{
	const char *ep;

	while ((ep = *env++)) {
		const char *vp = var;

		while (*vp && *vp == *ep) {
			vp++;
			ep++;
		}
		if (*vp == '\0' && *ep++ == '=')
			return((char *)ep);
	}
	return(NULL);
}

static void
_dl_unsetenv(const char *var, char **env)
{
	char *ep;

	while ((ep = *env)) {
		const char *vp = var;

		while (*vp && *vp == *ep) {
			vp++;
			ep++;
		}
		if (*vp == '\0' && *ep++ == '=') {
			char **P;

			for (P = env;; ++P)
				if (!(*P = *(P + 1)))
					break;
		}
		env++;
	}
}

/*
 * _dl_fixup_user_env()
 *
 * Set the user environment so that programs can use the environment
 * while running constructors. Specifically, MALLOC_OPTIONS= for malloc()
 */
void
_dl_fixup_user_env(void)
{
	const Elf_Sym *sym;
	Elf_Addr ooff;
	struct elf_object dummy_obj;

	dummy_obj.dyn.symbolic = 0;
	dummy_obj.load_name = "ld.so";

	sym = NULL;
	ooff = _dl_find_symbol("environ", _dl_objects, &sym, NULL,
	    SYM_SEARCH_ALL|SYM_NOWARNNOTFOUND|SYM_PLT, 0, &dummy_obj);
	if (sym != NULL)
		*((char ***)(sym->st_value + ooff)) = _dl_so_envp;
}
@


1.5
log
@like a week of hard work.
* .cvsignore: add build.log
* X: remove unused code
* distrib: shrink floppy ramdisk until it fits, factor out some
  essentials (ping, netcat, hexdump, df, mknod, update, MBRmgr)
  into just another list
* disktab, conf/FLOPPY: in-kernel floppy image shrinks by 256 KiB
* distrib/lists: sync
* gcc: Ada now always disables -fstack-protector-all (not SSP in
  general); I learned it protects by itself
* ld.so, sed: gcc -fstack-protector-all mis-compiles some files
* bsd.own.mk: libbfd and libopcodes need a minor bump
* sys.mk, param.h, gcc version.c: bump MirOS version/patchlevel

I *hope* a make b-r "could" now succeed. I've done like 50 this week.
@
text
@d1 2
a2 2
/**	$MirBSD: src/libexec/ld.so/loader.c,v 1.4 2004/05/23 16:09:49 tg Stab $	*/
/*	$OpenBSD: loader.c,v 1.73 2004/02/23 20:47:39 drahn Exp $ */
d47 2
d89 3
a91 2
	DL_DEB(("doing dtors: [%s]\n", object->load_name));
	if (object->dyn.fini)
d93 1
d215 1
a215 1
#ifndef RTLD_TEXT_PLT
d225 1
a225 1
#ifndef RTLD_TEXT_PLT
a343 3
	if (_dl_traceld == NULL)
		_dl_fixup_user_env();

d351 4
a354 11
	/*
	 * The first object is the executable itself,
	 * it is responsible for running it's own ctors/dtors
	 * thus do NOT run the ctors for the executable, all of
	 * the shared libraries which follow.
	 * Do not run init code if run from ldd.
	 */
	if ((_dl_traceld == NULL) && (_dl_objects->next != NULL)) {
		_dl_objects->status |= STAT_INIT_DONE;
		_dl_call_init(_dl_objects);
	}
d356 2
a357 8
	/*
	 * Schedule a routine to be run at shutdown, by using atexit.
	 * Cannot call atexit directly from ld.so?
	 * Do not schedule destructors if run from ldd.
	 */
	if (_dl_traceld == NULL) {
		const Elf_Sym *sym;
		Elf_Addr ooff;
d359 1
a359 9
		sym = NULL;
		ooff = _dl_find_symbol("atexit", _dl_objects, &sym,
		    SYM_SEARCH_ALL|SYM_NOWARNNOTFOUND|SYM_PLT, 0, dyn_obj);
		if (sym == NULL)
			_dl_printf("cannot find atexit, destructors will not be run!\n");
		else
			(*(void (*)(Elf_Addr))(sym->st_value + ooff))
			    ((Elf_Addr)_dl_dtors);
	}
d391 34
a424 3
	if (_dl_debug || _dl_traceld) {
		_dl_show_objects();
		DL_DEB(("dynamic loading done.\n"));
a425 2
	if (_dl_traceld)
		_dl_exit(0);
d486 2
a487 1
#elif defined(__sparc__) || defined(__sparc64__) || defined(__powerpc__)
d680 3
a682 2
	DL_DEB(("doing ctors: [%s]\n", object->load_name));
	if (object->dyn.init)
d684 1
d748 1
a748 1
	ooff = _dl_find_symbol("environ", _dl_objects, &sym,
@


1.4
log
@a much easier merge:
* pull OpenBSD 3.5-current
* login_passwd needs not be SUID root, because we don't have YP
* regen Makefile
@
text
@d1 2
a2 2
/* $MirBSD: src/libexec/ld.so/loader.c,v 1.3 2004/01/23 23:59:30 tg Exp $	*/
/* $OpenBSD: loader.c,v 1.73 2004/02/23 20:47:39 drahn Exp $ */
d32 1
a32 1
#include <sys/types.h>
a34 1
#include <sys/param.h>
@


1.3
log
@* whitespace cleanup
* don't issue warnings about unable to resolve weak symbols
@
text
@d1 2
a2 2
/*	$MirBSD: loader.c,v 1.2 2003/11/27 22:37:33 tg Exp $	*/
/*	$OpenBSD: loader.c,v 1.70 2003/10/04 16:13:33 deraadt Exp $ */
d58 1
d134 1
d174 1
d212 1
a212 1
#ifndef __i386__
d222 1
a222 1
#ifndef __i386__
d341 3
d718 23
@


1.2
log
@make tree build through
add -Werror (but not -Wall) to lib/*
make most of libc compile with -Wall (stopped at regexp code... ugly)
bump version
@
text
@d1 1
a1 1
/*	$MirBSD$	*/
d644 1
a644 1
		if (sz != 0) 
@


1.1
log
@re-add a "not so important" directory that just went away
without telling me so.
It did even vanish from the CVS repository. I think, CVS
is buggy.
@
text
@d1 2
a2 1
/*	$OpenBSD: loader.c,v 1.55 2003/02/15 22:43:06 drahn Exp $ */
a14 6
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed under OpenBSD by
 *	Per Fogelstrom, Opsycon AB, Sweden.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
d35 2
d40 1
d46 1
d51 7
a57 2
static char *_dl_getenv(const char *var, char **env);
static void _dl_unsetenv(const char *var, char **env);
d68 1
d106 1
d115 3
a117 1
		if (_dl_load_shlib(cp, _dl_objects, OBJTYPE_LIB) == 0) {
d122 2
d130 2
a131 4
 * This is the dynamic loader entrypoint. When entering here, depending
 * on architecture type, the stack and registers are set up according
 * to the architectures ABI specification. The first thing required
 * to do is to dig out all information we need to accomplish our task.
d133 2
a134 2
unsigned long
_dl_boot(const char **argv, char **envp, const long loff, long *dl_data)
a135 10
	struct elf_object *exe_obj;	/* Pointer to executable object */
	struct elf_object *dyn_obj;	/* Pointer to executable object */
	struct r_debug **map_link;	/* Where to put pointer for gdb */
	struct r_debug *debug_map;
	Elf_Dyn *dynp;
	elf_object_t *dynobj;
	Elf_Phdr *phdp;
	char *us = "";
	int n;

d144 1
d167 4
d172 23
d203 2
a204 2
	 * now that GOT and PLT has been relocated, and we know page size 
	 * protect it from modification 
d216 1
a216 1
		        ELF_TRUNC((long)&__got_start, _dl_pagesz),
d223 1
a223 1
		        ELF_TRUNC((long)&__plt_start, _dl_pagesz),
a226 1
	
d235 1
a235 1
	for (n = 0; n < dl_data[AUX_phnum]; n++) {
d237 1
a237 1
			exe_obj = _dl_add_object(argv[0],
d240 1
d251 1
a251 1
	 * Now, pick up and 'load' all libraries requierd. Start
d256 1
a256 1
	while (dynobj) {
d258 1
d260 22
a281 1
			const char *libname;
a282 9
			if (dynp->d_tag != DT_NEEDED)
				continue;
			libname = dynobj->dyn.strtab;
			libname += dynp->d_un.d_val;
			DL_DEB(("needs: '%s'\n", libname));
			if (_dl_load_shlib(libname, dynobj, OBJTYPE_LIB) == 0) {
				_dl_printf("%s: can't load library '%s'\n",
				    _dl_progname, libname);
				_dl_exit(4);
d284 41
a325 1
		dynobj = dynobj->next;
d333 3
a335 1
	dyn_obj = _dl_add_object(us, dynp, 0, OBJTYPE_LDR, dl_data[AUX_base], loff);
d368 1
a368 1
		    SYM_SEARCH_ALL|SYM_NOWARNNOTFOUND|SYM_PLT, 0, "");
d414 1
d422 1
a422 1
_dl_boot_bind(const long sp, long *dl_data)
d441 1
a441 1
	while (*stack++ != NULL)
d472 2
d478 1
a478 1
		if (dynp->d_tag < DT_LOPROC)
d480 3
a482 2
		else if (dynp->d_tag >= DT_LOPROC && dynp->d_tag < DT_LOPROC + DT_NUM)
			dynld.Dyn.info[dynp->d_tag + DT_NUM - DT_LOPROC] =
d604 3
d610 1
d617 19
d642 6
d665 1
@


1.1.1.1
log
@Import OpenBSD source with the "new" command line as well,
in order to be able to provide a MirBSD release which bases
upon a fairly current OpenBSD base source code tree deemed
stable enough.
@
text
@@


1.1.1.2
log
@Import latest OpenBSD CVS tree by CTM in order
to sync the base system and ports tree with Them.

This includes the recent licence changes as well - by
importing the changed base and re-applying the diffs
(with cvs up -j -j) they are inherited, and we're not
bound to the removed clauses any longer.
@
text
@d1 1
a1 1
/*	$OpenBSD: loader.c,v 1.62 2003/06/03 18:04:08 drahn Exp $ */
a39 2
#include <sys/param.h>
#include <sys/sysctl.h>
a63 1
char *_dl_norandom;
a100 1
	elf_object_t	*shlib;
d109 1
a109 2
		shlib = _dl_load_shlib(cp, _dl_objects, OBJTYPE_LIB);
		if (shlib == NULL) {
a113 1
		_dl_link_sub(shlib, _dl_objects);
d120 4
a123 2
 * grab interesting environment variables, zap bad env vars if
 * issetugid
d125 12
a137 3
void
_dl_setup_env(char **envp)
{
a145 1
	_dl_norandom = _dl_getenv("LD_NORANDOM", envp);
a167 4
		if (_dl_norandom) {
			_dl_norandom = NULL;
			_dl_unsetenv("LD_NORANDOM", envp);
		}
a168 23
}

/*
 * This is the dynamic loader entrypoint. When entering here, depending
 * on architecture type, the stack and registers are set up according
 * to the architectures ABI specification. The first thing required
 * to do is to dig out all information we need to accomplish our task.
 */
unsigned long
_dl_boot(const char **argv, char **envp, const long loff, long *dl_data)
{
	struct elf_object *exe_obj;	/* Pointer to executable object */
	struct elf_object *dyn_obj;	/* Pointer to executable object */
	struct r_debug **map_link;	/* Where to put pointer for gdb */
	struct r_debug *debug_map;
	Elf_Dyn *dynp;
	elf_object_t *dynobj;
	Elf_Phdr *phdp;
	char *us = "";
	unsigned int i;
	int libcnt = 0;

	_dl_setup_env(envp);
d210 1
a210 1
	for (i = 0; i < dl_data[AUX_phnum]; i++) {
d230 1
a230 1
	for (dynobj = _dl_objects; dynobj != NULL; dynobj = dynobj->next) {
a231 1
		libcnt = 0;
d233 1
a233 22
			if (dynp->d_tag == DT_NEEDED) {
				libcnt++;
			}
		}
		if ( libcnt != 0) {
			struct listent {
				Elf_Dyn *dynp;
				elf_object_t *dynobj;
			} *liblist;
			int *randomlist;

			liblist = _dl_malloc(libcnt * sizeof(struct listent));
			randomlist =  _dl_malloc(libcnt * sizeof(int));
			if (liblist == NULL)
				_dl_exit(5);

			for (dynp = dynobj->load_dyn, i = 0;
			    dynp->d_tag;
			    dynp++) {
				if (dynp->d_tag == DT_NEEDED) {
					liblist[i++].dynp = dynp;
				}
d235 9
a244 42
			/* Randomize these */
			for (i = 0; i < libcnt; i++)
				randomlist[i] = i;

#ifdef NO_RANDOM_EXPOSES_BUGS_ELSEWHERE__
			if (!_dl_norandom)
				for (i = 1; i < libcnt; i++) {
					unsigned int rnd;
					int cur;

					rnd = _dl_random();

					rnd = rnd % (i+1);

					cur = randomlist[rnd];
					randomlist[rnd] = randomlist[i];
					randomlist[i] = cur;
				}
#endif /* NO_RANDOM_EXPOSES_BUGS_ELSEWHERE__ */

			for (i = 0; i < libcnt; i++) {
				elf_object_t *depobj;
				const char *libname;

				libname = dynobj->dyn.strtab;
				libname +=
				    liblist[randomlist[i]].dynp->d_un.d_val;
				DL_DEB(("needs: '%s'\n", libname));
				depobj = _dl_load_shlib(libname, dynobj,
				    OBJTYPE_LIB);
				if (depobj == 0) {
					_dl_printf(
					    "%s: can't load library '%s'\n",
					    _dl_progname, libname);
					_dl_exit(4);
				}
				liblist[i].dynobj = depobj;
			}
			for (i = 0; i < libcnt; i++) {
				_dl_link_sub(liblist[i].dynobj, dynobj);
			}
			_dl_free(liblist);
d246 1
d254 1
a254 2
	dyn_obj = _dl_add_object(us, dynp, 0, OBJTYPE_LDR, dl_data[AUX_base],
	    loff);
d394 1
a394 1
		if (dynp->d_tag < DT_NUM)
d396 2
a397 3
		else if (dynp->d_tag >= DT_LOPROC &&
		    dynp->d_tag < DT_LOPROC + DT_PROCNUM)
			dynld.Dyn.info[dynp->d_tag - DT_LOPROC + DT_NUM] =
@


1.1.1.3
log
@sync with OpenBSD, this gives us a fair amount of fixes
@
text
@d1 1
a1 1
/*	$OpenBSD: loader.c,v 1.63 2003/06/09 16:10:03 deraadt Exp $ */
d14 6
@


1.1.1.4
log
@the previous cvs import did not finish due to 'memory fault'
sync with OpenBSD-cvs
@
text
@d1 1
a1 1
/*	$OpenBSD: loader.c,v 1.64 2003/06/22 21:39:01 drahn Exp $ */
a112 1
		_dl_add_object(shlib);
d229 1
a229 1
			exe_obj = _dl_finalize_object(argv[0],
a231 1
			_dl_add_object(exe_obj);
d242 1
a242 1
	 * Now, pick up and 'load' all libraries required. Start
d279 1
d293 1
d311 1
a311 1
				liblist[randomlist[i]].dynobj = depobj;
a313 1
				_dl_add_object(liblist[i].dynobj);
d325 2
a326 3
	dyn_obj = _dl_finalize_object(us, dynp, 0, OBJTYPE_LDR,
	    dl_data[AUX_base], loff);
	_dl_add_object(dyn_obj);
a623 1
	DL_DEB(("doing ctors: [%s]\n", object->load_name));
@


1.1.1.5
log
@Sync some stuff with OpenBSD
@
text
@d1 1
a1 1
/*	$OpenBSD: loader.c,v 1.65 2003/07/06 20:03:57 deraadt Exp $ */
d48 2
a49 7
static char *_dl_getenv(const char *, char **);
static void _dl_unsetenv(const char *, char **);
unsigned long _dl_boot(const char **, char **, const long, long *);
void _dl_debug_state(void);
void _dl_setup_env(char **);
void _dl_dtors(void);
void _dl_boot_bind(const long, long *);
d124 1
d195 2
a196 2
	 * now that GOT and PLT has been relocated, and we know
	 * page size, protect it from modification
d208 1
a208 1
		    ELF_TRUNC((long)&__got_start, _dl_pagesz),
d215 1
a215 1
		    ELF_TRUNC((long)&__plt_start, _dl_pagesz),
d219 1
@


1.1.1.6
log
@Synchronize source tree with OpenBSD
note: due to recent changes in the codebase of OpenBSD,
out libcom_err will be incompatible with theirs...
but this is no issue because we don't provide a dynamically
linked one, and theirs won't be provided longer any more anyways.
@
text
@d1 1
a1 1
/*	$OpenBSD: loader.c,v 1.66 2003/07/09 21:01:10 drahn Exp $ */
d54 1
a54 1
void _dl_boot_bind(const long, long *, Elf_Dyn *);
d417 1
a417 1
_dl_boot_bind(const long sp, long *dl_data, Elf_Dyn *dynamicp)
a466 2
#elif defined(__sparc__) || defined(__sparc64__) || defined(__powerpc__)
	dynp = dynamicp;
@


1.1.1.7
log
@Release Time. Synchronize with OpenBSD 3.4-current (base system).
@
text
@d1 1
a1 1
/*	$OpenBSD: loader.c,v 1.68 2003/09/04 19:33:48 drahn Exp $ */
a38 1
#include <dlfcn.h>
a43 1
#include "stdlib.h"
d112 1
a112 2
		shlib = _dl_load_shlib(cp, _dl_objects, OBJTYPE_LIB,
		DL_LAZY|RTLD_GLOBAL);
d307 1
a307 1
				    OBJTYPE_LIB, DL_LAZY|RTLD_GLOBAL);
d364 1
a364 1
		    SYM_SEARCH_ALL|SYM_NOWARNNOTFOUND|SYM_PLT, 0, dyn_obj);
a409 1

a598 3
#define DL_SM_SYMBUF_CNT 512
sym_cache _dl_sm_symcache_buffer[DL_SM_SYMBUF_CNT];

a601 1
	size_t sz;
a607 19
	sz = 0;
	if (object->nchains < DL_SM_SYMBUF_CNT) {
		_dl_symcache = _dl_sm_symcache_buffer;
		DL_DEB(("using static buffer for %d entries\n",
		    object->nchains));
		_dl_memset(_dl_symcache, 0,
		    sizeof (sym_cache) * object->nchains);
	} else {
		sz = ELF_ROUND(sizeof (sym_cache) * object->nchains,
		    _dl_pagesz);
		DL_DEB(("allocating symcache sz %x with mmap\n", sz));

		_dl_symcache = (void *)_dl_mmap(0, sz, PROT_READ|PROT_WRITE,
		    MAP_PRIVATE|MAP_ANON, -1, 0);
		if (_dl_symcache == (void *)MAP_FAILED) {
			sz = 0;
			_dl_symcache = NULL;
		}
	}
a613 6

	if (_dl_symcache != NULL) {
		if (sz != 0) 
			_dl_munmap( _dl_symcache, sz);
		_dl_symcache = NULL;
	}
@


1.1.1.8
log
@cvs hates me
@
text
@d1 1
a1 1
/*	$OpenBSD: loader.c,v 1.69 2003/10/03 23:03:37 drahn Exp $ */
a351 11
		const Elf_Sym *sym;
		Elf_Addr ooff;

		sym = NULL;
		ooff = _dl_find_symbol("environ", _dl_objects, &sym,
		    SYM_SEARCH_ALL|SYM_NOWARNNOTFOUND|SYM_PLT, 0, dyn_obj);
		if (sym == NULL)
			_dl_printf("cannot find environ, env will not be set up for atexit!\n");
		else
			*((char ***)(sym->st_value + ooff)) = envp;

@


1.1.1.9
log
@ld.so fixes from OpenBSE
@
text
@d1 1
a1 1
/*	$OpenBSD: loader.c,v 1.70 2003/10/04 16:13:33 deraadt Exp $ */
d352 11
@


1.1.1.10
log
@large-scale import of OpenBSD 3.5-current source base including many fixes
note: from now, we will not be binary compatible with OpenBSD apps any
longer (due to syscall numbering differences); both an OpenBSD compat and
a conversion tool for old MirOS #7 apps will be delivered later.

The src/ tree is locked from now.
@
text
@d1 1
a1 1
/*	$OpenBSD: loader.c,v 1.73 2004/02/23 20:47:39 drahn Exp $ */
a56 1
void _dl_fixup_user_env(void);
a131 1
char **_dl_so_envp;
a170 1
	_dl_so_envp = envp;
d208 1
a208 1
#ifndef RTLD_TEXT_PLT
d218 1
a218 1
#ifndef RTLD_TEXT_PLT
a336 3
	if (_dl_traceld == NULL)
		_dl_fixup_user_env();

a710 23
}

/* 
 * _dl_fixup_user_env()
 * 
 * Set the user environment so that programs can use the environment
 * while running constructors. Specifically, MALLOC_OPTIONS= for malloc()
 */
void
_dl_fixup_user_env(void)
{
	const Elf_Sym *sym;
	Elf_Addr ooff;
	struct elf_object dummy_obj;

	dummy_obj.dyn.symbolic = 0;
	dummy_obj.load_name = "ld.so";

	sym = NULL;
	ooff = _dl_find_symbol("environ", _dl_objects, &sym,
	    SYM_SEARCH_ALL|SYM_NOWARNNOTFOUND|SYM_PLT, 0, &dummy_obj);
	if (sym != NULL)
		*((char ***)(sym->st_value + ooff)) = _dl_so_envp;
@


1.1.1.11
log
@pretty kawaii ld.so
@
text
@d1 1
a1 1
/*	$OpenBSD: loader.c,v 1.83 2004/08/11 17:13:10 pefo Exp $ */
d87 2
a88 3
	if (object->dyn.fini) {
		DL_DEB(("doing dtors @@%p: [%s]\n",
		    object->dyn.fini, object->load_name));
a89 1
	}
d211 1
a211 1
#ifdef RTLD_PROTECT_PLT
d221 1
a221 1
#ifdef RTLD_PROTECT_PLT
d340 3
d350 11
a360 2
	if (_dl_debug || _dl_traceld)
		_dl_show_objects();
d362 8
a369 1
	DL_DEB(("dynamic loading done.\n"));
d371 9
a379 4
	if (_dl_traceld)
		_dl_exit(0);

	_dl_fixup_user_env();
d411 3
a413 34
	/*
	 * The first object is the executable itself,
	 * it is responsible for running it's own ctors/dtors
	 * thus do NOT run the ctors for the executable, all of
	 * the shared libraries which follow.
	 * Do not run init code if run from ldd.
	 */
	if (_dl_objects->next != NULL) {
		_dl_objects->status |= STAT_INIT_DONE;
		_dl_call_init(_dl_objects);
	}

	/*
	 * Schedule a routine to be run at shutdown, by using atexit.
	 * Cannot call atexit directly from ld.so?
	 * Do not schedule destructors if run from ldd.
	 */
	{
		const elf_object_t *sobj;
		const Elf_Sym *sym;
		Elf_Addr ooff;

		sym = NULL;
		ooff = _dl_find_symbol("atexit", _dl_objects, &sym, &sobj,
		    SYM_SEARCH_ALL|SYM_NOWARNNOTFOUND|SYM_PLT, 0, dyn_obj);
		if (sym == NULL)
			_dl_printf("cannot find atexit, destructors will not be run!\n");
		else
#ifdef MD_ATEXIT
			MD_ATEXIT(sobj, sym, (Elf_Addr)&_dl_dtors);
#else
			(*(void (*)(Elf_Addr))(sym->st_value + ooff))
			    ((Elf_Addr)_dl_dtors);
#endif
d415 2
d477 1
a477 2
#elif defined(__sparc__) || defined(__sparc64__) || defined(__powerpc__) || \
    defined(__hppa__)
d649 1
a649 1
		if (sz != 0)
d670 2
a671 3
	if (object->dyn.init) {
		DL_DEB(("doing ctors @@%p: [%s]\n",
		    object->dyn.init, object->load_name));
a672 1
	}
d719 1
a719 1
/*
d721 1
a721 1
 *
d736 1
a736 1
	ooff = _dl_find_symbol("environ", _dl_objects, &sym, NULL,
@


