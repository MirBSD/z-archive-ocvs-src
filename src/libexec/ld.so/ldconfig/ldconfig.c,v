head	1.3;
access;
symbols
	tg-mergetmp-mirosx-1:1.3
	tg-mergefixes-1-branch:1.3.0.4
	tg-mergefixes-1-base:1.3
	MIROS_X:1.3.0.2
	MIROS_X_BASE:1.3
	tg-mergetmp-3:1.3
	cvs-200412031430:1.1.1.4
	MIRBSD_XP_MIRPPC:1.2.0.4
	cvs-200410171015:1.1.1.4
	cvs-200410141645:1.1.1.4
	MIRBSD_XP_SPARC_BASE:1.2
	MIRBSD_XP_SPARC:1.2.0.2
	MIRBSD_7quater:1.1.1.2
	cvs-200405160640:1.1.1.3
	cvs-200401271800:1.1.1.3
	cvs-200401261630:1.1.1.3
	cvs-200401021645:1.1.1.3
	MIRBSD_7_ALPHA:1.1.1.2.0.6
	MIRBSD_7:1.1.1.2.0.4
	cvs-200312222040:1.1.1.3
	MIRBSD_7ter:1.1.1.2
	MIRBSD_7_DEV:1.1.1.2.0.2
	cvs-200310081815:1.1.1.2
	cvs-200310020700:1.1.1.2
	cvs-200309271030:1.1.1.2
	cvs-200309261610:1.1.1.2
	cvs-200309251530:1.1.1.2
	cvs-200308302005:1.1.1.2
	cvs-200308171200:1.1.1.2
	ctm-3496:1.1.1.2
	ctm-3449:1.1.1.2
	ctm-3437:1.1.1.2
	cvs-200307191805:1.1.1.2
	ctm-3425:1.1.1.2
	cvs-200307091500:1.1.1.2
	cvs-200307072125:1.1.1.2
	ctm-3389:1.1.1.1
	cvs-200307021520:1.1.1.1
	cvs-200306291430:1.1.1.1
	ctm-3341:1.1.1.1
	MIRBSD_5:1.1.1.1
	cvs-200306082100:1.1.1.1
	ctm-3316:1.1.1.1
	ctm-3272:1.1.1.1
	ctm-3264:1.1.1.1
	cvs-200305071630:1.1.1.1
	ctm-3255:1.1.1.1
	ctm-3229:1.1.1.1
	MIRBSD_4:1.1
	ctm-3203:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.3
date	2004.10.14.19.43.07;	author tg;	state Exp;
branches;
next	1.2;

1.2
date	2004.01.10.04.56.51;	author tg;	state Stab;
branches;
next	1.1;

1.1
date	2003.03.27.14.19.05;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.04.15.17.35.51;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2003.07.07.21.27.32;	author tg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2003.12.22.21.09.28;	author tg;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2004.10.14.17.15.53;	author tg;	state Exp;
branches;
next	;


desc
@@


1.3
log
@merge
-Wall -Werror clean
@
text
@/**	$MirBSD$ */
/*	$OpenBSD: ldconfig.c,v 1.16 2004/08/14 03:08:24 drahn Exp $	*/

/*
 * Copyright (c) 1993,1995 Paul Kranenburg
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by Paul Kranenburg.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#include <sys/param.h>
#include <sys/stat.h>
#include <sys/file.h>
#include <sys/time.h>
#include <sys/mman.h>
#include <sys/resource.h>
#include <ctype.h>
#include <dirent.h>
#include <err.h>
#include <errno.h>
#include <fcntl.h>
#include <ar.h>
#include <ranlib.h>
#include <a.out.h>
#include <stab.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>

#include "ld.h"

__RCSID("$MirBSD$");

#undef major
#undef minor

extern char			*__progname;

static int			verbose;
static int			nostd;
static int			justread;
static int			merge;
static int			rescan;
static int			unconfig;

struct shlib_list {
	/* Internal list of shared libraries found */
	char			*name;
	char			*path;
	int			dewey[MAXDEWEY];
	int			ndewey;
#define major dewey[0]
#define minor dewey[1]
	struct shlib_list	*next;
};

static struct shlib_list	*shlib_head = NULL, **shlib_tail = &shlib_head;
static char			*dir_list;

static void	enter(char *, char *, char *, int *, int);
static int	dodir(char *, int);
static int	buildhints(void);
static int	readhints(void);
static void	listhints(void);

int
main(int argc, char *argv[])
{
	int i, c;
	int rval = 0;

	while ((c = getopt(argc, argv, "RUmrsv")) != -1) {
		switch (c) {
		case 'R':
			rescan = 1;
			break;
		case 'U':
			rescan = unconfig = 1;
			break;
		case 'm':
			merge = 1;
			break;
		case 'r':
			justread = 1;
			break;
		case 's':
			nostd = 1;
			break;
		case 'v':
			verbose = 1;
			break;
		default:
			fprintf(stderr,
			    "usage: %s [-RUmrsv] [dir ...]\n", __progname);
			exit(1);
			break;
		}
	}

	if (unconfig && merge)
		errx(1, "cannot use -U with -m");

	dir_list = xmalloc(1);
	*dir_list = '\0';

	if (justread || merge || rescan) {
		if ((rval = readhints()) != 0)
			return rval;
		if (justread) {
			listhints();
			return 0;
		}
		add_search_path(dir_list);
		dir_list = xrealloc(dir_list, 1);
		*dir_list = '\0';
	} else
		if (!nostd)
			std_search_path();

	if (unconfig) {
		if (optind < argc)
			for (i = optind; i < argc; i++)
				remove_search_dir(argv[i]);
		else {
			i = 0;
			while (i < n_search_dirs) {
				if (access(search_dirs[i], R_OK) < 0)
					remove_search_dir(search_dirs[i]);
				else
					i++;
			}
		}
	} else
		for (i = optind; i < argc; i++)
			add_search_dir(argv[i]);

	for (i = 0; i < n_search_dirs; i++) {
		char *cp = concat(dir_list, *dir_list?":":"", search_dirs[i]);

		free(dir_list);
		dir_list = cp;
		rval |= dodir(search_dirs[i], 0);
	}

	rval |= buildhints();

	return rval;
}

int
dodir(char *dir, int silent)
{
	DIR		*dd;
	struct dirent	*dp;
	char		name[MAXPATHLEN];
	int		dewey[MAXDEWEY], ndewey;

	if ((dd = opendir(dir)) == NULL) {
		if (!silent || errno != ENOENT)
			warn("%s", dir);
		return -1;
	}

	while ((dp = readdir(dd)) != NULL) {
		int n;
		char *cp;

		/* Check for `lib' prefix */
		if (dp->d_name[0] != 'l' ||
		    dp->d_name[1] != 'i' ||
		    dp->d_name[2] != 'b')
			continue;

		/* Copy the entry minus prefix */
		(void)strlcpy(name, dp->d_name + 3, sizeof name);
		n = strlen(name);
		if (n < 4)
			continue;

		/* Find ".so." in name */
		for (cp = name + n - 4; cp > name; --cp) {
			if (cp[0] == '.' &&
			    cp[1] == 's' &&
			    cp[2] == 'o' &&
			    cp[3] == '.')
				break;
		}
		if (cp <= name)
			continue;

		*cp = '\0';
		if (!isdigit(*(cp+4)))
			continue;

		bzero((caddr_t)dewey, sizeof(dewey));
		ndewey = getdewey(dewey, cp + 4);
		enter(dir, dp->d_name, name, dewey, ndewey);
	}
	return 0;
}

static void
enter(char *dir, char *file, char *name, int dewey[], int ndewey)
{
	struct shlib_list	*shp;

	for (shp = shlib_head; shp; shp = shp->next) {
		if (strcmp(name, shp->name) != 0 || major != shp->major)
			continue;

		/* Name matches existing entry */
		if (cmpndewey(dewey, ndewey, shp->dewey, shp->ndewey) > 0) {

			/* Update this entry with higher versioned lib */
			if (verbose)
				printf("Updating lib%s.%d.%d to %s/%s\n",
				    shp->name, shp->major, shp->minor,
				    dir, file);

			free(shp->name);
			shp->name = xstrdup(name);
			free(shp->path);
			shp->path = concat(dir, "/", file);
			memmove(shp->dewey, dewey, sizeof(shp->dewey));
			shp->ndewey = ndewey;
		}
		break;
	}

	if (shp)
		/* Name exists: older version or just updated */
		return;

	/* Allocate new list element */
	if (verbose)
		printf("Adding %s/%s\n", dir, file);

	shp = (struct shlib_list *)xmalloc(sizeof *shp);
	shp->name = xstrdup(name);
	shp->path = concat(dir, "/", file);
	memmove(shp->dewey, dewey, MAXDEWEY);
	shp->ndewey = ndewey;
	shp->next = NULL;

	*shlib_tail = shp;
	shlib_tail = &shp->next;
}


#if DEBUG
/* test */
#undef _PATH_LD_HINTS
#define _PATH_LD_HINTS		"./ld.so.hints"
#endif

static int
hinthash(char *cp, int vmajor, int vminor)
{
	int	k = 0;

	while (*cp)
		k = (((k << 1) + (k >> 14)) ^ (*cp++)) & 0x3fff;

	k = (((k << 1) + (k >> 14)) ^ (vmajor*257)) & 0x3fff;
#if 0
	k = (((k << 1) + (k >> 14)) ^ (vminor*167)) & 0x3fff;
#endif

	return k;
}

int
buildhints(void)
{
	int strtab_sz = 0, nhints = 0, fd, i, n, str_index = 0;
	struct hints_bucket *blist;
	struct hints_header hdr;
	struct shlib_list *shp;
	char *strtab, *tmpfile;

	for (shp = shlib_head; shp; shp = shp->next) {
		strtab_sz += 1 + strlen(shp->name);
		strtab_sz += 1 + strlen(shp->path);
		nhints++;
	}

	/* Fill hints file header */
	hdr.hh_magic = HH_MAGIC;
	hdr.hh_version = LD_HINTS_VERSION_2;
	hdr.hh_nbucket = 1 * nhints;
	n = hdr.hh_nbucket * sizeof(struct hints_bucket);
	hdr.hh_hashtab = sizeof(struct hints_header);
	hdr.hh_strtab = hdr.hh_hashtab + n;
	hdr.hh_dirlist = strtab_sz;
	strtab_sz += 1 + strlen(dir_list);
	hdr.hh_strtab_sz = strtab_sz;
	hdr.hh_ehints = hdr.hh_strtab + hdr.hh_strtab_sz;

	if (verbose)
		printf("Totals: entries %d, buckets %ld, string size %d\n",
		    nhints, hdr.hh_nbucket, strtab_sz);

	/* Allocate buckets and string table */
	blist = (struct hints_bucket *)xmalloc(n);
	bzero((char *)blist, n);
	for (i = 0; i < hdr.hh_nbucket; i++)
		/* Empty all buckets */
		blist[i].hi_next = -1;

	strtab = (char *)xmalloc(strtab_sz);

	/* Enter all */
	for (shp = shlib_head; shp; shp = shp->next) {
		struct hints_bucket	*bp;

		bp = blist + (hinthash(shp->name, shp->major, shp->minor) %
		    hdr.hh_nbucket);

		if (bp->hi_pathx) {
			int	i;

			for (i = 0; i < hdr.hh_nbucket; i++) {
				if (blist[i].hi_pathx == 0)
					break;
			}
			if (i == hdr.hh_nbucket) {
				warnx("Bummer!");
				return -1;
			}
			while (bp->hi_next != -1)
				bp = &blist[bp->hi_next];
			bp->hi_next = i;
			bp = blist + i;
		}

		/* Insert strings in string table */
		bp->hi_namex = str_index;
		strlcpy(strtab + str_index, shp->name, strtab_sz - str_index);
		str_index += 1 + strlen(shp->name);

		bp->hi_pathx = str_index;
		strlcpy(strtab + str_index, shp->path, strtab_sz - str_index);
		str_index += 1 + strlen(shp->path);

		/* Copy versions */
		memmove(bp->hi_dewey, shp->dewey, sizeof(bp->hi_dewey));
		bp->hi_ndewey = shp->ndewey;
	}

	/* Copy search directories */
	strlcpy(strtab + str_index, dir_list, strtab_sz - str_index);
	str_index += 1 + strlen(dir_list);

	/* Sanity check */
	if (str_index != strtab_sz) {
		errx(1, "str_index(%d) != strtab_sz(%d)", str_index, strtab_sz);
	}

	tmpfile = concat(_PATH_LD_HINTS, ".XXXXXXXXXX", "");
	if ((fd = mkstemp(tmpfile)) == -1) {
		warn("%s", tmpfile);
		return -1;
	}
	fchmod(fd, 0444);

	if (write(fd, &hdr, sizeof(struct hints_header)) !=
	    sizeof(struct hints_header)) {
		warn("%s", _PATH_LD_HINTS);
		return -1;
	}
	if (write(fd, blist, hdr.hh_nbucket * sizeof(struct hints_bucket)) !=
	    hdr.hh_nbucket * sizeof(struct hints_bucket)) {
		warn("%s", _PATH_LD_HINTS);
		return -1;
	}
	if (write(fd, strtab, strtab_sz) != strtab_sz) {
		warn("%s", _PATH_LD_HINTS);
		return -1;
	}
	if (close(fd) != 0) {
		warn("%s", _PATH_LD_HINTS);
		return -1;
	}

	/* Install it */
	if (unlink(_PATH_LD_HINTS) != 0 && errno != ENOENT) {
		warn("%s", _PATH_LD_HINTS);
		return -1;
	}

	if (rename(tmpfile, _PATH_LD_HINTS) != 0) {
		warn("%s", _PATH_LD_HINTS);
		return -1;
	}

	return 0;
}

static int
readhints(void)
{
	struct stat sb;
	struct hints_bucket *blist;
	struct hints_header *hdr;
	struct shlib_list *shp;
	caddr_t addr;
	char *strtab;
	long msize;
	int fd, i;

	if ((fd = open(_PATH_LD_HINTS, O_RDONLY, 0)) == -1) {
		warn("%s", _PATH_LD_HINTS);
		return -1;
	}
	if (fstat(fd, &sb) != 0 || !S_ISREG(sb.st_mode) ||
	    sb.st_size < sizeof(struct hints_header) || sb.st_size > LONG_MAX) {
		warn("%s", _PATH_LD_HINTS);
		return -1;
	}

	msize =  (long)sb.st_size;
	addr = mmap(0, msize, PROT_READ, MAP_PRIVATE, fd, 0);

	if (addr == MAP_FAILED) {
		warn("%s", _PATH_LD_HINTS);
		return -1;
	}

	hdr = (struct hints_header *)addr;
	if (HH_BADMAG(*hdr)) {
		warnx("%s: Bad magic: %lo",
		    _PATH_LD_HINTS, hdr->hh_magic);
		return -1;
	}

	if (hdr->hh_ehints > msize) {
		warnx("%s: hintsize greater than filesize: 0x%lx > 0x%lx ",
		    _PATH_LD_HINTS, hdr->hh_ehints, msize);
		    return -1;
	}

	if (hdr->hh_version != LD_HINTS_VERSION_2) {
		warnx("Unsupported version: %ld", hdr->hh_version);
		return -1;
	}

	close(fd);

	blist = (struct hints_bucket *)(addr + hdr->hh_hashtab);
	strtab = (char *)(addr + hdr->hh_strtab);

	dir_list = xstrdup(strtab + hdr->hh_dirlist);

	if (rescan)
		return (0);

	for (i = 0; i < hdr->hh_nbucket; i++) {
		struct hints_bucket	*bp = &blist[i];

		/* Sanity check */
		if (bp->hi_namex >= hdr->hh_strtab_sz) {
			warnx("Bad name index: %#x", bp->hi_namex);
			return -1;
		}
		if (bp->hi_pathx >= hdr->hh_strtab_sz) {
			warnx("Bad path index: %#x", bp->hi_pathx);
			return -1;
		}

		/* Allocate new list element */
		shp = (struct shlib_list *)xmalloc(sizeof *shp);
		shp->name = xstrdup(strtab + bp->hi_namex);
		shp->path = xstrdup(strtab + bp->hi_pathx);
		memmove(shp->dewey, bp->hi_dewey, sizeof(shp->dewey));
		shp->ndewey = bp->hi_ndewey;
		shp->next = NULL;

		*shlib_tail = shp;
		shlib_tail = &shp->next;
	}
	return 0;
}

static void
listhints(void)
{
	struct shlib_list *shp;
	int i;

	printf("%s:\n", _PATH_LD_HINTS);
	printf("\tsearch directories: %s\n", dir_list);

	for (i = 0, shp = shlib_head; shp; i++, shp = shp->next)
		printf("\t%d:-l%s.%d.%d => %s\n",
		    i, shp->name, shp->major, shp->minor, shp->path);
}
@


1.2
log
@Jumbo patch from wbx@@ to replace the
bcopy(3), bcmp(3) and bzero(3) func-
tions, having been deprecated earli-
er, by their ISO counterparts, name-
ly memmove(3) and the gcc3-optimized
memcmp(3) and memset(3) functions.

I didn't read every single line (be-
cause of the time of day), but looks
fine and builds through. I just nee-
ded to nuke three cases of whitespa-
ce at EOL. Good work wbx@@.

I've also sprinkled in a few patches
of mine addressing the issue that in
some kernel header files, bcopy() is
used as well... also there have been
quite some string cleaning fixes and
a missing header.
@
text
@d1 2
a2 1
/*	$OpenBSD: ldconfig.c,v 1.15 2003/11/21 08:56:34 djm Exp $	*/
a34 1
#include <sys/types.h>
d56 2
d426 1
d439 5
d445 1
a445 1
	msize = PAGSIZ;
d460 6
a470 9
	if (hdr->hh_ehints > msize) {
		if (mmap(addr+msize, hdr->hh_ehints - msize,
		    PROT_READ, MAP_PRIVATE|MAP_FIXED,
		    fd, msize) != (caddr_t)(addr+msize)) {

			warn("%s", _PATH_LD_HINTS);
			return -1;
		}
	}
@


1.1
log
@re-add a "not so important" directory that just went away
without telling me so.
It did even vanish from the CVS repository. I think, CVS
is buggy.
@
text
@d1 1
a1 1
/*	$OpenBSD: ldconfig.c,v 1.12 2002/07/30 22:25:27 deraadt Exp $	*/
d246 1
a246 1
			bcopy(dewey, shp->dewey, sizeof(shp->dewey));
d263 1
a263 1
	bcopy(dewey, shp->dewey, MAXDEWEY);
d278 1
a278 1
int
d297 5
a301 9
	struct hints_header	hdr;
	struct hints_bucket	*blist;
	struct shlib_list	*shp;
	char			*strtab;
	int			i, n, str_index = 0;
	int			strtab_sz = 0;	/* Total length of strings */
	int			nhints = 0;	/* Total number of hints */
	int			fd;
	char			*tmpfile;
d368 1
a368 1
		bcopy(shp->dewey, bp->hi_dewey, sizeof(bp->hi_dewey));
d424 7
a430 7
	int			fd, i;
	caddr_t			addr;
	long			msize;
	struct hints_header	*hdr;
	struct hints_bucket	*blist;
	char			*strtab;
	struct shlib_list	*shp;
d493 1
a493 1
		bcopy(bp->hi_dewey, shp->dewey, sizeof(shp->dewey));
d506 2
a507 2
	struct shlib_list	*shp;
	int			i;
@


1.1.1.1
log
@Import OpenBSD source with the "new" command line as well,
in order to be able to provide a MirBSD release which bases
upon a fairly current OpenBSD base source code tree deemed
stable enough.
@
text
@@


1.1.1.2
log
@Sync some stuff with OpenBSD
@
text
@d1 1
a1 1
/*	$OpenBSD: ldconfig.c,v 1.13 2003/07/06 20:04:00 deraadt Exp $	*/
d278 1
a278 1
static int
d297 9
a305 5
	int strtab_sz = 0, nhints = 0, fd, i, n, str_index = 0;
	struct hints_bucket *blist;
	struct hints_header hdr;
	struct shlib_list *shp;
	char *strtab, *tmpfile;
d428 7
a434 7
	struct hints_bucket *blist;
	struct hints_header *hdr;
	struct shlib_list *shp;
	caddr_t addr;
	char *strtab;
	long msize;
	int fd, i;
d510 2
a511 2
	struct shlib_list *shp;
	int i;
@


1.1.1.3
log
@Time to import OpenBSD once again. Expect breakage.
@
text
@d1 1
a1 1
/*	$OpenBSD: ldconfig.c,v 1.15 2003/11/21 08:56:34 djm Exp $	*/
@


1.1.1.4
log
@pretty kawaii ld.so
@
text
@d1 1
a1 1
/*	$OpenBSD: ldconfig.c,v 1.16 2004/08/14 03:08:24 drahn Exp $	*/
a423 1
	struct stat sb;
a435 5
	if (fstat(fd, &sb) != 0 || !S_ISREG(sb.st_mode) ||
	    sb.st_size < sizeof(struct hints_header) || sb.st_size > LONG_MAX) {
		warn("%s", _PATH_LD_HINTS);
		return -1;
	}
d437 1
a437 1
	msize =  (long)sb.st_size;
a451 6
	if (hdr->hh_ehints > msize) {
		warnx("%s: hintsize greater than filesize: 0x%x > 0x%x ",
		    _PATH_LD_HINTS, hdr->hh_ehints, msize);
		    return -1;
	}

d457 9
@


