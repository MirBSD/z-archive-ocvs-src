head	1.3;
branch	1.1.1;
access;
symbols
	tg-mergetmp-mirosx-1:1.1.1.8
	tg-mergefixes-1-branch:1.1.1.8.0.4
	tg-mergefixes-1-base:1.1.1.8
	MIROS_X:1.1.1.8.0.2
	MIROS_X_BASE:1.1.1.8
	tg-mergetmp-3:1.1.1.8
	cvs-200412031430:1.1.1.8
	MIRBSD_XP_MIRPPC:1.1.1.7.0.10
	cvs-200410171015:1.1.1.8
	cvs-200410141645:1.1.1.8
	MIRBSD_XP_SPARC_BASE:1.1.1.7
	MIRBSD_XP_SPARC:1.1.1.7.0.8
	MIRBSD_7quater:1.1.1.7
	cvs-200405160640:1.1.1.7
	cvs-200401271800:1.1.1.7
	cvs-200401261630:1.1.1.7
	cvs-200401021645:1.1.1.7
	MIRBSD_7_ALPHA:1.1.1.7.0.6
	MIRBSD_7:1.1.1.7.0.4
	cvs-200312222040:1.1.1.7
	MIRBSD_7ter:1.1.1.7
	MIRBSD_7_DEV:1.1.1.7.0.2
	cvs-200310081815:1.1.1.7
	cvs-200310020700:1.1.1.7
	cvs-200309271030:1.1.1.7
	cvs-200309261610:1.1.1.7
	cvs-200309251530:1.1.1.7
	cvs-200308302005:1.1.1.6
	cvs-200308171200:1.1.1.6
	ctm-3496:1.1.1.6
	ctm-3449:1.1.1.6
	ctm-3437:1.1.1.6
	cvs-200307191805:1.1.1.6
	ctm-3425:1.1.1.6
	cvs-200307091500:1.1.1.6
	cvs-200307072125:1.1.1.6
	ctm-3389:1.1.1.5
	cvs-200307021520:1.1.1.5
	cvs-200306291430:1.1.1.5
	ctm-3341:1.1.1.4
	MIRBSD_5:1.1.1.3
	cvs-200306082100:1.1.1.3
	ctm-3316:1.1.1.3
	ctm-3272:1.1.1.2
	ctm-3264:1.1.1.2
	cvs-200305071630:1.1.1.2
	ctm-3255:1.1.1.2
	ctm-3229:1.1.1.2
	MIRBSD_4:1.2
	ctm-3203:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.3
date	2003.04.24.11.04.50;	author tg;	state Exp;
branches;
next	1.2;

1.2
date	2003.03.29.19.31.48;	author tg;	state Exp;
branches;
next	1.1;

1.1
date	2003.03.27.14.19.03;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.04.15.17.35.51;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2003.04.24.09.23.26;	author tg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2003.06.05.17.29.32;	author tg;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2003.06.19.12.41.18;	author tg;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2003.06.29.17.25.53;	author tg;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2003.07.07.21.27.31;	author tg;	state Exp;
branches;
next	1.1.1.7;

1.1.1.7
date	2003.09.25.16.31.24;	author tg;	state Stab;
branches;
next	1.1.1.8;

1.1.1.8
date	2004.10.14.17.15.45;	author tg;	state Exp;
branches;
next	;


desc
@@


1.3
log
@fix cvs import mess, merge OpenBSD-current
move library_mquery.c from OBSD to library.c since
a) we have only i386 anyways
b) match prior MirBSD behaviour
@
text
@/*	$OpenBSD: resolve.h,v 1.23 2003/04/17 03:40:45 drahn Exp $ */

/*
 * Copyright (c) 1998 Per Fogelstrom, Opsycon AB
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed under OpenBSD by
 *	Per Fogelstrom, Opsycon AB, Sweden.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS
 * OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 */

#ifndef _RESOLVE_H_
#define _RESOLVE_H_

#include <link.h>

struct load_list {
	struct load_list *next;
	void		*start;
	size_t		size;
	int		prot;
	Elf_Addr	moff;
	long		foff;
};

/*
 *  Structure describing a loaded object.
 *  The head of this struct must be compatible
 *  with struct link_map in sys/link.h
 */
typedef struct elf_object {
	Elf_Addr load_addr;		/* Real load address */
	char	*load_name;		/* Pointer to object name */
	Elf_Dyn *load_dyn;		/* Pointer to object dynamic data */
	struct elf_object *next;
	struct elf_object *prev;
/* End struct link_map compatible */
	Elf_Addr load_offs;		/* Load offset from link address */

	struct load_list *load_list;

	Elf_Addr	load_end;
	Elf_Addr	got_addr;
	Elf_Addr	got_start;
	size_t		got_size;
	Elf_Addr	plt_start;
	size_t		plt_size;

	union {
		u_long		info[DT_NUM + DT_PROCNUM];
		struct {
			Elf_Addr	null;		/* Not used */
			Elf_Addr	needed;		/* Not used */
			Elf_Addr	pltrelsz;
			Elf_Addr	*pltgot;
			Elf_Addr	*hash;
			const char	*strtab;
			const Elf_Sym	*symtab;
			Elf_RelA	*rela;
			Elf_Addr	relasz;
			Elf_Addr	relaent;
			Elf_Addr	strsz;
			Elf_Addr	syment;
			void		(*init)(void);
			void		(*fini)(void);
			const char	*soname;
			const char	*rpath;
			Elf_Addr	symbolic;
			Elf_Rel	*rel;
			Elf_Addr	relsz;
			Elf_Addr	relent;
			Elf_Addr	pltrel;
			Elf_Addr	debug;
			Elf_Addr	textrel;
			Elf_Addr	jmprel;
			Elf_Addr	bind_now;
		} u;
	} Dyn;
#define dyn Dyn.u

	struct elf_object *dep_next;	/* Shadow objects for resolve search */

	int		status;
#define	STAT_RELOC_DONE	1
#define	STAT_GOT_DONE	2
#define	STAT_INIT_DONE	4

	Elf_Phdr	*phdrp;
	int		phdrc;

	int		refcount;
	int		obj_type;
#define	OBJTYPE_LDR	1
#define	OBJTYPE_EXE	2
#define	OBJTYPE_LIB	3
#define	OBJTYPE_DLO	4

	Elf_Word	*buckets;
	u_int32_t	nbuckets;
	Elf_Word	*chains;
	u_int32_t	nchains;
	Elf_Dyn	*dynamic;

	struct dep_node *first_child;
	struct dep_node *last_child;
} elf_object_t;

struct dep_node {
	struct dep_node *next_sibling;
	elf_object_t *data;
};

extern void _dl_rt_resolve(void);

extern elf_object_t *_dl_add_object(const char *objname, Elf_Dyn *dynp,
	    const u_long *, const int objtype,
	    const long laddr, const long loff);
extern void	_dl_remove_object(elf_object_t *object);

extern elf_object_t *_dl_lookup_object(const char *objname);
extern elf_object_t *_dl_load_shlib(const char *, elf_object_t *, int);
extern void	_dl_unload_shlib(elf_object_t *object);

extern int  _dl_md_reloc(elf_object_t *object, int rel, int relsz);
extern void _dl_md_reloc_got(elf_object_t *object, int lazy);

Elf_Addr _dl_find_symbol(const char *name, elf_object_t *startlook,
    const Elf_Sym **ref, int flags, int sym_size, const char *module_name);
/*
 * defines for _dl_find_symbol() flag field, three bits of meaning
 * myself	- clear: search all objects,	set: search only this object
 * warnnotfound - clear: no warning,		set: warn if not found
 * inplt	- clear: possible plt ref	set: real matching function.
 *
 * inplt - due to how ELF handles function addresses in shared libraries
 * &func may actually refer to the plt entry in the main program
 * rather than the actual function address in the .so file.
 * This rather bizarre behavior is documented in the SVR4 ABI.
 * when getting the function address to relocate a PLT entry
 * the 'real' function address is necessary, not the possible PLT address.
 */
/* myself */
#define SYM_SEARCH_ALL		0
#define SYM_SEARCH_SELF		1
/* warnnotfound */
#define SYM_NOWARNNOTFOUND	0
#define SYM_WARNNOTFOUND	2
/* inplt */
#define SYM_NOTPLT		0
#define SYM_PLT			4

void _dl_rtld(elf_object_t *object);
void _dl_call_init(elf_object_t *object);

extern elf_object_t *_dl_objects;
extern elf_object_t *_dl_last_object;

extern const char *_dl_progname;
extern struct r_debug *_dl_debug_map;

extern int  _dl_pagesz;
extern int  _dl_errno;

extern char *_dl_libpath;
extern char *_dl_preload;
extern char *_dl_bindnow;
extern char *_dl_traceld;
extern char *_dl_debug;

#define DL_DEB(P) do { if (_dl_debug) _dl_printf P ; } while (0)

#define	DL_NOT_FOUND		1
#define	DL_CANT_OPEN		2
#define	DL_NOT_ELF		3
#define	DL_CANT_OPEN_REF	4
#define	DL_CANT_MMAP		5
#define	DL_NO_SYMBOL		6
#define	DL_INVALID_HANDLE	7
#define	DL_INVALID_CTL		8

#define ELF_ROUND(x,malign) (((x) + (malign)-1) & ~((malign)-1))
#define ELF_TRUNC(x,malign) ((x) & ~((malign)-1))

#endif /* _RESOLVE_H_ */
@


1.2
log
@merge elfdiffs.030314
@
text
@d1 1
a1 1
/*	$OpenBSD: resolve.h,v 1.22 2003/02/15 22:39:13 drahn Exp $ */
d42 5
a46 5
	void *start;
	size_t size;
	int prot;
	Elf_Addr moff;
	long foff;
@


1.1
log
@re-add a "not so important" directory that just went away
without telling me so.
It did even vanish from the CVS repository. I think, CVS
is buggy.
@
text
@d42 5
a46 3
	char	*start;
	size_t	size;
	int	prot;
d65 1
a65 1
	u_int32_t  load_size;
@


1.1.1.1
log
@Import OpenBSD source with the "new" command line as well,
in order to be able to provide a MirBSD release which bases
upon a fairly current OpenBSD base source code tree deemed
stable enough.
@
text
@@


1.1.1.2
log
@Import some parts of OpenBSD-current (after their ELF switch) to ease future merging and reduce diffs against their codebase
@
text
@d1 1
a1 1
/*	$OpenBSD: resolve.h,v 1.23 2003/04/17 03:40:45 drahn Exp $ */
d42 3
a44 5
	void		*start;
	size_t		size;
	int		prot;
	Elf_Addr	moff;
	long		foff;
@


1.1.1.3
log
@Import latest OpenBSD CVS tree by CTM in order
to sync the base system and ports tree with Them.

This includes the recent licence changes as well - by
importing the changed base and re-applying the diffs
(with cvs up -j -j) they are inherited, and we're not
bound to the removed clauses any longer.
@
text
@d1 1
a1 1
/*	$OpenBSD: resolve.h,v 1.24 2003/05/30 01:13:53 drahn Exp $ */
a176 1
void _dl_link_sub(elf_object_t *dep, elf_object_t *p);
@


1.1.1.4
log
@sync with OpenBSD, this gives us a fair amount of fixes
@
text
@d1 1
a1 1
/*	$OpenBSD: resolve.h,v 1.25 2003/06/09 16:10:03 deraadt Exp $ */
d14 6
@


1.1.1.5
log
@the previous cvs import did not finish due to 'memory fault'
sync with OpenBSD-cvs
@
text
@d1 1
a1 1
/*	$OpenBSD: resolve.h,v 1.26 2003/06/22 21:39:01 drahn Exp $ */
d132 3
a134 3
void _dl_add_object(elf_object_t *object);
extern elf_object_t *_dl_finalize_object(const char *objname, Elf_Dyn *dynp,
    const u_long *, const int objtype, const long laddr, const long loff);
@


1.1.1.6
log
@Sync some stuff with OpenBSD
@
text
@d1 1
a1 1
/*	$OpenBSD: resolve.h,v 1.27 2003/07/06 20:03:57 deraadt Exp $ */
a171 8

void _dl_run_dtors(elf_object_t *object);

Elf_Addr _dl_bind(elf_object_t *object, int index);

int	_dl_match_file(struct sod *sodp, char *name, int namelen);
char	*_dl_find_shlib(struct sod *sodp, const char *searchpath, int nohints);
void	_dl_load_list_free(struct load_list *load_list);
@


1.1.1.7
log
@Release Time. Synchronize with OpenBSD 3.4-current (base system).
@
text
@d1 1
a1 1
/*	$OpenBSD: resolve.h,v 1.29 2003/09/04 19:33:48 drahn Exp $ */
a32 1
#include <dlfcn.h>
a113 1
	int		obj_flags;
d138 1
a138 1
extern elf_object_t *_dl_load_shlib(const char *, elf_object_t *, int, int);
d145 1
a145 3
    const Elf_Sym **ref, int flags, int sym_size, elf_object_t *object);
Elf_Addr _dl_find_symbol_bysym(elf_object_t *req_obj, unsigned int symidx,
    elf_object_t *startlook, const Elf_Sym **ref, int flags, int req_size);
a208 9

/* symbol lookup cache */
typedef struct sym_cache {
	const Elf_Sym	*sym;
	Elf_Addr	offset;
	int flags;
} sym_cache;

extern sym_cache *_dl_symcache;
@


1.1.1.8
log
@pretty kawaii ld.so
@
text
@d1 1
a1 1
/*	$OpenBSD: resolve.h,v 1.32 2004/08/11 19:14:56 drahn Exp $ */
a124 4

	/* for object confirmation */
	dev_t	dev;
	ino_t inode;
d147 1
a147 2
    const Elf_Sym **ref, const elf_object_t **pobj,
    int flags, int sym_size, elf_object_t *object);
d149 1
a149 2
    elf_object_t *startlook, const Elf_Sym **ref, const elf_object_t **pobj,
    int flags, int req_size);
a209 2
#define	DL_NO_OBJECT		9
#define	DL_CANT_FIND_OBJ	10
a215 1
	const elf_object_t *obj;
d217 1
@


