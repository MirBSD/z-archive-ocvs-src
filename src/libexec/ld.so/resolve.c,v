head	1.3;
branch	1.1.1;
access;
symbols
	tg-mergetmp-mirosx-1:1.1.1.5
	tg-mergefixes-1-branch:1.1.1.5.0.4
	tg-mergefixes-1-base:1.1.1.5
	MIROS_X:1.1.1.5.0.2
	MIROS_X_BASE:1.1.1.5
	tg-mergetmp-3:1.1.1.5
	cvs-200412031430:1.1.1.5
	MIRBSD_XP_MIRPPC:1.2.0.4
	cvs-200410171015:1.1.1.5
	cvs-200410141645:1.1.1.5
	MIRBSD_XP_SPARC_BASE:1.2
	MIRBSD_XP_SPARC:1.2.0.2
	MIRBSD_7quater:1.1.1.4
	cvs-200405160640:1.1.1.4
	cvs-200401271800:1.1.1.4
	cvs-200401261630:1.1.1.4
	cvs-200401021645:1.1.1.4
	MIRBSD_7_ALPHA:1.1.1.4.0.6
	MIRBSD_7:1.1.1.4.0.4
	cvs-200312222040:1.1.1.4
	MIRBSD_7ter:1.1.1.4
	MIRBSD_7_DEV:1.1.1.4.0.2
	cvs-200310081815:1.1.1.4
	cvs-200310020700:1.1.1.4
	cvs-200309271030:1.1.1.4
	cvs-200309261610:1.1.1.4
	cvs-200309251530:1.1.1.4
	cvs-200308302005:1.1.1.3
	cvs-200308171200:1.1.1.3
	ctm-3496:1.1.1.3
	ctm-3449:1.1.1.3
	ctm-3437:1.1.1.3
	cvs-200307191805:1.1.1.3
	ctm-3425:1.1.1.3
	cvs-200307091500:1.1.1.3
	cvs-200307072125:1.1.1.3
	ctm-3389:1.1.1.3
	cvs-200307021520:1.1.1.3
	cvs-200306291430:1.1.1.3
	ctm-3341:1.1.1.2
	MIRBSD_5:1.1.1.1
	cvs-200306082100:1.1.1.1
	ctm-3316:1.1.1.1
	ctm-3272:1.1.1.1
	ctm-3264:1.1.1.1
	cvs-200305071630:1.1.1.1
	ctm-3255:1.1.1.1
	ctm-3229:1.1.1.1
	MIRBSD_4:1.1
	ctm-3203:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.3
date	2004.10.14.19.43.05;	author tg;	state Exp;
branches;
next	1.2;

1.2
date	2004.01.23.23.59.30;	author tg;	state Stab;
branches;
next	1.1;

1.1
date	2003.03.27.14.19.03;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.04.15.17.35.51;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2003.06.19.12.41.18;	author tg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2003.06.29.17.25.53;	author tg;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2003.09.25.16.31.24;	author tg;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2004.10.14.17.15.45;	author tg;	state Exp;
branches;
next	;


desc
@@


1.3
log
@merge
-Wall -Werror clean
@
text
@/*	$OpenBSD: resolve.c,v 1.24 2004/07/05 00:47:40 kjell Exp $ */

/*
 * Copyright (c) 1998 Per Fogelstrom, Opsycon AB
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS
 * OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 */

#define _DYN_LOADER

#include <sys/types.h>

#include <nlist.h>
#include <link.h>
#include "syscall.h"
#include "archdep.h"
#include "resolve.h"

elf_object_t *_dl_objects;
elf_object_t *_dl_last_object;

/*
 * Add a new dynamic object to the object list.
 */
void
_dl_add_object(elf_object_t *object)
{

	/*
	 * if this is a new object, prev will be NULL
	 * != NULL if an object already in the list
	 * prev == NULL for the first item in the list, but that will
	 * be the executable.
	 */
	if (object->prev != NULL)
		return;

	if (_dl_objects == NULL) {			/* First object ? */
		_dl_last_object = _dl_objects = object;
	} else {
		_dl_last_object->next = object;
		object->prev = _dl_last_object;
		_dl_last_object = object;
	}
}

/*
 * Initialize a new dynamic object.
 */
elf_object_t *
_dl_finalize_object(const char *objname, Elf_Dyn *dynp, const u_long *dl_data,
    const int objtype, const long laddr, const long loff)
{
	elf_object_t *object;
#if 0
	_dl_printf("objname [%s], dynp %p, dl_data %p, objtype %x laddr %lx, loff %lx\n",
	    objname, dynp, dl_data, objtype, laddr, loff);
#endif
	object = _dl_malloc(sizeof(elf_object_t));
	object->prev = object->next = NULL;

	object->load_dyn = dynp;
	while (dynp->d_tag != DT_NULL) {
		if (dynp->d_tag < DT_NUM)
			object->Dyn.info[dynp->d_tag] = dynp->d_un.d_val;
		else if (dynp->d_tag >= DT_LOPROC &&
		    dynp->d_tag < DT_LOPROC + DT_NUM)
			object->Dyn.info[dynp->d_tag + DT_NUM - DT_LOPROC] =
			    dynp->d_un.d_val;
		if (dynp->d_tag == DT_TEXTREL)
			object->dyn.textrel = 1;
		if (dynp->d_tag == DT_SYMBOLIC)
			object->dyn.symbolic = 1;
		if (dynp->d_tag == DT_BIND_NOW)
			object->dyn.bind_now = 1;
		dynp++;
	}

	/*
	 *  Now relocate all pointer to dynamic info, but only
	 *  the ones which have pointer values.
	 */
	if (object->Dyn.info[DT_PLTGOT])
		object->Dyn.info[DT_PLTGOT] += loff;
	if (object->Dyn.info[DT_HASH])
		object->Dyn.info[DT_HASH] += loff;
	if (object->Dyn.info[DT_STRTAB])
		object->Dyn.info[DT_STRTAB] += loff;
	if (object->Dyn.info[DT_SYMTAB])
		object->Dyn.info[DT_SYMTAB] += loff;
	if (object->Dyn.info[DT_RELA])
		object->Dyn.info[DT_RELA] += loff;
	if (object->Dyn.info[DT_SONAME])
		object->Dyn.info[DT_SONAME] += loff;
	if (object->Dyn.info[DT_RPATH])
		object->Dyn.info[DT_RPATH] += object->Dyn.info[DT_STRTAB];
	if (object->Dyn.info[DT_REL])
		object->Dyn.info[DT_REL] += loff;
	if (object->Dyn.info[DT_INIT])
		object->Dyn.info[DT_INIT] += loff;
	if (object->Dyn.info[DT_FINI])
		object->Dyn.info[DT_FINI] += loff;
	if (object->Dyn.info[DT_JMPREL])
		object->Dyn.info[DT_JMPREL] += loff;

	if (object->Dyn.info[DT_HASH] != 0) {
		Elf_Word *hashtab = (Elf_Word *)object->Dyn.info[DT_HASH];

		object->nbuckets = hashtab[0];
		object->nchains = hashtab[1];
		object->buckets = hashtab + 2;
		object->chains = object->buckets + object->nbuckets;
	}

	if (dl_data) {
		object->phdrp = (Elf_Phdr *) dl_data[AUX_phdr];
		object->phdrc = dl_data[AUX_phnum];
	}
	object->obj_type = objtype;
	object->load_addr = laddr;
	object->load_offs = loff;
	object->load_name = _dl_strdup(objname);
	object->refcount = 1;
	object->first_child = NULL;
	object->last_child = NULL;
	/* default dev, inode for dlopen-able objects. */
	object->dev = 0;
	object->inode = 0;

	return(object);
}

void
_dl_remove_object(elf_object_t *object)
{
	elf_object_t *depobj;

	object->prev->next = object->next;
	if (object->next)
		object->next->prev = object->prev;

	if (_dl_last_object == object)
		_dl_last_object = object->prev;

	if (object->load_name)
		_dl_free(object->load_name);

	while ((depobj = object->dep_next)) {
		object->dep_next = object->dep_next->dep_next;
		_dl_free(depobj);
	}
	_dl_free(object);
}


elf_object_t *
_dl_lookup_object(const char *name)
{
	elf_object_t *object;

	object = _dl_objects;
	while (object) {
		if (_dl_strcmp(name, object->load_name) == 0)
			return(object);
		object = object->next;
	}
	return(0);
}

int find_symbol_obj(elf_object_t *object, const char *name, unsigned long hash,
    int flags, const Elf_Sym **ref, const Elf_Sym **weak_sym,
    elf_object_t **weak_object);

sym_cache *_dl_symcache;
int _dl_symcachestat_hits;
int _dl_symcachestat_lookups;

Elf_Addr
_dl_find_symbol_bysym(elf_object_t *req_obj, unsigned int symidx,
    elf_object_t *startlook, const Elf_Sym **ref, const elf_object_t **pobj,
    int flags, int req_size)
{
	Elf_Addr ret;
	const Elf_Sym *sym;
	const char *symn;
	const elf_object_t *sobj;

	_dl_symcachestat_lookups ++;
	if ((_dl_symcache != NULL) &&
	     (symidx < req_obj->nchains) &&
	     (_dl_symcache[symidx].obj != NULL) &&
	     (_dl_symcache[symidx].sym != NULL) &&
	     (_dl_symcache[symidx].flags == flags)) {

		_dl_symcachestat_hits++;
		sobj = _dl_symcache[symidx].obj;
		*ref = _dl_symcache[symidx].sym;
		if (pobj)
			*pobj = sobj;
		return sobj->load_offs;
	}

	sym = req_obj->dyn.symtab;
	sym += symidx;
	symn = req_obj->dyn.strtab + sym->st_name;

	ret = _dl_find_symbol(symn, startlook, ref, &sobj,
	    flags, req_size, req_obj);

	if (pobj)
		*pobj = sobj;

	if ((_dl_symcache != NULL) &&
	     (symidx < req_obj->nchains)) {
		_dl_symcache[symidx].sym = *ref;
		_dl_symcache[symidx].obj = sobj;
		_dl_symcache[symidx].flags = flags;
	}

	return ret;
}

Elf_Addr
_dl_find_symbol(const char *name, elf_object_t *startlook,
    const Elf_Sym **ref, const elf_object_t **pobj,
    int flags, int req_size, elf_object_t *req_obj)
{
	const Elf_Sym *weak_sym = NULL;
	unsigned long h = 0;
	const char *p = name;
	elf_object_t *object, *weak_object = NULL;
	int found = 0;
	int lastchance = 0;

	while (*p) {
		unsigned long g;
		h = (h << 4) + *p++;
		if ((g = h & 0xf0000000))
			h ^= g >> 24;
		h &= ~g;
	}

	if (req_obj->dyn.symbolic)
		if (find_symbol_obj(req_obj, name, h, flags, ref, &weak_sym,
		    &weak_object)) {
			object = req_obj;
			found = 1;
			goto found;
		}

retry_nonglobal_dlo:
	for (object = startlook; object;
	    object = ((flags & SYM_SEARCH_SELF) ? 0 : object->next)) {

		if ((lastchance == 0) &&
		    ((object->obj_flags & RTLD_GLOBAL) == 0) &&
		    (object->obj_type == OBJTYPE_DLO) &&
		    (object != req_obj))
			continue;

		if (find_symbol_obj(object, name, h, flags, ref, &weak_sym,
		    &weak_object)) {
			found = 1;
			break;
		}
	}

found:
	if (weak_object != NULL && found == 0) {
		object=weak_object;
		*ref = weak_sym;
		found = 1;
	}

	if (found == 0) {
		if (lastchance == 0) {
			lastchance = 1;
			goto retry_nonglobal_dlo;
		}
		if (flags & SYM_WARNNOTFOUND)
			_dl_printf("%s:%s: undefined symbol '%s'\n",
			    _dl_progname, req_obj->load_name, name);
		return (0);
	}

	if (req_size != (*ref)->st_size && req_size != 0 &&
	    (ELF_ST_TYPE((*ref)->st_info) != STT_FUNC)) {
		_dl_printf("%s:%s: %s : WARNING: "
		    "symbol(%s) size mismatch, relink your program\n",
		    _dl_progname, req_obj->load_name,
		    object->load_name, name);
	}

	if (pobj)
		*pobj = object;

	return (object->load_offs);
}

int
find_symbol_obj(elf_object_t *object, const char *name, unsigned long hash,
    int flags, const Elf_Sym **ref, const Elf_Sym **weak_sym,
    elf_object_t **weak_object)
{
	const Elf_Sym	*symt = object->dyn.symtab;
	const char	*strt = object->dyn.strtab;
	long	si;
	const char *symn;

	for (si = object->buckets[hash % object->nbuckets];
	    si != STN_UNDEF; si = object->chains[si]) {
		const Elf_Sym *sym = symt + si;

		if (sym->st_value == 0)
			continue;

		if (ELF_ST_TYPE(sym->st_info) != STT_NOTYPE &&
		    ELF_ST_TYPE(sym->st_info) != STT_OBJECT &&
		    ELF_ST_TYPE(sym->st_info) != STT_FUNC)
			continue;

		symn = strt + sym->st_name;
		if (sym != *ref && _dl_strcmp(symn, name))
			continue;

		/* allow this symbol if we are referring to a function
		 * which has a value, even if section is UNDEF.
		 * this allows &func to refer to PLT as per the
		 * ELF spec. st_value is checked above.
		 * if flags has SYM_PLT set, we must have actual
		 * symbol, so this symbol is skipped.
		 */
		if (sym->st_shndx == SHN_UNDEF) {
			if ((flags & SYM_PLT) || sym->st_value == 0 ||
			    ELF_ST_TYPE(sym->st_info) != STT_FUNC)
				continue;
		}

		if (ELF_ST_BIND(sym->st_info) == STB_GLOBAL) {
			*ref = sym;
			return 1;
		} else if (ELF_ST_BIND(sym->st_info) == STB_WEAK) {
			if (!*weak_sym) {
				*weak_sym = sym;
				*weak_object = object;
			}
		}
	}
	return 0;
}
@


1.2
log
@* whitespace cleanup
* don't issue warnings about unable to resolve weak symbols
@
text
@d1 1
a1 1
/*	$OpenBSD: resolve.c,v 1.21 2003/09/04 19:33:48 drahn Exp $ */
a78 1

d146 4
d200 2
a201 1
    elf_object_t *startlook, const Elf_Sym **ref, int flags, int req_size)
d206 1
d211 1
d216 1
d218 3
a220 1
		return _dl_symcache[symidx].offset;
d227 5
a231 1
	ret = _dl_find_symbol(symn, startlook, ref, flags, req_size, req_obj);
d236 1
a236 1
		_dl_symcache[symidx].offset = ret;
d245 2
a246 1
    const Elf_Sym **ref, int flags, int req_size, elf_object_t *req_obj)
d313 3
@


1.1
log
@re-add a "not so important" directory that just went away
without telling me so.
It did even vanish from the CVS repository. I think, CVS
is buggy.
@
text
@d1 1
a1 1
/*	$OpenBSD: resolve.c,v 1.17 2003/02/02 16:57:58 deraadt Exp $ */
a13 6
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed under OpenBSD by
 *	Per Fogelstrom, Opsycon AB, Sweden.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
d43 26
a68 2
 * Initialize and add a new dynamic object to the object list.
 * Perform necessary relocations of pointers.
d71 1
a71 1
_dl_add_object(const char *objname, Elf_Dyn *dynp, const u_long *dl_data,
d81 1
a81 9

	object->next = NULL;
	if (_dl_objects == 0) {			/* First object ? */
		_dl_last_object = _dl_objects = object;
	} else {
		_dl_last_object->next = object;
		object->prev = _dl_last_object;
		_dl_last_object = object;
	}
d187 42
d232 1
a232 1
    const Elf_Sym **ref, int flags, int req_size, const char *module_name)
a234 2
	const char *weak_symn = NULL; /* remove warning */
	Elf_Addr weak_offs = 0;
d238 2
d249 9
a259 8
		const Elf_Sym	*symt = object->dyn.symtab;
		const char	*strt = object->dyn.strtab;
		long	si;
		const char *symn;

		for (si = object->buckets[h % object->nbuckets];
		    si != STN_UNDEF; si = object->chains[si]) {
			const Elf_Sym *sym = symt + si;
d261 41
a301 2
			if (sym->st_value == 0)
				continue;
d303 35
a337 2
			if (ELF_ST_TYPE(sym->st_info) != STT_NOTYPE &&
			    ELF_ST_TYPE(sym->st_info) != STT_OBJECT &&
d340 1
d342 7
a348 36
			symn = strt + sym->st_name;
			if (sym != *ref && _dl_strcmp(symn, name))
				continue;

			/* allow this symbol if we are referring to a function
			 * which has a value, even if section is UNDEF.
			 * this allows &func to refer to PLT as per the
			 * ELF spec. st_value is checked above.
			 * if flags has SYM_PLT set, we must have actual
			 * symbol, so this symbol is skipped.
			 */
			if (sym->st_shndx == SHN_UNDEF) {
				if ((flags & SYM_PLT) || sym->st_value == 0 ||
				    ELF_ST_TYPE(sym->st_info) != STT_FUNC)
					continue;
			}

			if (ELF_ST_BIND(sym->st_info) == STB_GLOBAL) {
				*ref = sym;
				if (req_size != sym->st_size &&
				    req_size != 0 &&
				    (ELF_ST_TYPE(sym->st_info) != STT_FUNC)) {
					_dl_printf("%s: %s : WARNING: "
					    "symbol(%s) size mismatch ",
					    _dl_progname, object->load_name,
					    symn);
					_dl_printf("relink your program\n");
				}
				return(object->load_offs);
			} else if (ELF_ST_BIND(sym->st_info) == STB_WEAK) {
				if (!weak_sym) {
					weak_sym = sym;
					weak_symn = symn;
					weak_offs = object->load_offs;
					weak_object = object;
				}
d352 1
a352 14
	if (flags & SYM_WARNNOTFOUND && weak_sym == NULL) {
		_dl_printf("%s:%s: undefined symbol '%s'\n",
		    _dl_progname, module_name, name);
	}
	*ref = weak_sym;
	if (weak_sym != NULL && req_size != weak_sym->st_size &&
	    req_size != 0 && (ELF_ST_TYPE(weak_sym->st_info) != STT_FUNC)) {
		_dl_printf("%s:%s: %s : WARNING: "
		    "symbol(%s) size mismatch ",
		    _dl_progname, module_name, weak_object->load_name,
		    weak_symn);
		_dl_printf("relink your program\n");
	}
	return (weak_offs);
@


1.1.1.1
log
@Import OpenBSD source with the "new" command line as well,
in order to be able to provide a MirBSD release which bases
upon a fairly current OpenBSD base source code tree deemed
stable enough.
@
text
@@


1.1.1.2
log
@sync with OpenBSD, this gives us a fair amount of fixes
@
text
@d1 1
a1 1
/*	$OpenBSD: resolve.c,v 1.18 2003/06/09 16:10:03 deraadt Exp $ */
d14 6
@


1.1.1.3
log
@the previous cvs import did not finish due to 'memory fault'
sync with OpenBSD-cvs
@
text
@d1 1
a1 1
/*	$OpenBSD: resolve.c,v 1.19 2003/06/22 21:39:01 drahn Exp $ */
d43 2
a44 26
 * Add a new dynamic object to the object list.
 */
void
_dl_add_object(elf_object_t *object)
{

	/*
	 * if this is a new object, prev will be NULL
	 * != NULL if an object already in the list
	 * prev == NULL for the first item in the list, but that will
	 * be the executable.
	 */
	if (object->prev != NULL)
		return;

	if (_dl_objects == NULL) {			/* First object ? */
		_dl_last_object = _dl_objects = object;
	} else {
		_dl_last_object->next = object;
		object->prev = _dl_last_object;
		_dl_last_object = object;
	}
}

/*
 * Initialize a new dynamic object.
d47 1
a47 1
_dl_finalize_object(const char *objname, Elf_Dyn *dynp, const u_long *dl_data,
d57 9
a65 1
	object->prev = object->next = NULL;
@


1.1.1.4
log
@Release Time. Synchronize with OpenBSD 3.4-current (base system).
@
text
@d1 1
a1 1
/*	$OpenBSD: resolve.c,v 1.21 2003/09/04 19:33:48 drahn Exp $ */
a186 42
int find_symbol_obj(elf_object_t *object, const char *name, unsigned long hash,
    int flags, const Elf_Sym **ref, const Elf_Sym **weak_sym,
    elf_object_t **weak_object);

sym_cache *_dl_symcache;
int _dl_symcachestat_hits;
int _dl_symcachestat_lookups;

Elf_Addr
_dl_find_symbol_bysym(elf_object_t *req_obj, unsigned int symidx,
    elf_object_t *startlook, const Elf_Sym **ref, int flags, int req_size)
{
	Elf_Addr ret;
	const Elf_Sym *sym;
	const char *symn;

	_dl_symcachestat_lookups ++;
	if ((_dl_symcache != NULL) &&
	     (symidx < req_obj->nchains) &&
	     (_dl_symcache[symidx].sym != NULL) &&
	     (_dl_symcache[symidx].flags == flags)) {

		_dl_symcachestat_hits++;
		*ref = _dl_symcache[symidx].sym;
		return _dl_symcache[symidx].offset;
	}

	sym = req_obj->dyn.symtab;
	sym += symidx;
	symn = req_obj->dyn.strtab + sym->st_name;

	ret = _dl_find_symbol(symn, startlook, ref, flags, req_size, req_obj);

	if ((_dl_symcache != NULL) &&
	     (symidx < req_obj->nchains)) {
		_dl_symcache[symidx].sym = *ref;
		_dl_symcache[symidx].offset = ret;
		_dl_symcache[symidx].flags = flags;
	}

	return ret;
}
d190 1
a190 1
    const Elf_Sym **ref, int flags, int req_size, elf_object_t *req_obj)
d193 2
a197 2
	int found = 0;
	int lastchance = 0;
a206 9
	if (req_obj->dyn.symbolic)
		if (find_symbol_obj(req_obj, name, h, flags, ref, &weak_sym,
		    &weak_object)) {
			object = req_obj;
			found = 1;
			goto found;
		}
		    
retry_nonglobal_dlo:
d209 8
d218 2
a219 12
		if ((lastchance == 0) &&
		    ((object->obj_flags & RTLD_GLOBAL) == 0) &&
		    (object->obj_type == OBJTYPE_DLO) &&
		    (object != req_obj)) 
			continue;

		if (find_symbol_obj(object, name, h, flags, ref, &weak_sym,
		    &weak_object)) {
			found = 1;
			break;
		}
	}
d221 4
a224 6
found:
	if (weak_object != NULL && found == 0) {
		object=weak_object;
		*ref = weak_sym;
		found = 1;
	}
d226 3
a228 10
	if (found == 0) {
		if (lastchance == 0) {
			lastchance = 1;
			goto retry_nonglobal_dlo;
		}
		if (flags & SYM_WARNNOTFOUND)
			_dl_printf("%s:%s: undefined symbol '%s'\n",
			    _dl_progname, req_obj->load_name, name);
		return (0);
	}
d230 12
a241 10
	if (req_size != (*ref)->st_size && req_size != 0 &&
	    (ELF_ST_TYPE((*ref)->st_info) != STT_FUNC)) {
		_dl_printf("%s:%s: %s : WARNING: "
		    "symbol(%s) size mismatch, relink your program\n",
		    _dl_progname, req_obj->load_name,
		    object->load_name, name);
	}

	return (object->load_offs);
}
d243 19
a261 46
int
find_symbol_obj(elf_object_t *object, const char *name, unsigned long hash,
    int flags, const Elf_Sym **ref, const Elf_Sym **weak_sym,
    elf_object_t **weak_object)
{
	const Elf_Sym	*symt = object->dyn.symtab;
	const char	*strt = object->dyn.strtab;
	long	si;
	const char *symn;

	for (si = object->buckets[hash % object->nbuckets];
	    si != STN_UNDEF; si = object->chains[si]) {
		const Elf_Sym *sym = symt + si;

		if (sym->st_value == 0)
			continue;

		if (ELF_ST_TYPE(sym->st_info) != STT_NOTYPE &&
		    ELF_ST_TYPE(sym->st_info) != STT_OBJECT &&
		    ELF_ST_TYPE(sym->st_info) != STT_FUNC)
			continue;

		symn = strt + sym->st_name;
		if (sym != *ref && _dl_strcmp(symn, name))
			continue;

		/* allow this symbol if we are referring to a function
		 * which has a value, even if section is UNDEF.
		 * this allows &func to refer to PLT as per the
		 * ELF spec. st_value is checked above.
		 * if flags has SYM_PLT set, we must have actual
		 * symbol, so this symbol is skipped.
		 */
		if (sym->st_shndx == SHN_UNDEF) {
			if ((flags & SYM_PLT) || sym->st_value == 0 ||
			    ELF_ST_TYPE(sym->st_info) != STT_FUNC)
				continue;
		}

		if (ELF_ST_BIND(sym->st_info) == STB_GLOBAL) {
			*ref = sym;
			return 1;
		} else if (ELF_ST_BIND(sym->st_info) == STB_WEAK) {
			if (!*weak_sym) {
				*weak_sym = sym;
				*weak_object = object;
d265 14
a278 1
	return 0;
@


1.1.1.5
log
@pretty kawaii ld.so
@
text
@d1 1
a1 1
/*	$OpenBSD: resolve.c,v 1.24 2004/07/05 00:47:40 kjell Exp $ */
d79 1
a146 4
	/* default dev, inode for dlopen-able objects. */
	object->dev = 0;
	object->inode = 0;

d197 1
a197 2
    elf_object_t *startlook, const Elf_Sym **ref, const elf_object_t **pobj,
    int flags, int req_size)
a201 1
	const elf_object_t *sobj;
a205 1
	     (_dl_symcache[symidx].obj != NULL) &&
a209 1
		sobj = _dl_symcache[symidx].obj;
d211 1
a211 3
		if (pobj)
			*pobj = sobj;
		return sobj->load_offs;
d218 1
a218 5
	ret = _dl_find_symbol(symn, startlook, ref, &sobj,
	    flags, req_size, req_obj);

	if (pobj)
		*pobj = sobj;
d223 1
a223 1
		_dl_symcache[symidx].obj = sobj;
d232 1
a232 2
    const Elf_Sym **ref, const elf_object_t **pobj,
    int flags, int req_size, elf_object_t *req_obj)
d256 1
a256 1

d264 1
a264 1
		    (object != req_obj))
a298 3

	if (pobj)
		*pobj = object;
@


