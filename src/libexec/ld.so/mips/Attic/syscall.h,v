head	1.2;
access;
symbols
	cvs-200405160640:1.1.1.3
	cvs-200401271800:1.1.1.3
	cvs-200401261630:1.1.1.3
	cvs-200401021645:1.1.1.3
	cvs-200312222040:1.1.1.3
	cvs-200310081815:1.1.1.3
	cvs-200310020700:1.1.1.3
	cvs-200309271030:1.1.1.3
	cvs-200309261610:1.1.1.3
	cvs-200309251530:1.1.1.3
	cvs-200308302005:1.1.1.3
	cvs-200308171200:1.1.1.3
	ctm-3496:1.1.1.3
	ctm-3449:1.1.1.3
	ctm-3437:1.1.1.3
	cvs-200307191805:1.1.1.3
	ctm-3425:1.1.1.3
	cvs-200307091500:1.1.1.3
	cvs-200307072125:1.1.1.3
	ctm-3389:1.1.1.2
	cvs-200307021520:1.1.1.2
	cvs-200306291430:1.1.1.2
	ctm-3341:1.1.1.2
	cvs-200306082100:1.1.1.1
	ctm-3316:1.1.1.1
	ctm-3272:1.1.1.1
	ctm-3264:1.1.1.1
	cvs-200305071630:1.1.1.1
	ctm-3255:1.1.1.1
	ctm-3229:1.1.1.1
	MIRBSD_4:1.1
	ctm-3203:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.2
date	2003.04.24.09.48.28;	author tg;	state dead;
branches;
next	1.1;

1.1
date	2003.03.27.14.19.06;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.04.15.17.35.51;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2003.06.19.12.41.19;	author tg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2003.07.07.21.27.32;	author tg;	state Exp;
branches;
next	;


desc
@@


1.2
log
@more non-i386
@
text
@/*	$OpenBSD: syscall.h,v 1.10 2002/10/23 12:38:29 pefo Exp $ */

/*
 * Copyright (c) 1998-2002 Opsycon AB, Sweden.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by Opsycon AB, Sweden.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS
 * OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 */
#ifndef __DL_SYSCALL_H__
#define __DL_SYSCALL_H__

#include <sys/stat.h>

#include <sys/syscall.h>

extern long _dl__syscall(quad_t val, ...);

#ifndef _dl_MAX_ERRNO
#define _dl_MAX_ERRNO 4096
#endif
#define _dl_check_error(__res)	\
	((int) __res < 0 && (int) __res >= -_dl_MAX_ERRNO)

/*
 *  Inlined system call functions that can be used before
 *  any dynamic address resolving has been done.
 */

extern inline int
_dl_exit (int status)
{
	register int __status __asm__ ("$2");

	__asm__ volatile (
	    "move  $2,%1\n\t"
	    "move  $4,%2\n\t"
	    "syscall"
	    : "=r" (__status)
	    : "0" (SYS_exit), "r" (status)
	    : "$2", "$3", "$4", "$5", "$6", "$7", "$8", "$9",
	    "$10","$11","$12","$13","$14","$15","$24","$25");
	while (1)
		;
}

extern inline int
_dl_open (const char* addr, int flags)
{
	register int status __asm__ ("$2");

	__asm__ volatile (
	    "move  $2,%1\n\t"
	    "move  $4,%2\n\t"
	    "move  $5,%3\n\t"
	    "syscall\n\t"
	    "beq   $7,$0,1f\n\t"
	    "li    $2,-1\n\t"
	    "1:"
	    : "=r" (status)
	    : "0" (SYS_open), "r" (addr), "r" (flags)
	    : "$2", "$3", "$4", "$5", "$6", "$7", "$8", "$9",
	    "$10","$11","$12","$13","$14","$15","$24","$25");
	return status;
}

extern inline int
_dl_close (int fd)
{
	register int status __asm__ ("$2");

	__asm__ volatile (
	    "move  $2,%1\n\t"
	    "move  $4,%2\n\t"
	    "syscall\n\t"
	    "beq   $7,$0,1f\n\t"
	    "li    $2,-1\n\t"
	    "1:"
	    : "=r" (status)
	    : "0" (SYS_close), "r" (fd)
	    : "$2", "$3", "$4", "$5", "$6", "$7", "$8", "$9",
	    "$10","$11","$12","$13","$14","$15","$24","$25");
	return status;
}

extern inline ssize_t
_dl_write (int fd, const char* buf, size_t len)
{
	register ssize_t status __asm__ ("$2");

	__asm__ volatile (
	    "move  $2,%1\n\t"
	    "move  $4,%2\n\t"
	    "move  $5,%3\n\t"
	    "move  $6,%4\n\t"
	    "syscall\n\t"
	    "beq   $7,$0,1f\n\t"
	    "li    $2,-1\n\t"
	    "1:"
	    : "=r" (status)
	    : "0" (SYS_write), "r" (fd), "r" (buf), "r" (len)
	    : "$2", "$3", "$4", "$5", "$6", "$7", "$8", "$9",
	    "$10","$11","$12","$13","$14","$15","$24","$25");
	return status;
}

extern inline ssize_t
_dl_read (int fd, const char* buf, size_t len)
{
	register ssize_t status __asm__ ("$2");

	__asm__ volatile (
	    "move  $2,%1\n\t"
	    "move  $4,%2\n\t"
	    "move  $5,%3\n\t"
	    "move  $6,%4\n\t"
	    "syscall\n\t"
	    "beq   $7,$0,1f\n\t"
	    "li    $2,-1\n\t"
	    "1:"
	    : "=r" (status)
	    : "0" (SYS_read), "r" (fd), "r" (buf), "r" (len)
	    : "$2", "$3", "$4", "$5", "$6", "$7", "$8", "$9",
	    "$10","$11","$12","$13","$14","$15","$24","$25");
	return status;
}

extern inline void *
_dl_mmap (void *addr, size_t size, int prot, int flags, int fd, off_t f_offset)
{
	register void * malloc_buffer __asm__ ("$2");

	__asm__ volatile (
	    "move  $2,%1\n\t"
	    "addiu $29,-40\n\t"
	    "move  $6,%2\n\t"
	    "move  $7,%3\n\t"
	    "sw    %4,16($29)\n\t"
	    "sw    %5,20($29)\n\t"
#ifdef __MIPSEL__
	    "li    $4,197\n\t"
	    "li    $5,0\n\t"
	    "sw    %6,24($29)\n\t"
	    "sw    $0,28($29)\n\t"
	    "sw    %7,32($29)\n\t"
	    "sw    $0,36($29)\n\t"
#endif
#ifdef __MIPSEB__
	    "li    $4,0\n\t"
	    "li    $5,197\n\t"
	    "sw    %6,24($29)\n\t"
	    "sw    $0,28($29)\n\t"
	    "sw    $0,32($29)\n\t"
	    "sw    %7,36($29)\n\t"
#endif
	    "syscall\n\t"
	    "addiu $29,40"
	    : "=r" (malloc_buffer)
	    : "0" (SYS___syscall), "r" (addr), "r" (size), "r" (prot),
	    "r" (flags), "r" (fd), "r" (f_offset)
	    : "$2", "$3", "$4", "$5", "$6", "$7", "$8", "$9",
	    "$10","$11","$12","$13","$14","$15","$24","$25");
	return malloc_buffer;
}

extern inline int
_dl_munmap (const void* addr, size_t len)
{
	register int status __asm__ ("$2");

	__asm__ volatile (
	    "move  $2,%1\n\t"
	    "move  $4,%2\n\t"
	    "move  $5,%3\n\t"
	    "syscall\n\t"
	    "beq   $7,$0,1f\n\t"
	    "li    $2,-1\n\t"
	    "1:"
	    : "=r" (status)
	    : "0" (SYS_munmap), "r" (addr), "r" (len)
	    : "$2", "$3", "$4", "$5", "$6", "$7", "$8", "$9",
	    "$10","$11","$12","$13","$14","$15","$24","$25");
	return status;
}

extern inline int
_dl_mprotect (const void *addr, size_t size, int prot)
{
	register int status __asm__ ("$2");

	__asm__ volatile (
	    "move  $2,%1\n\t"
	    "move  $4,%2\n\t"
	    "move  $5,%3\n\t"
	    "move  $6,%4\n\t"
	    "syscall"
	    : "=r" (status)
	    : "0" (SYS_mprotect), "r" (addr), "r" (size), "r" (prot)
	    : "$2", "$3", "$4", "$5", "$6", "$7", "$8", "$9",
	    "$10","$11","$12","$13","$14","$15","$24","$25");
	return status;
}

extern inline int
_dl_stat (const char *addr, struct stat *sb)
{
	register int status __asm__ ("$2");

	__asm__ volatile (
	    "move  $2,%1\n\t"
	    "move  $4,%2\n\t"
	    "move  $5,%3\n\t"
	    "syscall"
	    : "=r" (status)
	    : "0" (SYS_stat), "r" (addr), "r" (sb)
	    : "$2", "$3", "$4", "$5", "$6", "$7", "$8", "$9",
	    "$10","$11","$12","$13","$14","$15","$24","$25");
	return status;
}

extern inline int
_dl_fstat (const int fd, struct stat *sb)
{
	register int status __asm__ ("$2");

	__asm__ volatile (
	    "move  $2,%1\n\t"
	    "move  $4,%2\n\t"
	    "move  $5,%3\n\t"
	    "syscall"
	    : "=r" (status)
	    : "0" (SYS_fstat), "r" (fd), "r" (sb)
	    : "$2", "$3", "$4", "$5", "$6", "$7", "$8", "$9",
	    "$10","$11","$12","$13","$14","$15","$24","$25");
	return status;
}

extern inline ssize_t
_dl_fcntl (int fd, int cmd, int flag)
{
	register int status __asm__ ("$2");

	__asm__ volatile (
	    "move  $2,%1\n\t"
	    "move  $4,%2\n\t"
	    "move  $5,%3\n\t"
	    "move  $6,%4\n\t"
	    "syscall\n\t"
	    "beq   $7,$0,1f\n\t"
	    "li    $2,-1\n\t"
	    "1:"
	    : "=r" (status)
	    : "0" (SYS_fcntl), "r" (fd), "r" (cmd), "r" (flag)
	    : "$2", "$3", "$4", "$5", "$6", "$7", "$8", "$9",
	    "$10","$11","$12","$13","$14","$15","$24","$25");
	return status;
}

extern inline ssize_t
_dl_getdirentries (int fd, char *buf, int nbytes, long *basep)
{
	register int status __asm__ ("$2");

	__asm__ volatile ("move  $2,%1\n\t"
	    "move  $4,%2\n\t"
	    "move  $5,%3\n\t"
	    "move  $6,%4\n\t"
	    "move  $7,%5\n\t"
	    "syscall\n\t"
	    "beq   $7,$0,1f\n\t"
	    "li    $2,-1\n\t"
	    "1:"
	    : "=r" (status)
	    : "0" (SYS_getdirentries), "r" (fd), "r" (buf), "r" (nbytes), "r" (basep)
	    : "$2", "$3", "$4", "$5", "$6", "$7", "$8", "$9",
	    "$10","$11","$12","$13","$14","$15","$24","$25");
	return status;
}

extern inline int
_dl_issetugid (void)
{
	register int status __asm__ ("$2");

	__asm__ volatile (
	    "move  $2,%1\n\t"
	    "syscall"
	    : "=r" (status)
	    : "0" (SYS_issetugid)
	    : "$2", "$3", "$4", "$5", "$6", "$7", "$8", "$9",
	    "$10","$11","$12","$13","$14","$15","$24","$25");
	return status;
}

extern inline off_t
_dl_lseek (int fd, off_t offset, int whence)
{
	return _dl__syscall((quad_t)SYS_lseek, fd, 0, offset, whence);
}
#endif /*__DL_SYSCALL_H__*/
@


1.1
log
@re-add a "not so important" directory that just went away
without telling me so.
It did even vanish from the CVS repository. I think, CVS
is buggy.
@
text
@@


1.1.1.1
log
@Import OpenBSD source with the "new" command line as well,
in order to be able to provide a MirBSD release which bases
upon a fairly current OpenBSD base source code tree deemed
stable enough.
@
text
@@


1.1.1.2
log
@sync with OpenBSD, this gives us a fair amount of fixes
@
text
@d1 1
a1 1
/*	$OpenBSD: syscall.h,v 1.11 2003/06/09 16:10:04 deraadt Exp $ */
d14 5
@


1.1.1.3
log
@Sync some stuff with OpenBSD
@
text
@d1 1
a1 1
/*	$OpenBSD: syscall.h,v 1.12 2003/07/06 20:04:00 deraadt Exp $ */
d49 1
a49 1
_dl_exit(int status)
d66 1
a66 1
_dl_open(const char* addr, int flags)
d86 1
a86 1
_dl_close(int fd)
d105 1
a105 1
_dl_write(int fd, const char* buf, size_t len)
d126 1
a126 1
_dl_read(int fd, const char* buf, size_t len)
d147 1
a147 1
_dl_mmap(void *addr, size_t size, int prot, int flags, int fd, off_t f_offset)
d185 1
a185 1
_dl_munmap(const void* addr, size_t len)
d205 1
a205 1
_dl_mprotect(const void *addr, size_t size, int prot)
d223 1
a223 1
_dl_stat(const char *addr, struct stat *sb)
d240 1
a240 1
_dl_fstat(const int fd, struct stat *sb)
d257 1
a257 1
_dl_fcntl(int fd, int cmd, int flag)
d278 1
a278 1
_dl_getdirentries(int fd, char *buf, int nbytes, long *basep)
d299 1
a299 1
_dl_issetugid(void)
d314 1
a314 1
_dl_lseek(int fd, off_t offset, int whence)
@


