head	1.3;
branch	1.1.1;
access;
symbols
	tg-mergetmp-mirosx-1:1.1.1.6
	tg-mergefixes-1-branch:1.1.1.6.0.6
	tg-mergefixes-1-base:1.1.1.6
	MIROS_X:1.1.1.6.0.4
	MIROS_X_BASE:1.1.1.6
	tg-mergetmp-3:1.1.1.6
	cvs-200412031430:1.1.1.6
	MIRBSD_XP_MIRPPC:1.1.1.6.0.2
	cvs-200410171015:1.1.1.6
	cvs-200410141645:1.1.1.6
	cvs-200405160640:1.1.1.6
	cvs-200401271800:1.1.1.6
	cvs-200401261630:1.1.1.6
	cvs-200401021645:1.1.1.5
	cvs-200312222040:1.1.1.5
	cvs-200310081815:1.1.1.4
	cvs-200310020700:1.1.1.4
	cvs-200309271030:1.1.1.4
	cvs-200309261610:1.1.1.4
	cvs-200309251530:1.1.1.4
	cvs-200308302005:1.1.1.4
	cvs-200308171200:1.1.1.4
	ctm-3496:1.1.1.4
	ctm-3449:1.1.1.4
	ctm-3437:1.1.1.4
	cvs-200307191805:1.1.1.4
	ctm-3425:1.1.1.4
	cvs-200307091500:1.1.1.4
	cvs-200307072125:1.1.1.4
	ctm-3389:1.1.1.3
	cvs-200307021520:1.1.1.3
	cvs-200306291430:1.1.1.3
	ctm-3341:1.1.1.3
	cvs-200306082100:1.1.1.2
	ctm-3316:1.1.1.2
	ctm-3272:1.1.1.1
	ctm-3264:1.1.1.1
	cvs-200305071630:1.1.1.1
	ctm-3255:1.1.1.1
	ctm-3229:1.1.1.1
	MIRBSD_4:1.1
	ctm-3203:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.3
date	2004.11.13.21.05.48;	author tg;	state Exp;
branches;
next	1.2;

1.2
date	2003.04.24.09.48.28;	author tg;	state dead;
branches;
next	1.1;

1.1
date	2003.03.27.14.19.06;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.04.15.17.35.51;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2003.06.05.17.29.35;	author tg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2003.06.19.12.41.19;	author tg;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2003.07.07.21.27.33;	author tg;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2003.12.22.21.09.29;	author tg;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2004.01.26.18.25.10;	author tg;	state Exp;
branches;
next	;


desc
@@


1.3
log
@shave some off my work for the first MirHackathon and let
the zombies walk around for bsiegert@@'s voodoo
@
text
@/*	$OpenBSD: syscall.h,v 1.19 2004/01/12 02:21:21 drahn Exp $ */

/*
 * Copyright (c) 1998 Per Fogelstrom, Opsycon AB
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS
 * OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 */
#ifndef __DL_SYSCALL_H__
#define __DL_SYSCALL_H__

#include <sys/stat.h>

#include <sys/syscall.h>
#include <sys/signal.h>


static off_t	_dl_lseek(int, off_t, int);

#ifndef _dl_MAX_ERRNO
#define _dl_MAX_ERRNO 4096
#endif
#define _dl_check_error(__res) \
	((int) __res < 0 && (int) __res >= -_dl_MAX_ERRNO)

/*
 *  Inlined system call functions that can be used before
 *  any dynamic address resolving has been done.
 */

static inline void
_dl_exit(int status)
{
	register int __status;

	__asm__ volatile ("li  0,%1\n\t"
	    "mr  3,%2\n\t"
	    "sc"
	    : "=r" (__status)
	    : "I" (SYS_exit), "r" (status) : "0", "3");

	while (1)
		;
}

static inline int
_dl_open(const char* addr, int flags)
{
	register int status;

	__asm__ volatile ("li    0,%1\n\t"
	    "mr    3,%2\n\t"
	    "mr    4,%3\n\t"
	    "sc\n\t"
	    "cmpwi   0, 0\n\t"
	    "beq   1f\n\t"
	    "li    3,-1\n\t"
	    "1:"
	    "mr   %0,3\n\t"
	    : "=r" (status)
	    : "I" (SYS_open), "r" (addr), "r" (flags)
	    : "0", "3", "4" );
	return status;
}

static inline int
_dl_close(int fd)
{
	register int status;

	__asm__ volatile ("li    0,%1\n\t"
	    "mr    3,%2\n\t"
	    "sc\n\t"
	    "cmpwi   0, 0\n\t"
	    "beq   1f\n\t"
	    "li    3,-1\n\t"
	    "1:"
	    "mr   %0,3\n\t"
	    : "=r" (status)
	    : "I" (SYS_close), "r" (fd)
	    : "0", "3");
	return status;
}

static inline ssize_t
_dl_write(int fd, const char* buf, size_t len)
{
	register ssize_t status;

	__asm__ volatile ("li    0,%1\n\t"
	    "mr    3,%2\n\t"
	    "mr    4,%3\n\t"
	    "mr    5,%4\n\t"
	    "sc\n\t"
	    "cmpwi   0, 0\n\t"
	    "beq   1f\n\t"
	    "li    3,-1\n\t"
	    "1:"
	    "mr   %0,3\n\t"
	    : "=r" (status)
	    : "I" (SYS_write), "r" (fd), "r" (buf), "r" (len)
	    : "0", "3", "4", "5" );
	return status;
}

static inline ssize_t
_dl_read(int fd, const char* buf, size_t len)
{
	register ssize_t status;

	__asm__ volatile ("li    0,%1\n\t"
	    "mr    3,%2\n\t"
	    "mr    4,%3\n\t"
	    "mr    5,%4\n\t"
	    "sc\n\t"
	    "cmpwi   0, 0\n\t"
	    "beq   1f\n\t"
	    "li    3,-1\n\t"
	    "1:"
	    "mr   %0,3\n\t"
	    : "=r" (status)
	    : "I" (SYS_read), "r" (fd), "r" (buf), "r" (len)
	    : "0", "3", "4", "5");
	return status;
}

#define STRINGIFY(x)  #x
#define XSTRINGIFY(x) STRINGIFY(x)
long _dl__syscall(quad_t val, ...);

static inline void *
_dl_mmap(void *addr, size_t len, int prot, int flags, int fd, off_t offset)
{
	return((void *)_dl__syscall((quad_t)SYS_mmap, addr, len, prot,
	    flags, fd, 0, offset));
}

static inline int
_dl_munmap(const void* addr, size_t len)
{
	register int status;

	__asm__ volatile ("li    0,%1\n\t"
	    "mr    3,%2\n\t"
	    "mr    4,%3\n\t"
	    "sc\n\t"
	    "cmpwi   0, 0\n\t"
	    "beq   1f\n\t"
	    "li    3,-1\n\t"
	    "1:"
	    "mr   %0,3\n\t"
	    : "=r" (status)
	    : "I" (SYS_munmap), "r" (addr), "r" (len)
	    : "0", "3", "4");
	return status;
}

static inline int
_dl_mprotect(const void *addr, size_t size, int prot)
{
	register int status;

	__asm__ volatile ("li    0,%1\n\t"
	    "mr    3,%2\n\t"
	    "mr    4,%3\n\t"
	    "mr    5,%4\n\t"
	    "sc\n\t"
	    "cmpwi   0, 0\n\t"
	    "beq   1f\n\t"
	    "li    3,-1\n\t"
	    "1:"
	    "mr   %0,3\n\t"
	    : "=r" (status)
	    : "I" (SYS_mprotect), "r" (addr), "r" (size), "r" (prot)
	    : "0", "3", "4", "5");
	return status;
}

static inline int
_dl_stat(const char *addr, struct stat *sb)
{
	register int status;

	__asm__ volatile ("li    0,%1\n\t"
	    "mr    3,%2\n\t"
	    "mr    4,%3\n\t"
	    "sc\n\t"
	    "cmpwi   0, 0\n\t"
	    "beq   1f\n\t"
	    "li    3,-1\n\t"
	    "1:"
	    "mr   %0,3\n\t"
	    : "=r" (status)
	    : "I" (SYS_stat), "r" (addr), "r" (sb)
	    : "0", "3", "4");
	return status;
}

static inline int
_dl_fstat(int fd, struct stat *sb)
{
	register int status;

	__asm__ volatile ("li    0,%1\n\t"
	    "mr    3,%2\n\t"
	    "mr    4,%3\n\t"
	    "sc\n\t"
	    "cmpwi   0, 0\n\t"
	    "beq   1f\n\t"
	    "li    3,-1\n\t"
	    "1:"
	    "mr   %0,3\n\t"
	    : "=r" (status)
	    : "I" (SYS_fstat), "r" (fd), "r" (sb)
	    : "0", "3", "4");
	return status;
}

static inline int
_dl_fcntl(int fd, int cmd, int flag)
{
	register int status;

	__asm__ volatile ("li    0,%1\n\t"
	    "mr    3,%2\n\t"
	    "mr    4,%3\n\t"
	    "mr    5,%4\n\t"
	    "sc\n\t"
	    "cmpwi   0, 0\n\t"
	    "beq   1f\n\t"
	    "li    3,-1\n\t"
	    "1:"
	    : "=r" (status)
	    : "I" (SYS_fcntl), "r" (fd), "r" (cmd), "r"(flag)
	    : "0", "3", "4", "5");
	return status;
}

static inline int
_dl_getdirentries(int fd, char *buf, int nbytes, long *basep)
{
	register int status;

	__asm__ volatile ("li    0,%1\n\t"
	    "mr    3,%2\n\t"
	    "mr    4,%3\n\t"
	    "mr    5,%4\n\t"
	    "mr    6,%5\n\t"
	    "sc\n\t"
	    "cmpwi   0, 0\n\t"
	    "beq   1f\n\t"
	    "li    3,-1\n\t"
	    "1:"
	    "mr   %0,3\n\t"
	    : "=r" (status)
	    : "I" (SYS_getdirentries), "r" (fd), "r" (buf), "r"(nbytes),
	    "r" (basep)
	    : "0", "3", "4", "5", "6");
	return status;
}

static inline int
_dl_issetugid(void)
{
	register int status;

	__asm__ volatile ("li    0,%1\n\t"
	    "sc\n\t"
	    "cmpwi   0, 0\n\t"
	    "beq   1f\n\t"
	    "li    3,-1\n\t"
	    "1:"
	    "mr   %0,3\n\t"
	    : "=r" (status)
	    : "I" (SYS_issetugid)
	    : "0", "3");
	return status;
}

static inline off_t
_dl_lseek(int fildes, off_t offset, int whence)
{
	return _dl__syscall((quad_t)SYS_lseek, fildes, 0, offset, whence);
}

static inline int
_dl_sigprocmask(int how, const sigset_t *set, sigset_t *oset)
{
	sigset_t sig_store;
	sigset_t sig_store1;

	if (set != NULL) {
		sig_store1 = *set;
	} else {
		sig_store1 = 0;
	}

	__asm__ volatile ("li    0,%1\n\t"
	    "mr    3,%2\n\t"
	    "mr    4,%3\n\t"
	    "sc\n\t"
	    "mr    %0, 3"
	    : "=r" (sig_store)
	    : "I" (SYS_sigprocmask), "r" (how), "r" (sig_store1)
	    : "0", "3", "4");
	if (oset != NULL)
		*oset = sig_store;

	return 0;
}
static inline int
_dl_sysctl(int *name, u_int namelen, void *oldp, size_t *oldplen, void *newp,
    size_t newlen)
{
	register int status;

	__asm__ volatile ("li    0,%1\n\t"
	    "mr    3,%2\n\t"
	    "mr    4,%3\n\t"
	    "mr    5,%4\n\t"
	    "mr    6,%5\n\t"
	    "mr    7,%6\n\t"
	    "mr    8,%7\n\t"
	    "sc\n\t"
	    "cmpwi   0, 0\n\t"
	    "beq   1f\n\t"
	    "li    3,-1\n\t"
	    "1:"
	    "mr   %0,3\n\t"
	    : "=r" (status)
	    : "I" (SYS___sysctl), "r" (name), "r" (namelen), "r" (oldp),
	    "r" (oldplen), "r" (newp), "r" (newlen)
	    : "0", "3", "4", "5", "6", "7", "8");
	return status;
}

#endif /*__DL_SYSCALL_H__*/
@


1.2
log
@more non-i386
@
text
@d1 1
a1 1
/*	$OpenBSD: syscall.h,v 1.14 2002/12/18 19:20:02 drahn Exp $ */
a13 6
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed under OpenBSD by
 *	Per Fogelstrom, Opsycon AB, Sweden.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
d50 2
a51 2
static inline int
_dl_exit (int status)
d53 1
a53 1
	register int __status __asm__ ("3");
d55 1
a55 1
	__asm__ volatile ("mr  0,%1\n\t"
d59 1
a59 1
	    : "r" (SYS_exit), "r" (status) : "0", "3");
d66 1
a66 1
_dl_open (const char* addr, int flags)
d68 1
a68 1
	register int status __asm__ ("3");
d70 1
a70 1
	__asm__ volatile ("mr    0,%1\n\t"
d78 1
d80 1
a80 1
	    : "r" (SYS_open), "r" (addr), "r" (flags)
d86 1
a86 1
_dl_close (int fd)
d88 1
a88 1
	register int status __asm__ ("3");
d90 1
a90 1
	__asm__ volatile ("mr    0,%1\n\t"
d97 1
d99 1
a99 1
	    : "r" (SYS_close), "r" (fd)
d105 1
a105 1
_dl_write (int fd, const char* buf, size_t len)
d107 1
a107 1
	register ssize_t status __asm__ ("3");
d109 1
a109 1
	__asm__ volatile ("mr    0,%1\n\t"
d118 1
d120 1
a120 1
	    : "r" (SYS_write), "r" (fd), "r" (buf), "r" (len)
d126 1
a126 1
_dl_read (int fd, const char* buf, size_t len)
d128 1
a128 1
	register ssize_t status __asm__ ("3");
d130 1
a130 1
	__asm__ volatile ("mr    0,%1\n\t"
d139 1
d141 1
a141 1
	    : "r" (SYS_read), "r" (fd), "r" (buf), "r" (len)
a148 10
__asm__(".align 2\n\t"
	".type _dl__syscall,@@function\n"
	"_dl__syscall:\n\t"
	"li 0, " XSTRINGIFY(SYS___syscall) "\n\t"
	"sc\n\t"
	"cmpwi	0, 0\n\t"
	"beq	1f\n\t"
	"li	3, -1\n\t"
	"1:\n\t"
	"blr");
d151 1
a151 1
_dl_mmap (void *addr, size_t len, int prot, int flags, int fd, off_t offset)
d158 1
a158 1
_dl_munmap (const void* addr, size_t len)
d160 1
a160 1
	register int status __asm__ ("3");
d162 1
a162 1
	__asm__ volatile ("mr    0,%1\n\t"
d170 1
d172 1
a172 1
	    : "r" (SYS_munmap), "r" (addr), "r" (len)
d178 1
a178 1
_dl_mprotect (const void *addr, size_t size, int prot)
d180 1
a180 1
	register int status __asm__ ("3");
d182 1
a182 1
	__asm__ volatile ("mr    0,%1\n\t"
d191 1
d193 1
a193 1
	    : "r" (SYS_mprotect), "r" (addr), "r" (size), "r" (prot)
d199 1
a199 1
_dl_stat (const char *addr, struct stat *sb)
d201 1
a201 1
	register int status __asm__ ("3");
d203 1
a203 1
	__asm__ volatile ("mr    0,%1\n\t"
d211 1
d213 1
a213 1
	    : "r" (SYS_stat), "r" (addr), "r" (sb)
d219 1
a219 1
_dl_fstat (int fd, struct stat *sb)
d221 1
a221 1
	register int status __asm__ ("3");
d223 1
a223 1
	__asm__ volatile ("mr    0,%1\n\t"
d231 1
d233 1
a233 1
	    : "r" (SYS_fstat), "r" (fd), "r" (sb)
d239 1
a239 1
_dl_fcntl (int fd, int cmd, int flag)
d241 1
a241 1
	register int status __asm__ ("3");
d243 1
a243 1
	__asm__ volatile ("mr    0,%1\n\t"
d253 1
a253 1
	    : "r" (SYS_fcntl), "r" (fd), "r" (cmd), "r"(flag)
d261 1
a261 1
	register int status __asm__ ("3");
d263 1
a263 1
	__asm__ volatile ("mr    0,%1\n\t"
d273 1
d275 1
a275 1
	    : "r" (SYS_getdirentries), "r" (fd), "r" (buf), "r"(nbytes),
d282 1
a282 1
_dl_issetugid()
d284 1
a284 1
	register int status __asm__ ("3");
d286 1
a286 1
	__asm__ volatile ("mr    0,%1\n\t"
d292 1
d294 1
a294 1
	    : "r" (SYS_issetugid)
d306 1
a306 1
_dl_sigprocmask (int how, const sigset_t *set, sigset_t *oset)
d310 1
d330 26
@


1.1
log
@re-add a "not so important" directory that just went away
without telling me so.
It did even vanish from the CVS repository. I think, CVS
is buggy.
@
text
@@


1.1.1.1
log
@Import OpenBSD source with the "new" command line as well,
in order to be able to provide a MirBSD release which bases
upon a fairly current OpenBSD base source code tree deemed
stable enough.
@
text
@@


1.1.1.2
log
@Import latest OpenBSD CVS tree by CTM in order
to sync the base system and ports tree with Them.

This includes the recent licence changes as well - by
importing the changed base and re-applying the diffs
(with cvs up -j -j) they are inherited, and we're not
bound to the removed clauses any longer.
@
text
@d1 1
a1 1
/*	$OpenBSD: syscall.h,v 1.15 2003/05/30 01:13:53 drahn Exp $ */
a334 26
static inline int
_dl_sysctl(int *name, u_int namelen, void *oldp, size_t *oldplen, void *newp,
    size_t newlen)
{
	register int status __asm__ ("3");

	__asm__ volatile ("mr    0,%1\n\t"
	    "mr    3,%2\n\t"
	    "mr    4,%3\n\t"
	    "mr    5,%4\n\t"
	    "mr    6,%5\n\t"
	    "mr    7,%6\n\t"
	    "mr    8,%7\n\t"
	    "sc\n\t"
	    "cmpwi   0, 0\n\t"
	    "beq   1f\n\t"
	    "li    3,-1\n\t"
	    "1:"
	    : "=r" (status)
	    : "r" (SYS___sysctl), "r" (name), "r" (namelen), "r" (oldp),
	    "r" (oldplen), "r" (newp), "r" (newlen)
	    : "0", "3", "4", "5", "6", "7", "8");
	return status;
	
}

@


1.1.1.3
log
@sync with OpenBSD, this gives us a fair amount of fixes
@
text
@d1 1
a1 1
/*	$OpenBSD: syscall.h,v 1.16 2003/06/09 16:10:04 deraadt Exp $ */
d14 6
@


1.1.1.4
log
@Sync some stuff with OpenBSD
@
text
@d1 1
a1 1
/*	$OpenBSD: syscall.h,v 1.17 2003/07/06 20:04:00 deraadt Exp $ */
d51 1
a51 1
_dl_exit(int status)
d66 1
a66 1
_dl_open(const char* addr, int flags)
d85 1
a85 1
_dl_close(int fd)
d103 1
a103 1
_dl_write(int fd, const char* buf, size_t len)
d123 1
a123 1
_dl_read(int fd, const char* buf, size_t len)
d157 1
a157 1
_dl_mmap(void *addr, size_t len, int prot, int flags, int fd, off_t offset)
d164 1
a164 1
_dl_munmap(const void* addr, size_t len)
d183 1
a183 1
_dl_mprotect(const void *addr, size_t size, int prot)
d203 1
a203 1
_dl_stat(const char *addr, struct stat *sb)
d222 1
a222 1
_dl_fstat(int fd, struct stat *sb)
d241 1
a241 1
_dl_fcntl(int fd, int cmd, int flag)
d283 1
a283 1
_dl_issetugid(void)
d306 1
a306 1
_dl_sigprocmask(int how, const sigset_t *set, sigset_t *oset)
a309 1

d352 1
@


1.1.1.5
log
@Time to import OpenBSD once again. Expect breakage.
@
text
@d1 1
a1 1
/*	$OpenBSD: syscall.h,v 1.18 2003/12/03 17:00:15 drahn Exp $ */
d145 10
@


1.1.1.6
log
@Import OpenBSD as of today again (seems pretty stable, I hope)

Prominent changes: more bgpd, tcpmd5; tcpdump/isakmpd fixes
@
text
@d1 1
a1 1
/*	$OpenBSD: syscall.h,v 1.19 2004/01/12 02:21:21 drahn Exp $ */
d50 1
a50 1
static inline void
d53 1
a53 1
	register int __status;
d55 1
a55 1
	__asm__ volatile ("li  0,%1\n\t"
d59 1
a59 1
	    : "I" (SYS_exit), "r" (status) : "0", "3");
d68 1
a68 1
	register int status;
d70 1
a70 1
	__asm__ volatile ("li    0,%1\n\t"
a77 1
	    "mr   %0,3\n\t"
d79 1
a79 1
	    : "I" (SYS_open), "r" (addr), "r" (flags)
d87 1
a87 1
	register int status;
d89 1
a89 1
	__asm__ volatile ("li    0,%1\n\t"
a95 1
	    "mr   %0,3\n\t"
d97 1
a97 1
	    : "I" (SYS_close), "r" (fd)
d105 1
a105 1
	register ssize_t status;
d107 1
a107 1
	__asm__ volatile ("li    0,%1\n\t"
a115 1
	    "mr   %0,3\n\t"
d117 1
a117 1
	    : "I" (SYS_write), "r" (fd), "r" (buf), "r" (len)
d125 1
a125 1
	register ssize_t status;
d127 1
a127 1
	__asm__ volatile ("li    0,%1\n\t"
a135 1
	    "mr   %0,3\n\t"
d137 1
a137 1
	    : "I" (SYS_read), "r" (fd), "r" (buf), "r" (len)
d156 1
a156 1
	register int status;
d158 1
a158 1
	__asm__ volatile ("li    0,%1\n\t"
a165 1
	    "mr   %0,3\n\t"
d167 1
a167 1
	    : "I" (SYS_munmap), "r" (addr), "r" (len)
d175 1
a175 1
	register int status;
d177 1
a177 1
	__asm__ volatile ("li    0,%1\n\t"
a185 1
	    "mr   %0,3\n\t"
d187 1
a187 1
	    : "I" (SYS_mprotect), "r" (addr), "r" (size), "r" (prot)
d195 1
a195 1
	register int status;
d197 1
a197 1
	__asm__ volatile ("li    0,%1\n\t"
a204 1
	    "mr   %0,3\n\t"
d206 1
a206 1
	    : "I" (SYS_stat), "r" (addr), "r" (sb)
d214 1
a214 1
	register int status;
d216 1
a216 1
	__asm__ volatile ("li    0,%1\n\t"
a223 1
	    "mr   %0,3\n\t"
d225 1
a225 1
	    : "I" (SYS_fstat), "r" (fd), "r" (sb)
d233 1
a233 1
	register int status;
d235 1
a235 1
	__asm__ volatile ("li    0,%1\n\t"
d245 1
a245 1
	    : "I" (SYS_fcntl), "r" (fd), "r" (cmd), "r"(flag)
d253 1
a253 1
	register int status;
d255 1
a255 1
	__asm__ volatile ("li    0,%1\n\t"
a264 1
	    "mr   %0,3\n\t"
d266 1
a266 1
	    : "I" (SYS_getdirentries), "r" (fd), "r" (buf), "r"(nbytes),
d275 1
a275 1
	register int status;
d277 1
a277 1
	__asm__ volatile ("li    0,%1\n\t"
a282 1
	    "mr   %0,3\n\t"
d284 1
a284 1
	    : "I" (SYS_issetugid)
d324 1
a324 1
	register int status;
d326 1
a326 1
	__asm__ volatile ("li    0,%1\n\t"
a337 1
	    "mr   %0,3\n\t"
d339 1
a339 1
	    : "I" (SYS___sysctl), "r" (name), "r" (namelen), "r" (oldp),
@


