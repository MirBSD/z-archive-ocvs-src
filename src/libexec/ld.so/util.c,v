head	1.1;
branch	1.1.1;
access;
symbols
	tg-mergetmp-mirosx-1:1.1.1.6
	tg-mergefixes-1-branch:1.1.1.6.0.4
	tg-mergefixes-1-base:1.1.1.6
	MIROS_X:1.1.1.6.0.2
	MIROS_X_BASE:1.1.1.6
	tg-mergetmp-3:1.1.1.6
	cvs-200412031430:1.1.1.6
	MIRBSD_XP_MIRPPC:1.1.1.5.0.4
	cvs-200410171015:1.1.1.6
	cvs-200410141645:1.1.1.6
	MIRBSD_XP_SPARC_BASE:1.1.1.5
	MIRBSD_XP_SPARC:1.1.1.5.0.2
	MIRBSD_7quater:1.1.1.4
	cvs-200405160640:1.1.1.5
	cvs-200401271800:1.1.1.4
	cvs-200401261630:1.1.1.4
	cvs-200401021645:1.1.1.4
	MIRBSD_7_ALPHA:1.1.1.4.0.6
	MIRBSD_7:1.1.1.4.0.4
	cvs-200312222040:1.1.1.4
	MIRBSD_7ter:1.1.1.4
	MIRBSD_7_DEV:1.1.1.4.0.2
	cvs-200310081815:1.1.1.4
	cvs-200310020700:1.1.1.4
	cvs-200309271030:1.1.1.4
	cvs-200309261610:1.1.1.4
	cvs-200309251530:1.1.1.4
	cvs-200308302005:1.1.1.4
	cvs-200308171200:1.1.1.4
	ctm-3496:1.1.1.4
	ctm-3449:1.1.1.4
	ctm-3437:1.1.1.4
	cvs-200307191805:1.1.1.4
	ctm-3425:1.1.1.4
	cvs-200307091500:1.1.1.4
	cvs-200307072125:1.1.1.4
	ctm-3389:1.1.1.3
	cvs-200307021520:1.1.1.3
	cvs-200306291430:1.1.1.3
	ctm-3341:1.1.1.3
	MIRBSD_5:1.1.1.2
	cvs-200306082100:1.1.1.2
	ctm-3316:1.1.1.2
	ctm-3272:1.1.1.1
	ctm-3264:1.1.1.1
	cvs-200305071630:1.1.1.1
	ctm-3255:1.1.1.1
	ctm-3229:1.1.1.1
	MIRBSD_4:1.1
	ctm-3203:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.1
date	2003.03.27.14.19.03;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.04.15.17.35.51;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2003.06.05.17.29.33;	author tg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2003.06.19.12.41.18;	author tg;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2003.07.07.21.27.31;	author tg;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2004.05.16.08.16.24;	author tg;	state Stab;
branches;
next	1.1.1.6;

1.1.1.6
date	2004.10.14.17.15.46;	author tg;	state Exp;
branches;
next	;


desc
@@


1.1
log
@re-add a "not so important" directory that just went away
without telling me so.
It did even vanish from the CVS repository. I think, CVS
is buggy.
@
text
@/*	$OpenBSD: util.c,v 1.13 2003/02/02 16:57:58 deraadt Exp $	*/

/*
 * Copyright (c) 1998 Per Fogelstrom, Opsycon AB
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed under OpenBSD by
 *	Per Fogelstrom, Opsycon AB, Sweden.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS
 * OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 */

#include <sys/types.h>
#include <sys/mman.h>
#include <string.h>
#include "archdep.h"

/*
 * Stack protector dummies.
 * Ideally, a scheme to compile these stubs from libc should be used, but
 * this would end up dragging too much code from libc here.
 */
long __guard[8] = {0, 0, 0, 0, 0, 0, 0, 0};

void
__stack_smash_handler(char func[], int damaged)
{
	_dl_exit(127);
}

/*
 * Static vars usable after bootstrapping.
 */
static void *_dl_malloc_base;
static void *_dl_malloc_pool = 0;
static long *_dl_malloc_free = 0;

char *
_dl_strdup(const char *orig)
{
	char *newstr;
	int len;

	len = _dl_strlen(orig)+1;
	newstr = _dl_malloc(len);
	_dl_strlcpy(newstr, orig, len);
	return (newstr);
}

/*
 * The following malloc/free code is a very simplified implementation
 * of a malloc function. However, we do not need to be very complex here
 * because we only free memory when 'dlclose()' is called and we can
 * reuse at least the memory allocated for the object descriptor. We have
 * one dynamic string allocated, the library name and it is likely that
 * we can reuse that one to without a lot of complex colapsing code.
 */
void *
_dl_malloc(size_t size)
{
	long *p, *t, *n;

	size = (size + 8 + DL_MALLOC_ALIGN - 1) & ~(DL_MALLOC_ALIGN - 1);

	if ((t = _dl_malloc_free) != 0) {	/* Try free list first */
		n = (long *)&_dl_malloc_free;
		while (t && t[-1] < size) {
			n = t;
			t = (long *)*t;
		}
		if (t) {
			*n = *t;
			_dl_memset(t, 0, t[-1] - 4);
			return((void *)t);
		}
	}
	if (_dl_malloc_pool == 0 ||
	    _dl_malloc_pool + size > _dl_malloc_base + 4096) {
		_dl_malloc_pool = (void *)_dl_mmap((void *)0, 4096,
		    PROT_READ|PROT_WRITE, MAP_ANON|MAP_PRIVATE, -1, 0);
		if (_dl_malloc_pool == 0 || _dl_malloc_pool == MAP_FAILED ) {
			_dl_printf("Dynamic loader failure: malloc.\n");
			_dl_exit(7);
		}
		_dl_malloc_base = _dl_malloc_pool;
	}
	p = _dl_malloc_pool;
	_dl_malloc_pool += size;
	_dl_memset(p, 0, size);
	*p = size;
	return((void *)(p + 1));
}

void
_dl_free(void *p)
{
	long *t = (long *)p;

	*t = (long)_dl_malloc_free;
	_dl_malloc_free = p;
}
@


1.1.1.1
log
@Import OpenBSD source with the "new" command line as well,
in order to be able to provide a MirBSD release which bases
upon a fairly current OpenBSD base source code tree deemed
stable enough.
@
text
@@


1.1.1.2
log
@Import latest OpenBSD CVS tree by CTM in order
to sync the base system and ports tree with Them.

This includes the recent licence changes as well - by
importing the changed base and re-applying the diffs
(with cvs up -j -j) they are inherited, and we're not
bound to the removed clauses any longer.
@
text
@d1 1
a1 1
/*	$OpenBSD: util.c,v 1.14 2003/05/30 01:13:53 drahn Exp $	*/
a35 1
#include <sys/param.h>
a36 1
#include <sys/sysctl.h>
a123 18


unsigned int
_dl_random(void)   
{
	int mib[2];
	unsigned int rnd;
	size_t len;

	mib[0] = CTL_KERN;
	mib[1] = KERN_ARND;
	len = sizeof(rnd);
	_dl_sysctl(mib, 2, &rnd, &len, NULL, 0);

	return (rnd);
}


@


1.1.1.3
log
@sync with OpenBSD, this gives us a fair amount of fixes
@
text
@d1 1
a1 1
/*	$OpenBSD: util.c,v 1.15 2003/06/09 16:10:03 deraadt Exp $	*/
d14 6
@


1.1.1.4
log
@Sync some stuff with OpenBSD
@
text
@d1 1
a1 1
/*	$OpenBSD: util.c,v 1.16 2003/07/06 20:03:58 deraadt Exp $	*/
a42 2
void __stack_smash_handler(char [], int);

d123 1
a123 1
_dl_random(void)
@


1.1.1.5
log
@large-scale import of OpenBSD 3.5-current source base including many fixes
note: from now, we will not be binary compatible with OpenBSD apps any
longer (due to syscall numbering differences); both an OpenBSD compat and
a conversion tool for old MirOS #7 apps will be delivered later.

The src/ tree is locked from now.
@
text
@d1 1
a1 1
/*	$OpenBSD: util.c,v 1.17 2004/02/25 23:36:11 drahn Exp $	*/
d93 1
a93 1
			_dl_memset(t, 0, t[-1] - sizeof(long));
@


1.1.1.6
log
@pretty kawaii ld.so
@
text
@d1 1
a1 1
/*	$OpenBSD: util.c,v 1.18 2004/06/14 15:07:36 millert Exp $	*/
d54 1
a69 2
#define	_dl_round_page(x)	(((x) + (__LDPGSZ - 1)) & ~(__LDPGSZ - 1))

d79 1
a79 1
_dl_malloc(size_t need)
d81 1
a81 1
	long *p, *t, *n, have;
d83 1
a83 1
	need = (need + 8 + DL_MALLOC_ALIGN - 1) & ~(DL_MALLOC_ALIGN - 1);
d87 1
a87 1
		while (t && t[-1] < need) {
d97 4
a100 10
	have = _dl_round_page((long)_dl_malloc_pool) - (long)_dl_malloc_pool;
	if (need > have) {
		if (have >= 8 + DL_MALLOC_ALIGN) {
			p = _dl_malloc_pool;
			*p = have;
			_dl_free((void *)(p + 1));	/* move to freelist */
		}
		_dl_malloc_pool = (void *)_dl_mmap((void *)0,
		    _dl_round_page(need), PROT_READ|PROT_WRITE,
		    MAP_ANON|MAP_PRIVATE, -1, 0);
d105 1
d108 3
a110 3
	_dl_malloc_pool += need;
	_dl_memset(p, 0, need);
	*p = need;
@


