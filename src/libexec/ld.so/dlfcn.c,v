head	1.2;
branch	1.1.1;
access;
symbols
	tg-mergetmp-mirosx-1:1.1.1.10
	tg-mergefixes-1-branch:1.1.1.10.0.4
	tg-mergefixes-1-base:1.1.1.10
	MIROS_X:1.1.1.10.0.2
	MIROS_X_BASE:1.1.1.10
	tg-mergetmp-3:1.1.1.10
	cvs-200412031430:1.1.1.10
	MIRBSD_XP_MIRPPC:1.1.1.8.0.10
	cvs-200410171015:1.1.1.9
	cvs-200410141645:1.1.1.9
	MIRBSD_XP_SPARC_BASE:1.1.1.8
	MIRBSD_XP_SPARC:1.1.1.8.0.8
	MIRBSD_7quater:1.1.1.8
	cvs-200405160640:1.1.1.8
	cvs-200401271800:1.1.1.8
	cvs-200401261630:1.1.1.8
	cvs-200401021645:1.1.1.8
	MIRBSD_7_ALPHA:1.1.1.8.0.6
	MIRBSD_7:1.1.1.8.0.4
	cvs-200312222040:1.1.1.8
	MIRBSD_7ter:1.1.1.8
	MIRBSD_7_DEV:1.1.1.8.0.2
	cvs-200310081815:1.1.1.8
	cvs-200310020700:1.1.1.8
	cvs-200309271030:1.1.1.7
	cvs-200309261610:1.1.1.7
	cvs-200309251530:1.1.1.6
	cvs-200308302005:1.1.1.5
	cvs-200308171200:1.1.1.5
	ctm-3496:1.1.1.5
	ctm-3449:1.1.1.5
	ctm-3437:1.1.1.5
	cvs-200307191805:1.1.1.5
	ctm-3425:1.1.1.5
	cvs-200307091500:1.1.1.5
	cvs-200307072125:1.1.1.5
	ctm-3389:1.1.1.5
	cvs-200307021520:1.1.1.5
	cvs-200306291430:1.1.1.5
	ctm-3341:1.1.1.4
	MIRBSD_5:1.1.1.3
	cvs-200306082100:1.1.1.3
	ctm-3316:1.1.1.3
	ctm-3272:1.1.1.2
	ctm-3264:1.1.1.2
	cvs-200305071630:1.1.1.2
	ctm-3255:1.1.1.2
	ctm-3229:1.1.1.1
	MIRBSD_4:1.2
	ctm-3203:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.2
date	2003.03.29.19.31.48;	author tg;	state Exp;
branches;
next	1.1;

1.1
date	2003.03.27.14.19.03;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.04.15.17.35.50;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2003.05.05.18.59.11;	author tg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2003.06.05.17.29.31;	author tg;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2003.06.19.12.41.17;	author tg;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2003.06.29.17.25.53;	author tg;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2003.09.25.16.31.24;	author tg;	state Exp;
branches;
next	1.1.1.7;

1.1.1.7
date	2003.09.26.16.31.21;	author tg;	state Exp;
branches;
next	1.1.1.8;

1.1.1.8
date	2003.10.02.07.46.53;	author tg;	state Stab;
branches;
next	1.1.1.9;

1.1.1.9
date	2004.10.14.17.15.42;	author tg;	state Exp;
branches;
next	1.1.1.10;

1.1.1.10
date	2004.12.03.14.35.50;	author tg;	state Exp;
branches;
next	;


desc
@@


1.2
log
@merge elfdiffs.030314
@
text
@/*	$OpenBSD: dlfcn.c,v 1.24 2003/02/02 16:57:58 deraadt Exp $ */

/*
 * Copyright (c) 1998 Per Fogelstrom, Opsycon AB
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed under OpenBSD by
 *	Per Fogelstrom, Opsycon AB, Sweden.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS
 * OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 */

#define _DYN_LOADER

#include <sys/types.h>
#include <nlist.h>
#include <link.h>
#include <dlfcn.h>
#include <unistd.h>

#include "syscall.h"
#include "archdep.h"
#include "resolve.h"

int _dl_errno;

static int _dl_real_close(void *handle);
static void _dl_unload_deps(elf_object_t *object);

void *
dlopen(const char *libname, int how)
{
	elf_object_t *object, *dynobj;
	Elf_Dyn	*dynp;

	if (libname == NULL)
		return _dl_objects;

	DL_DEB(("dlopen: loading: %s\n", libname));

	object = _dl_load_shlib(libname, _dl_objects, OBJTYPE_DLO);
	if (object == 0)
		return((void *)0);

	if (object->refcount > 1)
		return((void *)object);	/* Already loaded */

	/*
	 * Check for 'needed' objects. For each 'needed' object we
	 * create a 'shadow' object and add it to a list attached to
	 * the object so we know our dependencies. This list should
	 * also be used to determine the library search order when
	 * resolving undefined symbols. This is not yet done. XXX
	 */
	dynobj = object;
	while (dynobj) {
		elf_object_t *tmpobj = dynobj;

		for (dynp = dynobj->load_dyn; dynp->d_tag; dynp++) {
			const char *libname;
			elf_object_t *depobj;

			if (dynp->d_tag != DT_NEEDED)
				continue;

			libname = dynobj->dyn.strtab + dynp->d_un.d_val;
			depobj = _dl_load_shlib(libname, dynobj, OBJTYPE_LIB);
			if (!depobj)
				_dl_exit(4);

			tmpobj->dep_next = _dl_malloc(sizeof(elf_object_t));
			tmpobj->dep_next->next = depobj;
			tmpobj = tmpobj->dep_next;
		}
		dynobj = dynobj->next;
	}

	_dl_rtld(object);
	_dl_call_init(object);

	if (_dl_debug_map->r_brk) {
		_dl_debug_map->r_state = RT_ADD;
		(*((void (*)())_dl_debug_map->r_brk))();
		_dl_debug_map->r_state = RT_CONSISTENT;
		(*((void (*)())_dl_debug_map->r_brk))();
	}
	return((void *)object);
}

void *
dlsym(void *handle, const char *name)
{
	elf_object_t	*object;
	elf_object_t	*dynobj;
	void		*retval;
	const Elf_Sym	*sym = NULL;

	object = (elf_object_t *)handle;
	dynobj = _dl_objects;
	while (dynobj && dynobj != object)
		dynobj = dynobj->next;

	if (!dynobj || object != dynobj) {
		_dl_errno = DL_INVALID_HANDLE;
		return(0);
	}

	retval = (void *)_dl_find_symbol(name, object, &sym,
	    SYM_SEARCH_SELF|SYM_NOWARNNOTFOUND|SYM_NOTPLT, 0, "");
	if (sym != NULL)
		retval += sym->st_value;
	else
		_dl_errno = DL_NO_SYMBOL;
	return (retval);
}

int
dlctl(void *handle, int command, void *data)
{
	switch (command) {
	default:
		_dl_errno = DL_INVALID_CTL;
		break;
	}
	return(-1);
}

int
dlclose(void *handle)
{
	int retval;

	if (handle == _dl_objects)
		return 0;

	retval = _dl_real_close(handle);

	if (_dl_debug_map->r_brk) {
		_dl_debug_map->r_state = RT_DELETE;
		(*((void (*)())_dl_debug_map->r_brk))();
		_dl_debug_map->r_state = RT_CONSISTENT;
		(*((void (*)())_dl_debug_map->r_brk))();
	}
	return (retval);
}

static int
_dl_real_close(void *handle)
{
	elf_object_t	*object;
	elf_object_t	*dynobj;

	object = (elf_object_t *)handle;
	dynobj = _dl_objects;
	while (dynobj && dynobj != object)
		dynobj = dynobj->next;

	if (!dynobj || object != dynobj) {
		_dl_errno = DL_INVALID_HANDLE;
		return (1);
	}

	if (object->refcount == 1) {
		if (dynobj->dep_next)
			_dl_unload_deps(dynobj);
	}

	_dl_unload_shlib(object);
	return (0);
}

/*
 * Scan through the shadow dep list and 'unload' every library
 * we depend upon. Shadow objects are removed when removing ourself.
 */
static void
_dl_unload_deps(elf_object_t *object)
{
	elf_object_t *depobj;

	depobj = object->dep_next;
	while (depobj) {
		if (depobj->next->refcount == 1) { /* This object will go away */
			if (depobj->next->dep_next)
				_dl_unload_deps(depobj->next);
			_dl_unload_shlib(depobj->next);
		}
		depobj = depobj->dep_next;
	}
}

/*
 * Return a character string describing the last dl... error occurred.
 */
const char *
dlerror(void)
{
	switch (_dl_errno) {
	case 0:	/* NO ERROR */
		return (NULL);
	case DL_NOT_FOUND:
		return ("File not found");
	case DL_CANT_OPEN:
		return ("Can't open file");
	case DL_NOT_ELF:
		return ("File not an ELF object");
	case DL_CANT_OPEN_REF:
		return ("Can't open referenced object");
	case DL_CANT_MMAP:
		return ("Can't map ELF object");
	case DL_INVALID_HANDLE:
		return ("Invalid handle");
	case DL_NO_SYMBOL:
		return ("Unable to resolve symbol");
	case DL_INVALID_CTL:
		return ("Invalid dlctl() command");
	default:
		return ("Unknown error");
	}
}

void
_dl_show_objects(void)
{
	elf_object_t *object;
	char *objtypename;
	int outputfd;
	char *pad;

	object = _dl_objects;
	if (_dl_traceld)
		outputfd = STDOUT_FILENO;
	else
		outputfd = STDERR_FILENO;

	if (sizeof(long) == 8)
		pad = "        ";
	else
		pad = "";
	_dl_fdprintf(outputfd, "\tStart   %s End     %s Type Ref Name\n",
	    pad, pad);

	while (object) {
		switch (object->obj_type) {
		case OBJTYPE_LDR:
			objtypename = "rtld";
			break;
		case OBJTYPE_EXE:
			objtypename = "exe ";
			break;
		case OBJTYPE_LIB:
			objtypename = "rlib";
			break;
		case OBJTYPE_DLO:
			objtypename = "dlib";
			break;
		default:
			objtypename = "????";
			break;
		}
		_dl_fdprintf(outputfd, "\t%lX %lX %s  %d  %s\n",
		    (void *)object->load_addr,
		    (void *)object->load_end,
		    objtypename, object->refcount, object->load_name);
		object = object->next;
	}
}
@


1.1
log
@re-add a "not so important" directory that just went away
without telling me so.
It did even vanish from the CVS repository. I think, CVS
is buggy.
@
text
@d285 1
a285 1
		    (void *)(object->load_addr + object->load_size),
@


1.1.1.1
log
@Import OpenBSD source with the "new" command line as well,
in order to be able to provide a MirBSD release which bases
upon a fairly current OpenBSD base source code tree deemed
stable enough.
@
text
@@


1.1.1.2
log
@Import OpenBSD cvs as of now, CTM delta 3255, just before the i386 flag day. Don't build now! From now on, you must upgrade by binary.
@
text
@d1 1
a1 1
/*	$OpenBSD: dlfcn.c,v 1.25 2003/04/28 22:51:25 marc Exp $ */
a50 3
static void _dl_thread_kern_stop(void);
static void _dl_thread_kern_go(void);
static void (*_dl_thread_fnc)(int) = NULL;
a62 1
	_dl_thread_kern_stop();
a63 1
	_dl_thread_kern_go();
a88 1
			_dl_thread_kern_stop();
a89 1
			_dl_thread_kern_go();
a141 2
	int retval;

a142 5
	case DL_SETTHREADLCK:
		DL_DEB(("dlctl: _dl_thread_fnc set to %p\n", data));
		_dl_thread_fnc = data;
		retval = 0;
		break;
a144 1
		retval = -1;
d147 1
a147 1
	return (retval);
a289 15

static void
_dl_thread_kern_stop(void)
{
	if (_dl_thread_fnc != NULL)
		(*_dl_thread_fnc)(0);
}

static void
_dl_thread_kern_go(void)
{
	if (_dl_thread_fnc != NULL)
		(*_dl_thread_fnc)(1);
}

@


1.1.1.3
log
@Import latest OpenBSD CVS tree by CTM in order
to sync the base system and ports tree with Them.

This includes the recent licence changes as well - by
importing the changed base and re-applying the diffs
(with cvs up -j -j) they are inherited, and we're not
bound to the removed clauses any longer.
@
text
@d1 1
a1 1
/*	$OpenBSD: dlfcn.c,v 1.26 2003/05/30 01:13:53 drahn Exp $ */
a67 1
	_dl_link_sub(object, _dl_objects);
a95 1
			_dl_link_sub(depobj, dynobj);
@


1.1.1.4
log
@sync with OpenBSD, this gives us a fair amount of fixes
@
text
@d1 1
a1 1
/*	$OpenBSD: dlfcn.c,v 1.27 2003/06/09 16:10:03 deraadt Exp $ */
d14 6
@


1.1.1.5
log
@the previous cvs import did not finish due to 'memory fault'
sync with OpenBSD-cvs
@
text
@d1 1
a1 1
/*	$OpenBSD: dlfcn.c,v 1.29 2003/06/26 07:53:27 deraadt Exp $ */
a61 6
	/* this add_object should not be here, XXX */
	if (object == 0) {
		_dl_thread_kern_go();
		return((void *)0);
	}
	_dl_add_object(object);
d64 2
d91 2
a94 4
			/* this add_object should not be here, XXX */
			_dl_add_object(depobj);
			_dl_link_sub(depobj, dynobj);
			_dl_thread_kern_go();
d108 1
a108 1
		(*((void (*)(void))_dl_debug_map->r_brk))();
d110 1
a110 1
		(*((void (*)(void))_dl_debug_map->r_brk))();
d173 1
a173 1
		(*((void (*)(void))_dl_debug_map->r_brk))();
d175 1
a175 1
		(*((void (*)(void))_dl_debug_map->r_brk))();
@


1.1.1.6
log
@Release Time. Synchronize with OpenBSD 3.4-current (base system).
@
text
@d1 1
a1 1
/*	$OpenBSD: dlfcn.c,v 1.31 2003/09/04 19:33:48 drahn Exp $ */
d50 1
a50 1
dlopen(const char *libname, int flags)
d61 1
a61 1
	object = _dl_load_shlib(libname, _dl_objects, OBJTYPE_DLO, flags);
d94 1
a94 2
			depobj = _dl_load_shlib(libname, dynobj, OBJTYPE_LIB,
				flags|RTLD_GLOBAL);
d140 1
a140 1
	    SYM_SEARCH_SELF|SYM_NOWARNNOTFOUND|SYM_NOTPLT, 0, object);
a304 7
	}
	{
		extern int _dl_symcachestat_hits;
		extern int _dl_symcachestat_lookups;
	DL_DEB(("symcache lookups %d hits %d ratio %d% hits\n",
	    _dl_symcachestat_lookups, _dl_symcachestat_hits,
	    (_dl_symcachestat_hits * 100) / _dl_symcachestat_lookups));
@


1.1.1.7
log
@dlerror() buglet from -current
@
text
@d1 1
a1 1
/*	$OpenBSD: dlfcn.c,v 1.32 2003/09/25 21:56:20 millert Exp $ */
a237 2
	const char *errmsg;

d240 1
a240 1
		errmsg = NULL;
d242 1
a242 1
		errmsg = "File not found";
d244 1
a244 1
		errmsg = "Can't open file";
d246 1
a246 1
		errmsg = "File not an ELF object";
d248 1
a248 1
		errmsg = "Can't open referenced object";
d250 1
a250 1
		errmsg = "Can't map ELF object";
d252 1
a252 1
		errmsg = "Invalid handle";
d254 1
a254 1
		errmsg = "Unable to resolve symbol";
d256 1
a256 1
		errmsg = "Invalid dlctl() command";
d258 1
a258 1
		errmsg = "Unknown error";
a259 3

	_dl_errno = 0;
	return (errmsg);
@


1.1.1.8
log
@Import OpenBSD source tree again, with critical bug fixes
(OpenSSL, bc, dc, sensorsd, pf, ...)
@
text
@d1 1
a1 1
/*	$OpenBSD: dlfcn.c,v 1.33 2003/10/01 02:55:23 millert Exp $ */
a242 1
		break;
a244 1
		break;
a246 1
		break;
a248 1
		break;
a250 1
		break;
a252 1
		break;
a254 1
		break;
a256 1
		break;
a258 1
		break;
@


1.1.1.9
log
@pretty kawaii ld.so
@
text
@d1 1
a1 1
/*	$OpenBSD: dlfcn.c,v 1.41 2004/10/14 10:02:28 kettenis Exp $ */
a47 1
static elf_object_t *obj_from_addr(const void *addr);
d62 1
a66 1
	/* this add_object should not be here, XXX */
a118 3

	DL_DEB(("dlopen: %s: done.\n", libname));

a128 1
	int		flags;
d130 4
a133 3
	if (handle == NULL || handle == RTLD_NEXT ||
	    handle == RTLD_SELF) {
		void *retaddr;
d135 3
a137 30
		retaddr = __builtin_return_address(0);	/* __GNUC__ only */

		if ((object = obj_from_addr(retaddr)) == NULL) {
			_dl_errno = DL_CANT_FIND_OBJ;
			return(0);
		}

		if (handle == RTLD_NEXT)
			object = object->next;

		if (handle == NULL)
			flags = SYM_SEARCH_SELF|SYM_PLT;
		else
			flags = SYM_SEARCH_ALL|SYM_PLT;

	} else if (handle == RTLD_DEFAULT) {
		object = _dl_objects;
		flags = SYM_SEARCH_ALL|SYM_PLT;
	} else {
		object = (elf_object_t *)handle;
		flags = SYM_SEARCH_SELF|SYM_NOTPLT;

		dynobj = _dl_objects;
		while (dynobj && dynobj != object)
			dynobj = dynobj->next;

		if (!dynobj || object != dynobj) {
			_dl_errno = DL_INVALID_HANDLE;
			return(0);
		}
d140 3
a142 4
	retval = (void *)_dl_find_symbol(name, object, &sym, NULL,
	    flags|SYM_NOWARNNOTFOUND, 0, object);

	if (sym != NULL) {
d144 1
a144 7
#ifdef __hppa__
		retval = (void *)_dl_md_plabel((Elf_Addr)retval,
		    object->dyn.pltgot);
#endif
		DL_DEB(("dlsym: %s in %s: %p\n",
		    name, object->load_name, retval));
	} else
a267 6
	case DL_NO_OBJECT:
		errmsg = "No shared object contains address";
		break;
	case DL_CANT_FIND_OBJ:
		errmsg = "Cannot determine caller's shared object";
		break;
a278 2
	extern int _dl_symcachestat_hits;
	extern int _dl_symcachestat_lookups;
d321 7
a327 6

	if (_dl_symcachestat_lookups != 0)
		DL_DEB(("symcache lookups %d hits %d ratio %d% hits\n",
		    _dl_symcachestat_lookups, _dl_symcachestat_hits,
		    (_dl_symcachestat_hits * 100) /
		    _dl_symcachestat_lookups));
a343 141
int
dl_iterate_phdr(int (*callback)(struct dl_phdr_info *, size_t, void *data),
	void *data)
{
	elf_object_t *object;
	Elf_Ehdr *ehdr;
	struct dl_phdr_info info;
	int retval = -1;

	for (object = _dl_objects; object != NULL; object = object->next) {
		ehdr = (Elf_Ehdr *)object->load_addr;
		if (ehdr == NULL)
			continue;

		info.dlpi_addr = object->load_addr;
		info.dlpi_name = object->load_name;
		info.dlpi_phdr =
		    (Elf_Phdr *)((char *)object->load_addr + ehdr->e_phoff);
		info.dlpi_phnum = ehdr->e_phnum;
		retval = callback(&info, sizeof (struct dl_phdr_info), data);
		if (retval)
			break;
	}

	return retval;
}

static elf_object_t *
obj_from_addr(const void *addr)
{
	elf_object_t *dynobj;
	Elf_Ehdr *ehdr;
	Elf_Phdr *phdr;
	Elf_Addr start;
	Elf_Addr end;
	u_int32_t symoffset;
	const Elf_Sym *sym;
	int i;

	for (dynobj = _dl_objects; dynobj != NULL; dynobj = dynobj->next) {
		ehdr = (Elf_Ehdr *)dynobj->load_addr;
		if (ehdr == NULL)
			continue;

		phdr = (Elf_Phdr *)((char *)dynobj->load_addr + ehdr->e_phoff);

		for (i = 0; i < ehdr->e_phnum; i++) {
			switch (phdr[i].p_type) {
			case PT_LOAD:
				start = phdr[i].p_vaddr + dynobj->load_addr;
				if ((Elf_Addr)addr >= start &&
				    (Elf_Addr)addr < start + phdr[i].p_memsz)
					return dynobj;
				break;
			default:
				break;
			}
		}
	}

	/* find the lowest & highest symbol address in the main exe */
	start = -1;
	end = 0;

	for (symoffset = 0; symoffset < _dl_objects->nchains; symoffset++) {
		sym = _dl_objects->dyn.symtab + symoffset;

		/*
		 * For skip the symbol if st_shndx is either SHN_UNDEF or
		 * SHN_COMMON.
		 */
		if (sym->st_shndx == SHN_UNDEF || sym->st_shndx == SHN_COMMON)
			continue;

		if (sym->st_value < start)
			start = sym->st_value;

		if (sym->st_value > end)
			end = sym->st_value;
	}

	if (end && (Elf_Addr) addr >= start && (Elf_Addr) addr <= end)
		return _dl_objects;
	else
		return NULL;
}

int
dladdr(const void *addr, Dl_info *info)
{
	const elf_object_t *object;
	const Elf_Sym *sym;
	void *symbol_addr;
	u_int32_t symoffset;

	object = obj_from_addr(addr);

	if (object == NULL) {
		_dl_errno = DL_NO_OBJECT;
		return 0;
	}

	info->dli_fname = (char *)object->load_name;
	info->dli_fbase = (void *)object->load_addr;
	info->dli_sname = NULL;
	info->dli_saddr = (void *)0;

	/*
	 * Walk the symbol list looking for the symbol whose address is
	 * closest to the address sent in.
	 */
	for (symoffset = 0; symoffset < object->nchains; symoffset++) {
		sym = object->dyn.symtab + symoffset;

		/*
		 * For skip the symbol if st_shndx is either SHN_UNDEF or
		 * SHN_COMMON.
		 */
		if (sym->st_shndx == SHN_UNDEF || sym->st_shndx == SHN_COMMON)
			continue;

		/*
		 * If the symbol is greater than the specified address, or if
		 * it is further away from addr than the current nearest
		 * symbol, then reject it.
		 */
		symbol_addr = (void *)(object->load_addr + sym->st_value);
		if (symbol_addr > addr || symbol_addr < info->dli_saddr)
			continue;

		/* Update our idea of the nearest symbol. */
		info->dli_sname = object->dyn.strtab + sym->st_name;
		info->dli_saddr = symbol_addr;

		/* Exact match? */
		if (info->dli_saddr == addr)
			break;
	}

	return 1;
}
@


1.1.1.10
log
@your daily dose of bugfixes and security updates from obsd
@
text
@d1 1
a1 1
/*	$OpenBSD: dlfcn.c,v 1.42 2004/12/01 22:27:35 kurt Exp $ */
d146 1
a146 1
		if (handle == RTLD_NEXT) {
a147 5
			if (object == NULL) {
				_dl_errno = DL_NO_SYMBOL;
				return(0);
			}
		}
@


