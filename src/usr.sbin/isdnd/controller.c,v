head	1.4;
access;
symbols
	tg-mergetmp-mirosx-1:1.4
	tg-mergefixes-1-branch:1.4.0.14
	tg-mergefixes-1-base:1.4
	MIROS_X:1.4.0.12
	MIROS_X_BASE:1.4
	MIRBSD_XP_MIRPPC:1.4.0.10
	MIRBSD_XP_SPARC_BASE:1.4
	MIRBSD_XP_SPARC:1.4.0.8
	MIRBSD_7quater:1.4
	MIRBSD_7_ALPHA:1.4.0.6
	MIRBSD_7:1.4.0.4
	MIRBSD_7ter:1.4
	MIRBSD_7_DEV:1.4.0.2
	MIRBSD_5:1.2
	MIRBSD_4:1.2;
locks; strict;
comment	@ * @;


1.4
date	2003.10.03.19.10.52;	author tg;	state Stab;
branches;
next	1.3;

1.3
date	2003.10.03.14.58.40;	author tg;	state Exp;
branches;
next	1.2;

1.2
date	2003.04.06.14.13.27;	author tg;	state Exp;
branches;
next	1.1;

1.1
date	2003.03.25.21.53.20;	author tg;	state Exp;
branches;
next	;


desc
@@


1.4
log
@finish release engineering
you should be able to build the release now
@
text
@/*
 * Copyright (c) 1997, 2000 Hellmuth Michaelis. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *---------------------------------------------------------------------------
 *
 *	i4b daemon - controller state support routines
 *	----------------------------------------------
 *
 *	_Id: controller.c,v 1.5 2002/12/06 15:00:14 thorpej Exp $
 *
 * $FreeBSD$
 *
 *      last edit-date: [Mon Oct  9 14:37:34 2000]
 *
 *---------------------------------------------------------------------------*/

#include <sys/types.h>
#include <sys/mman.h>

#include <fcntl.h>

#include "isdnd.h"

static int
init_controller_state(int controller, const char *devname, const char *cardname, int tei);

/*
 * add a single controller
 */
void
init_new_controller(int isdnif)
{
	msg_ctrl_info_req_t mcir;

	memset(&mcir, 0, sizeof mcir);
	mcir.controller = isdnif;
		
	if((ioctl(isdnfd, I4B_CTRL_INFO_REQ, &mcir)) < 0)
		return;

	if((init_controller_state(isdnif, mcir.devname, mcir.cardname, mcir.tei)) == ERROR)
	{
		logit(LL_ERR, "init_new_controller: init_controller_state for controller %d failed", isdnif);
		do_exit(1);
	}
}

/*---------------------------------------------------------------------------*
 *	init controller state array
 *---------------------------------------------------------------------------*/
void
init_controller(void)
{
	int i;
	int max = 0;
	msg_ctrl_info_req_t mcir;
	
	remove_all_ctrl_state();
	for(i=0; i <= max; i++)
	{
		mcir.controller = i;
		
		if((ioctl(isdnfd, I4B_CTRL_INFO_REQ, &mcir)) < 0)
			continue;

		max = mcir.max_isdnif;

		/* init controller tab */

		if((init_controller_state(i, mcir.devname, mcir.cardname, mcir.tei)) == ERROR)
		{
			logit(LL_ERR, "init_controller: init_controller_state for controller %d failed", i);
			do_exit(1);
		}
	}
	DBGL(DL_RCCF, (logit(LL_DBG, "init_controller: found %d ISDN controller(s)", max)));
}

/*--------------------------------------------------------------------------*
 *	init controller state table entry
 *--------------------------------------------------------------------------*/
static int
init_controller_state(int controller, const char *devname, const char *cardname, int tei)
{
	struct isdn_ctrl_state *ctrl;

	ctrl = malloc(sizeof *ctrl);
	if (ctrl == NULL) {
		logit(LL_ERR, "init_controller_state: out of memory");
		return(ERROR);
	}
	
	/* init controller state entry */
		
	memset(ctrl, 0, sizeof *ctrl);
	strncpy(ctrl->device_name,
	    devname, 
	    sizeof(ctrl->device_name)-1);
	strncpy(ctrl->controller,
	    cardname, 
	    sizeof(ctrl->controller)-1);
	ctrl->isdnif = controller;
	ctrl->protocol = PROTOCOL_DSS1;
	ctrl->state = CTRL_UP;
	ctrl->stateb1 = CHAN_IDLE;
	ctrl->stateb2 = CHAN_IDLE;
	ctrl->freechans = MAX_CHANCTRL;
	ctrl->tei = tei;
	ctrl->l1stat = LAYER_IDLE;
	ctrl->l2stat = LAYER_IDLE;
	ctrl->firmware = NULL;
	DBGL(DL_RCCF, (logit(LL_DBG, "init_controller_state: controller %d (%s) is %s",
	   controller, devname, cardname)));

	/* add to list */
	add_ctrl_state(ctrl);

	return(GOOD);
}	

/*--------------------------------------------------------------------------*
 *	init active controller
 *--------------------------------------------------------------------------*/
void
init_active_controller(void)
{
	struct isdn_ctrl_state *cst = NULL;
	int ret, fd;
	int i, numctrl;

#if 0
	/* XXX - replace by something useful */
	int controller;
	char cmdbuf[MAXPATHLEN+128];

	for(controller = 0; controller < ncontroller; controller++)
	{
		if(isdn_ctrl_tab[controller].ctrl_type == CTRL_TINADD)
		{
			DBGL(DL_RCCF, (logit(LL_DBG, "init_active_controller, tina-dd %d: executing [%s %d]", unit, tinainitprog, unit)));
			
			snprintf(cmdbuf, sizeof(cmdbuf), "%s %d", tinainitprog, unit);

			if((ret = system(cmdbuf)) != 0)
			{
				logit(LL_ERR, "init_active_controller, tina-dd %d: %s returned %d!", unit, tinainitprog, ret);
				do_exit(1);
			}
		}
	}
#endif

	numctrl = count_ctrl_states();
	for (cst = get_first_ctrl_state(), i = 0;
	    i < numctrl;
	    cst = find_ctrl_state(i++)) {

		/*
		 *  Generic microcode loading. If a controller has
		 *  defined a microcode file, load it using the 
		 *  I4B_CTRL_DOWNLOAD ioctl.
		 */
		if (cst->firmware != NULL) {
			struct isdn_dr_prot idp;
			struct isdn_download_request idr;

			fd = open(cst->firmware, O_RDONLY);
			if (fd < 0) {
				logit(LL_ERR, "init_active_controller %d: "
				    "open %s: %s!", cst->isdnif, cst->firmware,
				    strerror(errno)); 
				do_exit(1);
			}

			idp.bytecount = lseek(fd, 0, SEEK_END);
			idp.microcode = mmap(0, idp.bytecount, PROT_READ,
			    MAP_SHARED, fd, 0);
			if (idp.microcode == MAP_FAILED) {
				logit(LL_ERR, "init_active_controller %d: "
				    "mmap %s: %s!", cst->isdnif, cst->firmware,
				    strerror(errno));
				do_exit(1);
			}

			DBGL(DL_RCCF, (logit(LL_DBG, "init_active_controller "
			    "%d: loading firmware from [%s]", cst->isdnif,
			    cst->firmware)));

			idr.controller = cst->isdnif;
			idr.numprotos = 1;
			idr.protocols = &idp;

			ret = ioctl(isdnfd, I4B_CTRL_DOWNLOAD, &idr,
			    sizeof(idr));
			if (ret) {
				logit(LL_ERR, "init_active_controller %d: "
				    "load %s: %s!", cst->isdnif, cst->firmware,
				    strerror(errno));
				do_exit(1);
			}

			munmap(idp.microcode, idp.bytecount);
			close(fd);
		}
	}
}	

void
init_single_controller_protocol ( struct isdn_ctrl_state *ctrl )
{
	msg_prot_ind_t mpi;

	memset(&mpi, 0, sizeof mpi);
	mpi.controller = ctrl->isdnif;
	mpi.protocol = ctrl->protocol;
	
	if((ioctl(isdnfd, I4B_PROT_IND, &mpi)) < 0)
	{
		logit(LL_ERR, "init_single_controller_protocol: ioctl I4B_PROT_IND failed: %s", strerror(errno));
		do_exit(1);
	}
}

/*--------------------------------------------------------------------------*
 *	init controller D-channel ISDN protocol
 *--------------------------------------------------------------------------*/
void
init_controller_protocol(void)
{
	struct isdn_ctrl_state *ctrl;

	for (ctrl = get_first_ctrl_state(); ctrl; ctrl = NEXT_CTRL(ctrl))
		init_single_controller_protocol(ctrl);
}

/*--------------------------------------------------------------------------*
 *	set controller state to UP/DOWN
 *--------------------------------------------------------------------------*/
int
set_controller_state(struct isdn_ctrl_state *ctrl, int state)
{
	if (ctrl == NULL) {
		logit(LL_ERR, "set_controller_state: invalid controller");
		return(ERROR);
	}

	if (state == CTRL_UP) {
		ctrl->state = CTRL_UP;
		DBGL(DL_CNST, (logit(LL_DBG, "set_controller_state: controller [%d] set UP!", ctrl->isdnif)));
	}
	else if (state == CTRL_DOWN)
	{
		ctrl->state = CTRL_DOWN;
		DBGL(DL_CNST, (logit(LL_DBG, "set_controller_state: controller [%d] set DOWN!", ctrl->isdnif)));
	}
	else
	{
		logit(LL_ERR, "set_controller_state: invalid controller state [%d]!", state);
		return(ERROR);
	}
	return(GOOD);
}		
	
/*--------------------------------------------------------------------------*
 *	get controller state
 *--------------------------------------------------------------------------*/
int
get_controller_state(struct isdn_ctrl_state *ctrl)
{
	if (ctrl == NULL) {
		logit(LL_ERR, "set_controller_state: invalid controller");
		return(ERROR);
	}
	return (ctrl->state);
}		

/*--------------------------------------------------------------------------*
 *	decrement number of free channels for controller
 *--------------------------------------------------------------------------*/
int
decr_free_channels(struct isdn_ctrl_state *ctrl)
{
	if (ctrl == NULL) {
		logit(LL_ERR, "decr_free_channels: invalid controller!");
		return(ERROR);
	}
	if (ctrl->freechans > 0)
	{
		ctrl->freechans--;
		DBGL(DL_CNST, (logit(LL_DBG, "decr_free_channels: ctrl %d, now %d chan free", ctrl->isdnif, ctrl->freechans)));
		return(GOOD);
	}
	else
	{
		logit(LL_ERR, "decr_free_channels: controller [%d] already 0 free chans!", ctrl->isdnif);
		return(ERROR);
	}
}		
	
/*--------------------------------------------------------------------------*
 *	increment number of free channels for controller
 *--------------------------------------------------------------------------*/
int
incr_free_channels(struct isdn_ctrl_state *ctrl)
{
	if (ctrl == NULL) {
		logit(LL_ERR, "incr_free_channels: invalid controller!");
		return(ERROR);
	}
	if (ctrl->freechans < MAX_CHANCTRL)
	{
		ctrl->freechans++;
		DBGL(DL_CNST, (logit(LL_DBG, "incr_free_channels: ctrl %d, now %d chan free", ctrl->isdnif, ctrl->freechans)));
		return(GOOD);
	}
	else
	{
		logit(LL_ERR, "incr_free_channels: controller [%d] already 2 free chans!", ctrl->isdnif);
		return(ERROR);
	}
}		
	
/*--------------------------------------------------------------------------*
 *	get number of free channels for controller
 *--------------------------------------------------------------------------*/
int
get_free_channels(struct isdn_ctrl_state *ctrl)
{
	if (ctrl == NULL) {
		logit(LL_ERR, "get_free_channels: invalid controller!");
		return(ERROR);
	}
	DBGL(DL_CNST, (logit(LL_DBG, "get_free_channels: ctrl %d, %d chan free", ctrl->isdnif, ctrl->freechans)));
	return (ctrl->freechans);
}		
	
/*--------------------------------------------------------------------------*
 *	set channel state to busy
 *--------------------------------------------------------------------------*/
int
set_channel_busy(struct isdn_ctrl_state *ctrl, int channel)
{
	if (ctrl == NULL) {
		logit(LL_ERR, "set_channel_busy: invalid controller");
		return(ERROR);
	}
		
	switch(channel)
	{
		case CHAN_B1:
			if (ctrl->stateb1 == CHAN_RUN) {
				DBGL(DL_CNST, (logit(LL_DBG, "set_channel_busy: controller [%d] channel B1 already busy!", ctrl->isdnif)));
			}
			else
			{
				ctrl->stateb1 = CHAN_RUN;
				DBGL(DL_CNST, (logit(LL_DBG, "set_channel_busy: controller [%d] channel B1 set to BUSY!", ctrl->isdnif)));
			}
			break;

		case CHAN_B2:
			if (ctrl->stateb2 == CHAN_RUN)
			{
				DBGL(DL_CNST, (logit(LL_DBG, "set_channel_busy: controller [%d] channel B2 already busy!", ctrl->isdnif)));
			}
			else
			{
				ctrl->stateb2 = CHAN_RUN;
				DBGL(DL_CNST, (logit(LL_DBG, "set_channel_busy: controller [%d] channel B2 set to BUSY!", ctrl->isdnif)));
			}
			break;

		default:
			logit(LL_ERR, "set_channel_busy: controller [%d], invalid channel [%d]!", ctrl->isdnif, channel);
			return(ERROR);
			break;
	}
	return(GOOD);
}

/*--------------------------------------------------------------------------*
 *	set channel state to idle
 *--------------------------------------------------------------------------*/
int
set_channel_idle(struct isdn_ctrl_state *ctrl, int channel)
{
	if (ctrl == NULL) {
		logit(LL_ERR, "set_channel_idle: invalid controller");
		return(ERROR);
	}
		
	switch(channel)
	{
		case CHAN_B1:
			if (ctrl->stateb1 == CHAN_IDLE) {
				DBGL(DL_CNST, (logit(LL_DBG, "set_channel_idle: controller [%d] channel B1 already idle!", ctrl->isdnif)));
			} else {
				ctrl->stateb1 = CHAN_IDLE;
				DBGL(DL_CNST, (logit(LL_DBG, "set_channel_idle: controller [%d] channel B1 set to IDLE!", ctrl->isdnif)));
			}
			break;

		case CHAN_B2:
			if (ctrl->stateb2 == CHAN_IDLE) {
				DBGL(DL_CNST, (logit(LL_DBG, "set_channel_idle: controller [%d] channel B2 already idle!", ctrl->isdnif)));
			} else {
				ctrl->stateb2 = CHAN_IDLE;
				DBGL(DL_CNST, (logit(LL_DBG, "set_channel_idle: controller [%d] channel B2 set to IDLE!", ctrl->isdnif)));
			}
			break;

		default:
			DBGL(DL_CNST, (logit(LL_DBG, "set_channel_idle: controller [%d], invalid channel [%d]!", ctrl->isdnif, channel)));
			return(ERROR);
			break;
	}
	return(GOOD);
}

/*--------------------------------------------------------------------------*
 *	return channel state
 *--------------------------------------------------------------------------*/
int
ret_channel_state(struct isdn_ctrl_state *ctrl, int channel)
{
	if (ctrl == NULL) {
		logit(LL_ERR, "ret_channel_state: invalid controller!");
		return(ERROR);
	}
		
	switch(channel)
	{
		case CHAN_B1:
			return (ctrl->stateb1);
			break;

		case CHAN_B2:
			return (ctrl->stateb2);
			break;

		default:
			logit(LL_ERR, "ret_channel_state: controller [%d], invalid channel [%d]!", ctrl->isdnif, channel);
			return(ERROR);
			break;
	}
	return(ERROR);
}

/* EOF */
@


1.3
log
@- Sync isdnd with NetBSD (adds load firmware capability)
- Make ppp portable (ifdefing) again
@
text
@d52 1
a52 1
init_new_controller(int bri)
d57 1
a57 1
	mcir.controller = bri;
d62 1
a62 1
	if((init_controller_state(bri, mcir.devname, mcir.cardname, mcir.tei)) == ERROR)
d64 1
a64 1
		logit(LL_ERR, "init_new_controller: init_controller_state for controller %d failed", bri);
d87 1
a87 1
		max = mcir.maxbri;
d123 1
a123 1
	ctrl->bri = controller;
d191 1
a191 1
				    "open %s: %s!", cst->bri, cst->firmware,
d201 1
a201 1
				    "mmap %s: %s!", cst->bri, cst->firmware,
d207 1
a207 1
			    "%d: loading firmware from [%s]", cst->bri,
d210 1
a210 1
			idr.controller = cst->bri;
d218 1
a218 1
				    "load %s: %s!", cst->bri, cst->firmware,
d235 1
a235 1
	mpi.controller = ctrl->bri;
d270 1
a270 1
		DBGL(DL_CNST, (logit(LL_DBG, "set_controller_state: controller [%d] set UP!", ctrl->bri)));
d275 1
a275 1
		DBGL(DL_CNST, (logit(LL_DBG, "set_controller_state: controller [%d] set DOWN!", ctrl->bri)));
d311 1
a311 1
		DBGL(DL_CNST, (logit(LL_DBG, "decr_free_channels: ctrl %d, now %d chan free", ctrl->bri, ctrl->freechans)));
d316 1
a316 1
		logit(LL_ERR, "decr_free_channels: controller [%d] already 0 free chans!", ctrl->bri);
d334 1
a334 1
		DBGL(DL_CNST, (logit(LL_DBG, "incr_free_channels: ctrl %d, now %d chan free", ctrl->bri, ctrl->freechans)));
d339 1
a339 1
		logit(LL_ERR, "incr_free_channels: controller [%d] already 2 free chans!", ctrl->bri);
d354 1
a354 1
	DBGL(DL_CNST, (logit(LL_DBG, "get_free_channels: ctrl %d, %d chan free", ctrl->bri, ctrl->freechans)));
d373 1
a373 1
				DBGL(DL_CNST, (logit(LL_DBG, "set_channel_busy: controller [%d] channel B1 already busy!", ctrl->bri)));
d378 1
a378 1
				DBGL(DL_CNST, (logit(LL_DBG, "set_channel_busy: controller [%d] channel B1 set to BUSY!", ctrl->bri)));
d385 1
a385 1
				DBGL(DL_CNST, (logit(LL_DBG, "set_channel_busy: controller [%d] channel B2 already busy!", ctrl->bri)));
d390 1
a390 1
				DBGL(DL_CNST, (logit(LL_DBG, "set_channel_busy: controller [%d] channel B2 set to BUSY!", ctrl->bri)));
d395 1
a395 1
			logit(LL_ERR, "set_channel_busy: controller [%d], invalid channel [%d]!", ctrl->bri, channel);
d417 1
a417 1
				DBGL(DL_CNST, (logit(LL_DBG, "set_channel_idle: controller [%d] channel B1 already idle!", ctrl->bri)));
d420 1
a420 1
				DBGL(DL_CNST, (logit(LL_DBG, "set_channel_idle: controller [%d] channel B1 set to IDLE!", ctrl->bri)));
d426 1
a426 1
				DBGL(DL_CNST, (logit(LL_DBG, "set_channel_idle: controller [%d] channel B2 already idle!", ctrl->bri)));
d429 1
a429 1
				DBGL(DL_CNST, (logit(LL_DBG, "set_channel_idle: controller [%d] channel B2 set to IDLE!", ctrl->bri)));
d434 1
a434 1
			DBGL(DL_CNST, (logit(LL_DBG, "set_channel_idle: controller [%d], invalid channel [%d]!", ctrl->bri, channel)));
d463 1
a463 1
			logit(LL_ERR, "ret_channel_state: controller [%d], invalid channel [%d]!", ctrl->bri, channel);
@


1.2
log
@pull in the remaining ISDN man pages and the daemon from NetBSD,
replacing the postcard-ware ones

I still think it's okay to send Hellmuth a postcard, though.
@
text
@d38 5
d132 1
d148 4
a151 1
/* XXX - replace by something usefull */
d153 1
a153 2
	int ret;
	int unit = 0;
d173 54
@


1.1
log
@Import ISDN (i4b) into MirBSD
Done:
 - kernel support
 - (commented out) entries in GENERIC
 - MAKEDEV file with licence issues
 - isdnd

Not done:
 - testing
 - configuration files

Not planned:
 - more stuff from i4b (voicemail, fax, etc)
@
text
@d1 2
a2 2
/* $MirBSD$
 * Copyright (c) 1997, 1999 Hellmuth Michaelis. All rights reserved.
d30 1
a30 1
 *	_Id: controller.c,v 1.18 1999/09/23 14:37:06 hm Exp $
d32 3
a34 1
 *      last edit-date: [Thu Sep 23 15:53:38 1999]
d41 1
a41 1
init_controller_state(int controller, int ctrl_type, int card_type, int tei);
d43 5
a47 5
/*---------------------------------------------------------------------------*
 *	get name of a controller
 *---------------------------------------------------------------------------*/
const char *
name_of_controller(int ctrl_type, int card_type)
d49 9
a57 46
	static char *passive_card[] = {
		"Teles S0/8",
		"Teles S0/16",
		"Teles S0/16.3",
		"AVM A1 or Fritz!Card",
		"Teles S0/16.3 PnP",
		"Creatix S0 PnP",
		"USRobotics Sportster ISDN TA",
		"Dr. Neuhaus NICCY Go@@",
		"Sedlbauer win speed",
 		"Dynalink IS64PH",
		"ISDN Master, MasterII or Blaster",
		"AVM PCMCIA Fritz!Card",
		"ELSA QuickStep 1000pro/ISA",
		"ELSA QuickStep 1000pro/PCI",
		"Siemens I-Talk",
		"ELSA MicroLink ISDN/MC",
		"ELSA MicroLink MCall",
 		"ITK ix1 micro",
		"AVM Fritz!Card PCI",
		"ELSA PCC-16",
		"AVM Fritz!Card PnP",		
		"Siemens I-Surf 2.0 PnP",		
 		"Asuscom ISDNlink 128K PnP"
	};

	static char *daic_card[] = {
		"EICON.Diehl S",
		"EICON.Diehl SX/SXn",
		"EICON.Diehl SCOM",
		"EICON.Diehl QUADRO",
	};

	if(ctrl_type == CTRL_PASSIVE)
	{
		int index = card_type - CARD_TYPEP_8;
		if (index >= 0 && index < (sizeof passive_card / sizeof passive_card[0]))
			return passive_card[index];
	}
	else if(ctrl_type == CTRL_DAIC)
	{
		int index = card_type - CARD_TYPEA_DAIC_S;
		if (index >= 0 && index < (sizeof daic_card / sizeof daic_card[0] ))
			return daic_card[index];
	}
	else if(ctrl_type == CTRL_TINADD)
d59 2
a60 1
		return "Stollmann tina-dd";
d62 1
a63 3
	return "unknown card type";
}
 
d71 1
a71 1
	int max = 1;
d74 2
a75 1
	for(i=0; i < max; i++)
d80 1
a80 4
		{
			log(LL_ERR, "init_controller: ioctl I4B_CTRL_INFO_REQ failed: %s", strerror(errno));
			do_exit(1);
		}
d82 1
a82 11
		if((ncontroller = max = mcir.ncontroller) == 0)
		{
			log(LL_ERR, "init_controller: no ISDN controller found!");
			do_exit(1);
		}

		if(mcir.ctrl_type == -1 || mcir.card_type == -1)
		{
			log(LL_ERR, "init_controller: ctrl/card is invalid!");
			do_exit(1);
		}
d86 1
a86 1
		if((init_controller_state(i, mcir.ctrl_type, mcir.card_type, mcir.tei)) == ERROR)
d88 1
a88 1
			log(LL_ERR, "init_controller: init_controller_state for controller %d failed", i);
d92 1
a92 1
	DBGL(DL_RCCF, (log(LL_DBG, "init_controller: found %d ISDN controller(s)", max)));
d99 1
a99 1
init_controller_state(int controller, int ctrl_type, int card_type, int tei)
d101 5
a105 3
	if((controller < 0) || (controller >= ncontroller))
	{
		log(LL_ERR, "init_controller_state: invalid controller number [%d]!", controller);
d109 1
a109 1
	/* init controller tab */
d111 22
a132 66
	if(ctrl_type == CTRL_PASSIVE)
	{
		if((card_type > CARD_TYPEP_UNK) &&
		   (card_type <= CARD_TYPEP_MAX))
		{
			isdn_ctrl_tab[controller].ctrl_type = ctrl_type;
			isdn_ctrl_tab[controller].card_type = card_type;
			isdn_ctrl_tab[controller].state = CTRL_UP;
			isdn_ctrl_tab[controller].stateb1 = CHAN_IDLE;
			isdn_ctrl_tab[controller].stateb2 = CHAN_IDLE;
			isdn_ctrl_tab[controller].freechans = MAX_CHANCTRL;
			isdn_ctrl_tab[controller].tei = tei;
			isdn_ctrl_tab[controller].l1stat = LAYER_IDLE;
			isdn_ctrl_tab[controller].l2stat = LAYER_IDLE;
			DBGL(DL_RCCF, (log(LL_DBG, "init_controller_state: controller %d is %s",
			  controller, 
			  name_of_controller(isdn_ctrl_tab[controller].ctrl_type,
					     isdn_ctrl_tab[controller].card_type))));
		}
		else
		{
			log(LL_ERR, "init_controller_state: unknown card type %d", card_type);
			return(ERROR);
		}
		
	}
	else if(ctrl_type == CTRL_DAIC)
	{
		isdn_ctrl_tab[controller].ctrl_type = ctrl_type;
		isdn_ctrl_tab[controller].card_type = card_type;
		isdn_ctrl_tab[controller].state = CTRL_DOWN;
		isdn_ctrl_tab[controller].stateb1 = CHAN_IDLE;
		isdn_ctrl_tab[controller].stateb2 = CHAN_IDLE;
		isdn_ctrl_tab[controller].freechans = MAX_CHANCTRL;
		isdn_ctrl_tab[controller].tei = tei;	
		isdn_ctrl_tab[controller].l1stat = LAYER_IDLE;
		isdn_ctrl_tab[controller].l2stat = LAYER_IDLE;

		log(LL_DMN, "init_controller_state: controller %d is %s",
		  controller,
		  name_of_controller(isdn_ctrl_tab[controller].ctrl_type,
				     isdn_ctrl_tab[controller].card_type));
	}
	else if(ctrl_type == CTRL_TINADD)
	{
		isdn_ctrl_tab[controller].ctrl_type = ctrl_type;
		isdn_ctrl_tab[controller].card_type = 0;
		isdn_ctrl_tab[controller].state = CTRL_DOWN;
		isdn_ctrl_tab[controller].stateb1 = CHAN_IDLE;
		isdn_ctrl_tab[controller].stateb2 = CHAN_IDLE;
		isdn_ctrl_tab[controller].freechans = MAX_CHANCTRL;
		isdn_ctrl_tab[controller].tei = tei;	
		isdn_ctrl_tab[controller].l1stat = LAYER_IDLE;
		isdn_ctrl_tab[controller].l2stat = LAYER_IDLE;

		log(LL_DMN, "init_controller_state: controller %d is %s",
		  controller,
		  name_of_controller(isdn_ctrl_tab[controller].ctrl_type,
				     isdn_ctrl_tab[controller].card_type));
		
	}
	else
	{
		log(LL_ERR, "init_controller_state: unknown controller type %d", ctrl_type);
		return(ERROR);
	}
d142 2
d153 1
a153 1
			DBGL(DL_RCCF, (log(LL_DBG, "init_active_controller, tina-dd %d: executing [%s %d]", unit, tinainitprog, unit)));
d155 1
a155 1
			sprintf(cmdbuf, "%s %d", tinainitprog, unit);
d159 1
a159 1
				log(LL_ERR, "init_active_controller, tina-dd %d: %s returned %d!", unit, tinainitprog, ret);
d164 1
d167 16
d189 1
a189 2
	int controller;
	msg_prot_ind_t mpi;
d191 2
a192 11
	for(controller = 0; controller < ncontroller; controller++)
	{
		mpi.controller = controller;
		mpi.protocol = isdn_ctrl_tab[controller].protocol;
		
		if((ioctl(isdnfd, I4B_PROT_IND, &mpi)) < 0)
		{
			log(LL_ERR, "init_controller_protocol: ioctl I4B_PROT_IND failed: %s", strerror(errno));
			do_exit(1);
		}
	}
d199 1
a199 1
set_controller_state(int controller, int state)
d201 2
a202 3
	if((controller < 0) || (controller >= ncontroller))
	{
		log(LL_ERR, "set_controller_state: invalid controller number [%d]!", controller);
d206 3
a208 4
	if(state == CTRL_UP)
	{
		isdn_ctrl_tab[controller].state = CTRL_UP;
		DBGL(DL_CNST, (log(LL_DBG, "set_controller_state: controller [%d] set UP!", controller)));
d212 2
a213 2
		isdn_ctrl_tab[controller].state = CTRL_DOWN;
		DBGL(DL_CNST, (log(LL_DBG, "set_controller_state: controller [%d] set DOWN!", controller)));
d217 1
a217 1
		log(LL_ERR, "set_controller_state: invalid controller state [%d]!", state);
d227 1
a227 1
get_controller_state(int controller)
d229 2
a230 3
	if((controller < 0) || (controller >= ncontroller))
	{
		log(LL_ERR, "set_controller_state: invalid controller number [%d]!", controller);
d233 1
a233 1
	return(isdn_ctrl_tab[controller].state);
d240 1
a240 1
decr_free_channels(int controller)
d242 2
a243 3
	if((controller < 0) || (controller >= ncontroller))
	{
		log(LL_ERR, "decr_free_channels: invalid controller number [%d]!", controller);
d246 1
a246 1
	if(isdn_ctrl_tab[controller].freechans > 0)
d248 2
a249 2
		(isdn_ctrl_tab[controller].freechans)--;
		DBGL(DL_CNST, (log(LL_DBG, "decr_free_channels: ctrl %d, now %d chan free", controller, isdn_ctrl_tab[controller].freechans)));
d254 1
a254 1
		log(LL_ERR, "decr_free_channels: controller [%d] already 0 free chans!", controller);
d263 1
a263 1
incr_free_channels(int controller)
d265 2
a266 3
	if((controller < 0) || (controller >= ncontroller))
	{
		log(LL_ERR, "incr_free_channels: invalid controller number [%d]!", controller);
d269 1
a269 1
	if(isdn_ctrl_tab[controller].freechans < MAX_CHANCTRL)
d271 2
a272 2
		(isdn_ctrl_tab[controller].freechans)++;
		DBGL(DL_CNST, (log(LL_DBG, "incr_free_channels: ctrl %d, now %d chan free", controller, isdn_ctrl_tab[controller].freechans)));
d277 1
a277 1
		log(LL_ERR, "incr_free_channels: controller [%d] already 2 free chans!", controller);
d286 1
a286 1
get_free_channels(int controller)
d288 2
a289 3
	if((controller < 0) || (controller >= ncontroller))
	{
		log(LL_ERR, "get_free_channels: invalid controller number [%d]!", controller);
d292 2
a293 2
	DBGL(DL_CNST, (log(LL_DBG, "get_free_channels: ctrl %d, %d chan free", controller, isdn_ctrl_tab[controller].freechans)));
	return(isdn_ctrl_tab[controller].freechans);
d300 1
a300 1
set_channel_busy(int controller, int channel)
d302 2
a303 3
	if((controller < 0) || (controller >= ncontroller))
	{
		log(LL_ERR, "set_channel_busy: invalid controller number [%d]!", controller);
d310 2
a311 3
			if(isdn_ctrl_tab[controller].stateb1 == CHAN_RUN)
			{
				DBGL(DL_CNST, (log(LL_DBG, "set_channel_busy: controller [%d] channel B1 already busy!", controller)));
d315 2
a316 2
				isdn_ctrl_tab[controller].stateb1 = CHAN_RUN;
				DBGL(DL_CNST, (log(LL_DBG, "set_channel_busy: controller [%d] channel B1 set to BUSY!", controller)));
d321 1
a321 1
			if(isdn_ctrl_tab[controller].stateb2 == CHAN_RUN)
d323 1
a323 1
				DBGL(DL_CNST, (log(LL_DBG, "set_channel_busy: controller [%d] channel B2 already busy!", controller)));
d327 2
a328 2
				isdn_ctrl_tab[controller].stateb2 = CHAN_RUN;
				DBGL(DL_CNST, (log(LL_DBG, "set_channel_busy: controller [%d] channel B2 set to BUSY!", controller)));
d333 1
a333 1
			log(LL_ERR, "set_channel_busy: controller [%d], invalid channel [%d]!", controller, channel);
d344 1
a344 1
set_channel_idle(int controller, int channel)
d346 2
a347 3
	if((controller < 0) || (controller >= ncontroller))
	{
		log(LL_ERR, "set_channel_idle: invalid controller number [%d]!", controller);
d354 5
a358 8
			if(isdn_ctrl_tab[controller].stateb1 == CHAN_IDLE)
			{
				DBGL(DL_CNST, (log(LL_DBG, "set_channel_idle: controller [%d] channel B1 already idle!", controller)));
			}
			else
			{
				isdn_ctrl_tab[controller].stateb1 = CHAN_IDLE;
				DBGL(DL_CNST, (log(LL_DBG, "set_channel_idle: controller [%d] channel B1 set to IDLE!", controller)));
d363 5
a367 8
			if(isdn_ctrl_tab[controller].stateb2 == CHAN_IDLE)
			{
				DBGL(DL_CNST, (log(LL_DBG, "set_channel_idle: controller [%d] channel B2 already idle!", controller)));
			}
			else
			{
				isdn_ctrl_tab[controller].stateb2 = CHAN_IDLE;
				DBGL(DL_CNST, (log(LL_DBG, "set_channel_idle: controller [%d] channel B2 set to IDLE!", controller)));
d372 1
a372 1
			DBGL(DL_CNST, (log(LL_DBG, "set_channel_idle: controller [%d], invalid channel [%d]!", controller, channel)));
d383 1
a383 1
ret_channel_state(int controller, int channel)
d385 2
a386 3
	if((controller < 0) || (controller >= ncontroller))
	{
		log(LL_ERR, "ret_channel_state: invalid controller number [%d]!", controller);
d393 1
a393 1
			return(isdn_ctrl_tab[controller].stateb1);
d397 1
a397 1
			return(isdn_ctrl_tab[controller].stateb2);
d401 1
a401 1
			log(LL_ERR, "ret_channel_state: controller [%d], invalid channel [%d]!", controller, channel);
@

