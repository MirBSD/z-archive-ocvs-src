head	1.2;
access;
symbols
	tg-mergetmp-1:1.1.1.1
	MIRBSD_7quater:1.1.1.1
	cvs-200401271800:1.1.1.1
	cvs-200401261630:1.1.1.1
	cvs-200401021645:1.1.1.1
	MIRBSD_7_ALPHA:1.1.1.1.0.6
	MIRBSD_7:1.1.1.1.0.4
	cvs-200312222040:1.1.1.1
	MIRBSD_7ter:1.1.1.1
	MIRBSD_7_DEV:1.1.1.1.0.2
	cvs-200310020700:1.1.1.1
	cvs-200309271030:1.1.1.1
	cvs-200309261655:1.1.1.1
	cvs-200309251530:1.1.1.1
	cvs-200308302005:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.2
date	2004.05.21.20.08.30;	author tg;	state dead;
branches;
next	1.1;

1.1
date	2003.08.30.23.56.47;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.08.30.23.56.47;	author tg;	state Exp;
branches;
next	;


desc
@@


1.2
log
@* merge OpenBSD 3.5-current
* re-sort entries in Makefile
  => not a bunch of adds any more; all alphabetic
  => remove obsolete SUBDIRS_ONLY_BSD for now
     (MirLinux won't come that soon due to a certain lawsuit,
      licence issues with unwillingly GNU fanatics, and my
      chronic unwillingness to do masochistic work)
* spacing, RCS IDs, etc.
* pkg gets folded into pkg_install, so we only have one dir
  to worry about
* pkg_add leaves the tree - nobody cared about this kind
  of package tools anyways, and they're not part of MirBSD
  (although still supported by MirPorts)
* mopd leaves - we don't have VAX support anyways
@
text
@#include <ctype.h>
#include <dirent.h>
#include <stdio.h>
#include <string.h>
#include <time.h>

/*
 * Compare a string to a mask
 * Mask characters:
 *   @@ - uppercase letter
 *   # - lowercase letter
 *   & - hex digit
 *   # - digit
 *   * - swallow remaining characters 
 *  <x> - exact match for any other character
 */
static int
checkmask(const char *data, const char *mask)
{
    int i, ch, d;

    for (i=0; mask[i] != '\0' && mask[i] != '*'; i++)
    {
	ch = mask[i];
	d = data[i];
	if (ch == '@@')
	{
	    if (!isupper(d)) return 0;
	} else if (ch == '$')
	{
	    if (!islower(d)) return 0;
	} else if (ch == '#')
	{
	    if (!isdigit(d)) return 0;
	} else if (ch == '&')
	{
	    if (!isxdigit(d)) return 0;
	} else if (ch != d) return 0;
    }

    if (mask[i] == '*') return 1;
    else return (data[i] == '\0');
}

/*
 * Converts 8 hex digits to a time integer
 */
static int
hex2sec(const char *x)
{
    int i, ch;
    unsigned int j;

    for (i=0, j=0; i < 8; i++)
    {
	ch = x[i];
	j <<= 4;
	if (isdigit(ch)) j |= ch - '0';
	else if (isupper(ch)) j |= ch - ('A' - 10);
	else j |= ch - ('a' - 10);
    }
    if (j == 0xffffffff) return -1;  /* so that it works with 8-byte ints */
    else return j;
}

int
main(int argc, char **argv)
{
    int i, ver;
    DIR *d;
    struct dirent *e;
    const char *s;
    FILE *fp;
    char path[FILENAME_MAX+1];
    char line[1035];
    time_t date, lmod, expire;
    unsigned int len;
    struct tm ts;
    char sdate[30], slmod[30], sexpire[30];
    const char time_format[]="%e %b %Y %R";

    if (argc != 2)
    {
	printf("Usage: cls directory\n");
	exit(0);
    }

    d = opendir(argv[1]);
    if (d == NULL)
    {
	perror("opendir");
	exit(1);
    }

    for (;;)
    {
	e = readdir(d);
	if (e == NULL) break;
	s = e->d_name;
	if (s[0] == '.' || s[0] == '#') continue;
	sprintf(path, "%s/%s", argv[1], s);
	fp = fopen(path, "r");
	if (fp == NULL)
	{
	    perror("fopen");
	    continue;
	}
	if (fgets(line, 1034, fp) == NULL)
	{
	    perror("fgets");
	    fclose(fp);
	    continue;
	}
	if (!checkmask(line, "&&&&&&&& &&&&&&&& &&&&&&&& &&&&&&&& &&&&&&&&\n"))
	{
	    fprintf(stderr, "Bad cache file\n");
	    fclose(fp);
	    continue;
	}
	date = hex2sec(line);
	lmod = hex2sec(line+9);
	expire = hex2sec(line+18);
	ver = hex2sec(line+27);
	len = hex2sec(line+35);
	if (fgets(line, 1034, fp) == NULL)
	{
	    perror("fgets");
	    fclose(fp);
	    continue;
	}
	fclose(fp);
	i = strlen(line);
	if (strncmp(line, "X-URL: ", 7) != 0 || line[i-1] != '\n')
	{
	    fprintf(stderr, "Bad cache file\n");
	    continue;
	}
	line[i-1] = '\0';
	if (date != -1)
	{
	    ts = *gmtime(&date);
	    strftime(sdate, 30, time_format, &ts);
	} else
	    strcpy(sdate, "-");

	if (lmod != -1)
	{	
	    ts = *gmtime(&lmod);
	    strftime(slmod, 30, time_format, &ts);
	} else
	    strcpy(slmod, "-");

	if (expire != -1)
	{
	    ts = *gmtime(&expire);
	    strftime(sexpire, 30, time_format, &ts);
	} else
	    strcpy(sexpire, "-");

	printf("%s: %d; %s  %s  %s\n", line+7, ver, sdate, slmod, sexpire);
    }

    closedir(d);
    return 0;
}
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Synchronize with OpenBSD 3.4-beta
@
text
@@
