head	1.1;
branch	1.1.1;
access;
symbols
	tg-mergetmp-mirosx-1:1.1.1.3
	tg-mergefixes-1-branch:1.1.1.3.0.14
	tg-mergefixes-1-base:1.1.1.3
	MIROS_X:1.1.1.3.0.12
	MIROS_X_BASE:1.1.1.3
	tg-mergetmp-3:1.1.1.3
	MIRBSD_XP_MIRPPC:1.1.1.3.0.10
	MIRBSD_XP_SPARC_BASE:1.1.1.3
	MIRBSD_XP_SPARC:1.1.1.3.0.8
	MIRBSD_7quater:1.1.1.3
	cvs-200405160640:1.1.1.3
	cvs-200401271800:1.1.1.3
	cvs-200401261630:1.1.1.3
	cvs-200401021645:1.1.1.3
	MIRBSD_7_ALPHA:1.1.1.3.0.6
	MIRBSD_7:1.1.1.3.0.4
	cvs-200312222040:1.1.1.3
	MIRBSD_7ter:1.1.1.3
	MIRBSD_7_DEV:1.1.1.3.0.2
	cvs-200310020700:1.1.1.3
	cvs-200309271030:1.1.1.3
	cvs-200309251530:1.1.1.3
	cvs-200308302005:1.1.1.3
	cvs-200308171200:1.1.1.3
	ctm-3496:1.1.1.3
	ctm-3449:1.1.1.2
	ctm-3437:1.1.1.2
	cvs-200307191805:1.1.1.2
	ctm-3425:1.1.1.2
	cvs-200307091500:1.1.1.2
	ctm-3389:1.1.1.2
	cvs-200306291430:1.1.1.2
	ctm-3341:1.1.1.2
	MIRBSD_5:1.1.1.1
	cvs-200306082100:1.1.1.1
	ctm-3316:1.1.1.1
	ctm-3272:1.1.1.1
	ctm-3264:1.1.1.1
	cvs-200305071630:1.1.1.1
	MIRBSD_4:1.1.1.1
	ctm-3203:1.1.1.1
	cvs-20030410-1130:1.1.1.1
	ctm-3155:1.1.1.1
	ctm-3132:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.1
date	2003.03.22.17.54.17;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.03.22.17.54.17;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2003.06.19.12.55.49;	author tg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2003.08.11.18.49.59;	author tg;	state Stab;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@/*	$OpenBSD: apm.c,v 1.7 2002/09/06 19:14:47 deraadt Exp $	*/

/*
 *  Copyright (c) 1996 John T. Kohl
 *  All rights reserved.
 * 
 *  Redistribution and use in source and binary forms, with or without
 *  modification, are permitted provided that the following conditions
 *  are met:
 *  1. Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 *  2. Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in the
 *     documentation and/or other materials provided with the distribution.
 *  3. The name of the author may not be used to endorse or promote products
 *     derived from this software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR `AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 * 
 */

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <fcntl.h>
#include <errno.h>
#include <err.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <sys/un.h>
#include <sys/ioctl.h>
#include <machine/apmvar.h>
#include "pathnames.h"
#include "apm-proto.h"

#define FALSE 0
#define TRUE 1

extern char *__progname;

void usage(void);
void zzusage(void);
int do_zzz(int, enum apm_action action);
int open_socket(const char *pn);
int send_command(int fd, struct apm_command *cmd, struct apm_reply *reply);

void
usage(void)
{
    fprintf(stderr,"usage: %s [-v] [-z | -S] [-slbam] [-f socket]\n",
	    __progname);
    exit(1);
}

void
zzusage(void)
{
    fprintf(stderr,"usage: %s [-z | -S] [-f socket]\n",
	    __progname);
    exit(1);
}

int
send_command(int fd,
	     struct apm_command *cmd,
	     struct apm_reply *reply)
{
	/* send a command to the apm daemon */
	cmd->vno = APMD_VNO;

	if (send(fd, cmd, sizeof(*cmd), 0) == sizeof(*cmd)) {
		if (recv(fd, reply, sizeof(*reply), 0) != sizeof(*reply)) {
			warn("invalid reply from APM daemon");
		return 1;
		}
	} else {
		warn("invalid send to APM daemon");
		return 1;
	}

	return 0;
}

int
do_zzz(int fd, enum apm_action action)
{
	struct apm_command command;
	struct apm_reply reply;

	switch (action) {
	case NONE:
	case SUSPEND:
		command.action = SUSPEND;
		break;
	case STANDBY:
		command.action = STANDBY;
		break;
	default:
		zzusage();
	}

	printf("Suspending system...\n");
	exit(send_command(fd, &command, &reply));
}

int
open_socket(const char *sockname)
{
	int sock, errr;
	struct sockaddr_un s_un;

	sock = socket(AF_UNIX, SOCK_STREAM, 0);
	if (sock == -1)
		err(1, "cannot create local socket");

	s_un.sun_family = AF_UNIX;
	strncpy(s_un.sun_path, sockname, sizeof(s_un.sun_path));
	s_un.sun_len = SUN_LEN(&s_un);
	if (connect(sock, (struct sockaddr *)&s_un, s_un.sun_len) == -1) {
		errr = errno;
		close(sock);
		errno = errr;
		err(1, "cannot open connection to APM daemon");
	}

	return sock;
}

int
main(int argc, char *argv[])
{
	const char *sockname = _PATH_APM_SOCKET;
	int dostatus = FALSE;
	int doac = FALSE;
	int dopct = FALSE;
	int dobstate = FALSE;
	int domin = FALSE;
	int verbose = FALSE;
	int ch, fd, rval;
	enum apm_action action = NONE;
	struct apm_command command;
	struct apm_reply reply;

	while ((ch = getopt(argc, argv, "lmbvasSzf:")) != -1)
		switch(ch) {
		case 'v':
			verbose = TRUE;
			break;
		case 'f':
			sockname = optarg;
			break;
		case 'z':
			if (action != NONE)
				usage();
			action = SUSPEND;
			break;
		case 'S':
			if (action != NONE)
				usage();
			action = STANDBY;
			break;
		case 's':
			if (action != NONE && action != GETSTATUS)
				usage();
			dostatus = TRUE;
			action = GETSTATUS;
			break;
		case 'b':
			if (action != NONE && action != GETSTATUS)
				usage();
			dobstate = TRUE;
			action = GETSTATUS;
			break;
		case 'l':
			if (action != NONE && action != GETSTATUS)
				usage();
			dopct = TRUE;
			action = GETSTATUS;
			break;
		case 'm':
			if (action != NONE && action != GETSTATUS)
				usage();
			domin = TRUE;
			action = GETSTATUS;
			break;
		case 'a':
			if (action != NONE && action != GETSTATUS)
				usage();
			doac = TRUE;
			action = GETSTATUS;
			break;
		case '?':
		default:
			usage();
		}

		fd = open_socket(sockname);

		if (!strcmp(__progname, "zzz"))
			return (do_zzz(fd, action));

		switch (action) {
		case NONE:
			action = GETSTATUS;
			verbose = doac = dopct = dobstate = dostatus = domin =
			    TRUE;
			/* fallthrough */
		case GETSTATUS:
			if (fd == -1) {
				/* open the device directly and get status */
				fd = open(_PATH_APM_NORMAL, O_RDONLY);
				if (ioctl(fd, APM_IOC_GETPOWER,
				    &reply.batterystate) == 0)
					goto printval;
			}
		case SUSPEND:
		case STANDBY:
			command.action = action;
			break;
		default:
			usage();
		}

		if ((rval = send_command(fd, &command, &reply)) == 0) {
			switch (action) {
			case GETSTATUS:
			printval:
				if (verbose) {
					if (dobstate)
						printf("Battery state: %s\n",
						    battstate(reply.batterystate.battery_state));
					if (dopct)
						printf("Battery remaining: %d percent\n",
						    reply.batterystate.battery_life);
					if (domin) {
#ifdef __powerpc__
						if (reply.batterystate.battery_state == APM_BATT_CHARGING)
							printf("Remaining battery recharge time estimate: %d minutes\n",
							    reply.batterystate.minutes_left);
						else if (reply.batterystate.minutes_left == 0 &&
						    reply.batterystate.battery_life > 10)
							printf("Battery life estimate: not available\n");
						else
#endif
						printf("Battery life estimate: %d minutes\n",
						    reply.batterystate.minutes_left);
					}
					if (doac)
						printf("A/C adapter state: %s\n",
						    ac_state(reply.batterystate.ac_state));
					if (dostatus)
						printf("Power management enabled\n");
				} else {
					if (dobstate)
						printf("%d\n",
						    reply.batterystate.battery_state);
					if (dopct)
						printf("%d\n",
						    reply.batterystate.battery_life);
					if (domin)
						printf("%d\n",
						    reply.batterystate.minutes_left);
					if (doac)
						printf("%d\n",
						    reply.batterystate.ac_state);
					if (dostatus)
						printf("1\n");
				}
				break;
			default:
				break;
		}
		switch (reply.newstate) {
		case SUSPEND:
			printf("System will enter suspend mode momentarily.\n");
			break;
		case STANDBY:
			printf("System will enter standby mode momentarily.\n");
			break;
		default:
			break;
		}
	} else
		errx(rval, "cannot get reply from APM daemon");
	return (0);
}
@


1.1.1.1
log
@Import OpenBSD 3.3 source repository from CTM 3132 the first time
This opens an OpenBSD-mirabile (aka MirBSD) repository.

### MirBSD is:
# Copyright (c) 1982-2003 by Thorsten "mirabile" Glaser <x86@@ePost.de>
# Copyright © 1968-2003  The authors of And contributors to UNIX®, the
#       C Language, BSD/Berkeley Unix; 386BSD, NetBSD 1.1 and OpenBSD.
#
# Anyone who obtained a copy of this work is hereby permitted to freely use,
# distribute, modify, merge, sublicence, give away or sell it as long as the
# authors are given due credit and the following notice is retained:
#
# This work is provided "as is", with no explicit or implicit warranty what-
# soever. Use it only at your own risk. In no event may an author or contri-
# butor be held liable for any damage, directly or indirectly, that origina-
# ted through or is caused by creation or modification of this work.

MirBSD is my private tree. MirBSD does not differ very much from OpenBSD
and intentionally tracks OpenBSD. That's why it _is_ OpenBSD, just not the
official one. It's like with DarrenBSD.

At time of this writing, no advertising for MirBSD must be done,
because the advertising clause has not yet been sorted out.

http://templeofhate.com/tglaser/MirBSD/index.php
@
text
@@


1.1.1.2
log
@sync with OpenBSD, this gives us a fair amount of fixes
@
text
@d1 1
a1 1
/*	$OpenBSD: apm.c,v 1.8 2003/06/11 23:33:25 deraadt Exp $	*/
d75 3
a77 1
send_command(int fd, struct apm_command *cmd, struct apm_reply *reply)
@


1.1.1.3
log
@Import the complete OpenBSD source tree (base system)
as of CTM delta 3496 (roughly 1200 UTC today) into the
vendor branch.
Attention: this is a big update. Don't even try to
build this system, OpenBSD 3.4-beta, yet on your own.
@
text
@d1 1
a1 1
/*	$OpenBSD: apm.c,v 1.9 2003/07/30 21:44:32 deraadt Exp $	*/
d61 1
a61 1
	fprintf(stderr,"usage: %s [-v] [-z | -S] [-slbam] [-f socket]\n",
d63 1
a63 1
	exit(1);
d69 1
a69 1
	fprintf(stderr,"usage: %s [-z | -S] [-f socket]\n",
d71 1
a71 1
	exit(1);
d83 1
a83 1
		return (1);
d87 1
a87 1
		return (1);
d153 2
a154 2
	while ((ch = getopt(argc, argv, "lmbvasSzf:")) != -1) {
		switch (ch) {
a204 1
	}
d206 1
a206 1
	fd = open_socket(sockname);
d208 2
a209 2
	if (!strcmp(__progname, "zzz"))
		return (do_zzz(fd, action));
d211 20
a230 12
	switch (action) {
	case NONE:
		action = GETSTATUS;
		verbose = doac = dopct = dobstate = dostatus = domin = TRUE;
		/* fallthrough */
	case GETSTATUS:
		if (fd == -1) {
			/* open the device directly and get status */
			fd = open(_PATH_APM_NORMAL, O_RDONLY);
			if (ioctl(fd, APM_IOC_GETPOWER,
			    &reply.batterystate) == 0)
				goto printval;
a231 11
		/* fallthrough */
	case SUSPEND:
	case STANDBY:
		command.action = action;
		break;
	default:
		usage();
	}

	if ((rval = send_command(fd, &command, &reply)) != 0)
		errx(rval, "cannot get reply from APM daemon");
d233 12
a244 27
	switch (action) {
	case GETSTATUS:
	printval:
		if (!verbose) {
			if (dobstate)
				printf("%d\n",
				    reply.batterystate.battery_state);
			if (dopct)
				printf("%d\n",
				    reply.batterystate.battery_life);
			if (domin)
				printf("%d\n",
				    reply.batterystate.minutes_left);
			if (doac)
				printf("%d\n",
				    reply.batterystate.ac_state);
			if (dostatus)
				printf("1\n");
			break;
		}
		if (dobstate)
			printf("Battery state: %s\n",
			    battstate(reply.batterystate.battery_state));
		if (dopct)
			printf("Battery remaining: %d percent\n",
			    reply.batterystate.battery_life);
		if (domin) {
d246 7
a252 10
			if (reply.batterystate.battery_state ==
			    APM_BATT_CHARGING)
				printf("Remaining battery recharge "
				    "time estimate: %d minutes\n",
				    reply.batterystate.minutes_left);
			else if (reply.batterystate.minutes_left == 0 &&
			    reply.batterystate.battery_life > 10)
				printf("Battery life estimate: "
				    "not available\n");
			else
d254 27
a280 2
			printf("Battery life estimate: %d minutes\n",
			    reply.batterystate.minutes_left);
d282 12
a293 20
		if (doac)
			printf("A/C adapter state: %s\n",
			    ac_state(reply.batterystate.ac_state));
		if (dostatus)
			printf("Power management enabled\n");
		break;
	default:
		break;
	}

	switch (reply.newstate) {
	case SUSPEND:
		printf("System will enter suspend mode momentarily.\n");
		break;
	case STANDBY:
		printf("System will enter standby mode momentarily.\n");
		break;
	default:
		break;
	}
@


