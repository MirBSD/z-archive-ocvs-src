head	1.1;
branch	1.1.1;
access;
symbols
	tg-mergetmp-mirosx-1:1.1.1.2
	tg-mergefixes-1-branch:1.1.1.2.0.14
	tg-mergefixes-1-base:1.1.1.2
	MIROS_X:1.1.1.2.0.12
	MIROS_X_BASE:1.1.1.2
	tg-mergetmp-3:1.1.1.2
	MIRBSD_XP_MIRPPC:1.1.1.2.0.10
	MIRBSD_XP_SPARC_BASE:1.1.1.2
	MIRBSD_XP_SPARC:1.1.1.2.0.8
	MIRBSD_7quater:1.1.1.2
	cvs-200405160640:1.1.1.2
	cvs-200401271800:1.1.1.2
	cvs-200401261630:1.1.1.2
	cvs-200401021645:1.1.1.2
	MIRBSD_7_ALPHA:1.1.1.2.0.6
	MIRBSD_7:1.1.1.2.0.4
	cvs-200312222040:1.1.1.2
	MIRBSD_7ter:1.1.1.2
	MIRBSD_7_DEV:1.1.1.2.0.2
	cvs-200310020700:1.1.1.2
	cvs-200309271030:1.1.1.2
	cvs-200309251530:1.1.1.2
	cvs-200308302005:1.1.1.2
	cvs-200308171200:1.1.1.2
	ctm-3496:1.1.1.2
	ctm-3449:1.1.1.2
	ctm-3437:1.1.1.2
	cvs-200307191805:1.1.1.2
	ctm-3425:1.1.1.2
	cvs-200307091500:1.1.1.2
	ctm-3389:1.1.1.1
	cvs-200306291430:1.1.1.1
	ctm-3341:1.1.1.1
	MIRBSD_5:1.1.1.1
	cvs-200306082100:1.1.1.1
	ctm-3316:1.1.1.1
	ctm-3272:1.1.1.1
	ctm-3264:1.1.1.1
	cvs-200305071630:1.1.1.1
	MIRBSD_4:1.1.1.1
	ctm-3203:1.1.1.1
	cvs-20030410-1130:1.1.1.1
	ctm-3155:1.1.1.1
	ctm-3132:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.1
date	2003.03.22.17.56.01;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.03.22.17.56.01;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2003.07.09.16.55.26;	author tg;	state Stab;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@/*	$OpenBSD: test.c,v 1.3 1997/09/17 23:09:39 deraadt Exp $	*/

#include <rpc/rpc.h>
#include <rpcsvc/nlm_prot.h>
#ifndef lint
/*static char sccsid[] = "from: @@(#)nlm_prot.x 1.8 87/09/21 Copyr 1987 Sun Micro";*/
/*static char sccsid[] = "from: * @@(#)nlm_prot.x	2.1 88/08/01 4.0 RPCSRC";*/
static char rcsid[] = "nlm_prot.x,v 1.1 1994/08/04 19:01:48 wollman Exp";
#endif				/* not lint */

/* Default timeout can be changed using clnt_control() */
static struct timeval TIMEOUT = {0, 0};

nlm_testres *
nlm_test_1(argp, clnt)
	struct nlm_testargs *argp;
	CLIENT *clnt;
{
	static nlm_testres res;

	bzero((char *) &res, sizeof(res));
	if (clnt_call(clnt, NLM_TEST, xdr_nlm_testargs, argp, xdr_nlm_testres, &res, TIMEOUT) != RPC_SUCCESS) {
		return (NULL);
	}
	return (&res);
}


nlm_res *
nlm_lock_1(argp, clnt)
	struct nlm_lockargs *argp;
	CLIENT *clnt;
{
	enum clnt_stat st;
	static nlm_res res;

	bzero((char *) &res, sizeof(res));
	if (st = clnt_call(clnt, NLM_LOCK, xdr_nlm_lockargs, argp, xdr_nlm_res, &res, TIMEOUT) != RPC_SUCCESS) {
		printf("clnt_call returns %d\n", st);
		clnt_perror(clnt, "humbug");
		return (NULL);
	}
	return (&res);
}


nlm_res *
nlm_cancel_1(argp, clnt)
	struct nlm_cancargs *argp;
	CLIENT *clnt;
{
	static nlm_res res;

	bzero((char *) &res, sizeof(res));
	if (clnt_call(clnt, NLM_CANCEL, xdr_nlm_cancargs, argp, xdr_nlm_res, &res, TIMEOUT) != RPC_SUCCESS) {
		return (NULL);
	}
	return (&res);
}


nlm_res *
nlm_unlock_1(argp, clnt)
	struct nlm_unlockargs *argp;
	CLIENT *clnt;
{
	static nlm_res res;

	bzero((char *) &res, sizeof(res));
	if (clnt_call(clnt, NLM_UNLOCK, xdr_nlm_unlockargs, argp, xdr_nlm_res, &res, TIMEOUT) != RPC_SUCCESS) {
		return (NULL);
	}
	return (&res);
}


nlm_res *
nlm_granted_1(argp, clnt)
	struct nlm_testargs *argp;
	CLIENT *clnt;
{
	static nlm_res res;

	bzero((char *) &res, sizeof(res));
	if (clnt_call(clnt, NLM_GRANTED, xdr_nlm_testargs, argp, xdr_nlm_res, &res, TIMEOUT) != RPC_SUCCESS) {
		return (NULL);
	}
	return (&res);
}


void   *
nlm_test_msg_1(argp, clnt)
	struct nlm_testargs *argp;
	CLIENT *clnt;
{
	static char res;

	bzero((char *) &res, sizeof(res));
	if (clnt_call(clnt, NLM_TEST_MSG, xdr_nlm_testargs, argp, xdr_void, &res, TIMEOUT) != RPC_SUCCESS) {
		return (NULL);
	}
	return ((void *) &res);
}


void   *
nlm_lock_msg_1(argp, clnt)
	struct nlm_lockargs *argp;
	CLIENT *clnt;
{
	static char res;

	bzero((char *) &res, sizeof(res));
	if (clnt_call(clnt, NLM_LOCK_MSG, xdr_nlm_lockargs, argp, xdr_void, NULL, TIMEOUT) != RPC_SUCCESS) {
		clnt_perror(clnt, "nlm_lock_msg_1");
		return (NULL);
	}
	return ((void *) &res);
}


void   *
nlm_cancel_msg_1(argp, clnt)
	struct nlm_cancargs *argp;
	CLIENT *clnt;
{
	static char res;

	bzero((char *) &res, sizeof(res));
	if (clnt_call(clnt, NLM_CANCEL_MSG, xdr_nlm_cancargs, argp, xdr_void, &res, TIMEOUT) != RPC_SUCCESS) {
		return (NULL);
	}
	return ((void *) &res);
}


void   *
nlm_unlock_msg_1(argp, clnt)
	struct nlm_unlockargs *argp;
	CLIENT *clnt;
{
	static char res;

	bzero((char *) &res, sizeof(res));
	if (clnt_call(clnt, NLM_UNLOCK_MSG, xdr_nlm_unlockargs, argp, xdr_void, &res, TIMEOUT) != RPC_SUCCESS) {
		return (NULL);
	}
	return ((void *) &res);
}


void   *
nlm_granted_msg_1(argp, clnt)
	struct nlm_testargs *argp;
	CLIENT *clnt;
{
	static char res;

	bzero((char *) &res, sizeof(res));
	if (clnt_call(clnt, NLM_GRANTED_MSG, xdr_nlm_testargs, argp, xdr_void, &res, TIMEOUT) != RPC_SUCCESS) {
		return (NULL);
	}
	return ((void *) &res);
}


void   *
nlm_test_res_1(argp, clnt)
	nlm_testres *argp;
	CLIENT *clnt;
{
	static char res;

	bzero((char *) &res, sizeof(res));
	if (clnt_call(clnt, NLM_TEST_RES, xdr_nlm_testres, argp, xdr_void, &res, TIMEOUT) != RPC_SUCCESS) {
		return (NULL);
	}
	return ((void *) &res);
}


void   *
nlm_lock_res_1(argp, clnt)
	nlm_res *argp;
	CLIENT *clnt;
{
	static char res;

	bzero((char *) &res, sizeof(res));
	if (clnt_call(clnt, NLM_LOCK_RES, xdr_nlm_res, argp, xdr_void, &res, TIMEOUT) != RPC_SUCCESS) {
		return (NULL);
	}
	return ((void *) &res);
}


void   *
nlm_cancel_res_1(argp, clnt)
	nlm_res *argp;
	CLIENT *clnt;
{
	static char res;

	bzero((char *) &res, sizeof(res));
	if (clnt_call(clnt, NLM_CANCEL_RES, xdr_nlm_res, argp, xdr_void, &res, TIMEOUT) != RPC_SUCCESS) {
		return (NULL);
	}
	return ((void *) &res);
}


void   *
nlm_unlock_res_1(argp, clnt)
	nlm_res *argp;
	CLIENT *clnt;
{
	static char res;

	bzero((char *) &res, sizeof(res));
	if (clnt_call(clnt, NLM_UNLOCK_RES, xdr_nlm_res, argp, xdr_void, &res, TIMEOUT) != RPC_SUCCESS) {
		return (NULL);
	}
	return ((void *) &res);
}


void   *
nlm_granted_res_1(argp, clnt)
	nlm_res *argp;
	CLIENT *clnt;
{
	static char res;

	bzero((char *) &res, sizeof(res));
	if (clnt_call(clnt, NLM_GRANTED_RES, xdr_nlm_res, argp, xdr_void, &res, TIMEOUT) != RPC_SUCCESS) {
		return (NULL);
	}
	return ((void *) &res);
}


nlm_shareres *
nlm_share_3(argp, clnt)
	nlm_shareargs *argp;
	CLIENT *clnt;
{
	static nlm_shareres res;

	bzero((char *) &res, sizeof(res));
	if (clnt_call(clnt, NLM_SHARE, xdr_nlm_shareargs, argp, xdr_nlm_shareres, &res, TIMEOUT) != RPC_SUCCESS) {
		return (NULL);
	}
	return (&res);
}


nlm_shareres *
nlm_unshare_3(argp, clnt)
	nlm_shareargs *argp;
	CLIENT *clnt;
{
	static nlm_shareres res;

	bzero((char *) &res, sizeof(res));
	if (clnt_call(clnt, NLM_UNSHARE, xdr_nlm_shareargs, argp, xdr_nlm_shareres, &res, TIMEOUT) != RPC_SUCCESS) {
		return (NULL);
	}
	return (&res);
}


nlm_res *
nlm_nm_lock_3(argp, clnt)
	nlm_lockargs *argp;
	CLIENT *clnt;
{
	static nlm_res res;

	bzero((char *) &res, sizeof(res));
	if (clnt_call(clnt, NLM_NM_LOCK, xdr_nlm_lockargs, argp, xdr_nlm_res, &res, TIMEOUT) != RPC_SUCCESS) {
		return (NULL);
	}
	return (&res);
}


void   *
nlm_free_all_3(argp, clnt)
	nlm_notify *argp;
	CLIENT *clnt;
{
	static char res;

	bzero((char *) &res, sizeof(res));
	if (clnt_call(clnt, NLM_FREE_ALL, xdr_nlm_notify, argp, xdr_void, &res, TIMEOUT) != RPC_SUCCESS) {
		return (NULL);
	}
	return ((void *) &res);
}


int 
main(int argc, char **argv)
{
	CLIENT *cli;
	nlm_res res_block;
	nlm_res *out;
	nlm_lockargs arg;
	struct timeval tim;

	printf("Creating client for host %s\n", argv[1]);
	cli = clnt_create(argv[1], NLM_PROG, NLM_VERS, "udp");
	if (!cli) {
		printf("Failed to create client\n");
		exit(1);
	}
	clnt_control(cli, CLGET_TIMEOUT, &tim);
	printf("Default timeout was %d.%d\n", tim.tv_sec, tim.tv_usec);
	tim.tv_usec = -1;
	tim.tv_sec = -1;
	clnt_control(cli, CLSET_TIMEOUT, &tim);
	clnt_control(cli, CLGET_TIMEOUT, &tim);
	printf("timeout now %d.%d\n", tim.tv_sec, tim.tv_usec);


	arg.cookie.n_len = 4;
	arg.cookie.n_bytes = "hello";
	arg.block = 0;
	arg.exclusive = 0;
	arg.reclaim = 0;
	arg.state = 0x1234;
	arg.alock.caller_name = "localhost";
	arg.alock.fh.n_len = 32;
	arg.alock.fh.n_bytes = "\x04\x04\x02\x00\x01\x00\x00\x00\x0c\x00\x00\x00\xff\xff\xff\xd0\x16\x00\x00\x5b\x7c\xff\xff\xff\xec\x2f\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x19\x54\xef\xbf\xd7\x94";
	arg.alock.oh.n_len = 8;
	arg.alock.oh.n_bytes = "\x00\x00\x02\xff\xff\xff\xd3";
	arg.alock.svid = 0x5678;
	arg.alock.l_offset = 0;
	arg.alock.l_len = 100;

	res_block.stat.stat = nlm_granted;
	res_block.cookie.n_bytes = "hello";
	res_block.cookie.n_len = 5;

#if 0
	if (nlm_lock_res_1(&res_block, cli))
		printf("Success!\n");
	else
		printf("Fail\n");
#else
	if (out = nlm_lock_msg_1(&arg, cli)) {
		printf("Success!\n");
		printf("out->stat = %d", out->stat);
	} else {
		printf("Fail\n");
	}
#endif

	return 0;
}
@


1.1.1.1
log
@Import OpenBSD 3.3 source repository from CTM 3132 the first time
This opens an OpenBSD-mirabile (aka MirBSD) repository.

### MirBSD is:
# Copyright (c) 1982-2003 by Thorsten "mirabile" Glaser <x86@@ePost.de>
# Copyright © 1968-2003  The authors of And contributors to UNIX®, the
#       C Language, BSD/Berkeley Unix; 386BSD, NetBSD 1.1 and OpenBSD.
#
# Anyone who obtained a copy of this work is hereby permitted to freely use,
# distribute, modify, merge, sublicence, give away or sell it as long as the
# authors are given due credit and the following notice is retained:
#
# This work is provided "as is", with no explicit or implicit warranty what-
# soever. Use it only at your own risk. In no event may an author or contri-
# butor be held liable for any damage, directly or indirectly, that origina-
# ted through or is caused by creation or modification of this work.

MirBSD is my private tree. MirBSD does not differ very much from OpenBSD
and intentionally tracks OpenBSD. That's why it _is_ OpenBSD, just not the
official one. It's like with DarrenBSD.

At time of this writing, no advertising for MirBSD must be done,
because the advertising clause has not yet been sorted out.

http://templeofhate.com/tglaser/MirBSD/index.php
@
text
@@


1.1.1.2
log
@Bring the entire base system and ports tree in sync with OpenBSD
@
text
@d1 1
a1 1
/*	$OpenBSD: test.c,v 1.4 2003/07/06 21:26:14 deraadt Exp $	*/
d15 3
a17 1
nlm_test_1(struct nlm_testargs *argp, CLIENT *clnt)
d22 1
a22 2
	if (clnt_call(clnt, NLM_TEST, xdr_nlm_testargs, argp, xdr_nlm_testres,
	    &res, TIMEOUT) != RPC_SUCCESS) {
d30 3
a32 1
nlm_lock_1(struct nlm_lockargs *argp, CLIENT *clnt)
d38 1
a38 2
	if (st = clnt_call(clnt, NLM_LOCK, xdr_nlm_lockargs, argp, xdr_nlm_res,
	    &res, TIMEOUT) != RPC_SUCCESS) {
d48 3
a50 1
nlm_cancel_1(struct nlm_cancargs *argp, CLIENT *clnt)
d55 1
a55 2
	if (clnt_call(clnt, NLM_CANCEL, xdr_nlm_cancargs, argp, xdr_nlm_res,
	    &res, TIMEOUT) != RPC_SUCCESS) {
d63 3
a65 1
nlm_unlock_1(struct nlm_unlockargs *argp, CLIENT *clnt)
d70 1
a70 2
	if (clnt_call(clnt, NLM_UNLOCK, xdr_nlm_unlockargs, argp, xdr_nlm_res,
	    &res, TIMEOUT) != RPC_SUCCESS) {
d78 3
a80 1
nlm_granted_1(struct nlm_testargs *argp, CLIENT *clnt)
d85 1
a85 2
	if (clnt_call(clnt, NLM_GRANTED, xdr_nlm_testargs, argp, xdr_nlm_res,
	    &res, TIMEOUT) != RPC_SUCCESS) {
d93 3
a95 1
nlm_test_msg_1(struct nlm_testargs *argp, CLIENT *clnt)
d100 1
a100 2
	if (clnt_call(clnt, NLM_TEST_MSG, xdr_nlm_testargs, argp, xdr_void,
	    &res, TIMEOUT) != RPC_SUCCESS) {
d108 3
a110 1
nlm_lock_msg_1(struct nlm_lockargs *argp, CLIENT *clnt)
d124 3
a126 1
nlm_cancel_msg_1(struct nlm_cancargs *argp, CLIENT *clnt)
d131 1
a131 2
	if (clnt_call(clnt, NLM_CANCEL_MSG, xdr_nlm_cancargs, argp, xdr_void,
	    &res, TIMEOUT) != RPC_SUCCESS) {
d139 3
a141 1
nlm_unlock_msg_1(struct nlm_unlockargs *argp, CLIENT *clnt)
d146 1
a146 2
	if (clnt_call(clnt, NLM_UNLOCK_MSG, xdr_nlm_unlockargs, argp, xdr_void,
	    &res, TIMEOUT) != RPC_SUCCESS) {
d154 3
a156 1
nlm_granted_msg_1(struct nlm_testargs *argp, CLIENT *clnt)
d161 1
a161 2
	if (clnt_call(clnt, NLM_GRANTED_MSG, xdr_nlm_testargs, argp, xdr_void,
	    &res, TIMEOUT) != RPC_SUCCESS) {
d169 3
a171 1
nlm_test_res_1(nlm_testres *argp, CLIENT *clnt)
d176 1
a176 2
	if (clnt_call(clnt, NLM_TEST_RES, xdr_nlm_testres, argp, xdr_void,
	    &res, TIMEOUT) != RPC_SUCCESS) {
d184 3
a186 1
nlm_lock_res_1(nlm_res *argp, CLIENT *clnt)
d191 1
a191 2
	if (clnt_call(clnt, NLM_LOCK_RES, xdr_nlm_res, argp, xdr_void,
	    &res, TIMEOUT) != RPC_SUCCESS) {
d199 3
a201 1
nlm_cancel_res_1(nlm_res *argp, CLIENT *clnt)
d206 1
a206 2
	if (clnt_call(clnt, NLM_CANCEL_RES, xdr_nlm_res, argp, xdr_void,
	    &res, TIMEOUT) != RPC_SUCCESS) {
d214 3
a216 1
nlm_unlock_res_1(nlm_res *argp, CLIENT *clnt)
d221 1
a221 2
	if (clnt_call(clnt, NLM_UNLOCK_RES, xdr_nlm_res, argp, xdr_void,
	    &res, TIMEOUT) != RPC_SUCCESS) {
d229 3
a231 1
nlm_granted_res_1(nlm_res *argp, CLIENT *clnt)
d236 1
a236 2
	if (clnt_call(clnt, NLM_GRANTED_RES, xdr_nlm_res, argp, xdr_void,
	    &res, TIMEOUT) != RPC_SUCCESS) {
d244 3
a246 1
nlm_share_3(nlm_shareargs *argp, CLIENT *clnt)
d251 1
a251 2
	if (clnt_call(clnt, NLM_SHARE, xdr_nlm_shareargs, argp, xdr_nlm_shareres,
	    &res, TIMEOUT) != RPC_SUCCESS) {
d259 3
a261 1
nlm_unshare_3(nlm_shareargs *argp, CLIENT *clnt)
d266 1
a266 2
	if (clnt_call(clnt, NLM_UNSHARE, xdr_nlm_shareargs, argp, xdr_nlm_shareres,
	    &res, TIMEOUT) != RPC_SUCCESS) {
d274 3
a276 1
nlm_nm_lock_3(nlm_lockargs *argp, CLIENT *clnt)
d281 1
a281 2
	if (clnt_call(clnt, NLM_NM_LOCK, xdr_nlm_lockargs, argp, xdr_nlm_res,
	    &res, TIMEOUT) != RPC_SUCCESS) {
d289 3
a291 1
nlm_free_all_3(nlm_notify *argp, CLIENT *clnt)
d296 1
a296 2
	if (clnt_call(clnt, NLM_FREE_ALL, xdr_nlm_notify, argp, xdr_void,
	    &res, TIMEOUT) != RPC_SUCCESS) {
@

