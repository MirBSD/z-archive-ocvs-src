head	1.1;
branch	1.1.1;
access;
symbols
	tg-mergetmp-mirosx-1:1.1.1.4
	tg-mergefixes-1-branch:1.1.1.4.0.8
	tg-mergefixes-1-base:1.1.1.4
	MIROS_X:1.1.1.4.0.6
	MIROS_X_BASE:1.1.1.4
	tg-mergetmp-3:1.1.1.4
	MIRBSD_XP_MIRPPC:1.1.1.4.0.4
	MIRBSD_XP_SPARC_BASE:1.1.1.4
	MIRBSD_XP_SPARC:1.1.1.4.0.2
	cvs-200405160640:1.1.1.4
	cvs-200401271800:1.1.1.3
	cvs-200401261630:1.1.1.3
	cvs-200401021645:1.1.1.2
	cvs-200312222040:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.1
date	2003.12.22.21.20.11;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.12.22.21.20.11;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2004.01.02.18.12.24;	author tg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2004.01.26.19.05.49;	author tg;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2004.05.16.07.19.21;	author tg;	state Stab;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@/*	$OpenBSD: imsg.c,v 1.8 2003/12/21 23:28:39 henning Exp $ */

/*
 * Copyright (c) 2003 Henning Brauer <henning@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/types.h>

#include <errno.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>

#include "bgpd.h"

void	imsg_init_readbuf(struct imsgbuf *);

void
imsg_init_readbuf(struct imsgbuf *ibuf)
{
	bzero(&ibuf->r, sizeof(ibuf->r));
	ibuf->r.wptr = ibuf->r.buf;
	ibuf->r.pkt_len = IMSG_HEADER_SIZE;
}

void
imsg_init(struct imsgbuf *ibuf, int sock)
{
	imsg_init_readbuf(ibuf);
	msgbuf_init(&ibuf->w);
	ibuf->sock = sock;
	ibuf->w.sock = sock;
}

int
imsg_get(struct imsgbuf *ibuf, struct imsg *imsg)
{
	struct imsg_hdr		*hdr;
	ssize_t			 n, read_total = 0, datalen = 0;
	u_char			*rptr;

	do {
		if ((n = read(ibuf->sock, ibuf->r.wptr,
		    ibuf->r.pkt_len - ibuf->r.read_len)) == -1) {
			if (errno != EAGAIN && errno != EINTR)
				fatal("pipe read error", errno);
			return (0);
		}
		read_total += n;
		ibuf->r.wptr += n;
		ibuf->r.read_len += n;
		if (ibuf->r.read_len == ibuf->r.pkt_len) {
			if (!ibuf->r.seen_hdr) {	/* got header */
				hdr = (struct imsg_hdr *)&ibuf->r.buf;
				ibuf->r.type = hdr->type;
				ibuf->r.pkt_len = hdr->len;
				ibuf->r.peerid = hdr->peerid;
				if (hdr->len < IMSG_HEADER_SIZE ||
				    hdr->len > MAX_IMSGSIZE)
					fatal("wrong imsg header len", 0);
				ibuf->r.seen_hdr = 1;
			} else {		/* we got the full packet */
				imsg->hdr.type = ibuf->r.type;
				imsg->hdr.len = ibuf->r.pkt_len;
				imsg->hdr.peerid = ibuf->r.peerid;
				datalen = ibuf->r.pkt_len - IMSG_HEADER_SIZE;
				rptr = ibuf->r.buf + IMSG_HEADER_SIZE;
				if ((imsg->data = malloc(datalen)) == NULL)
					fatal("get_imsg malloc", errno);
				memcpy(imsg->data, rptr, datalen);
				n = 0;	/* give others a chance */
				imsg_init_readbuf(ibuf);
			}
		}
	} while (n > 0);

	if (read_total == 0)	/* connection closed */
		return (0);

	return (datalen + IMSG_HEADER_SIZE);
}

int
imsg_compose(struct imsgbuf *ibuf, int type, u_int32_t peerid, void *data,
    u_int16_t datalen)
{
	struct buf	*wbuf;
	struct imsg_hdr	 hdr;
	int		 n;

	hdr.len = datalen + IMSG_HEADER_SIZE;
	hdr.type = type;
	hdr.peerid = peerid;
	wbuf = buf_open(hdr.len);
	if (wbuf == NULL)
		fatal("imsg_compose: buf_open error", 0);
	if (buf_add(wbuf, &hdr, sizeof(hdr)) == -1)
		fatal("imsg_compose: buf_add error", 0);
	if (datalen)
		if (buf_add(wbuf, data, datalen) == -1)
			fatal("imsg_compose: buf_add error", 0);
	if ((n = buf_close(&ibuf->w, wbuf)) == -1)
		fatal("imsg_compose: buf_close error", 0);

	return (n);
}

void
imsg_free(struct imsg *imsg)
{
	free(imsg->data);
}
@


1.1.1.1
log
@Time to import OpenBSD once again. Expect breakage.
@
text
@@


1.1.1.2
log
@Import OpenBSD again, for various reasons.
@
text
@d1 1
a1 1
/*	$OpenBSD: imsg.c,v 1.17 2004/01/01 23:46:47 henning Exp $ */
d28 10
d41 1
a42 1
	bzero(&ibuf->r, sizeof(ibuf->r));
d48 1
a48 1
imsg_read(struct imsgbuf *ibuf)
d50 36
a85 7
	ssize_t			 n;

	if ((n = read(ibuf->sock, ibuf->r.buf + ibuf->r.wpos,
	    sizeof(ibuf->r.buf) - ibuf->r.wpos)) == -1) {
		if (errno != EINTR && errno != EAGAIN) {
			log_err("imsg_get: pipe read error");
			return (-1);
d87 1
a87 6
		return (0);
	}
	if (n == 0) {	/* connection closed */
		logit(LOG_CRIT, "imsg_get: pipe closed");
		return (-1);
	}
d89 1
a89 14
	ibuf->r.wpos += n;

	return (0);
}

int
imsg_get(struct imsgbuf *ibuf, struct imsg *imsg)
{
	ssize_t			 datalen = 0;
	size_t			 av, left;

	av = ibuf->r.wpos;

	if (IMSG_HEADER_SIZE > av)
a91 23
	memcpy(&imsg->hdr, ibuf->r.buf, sizeof(imsg->hdr));
	if (imsg->hdr.len < IMSG_HEADER_SIZE ||
	    imsg->hdr.len > MAX_IMSGSIZE) {
		logit(LOG_CRIT, "wrong imsg hdr len");
		return (-1);
	}
	if (imsg->hdr.len > av)
		return (0);
	datalen = imsg->hdr.len - IMSG_HEADER_SIZE;
	ibuf->r.rptr = ibuf->r.buf + IMSG_HEADER_SIZE;
	if ((imsg->data = malloc(datalen)) == NULL) {
		log_err("imsg_get");
		return (-1);
	}
	memcpy(imsg->data, ibuf->r.rptr, datalen);

	if (imsg->hdr.len < av) {
		left = av - imsg->hdr.len;
		memcpy(&ibuf->r.buf, ibuf->r.buf + imsg->hdr.len, left);
		ibuf->r.wpos = left;
	} else
		ibuf->r.wpos = 0;

d107 4
a110 9
	if (wbuf == NULL) {
		logit(LOG_CRIT, "imsg_compose: buf_open error");
		return (-1);
	}
	if (buf_add(wbuf, &hdr, sizeof(hdr)) == -1) {
		logit(LOG_CRIT, "imsg_compose: buf_add error");
		buf_free(wbuf);
		return (-1);
	}
d112 4
a115 5
		if (buf_add(wbuf, data, datalen) == -1) {
			logit(LOG_CRIT, "imsg_compose: buf_add error");
			buf_free(wbuf);
			return (-1);
		}
a116 5
	if ((n = buf_close(&ibuf->w, wbuf)) < 0) {
			logit(LOG_CRIT, "imsg_compose: buf_add error");
			buf_free(wbuf);
			return (-1);
	}
@


1.1.1.3
log
@Import OpenBSD as of today again (seems pretty stable, I hope)

Prominent changes: more bgpd, tcpmd5; tcpdump/isakmpd fixes
@
text
@d1 1
a1 1
/*	$OpenBSD: imsg.c,v 1.22 2004/01/22 20:34:56 henning Exp $ */
d4 1
a4 1
 * Copyright (c) 2003, 2004 Henning Brauer <henning@@openbsd.org>
a27 3
int	imsg_compose_core(struct imsgbuf *, int, u_int32_t, void *, u_int16_t,
	    pid_t);

a34 1
	ibuf->pid = getpid();
d45 1
a45 1
			log_warn("imsg_read: pipe read error");
d50 4
d57 1
a57 1
	return (n);
d74 1
a74 1
		log_warnx("imsg_get: imsg hdr len out of bounds");
d82 1
a82 1
		log_warn("imsg_get");
a98 7
    u_int16_t dlen)
{
	return (imsg_compose_core(ibuf, type, peerid, data, dlen, ibuf->pid));
}

int
imsg_compose_pid(struct imsgbuf *ibuf, int type, pid_t pid, void *data,
a100 7
	return (imsg_compose_core(ibuf, type, 0, data, datalen, pid));
}

int
imsg_compose_core(struct imsgbuf *ibuf, int type, u_int32_t peerid, void *data,
    u_int16_t datalen, pid_t pid)
{
a107 1
	hdr.pid = pid;
d110 1
a110 1
		log_warnx("imsg_compose: buf_open error");
d114 1
a114 1
		log_warnx("imsg_compose: buf_add error");
d120 1
a120 1
			log_warnx("imsg_compose: buf_add error");
d126 1
a126 1
			log_warnx("imsg_compose: buf_add error");
@


1.1.1.4
log
@large-scale import of OpenBSD 3.5-current source base including many fixes
note: from now, we will not be binary compatible with OpenBSD apps any
longer (due to syscall numbering differences); both an OpenBSD compat and
a conversion tool for old MirOS #7 apps will be delivered later.

The src/ tree is locked from now.
@
text
@d1 1
a1 1
/*	$OpenBSD: imsg.c,v 1.25 2004/04/29 19:56:04 deraadt Exp $ */
d28 2
a29 4
int		 imsg_compose_core(struct imsgbuf *, int, u_int32_t, void *,
		     u_int16_t, pid_t);
struct buf	*imsg_create_core(struct imsgbuf *, int, u_int32_t, u_int16_t,
		     pid_t);
d32 1
a32 1
imsg_init(struct imsgbuf *ibuf, int fd)
d36 2
a37 2
	ibuf->fd = fd;
	ibuf->w.fd = fd;
d46 1
a46 1
	if ((n = read(ibuf->fd, ibuf->r.buf + ibuf->r.wpos,
d125 1
a125 1
		log_warn("imsg_compose: buf_open");
a142 61
			return (-1);
	}
	return (n);
}

struct buf *
imsg_create(struct imsgbuf *ibuf, int type, u_int32_t peerid, u_int16_t dlen)
{
	return (imsg_create_core(ibuf, type, peerid, dlen, ibuf->pid));
}

struct buf *
imsg_create_pid(struct imsgbuf *ibuf, int type, pid_t pid, u_int16_t datalen)
{
	return (imsg_create_core(ibuf, type, 0, datalen, pid));
}

struct buf *
imsg_create_core(struct imsgbuf *ibuf, int type, u_int32_t peerid,
    u_int16_t datalen, pid_t pid)
{
	struct buf	*wbuf;
	struct imsg_hdr	 hdr;

	hdr.len = datalen + IMSG_HEADER_SIZE;
	hdr.type = type;
	hdr.peerid = peerid;
	hdr.pid = pid;
	wbuf = buf_open(hdr.len);
	if (wbuf == NULL) {
		log_warn("imsg_create: buf_open");
		return (NULL);
	}
	if (buf_add(wbuf, &hdr, sizeof(hdr)) == -1) {
		log_warnx("imsg_create: buf_add error");
		buf_free(wbuf);
		return (NULL);
	}
	return (wbuf);
}

int
imsg_add(struct buf *msg, void *data, u_int16_t datalen)
{
	if (datalen)
		if (buf_add(msg, data, datalen) == -1) {
			log_warnx("imsg_add: buf_add error");
			buf_free(msg);
			return (-1);
		}
	return (datalen);
}

int
imsg_close(struct imsgbuf *ibuf, struct buf *msg)
{
	int	n;

	if ((n = buf_close(&ibuf->w, msg)) < 0) {
			log_warnx("imsg_close: buf_add error");
			buf_free(msg);
@


