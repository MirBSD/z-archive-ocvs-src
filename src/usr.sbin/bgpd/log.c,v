head	1.1;
branch	1.1.1;
access;
symbols
	tg-mergetmp-mirosx-1:1.1.1.5
	tg-mergefixes-1-branch:1.1.1.5.0.8
	tg-mergefixes-1-base:1.1.1.5
	MIROS_X:1.1.1.5.0.6
	MIROS_X_BASE:1.1.1.5
	tg-mergetmp-3:1.1.1.5
	MIRBSD_XP_MIRPPC:1.1.1.5.0.4
	MIRBSD_XP_SPARC_BASE:1.1.1.5
	MIRBSD_XP_SPARC:1.1.1.5.0.2
	cvs-200405160640:1.1.1.5
	cvs-200401271800:1.1.1.4
	cvs-200401261630:1.1.1.3
	cvs-200401021645:1.1.1.2
	cvs-200312222040:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.1
date	2003.12.22.21.20.12;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.12.22.21.20.12;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2004.01.02.18.12.25;	author tg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2004.01.26.19.05.50;	author tg;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2004.01.27.19.20.50;	author tg;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2004.05.16.07.19.22;	author tg;	state Stab;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@/*	$OpenBSD: log.c,v 1.4 2003/12/21 23:17:53 henning Exp $ */

/*
 * Copyright (c) 2003 Henning Brauer <henning@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>

#include <err.h>
#include <errno.h>
#include <stdarg.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>

#include "bgpd.h"
#include "session.h"

static const char *statenames[] = {
	"None",
	"Idle",
	"Connect",
	"Active",
	"OpenSent",
	"OpenConfirm",
	"Established"
};

static const char *eventnames[] = {
	"None",
	"Start",
	"Stop",
	"Connection opened",
	"Connection closed",
	"Connection open failed",
	"Fatal error",
	"ConnectRetryTimer expired",
	"HoldTimer expired",
	"KeepaliveTimer expired",
	"OPEN message received",
	"KEEPALIVE message received",
	"UPDATE message received",
	"NOTIFICATION received"
};

static const char *errnames[] = {
	"none",
	"Header error",
	"error in OPEN message",
	"error in UPDATE message",
	"HoldTimer expired",
	"Finite State Machine error",
	"Cease"
};

static const char *suberr_header_names[] = {
	"none",
	"synchronization error",
	"wrong length",
	"unknown message type"
};

static const char *suberr_open_names[] = {
	"none",
	"version mismatch",
	"AS unacceptable",
	"BGPID invalid",
	"optional parameter error",
	"Authentification error",
	"unacceptable holdtime"
};

static const char *suberr_update_names[] = {
	"none",
	"attribute list error",
	"unknown well-known attribute",
	"well-known attribute missing",
	"attribute flags error",
	"attribute length wrong",
	"origin unacceptable",
	"loop detected",
	"nexthop unacceptable",
	"optional attribute error",
	"network unacceptable",
	"AS-Path unacceptable"
};

static const char *procnames[] = {
	"parent",
	"SE",
	"RDE"
};

int	debug;

char	*log_fmt_peer(struct peer *);

char *
log_fmt_peer(struct peer *peer)
{
	char		*ip;
	char		*pfmt;

	ip = inet_ntoa(peer->conf.remote_addr.sin_addr);
	if (peer->conf.descr[0]) {
		if (asprintf(&pfmt, "neighbor %s (%s)", ip, peer->conf.descr) ==
		    -1)
			fatal(NULL, errno);
	} else {
		if (asprintf(&pfmt, "neighbor %s", ip) == -1)
			fatal(NULL, errno);
	}
	return (pfmt);
}

void
log_init(int n_debug)
{
	debug = n_debug;

	if (!debug)
		openlog("bgpd", LOG_PID | LOG_NDELAY, LOG_DAEMON);
}

void
logit(int pri, const char *fmt, ...)
{
	va_list	ap;

	va_start(ap, fmt);
	vlog(pri, fmt, ap);
	va_end(ap);
}

void
vlog(int pri, const char *fmt, va_list ap)
{
	if (debug) {
		vfprintf(stderr, fmt, ap);
		fprintf(stderr, "\n");
	} else
		vsyslog(pri, fmt, ap);
}


void
log_err(struct peer *peer, const char *emsg, ...)
{
	char	*p, *nfmt;
	va_list	 ap;

	p = log_fmt_peer(peer);
	if (emsg == NULL) {
		if (asprintf(&nfmt, "%s: %s", p, strerror(errno)) == -1)
			fatal(NULL, errno);
	} else {
		if (asprintf(&nfmt, "%s: %s: %s", p, emsg, strerror(errno)) ==
		    -1)
			fatal(NULL, errno);
	}
	va_start(ap, emsg);
	vlog(LOG_CRIT, nfmt, ap);
	va_end(ap);
	free(p);
}

void
log_errx(struct peer *peer, const char *emsg, ...)
{
	char	*p, *nfmt;
	va_list	 ap;

	p = log_fmt_peer(peer);
	if (asprintf(&nfmt, "%s: %s", p, emsg) == -1)
		fatal(NULL, errno);
	va_start(ap, emsg);
	vlog(LOG_CRIT, nfmt, ap);
	va_end(ap);
	free(p);
}

void
fatal(const char *emsg, int error)
{
	if (emsg == NULL)
		logit(LOG_CRIT, "fatal in %s: %s", procnames[bgpd_process],
		    strerror(error));
	else
		if (error)
			logit(LOG_CRIT, "fatal in %s: %s: %s",
			    procnames[bgpd_process], emsg, strerror(error));
		else
			logit(LOG_CRIT, "fatal in %s: %s",
			    procnames[bgpd_process], emsg);

	if (bgpd_process == PROC_MAIN)
		exit(1);
	else				/* parent copes via SIGCHLD */
		_exit(1);
}

void
fatal_ensure(const char *file, int line, const char *cond)
{
	logit(LOG_CRIT, "ENSURE (%s) failed in file %s on line %d",
	    cond, file, line);

	/* XXX check which process we are and notify others! */
	sleep(10);
	_exit(1);
}

void
log_statechange(struct peer *peer, enum session_state nstate,
    enum session_events event)
{
	char	*p;

	p = log_fmt_peer(peer);
	logit(LOG_INFO, "%s: state change %s -> %s, reason: %s",
	    p, statenames[peer->state], statenames[nstate], eventnames[event]);
	free(p);
}

void
log_notification(struct peer *peer, u_int8_t errcode, u_int8_t subcode,
    u_char *data, u_int16_t datalen)
{
	char		*p;
	const char	*suberrname = NULL;
	int		 uk = 0;

	p = log_fmt_peer(peer);
	switch (errcode) {
	case ERR_HEADER:
		if (subcode > sizeof(suberr_header_names)/sizeof(char *))
			uk = 1;
		else
			suberrname = suberr_header_names[subcode];
		break;
	case ERR_OPEN:
		if (subcode > sizeof(suberr_open_names)/sizeof(char *))
			uk = 1;
		else
			suberrname = suberr_open_names[subcode];
		break;
	case ERR_UPDATE:
		if (subcode > sizeof(suberr_update_names)/sizeof(char *))
			uk = 1;
		else
			suberrname = suberr_update_names[subcode];
		break;
	case ERR_HOLDTIMEREXPIRED:
	case ERR_FSM:
	case ERR_CEASE:
		uk = 1;
		break;
	default:
		logit(LOG_CRIT, "%s: received notification, unknown errcode "
		    "%u, subcode %u", p, errcode, subcode);
		free(p);
		return;
	}

	if (uk)
		logit(LOG_CRIT,
		    "%s: received notification: %s, unknown subcode %u",
		    p, errnames[errcode], subcode);
	else {
		if (suberrname == NULL)
			logit(LOG_CRIT, "%s: received notification: %s",
			    p, errnames[errcode]);
		else
			logit(LOG_CRIT, "%s: received notification: %s, %s",
			    p, errnames[errcode], suberrname);
	}
	free(p);
}

void
log_conn_attempt(struct peer *peer, struct in_addr remote)
{
	char *p;

	if (peer == NULL)	/* connection from non-peer, drop */
		logit(LOG_INFO, "connection from non-peer %s refused",
			    inet_ntoa(remote));
	else {
		p = log_fmt_peer(peer);
		logit(LOG_INFO, "Connection attempt from %s while session is "
		    "in state %s", p, statenames[peer->state]);
		free(p);
	}
}
@


1.1.1.1
log
@Time to import OpenBSD once again. Expect breakage.
@
text
@@


1.1.1.2
log
@Import OpenBSD again, for various reasons.
@
text
@d1 1
a1 1
/*	$OpenBSD: log.c,v 1.13 2003/12/30 18:47:00 henning Exp $ */
d85 1
a85 1
	"Authentication error",
d112 1
a112 1
char	*log_fmt_peer(const struct peer *);
d115 1
a115 1
log_fmt_peer(const struct peer *peer)
d124 1
a124 1
			fatal(NULL);
d127 1
a127 1
			fatal(NULL);
d163 1
a163 1
log_peer_err(const struct peer *peer, const char *emsg, ...)
d171 1
a171 1
			fatal(NULL);
d175 1
a175 1
			fatal(NULL);
a180 1
	free(nfmt);
d184 1
a184 1
log_peer_errx(const struct peer *peer, const char *emsg, ...)
d191 1
a191 1
		fatal(NULL);
a195 1
	free(nfmt);
d199 1
a199 25
log_err(const char *emsg, ...)
{
	char	*nfmt;
	va_list	 ap;

	/* best effort to even work in out of memory situations */
	if (emsg == NULL)
		logit(LOG_CRIT, "%s", strerror(errno));
	else {
		va_start(ap, emsg);

		if (asprintf(&nfmt, "%s: %s", emsg, strerror(errno)) == -1) {
			/* we tried it... */
			vlog(LOG_CRIT, emsg, ap);
			logit(LOG_CRIT, "%s", strerror(errno));
		} else {
			vlog(LOG_CRIT, nfmt, ap);
			free(nfmt);
		}
		va_end(ap);
	}
}

void
fatal(const char *emsg)
d203 1
a203 1
		    strerror(errno));
d205 1
a205 1
		if (errno)
d207 1
a207 1
			    procnames[bgpd_process], emsg, strerror(errno));
a218 7
fatalx(const char *emsg)
{
	errno = 0;
	fatal(emsg);
}

void
d230 1
a230 1
log_statechange(const struct peer *peer, enum session_state nstate,
d242 1
a242 1
log_notification(const struct peer *peer, u_int8_t errcode, u_int8_t subcode,
d297 1
a297 1
log_conn_attempt(const struct peer *peer, struct in_addr remote)
a309 9
}

char *
log_ntoa(in_addr_t ip)
{
	struct in_addr	ina;

	ina.s_addr = ip;
	return (inet_ntoa(ina));
@


1.1.1.3
log
@Import OpenBSD as of today again (seems pretty stable, I hope)

Prominent changes: more bgpd, tcpmd5; tcpdump/isakmpd fixes
@
text
@d1 1
a1 1
/*	$OpenBSD: log.c,v 1.22 2004/01/23 21:17:51 henning Exp $ */
d4 1
a4 1
 * Copyright (c) 2003, 2004 Henning Brauer <henning@@openbsd.org>
a29 1
#include <syslog.h>
a33 1
#include "log.h"
d35 9
a43 1
int	debug;
d110 3
a112 2
char	*log_fmt_peer(const struct peer_config *);
void	 logit(int, const char *, ...);
d115 1
a115 1
log_fmt_peer(const struct peer_config *peer)
d120 3
a122 3
	ip = inet_ntoa(peer->remote_addr.sin_addr);
	if (peer->descr[0]) {
		if (asprintf(&pfmt, "neighbor %s (%s)", ip, peer->descr) ==
a153 2
	char	*nfmt;

d155 2
a156 8
		/* best effort in out of mem situations */
		if (asprintf(&nfmt, "%s\n", fmt) == -1) {
			vfprintf(stderr, fmt, ap);
			fprintf(stderr, "\n");
		} else {
			vfprintf(stderr, nfmt, ap);
			free(nfmt);
		}
d163 1
a163 1
log_peer_warn(const struct peer_config *peer, const char *emsg, ...)
d185 1
a185 1
log_peer_warnx(const struct peer_config *peer, const char *emsg, ...)
d201 1
a201 1
log_warn(const char *emsg, ...)
a224 30
log_warnx(const char *emsg, ...)
{
	va_list	 ap;

	va_start(ap, emsg);
	vlog(LOG_CRIT, emsg, ap);
	va_end(ap);
}

void
log_info(const char *emsg, ...)
{
	va_list	 ap;

	va_start(ap, emsg);
	vlog(LOG_INFO, emsg, ap);
	va_end(ap);
}

void
log_debug(const char *emsg, ...)
{
	va_list	 ap;

	va_start(ap, emsg);
	vlog(LOG_DEBUG, emsg, ap);
	va_end(ap);
}

void
d268 1
a268 1
	p = log_fmt_peer(&peer->conf);
d282 1
a282 1
	p = log_fmt_peer(&peer->conf);
d338 1
a338 1
		p = log_fmt_peer(&peer->conf);
a351 10
}

char *
log_addr(struct bgpd_addr *addr) {
	switch (addr->af) {
	case AF_INET:
		return (inet_ntoa(addr->v4));
	default:
		return ("(unknown address family)");
	}
@


1.1.1.4
log
@using: ========= cvsim-base-obsd _MirBSD: cvsim-src-openbsd,v 1.3 2004/01/27 17:17:54 tg Exp $ =========

In contrast to what people might believe now,
I am not "specially" attracted by CVS Imports
(neither am I a version number hunter).
@
text
@d1 1
a1 1
/*	$OpenBSD: log.c,v 1.23 2004/01/27 16:49:53 henning Exp $ */
d113 1
a113 1
	ip = log_addr(&peer->remote_addr);
d386 1
a386 1
log_addr(const struct bgpd_addr *addr) {
@


1.1.1.5
log
@large-scale import of OpenBSD 3.5-current source base including many fixes
note: from now, we will not be binary compatible with OpenBSD apps any
longer (due to syscall numbering differences); both an OpenBSD compat and
a conversion tool for old MirOS #7 apps will be delivered later.

The src/ tree is locked from now.
@
text
@d1 1
a1 1
/*	$OpenBSD: log.c,v 1.36 2004/05/08 19:17:20 henning Exp $ */
a25 1
#include <netdb.h>
d80 1
a80 2
	"unacceptable holdtime",
	"unsupported capability"
d110 2
a111 2
	const char	*ip;
	char		*pfmt, *p;
a113 9
	if ((peer->remote_addr.af == AF_INET && peer->remote_masklen != 32) ||
	    (peer->remote_addr.af == AF_INET6 && peer->remote_masklen != 128)) {
		if (asprintf(&p, "%s/%u", ip, peer->remote_masklen) == -1)
			fatal(NULL);
	} else {
		if ((p = strdup(ip)) == NULL)
			fatal(NULL);
	}

d115 1
a115 1
		if (asprintf(&pfmt, "neighbor %s (%s)", p, peer->descr) ==
d119 1
a119 1
		if (asprintf(&pfmt, "neighbor %s", p) == -1)
a121 1
	free(p);
a127 2
	extern char	*__progname;

d131 1
a131 1
		openlog(__progname, LOG_PID | LOG_NDELAY, LOG_DAEMON);
a157 1
		fflush(stderr);
d361 1
a361 1
log_conn_attempt(const struct peer *peer, struct sockaddr *sa)
d363 1
a363 2
	char		*p;
	const char	*b;
d365 4
a368 4
	if (peer == NULL) {	/* connection from non-peer, drop */
		b = log_sockaddr(sa);
		logit(LOG_INFO, "connection from non-peer %s refused", b);
	} else {
d376 2
a377 2
const char *
log_addr(const struct bgpd_addr *addr)
d379 1
a379 1
	static char	buf[48];
d381 2
a382 4
	if (inet_ntop(addr->af, &addr->ba, buf, sizeof(buf)) == NULL)
		return ("?");
	else
		return (buf);
d385 8
a392 10
const char *
log_sockaddr(struct sockaddr *sa)
{
	static char	buf[NI_MAXHOST];

	if (getnameinfo(sa, sa->sa_len, buf, sizeof(buf), NULL, 0,
	    NI_NUMERICHOST))
		return ("(unknown)");
	else
		return (buf);
@


