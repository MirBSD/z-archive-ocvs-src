head	1.1;
branch	1.1.1;
access;
symbols
	tg-mergetmp-mirosx-1:1.1.1.4
	tg-mergefixes-1-branch:1.1.1.4.0.8
	tg-mergefixes-1-base:1.1.1.4
	MIROS_X:1.1.1.4.0.6
	MIROS_X_BASE:1.1.1.4
	tg-mergetmp-3:1.1.1.4
	MIRBSD_XP_MIRPPC:1.1.1.4.0.4
	MIRBSD_XP_SPARC_BASE:1.1.1.4
	MIRBSD_XP_SPARC:1.1.1.4.0.2
	cvs-200405160640:1.1.1.4
	cvs-200401271800:1.1.1.3
	cvs-200401261630:1.1.1.3
	cvs-200401021645:1.1.1.2
	cvs-200312222040:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.1
date	2003.12.22.21.20.11;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.12.22.21.20.11;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2004.01.02.18.12.24;	author tg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2004.01.26.19.05.44;	author tg;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2004.05.16.07.19.21;	author tg;	state Stab;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@/*	$OpenBSD: buffer.c,v 1.7 2003/12/21 23:48:46 henning Exp $ */

/*
 * Copyright (c) 2003 Henning Brauer <henning@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/types.h>

#include <stdio.h>
#include <stdlib.h>
#include <err.h>
#include <errno.h>
#include <string.h>
#include <unistd.h>

#include "bgpd.h"

int	buf_write(int, struct buf *);
void	buf_enqueue(struct msgbuf *, struct buf *);
void	buf_dequeue(struct msgbuf *, struct buf *);

struct buf *
buf_open(ssize_t len)
{
	struct buf	*buf;

	if ((buf = calloc(1, sizeof(struct buf))) == NULL)
		return (NULL);
	if ((buf->buf = malloc(len)) == NULL) {
		free(buf);
		return (NULL);
	}
	buf->size = len;

	return (buf);
}

int
buf_add(struct buf *buf, void *data, ssize_t len)
{
	if (buf->wpos + len > buf->size)
		return (-1);

	memcpy(buf->buf + buf->wpos, data, len);
	buf->wpos += len;
	return (0);
}

void *
buf_reserve(struct buf *buf, ssize_t len)
{
	void	*b;

	if (buf->wpos + len > buf->size)
		return (NULL);

	b = buf->buf + buf->wpos;
	buf->wpos += len;
	return (b);
}

int
buf_close(struct msgbuf *msgbuf, struct buf *buf)
{
	int	n;

	/*  first try to write out directly */
	if (msgbuf->queued == 0) {
		if ((n = buf_write(msgbuf->sock, buf)) == -1)
			return (-1);

		if (n == 1) {		/* all data written out */
			buf_free(buf);
			return (0);
		}
	}

	/* we have to queue */
	buf_enqueue(msgbuf, buf);
	return (1);
}

int
buf_write(int sock, struct buf *buf)
{
	ssize_t	n;

	if ((n = write(sock, buf->buf + buf->rpos,
	    buf->size-buf->rpos)) == -1) {
		if (errno == EAGAIN)	/* cannot write immediately */
			return (0);
		else {
			/* XXX better let caller log with info which sock etc */
			logit(LOG_CRIT, "buf_write: write error: %s",
			    strerror(errno));
			return (-1);
		}
	}

	if (n < buf->size - buf->rpos) {	/* not all data written yet */
		buf->rpos += n;
		return (0);
	} else
		return (1);
}

void
buf_free(struct buf *buf)
{
	free(buf->buf);
	free(buf);
}

void
msgbuf_init(struct msgbuf *msgbuf)
{
	msgbuf->queued = 0;
	msgbuf->sock = -1;
	TAILQ_INIT(&msgbuf->bufs);
}

void
msgbuf_clear(struct msgbuf *msgbuf)
{
	struct buf	*buf, *next;

	for (buf = TAILQ_FIRST(&msgbuf->bufs); buf != NULL; buf = next) {
		next = TAILQ_NEXT(buf, entries);
		buf_dequeue(msgbuf, buf);
	}
	msgbuf->queued = 0;
	msgbuf->sock = -1;
}

int
msgbuf_write(struct msgbuf *msgbuf)
{
	/*
	 * possible race here
	 * when we cannot write out data completely from a buffer,
	 * we MUST return and NOT try to write out stuff from later buffers -
	 * the socket might have become writeable again
	 */
	struct buf	*buf, *next;
	int		 n;

	for (buf = TAILQ_FIRST(&msgbuf->bufs); buf != NULL; buf = next) {
		next = TAILQ_NEXT(buf, entries);
		if ((n = buf_write(msgbuf->sock, buf)) == -1)
			return (-1);
		if (n == 1)	/* everything written out */
			buf_dequeue(msgbuf, buf);
		else
			return (0);
	}
	return (0);
}

void
buf_enqueue(struct msgbuf *msgbuf, struct buf *buf)
{
	TAILQ_INSERT_TAIL(&msgbuf->bufs, buf, entries);
	msgbuf->queued++;
}

void
buf_dequeue(struct msgbuf *msgbuf, struct buf *buf)
{
	TAILQ_REMOVE(&msgbuf->bufs, buf, entries);
	msgbuf->queued--;
	buf_free(buf);
}
@


1.1.1.1
log
@Time to import OpenBSD once again. Expect breakage.
@
text
@@


1.1.1.2
log
@Import OpenBSD again, for various reasons.
@
text
@d1 1
a1 1
/*	$OpenBSD: buffer.c,v 1.10 2003/12/26 17:13:52 henning Exp $ */
d79 1
a79 1
	/* first try to write out directly */
d81 2
a82 2
		if ((n = buf_write(msgbuf->sock, buf)) < 0)
			return (n);
d104 4
a107 1
		else
d109 1
a109 5
	}

	if (n == 0) {			/* connection closed */
		errno = 0;
		return (-2);
d161 2
a162 3
		if ((n = buf_write(msgbuf->sock, buf)) < 0)
			return (n);

@


1.1.1.3
log
@Import OpenBSD as of today again (seems pretty stable, I hope)

Prominent changes: more bgpd, tcpmd5; tcpdump/isakmpd fixes
@
text
@d1 1
a1 1
/*	$OpenBSD: buffer.c,v 1.14 2004/01/10 23:25:44 henning Exp $ */
d4 1
a4 1
 * Copyright (c) 2003, 2004 Henning Brauer <henning@@openbsd.org>
a19 1
#include <sys/uio.h>
d77 14
d101 1
a101 1
	    buf->size - buf->rpos)) == -1) {
a156 1
	struct iovec	 iov[IOV_MAX];
d158 1
a158 2
	int		 i = 0;
	ssize_t		 n;
d160 4
a163 7
	TAILQ_FOREACH(buf, &msgbuf->bufs, entries) {
		if (i >= IOV_MAX)
			break;
		iov[i].iov_base = buf->buf + buf->rpos;
		iov[i].iov_len = buf->size - buf->rpos;
		i++;
	}
d165 3
a167 2
	if ((n = writev(msgbuf->sock, iov, i)) == -1) {
		if (errno == EAGAIN)	/* cannot write immediately */
a168 2
		else
			return (-1);
a169 18

	if (n == 0) {			/* connection closed */
		errno = 0;
		return (-2);
	}

	for (buf = TAILQ_FIRST(&msgbuf->bufs); buf != NULL && n > 0;
	    buf = next) {
		next = TAILQ_NEXT(buf, entries);
		if (n >= buf->size - buf->rpos) {
			n -= buf->size - buf->rpos;
			buf_dequeue(msgbuf, buf);
		} else {
			buf->rpos += n;
			n = 0;
		}
	}

a170 39
}

int
msgbuf_writebound(struct msgbuf *msgbuf)
{
	/*
	 * possible race here
	 * when we cannot write out data completely from a buffer,
	 * we MUST return and NOT try to write out stuff from later buffers -
	 * the socket might have become writeable again
	 */
	struct buf	*buf;
	int		 n;

	if (!msgbuf_unbounded(msgbuf))
		return (1);

	buf = TAILQ_FIRST(&msgbuf->bufs);
	if ((n = buf_write(msgbuf->sock, buf)) < 0)
		return (n);

	if (n == 1) {	/* everything written out */
		buf_dequeue(msgbuf, buf);
		return (1);
	} else
		return (0);
}

int
msgbuf_unbounded(struct msgbuf *msgbuf)
{
	struct buf	*buf;

	/* return 1 if last buffer was not completely written. */
	buf = TAILQ_FIRST(&msgbuf->bufs);
	if (buf != NULL && buf->rpos != 0)
		return (1);
	else
		return (0);
@


1.1.1.4
log
@large-scale import of OpenBSD 3.5-current source base including many fixes
note: from now, we will not be binary compatible with OpenBSD apps any
longer (due to syscall numbering differences); both an OpenBSD compat and
a conversion tool for old MirOS #7 apps will be delivered later.

The src/ tree is locked from now.
@
text
@d1 1
a1 1
/*	$OpenBSD: buffer.c,v 1.18 2004/04/29 19:56:04 deraadt Exp $ */
a25 1
#include <limits.h>
d118 1
a118 1
	msgbuf->fd = -1;
d125 1
a125 1
	struct buf	*buf;
d127 2
a128 1
	while ((buf = TAILQ_FIRST(&msgbuf->bufs)) != NULL)
d130 3
a148 1
	bzero(&iov, sizeof(iov));
d157 1
a157 1
	if ((n = writev(msgbuf->fd, iov, i)) == -1) {
d200 1
a200 1
	if ((n = buf_write(msgbuf->fd, buf)) < 0)
@


