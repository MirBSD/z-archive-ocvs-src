head	1.1;
branch	1.1.1;
access;
symbols
	tg-mergetmp-mirosx-1:1.1.1.5
	tg-mergefixes-1-branch:1.1.1.5.0.8
	tg-mergefixes-1-base:1.1.1.5
	MIROS_X:1.1.1.5.0.6
	MIROS_X_BASE:1.1.1.5
	tg-mergetmp-3:1.1.1.5
	MIRBSD_XP_MIRPPC:1.1.1.5.0.4
	MIRBSD_XP_SPARC_BASE:1.1.1.5
	MIRBSD_XP_SPARC:1.1.1.5.0.2
	cvs-200405160640:1.1.1.5
	cvs-200401271800:1.1.1.4
	cvs-200401261630:1.1.1.3
	cvs-200401021645:1.1.1.2
	cvs-200312222040:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.1
date	2003.12.22.21.20.12;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.12.22.21.20.12;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2004.01.02.18.12.25;	author tg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2004.01.26.19.05.51;	author tg;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2004.01.27.19.20.51;	author tg;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2004.05.16.07.19.23;	author tg;	state Stab;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@/*	$OpenBSD: parse.y,v 1.8 2003/12/22 19:43:36 deraadt Exp $ */

/*
 * Copyright (c) 2002, 2003 Henning Brauer <henning@@openbsd.org>
 * Copyright (c) 2001 Markus Friedl.  All rights reserved.
 * Copyright (c) 2001 Daniel Hartmeier.  All rights reserved.
 * Copyright (c) 2001 Theo de Raadt.  All rights reserved.
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

%{
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>

#include <ctype.h>
#include <err.h>
#include <errno.h>
#include <stdarg.h>
#include <stdio.h>
#include <string.h>

#include "bgpd.h"

static struct bgpd_config	*conf;
static struct mrt_config	*mrtconf;
static struct peer		*curpeer;
static struct peer		*curgroup;
static FILE			*fin = NULL;
static int			 lineno = 1;
static int			 errors = 0;
static int			 pdebug = 1;
char				*infile;

int	 yyerror(const char *, ...);
int	 yyparse(void);
int	 kw_cmp(const void *, const void *);
int	 lookup(char *);
int	 lgetc(FILE *);
int	 lungetc(int);
int	 findeol(void);
int	 yylex(void);

struct peer	*new_peer(void);
struct peer	*new_group(void);
int		 add_mrtconfig(enum mrtdump_type, char *, time_t);

TAILQ_HEAD(symhead, sym)	 symhead = TAILQ_HEAD_INITIALIZER(symhead);
struct sym {
	TAILQ_ENTRY(sym)	 entries;
	int			 used;
	int			 persist;
	char			*nam;
	char			*val;
};

int	 symset(const char *, const char *, int);
char	*symget(const char *);
int	 atoul(char *, u_long *);

typedef struct {
	union {
		u_int32_t	 number;
		char		*string;
		struct in_addr	 addr;
	} v;
	int lineno;
} YYSTYPE;

%}

%token	SET AS BGPID HOLDTIME HOLDTIME_MIN
%token	GROUP NEIGHBOR
%token	REMOTEAS DESCR LOCALADDR MULTIHOP
%token	ERROR
%token	MRTDUMP
%token	<v.string>	STRING
%type	<v.number>	number
%type	<v.string>	string
%type	<v.addr>	address
%%

grammar		: /* empty */
		| grammar '\n'
		| grammar conf_main '\n'
		| grammar varset '\n'
		| grammar neighbor '\n'
		| grammar group '\n'
		| grammar error '\n'		{ errors++; }
		;

number		: STRING			{
			u_long	ulval;

			if (atoul($1, &ulval) == -1) {
				yyerror("%s is not a number", $1);
				YYERROR;
			} else
				$$ = ulval;
		}
		;

string		: string STRING				{
			if (asprintf(&$$, "%s %s", $1, $2) == -1)
				fatal("string: asprintf", errno);
			free($1);
			free($2);
		}
		| STRING
		;

varset		: STRING '=' string		{
			if (conf->opts & BGPD_OPT_VERBOSE)
				printf("%s = \"%s\"\n", $1, $3);
			if (symset($1, $3, 0) == -1)
				fatal("cannot store variable", errno);
		}
		;

conf_main	: AS number		{
			conf->as = $2;
		}
		| BGPID address		{
			conf->bgpid = $2.s_addr;
		}
		| HOLDTIME number	{
			if ($2 < MIN_HOLDTIME) {
				yyerror("holdtime must be at least %u",
				    MIN_HOLDTIME);
				YYERROR;
			}
			conf->holdtime = $2;
		}
		| HOLDTIME_MIN number	{
			if ($2 < MIN_HOLDTIME) {
				yyerror("holdtime_min must be at least %u",
				    MIN_HOLDTIME);
				YYERROR;
			}
			conf->min_holdtime = $2;
		}
		/*
		 *  XXX this is bad.
		 *  a) number should be optional
		 *  b) there are multiple dump types
		 */
		| MRTDUMP STRING STRING number	{
			if (strcmp($2, "table") == 0) {
				if (add_mrtconfig(MRT_TABLE_DUMP, $3, $4) == -1)
					YYERROR;
			} else {
				yyerror("unknown mrtdump type %s", $2);
				YYERROR;
			}
		}
		;

address		: STRING		{
			int	n;

			if ((n = inet_pton(AF_INET, $1, &$$)) == -1) {
				yyerror("inet_pton: %s", strerror(errno));
				YYERROR;
			}
			if (n == 0) {
				yyerror("could not parse address spec %s", $1);
				YYERROR;
			}
		}
		;

optnl		: '\n' optnl
		|
		;

neighbor	: NEIGHBOR address optnl '{' optnl {
			curpeer = new_peer();
			curpeer->conf.remote_addr.sin_len =
			    sizeof(curpeer->conf.remote_addr);
			curpeer->conf.remote_addr.sin_family = AF_INET;
			curpeer->conf.remote_addr.sin_port = htons(BGP_PORT);
			curpeer->conf.remote_addr.sin_addr.s_addr = $2.s_addr;
		}
		  peeropts_l optnl '}' {
			curpeer->next = conf->peers;
			conf->peers = curpeer;
			curpeer = NULL;
		}
		;

group		: GROUP string optnl '{' optnl {
			curgroup = curpeer = new_group();
			if (strlcpy(curgroup->conf.group, $2,
			    sizeof(curgroup->conf.group)) >
			    sizeof(curgroup->conf.group)) {
				yyerror("group name \"%s\" too long: max %u",
				    $2, sizeof(curgroup->conf.group) - 1);
				YYERROR;
			}
		}
		  groupopts_l optnl '}' {
			free(curgroup);
			curgroup = NULL;
		}
		;

groupopts_l	: groupopts_l groupoptsl
		| groupoptsl
		;

groupoptsl	: peeropts '\n'
		| neighbor '\n'
		| error '\n'
		;

peeropts_l	: peeropts_l peeroptsl
		| peeroptsl
		;

peeroptsl	: peeropts '\n'
		| error '\n'
		;

peeropts	: REMOTEAS number	{
			curpeer->conf.remote_as = $2;
		}
		| DESCR string		{
			if (strlcpy(curpeer->conf.descr, $2,
			    sizeof(curpeer->conf.descr)) >
			    sizeof(curpeer->conf.descr)) {
				yyerror("descr \"%s\" too long: max %u",
				    $2, sizeof(curpeer->conf.descr) - 1);
				YYERROR;
			}
			free($2);
		}
		| LOCALADDR address	{
			curpeer->conf.local_addr.sin_len =
			    sizeof(curpeer->conf.local_addr);
			curpeer->conf.local_addr.sin_family = AF_INET;
			curpeer->conf.local_addr.sin_addr.s_addr = $2.s_addr;
		}
		| MULTIHOP number	{
			if ($2 < 2 || $2 > 255) {
				yyerror("invalid multihop distance %d", $2);
				YYERROR;
			}
			curpeer->conf.distance = $2;
		}
		;

%%

struct keywords {
	const char	*k_name;
	int		 k_val;
};

int
yyerror(const char *fmt, ...)
{
	va_list		 ap;
	char		*nfmt;

	errors = 1;
	va_start(ap, fmt);
	if (asprintf(&nfmt, "%s:%d: %s", infile, yylval.lineno, fmt) == -1)
		fatal("yyerror asprintf", 0);
	vlog(LOG_CRIT, nfmt, ap);
	va_end(ap);
	return (0);
}

int
kw_cmp(const void *k, const void *e)
{
	return (strcmp(k, ((const struct keywords *)e)->k_name));
}

int
lookup(char *s)
{
	/* this has to be sorted always */
	static const struct keywords keywords[] = {
		{ "AS",			AS},
		{ "bgpid",		BGPID},
		{ "descr",		DESCR},
		{ "group",		GROUP},
		{ "holdtime",		HOLDTIME},
		{ "holdtime_min",	HOLDTIME_MIN},
		{ "local-address",	LOCALADDR},
		{ "mrtdump",		MRTDUMP},
		{ "multihop",		MULTIHOP},
		{ "neighbor",		NEIGHBOR},
		{ "remote-as",		REMOTEAS},
		{ "set",		SET},
	};
	const struct keywords	*p;

	p = bsearch(s, keywords, sizeof(keywords)/sizeof(keywords[0]),
	    sizeof(keywords[0]), kw_cmp);

	if (p) {
		if (pdebug > 1)
			fprintf(stderr, "%s: %d\n", s, p->k_val);
		return (p->k_val);
	} else {
		if (pdebug > 1)
			fprintf(stderr, "string: %s\n", s);
		return (STRING);
	}
}

#define MAXPUSHBACK	128

char	*parsebuf;
int	 parseindex;
char	 pushback_buffer[MAXPUSHBACK];
int	 pushback_index = 0;

int
lgetc(FILE *f)
{
	int	c, next;

	if (parsebuf) {
		/* Read character from the parsebuffer instead of input. */
		if (parseindex >= 0) {
			c = parsebuf[parseindex++];
			if (c != '\0')
				return (c);
			parsebuf = NULL;
		} else
			parseindex++;
	}

	if (pushback_index)
		return (pushback_buffer[--pushback_index]);

	while ((c = getc(f)) == '\\') {
		next = getc(f);
		if (next != '\n') {
			if (isspace(next))
				yyerror("whitespace after \\");
			ungetc(next, f);
			break;
		}
		yylval.lineno = lineno;
		lineno++;
	}
	if (c == '\t' || c == ' ') {
		/* Compress blanks to a single space. */
		do {
			c = getc(f);
		} while (c == '\t' || c == ' ');
		ungetc(c, f);
		c = ' ';
	}

	return (c);
}

int
lungetc(int c)
{
	if (c == EOF)
		return (EOF);
	if (parsebuf) {
		parseindex--;
		if (parseindex >= 0)
			return (c);
	}
	if (pushback_index < MAXPUSHBACK-1)
		return (pushback_buffer[pushback_index++] = c);
	else
		return (EOF);
}

int
findeol(void)
{
	int	c;

	parsebuf = NULL;
	pushback_index = 0;

	/* skip to either EOF or the first real EOL */
	while (1) {
		c = lgetc(fin);
		if (c == '\n') {
			lineno++;
			break;
		}
		if (c == EOF)
			break;
	}
	return (ERROR);
}

int
yylex(void)
{
	char	 buf[8096];
	char	*p, *val;
	int	 endc, c;
	int	 token;

top:
	p = buf;
	while ((c = lgetc(fin)) == ' ')
		; /* nothing */

	yylval.lineno = lineno;
	if (c == '#')
		while ((c = lgetc(fin)) != '\n' && c != EOF)
			; /* nothing */
	if (c == '$' && parsebuf == NULL) {
		while (1) {
			if ((c = lgetc(fin)) == EOF)
				return (0);

			if (p + 1 >= buf + sizeof(buf) - 1) {
				yyerror("string too long");
				return (findeol());
			}
			if (isalnum(c) || c == '_') {
				*p++ = (char)c;
				continue;
			}
			*p = '\0';
			lungetc(c);
			break;
		}
		val = symget(buf);
		if (val == NULL) {
			yyerror("macro '%s' not defined", buf);
			return (findeol());
		}
		parsebuf = val;
		parseindex = 0;
		goto top;
	}

	switch (c) {
	case '\'':
	case '"':
		endc = c;
		while (1) {
			if ((c = lgetc(fin)) == EOF)
				return (0);
			if (c == endc) {
				*p = '\0';
				break;
			}
			if (c == '\n') {
				lineno++;
				continue;
			}
			if (p + 1 >= buf + sizeof(buf) - 1) {
				yyerror("string too long");
				return (findeol());
			}
			*p++ = (char)c;
		}
		yylval.v.string = strdup(buf);
		if (yylval.v.string == NULL)
			fatal("yylex: strdup", errno);
		return (STRING);
	}

#define allowed_in_string(x) \
	(isalnum(x) || (ispunct(x) && x != '(' && x != ')' && \
	x != '{' && x != '}' && x != '<' && x != '>' && \
	x != '!' && x != '=' && x != '/' && x != '#' && \
	x != ','))

	if (isalnum(c) || c == ':' || c == '_') {
		do {
			*p++ = c;
			if ((unsigned)(p-buf) >= sizeof(buf)) {
				yyerror("string too long");
				return (findeol());
			}
		} while ((c = lgetc(fin)) != EOF && (allowed_in_string(c)));
		lungetc(c);
		*p = '\0';
		token = lookup(buf);
		yylval.v.string = strdup(buf);
		if (yylval.v.string == NULL)
			fatal("yylex: strdup", errno);
		return (token);
	}
	if (c == '\n') {
		yylval.lineno = lineno;
		lineno++;
	}
	if (c == EOF)
		return (0);
	return (c);
}

int
parse_config(char *filename, struct bgpd_config *xconf,
    struct mrt_config *xmconf)
{
	struct sym	*sym;

	if ((conf = calloc(1, sizeof(struct bgpd_config))) == NULL)
		fatal(NULL, errno);
	if ((mrtconf = calloc(1, sizeof(struct mrt_config))) == NULL)
		fatal(NULL, errno);
	LIST_INIT(mrtconf);

	curpeer = NULL;
	curgroup = NULL;
	lineno = 1;
	errors = 0;

	if (strcmp(filename, "-") == 0) {
		fin = stdin;
		infile = "stdin";
	} else {
		if ((fin = fopen(filename, "r")) == NULL) {
			warn("%s", filename);
			return (1);
		}
		infile = filename;
	}

	yyparse();

	/* Free macros and check which have not been used. */
	TAILQ_FOREACH(sym, &symhead, entries) {
		if ((conf->opts & BGPD_OPT_VERBOSE2) && !sym->used)
			fprintf(stderr, "warning: macro '%s' not "
			    "used\n", sym->nam);
		free(sym->nam);
		free(sym->val);
		TAILQ_REMOVE(&symhead, sym, entries);
	}

	errors += merge_config(xconf, conf);
	errors += mrt_mergeconfig(xmconf, mrtconf);

	return (errors ? -1 : 0);
}

int
symset(const char *nam, const char *val, int persist)
{
	struct sym	*sym;

	for (sym = TAILQ_FIRST(&symhead); sym && strcmp(nam, sym->nam);
	    sym = TAILQ_NEXT(sym, entries))
		;	/* nothing */

	if (sym != NULL) {
		if (sym->persist == 1)
			return (0);
		else {
			free(sym->nam);
			free(sym->val);
			TAILQ_REMOVE(&symhead, sym, entries);
			free(sym);
		}
	}
	if ((sym = calloc(1, sizeof(*sym))) == NULL)
		return (-1);

	sym->nam = strdup(nam);
	if (sym->nam == NULL) {
		free(sym);
		return (-1);
	}
	sym->val = strdup(val);
	if (sym->val == NULL) {
		free(sym->nam);
		free(sym);
		return (-1);
	}
	sym->used = 0;
	sym->persist = persist;
	TAILQ_INSERT_TAIL(&symhead, sym, entries);
	return (0);
}

int
cmdline_symset(char *s)
{
	char	*sym, *val;
	int	 ret;

	if ((val = strrchr(s, '=')) == NULL)
		return (-1);

	if ((sym = malloc(strlen(s) - strlen(val) + 1)) == NULL)
		fatal("cmdline_symset: malloc", errno);

	strlcpy(sym, s, strlen(s) - strlen(val) + 1);

	ret = symset(sym, val + 1, 1);
	free(sym);

	return (ret);
}

char *
symget(const char *nam)
{
	struct sym	*sym;

	TAILQ_FOREACH(sym, &symhead, entries)
		if (strcmp(nam, sym->nam) == 0) {
			sym->used = 1;
			return (sym->val);
		}
	return (NULL);
}

int
atoul(char *s, u_long *ulvalp)
{
	u_long	 ulval;
	char	*ep;

	errno = 0;
	ulval = strtoul(s, &ep, 0);
	if (s[0] == '\0' || *ep != '\0')
		return (-1);
	if (errno == ERANGE && ulval == ULONG_MAX)
		return (-1);
	*ulvalp = ulval;
	return (0);
}

struct peer *
new_peer(void)
{
	struct peer	*p;

	if ((p = calloc(1, sizeof(struct peer))) == NULL)
		fatal("new_peer", errno);

	if (curgroup != NULL) {
		memcpy(p, curgroup, sizeof(struct peer));
		if (strlcpy(p->conf.group, curgroup->conf.group,
		    sizeof(p->conf.group)) > sizeof(p->conf.group))
			fatal("new_peer strlcpy", 0);
		if (strlcpy(p->conf.descr, curgroup->conf.descr,
		    sizeof(p->conf.descr)) > sizeof(p->conf.descr))
			fatal("new_peer strlcpy", 0);
	}
	p->state = STATE_NONE;
	p->next = NULL;
	p->conf.distance = 1;
	p->conf.local_addr.sin_len = sizeof(p->conf.local_addr);
	p->conf.local_addr.sin_family = AF_INET;

	return (p);
}

struct peer *
new_group(void)
{
	struct peer	*p;

	if ((p = calloc(1, sizeof(struct peer))) == NULL)
		fatal("new_group", errno);

	return (p);
}

int
add_mrtconfig(enum mrtdump_type type, char *name, time_t timeout)
{
	struct mrtdump_config	*m, *n;

	LIST_FOREACH(m, mrtconf, list) {
		if (m->type == type) {
			yyerror("only one mrtdump per type allowed.");
			return (-1);
		}
	}

	if ((n = calloc(1, sizeof(struct mrtdump_config))) == NULL)
		fatal("add_mrtconfig", errno);

	n->type = MRT_TABLE_DUMP;
	n->msgbuf.sock = -1;
	if (strlcpy(n->name, name, sizeof(n->name)) > sizeof(n->name)) {
		yyerror("filename \"%s\" too long: max %u",
		    name, sizeof(n->name) - 1);
		return (-1);
	}
	n->ReopenTimerInterval = timeout;

	LIST_INSERT_HEAD(mrtconf, n, list);

	return (0);
}
@


1.1.1.1
log
@Time to import OpenBSD once again. Expect breakage.
@
text
@@


1.1.1.2
log
@Import OpenBSD again, for various reasons.
@
text
@d1 1
a1 1
/*	$OpenBSD: parse.y,v 1.24 2003/12/27 21:40:43 henning Exp $ */
d84 1
a84 2
%token	SET
%token	AS ROUTERID HOLDTIME YMIN LISTEN ON NO FIBUPDATE
d86 1
a86 1
%token	REMOTEAS DESCR LOCALADDR MULTIHOP PASSIVE
a88 1
%token	LOG UPDATES
d90 1
a90 1
%type	<v.number>	number yesno
d117 1
a117 1
				fatal("string: asprintf");
a123 10
yesno		:  STRING		{
			if (!strcmp($1, "yes"))
				$$ = 1;
			else if (!strcmp($1, "no"))
				$$ = 0;
			else
				YYERROR;
		}
		;

d128 1
a128 1
				fatal("cannot store variable");
d135 1
a135 1
		| ROUTERID address		{
d146 3
a148 3
		| HOLDTIME YMIN number	{
			if ($3 < MIN_HOLDTIME) {
				yyerror("holdtime min must be at least %u",
d152 1
a152 13
			conf->min_holdtime = $3;
		}
		| LISTEN ON address	{
			conf->listen_addr.sin_addr.s_addr = $3.s_addr;
		}
		| FIBUPDATE yesno		{
			if ($2 == 0)
				conf->flags |= BGPD_FLAG_NO_FIB_UPDATE;
			else
				conf->flags &= ~BGPD_FLAG_NO_FIB_UPDATE;
		}
		| LOG UPDATES		{
			conf->log |= BGPD_LOG_UPDATES;
a261 3
		| PASSIVE		{
			curpeer->conf.passive = 1;
		}
d280 1
a280 1
		fatalx("yyerror asprintf");
a282 1
	free(nfmt);
d298 1
a299 1
		{ "fib-update",		FIBUPDATE},
d302 1
a302 1
		{ "listen",		LISTEN},
a303 2
		{ "log",		LOG},
		{ "min",		YMIN},
a306 2
		{ "on",			ON},
		{ "passive",		PASSIVE},
a307 1
		{ "router-id",		ROUTERID},
a308 1
		{ "updates",		UPDATES},
d479 1
a479 1
			fatal("yylex: strdup");
d502 1
a502 1
			fatal("yylex: strdup");
d518 1
a518 1
	struct sym	*sym, *next;
d521 1
a521 1
		fatal(NULL);
d523 1
a523 1
		fatal(NULL);
a530 5
	conf->listen_addr.sin_len = sizeof(conf->listen_addr);
	conf->listen_addr.sin_family = AF_INET;
	conf->listen_addr.sin_addr.s_addr = INADDR_ANY;
	conf->listen_addr.sin_port = htons(BGP_PORT);

d545 1
a545 2
	for (sym = TAILQ_FIRST(&symhead); sym != NULL; sym = next) {
		next = TAILQ_NEXT(sym, entries);
d549 3
a551 6
		if (!sym->persist) {
			free(sym->nam);
			free(sym->val);
			TAILQ_REMOVE(&symhead, sym, entries);
			free(sym);
		}
a556 3
	free(conf);
	free(mrtconf);

d609 1
a609 1
		fatal("cmdline_symset: malloc");
d654 1
a654 1
		fatal("new_peer");
d660 1
a660 1
			fatalx("new_peer strlcpy");
d663 1
a663 1
			fatalx("new_peer strlcpy");
d680 1
a680 1
		fatal("new_group");
d698 1
a698 1
		fatal("add_mrtconfig");
@


1.1.1.3
log
@Import OpenBSD as of today again (seems pretty stable, I hope)

Prominent changes: more bgpd, tcpmd5; tcpdump/isakmpd fixes
@
text
@d1 1
a1 1
/*	$OpenBSD: parse.y,v 1.40 2004/01/26 14:42:47 henning Exp $ */
d4 1
a4 1
 * Copyright (c) 2002, 2003, 2004 Henning Brauer <henning@@openbsd.org>
a33 1
#include <syslog.h>
a35 2
#include "mrt.h"
#include "session.h"
d38 1
a38 3
static struct mrt_head		*mrtconf;
static struct network_head	*netconf;
static struct peer		*peer_l;
a55 1
struct peer	*alloc_peer(void);
d58 1
a58 1
int		 add_mrtconfig(enum mrt_type, char *, time_t);
d84 6
a89 4
%token	AS ROUTERID HOLDTIME YMIN LISTEN ON FIBUPDATE
%token	GROUP NEIGHBOR NETWORK
%token	REMOTEAS DESCR LOCALADDR MULTIHOP PASSIVE MAXPREFIX ANNOUNCE
%token	DUMP MSG IN TABLE
a90 2
%token	TCP SIGNATURE KEY
%token	ERROR
d92 1
a92 1
%type	<v.number>	number optnumber yesno
d178 11
a188 27
		| DUMP MSG STRING IN STRING optnumber	{
			int action;

			if (!strcmp($3, "all"))
				action = MRT_ALL_IN;
			else if (!strcmp($3, "filtered"))
				action = MRT_FILTERED_IN;
			else {
				yyerror("unknown mrt msg dump type");
				YYERROR;
			}
			if (add_mrtconfig(action, $5, $6) == -1)
				YYERROR;
		}
		| DUMP TABLE STRING optnumber		{
			if (add_mrtconfig(MRT_TABLE_DUMP, $3, $4) == -1)
				YYERROR;
		}
		| NETWORK address '/' number		{
			struct network	*n;

			if ((n = calloc(1, sizeof(struct network))) == NULL)
				fatal("new_network");
			n->net.prefix.af = AF_INET;
			n->net.prefix.v4 = $2;
			if ($4 > 32) {
				yyerror("invalid netmask");
a190 2
			n->net.prefixlen = $4;
			TAILQ_INSERT_TAIL(netconf, n, network_l);
a211 7
nl		: '\n' optnl		/* one newline or more */
		;

optnumber	: /* empty */		{ $$ = 0; }
		| number
		;

d220 3
a222 3
		    peeropts_l '}' {
			curpeer->next = peer_l;
			peer_l = curpeer;
d230 1
a230 1
			    sizeof(curgroup->conf.group)) >=
d237 1
a237 1
		    groupopts_l '}' {
d247 3
a249 3
groupoptsl	: peeropts nl
		| neighbor nl
		| error nl
d256 2
a257 2
peeroptsl	: peeropts nl
		| error nl
d265 1
a265 1
			    sizeof(curpeer->conf.descr)) >=
a288 42
		| HOLDTIME number	{
			if ($2 < MIN_HOLDTIME) {
				yyerror("holdtime must be at least %u",
				    MIN_HOLDTIME);
				YYERROR;
			}
			curpeer->conf.holdtime = $2;
		}
		| HOLDTIME YMIN number	{
			if ($3 < MIN_HOLDTIME) {
				yyerror("holdtime min must be at least %u",
				    MIN_HOLDTIME);
				YYERROR;
			}
			curpeer->conf.min_holdtime = $3;
		}
		| ANNOUNCE STRING {
			if (!strcmp($2, "self"))
				curpeer->conf.announce_type = ANNOUNCE_SELF;
			else if (!strcmp($2, "none"))
				curpeer->conf.announce_type = ANNOUNCE_NONE;
			else if (!strcmp($2, "all"))
				curpeer->conf.announce_type = ANNOUNCE_ALL;
			else {
				yyerror("unknown announcement type");
				YYERROR;
			}
		}
		| MAXPREFIX number {
			curpeer->conf.max_prefix = $2;
		}
		| TCP SIGNATURE KEY string {
			unsigned i;

			for (i = 0; i < strlen($4); i++)
				if (!isxdigit($4[i])) {
					yyerror("key should be in hex");
					YYERROR;
				}
			strlcpy(curpeer->conf.tcp_sign_key, $4,
			    sizeof(curpeer->conf.tcp_sign_key));
		}
a325 1
		{ "announce",		ANNOUNCE},
a326 1
		{ "dump",		DUMP},
a329 2
		{ "in",			IN},
		{ "key",		KEY},
a332 1
		{ "max-prefix",		MAXPREFIX},
d334 1
a334 1
		{ "msg",		MSG},
a336 1
		{ "network",		NETWORK},
d341 1
a341 3
		{ "signature",		SIGNATURE},
		{ "table",		TABLE},
		{ "tcp",		TCP},
d550 1
a550 1
    struct mrt_head *xmconf, struct peer **xpeers, struct network_head* nc)
d556 1
a556 1
	if ((mrtconf = calloc(1, sizeof(struct mrt_head))) == NULL)
a558 2
	netconf = nc;
	TAILQ_INIT(netconf);
a559 1
	peer_l = NULL;
d570 9
a578 5
	if ((fin = fopen(filename, "r")) == NULL) {
		warn("%s", filename);
		free(conf);
		free(mrtconf);
		return (-1);
a579 1
	infile = filename;
a582 2
	fclose(fin);

d597 1
a597 1
	errors += merge_config(xconf, conf, peer_l);
a598 1
	*xpeers = peer_l;
d649 1
a649 2
	int	ret;
	size_t	len;
d654 1
a654 2
	len = strlen(s) - strlen(val) + 1;
	if ((sym = malloc(len)) == NULL)
d657 1
a657 1
	strlcpy(sym, s, len);
d695 1
a695 1
alloc_peer(void)
a701 19
	/* some sane defaults */
	p->state = STATE_NONE;
	p->next = NULL;
	p->conf.distance = 1;
	p->conf.announce_type = ANNOUNCE_SELF;
	p->conf.max_prefix = ULONG_MAX;
	p->conf.local_addr.sin_len = sizeof(p->conf.local_addr);
	p->conf.local_addr.sin_family = AF_INET;

	return (p);
}

struct peer *
new_peer(void)
{
	struct peer	*p;

	p = alloc_peer();

d705 2
a706 2
		    sizeof(p->conf.group)) >= sizeof(p->conf.group))
			fatalx("new_peer group strlcpy");
d708 2
a709 2
		    sizeof(p->conf.descr)) >= sizeof(p->conf.descr))
			fatalx("new_peer descr strlcpy");
a713 2
	p->conf.announce_type = ANNOUNCE_SELF;
	p->conf.max_prefix = ULONG_MAX;
d723 6
a728 1
	return (alloc_peer());
d732 1
a732 1
add_mrtconfig(enum mrt_type type, char *name, time_t timeout)
d734 1
a734 1
	struct mrt	*m, *n;
d737 1
a737 1
		if (m->conf.type == type) {
d743 1
a743 1
	if ((n = calloc(1, sizeof(struct mrt))) == NULL)
d746 1
a746 1
	n->conf.type = type;
d748 1
a748 1
	if (strlcpy(n->name, name, sizeof(n->name)) >= sizeof(n->name)) {
a750 1
		free(n);
@


1.1.1.4
log
@using: ========= cvsim-base-obsd _MirBSD: cvsim-src-openbsd,v 1.3 2004/01/27 17:17:54 tg Exp $ =========

In contrast to what people might believe now,
I am not "specially" attracted by CVS Imports
(neither am I a version number hunter).
@
text
@d1 1
a1 1
/*	$OpenBSD: parse.y,v 1.42 2004/01/27 16:49:53 henning Exp $ */
d95 1
a95 1
%token	TCP MD5SIG KEY
d245 5
a249 2
			curpeer->conf.remote_addr.af = AF_INET;
			curpeer->conf.remote_addr.v4.s_addr = $2.s_addr;
d305 4
a308 2
			curpeer->conf.local_addr.af = AF_INET;
			curpeer->conf.local_addr.v4.s_addr = $2.s_addr;
d351 1
a351 1
		| TCP MD5SIG KEY string {
a410 1
		{ "md5sig",		MD5SIG},
d420 1
d794 2
d821 2
@


1.1.1.5
log
@large-scale import of OpenBSD 3.5-current source base including many fixes
note: from now, we will not be binary compatible with OpenBSD apps any
longer (due to syscall numbering differences); both an OpenBSD compat and
a conversion tool for old MirOS #7 apps will be delivered later.

The src/ tree is locked from now.
@
text
@d1 1
a1 1
/*	$OpenBSD: parse.y,v 1.110 2004/05/08 20:58:00 henning Exp $ */
a30 1
#include <limits.h>
d43 1
a43 1
static struct peer		*peer_l, *peer_l_old;
a45 1
static struct filter_head	*filter_l;
a49 1
static u_int32_t		 id;
d64 1
a64 6
int		 add_mrtconfig(enum mrt_type, char *, time_t, struct peer *);
int		 get_id(struct peer *);
int		 expand_rule(struct filter_rule *, struct filter_peers *,
		    struct filter_match *, struct filter_set *);
int		 str2key(char *, char *, size_t);
int		 neighbor_consistent(struct peer *);
a77 1
int	 getcommunity(char *);
d81 3
a83 16
		u_int32_t		 number;
		char			*string;
		struct bgpd_addr	 addr;
		u_int8_t		 u8;
		struct filter_peers	 filter_peers;
		struct filter_match	 filter_match;
		struct filter_set	 filter_set;
		struct {
			struct bgpd_addr	prefix;
			u_int8_t		len;
		}			prefix;
		struct {
			u_int8_t		enc_alg;
			char			enc_key[IPSEC_ENC_KEY_LEN];
			u_int8_t		enc_key_len;
		}			encspec;
d93 3
a95 9
%token	ENFORCE NEIGHBORAS CAPABILITIES
%token	DUMP TABLE IN OUT
%token	LOG ROUTECOLL
%token	TCP MD5SIG PASSWORD KEY
%token	ALLOW DENY MATCH
%token	QUICK
%token	FROM TO ANY
%token	PREFIX PREFIXLEN SOURCEAS TRANSITAS COMMUNITY
%token	SET LOCALPREF MED NEXTHOP PREPEND PFTABLE
d97 4
a100 12
%token	IPSEC ESP AH SPI IKE
%token	<v.string>		STRING
%type	<v.number>		number asnumber optnumber yesno inout espah
%type	<v.string>		string
%type	<v.addr>		address
%type	<v.prefix>		prefix addrspec
%type	<v.u8>			action quick direction
%type	<v.filter_peers>	filter_peer
%type	<v.filter_match>	filter_match prefixlenop
%type	<v.filter_set>		filter_set filter_set_l filter_set_opt
%type	<v.u8>			unaryop binaryop filter_as
%type	<v.encspec>		encspec;
a108 1
		| grammar filterrule '\n'
d116 1
a116 2
				yyerror("\"%s\" is not a number", $1);
				free($1);
a119 1
			free($1);
a122 7
asnumber	: number			{
			if ($1 > USHRT_MAX) {
				yyerror("AS too big: max %u", USHRT_MAX);
				YYERROR;
			}
		}

d137 1
a137 2
			else {
				free($1);
a138 2
			}
			free($1);
a146 2
			free($1);
			free($3);
d150 1
a150 1
conf_main	: AS asnumber		{
d154 1
a154 5
			if ($2.af != AF_INET) {
				yyerror("router-id must be an IPv4 address");
				YYERROR;
			}
			conf->bgpid = $2.v4.s_addr;
d173 1
a173 14
			switch ($3.af) {
			case AF_INET:
				conf->listen_addr.sin_addr.s_addr =
				    $3.v4.s_addr;
				break;
			case AF_INET6:
				memcpy(&conf->listen6_addr.sin6_addr, &$3.v6,
				    sizeof(conf->listen6_addr.sin6_addr));
				break;
			default:
				yyerror("king bula does not like family %u",
				    $3.af);
				YYERROR;
			}
d181 2
a182 5
		| ROUTECOLL yesno	{
			if ($2 == 1)
				conf->flags |= BGPD_FLAG_NO_EVALUATE;
			else
				conf->flags &= ~BGPD_FLAG_NO_EVALUATE;
d184 7
a190 3
		| LOG string		{
			if (!strcmp($2, "updates"))
				conf->log |= BGPD_LOG_UPDATES;
d192 1
a192 1
				free($2);
d195 1
a195 7
			free($2);
		}
		| NETWORK prefix filter_set	{
			struct network	*n;

			if ($2.prefix.af != AF_INET) {
				yyerror("king bula sez: AF_INET only for now");
a196 10
			}
			if ((n = calloc(1, sizeof(struct network))) == NULL)
				fatal("new_network");
			memcpy(&n->net.prefix, &$2.prefix,
			    sizeof(n->net.prefix));
			n->net.prefixlen = $2.len;
			memcpy(&n->net.attrset, &$3,
			    sizeof(n->net.attrset));

			TAILQ_INSERT_TAIL(netconf, n, network_l);
d199 1
a199 2
			if (add_mrtconfig(MRT_TABLE_DUMP, $3, $4, NULL) == -1) {
				free($3);
a200 2
			}
			free($3);
d202 2
a203 2
		| mrtdump
		;
d205 6
a210 11
mrtdump		: DUMP STRING inout STRING optnumber	{
			int action;

			if (!strcmp($2, "all"))
				action = $3 ? MRT_ALL_IN : MRT_ALL_OUT;
			else if (!strcmp($2, "updates"))
				action = $3 ? MRT_UPDATE_IN : MRT_UPDATE_OUT;
			else {
				yyerror("unknown mrt msg dump type");
				free($2);
				free($4);
d213 2
a214 7
			if (add_mrtconfig(action, $4, $5, curpeer) == -1) {
				free($2);
				free($4);
				YYERROR;
			}
			free($2);
			free($4);
a217 4
inout		: IN		{ $$ = 1; }
		| OUT		{ $$ = 0; }
		;

d219 1
a219 1
			u_int8_t	len;
d221 2
a222 4
			if (!host($1, &$$, &len)) {
				yyerror("could not parse address spec \"%s\"",
				    $1);
				free($1);
d225 2
a226 7
			free($1);

			if (($$.af == AF_INET && len != 32) ||
			    ($$.af == AF_INET6 && len != 128)) {
				/* unreachable */
				yyerror("got prefixlen %u, expected %u",
				    len, $$.af == AF_INET ? 32 : 128);
a231 28
prefix		: STRING '/' number	{
			char	*s;

			if (asprintf(&s, "%s/%u", $1, $3) == -1)
				fatal(NULL);

			if (!host(s, &$$.prefix, &$$.len)) {
				yyerror("could not parse address \"%s/%u\"",
				    $1, $3);
				free(s);
				free($1);
				YYERROR;
			}
			free($1);
			free(s);
		}
		;

addrspec	: address	{
			memcpy(&$$.prefix, &$1, sizeof(struct bgpd_addr));
			if ($$.prefix.af == AF_INET)
				$$.len = 32;
			else
				$$.len = 128;
		}
		| prefix
		;

d243 4
a246 12
neighbor	: {	curpeer = new_peer(); }
		    NEIGHBOR addrspec {
			memcpy(&curpeer->conf.remote_addr, &$3.prefix,
			    sizeof(curpeer->conf.remote_addr));
			curpeer->conf.remote_masklen = $3.len;
			if (($3.prefix.af == AF_INET && $3.len != 32) ||
			    ($3.prefix.af == AF_INET6 && $3.len != 128))
				curpeer->conf.template = 1;
			if (get_id(curpeer)) {
				yyerror("get_id failed");
				YYERROR;
			}
d248 1
a248 3
		    peeropts_h {
			if (neighbor_consistent(curpeer) == -1)
				YYERROR;
d251 1
a251 1
			curpeer = curgroup;
a261 6
				free($2);
				YYERROR;
			}
			free($2);
			if (get_id(curgroup)) {
				yyerror("get_id failed");
a279 4
peeropts_h	: '{' optnl peeropts_l '}'
		| /* empty */
		;

d288 1
a288 1
peeropts	: REMOTEAS asnumber	{
a296 1
				free($2);
d302 2
a303 2
			memcpy(&curpeer->conf.local_addr, &$2,
			    sizeof(curpeer->conf.local_addr));
d339 1
a339 1
				free($2);
a341 7
			free($2);
		}
		| ENFORCE NEIGHBORAS yesno {
			if ($3)
				curpeer->conf.enforce_as = ENFORCE_AS_ON;
			else
				curpeer->conf.enforce_as = ENFORCE_AS_OFF;
a345 17
		| TCP MD5SIG PASSWORD string {
			if (curpeer->conf.auth.method) {
				yyerror("auth method cannot be redefined");
				YYERROR;
			}
			if (strlcpy(curpeer->conf.auth.md5key, $4,
			    sizeof(curpeer->conf.auth.md5key)) >=
			    sizeof(curpeer->conf.auth.md5key)) {
				yyerror("tcp md5sig password too long: max %u",
				    sizeof(curpeer->conf.auth.md5key) - 1);
				free($4);
				YYERROR;
			}
			curpeer->conf.auth.method = AUTH_MD5SIG;
			curpeer->conf.auth.md5key_len = strlen($4);
			free($4);
		}
d347 1
a347 228
			if (curpeer->conf.auth.method) {
				yyerror("auth method cannot be redefined");
				YYERROR;
			}

			if (str2key($4, curpeer->conf.auth.md5key,
			    sizeof(curpeer->conf.auth.md5key)) == -1) {
				free($4);
				YYERROR;
			}
			curpeer->conf.auth.method = AUTH_MD5SIG;
			curpeer->conf.auth.md5key_len = strlen($4) / 2;
			free($4);
		}
		| IPSEC espah IKE {
			if (curpeer->conf.auth.method) {
				yyerror("auth method cannot be redefined");
				YYERROR;
			}
			if ($2)
				curpeer->conf.auth.method = AUTH_IPSEC_IKE_ESP;
			else
				curpeer->conf.auth.method = AUTH_IPSEC_IKE_AH;
		}
		| IPSEC espah inout SPI number STRING STRING encspec {
			u_int32_t	auth_alg;
			u_int8_t	keylen;

			if (curpeer->conf.auth.method &&
			    (((curpeer->conf.auth.spi_in && $3 == 1) ||
			    (curpeer->conf.auth.spi_out && $3 == 0)) ||
			    ($2 == 1 && curpeer->conf.auth.method !=
			    AUTH_IPSEC_MANUAL_ESP) ||
			    ($2 == 0 && curpeer->conf.auth.method !=
			    AUTH_IPSEC_MANUAL_AH))) {
				yyerror("auth method cannot be redefined");
				YYERROR;
			}

			if (!strcmp($6, "sha1")) {
				auth_alg = SADB_AALG_SHA1HMAC;
				keylen = 20;
			} else if (!strcmp($6, "md5")) {
				auth_alg = SADB_AALG_MD5HMAC;
				keylen = 16;
			} else {
				yyerror("unknown auth algorithm \"%s\"", $6);
				free($7);
				free($6);
				YYERROR;
			}
			free($6);

			if (strlen($7) / 2 != keylen) {
				yyerror("auth key len: must be %u bytes, "
				    "is %u bytes", keylen, strlen($7) / 2);
				free($7);
				YYERROR;
			}

			if ($2)
				curpeer->conf.auth.method =
				    AUTH_IPSEC_MANUAL_ESP;
			else {
				if ($8.enc_alg) {
					yyerror("\"ipsec ah\" doesn't take "
					    "encryption keys");
					free($7);
					YYERROR;
				}
				curpeer->conf.auth.method =
				    AUTH_IPSEC_MANUAL_AH;
			}

			if ($3 == 1) {
				if (str2key($7, curpeer->conf.auth.auth_key_in,
				    sizeof(curpeer->conf.auth.auth_key_in)) ==
				    -1) {
					free($7);
					YYERROR;
				}
				curpeer->conf.auth.spi_in = $5;
				curpeer->conf.auth.auth_alg_in = auth_alg;
				curpeer->conf.auth.enc_alg_in = $8.enc_alg;
				memcpy(&curpeer->conf.auth.enc_key_in,
				    &$8.enc_key,
				    sizeof(curpeer->conf.auth.enc_key_in));
				curpeer->conf.auth.enc_keylen_in =
				    $8.enc_key_len;
				curpeer->conf.auth.auth_keylen_in = keylen;
			} else {
				if (str2key($7, curpeer->conf.auth.auth_key_out,
				    sizeof(curpeer->conf.auth.auth_key_out)) ==
				    -1) {
					free($7);
					YYERROR;
				}
				curpeer->conf.auth.spi_out = $5;
				curpeer->conf.auth.auth_alg_out = auth_alg;
				curpeer->conf.auth.enc_alg_out = $8.enc_alg;
				memcpy(&curpeer->conf.auth.enc_key_out,
				    &$8.enc_key,
				    sizeof(curpeer->conf.auth.enc_key_out));
				curpeer->conf.auth.enc_keylen_out =
				    $8.enc_key_len;
				curpeer->conf.auth.auth_keylen_out = keylen;
			}
			free($7);
		}
		| ANNOUNCE CAPABILITIES yesno {
			curpeer->conf.capabilities = $3;
		}
		| SET filter_set_opt	{
			memcpy(&curpeer->conf.attrset, &$2,
			    sizeof(curpeer->conf.attrset));
		}
		| SET optnl "{" optnl filter_set_l optnl "}"	{
			memcpy(&curpeer->conf.attrset, &$5,
			    sizeof(curpeer->conf.attrset));
		}
		| mrtdump
		;

espah		: ESP		{ $$ = 1; }
		| AH		{ $$ = 0; }
		;

encspec		: /* nada */	{
			bzero(&$$, sizeof($$));
		}
		| STRING STRING {
			bzero(&$$, sizeof($$));
			if (!strcmp($1, "3des") || !strcmp($1, "3des-cbc")) {
				$$.enc_alg = SADB_EALG_3DESCBC;
				$$.enc_key_len = 21; /* XXX verify */
			} else if (!strcmp($1, "aes") ||
			    !strcmp($1, "aes-128-cbc")) {
				$$.enc_alg = SADB_X_EALG_AES;
				$$.enc_key_len = 16;
			} else {
				yyerror("unknown enc algorithm \"%s\"", $1);
				free($1);
				free($2);
				YYERROR;
			}
			free($1);

			if (strlen($2) / 2 != $$.enc_key_len) {
				yyerror("enc key length wrong: should be %u "
				    "bytes, is %u bytes",
				    $$.enc_key_len * 2, strlen($2));
				free($2);
				YYERROR;
			}

			if (str2key($2, $$.enc_key, sizeof($$.enc_key)) == -1) {
				free($2);
				YYERROR;
			}
			free($2);
		}
		;

filterrule	: action quick direction filter_peer filter_match filter_set
		{
			struct filter_rule	r;

			if ($5.prefix.addr.af && $5.prefix.addr.af != AF_INET) {
				yyerror("king bula sez: AF_INET only for now");
				YYERROR;
			}

			bzero(&r, sizeof(r));
			r.action = $1;
			r.quick = $2;
			r.dir = $3;

			if (expand_rule(&r, &$4, &$5, &$6) == -1)
				YYERROR;
		}
		;

action		: ALLOW		{ $$ = ACTION_ALLOW; }
		| DENY		{ $$ = ACTION_DENY; }
		| MATCH		{ $$ = ACTION_NONE; }
		;

quick		: /* empty */	{ $$ = 0; }
		| QUICK		{ $$ = 1; }
		;

direction	: FROM		{ $$ = DIR_IN; }
		| TO		{ $$ = DIR_OUT; }
		;

filter_peer	: ANY		{ $$.peerid = $$.groupid = 0; }
		| address	{
			struct peer *p;

			$$.groupid = $$.peerid = 0;
			for (p = peer_l; p != NULL; p = p->next)
				if (!memcmp(&p->conf.remote_addr,
				    &$1, sizeof(p->conf.remote_addr))) {
					$$.peerid = p->conf.id;
					break;
				}
			if ($$.peerid == 0) {
				yyerror("no such peer: %s", log_addr(&$1));
				YYERROR;
			}
		}
		| GROUP string	{
			struct peer *p;

			$$.peerid = 0;
			for (p = peer_l; p != NULL; p = p->next)
				if (!strcmp(p->conf.group, $2)) {
					$$.groupid = p->conf.groupid;
					break;
				}
			if ($$.groupid == 0) {
				yyerror("no such group: \"%s\"", $2);
				free($2);
				YYERROR;
			}
			free($2);
		}
		;
d349 3
a351 18
filter_match	: /* empty */			{ bzero(&$$, sizeof($$)); }
		| PREFIX prefix			{
			bzero(&$$, sizeof($$));
			memcpy(&$$.prefix.addr, &$2.prefix,
			    sizeof($$.prefix.addr));
			$$.prefix.len = $2.len;
		}
		| PREFIX prefix PREFIXLEN prefixlenop	{
			bzero(&$$, sizeof($$));
			memcpy(&$$.prefix.addr, &$2.prefix,
			    sizeof($$.prefix.addr));
			$$.prefix.len = $2.len;
			$$.prefixlen = $4.prefixlen;
			$$.prefixlen.af = $2.prefix.af;
			if ($$.prefixlen.af == AF_INET)
				if ($$.prefixlen.len_max > 32 ||
				    $$.prefixlen.len_min > 32) {
					yyerror("prefixlen must be <= 32");
d354 2
a355 79
			if ($$.prefixlen.af == AF_INET6)
				if ($$.prefixlen.len_max > 128 ||
				    $$.prefixlen.len_min > 128) {
					yyerror("prefixlen must be <= 128");
					YYERROR;
				}
		}
		| PREFIXLEN prefixlenop		{
			bzero(&$$, sizeof($$));
			$$.prefixlen = $2.prefixlen;
			$$.prefixlen.af = AF_INET;
		}
		| filter_as asnumber		{
			bzero(&$$, sizeof($$));
			$$.as.as = $2;
			$$.as.type = $1;
		}
		| COMMUNITY STRING	{
			char	*p;
			int	 i;

			bzero(&$$, sizeof($$));
			if ((p = strchr($2, ':')) == NULL) {
				free($2);
				yyerror("Bad community syntax");
				YYERROR;
			}
			*p++ = 0;
			if ((i = getcommunity($2)) == COMMUNITY_ERROR) {
				free($2);
				YYERROR;
			}
			if (i == 0 || i == USHRT_MAX) {
				free($2);
				yyerror("Bad community AS number");
				YYERROR;
			}
			$$.community.as = i;
			if ((i = getcommunity(p)) == COMMUNITY_ERROR) {
				free($2);
				YYERROR;
			}
			free($2);
			$$.community.type = i;
		}
		;

prefixlenop	: unaryop number		{
			bzero(&$$, sizeof($$));
			if ($2 > 128) {
				yyerror("prefixlen must be < 128");
				YYERROR;
			}
			$$.prefixlen.op = $1;
			$$.prefixlen.len_min = $2;
		}
		| number binaryop number	{
			bzero(&$$, sizeof($$));
			if ($1 > 128 || $3 > 128) {
				yyerror("prefixlen must be < 128");
				YYERROR;
			}
			if ($1 >= $3) {
				yyerror("start prefixlen is bigger that end");
				YYERROR;
			}
			$$.prefixlen.op = $2;
			$$.prefixlen.len_min = $1;
			$$.prefixlen.len_max = $3;
		}
		;

filter_as	: AS		{ $$ = AS_ALL; }
		| SOURCEAS	{ $$ = AS_SOURCE; }
		| TRANSITAS	{ $$ = AS_TRANSIT; }
		;

filter_set	: /* empty */					{
			bzero(&$$, sizeof($$));
a356 80
		| SET filter_set_opt				{ $$ = $2; }
		| SET optnl "{" optnl filter_set_l optnl "}"	{ $$ = $5; }
		;

filter_set_l	: filter_set_l comma filter_set_opt	{
			$$ = $1;
			if ($$.flags & $3.flags) {
				yyerror("redefining set shitz is not fluffy");
				YYERROR;
			}
			$$.flags |= $3.flags;
			if ($3.flags & SET_LOCALPREF)
				$$.localpref = $3.localpref;
			if ($3.flags & SET_MED)
				$$.med = $3.med;
			if ($3.flags & SET_NEXTHOP)
				memcpy(&$$.nexthop, &$3.nexthop,
				    sizeof($$.nexthop));
			if ($3.flags & SET_PREPEND)
				$$.prepend = $3.prepend;
			if ($3.flags & SET_PFTABLE)
				strlcpy($$.pftable, $3.pftable,
				    sizeof($$.pftable));
		}
		| filter_set_opt
		;

filter_set_opt	: LOCALPREF number		{
			$$.flags = SET_LOCALPREF;
			$$.localpref = $2;
		}
		| MED number			{
			$$.flags = SET_MED;
			$$.med = $2;
		}
		| NEXTHOP address		{
			if ($2.af == AF_INET) {
				$$.flags = SET_NEXTHOP;
				$$.nexthop.s_addr = $2.v4.s_addr;
			} else {
				yyerror("king bula sez: AF_INET only for now");
				YYERROR;
			}
		}
		| PREPEND number		{
			$$.flags = SET_PREPEND;
			$$.prepend = $2;
		}
		| PFTABLE string		{
			$$.flags = SET_PFTABLE;
			if (pftable_exists($2) != 0) {
				yyerror("pftable name does not exist");
				YYERROR;
			}
			if (strlcpy($$.pftable, $2, sizeof($$.pftable)) >=
			    sizeof($$.pftable)) {
				yyerror("pftable name too long");
				YYERROR;
			}
			if (pftable_add($2) != 0) {
				yyerror("Couldn't register table");
				YYERROR;
			}
		}
		;

comma		: ","
		| /* empty */
		;

unaryop		: '='		{ $$ = OP_EQ; }
		| '!' '='	{ $$ = OP_NE; }
		| '<' '='	{ $$ = OP_LE; }
		| '<'		{ $$ = OP_LT; }
		| '>' '='	{ $$ = OP_GE; }
		| '>'		{ $$ = OP_GT; }
		;

binaryop	: '-'		{ $$ = OP_RANGE; }
		| '>' '<'	{ $$ = OP_XRANGE; }
a393 2
		{ "ah",			AH},
		{ "allow",		ALLOW},
a394 4
		{ "any",		ANY},
		{ "capabilities",	CAPABILITIES},
		{ "community",		COMMUNITY},
		{ "deny",		DENY},
a396 2
		{ "enforce",		ENFORCE},
		{ "esp",		ESP},
a397 1
		{ "from",		FROM},
a399 1
		{ "ike",		IKE},
a400 1
		{ "ipsec",		IPSEC},
a403 1
		{ "localpref",		LOCALPREF},
a404 1
		{ "match",		MATCH},
a406 1
		{ "med",		MED},
d408 1
a410 1
		{ "neighbor-as",	NEIGHBORAS},
a411 1
		{ "nexthop",		NEXTHOP},
a412 1
		{ "out",		OUT},
a413 6
		{ "password",		PASSWORD},
		{ "pftable",		PFTABLE},
		{ "prefix",		PREFIX},
		{ "prefixlen",		PREFIXLEN},
		{ "prepend-self",	PREPEND},
		{ "quick",		QUICK},
a414 1
		{ "route-collector",	ROUTECOLL},
a415 3
		{ "set",		SET},
		{ "source-AS",		SOURCEAS},
		{ "spi",		SPI},
d418 1
a418 2
		{ "to",			TO},
		{ "transit-AS",		TRANSITAS}
d558 1
a558 1
			yyerror("macro \"%s\" not defined", buf);
d599 1
a599 1
	if (isalnum(c) || c == ':' || c == '_' || c == '*') {
d609 4
a612 3
		if ((token = lookup(buf)) == STRING)
			if ((yylval.v.string = strdup(buf)) == NULL)
				fatal("yylex: strdup");
d626 1
a626 2
    struct mrt_head *xmconf, struct peer **xpeers, struct network_head *nc,
    struct filter_head *xfilter_l)
d628 1
a628 2
	struct sym		*sym, *next;
	struct peer		*p, *pnext;
a638 1
	peer_l_old = *xpeers;
a642 3
	id = 1;
	filter_l = xfilter_l;
	TAILQ_INIT(filter_l);
a648 5
	bzero(&conf->listen6_addr, sizeof(conf->listen6_addr));
	conf->listen6_addr.sin6_len = sizeof(conf->listen6_addr);
	conf->listen6_addr.sin6_family = AF_INET6;
	conf->listen6_addr.sin6_port = htons(BGP_PORT);

a656 7
	if (check_file_secrecy(fileno(fin), filename)) {
		fclose(fin);
		free(conf);
		free(mrtconf);
		return (-1);
	}

d665 1
a665 1
			fprintf(stderr, "warning: macro \"%s\" not "
a678 5
	for (p = peer_l_old; p != NULL; p = pnext) {
		pnext = p->next;
		free(p);
	}

a774 18
int
getcommunity(char *s)
{
	u_long	ulval;

	if (strcmp(s, "*") == 0)
		return (COMMUNITY_ANY);
	if (atoul(s, &ulval) == -1) {
		yyerror("\"%s\" is not a number", s);
		return (COMMUNITY_ERROR);
	}
	if (ulval > USHRT_MAX) {
		yyerror("Community too big: max %u", USHRT_MAX);
		return (COMMUNITY_ERROR);
	}
	return (ulval);
}

d787 2
a788 2
	p->conf.announce_type = ANNOUNCE_UNDEF;
	p->conf.capabilities = 1;
a807 1
		p->conf.groupid = curgroup->conf.id;
d809 1
d811 3
d825 1
a825 1
add_mrtconfig(enum mrt_type type, char *name, time_t timeout, struct peer *p)
a829 8
		if (p == NULL) {
			if (m->conf.peer_id != 0 || m->conf.group_id != 0)
				continue;
		} else {
			if (m->conf.peer_id != p->conf.id ||
			    m->conf.group_id != p->conf.groupid)
				continue;
		}
d840 1
a840 1
	n->msgbuf.fd = -1;
a847 9
	if (p != NULL) {
		if (curgroup == p) {
			n->conf.peer_id = 0;
			n->conf.group_id = p->conf.id;
		} else {
			n->conf.peer_id = p->conf.id;
			n->conf.group_id = 0;
		}
	}
a852 112

int
get_id(struct peer *newpeer)
{
	struct peer	*p;

	if (newpeer->conf.remote_addr.af)
		for (p = peer_l_old; p != NULL; p = p->next)
			if (!memcmp(&p->conf.remote_addr,
			    &newpeer->conf.remote_addr,
			    sizeof(p->conf.remote_addr))) {
				newpeer->conf.id = p->conf.id;
				return (0);
			}

	/* new one */
	for (; id < UINT_MAX / 2; id++) {
		for (p = peer_l_old; p != NULL && p->conf.id != id; p = p->next)
			;	/* nothing */
		if (p == NULL) {	/* we found a free id */
			newpeer->conf.id = id++;
			return (0);
		}
	}

	return (-1);
}

int
expand_rule(struct filter_rule *rule, struct filter_peers *peer,
    struct filter_match *match, struct filter_set *set)
{
	struct filter_rule	*r;

	if ((r = calloc(1, sizeof(struct filter_rule))) == NULL) {
		log_warn("expand_rule");
		return (-1);
	}

	memcpy(r, rule, sizeof(struct filter_rule));
	memcpy(&r->peer, peer, sizeof(struct filter_peers));
	memcpy(&r->match, match, sizeof(struct filter_match));
	memcpy(&r->set, set, sizeof(struct filter_set));

	TAILQ_INSERT_TAIL(filter_l, r, entries);

	return (0);
}

int
str2key(char *s, char *dest, size_t max_len)
{
	unsigned	i;
	char		t[3];

	if (strlen(s) / 2 > max_len) {
		yyerror("key too long");
		return (-1);
	}

	if (strlen(s) % 2) {
		yyerror("key must be of even length");
		return (-1);
	}

	for (i = 0; i < strlen(s) / 2; i++) {
		t[0] = s[2*i];
		t[1] = s[2*i + 1];
		t[2] = 0;
		if (!isxdigit(t[0]) || !isxdigit(t[1])) {
			yyerror("key must be specified in hex");
			return (-1);
		}
		dest[i] = strtoul(t, NULL, 16);
	}

	return (0);
}

int
neighbor_consistent(struct peer *p)
{
	/* local-address and peer's address: same address family */
	if (p->conf.local_addr.af &&
	    p->conf.local_addr.af != p->conf.remote_addr.af) {
		yyerror("local-address and neighbor address "
		    "must be of the same address family");
		return (-1);
	}

	/* with any form of ipsec local-address is required */
	if ((p->conf.auth.method == AUTH_IPSEC_IKE_ESP ||
	    p->conf.auth.method == AUTH_IPSEC_IKE_AH ||
	    p->conf.auth.method == AUTH_IPSEC_MANUAL_ESP ||
	    p->conf.auth.method == AUTH_IPSEC_MANUAL_AH) &&
	    !p->conf.local_addr.af) {
		yyerror("neighbors with any form of IPsec configured "
		    "need local-address to be specified");
		return (-1);
	}

	/* with static keying we need both directions */
	if ((p->conf.auth.method == AUTH_IPSEC_MANUAL_ESP ||
	    p->conf.auth.method == AUTH_IPSEC_MANUAL_AH) &&
	    (!p->conf.auth.spi_in || !p->conf.auth.spi_out)) {
		yyerror("with manual keyed IPsec, SPIs and keys "
		    "for both directions are required");
		return (-1);
	}

	return (0);
}@


