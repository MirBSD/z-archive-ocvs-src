head	1.1;
branch	1.1.1;
access;
symbols
	tg-mergetmp-mirosx-1:1.1.1.4
	tg-mergefixes-1-branch:1.1.1.4.0.8
	tg-mergefixes-1-base:1.1.1.4
	MIROS_X:1.1.1.4.0.6
	MIROS_X_BASE:1.1.1.4
	tg-mergetmp-3:1.1.1.4
	MIRBSD_XP_MIRPPC:1.1.1.4.0.4
	MIRBSD_XP_SPARC_BASE:1.1.1.4
	MIRBSD_XP_SPARC:1.1.1.4.0.2
	cvs-200405160640:1.1.1.4
	cvs-200401271800:1.1.1.3
	cvs-200401261630:1.1.1.3
	cvs-200401021645:1.1.1.2
	cvs-200312222040:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.1
date	2003.12.22.21.20.12;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.12.22.21.20.12;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2004.01.02.18.12.25;	author tg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2004.01.26.19.05.51;	author tg;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2004.05.16.07.19.23;	author tg;	state Stab;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@/*	$OpenBSD: mrt.h,v 1.4 2003/12/21 23:26:37 henning Exp $ */

/*
 * Copyright (c) 2003 Claudio Jeker <cjeker@@diehard.n-r-g.com>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */
#ifndef __MRT_H__
#define __MRT_H__

#include "bgpd.h"

/*
 * MRT binary packet format as used by zebra.
 * For more info see:
 * http://www.mrtd.net/mrt_doc/html/mrtprogrammer.html#_Toc412283890
 * or
 * http://www.mrtd.net/mrt_doc/PDF/mrtprogrammer.pdf (Chapter 12)
 * and
 * http://www.quagga.net/docs/docs-multi/Packet-Binary-Dump-Format.html
 */

struct mrt_header {
	u_int32_t	timestamp;
	u_int16_t	type;
	u_int16_t	subtype;
	u_int32_t	length;		/* length of packet including header */
};

enum MRT_MSG_TYPES {
	MSG_NULL,
	MSG_START,		/*  1 sender is starting up */
	MSG_DIE,		/*  2 receiver should shut down */
	MSG_I_AM_DEAD,		/*  3 sender is shutting down */
	MSG_PEER_DOWN,		/*  4 sender's peer is down */
	MSG_PROTOCOL_BGP,	/*  5 msg is a BGP packet */
	MSG_PROTOCOL_RIP,	/*  6 msg is a RIP packet */
	MSG_PROTOCOL_IDRP,	/*  7 msg is an IDRP packet */
	MSG_PROTOCOL_RIPNG,	/*  8 msg is a RIPNG packet */
	MSG_PROTOCOL_BGP4PLUS,	/*  9 msg is a BGP4+ packet */
	MSG_PROTOCOL_BGP4PLUS1,	/* 10 msg is a BGP4+ (draft 01) packet */
	MSG_PROTOCOL_OSPF,	/* 11 msg is an OSPF packet */
	MSG_TABLE_DUMP,		/* 12 routing table dump */
	MSG_PROTOCOL_BGP4MP=16,	/* 16 zebras own packet format */
};

#define MRT_HEADER_SIZE		sizeof(struct mrt_header)
#define MRT_DUMP_HEADER_SIZE	22	/* sizeof(struct mrt_dump_v4_header) */
#define MRT_BGP4MP_HEADER_SIZE	\
	sizeof(struct mrt_bgp4mp_header) + \
	sizeof(struct mrt_bgp4mp_IPv4)
/*
 * format for routing table dumps in mrt format.
 * Type MSG_TABLE_DUMP and subtype is address family (IPv4)
 */
struct mrt_dump_v4_header {
	u_int16_t	view;	/* normally 0 */
	u_int16_t	seqnum;	/* simple counter for this dump */
	u_int32_t	prefix;
	u_int8_t	prefixlen;
	u_int8_t	status;	/* default seems to be 1 */
	u_int32_t	originated; /* seems to be time of last update */
	u_int32_t	peer_ip;
	u_int16_t	peer_as;
	u_int16_t	attr_len;
	/* bgp attributes attr_len bytes long */
};

/*
 * format for routing table dumps in mrt format.
 * Type MSG_TABLE_DUMP and subtype is address family (IPv6)
 */
struct mrt_dump_v6_header {
	u_int16_t	view;	/* normally 0 */
	u_int16_t	seqnum;	/* simple counter for this dump */
	u_int32_t	prefix[4];
	u_int8_t	prefixlen;
	u_int8_t	status;	/* default seems to be 1 */
	u_int32_t	originated; /* seems to be time of last update */
	u_int32_t	peer_ip[4];
	u_int16_t	peer_as;
	u_int16_t	attr_len;
	/* bgp attributes attr_len bytes long */
};



/*
 * Main zebra dump format is in MSG_PROTOCOL_BGP4MP exptions are table dumps
 * that are normaly saved as MSG_TABLE_DUMP.
 * In most cases this is the format to choose to dump updates et al.
 */
enum MRT_BGP4MP_TYPES {
	BGP4MP_STATE_CHANGE=0,	/* state change */
	BGP4MP_MESSAGE=1,	/* bgp message */
	BGP4MP_ENTRY=2,		/* table dumps */
	BGP4MP_SNAPSHOT=3
};

/* if type PROTOCOL_BGP4MP and
 * subtype BGP4MP_STATE_CHANGE or BGP4MP_MESSAGE  */
struct mrt_bgp4mp_header {
	u_int16_t	source_as;
	u_int16_t	dest_as;
	u_int16_t	if_index;
	u_int16_t	afi;
	/*
	 * Next comes either a struct mrt_bgp4mp_IPv4 or a
	 * struct mrt_bgp4mp_IPv6 dependant on afi type.
	 *
	 * Last but not least the payload.
	 */
};

/* if afi = 4 */
struct mrt_bgp4mp_IPv4 {
	u_int32_t	source_ip;
	u_int32_t	dest_ip;
};

/* if afi = 6 */
struct mrt_bgp4mp_IPv6 {
	u_int32_t	source_ip[4];
	u_int32_t	dest_ip[4];
};

/*
 * payload of a BGP4MP_STATE_CHANGE packet
 */
struct mrt_bgp4mp_state_data {
	u_int16_t	old_state;	/* as in RFC 1771 */
	u_int16_t	new_state;
};

/*
 * The payload of a BGP4MP_MESSAGE is the full bgp message with header.
 */

/* if type PROTOCOL_BGP4MP, subtype BGP4MP_ENTRY */
struct mrt_bgp4mp_entry_header {
	u_int16_t	view;
	u_int16_t	status;
	u_int32_t	originated;	/* time last change */
	u_int16_t	afi;
	u_int8_t	safi;
	u_int8_t	nexthop_len;
	/*
	 * u_int32_t nexthop    for IPv4 or
	 * u_int32_t nexthop[4] for IPv6
	 * u_int8_t  prefixlen
	 * variable prefix (prefixlen bits long rounded to the next octet)
	 * u_int16_t attrlen
	 * variable lenght bgp attributes attrlen bytes long
	 */
};

/*
 * What is this for?
 * if type MSG_PROTOCOL_BGP and subtype MSG_BGP_SYNC OR
 * if type MSG_PROTOCOL_BGP4MP and subtype BGP4MP_SNAPSHOT
 */
struct mrt_bgp_sync_header {
	u_int16_t	view;
	char		filename[2]; /* variable */
};

/*
 * OLD MRT message headers. These structs are here for completition but
 * will not be used to generate dumps. It seems that nobody uses those.
 */

/*
 * Only for bgp messages (type 5, 9 and 10)
 * Nota bene for bgp dumps MSG_PROTOCOL_BGP4MP should be used.
 */
enum MRT_BGP_TYPES {
	MSG_BGP_NULL,
	MSG_BGP_UPDATE,		/* raw update packet (contains both withdraws
				   and announcements) */
	MSG_BGP_PREF_UPDATE,	/* tlv preferences followed by raw update */
	MSG_BGP_STATE_CHANGE,	/* state change */
	MSG_BGP_SYNC
};

/* if type MSG_PROTOCOL_BGP and subtype MSG_BGP_UPDATE */
struct mrt_bgp_update_header {
	u_int16_t	source_as;
	u_int32_t	source_ip;
	u_int16_t	dest_as;
	u_int32_t	dest_ip;
	/* bgp update packet */
};

/* if type MSG_PROTOCOL_BGP4PLUS and subtype MSG_BGP_UPDATE */
struct mrt_bgp_update_plus_header {
	u_int16_t	source_as;
	u_int32_t	source_ip[4];
	u_int16_t	dest_as;
	u_int32_t	dest_ip[4];
	/* bgp update packet */
};

/* for subtype MSG_BGP_STATECHANGE (for all BGP types ???) */
struct mrt_bgp_state_header {
	u_int16_t	source_as;
	u_int32_t	source_ip[4];
	u_int16_t	old_state;	/* as in RFC 1771 ??? */
	u_int16_t	new_state;
};

/* pseudo predeclarations */
struct prefix;
struct pt_entry;
struct mrt {
	struct msgbuf	*msgbuf;
	u_int32_t	 id;
};

/* prototypes */
int	mrt_dump_bgp_msg(struct mrt *, void *, u_int16_t, int,
    struct peer_config *, struct bgpd_config *);
void	mrt_clear_seq(void);
void	mrt_dump_upcall(struct pt_entry *, void *);
int	mrt_state(struct mrtdump_config *, enum imsg_type, struct imsgbuf *);
int	mrt_alrm(struct mrt_config *, struct imsgbuf *);
int	mrt_usr1(struct mrt_config *, struct imsgbuf *);

#endif
@


1.1.1.1
log
@Time to import OpenBSD once again. Expect breakage.
@
text
@@


1.1.1.2
log
@Import OpenBSD again, for various reasons.
@
text
@d1 1
a1 1
/*	$OpenBSD: mrt.h,v 1.6 2004/01/02 00:13:32 deraadt Exp $ */
d54 1
a54 1
	MSG_PROTOCOL_BGP4MP=16	/* 16 zebras own packet format */
d99 1
a99 1
 * Main zebra dump format is in MSG_PROTOCOL_BGP4MP exceptions are table dumps
d119 1
a119 1
	 * struct mrt_bgp4mp_IPv6 dependent on afi type.
d163 1
a163 1
	 * variable length bgp attributes attrlen bytes long
d178 1
a178 1
 * OLD MRT message headers. These structs are here for completion but
@


1.1.1.3
log
@Import OpenBSD as of today again (seems pretty stable, I hope)

Prominent changes: more bgpd, tcpmd5; tcpdump/isakmpd fixes
@
text
@d1 1
a1 1
/*	$OpenBSD: mrt.h,v 1.9 2004/01/18 00:44:44 deraadt Exp $ */
d4 1
a4 1
 * Copyright (c) 2003, 2004 Claudio Jeker <claudio@@openbsd.org>
a22 3
/* In cases of failure wait at least MRT_MIN_RETRY. */
#define MRT_MIN_RETRY	300

d33 6
a38 11
/*
 * MRT header:
 * +--------+--------+--------+--------+
 * |             timestamp             |
 * +--------+--------+--------+--------+
 * |      type       |     subtype     |
 * +--------+--------+--------+--------+
 * |               length              | length of packet including header
 * +--------+--------+--------+--------+
 */
#define MRT_HEADER_SIZE		12
d57 41
d110 34
a143 2
/* size of the BGP4MP headers without payload */
#define MRT_BGP4MP_HEADER_SIZE	16
d145 1
a145 27
/* If the type is PROTOCOL_BGP4MP and the subtype is either BGP4MP_STATE_CHANGE
 * or BGP4MP_MESSAGE the message consists of a common header plus the payload.
 * Header format:
 *
 * +--------+--------+--------+--------+
 * |    source_as    |     dest_as     |
 * +--------+--------+--------+--------+
 * |    if_index     |       afi       |
 * +--------+--------+--------+--------+
 * |             source_ip             |
 * +--------+--------+--------+--------+
 * |              dest_ip              |
 * +--------+--------+--------+--------+
 * |      message specific payload ...
 * +--------+--------+--------+--------+
 *
 * The source_ip and dest_ip are dependant of the afi type. For IPv6 source_ip
 * and dest_ip are both 16 bytes long.
 *
 * Payload of a BGP4MP_STATE_CHANGE packet:
 *
 * +--------+--------+--------+--------+
 * |    old_state    |    new_state    |
 * +--------+--------+--------+--------+
 *
 * The state values are the same as in RFC 1771.
 *
d149 18
d168 3
a170 28
 * The "new" table dump format consists of messages of type PROTOCOL_BGP4MP
 * and subtype BGP4MP_ENTRY.
 *
 * +--------+--------+--------+--------+
 * |      view       |     status      |
 * +--------+--------+--------+--------+
 * |            originated             |
 * +--------+--------+--------+--------+
 * |       afi       |  safi  | nhlen  |
 * +--------+--------+--------+--------+
 * |              nexthop              |
 * +--------+--------+--------+--------+
 * |  plen  |  prefix variable  ...    |
 * +--------+--------+--------+--------+
 * |    attr_len     | bgp attributes
 * +--------+--------+--------+--------+
 *  bgp attributes, attr_len bytes long
 * +--------+--------+--------+--------+
 *   ...                      |
 * +--------+--------+--------+
 *
 * View is normaly 0 and originated the time of last change.
 * The status seems to be 1 by default but probably something to indicate
 * the status of a prefix would be more useful.
 * The format of the nexthop address is defined via the afi value. For IPv6
 * the nexthop field is 16 bytes long.
 * The prefix field is as in the bgp update message variable length. It is
 * plen bits long but rounded to the next octet.
d172 4
d178 2
a179 26
 * Format for routing table dumps in "old" mrt format.
 * Type MSG_TABLE_DUMP and subtype is AFI_IPv4 (1) for IPv4 and AFI_IPv6 (2)
 * for IPv6. In the IPv6 case prefix and peer_ip are both 16 bytes long.
 *
 * +--------+--------+--------+--------+
 * |      view       |      seqnum     |
 * +--------+--------+--------+--------+
 * |               prefix              |
 * +--------+--------+--------+--------+
 * |  plen  | status |    originated
 * +--------+--------+--------+--------+
 *      originated   |     peer_ip
 * +--------+--------+--------+--------+
 *       peer_ip     |     peer_as     |
 * +--------+--------+--------+--------+
 * |    attr_len     | bgp attributes
 * +--------+--------+--------+--------+
 *  bgp attributes, attr_len bytes long
 * +--------+--------+--------+--------+
 *   ...                      |
 * +--------+--------+--------+
 *
 *
 * View is normaly 0 and seqnum just a simple counter for this dump.
 * The status seems to be 1 by default but probably something to indicate
 * the status of a prefix would be more useful.
a181 3
/* size of the dump header until attr_len */
#define MRT_DUMP_HEADER_SIZE	22

a182 3
 * OLD MRT message headers. These structs are here for completion but
 * will not be used to generate dumps. It seems that nobody uses those.
 *
d195 24
a218 84
/* if type MSG_PROTOCOL_BGP and subtype MSG_BGP_UPDATE
 *
 * +--------+--------+--------+--------+
 * |    source_as    |    source_ip
 * +--------+--------+--------+--------+
 *      source_ip    |    dest_as      |
 * +--------+--------+--------+--------+
 * |               dest_ip             |
 * +--------+--------+--------+--------+
 * | bgp update packet with header et
 * +--------+--------+--------+--------+
 *   al. (variable length) ...
 * +--------+--------+--------+--------+
 *
 * For IPv6 the type is MSG_PROTOCOL_BGP4PLUS and the subtype remains
 * MSG_BGP_UPDATE. The sourec_ip and dest_ip are again extended to 16 bytes.
 */

/*
 * For subtype MSG_BGP_STATECHANGE (for all BGP types or just for the
 * MSG_PROTOCOL_BGP4PLUS case? Unclear.)
 *
 * +--------+--------+--------+--------+
 * |    source_as    |    source_ip
 * +--------+--------+--------+--------+
 *      source_ip    |    old_state    |
 * +--------+--------+--------+--------+
 * |    new_state    |
 * +--------+--------+
 *
 * State are defined in RFC 1771.
 */

/*
 * if type MSG_PROTOCOL_BGP and subtype MSG_BGP_SYNC OR
 * if type MSG_PROTOCOL_BGP4MP and subtype BGP4MP_SNAPSHOT
 * What is this for?
 *
 * +--------+--------+--------+--------+
 * |      view       |    filename
 * +--------+--------+--------+--------+
 *    filename variable length zero
 * +--------+--------+--------+--------+
 *    terminated ... |   0    |
 * +--------+--------+--------+
 */

#define	MRT_FILE_LEN	512
enum mrt_type {
	MRT_NONE,
	MRT_TABLE_DUMP,
	MRT_FILTERED_IN,
	MRT_ALL_IN,
	MRT_SESSION_IN,
	MRT_SESSION_OUT
};

enum mrt_state {
	MRT_STATE_STOPPED,
	MRT_STATE_RUNNING,
	MRT_STATE_OPEN,
	MRT_STATE_CLOSE,
	MRT_STATE_REOPEN,
	MRT_STATE_TOREMOVE,
	MRT_STATE_REMOVE
};

struct mrt_config {
	enum mrt_type		 type;
	u_int32_t		 id;
	u_int32_t		 peer_id;
	struct msgbuf		*msgbuf;
};

struct mrt {
	struct mrt_config	 conf;
	time_t			 ReopenTimer;
	time_t			 ReopenTimerInterval;
	enum mrt_state		 state;
	struct msgbuf		 msgbuf;
	struct imsgbuf		*ibuf;
	char			 name[MRT_FILE_LEN];	/* base file name */
	char			 file[MRT_FILE_LEN];	/* actual file name */
	LIST_ENTRY(mrt)		 list;
d221 1
a221 1

d224 4
d230 2
a231 4
int	mrt_dump_bgp_msg(struct mrt_config *, void *, u_int16_t, int,
	    struct peer_config *, struct bgpd_config *);
int	mrt_dump_state(struct mrt_config *, u_int16_t, u_int16_t,
	    struct peer_config *, struct bgpd_config *);
d234 3
a236 8
void	mrt_init(struct imsgbuf *, struct imsgbuf *);
void	mrt_abort(struct mrt *);
int	mrt_queue(struct mrt_head *, struct imsg *);
int	mrt_write(struct mrt *);
int	mrt_select(struct mrt_head *, struct pollfd *, struct mrt **,
	    int, int, int *);
int	mrt_handler(struct mrt_head *);
int	mrt_mergeconfig(struct mrt_head *, struct mrt_head *);
@


1.1.1.4
log
@large-scale import of OpenBSD 3.5-current source base including many fixes
note: from now, we will not be binary compatible with OpenBSD apps any
longer (due to syscall numbering differences); both an OpenBSD compat and
a conversion tool for old MirOS #7 apps will be delivered later.

The src/ tree is locked from now.
@
text
@d1 1
a1 1
/*	$OpenBSD: mrt.h,v 1.10 2004/02/25 19:48:18 claudio Exp $ */
d240 1
d242 2
a243 3
	MRT_ALL_OUT,
	MRT_UPDATE_IN,
	MRT_UPDATE_OUT
a255 2
LIST_HEAD(mrt_config_head, mrt_config);

d260 1
a260 3
	u_int32_t		 group_id;
	struct imsgbuf		*ibuf;
	LIST_ENTRY(mrt_config)	 list;			/* used in the SE */
d272 1
a272 1
	LIST_ENTRY(mrt)		 list;			/* used in the parent */
d280 1
a280 1
int	mrt_dump_bgp_msg(struct mrt_config *, void *, u_int16_t,
@


