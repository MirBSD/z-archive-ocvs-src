head	1.1;
branch	1.1.1;
access;
symbols
	tg-mergetmp-mirosx-1:1.1.1.5
	tg-mergefixes-1-branch:1.1.1.5.0.8
	tg-mergefixes-1-base:1.1.1.5
	MIROS_X:1.1.1.5.0.6
	MIROS_X_BASE:1.1.1.5
	tg-mergetmp-3:1.1.1.5
	MIRBSD_XP_MIRPPC:1.1.1.5.0.4
	MIRBSD_XP_SPARC_BASE:1.1.1.5
	MIRBSD_XP_SPARC:1.1.1.5.0.2
	cvs-200405160640:1.1.1.5
	cvs-200401271800:1.1.1.4
	cvs-200401261630:1.1.1.3
	cvs-200401021645:1.1.1.2
	cvs-200312222040:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.1
date	2003.12.22.21.20.12;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.12.22.21.20.12;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2004.01.02.18.12.25;	author tg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2004.01.26.19.05.50;	author tg;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2004.01.27.19.20.50;	author tg;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2004.05.16.07.19.22;	author tg;	state Stab;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@/*	$OpenBSD: mrt.c,v 1.8 2003/12/21 23:26:37 henning Exp $ */

/*
 * Copyright (c) 2003 Claudio Jeker <claudio@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/types.h>
#include <sys/queue.h>

#include <errno.h>
#include <fcntl.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>
#include <unistd.h>

#include "bgpd.h"
#include "rde.h"
#include "session.h"	/* needed for MSGSIZE_HEADER et al. */

#include "mrt.h"

/*
 * XXX These functions break the imsg encapsulation.
 * XXX The imsg API is way to basic, we need something like
 * XXX imsg_create(), imsg_add(), imsg_close() ...
 */

static int	mrt_dump_entry(struct mrt *, struct prefix *, u_int16_t,
		    struct peer_config *);
static void	mrt_dump_header(struct buf *, u_int16_t, u_int16_t, u_int32_t);
static int	mrt_open(struct mrtdump_config *);

#define DUMP_BYTE(x, b)							\
	do {								\
		u_char		t = (b);				\
		if (buf_add((x), &t, sizeof(t)) == -1)			\
			fatal("buf_add error", 0);			\
	} while (0)

#define DUMP_SHORT(x, s)						\
	do {								\
		u_int16_t	t;					\
		t = htons((s));						\
		if (buf_add((x), &t, sizeof(t)) == -1)			\
			fatal("buf_add error", 0);			\
	} while (0)

#define DUMP_LONG(x, l)							\
	do {								\
		u_int32_t	t;					\
		t = htonl((l));						\
		if (buf_add((x), &t, sizeof(t)) == -1)			\
			fatal("buf_add error", 0);			\
	} while (0)

#define DUMP_NLONG(x, l)						\
	do {								\
		u_int32_t	t = (l);				\
		if (buf_add((x), &t, sizeof(t)) == -1)			\
			fatal("buf_add error", 0);			\
	} while (0)

int
mrt_dump_bgp_msg(struct mrt *mrt, void *pkg, u_int16_t pkglen, int type,
    struct peer_config *peer, struct bgpd_config *bgp)
{
	struct buf	*buf;
	struct imsg_hdr	 hdr;
	int		 i, n;
	u_int16_t	 len;

	len = pkglen + MRT_BGP4MP_HEADER_SIZE + type > 0 ? MSGSIZE_HEADER : 0;

	hdr.len = len + IMSG_HEADER_SIZE + MRT_HEADER_SIZE;
	hdr.type = IMSG_MRT_MSG;
	hdr.peerid = mrt->id;
	buf = buf_open(hdr.len);
	if (buf == NULL)
		fatal("mrt_dump_bgp_msg", errno);
	if (buf_add(buf, &hdr, sizeof(hdr)) == -1)
		fatal("buf_add error", 0);

	mrt_dump_header(buf, MSG_PROTOCOL_BGP4MP, BGP4MP_MESSAGE, len);

	DUMP_SHORT(buf, bgp->as);
	DUMP_SHORT(buf, peer->remote_as);
	DUMP_SHORT(buf, /* ifindex */ 0);
	DUMP_SHORT(buf, 4);
	DUMP_NLONG(buf, peer->local_addr.sin_addr.s_addr);
	DUMP_NLONG(buf, peer->remote_addr.sin_addr.s_addr);

	/* bgp header was chopped off so glue a new one together. */
	if (type > 0) {
		for (i = 0; i < MSGSIZE_HEADER_MARKER; i++)
			DUMP_BYTE(buf, 0xff);
		DUMP_SHORT(buf, pkglen + MSGSIZE_HEADER);
		DUMP_BYTE(buf, type);
	}

	if (buf_add(buf, pkg, pkglen) == -1)
		fatal("buf_add error", 0);

	if ((n = buf_close(mrt->msgbuf, buf)) == -1)
		fatal("buf_close error", 0);

	return (n);
}

static int
mrt_dump_entry(struct mrt *mrt, struct prefix *p, u_int16_t snum,
    struct peer_config *peer)
{
	struct buf	*buf;
	void		*bptr;
	struct imsg_hdr	 hdr;
	u_int16_t	 len, attr_len;
	int		 n;

	attr_len = attr_length(&p->aspath->flags);
	len = MRT_DUMP_HEADER_SIZE + attr_len;

	hdr.len = len + IMSG_HEADER_SIZE + MRT_HEADER_SIZE;
	hdr.type = IMSG_MRT_MSG;
	hdr.peerid = mrt->id;
	buf = buf_open(hdr.len);
	if (buf == NULL)
		fatal("mrt_dump_entry", errno);
	if (buf_add(buf, &hdr, sizeof(hdr)) == -1)
		fatal("buf_add error", 0);

	mrt_dump_header(buf, MSG_TABLE_DUMP, AFI_IPv4, len);

	DUMP_SHORT(buf, 0);
	DUMP_SHORT(buf, snum);
	DUMP_NLONG(buf, p->prefix->prefix.s_addr);
	DUMP_BYTE(buf, p->prefix->prefixlen);
	DUMP_BYTE(buf, 1);
	DUMP_LONG(buf, p->lastchange);	/* originated */
	DUMP_NLONG(buf, peer->remote_addr.sin_addr.s_addr);
	DUMP_SHORT(buf, peer->remote_as);
	DUMP_SHORT(buf,  attr_len);

	if ((bptr = buf_reserve(buf, attr_len)) == NULL)
		fatal("buf_reserve error", 0);

	if (attr_dump(bptr, attr_len, &p->aspath->flags) == -1)
		fatal("attr_dump error", 0);

	if ((n = buf_close(mrt->msgbuf, buf)) == -1)
		fatal("buf_close error", 0);

	return (n);
}

static u_int16_t sequencenum = 0;

void
mrt_clear_seq(void)
{
	sequencenum = 0;
}

void
mrt_dump_upcall(struct pt_entry *pt, void *ptr)
{
	struct mrt	*mrtbuf = ptr;
	struct prefix	*p;

	/*
	 * dump all prefixes even the inactive ones. That is the way zebra
	 * dumps the table so we do the same. If only the active route should
	 * be dumped p should be set to p = pt->active.
	 */
	LIST_FOREACH(p, &pt->prefix_h, prefix_l)
		mrt_dump_entry(mrtbuf, p, sequencenum++, &p->peer->conf);
}

static void
mrt_dump_header(struct buf *buf, u_int16_t type, u_int16_t subtype,
    u_int32_t len)
{
	struct mrt_header	mrt;
	time_t			now;

	now = time(NULL);

	mrt.timestamp = htonl(now);
	mrt.type = ntohs(type);
	mrt.subtype = ntohs(subtype);
	mrt.length = htonl(len);

	if (buf_add(buf, &mrt, sizeof(mrt)) == -1)
		fatal("buf_add error", 0);
}

static int
mrt_open(struct mrtdump_config *conf)
{
	time_t	now;

	now = time(NULL);
	if (strftime(conf->file, sizeof(conf->file), conf->name,
		    localtime(&now)) == 0) {
		logit(LOG_CRIT, "mrt_open strftime failed");
		conf->msgbuf.sock = -1;
		return -1;
	}

	conf->msgbuf.sock = open(conf->file,
	    O_WRONLY|O_NONBLOCK|O_CREAT|O_TRUNC, 0644);
	if (conf->msgbuf.sock == -1)
		logit(LOG_CRIT, "mrt_open %s: %s",
		    conf->file, strerror(errno));

	return conf->msgbuf.sock;
}

int
mrt_state(struct mrtdump_config *m, enum imsg_type type,
    struct imsgbuf *buf)
{
	switch (m->state) {
	case MRT_STATE_DONE:
		/* no dump expected */
		return (0);
	case MRT_STATE_CLOSE:
		switch (type) {
		case IMSG_NONE:
			if (m->type == MRT_TABLE_DUMP)
				imsg_compose(buf, IMSG_MRT_END, m->id, NULL, 0);
			return (0);
		case IMSG_MRT_END:
			/* dump no longer valid */
			close(m->msgbuf.sock);
			LIST_REMOVE(m, list);
			free(m);
			return (0);
		default:
			break;
		}
		break;
	case MRT_STATE_REOPEN:
		switch (type) {
		case IMSG_NONE:
			if (m->type == MRT_TABLE_DUMP)
				imsg_compose(buf, IMSG_MRT_END, m->id, NULL, 0);
			return (0);
		case IMSG_MRT_END:
			if (m->msgbuf.sock != -1)
				close(m->msgbuf.sock);
			m->state = MRT_STATE_OPEN;
			if (m->type == MRT_TABLE_DUMP)
				imsg_compose(buf, IMSG_MRT_REQ, m->id, NULL, 0);
			return (0);
		default:
			break;
		}
		break;
	case MRT_STATE_OPEN:
		switch (type) {
		case IMSG_NONE:
			if (m->type == MRT_TABLE_DUMP)
				imsg_compose(buf, IMSG_MRT_REQ, m->id, NULL, 0);
			return (0);
		case IMSG_MRT_MSG:
			mrt_open(m);
			m->state = MRT_STATE_RUNNING;
			break;
		default:
			return (0);
		}
		break;
	default:
		break;
	}
	return (1);
}

int
mrt_usr1(struct mrt_config *conf, struct imsgbuf *buf)
{
	struct mrtdump_config	*m;
	time_t			 now;
	int			 interval = INT_MAX;

	now = time(NULL);
	LIST_FOREACH(m, conf, list) {
		if (m->type == MRT_TABLE_DUMP) {
			switch (m->state) {
			case MRT_STATE_REOPEN:
			case MRT_STATE_CLOSE:
				break;
			case MRT_STATE_DONE:
				m->state = MRT_STATE_OPEN;
				imsg_compose(buf, IMSG_MRT_REQ, m->id, NULL, 0);
				break;
			default:
				m->state = MRT_STATE_REOPEN;
				imsg_compose(buf, IMSG_MRT_END, m->id, NULL, 0);
				break;
			}

			m->ReopenTimer = now + m->ReopenTimerInterval;
		}
		if (m->ReopenTimer - now < interval)
			interval = m->ReopenTimer - now;
	}

	if (interval != INT_MAX)
		alarm(interval);

	return (0);
}

int
mrt_alrm(struct mrt_config *conf, struct imsgbuf *buf)
{
	struct mrtdump_config	*m;
	time_t			 now;
	int			 interval = INT_MAX;

	now = time(NULL);
	LIST_FOREACH(m, conf, list) {
		if (m->ReopenTimerInterval == 0)
			continue;
		if (m->ReopenTimer <= now) {
			switch (m->state) {
			case MRT_STATE_REOPEN:
			case MRT_STATE_CLOSE:
				break;
			case MRT_STATE_DONE:
				m->state = MRT_STATE_OPEN;
				if (m->type == MRT_TABLE_DUMP)
					imsg_compose(buf, IMSG_MRT_REQ, m->id,
					    NULL, 0);
				break;
			default:
				m->state = MRT_STATE_REOPEN;
				if (m->type == MRT_TABLE_DUMP)
					imsg_compose(buf, IMSG_MRT_END, m->id,
					    NULL, 0);
				break;
			}

			m->ReopenTimer = now + m->ReopenTimerInterval;
		}
		if (m->ReopenTimer - now < interval)
			interval = m->ReopenTimer - now;
	}

	if (interval != INT_MAX)
		alarm(interval);

	return (0);
}

static u_int32_t	 max_id = 1;

static struct mrtdump_config *
getconf(struct mrt_config *c, struct mrtdump_config *m)
{
	struct mrtdump_config	*t;
	LIST_FOREACH(t, c, list)
		if (t->type == m->type)
			return t;
	return (NULL);
}

int
mrt_mergeconfig(struct mrt_config *xconf, struct mrt_config *conf)
{
	struct mrtdump_config	*m, *xm;
	time_t			 now;
	int			 interval = INT_MAX;

	now = time(NULL);
	LIST_FOREACH(m, conf, list)
		if ((xm = getconf(xconf, m)) == NULL) {
			/* NEW */
			if ((xm = calloc(1, sizeof(struct mrtdump_config))) ==
			    NULL)
				fatal("mrt_mergeconfig", errno);
			memcpy(xm, m, sizeof(struct mrtdump_config));
			xm->id = max_id++;
			if (xm->ReopenTimerInterval != 0) {
				xm->ReopenTimer = now + xm->ReopenTimerInterval;
				interval = xm->ReopenTimerInterval < interval ?
				    xm->ReopenTimerInterval : interval;
			}
			xm->state=MRT_STATE_OPEN;
			LIST_INSERT_HEAD(xconf, xm, list);
		} else {
			/* MERGE */
			if (strlcpy(xm->name, m->name, sizeof(xm->name)) >
			    sizeof(xm->name))
				fatal("mrt_mergeconfig: strlcpy", 0);
			xm->ReopenTimerInterval = m->ReopenTimerInterval;
			if (xm->ReopenTimerInterval != 0) {
				xm->ReopenTimer = now + xm->ReopenTimerInterval;
				interval = xm->ReopenTimerInterval < interval ?
				    xm->ReopenTimerInterval : interval;
			}
			xm->state=MRT_STATE_REOPEN;
		}
	LIST_FOREACH(xm, xconf, list)
		if (getconf(conf, xm) == NULL)
			/* REMOVE */
			xm->state = MRT_STATE_CLOSE;

	/* free config */
	for (m = LIST_FIRST(conf); m != LIST_END(conf); m = xm) {
		xm = LIST_NEXT(m, list);
		free(m);
	}
	free(conf);

	if (interval != INT_MAX)
		alarm(interval);

	return (0);
}

@


1.1.1.1
log
@Time to import OpenBSD once again. Expect breakage.
@
text
@@


1.1.1.2
log
@Import OpenBSD again, for various reasons.
@
text
@d1 1
a1 1
/*	$OpenBSD: mrt.c,v 1.14 2004/01/01 21:18:13 henning Exp $ */
d50 1
a50 1
			fatalx("buf_add error");			\
d58 1
a58 1
			fatalx("buf_add error");			\
d66 1
a66 1
			fatalx("buf_add error");			\
d73 1
a73 1
			fatalx("buf_add error");			\
d92 1
a92 1
		fatal("mrt_dump_bgp_msg");
d94 1
a94 1
		fatalx("buf_add error");
d114 1
a114 1
		fatalx("buf_add error");
d116 2
a117 2
	if ((n = buf_close(mrt->msgbuf, buf)) < 0)
		fatalx("buf_close error");
d140 1
a140 1
		fatal("mrt_dump_entry");
d142 1
a142 1
		fatalx("buf_add error");
d154 1
a154 1
	DUMP_SHORT(buf, attr_len);
d157 1
a157 1
		fatalx("buf_reserve error");
d160 1
a160 1
		fatalx("attr_dump error");
d162 2
a163 2
	if ((n = buf_close(mrt->msgbuf, buf)) < 0)
		fatalx("buf_close error");
d206 1
a206 1
		fatalx("buf_add error");
d210 1
a210 1
mrt_open(struct mrtdump_config *mconf)
d215 1
a215 1
	if (strftime(mconf->file, sizeof(mconf->file), mconf->name,
d218 1
a218 1
		mconf->msgbuf.sock = -1;
d222 1
a222 1
	mconf->msgbuf.sock = open(mconf->file,
d224 1
a224 1
	if (mconf->msgbuf.sock == -1)
d226 1
a226 1
		    mconf->file, strerror(errno));
d228 1
a228 1
	return mconf->msgbuf.sock;
d286 1
a286 8
	case MRT_STATE_RUNNING:
		if (type == IMSG_MRT_END) {
			if (m->msgbuf.sock != -1)
				close(m->msgbuf.sock);
			m->msgbuf.sock = -1;
			m->state = MRT_STATE_DONE;
			return (0);
		}
d293 1
a293 1
mrt_usr1(struct mrt_config *mconf, struct imsgbuf *buf)
d300 1
a300 1
	LIST_FOREACH(m, mconf, list) {
d329 1
a329 1
mrt_alrm(struct mrt_config *mconf, struct imsgbuf *buf)
d336 1
a336 1
	LIST_FOREACH(m, mconf, list) {
d383 1
a383 1
mrt_mergeconfig(struct mrt_config *xconf, struct mrt_config *nconf)
d390 1
a390 1
	LIST_FOREACH(m, nconf, list)
d395 1
a395 1
				fatal("mrt_mergeconfig");
d409 1
a409 1
				fatalx("mrt_mergeconfig: strlcpy");
d419 1
a419 1
		if (getconf(nconf, xm) == NULL)
d424 1
a424 1
	for (m = LIST_FIRST(nconf); m != LIST_END(nconf); m = xm) {
d428 1
@


1.1.1.3
log
@Import OpenBSD as of today again (seems pretty stable, I hope)

Prominent changes: more bgpd, tcpmd5; tcpdump/isakmpd fixes
@
text
@d1 1
a1 1
/*	$OpenBSD: mrt.c,v 1.23 2004/01/22 20:34:56 henning Exp $ */
d4 1
a4 1
 * Copyright (c) 2003, 2004 Claudio Jeker <claudio@@openbsd.org>
d41 4
a44 7
static u_int16_t	mrt_attr_length(struct attr_flags *);
static int		mrt_attr_dump(void *, u_int16_t, struct attr_flags *);
static int		mrt_dump_entry(struct mrt_config *, struct prefix *,
			    u_int16_t, struct peer_config *);
static int		mrt_dump_header(struct buf *, u_int16_t, u_int16_t,
			    u_int32_t);
static int		mrt_open(struct mrt *);
d49 2
a50 5
		if (buf_add((x), &t, sizeof(t)) == -1) {		\
			log_warnx("mrt_dump1: buf_add error");		\
			buf_free(buf);					\
			return (-1);					\
		}							\
d57 2
a58 5
		if (buf_add((x), &t, sizeof(t)) == -1) {		\
			log_warnx("mrt_dump2: buf_add error");		\
			buf_free(buf);					\
			return (-1);					\
		}							\
d65 2
a66 5
		if (buf_add((x), &t, sizeof(t)) == -1) {		\
			log_warnx("mrt_dump3: buf_add error");		\
			buf_free(buf);					\
			return (-1);					\
		}							\
d72 2
a73 5
		if (buf_add((x), &t, sizeof(t)) == -1) {		\
			log_warnx("mrt_dump4: buf_add error");		\
			buf_free(buf);					\
			return (-1);					\
		}							\
d77 1
a77 1
mrt_dump_bgp_msg(struct mrt_config *mrt, void *pkg, u_int16_t pkglen, int type,
d85 1
a85 1
	len = pkglen + MRT_BGP4MP_HEADER_SIZE + (type > 0 ? MSGSIZE_HEADER : 0);
d91 4
a94 9
	if (buf == NULL) {
		log_warnx("mrt_dump_bgp_msg: buf_open error");
		return (-1);
	}
	if (buf_add(buf, &hdr, sizeof(hdr)) == -1) {
		log_warnx("mrt_dump_bgp_msg: buf_add error");
		buf_free(buf);
		return (-1);
	}
d96 1
a96 5
	if (mrt_dump_header(buf, MSG_PROTOCOL_BGP4MP, BGP4MP_MESSAGE, len) ==
	    -1) {
		log_warnx("mrt_dump_bgp_msg: buf_add error");
		return (-1);
	}
d113 2
a114 54
	if (buf_add(buf, pkg, pkglen) == -1) {
		log_warnx("mrt_dump_bgp_msg: buf_add error");
		buf_free(buf);
		return (-1);
	}

	if ((n = buf_close(mrt->msgbuf, buf)) < 0) {
		log_warnx("mrt_dump_bgp_msg: buf_close error");
		buf_free(buf);
		return (-1);
	}

	return (n);
}

int
mrt_dump_state(struct mrt_config *mrt, u_int16_t old_state, u_int16_t new_state,
    struct peer_config *peer, struct bgpd_config *bgp)
{
	struct buf	*buf;
	struct imsg_hdr	 hdr;
	int		 n;
	u_int16_t	 len;

	len = 4 + MRT_BGP4MP_HEADER_SIZE;
	hdr.len = len + IMSG_HEADER_SIZE + MRT_HEADER_SIZE;
	hdr.type = IMSG_MRT_MSG;
	hdr.peerid = mrt->id;
	buf = buf_open(hdr.len);
	if (buf == NULL) {
		log_warnx("mrt_dump_bgp_msg: buf_open error");
		return (-1);
	}
	if (buf_add(buf, &hdr, sizeof(hdr)) == -1) {
		log_warnx("mrt_dump_bgp_msg: buf_add error");
		buf_free(buf);
		return (-1);
	}

	if (mrt_dump_header(buf, MSG_PROTOCOL_BGP4MP, BGP4MP_STATE_CHANGE,
	    len) == -1) {
		log_warnx("mrt_dump_bgp_msg: buf_add error");
		return (-1);
	}

	DUMP_SHORT(buf, bgp->as);
	DUMP_SHORT(buf, peer->remote_as);
	DUMP_SHORT(buf, /* ifindex */ 0);
	DUMP_SHORT(buf, 4);
	DUMP_NLONG(buf, peer->local_addr.sin_addr.s_addr);
	DUMP_NLONG(buf, peer->remote_addr.sin_addr.s_addr);

	DUMP_SHORT(buf, old_state);
	DUMP_SHORT(buf, new_state);
d116 2
a117 5
	if ((n = buf_close(mrt->msgbuf, buf)) < 0) {
		log_warnx("mrt_dump_bgp_msg: buf_close error");
		buf_free(buf);
		return (-1);
	}
a119 74

}

static u_int16_t
mrt_attr_length(struct attr_flags *a)
{
	struct attr	*oa;
	u_int16_t	 alen, plen;

	alen = 4 /* origin */ + 7 /* nexthop */ + 7 /* lpref */;
	plen = aspath_length(a->aspath);
	alen += 2 + plen + (plen > 255 ? 2 : 1);
	if (a->med != 0)
		alen += 7;

	TAILQ_FOREACH(oa, &a->others, attr_l)
		alen += 2 + oa->len + (oa->len > 255 ? 2 : 1);

	return alen;
}

static int
mrt_attr_dump(void *p, u_int16_t len, struct attr_flags *a)
{
	struct attr	*oa;
	u_char		*buf = p;
	u_int32_t	 tmp32;
	int		 r;
	u_int16_t	 aslen, wlen = 0;

	/* origin */
	if ((r = attr_write(buf + wlen, len, ATTR_WELL_KNOWN, ATTR_ORIGIN,
	    &a->origin, 1)) == -1)
		return (-1);
	wlen += r; len -= r;

	/* aspath */
	aslen = aspath_length(a->aspath);
	if ((r = attr_write(buf + wlen, len, ATTR_WELL_KNOWN, ATTR_ASPATH,
	    aspath_dump(a->aspath), aslen)) == -1)
		return (-1);
	wlen += r; len -= r;

	/* nexthop, already network byte order */
	if ((r = attr_write(buf + wlen, len, ATTR_WELL_KNOWN, ATTR_NEXTHOP,
	    &a->nexthop, 4)) ==	-1)
		return (-1);
	wlen += r; len -= r;

	/* MED, non transitive */
	if (a->med != 0) {
		tmp32 = htonl(a->med);
		if ((r = attr_write(buf + wlen, len, ATTR_OPTIONAL, ATTR_MED,
		    &tmp32, 4)) == -1)
			return (-1);
		wlen += r; len -= r;
	}

	/* local preference, only valid for ibgp */
	tmp32 = htonl(a->lpref);
	if ((r = attr_write(buf + wlen, len, ATTR_WELL_KNOWN, ATTR_LOCALPREF,
	    &tmp32, 4)) == -1)
		return (-1);
	wlen += r; len -= r;

	/* dump all other path attributes without modification */
	TAILQ_FOREACH(oa, &a->others, attr_l) {
		if ((r = attr_write(buf + wlen, len, oa->flags, oa->type,
		    oa->data, oa->len)) == -1)
			return (-1);
		wlen += r; len -= r;
	}

	return (wlen);
d123 1
a123 1
mrt_dump_entry(struct mrt_config *mrt, struct prefix *p, u_int16_t snum,
d132 1
a132 1
	attr_len = mrt_attr_length(&p->aspath->flags);
d139 4
a142 9
	if (buf == NULL) {
		log_warnx("mrt_dump_entry: buf_open error");
		return (-1);
	}
	if (buf_add(buf, &hdr, sizeof(hdr)) == -1) {
		log_warnx("mrt_dump_entry: buf_add error");
		buf_free(buf);
		return (-1);
	}
d144 1
a144 4
	if (mrt_dump_header(buf, MSG_TABLE_DUMP, AFI_IPv4, len) == -1) {
		log_warnx("mrt_dump_bgp_msg: buf_add error");
		return (-1);
	}
d148 1
a148 1
	DUMP_NLONG(buf, p->prefix->prefix.v4.s_addr);
d150 1
a150 1
	DUMP_BYTE(buf, 1);		/* state */
d156 2
a157 5
	if ((bptr = buf_reserve(buf, attr_len)) == NULL) {
		log_warnx("mrt_dump_entry: buf_reserve error");
		buf_free(buf);
		return (-1);
	}
d159 2
a160 5
	if (mrt_attr_dump(bptr, attr_len, &p->aspath->flags) == -1) {
		log_warnx("mrt_dump_entry: mrt_attr_dump error");
		buf_free(buf);
		return (-1);
	}
d162 2
a163 5
	if ((n = buf_close(mrt->msgbuf, buf)) < 0) {
		log_warnx("mrt_dump_entry: buf_close error");
		buf_free(buf);
		return (-1);
	}
d179 2
a180 2
	struct mrt_config	*mrtbuf = ptr;
	struct prefix		*p;
d191 1
a191 1
static int
d195 1
d200 4
a203 9
	DUMP_LONG(buf, now);
	DUMP_SHORT(buf, type);
	DUMP_SHORT(buf, subtype);
	DUMP_LONG(buf, len);

	return (0);
}

static struct imsgbuf	*mrt_imsgbuf[2];
d205 2
a206 5
void
mrt_init(struct imsgbuf *rde, struct imsgbuf *se)
{
	mrt_imsgbuf[0] = rde;
	mrt_imsgbuf[1] = se;
d210 1
a210 1
mrt_open(struct mrt *mrt)
d215 1
a215 1
	if (strftime(mrt->file, sizeof(mrt->file), mrt->name,
d217 3
a219 3
		log_warnx("mrt_open: strftime conversion failed");
		mrt->msgbuf.sock = -1;
		return (0);
d222 1
a222 1
	mrt->msgbuf.sock = open(mrt->file,
d224 3
a226 24
	if (mrt->msgbuf.sock == -1) {
		log_warnx("mrt_open %s: %s",
		    mrt->file, strerror(errno));
		return (0);
	}
	return (1);
}

static int
mrt_close(struct mrt *mrt)
{
	/*
	 * close the mrt filedescriptor but first ensure that the last
	 * mrt message was written correctly. If not mrt_write needs to do
	 * that the next time called.
	 * To ensure this we need to fiddle around with internal msgbuf stuff.
	 */
	if (msgbuf_unbounded(&mrt->msgbuf))
		return (0);

	if (mrt->msgbuf.sock != -1) {
		close(mrt->msgbuf.sock);
		mrt->msgbuf.sock = -1;
	}
d228 1
a228 19
	return (1);
}

void
mrt_abort(struct mrt *mrt)
{
	/*
	 * something failed horribly. Stop all dumping and go back to start
	 * position. Retry after MRT_MIN_RETRY or ReopenTimerInterval. Which-
	 * ever is bigger.
	 */
	msgbuf_clear(&mrt->msgbuf);
	mrt_close(mrt);
	mrt->state = MRT_STATE_STOPPED;

	if (MRT_MIN_RETRY > mrt->ReopenTimerInterval)
		mrt->ReopenTimer = MRT_MIN_RETRY + time(NULL);
	else
		mrt->ReopenTimer = mrt->ReopenTimerInterval + time(NULL);
d232 2
a233 1
mrt_queue(struct mrt_head *mrtc, struct imsg *imsg)
d235 9
a243 13
	struct buf	*wbuf;
	struct mrt	*m;
	ssize_t		 len;
	int		 n;

	if (imsg->hdr.type != IMSG_MRT_MSG && imsg->hdr.type != IMSG_MRT_END)
		return (-1);

	LIST_FOREACH(m, mrtc, list) {
		if (m->conf.id != imsg->hdr.peerid)
			continue;
		if (m->state != MRT_STATE_RUNNING &&
		    m->state != MRT_STATE_REOPEN)
d245 5
a249 3

		if (imsg->hdr.type == IMSG_MRT_END) {
			m->state = MRT_STATE_CLOSE;
d251 2
d254 16
a269 8

		len = imsg->hdr.len - IMSG_HEADER_SIZE;
		wbuf = buf_open(len);
		if (wbuf == NULL)
			return (-1);
		if (buf_add(wbuf, imsg->data, len) == -1) {
			buf_free(wbuf);
			return (-1);
d271 13
a283 3
		if ((n = buf_close(&m->msgbuf, wbuf)) < 0) {
			buf_free(wbuf);
			return (-1);
a284 19
		return (n);
	}
	return (0);
}

int
mrt_write(struct mrt *mrt)
{
	int	r;

	if (mrt->state == MRT_STATE_REOPEN ||
	    mrt->state == MRT_STATE_REMOVE)
		r = msgbuf_writebound(&mrt->msgbuf);
	else
		r = msgbuf_write(&mrt->msgbuf);

	switch (r) {
	case 1:
		/* only msgbuf_writebound returns 1 */
d286 6
a291 43
	case 0:
		if (mrt->state == MRT_STATE_CLOSE && mrt->msgbuf.queued == 0) {
			if (mrt_close(mrt) != 1) {
				log_warnx("mrt_write: mrt_close failed");
				mrt_abort(mrt);
				return (0);
			}
			mrt->state = MRT_STATE_STOPPED;
		}
		return (0);
	case -1:
		log_warnx("mrt_write: msgbuf_write: %s",
		    strerror(errno));
		mrt_abort(mrt);
		return (0);
	case -2:
		log_warnx("mrt_write: msgbuf_write: %s",
		    "connection closed");
		mrt_abort(mrt);
		return (0);
	default:
		fatalx("mrt_write: unexpected retval from msgbuf_write");
	}

	if (mrt_close(mrt) != 1) {
		log_warnx("mrt_write: mrt_close failed");
		mrt_abort(mrt);
		return (0);
	}

	switch (mrt->state) {
	case MRT_STATE_REMOVE:
		/*
		 * Remove request: free all left buffers and
		 * remove the descriptor.
		 */
		msgbuf_clear(&mrt->msgbuf);
		LIST_REMOVE(mrt, list);
		free(mrt);
		return (0);
	case MRT_STATE_REOPEN:
		if (mrt_open(mrt) == 0) {
			mrt_abort(mrt);
a292 5
		} else {
			if (mrt->ReopenTimerInterval != 0)
				mrt->ReopenTimer = time(NULL) +
				    mrt->ReopenTimerInterval;
			mrt->state = MRT_STATE_RUNNING;
a294 2
	default:
		break;
d300 1
a300 2
mrt_select(struct mrt_head *mc, struct pollfd *pfd, struct mrt **mrt,
    int start, int size, int *timeout)
d302 3
a304 3
	struct mrt	*m, *xm;
	time_t		 now;
	int		 t;
d307 5
a311 20
	for (m = LIST_FIRST(mc); m != LIST_END(mc); m = xm) {
		xm = LIST_NEXT(m, list);
		if (m->state == MRT_STATE_TOREMOVE) {
			imsg_compose(m->ibuf, IMSG_MRT_END, 0,
					&m->conf, sizeof(m->conf));
			if (mrt_close(m) == 0) {
				m->state = MRT_STATE_REMOVE;
				m->ReopenTimer = 0;
			} else {
				msgbuf_clear(&m->msgbuf);
				LIST_REMOVE(m, list);
				free(m);
				continue;
			}
		}
		if (m->state == MRT_STATE_OPEN) {
			switch (m->conf.type) {
			case MRT_TABLE_DUMP:
			case MRT_FILTERED_IN:
				m->ibuf = mrt_imsgbuf[0];
d313 3
a315 2
			case MRT_ALL_IN:
				m->ibuf = mrt_imsgbuf[1];
a317 17
				continue;
			}
			if (mrt_open(m) == 0) {
				mrt_abort(m);
				t = m->ReopenTimer - now;
				if (*timeout > t)
					*timeout = t;
				continue;
			}
			if (m->ReopenTimerInterval != 0)
				m->ReopenTimer = now + m->ReopenTimerInterval;
			m->state = MRT_STATE_RUNNING;
			imsg_compose(m->ibuf, IMSG_MRT_REQ, 0,
					&m->conf, sizeof(m->conf));
		}
		if (m->state == MRT_STATE_REOPEN) {
			if (mrt_close(m) == 0) {
d319 2
a320 58
				continue;
			}
			if (mrt_open(m) == 0) {
				mrt_abort(m);
				t = m->ReopenTimer - now;
				if (*timeout > t)
					*timeout = t;
				continue;
			}
			if (m->ReopenTimerInterval != 0)
				m->ReopenTimer = now + m->ReopenTimerInterval;
			m->state = MRT_STATE_RUNNING;
		}
		if (m->ReopenTimer != 0) {
			t = m->ReopenTimer - now;
			if (t <= 0 && (m->state == MRT_STATE_RUNNING ||
			    m->state == MRT_STATE_STOPPED)) {
				if (m->state == MRT_STATE_RUNNING) {
					/* reopen file */
					if (mrt_close(m) == 0) {
						m->state = MRT_STATE_REOPEN;
						continue;
					}
				}
				if (mrt_open(m) == 0) {
					mrt_abort(m);
					t = m->ReopenTimer - now;
					if (*timeout > t)
						*timeout = t;
					continue;
				}
				if (m->conf.type == MRT_TABLE_DUMP &&
				    m->state == MRT_STATE_STOPPED) {
					imsg_compose(mrt_imsgbuf[0],
					    IMSG_MRT_REQ, 0,
					    &m->conf, sizeof(m->conf));
				}

				m->state = MRT_STATE_RUNNING;
				if (m->ReopenTimerInterval != 0) {
					m->ReopenTimer = now +
					    m->ReopenTimerInterval;
					if (*timeout > m->ReopenTimerInterval)
						*timeout = t;
				}
			}
		}
		if (m->msgbuf.queued > 0) {
			if (m->msgbuf.sock == -1 ||
			    m->state == MRT_STATE_STOPPED) {
				log_warnx("mrt_select: orphaned buffer");
				mrt_abort(m);
				continue;
			}
			if (start < size) {
				pfd[start].fd = m->msgbuf.sock;
				pfd[start].events = POLLOUT;
				mrt[start++] = m;
d322 2
d325 2
d328 5
a332 1
	return (start);
d336 1
a336 1
mrt_handler(struct mrt_head *mrt)
d338 3
a340 2
	struct mrt	*m;
	time_t		 now;
d343 20
a362 12
	LIST_FOREACH(m, mrt, list) {
		if (m->state == MRT_STATE_RUNNING)
			m->state = MRT_STATE_REOPEN;
		if (m->conf.type == MRT_TABLE_DUMP) {
			if (m->state == MRT_STATE_STOPPED) {
				if (mrt_open(m) == 0) {
					mrt_abort(m);
					break;
				}
				imsg_compose(mrt_imsgbuf[0], IMSG_MRT_REQ, 0,
				    &m->conf, sizeof(m->conf));
				m->state = MRT_STATE_RUNNING;
d364 2
d367 2
a368 2
		if (m->ReopenTimerInterval != 0)
			m->ReopenTimer = now + m->ReopenTimerInterval;
d370 4
d379 2
a380 2
static struct mrt *
getconf(struct mrt_head *c, struct mrt *m)
d382 3
a384 10
	struct mrt	*t;

	LIST_FOREACH(t, c, list) {
		if (t->conf.type != m->conf.type)
			continue;
		if (t->conf.type == MRT_TABLE_DUMP ||
		    t->conf.type == MRT_ALL_IN ||
		    t->conf.type == MRT_FILTERED_IN)
			return t;
		if (t->conf.peer_id == m->conf.peer_id)
a385 1
	}
d390 1
a390 1
mrt_mergeconfig(struct mrt_head *xconf, struct mrt_head *nconf)
d392 3
a394 1
	struct mrt	*m, *xm;
d396 1
d400 1
a400 1
			if ((xm = calloc(1, sizeof(struct mrt))) ==
d403 8
a410 4
			memcpy(xm, m, sizeof(struct mrt));
			msgbuf_init(&xm->msgbuf);
			xm->conf.id = max_id++;
			xm->state = MRT_STATE_OPEN;
d414 1
a414 1
			if (strlcpy(xm->name, m->name, sizeof(xm->name)) >=
d418 6
a423 1
			xm->state = MRT_STATE_REOPEN;
a424 1

d428 1
a428 1
			xm->state = MRT_STATE_TOREMOVE;
d435 3
@


1.1.1.4
log
@using: ========= cvsim-base-obsd _MirBSD: cvsim-src-openbsd,v 1.3 2004/01/27 17:17:54 tg Exp $ =========

In contrast to what people might believe now,
I am not "specially" attracted by CVS Imports
(neither am I a version number hunter).
@
text
@d1 1
a1 1
/*	$OpenBSD: mrt.c,v 1.24 2004/01/27 16:49:53 henning Exp $ */
d126 2
a127 2
	DUMP_NLONG(buf, peer->local_addr.v4.s_addr);
	DUMP_NLONG(buf, peer->remote_addr.v4.s_addr);
d186 2
a187 2
	DUMP_NLONG(buf, peer->local_addr.v4.s_addr);
	DUMP_NLONG(buf, peer->remote_addr.v4.s_addr);
d313 1
a313 1
	DUMP_NLONG(buf, peer->remote_addr.v4.s_addr);
@


1.1.1.5
log
@large-scale import of OpenBSD 3.5-current source base including many fixes
note: from now, we will not be binary compatible with OpenBSD apps any
longer (due to syscall numbering differences); both an OpenBSD compat and
a conversion tool for old MirOS #7 apps will be delivered later.

The src/ tree is locked from now.
@
text
@d1 1
a1 1
/*	$OpenBSD: mrt.c,v 1.30 2004/04/29 19:56:04 deraadt Exp $ */
d31 1
a31 1
#include "session.h"
d35 6
d52 3
a54 2
		if (imsg_add((x), &t, sizeof(t)) == -1) {		\
			log_warnx("mrt_dump1: imsg_add error");		\
d63 3
a65 2
		if (imsg_add((x), &t, sizeof(t)) == -1) {		\
			log_warnx("mrt_dump2: imsg_add error");		\
d74 3
a76 2
		if (imsg_add((x), &t, sizeof(t)) == -1) {		\
			log_warnx("mrt_dump3: imsg_add error");		\
d84 3
a86 2
		if (imsg_add((x), &t, sizeof(t)) == -1) {		\
			log_warnx("mrt_dump4: imsg_add error");		\
d92 1
a92 1
mrt_dump_bgp_msg(struct mrt_config *mrt, void *pkg, u_int16_t pkglen,
d96 2
d100 1
a100 1
	len = pkglen + MRT_BGP4MP_HEADER_SIZE;
d102 11
a112 3
	if ((buf = imsg_create(mrt->ibuf, IMSG_MRT_MSG, mrt->id,
	    len + MRT_HEADER_SIZE)) == NULL) {
		log_warnx("mrt_dump_bgp_msg: imsg_open error");
d116 3
a118 3
	if (mrt_dump_header(buf, MSG_PROTOCOL_BGP4MP, BGP4MP_MESSAGE,
	    len) == -1) {
		log_warnx("mrt_dump_bgp_msg: imsg_add error");
d129 11
a139 2
	if (imsg_add(buf, pkg, pkglen) == -1) {
		log_warnx("mrt_dump_bgp_msg: imsg_add error");
d143 3
a145 2
	if ((imsg_close(mrt->ibuf, buf)) == -1) {
		log_warnx("mrt_dump_bgp_msg: imsg_close error");
d149 1
a149 1
	return (len + MRT_HEADER_SIZE);
d157 2
d162 11
a172 4

	if ((buf = imsg_create(mrt->ibuf, IMSG_MRT_MSG, mrt->id,
	    len + MRT_HEADER_SIZE)) == NULL) {
		log_warnx("mrt_dump_bgp_state: imsg_open error");
d178 1
a178 1
		log_warnx("mrt_dump_bgp_state: imsg_add error");
d192 3
a194 2
	if ((imsg_close(mrt->ibuf, buf)) == -1) {
		log_warnx("mrt_dump_bgp_state: imsg_close error");
d198 2
a199 1
	return (len + MRT_HEADER_SIZE);
d281 1
d283 1
d288 11
a298 3
	if ((buf = imsg_create(mrt->ibuf, IMSG_MRT_MSG, mrt->id,
	    len + MRT_HEADER_SIZE)) == NULL) {
		log_warnx("mrt_dump_entry: imsg_open error");
d329 3
a331 2
	if ((imsg_close(mrt->ibuf, buf)) == -1) {
		log_warnx("mrt_dump_bgp_state: imsg_close error");
d335 1
a335 1
	return (len + MRT_HEADER_SIZE);
d358 1
a358 2
		mrt_dump_entry(mrtbuf, p, sequencenum++,
		    &p->aspath->peer->conf);
d395 1
a395 1
		mrt->msgbuf.fd = -1;
d399 1
a399 1
	mrt->msgbuf.fd = open(mrt->file,
d401 1
a401 1
	if (mrt->msgbuf.fd == -1) {
d421 3
a423 3
	if (mrt->msgbuf.fd != -1) {
		close(mrt->msgbuf.fd);
		mrt->msgbuf.fd = -1;
d568 1
a568 1
	for (m = LIST_FIRST(mc); m != NULL; m = xm) {
d572 1
a572 1
			    &m->conf, sizeof(m->conf));
d586 1
a589 3
			case MRT_ALL_OUT:
			case MRT_UPDATE_IN:
			case MRT_UPDATE_OUT:
d606 1
a606 1
			    &m->conf, sizeof(m->conf));
d659 1
a659 1
			if (m->msgbuf.fd == -1 ||
d666 1
a666 1
				pfd[start].fd = m->msgbuf.fd;
d712 3
a714 1
		if (t->conf.type == MRT_TABLE_DUMP)
d716 1
a716 2
		if (t->conf.peer_id == m->conf.peer_id &&
		    t->conf.group_id == m->conf.group_id)
d730 2
a731 1
			if ((xm = calloc(1, sizeof(struct mrt))) == NULL)
d753 2
a754 2
	while ((m = LIST_FIRST(nconf)) != NULL) {
		LIST_REMOVE(m, list);
@


