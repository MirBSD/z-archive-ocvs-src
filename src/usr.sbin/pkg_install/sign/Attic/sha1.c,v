head	1.4;
access;
symbols
	MIRBSD_7quater:1.2
	cvs-200405160640:1.1.1.4
	MIRBSD_7:1.2.0.2
	cvs-200401271800:1.1.1.4
	cvs-200401261630:1.1.1.4
	cvs-200401021645:1.1.1.4
	MIRBSD_7_ALPHA:1.1.1.4.0.6
	cvs-200312222040:1.1.1.4
	MIRBSD_7ter:1.1.1.4
	MIRBSD_7_DEV:1.1.1.4.0.2
	cvs-200310020700:1.1.1.4
	cvs-200309271030:1.1.1.4
	cvs-200309251530:1.1.1.4
	cvs-200308302005:1.1.1.4
	cvs-200308221505:1.1.1.4
	cvs-200308171200:1.1.1.4
	ctm-3496:1.1.1.3
	ctm-3449:1.1.1.3
	ctm-3437:1.1.1.3
	cvs-200307191805:1.1.1.3
	ctm-3425:1.1.1.3
	cvs-200307091500:1.1.1.3
	ctm-3389:1.1.1.3
	cvs-200306291430:1.1.1.3
	ctm-3341:1.1.1.3
	MIRBSD_5:1.1.1.3
	cvs-200306082100:1.1.1.3
	ctm-3316:1.1.1.3
	ctm-3272:1.1.1.2
	ctm-3264:1.1.1.2
	cvs-200305071630:1.1.1.2
	MIRBSD_4:1.1.1.2
	ctm-3203:1.1.1.2
	cvs-20030410-1130:1.1.1.2
	ctm-3155:1.1.1.1
	ctm-3132:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.4
date	2004.10.10.21.12.05;	author tg;	state dead;
branches;
next	1.3;

1.3
date	2004.07.21.10.24.40;	author tg;	state Stab;
branches;
next	1.2;

1.2
date	2004.02.28.15.09.32;	author tg;	state Exp;
branches
	1.2.2.1;
next	1.1;

1.1
date	2003.03.22.17.55.49;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.03.22.17.55.49;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2003.04.10.15.01.04;	author tg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2003.06.05.17.48.55;	author tg;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2003.08.17.15.01.10;	author tg;	state Exp;
branches;
next	;

1.2.2.1
date	2004.12.25.16.43.52;	author tg;	state dead;
branches;
next	;


desc
@@


1.4
log
@package tools in base is dead

agreed bsiegert@@
@
text
@/* $OpenBSD: sha1.c,v 1.6 2003/08/16 17:31:56 deraadt Exp $ */
/*-
 * Copyright (c) 1999 Marc Espie.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE OPENBSD PROJECT AND CONTRIBUTORS
 * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OPENBSD
 * PROJECT OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#include <sys/types.h>
#include <sys/wait.h>
#include <stdlib.h>
#include <stdio.h>
#include <assert.h>
#include <sha1.h>
#include "stand.h"
#include "gzip.h"
#include "extern.h"
#include "lib.h"

__RCSID("$MirBSD: src/usr.sbin/pkg_install/sign/sha1.c,v 1.3 2004/07/21 10:24:40 tg Stab $");

/* private context for sha1 signature checker */
struct sha1_checker {
	SHA1_CTX context;
	const char *id;
	const char *filename;
};

#define SHA1_TEMPLATE "SHA1 (%s) = "
#define BUFSIZE	(MAXID+sizeof(SHA1_TEMPLATE)+2*SHA1_DIGESTSIZE+1)

/* Finalize SHA1 checksum for our sha1_context into result
	(size at least bufsize).  Returns the length of the checksum
   marker, e.g.,   SHA1 (id) = xxxxxxxxx
                               ^here
	Return 0 for errors.
 */
size_t
sha1_build_checksum(result, n, bufsize)
	char *result;
	struct sha1_checker *n;
	size_t bufsize;
{
	size_t length;

	snprintf(result, bufsize, "SHA1 (%s) = ", n->id);
	length = strlen(result);
	SHA1End(&n->context, result + length);
	strlcat(result, "\n", bufsize);
	free(n);
	return length;
}

void *
new_sha1_checker(h, sign, userid, envp, filename)
	struct mygzip_header *h;
	struct signature *sign;
	const char *userid;
	char *envp[];
	/*@@observer@@*/const char *filename;
{
	struct sha1_checker *n;

	assert(sign->type == TAG_SHA1);
	/* make sure data conforms to what we can handle */
	if (sign->length > MAXID || sign->data[sign->length-1] != '\0') {
		pwarnx("Corrupted SHA1 header in %s", filename);
		return 0;
	}

	n = malloc(sizeof *n);
	if (n == NULL) {
		pwarnx("Can't allocate sha1_checker");
		return NULL;
	}
	SHA1Init(&n->context);
	n->id = sign->data;
	n->filename = filename;

	/* copy header, as this is a checksum, we don't strip our own marker */
	if (gzip_copy_header(h, sign, sha1_add, n) == 0) {
		pwarnx("Unexpected header in %s", filename);
		free(n);
		return 0;
	}
	return n;
}

void
sha1_add(arg, buffer, length)
	void *arg;
	const char *buffer;
	size_t length;
{
	struct sha1_checker *n = arg;
	SHA1Update(&n->context, buffer, length);
}

int
sha1_sign_ok(arg)
	void *arg;
{
	struct sha1_checker *n = arg;
	char buffer[BUFSIZE];
	char scan[BUFSIZE];
	size_t length;
	FILE *f;
	int tag_found;

	length = sha1_build_checksum(buffer, n, sizeof(buffer));
	f= fopen(SHA1_DB_NAME, "r");
	tag_found = 0;

	if (f == NULL) {
		warn("Can't access checksum file %s", SHA1_DB_NAME);
		return PKG_BADSIG;
	}
	while (fgets(scan, sizeof(scan), f) != NULL) {
		if (strcmp(scan, buffer) == 0) {
			fprintf(stderr, "Checksum ok\n");
			return PKG_GOODSIG;
		}
		if (strncmp(scan, buffer, length) == 0)
			tag_found = 1;
	}

	if (tag_found) {
		pwarnx("Checksum incorrect for %s (%s)", n->filename, n->id);
		return PKG_BADSIG;
	} else {
		pwarnx("No checksum found for %s (%s)", n->filename, n->id);
		return PKG_SIGUNKNOWN;
	}
}

int
retrieve_sha1_marker(filename, sign, userid)
	const char *filename;
	struct signature **sign;
	const char *userid;
{
	struct signature *n;
	struct mygzip_header h;
	FILE *f;
	char buffer[1024];
	char result[BUFSIZE];
	ssize_t length;
	struct sha1_checker *checker;
	struct signature *old;

	*sign = NULL;
	if (userid == NULL)
		return 0;

	n = malloc(sizeof *n);
	if (n == NULL)
		return 0;
	n->data = (char *)userid;
	n->length = strlen(n->data)+1;
	n->type = TAG_SHA1;
	memcpy(n->tag, sha1tag, sizeof sha1tag);
	sign_fill_tag(n);

	f = fopen(filename, "r");
	if (f == NULL) {
		free(n);
		return 0;
	}
	if (gzip_read_header(f, &h, sign) == GZIP_NOT_GZIP) {
		pwarnx("File %s is not a gzip file", filename);
		fclose(f);
		free(n);
		return 0;
	}
	n->next = *sign;
	*sign = n;

	checker = new_sha1_checker(&h, *sign, NULL, NULL, filename);
	while ((length = fread(buffer, 1, sizeof buffer, f)) > 0)
		sha1_add(checker, buffer, length);
	if (fclose(f) != 0 || length == -1) {
		warn("Problem checksumming %s", filename);
		*sign = n->next;
		free(n);
		return 0;
	}

	(void)sha1_build_checksum(result, checker, sizeof(result));
	fputs(result, stderr);
	return 1;
}
@


1.3
log
@sync with mpsup module
@
text
@d38 1
a38 1
__RCSID("$MirBSD: mpsup/pkgtools/sign/sha1.c,v 1.2 2004/06/25 11:48:41 tg Exp $");
@


1.2
log
@MirOSify:
* fix and unify Makefiles
* move preprocessor options from CFLAGS to CPPFLAGS
* make pkg_sign build, at least
* nuke whitespace at end of line and end of file
* use new-style MirOS RCS IDs
* nuke some junk
@
text
@d36 3
@


1.2.2.1
log
@remove old MirPorts tools from #7quinquies-to-be
agreed bsiegert@@
@
text
@@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/* $OpenBSD: sha1.c,v 1.3 2001/11/26 05:04:33 deraadt Exp $ */
a12 4
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by Marc Espie for the OpenBSD
 * Project.
d14 3
a16 3
 * THIS SOFTWARE IS PROVIDED BY THE OPENBSD PROJECT AND CONTRIBUTORS 
 * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT 
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR 
d18 6
a23 6
 * PROJECT OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, 
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT 
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, 
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY 
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE 
d47 2
a48 2
/* Finalize SHA1 checksum for our sha1_context into result 
	(size at least BUFSIZE).  Returns the length of the checksum
d50 1
a50 1
                               ^here 
d53 2
a54 2
size_t 
sha1_build_checksum(result, n)
d57 1
d61 1
a61 1
	sprintf(result, "SHA1 (%s) = ", n->id);
d64 2
a65 2
	strcat(result, "\n");
	free(n);	
d73 1
a73 1
	const char *userid;	
d103 2
a104 2
	
void 
d125 1
a125 1
	length = sha1_build_checksum(buffer, n);
d151 1
a151 1
int 
d171 1
a171 1
	if (n == NULL) 
d185 1
a185 1
		pwarnx("File %s is not a gzip file\n", filename);
d203 1
a203 1
	(void)sha1_build_checksum(result, checker);
a206 1

@


1.1.1.1
log
@Import OpenBSD 3.3 source repository from CTM 3132 the first time
This opens an OpenBSD-mirabile (aka MirBSD) repository.

### MirBSD is:
# Copyright (c) 1982-2003 by Thorsten "mirabile" Glaser <x86@@ePost.de>
# Copyright © 1968-2003  The authors of And contributors to UNIX®, the
#       C Language, BSD/Berkeley Unix; 386BSD, NetBSD 1.1 and OpenBSD.
#
# Anyone who obtained a copy of this work is hereby permitted to freely use,
# distribute, modify, merge, sublicence, give away or sell it as long as the
# authors are given due credit and the following notice is retained:
#
# This work is provided "as is", with no explicit or implicit warranty what-
# soever. Use it only at your own risk. In no event may an author or contri-
# butor be held liable for any damage, directly or indirectly, that origina-
# ted through or is caused by creation or modification of this work.

MirBSD is my private tree. MirBSD does not differ very much from OpenBSD
and intentionally tracks OpenBSD. That's why it _is_ OpenBSD, just not the
official one. It's like with DarrenBSD.

At time of this writing, no advertising for MirBSD must be done,
because the advertising clause has not yet been sorted out.

http://templeofhate.com/tglaser/MirBSD/index.php
@
text
@@


1.1.1.2
log
@Import OpenBSD cvs as of roughly 11:11 UTC today,
or CTM delta 3188/3189/3190.
@
text
@d1 1
a1 1
/* $OpenBSD: sha1.c,v 1.4 2003/04/05 10:42:19 avsm Exp $ */
d52 1
a52 1
	(size at least bufsize).  Returns the length of the checksum
d58 1
a58 1
sha1_build_checksum(result, n, bufsize)
a60 1
	size_t bufsize;
d64 1
a64 1
	snprintf(result, bufsize, "SHA1 (%s) = ", n->id);
d67 1
a67 1
	strlcat(result, "\n", bufsize);
d128 1
a128 1
	length = sha1_build_checksum(buffer, n, sizeof(buffer));
d206 1
a206 1
	(void)sha1_build_checksum(result, checker, sizeof(result));
@


1.1.1.3
log
@Import latest OpenBSD CVS tree by CTM in order
to sync the base system and ports tree with Them.

This includes the recent licence changes as well - by
importing the changed base and re-applying the diffs
(with cvs up -j -j) they are inherited, and we're not
bound to the removed clauses any longer.
@
text
@d1 1
a1 1
/* $OpenBSD: sha1.c,v 1.5 2003/06/04 04:29:03 deraadt Exp $ */
d13 4
@


1.1.1.4
log
@Import OpenBSD source tree from CVS (anoncvs canada)
of roughly 12:00 UTC today. Bumps us to OpenBSD 3.4
and makes source/ports in sync. Hopefully.
@
text
@d1 1
a1 1
/* $OpenBSD: sha1.c,v 1.6 2003/08/16 17:31:56 deraadt Exp $ */
d185 1
a185 1
		pwarnx("File %s is not a gzip file", filename);
@


