head	1.4;
access;
symbols
	MIRBSD_7quater:1.2
	cvs-200405160640:1.1.1.4
	MIRBSD_7:1.2.0.2
	cvs-200401271800:1.1.1.4
	cvs-200401261630:1.1.1.4
	cvs-200401021645:1.1.1.4
	MIRBSD_7_ALPHA:1.1.1.4.0.6
	cvs-200312222040:1.1.1.4
	MIRBSD_7ter:1.1.1.4
	MIRBSD_7_DEV:1.1.1.4.0.2
	cvs-200310020700:1.1.1.4
	cvs-200309271030:1.1.1.4
	cvs-200309251530:1.1.1.4
	cvs-200308302005:1.1.1.4
	cvs-200308221505:1.1.1.4
	cvs-200308171200:1.1.1.4
	ctm-3496:1.1.1.3
	ctm-3449:1.1.1.3
	ctm-3437:1.1.1.3
	cvs-200307191805:1.1.1.3
	ctm-3425:1.1.1.3
	cvs-200307091500:1.1.1.3
	ctm-3389:1.1.1.3
	cvs-200306291430:1.1.1.3
	ctm-3341:1.1.1.3
	MIRBSD_5:1.1.1.3
	cvs-200306082100:1.1.1.3
	ctm-3316:1.1.1.3
	ctm-3272:1.1.1.2
	ctm-3264:1.1.1.2
	cvs-200305071630:1.1.1.2
	MIRBSD_4:1.1.1.2
	ctm-3203:1.1.1.2
	cvs-20030410-1130:1.1.1.1
	ctm-3155:1.1.1.1
	ctm-3132:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.4
date	2004.10.10.21.12.05;	author tg;	state dead;
branches;
next	1.3;

1.3
date	2004.07.21.10.24.40;	author tg;	state Stab;
branches;
next	1.2;

1.2
date	2004.02.28.15.09.32;	author tg;	state Exp;
branches
	1.2.2.1;
next	1.1;

1.1
date	2003.03.22.17.55.49;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.03.22.17.55.49;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2003.04.15.17.51.44;	author tg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2003.06.05.17.48.55;	author tg;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2003.08.17.15.01.10;	author tg;	state Exp;
branches;
next	;

1.2.2.1
date	2004.12.25.16.43.52;	author tg;	state dead;
branches;
next	;


desc
@@


1.4
log
@package tools in base is dead

agreed bsiegert@@
@
text
@/* $OpenBSD: pgp_sign.c,v 1.5 2003/08/16 17:31:56 deraadt Exp $ */
/*-
 * Copyright (c) 1999 Marc Espie.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE OPENBSD PROJECT AND CONTRIBUTORS
 * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OPENBSD
 * PROJECT OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
#include <sys/types.h>
#include <stdlib.h>
#include <unistd.h>
#include <stdio.h>
#include <errno.h>
#include <signal.h>
#include <pwd.h>
#include <assert.h>
#include "stand.h"
#include "pgp.h"
#include "gzip.h"
#include "extern.h"
#include "lib.h"

__RCSID("$MirBSD: src/usr.sbin/pkg_install/sign/pgp_sign.c,v 1.3 2004/07/21 10:24:40 tg Stab $");

static void
pgpsign(fdin, fdout, userid, envp)
	int fdin, fdout;
	const char *userid;
	char *envp[];
{
	pchar argv[10];
	int argc = 0;

	argv[argc++] = PGP;
	argv[argc++] = "+batchmode";
	argv[argc++] = "+compress=off";
	argv[argc++] = "-f";
	argv[argc++] = "-s";

	if (userid) {
		argv[argc++] = "-u";
		argv[argc++] = (char *)userid;
	}
	argv[argc++] = NULL;
	assert(argc <= sizeof argv / sizeof(pchar));

	if (dup2(fdin, fileno(stdin)) == -1 ||
	    dup2(fdout, fileno(stdout)) == -1 ||
	    execve(PGP, argv, envp)  == -1)
		exit(errno);
}

static struct signature *
new_pgpsignature(old)
	struct signature *old;
{
	struct signature *n;

	n = malloc(sizeof(*n));
	if (n != NULL) {
		n->data = malloc(MAXPGPSIGNSIZE);
		if (n->data == NULL) {
			free(n);
			return NULL;
		}
		n->length = 0;
		n->next = old;
		n->type = TAG_PGP;
		memcpy(n->tag, pgptag, sizeof pgptag);
	}
	return n;
}

int
retrieve_pgp_signature(filename, sign, userid, envp)
	const char *filename;
	struct signature **sign;
	const char *userid;
	char *envp[];
{
	int topgp[2], frompgp[2];
	pid_t pgpid;
	struct mygzip_header h;
	int success;

	FILE *orig, *dest, *signin;
	struct signature *old;

	orig = fopen(filename, "r");
	if (orig == NULL)
		return 0;
	if (gzip_read_header(orig, &h, &old) == GZIP_NOT_GZIP) {
		pwarnx("File %s is not a gzip file", filename);
		fclose(orig);
		return 0;
	}

	if (pipe(topgp) == -1) {
		fclose(orig);
		return 0;
	}
	if (pipe(frompgp) == -1) {
		fclose(orig);
		(void)close(topgp[0]);
		(void)close(topgp[1]);
		return 0;
	}
	switch(pgpid = fork()) {
	case 0:
		(void)close(topgp[1]);
		(void)close(frompgp[0]);
		pgpsign(topgp[0], frompgp[1], userid, envp);
		/*NOT REACHED */
	case -1:
		(void)close(topgp[0]);
		(void)close(topgp[1]);
		(void)close(frompgp[0]);
		(void)close(frompgp[1]);
		fclose(orig);
		return 0;
	default:
		(void)close(topgp[0]);
		(void)close(frompgp[1]);
	}

	dest = fdopen(topgp[1], "w");
	if (dest == NULL) {
		(void)close(topgp[1]);
		(void)close(frompgp[0]);
		(void)reap(pgpid);
		return 0;
	}

	success = 1;
	if (gzip_write_header(dest, &h, old) == 0)
		success = 0;
	else {
		int c;

		while ((c = fgetc(orig)) != EOF && fputc(c, dest) != EOF)
			;
		if (ferror(dest))
			success = 0;
	}
	if (fclose(dest) != 0)
		success = 0;

	if (fclose(orig) != 0)
		success = 0;

	signin = fdopen(frompgp[0], "r");
	if (signin == NULL) {
		(void)close(frompgp[0]);
	} else {
		enum { NONE, FIRST, DONE, COPY} magic = NONE;
		int c;
#ifdef DEBUG_DUMP
		FILE *out = fopen("dump", "w");
#endif

		if ((*sign = new_pgpsignature(old)) == NULL)
			success = 0;
		else {
			while ((c = fgetc(signin)) != EOF && magic != DONE &&
				(*sign)->length < MAXPGPSIGNSIZE) {
				switch(magic) {
				case NONE:
					(*sign)->data[(*sign)->length++] = c;
					if ((unsigned char)c == (unsigned char)GZIP_MAGIC0)
						magic = FIRST;
					break;
				case FIRST:
					(*sign)->data[(*sign)->length++] = c;
					if ((unsigned char)c == (unsigned char)GZIP_MAGIC1)
#ifdef DEBUG_DUMP
						magic = COPY;
#else
						magic = DONE;
#endif
					else if ((unsigned char)c != (unsigned char)GZIP_MAGIC0)
						magic = NONE;
					break;
				case DONE:
				case COPY:
					break;
				}
#ifdef DEBUG_DUMP
				fputc(c, out);
#endif
			}
			if ((*sign)->length == MAXPGPSIGNSIZE)
				success = 0;
			(*sign)->length -= 2;
			sign_fill_tag(*sign);
		}
		fclose(signin);
#ifdef DEBUG_DUMP
		fclose(out);
#endif
		reap(pgpid);
	}
	return success;
}

void
handle_pgp_passphrase()
{
	pid_t pid;
	int fd[2];
	char *p;

		/* Retrieve the pgp passphrase */
	p = getpass("Enter passphrase:");

		/* somewhat kludgy code to get the passphrase to pgp, see
		   pgp documentation for the gore
		 */
	if (pipe(fd) != 0)	{
		perror("pkg_sign");
		exit(EXIT_FAILURE);
	}
	switch(pid = fork()) {
	case -1:
		perror("pkg_sign");
		exit(EXIT_FAILURE);
	case 0:
		{
			(void)close(fd[0]);
				/* the child fills the pipe with copies of the passphrase.
				   Expect violent death when father exits.
				 */
			for(;;) {
				char c = '\n';
				(void)write(fd[1], p, strlen(p));
				(void)write(fd[1], &c, 1);
			}
		}
	default:
		{
			char buf[12];

			(void)close(fd[1]);
			(void)snprintf(buf, sizeof(buf), "%d", fd[0]);
			(void)setenv("PGPPASSFD", buf, 1);
		}
	}
}
@


1.3
log
@sync with mpsup module
@
text
@d40 1
a40 1
__RCSID("$MirBSD: mpsup/pkgtools/sign/pgp_sign.c,v 1.2 2004/06/25 11:48:41 tg Exp $");
@


1.2
log
@MirOSify:
* fix and unify Makefiles
* move preprocessor options from CFLAGS to CPPFLAGS
* make pkg_sign build, at least
* nuke whitespace at end of line and end of file
* use new-style MirOS RCS IDs
* nuke some junk
@
text
@d38 3
@


1.2.2.1
log
@remove old MirPorts tools from #7quinquies-to-be
agreed bsiegert@@
@
text
@@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/* $OpenBSD: pgp_sign.c,v 1.2 2001/04/08 16:45:48 espie Exp $ */
a12 4
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by Marc Espie for the OpenBSD
 * Project.
d14 3
a16 3
 * THIS SOFTWARE IS PROVIDED BY THE OPENBSD PROJECT AND CONTRIBUTORS 
 * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT 
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR 
d18 6
a23 6
 * PROJECT OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, 
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT 
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, 
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY 
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE 
d39 2
a40 2
static void 
pgpsign(fdin, fdout, userid, envp) 
d61 1
a61 1
	if (dup2(fdin, fileno(stdin)) == -1 || 
d90 1
a90 1
	const char *filename; 
d107 1
a107 1
		pwarnx("File %s is not a gzip file\n", filename);
d175 1
a175 1
		if ((*sign = new_pgpsignature(old)) == NULL) 
d178 1
a178 1
			while ((c = fgetc(signin)) != EOF && magic != DONE && 
d229 1
a229 1
		/* somewhat kludgy code to get the passphrase to pgp, see 
d254 1
a254 1
			char buf[10];
d257 1
a257 1
			(void)sprintf(buf, "%d", fd[0]);
a261 1

@


1.1.1.1
log
@Import OpenBSD 3.3 source repository from CTM 3132 the first time
This opens an OpenBSD-mirabile (aka MirBSD) repository.

### MirBSD is:
# Copyright (c) 1982-2003 by Thorsten "mirabile" Glaser <x86@@ePost.de>
# Copyright © 1968-2003  The authors of And contributors to UNIX®, the
#       C Language, BSD/Berkeley Unix; 386BSD, NetBSD 1.1 and OpenBSD.
#
# Anyone who obtained a copy of this work is hereby permitted to freely use,
# distribute, modify, merge, sublicence, give away or sell it as long as the
# authors are given due credit and the following notice is retained:
#
# This work is provided "as is", with no explicit or implicit warranty what-
# soever. Use it only at your own risk. In no event may an author or contri-
# butor be held liable for any damage, directly or indirectly, that origina-
# ted through or is caused by creation or modification of this work.

MirBSD is my private tree. MirBSD does not differ very much from OpenBSD
and intentionally tracks OpenBSD. That's why it _is_ OpenBSD, just not the
official one. It's like with DarrenBSD.

At time of this writing, no advertising for MirBSD must be done,
because the advertising clause has not yet been sorted out.

http://templeofhate.com/tglaser/MirBSD/index.php
@
text
@@


1.1.1.2
log
@Import OpenBSD source with the "new" command line as well,
in order to be able to provide a MirBSD release which bases
upon a fairly current OpenBSD base source code tree deemed
stable enough.
@
text
@d1 1
a1 1
/* $OpenBSD: pgp_sign.c,v 1.3 2003/04/14 22:24:00 pvalchev Exp $ */
d258 1
a258 1
			char buf[12];
d261 1
a261 1
			(void)snprintf(buf, sizeof(buf), "%d", fd[0]);
@


1.1.1.3
log
@Import latest OpenBSD CVS tree by CTM in order
to sync the base system and ports tree with Them.

This includes the recent licence changes as well - by
importing the changed base and re-applying the diffs
(with cvs up -j -j) they are inherited, and we're not
bound to the removed clauses any longer.
@
text
@d1 1
a1 1
/* $OpenBSD: pgp_sign.c,v 1.4 2003/06/04 04:29:03 deraadt Exp $ */
d13 4
@


1.1.1.4
log
@Import OpenBSD source tree from CVS (anoncvs canada)
of roughly 12:00 UTC today. Bumps us to OpenBSD 3.4
and makes source/ports in sync. Hopefully.
@
text
@d1 1
a1 1
/* $OpenBSD: pgp_sign.c,v 1.5 2003/08/16 17:31:56 deraadt Exp $ */
d107 1
a107 1
		pwarnx("File %s is not a gzip file", filename);
@


