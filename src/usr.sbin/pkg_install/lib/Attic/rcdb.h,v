head	1.7;
access;
symbols
	MIRBSD_7quater:1.5.2.1
	MIRBSD_7:1.5.0.2;
locks; strict;
comment	@ * @;


1.7
date	2004.10.10.21.12.02;	author tg;	state dead;
branches;
next	1.6;

1.6
date	2004.10.09.01.18.31;	author tg;	state Exp;
branches;
next	1.5;

1.5
date	2004.02.25.13.32.51;	author tg;	state Stab;
branches
	1.5.2.1;
next	1.4;

1.4
date	2004.01.14.15.59.38;	author tg;	state dead;
branches;
next	1.3;

1.3
date	2004.01.12.19.06.40;	author tg;	state Exp;
branches;
next	1.2;

1.2
date	2004.01.11.22.38.20;	author tg;	state Exp;
branches;
next	1.1;

1.1
date	2004.01.02.02.53.27;	author tg;	state Exp;
branches;
next	;

1.5.2.1
date	2004.02.28.15.15.43;	author tg;	state Exp;
branches;
next	1.5.2.2;

1.5.2.2
date	2004.12.25.16.43.52;	author tg;	state dead;
branches;
next	;


desc
@@


1.7
log
@package tools in base is dead

agreed bsiegert@@
@
text
@/**	$MirBSD: src/usr.sbin/pkg_install/lib/rcdb.h,v 1.6 2004/10/09 01:18:31 tg Exp $ */

/*-
 * Copyright (c) 2004
 *	Thorsten "mirabile" Glaser <tg@@66h.42h.de>
 *
 * Licensee is hereby permitted to deal in this work without restric-
 * tion, including unlimited rights to use, publically perform, modi-
 * fy, merge, distribute, sell, give away or sublicence, provided the
 * above copyright notices, these terms and the disclaimer are retai-
 * ned in all redistributions, or reproduced in accompanying documen-
 * tation or other materials provided with binary redistributions.
 *
 * Licensor hereby provides this work "AS IS" and WITHOUT WARRANTY of
 * any kind, expressed or implied, to the maximum extent permitted by
 * applicable law, but with the warranty of being written without ma-
 * licious intent or gross negligence; in no event shall licensor, an
 * author or contributor be held liable for any damage, direct, indi-
 * rect or other, however caused, arising in any way out of the usage
 * of covered work, even if advised of the possibility of such damage.
 */

/**	_MirBSD: db.h,v 1.4 2004/02/11 16:34:07 tg Exp $	*/
/*	$OpenBSD: db.h,v 1.8 2004/01/22 21:48:02 espie Exp $	*/
/*	$NetBSD: db.h,v 1.13 1994/10/26 00:55:48 cgd Exp $	*/

/*-
 * Copyright (c) 2004
 *	Thorsten "mirabile" Glaser <x86@@ePost.de>
 *
 * Subject to these terms, everybody who obtained a copy of this work
 * is hereby permitted to deal in the work without restriction inclu-
 * ding without limitation the rights to use, distribute, sell, modi-
 * fy, publically perform, give away, merge or sublicence it provided
 * this notice is kept and the authors and contributors are given due
 * credit in derivates or accompanying documents.
 *
 * This work is provided "as is" with no explicit or implicit warran-
 * ties whatsoever to the maximum extent permitted by applicable law;
 * in no event may an author or contributor be held liable for damage
 * that is, directly or indirectly, caused by the work, even if advi-
 * sed of the possibility of such damage.
 */

/*-
 * Copyright (c) 1990, 1993, 1994
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	@@(#)db.h	8.7 (Berkeley) 6/16/94
 */

#ifndef	_DB_H_
#define	_DB_H_

#include <sys/types.h>
#include <sys/cdefs.h>

#include <limits.h>

#define	RET_ERROR	-1		/* Return values. */
#define	RET_SUCCESS	 0
#define	RET_SPECIAL	 1

#define	MAX_PAGE_NUMBER	0xffffffff	/* >= # of pages in a file */
typedef u_int32_t	pgno_t;
#define	MAX_PAGE_OFFSET	65535		/* >= # of bytes in a page */
typedef u_int16_t	indx_t;
#define	MAX_REC_NUMBER	0xffffffff	/* >= # of records in a tree */
typedef u_int32_t	recno_t;

/* Key/data structure -- a Data-Base Thang. */
typedef struct {
	void	*data;			/* data */
	size_t	 size;			/* data length */
} DBT;

/* Routine flags. */
#define	R_CURSOR	1		/* del, put, seq */
#define	__R_UNUSED	2		/* UNUSED */
#define	R_FIRST		3		/* seq */
#define	R_IAFTER	4		/* put (RECNO) */
#define	R_IBEFORE	5		/* put (RECNO) */
#define	R_LAST		6		/* seq (BTREE, RECNO) */
#define	R_NEXT		7		/* seq */
#define	R_NOOVERWRITE	8		/* put */
#define	R_PREV		9		/* seq (BTREE, RECNO) */
#define	R_SETCURSOR	10		/* put (RECNO) */
#define	R_RECNOSYNC	11		/* sync (RECNO) */

typedef enum { DB_BTREE, DB_HASH, DB_RECNO } DBTYPE;

/*
 * !!!
 * The following flags are included in the dbopen(3) call as part of the
 * open(2) flags.  In order to avoid conflicts with the open flags, start
 * at the top of the 16 or 32-bit number space and work our way down.  If
 * the open flags were significantly expanded in the future, it could be
 * a problem.  Wish I'd left another flags word in the dbopen call.
 *
 * !!!
 * None of this stuff is implemented yet.  The only reason that it's here
 * is so that the access methods can skip copying the key/data pair when
 * the DB_LOCK flag isn't set.
 */
#if UINT_MAX > 65535
#define	DB_LOCK		0x20000000	/* Do locking. */
#define	DB_SHMEM	0x40000000	/* Use shared memory. */
#define	DB_TXN		0x80000000	/* Do transactions. */
#else
#define	DB_LOCK		    0x2000	/* Do locking. */
#define	DB_SHMEM	    0x4000	/* Use shared memory. */
#define	DB_TXN		    0x8000	/* Do transactions. */
#endif

/* Access method description structure. */
typedef struct __db {
	DBTYPE type;			/* Underlying db type. */
	int (*close)(struct __db *);
	int (*del)(const struct __db *, const DBT *, unsigned int);
	int (*get)(const struct __db *, const DBT *, DBT *, unsigned int);
	int (*put)(const struct __db *, DBT *, const DBT *, unsigned int);
	int (*seq)(const struct __db *, DBT *, DBT *, unsigned int);
	int (*sync)(const struct __db *, unsigned int);
	void *internal;			/* Access method private. */
	int (*fd)(const struct __db *);
} DB;

#define	BTREEMAGIC	0x053162
#define	BTREEVERSION	3

/* Structure used to pass parameters to the btree routines. */
typedef struct {
#define	R_DUP		0x01	/* duplicate keys */
	unsigned long	flags;
	unsigned int	cachesize;	/* bytes to cache */
	int		maxkeypage;	/* maximum keys per page */
	int		minkeypage;	/* minimum keys per page */
	unsigned int	psize;		/* page size */
	int		(*compare)	/* comparison function */
			    (const DBT *, const DBT *);
	size_t		(*prefix)	/* prefix function */
			    (const DBT *, const DBT *);
	int		lorder;		/* byte order */
} BTREEINFO;

#define	HASHMAGIC	0x061561
#define	HASHVERSION	2

/* Structure used to pass parameters to the hashing routines. */
typedef struct {
	unsigned int	bsize;		/* bucket size */
	unsigned int	ffactor;	/* fill factor */
	unsigned int	nelem;		/* number of elements */
	unsigned int	cachesize;	/* bytes to cache */
	u_int32_t	(*hash)		/* hash function */
			    (const void *, size_t);
	int		lorder;		/* byte order */
} HASHINFO;

/* Structure used to pass parameters to the record routines. */
typedef struct {
#define	R_FIXEDLEN		0x01	/* fixed-length records */
#define	R_NOKEY			0x02	/* key not required */
#define	R_SNAPSHOT		0x04	/* snapshot the input */
	unsigned long	flags;
	unsigned int	cachesize;	/* bytes to cache */
	unsigned int	psize;		/* page size */
	int		lorder;		/* byte order */
	size_t		reclen;		/* record length
					   (fixed-length records) */
	unsigned char	bval;		/* delimiting byte
					   (variable-length records) */
	char	*bfname;		/* btree file name */
} RECNOINFO;

#define	_DB_RCDB_API	3		/* maximum supported API level */
#define	_DB_RCDB_MAJOR	3		/* minimum supported API level */

/* Structure used to keep track of all rcdb related information. */
typedef struct {
	DB *database;
	recno_t key;
	recno_t currec;
	recno_t lastrec;
	DBT dbt_key;
	DBT dbt_data;
	char sep;
} RCDB;

#ifdef	__DBINTERFACE_PRIVATE
/*
 * Little endian <==> big endian 32-bit swap macros.
 *	M_32_SWAP	swap a memory location
 *	P_32_SWAP	swap a referenced memory location
 *	P_32_COPY	swap from one location to another
 */
#define	M_32_SWAP(a) {							\
	u_int32_t _tmp = a;						\
	((char *)&a)[0] = ((char *)&_tmp)[3];				\
	((char *)&a)[1] = ((char *)&_tmp)[2];				\
	((char *)&a)[2] = ((char *)&_tmp)[1];				\
	((char *)&a)[3] = ((char *)&_tmp)[0];				\
}
#define	P_32_SWAP(a) {							\
	u_int32_t _tmp = *(u_int32_t *)a;				\
	((char *)a)[0] = ((char *)&_tmp)[3];				\
	((char *)a)[1] = ((char *)&_tmp)[2];				\
	((char *)a)[2] = ((char *)&_tmp)[1];				\
	((char *)a)[3] = ((char *)&_tmp)[0];				\
}
#define	P_32_COPY(a, b) {						\
	((char *)&(b))[0] = ((char *)&(a))[3];				\
	((char *)&(b))[1] = ((char *)&(a))[2];				\
	((char *)&(b))[2] = ((char *)&(a))[1];				\
	((char *)&(b))[3] = ((char *)&(a))[0];				\
}

/*
 * Little endian <==> big endian 16-bit swap macros.
 *	M_16_SWAP	swap a memory location
 *	P_16_SWAP	swap a referenced memory location
 *	P_16_COPY	swap from one location to another
 */
#define	M_16_SWAP(a) {							\
	u_int16_t _tmp = a;						\
	((char *)&a)[0] = ((char *)&_tmp)[1];				\
	((char *)&a)[1] = ((char *)&_tmp)[0];				\
}
#define	P_16_SWAP(a) {							\
	u_int16_t _tmp = *(u_int16_t *)a;				\
	((char *)a)[0] = ((char *)&_tmp)[1];				\
	((char *)a)[1] = ((char *)&_tmp)[0];				\
}
#define	P_16_COPY(a, b) {						\
	((char *)&(b))[0] = ((char *)&(a))[1];				\
	((char *)&(b))[1] = ((char *)&(a))[0];				\
}
#endif

__BEGIN_DECLS
DB *dbopen(const char *, int, int, DBTYPE, const void *);

#ifdef	__DBINTERFACE_PRIVATE
DB	*__bt_open(const char *, int, int, const BTREEINFO *, int);
DB	*__hash_open(const char *, int, int, const HASHINFO *, int);
DB	*__rec_open(const char *, int, int, const RECNOINFO *, int);
void	 __dbpanic(DB *dbp);

DBT    *rcdb_alloc(void *, const size_t);
DBT    *rcdb_string(char *);
int	rcdb_split(RCDB *, int64_t *, char **);
#endif

RCDB   *rcdb_open(const char * const);
int	rcdb_close(RCDB *);
int	rcdb_rawread(RCDB *, recno_t, char **);
int	rcdb_rawrite(RCDB *, recno_t, char **);
int	rcdb_delete(RCDB *, recno_t);

recno_t	rcdb_lookup(RCDB *, const char * const);
int	rcdb_retrieve(RCDB *, recno_t, int64_t *, char **);
int	rcdb_read(RCDB *, recno_t, int64_t *);
int	rcdb_modify(RCDB *, recno_t, int64_t, const char * const);
int	rcdb_write(RCDB *, recno_t, int64_t);
recno_t	rcdb_store(RCDB *, int64_t, const char * const);
__END_DECLS

#endif	/* !_DB_H_ */
@


1.6
log
@* copy over
  * rcdb.h from ports/infrastructure/stools/lib
  * rcdb.c from src/lib/libc/db/db
* simplify

MirOS package tools are now
a) self-hosting
b) the same between ports/infrastructure/stools (-stable)
   and src/usr.sbin/pkg_install (-current)
@
text
@d1 1
a1 1
/**	$MirBSD: src/share/misc/licence.template,v 1.14 2004/08/15 15:29:11 tg Rel $ */
@


1.5
log
@switch back to use "rcdb.h"
* for now, it just includes db.h and checks the API, thus
  eliminating duplicate code.
* later, it will also be used to simpligy using pkgtools
  on systems with no rcdb in libc/libdb (MirBSD #7, ekkoBSD)
@
text
@d1 27
a27 2
/* $MirBSD: licence.template,v 1.8 2003/12/17 14:35:00 tg Exp $
 *-
d45 70
a114 2
#ifndef	_RCDB_H
#define	_RCDB_H
d116 17
a132 2
#ifndef	USE_LOCAL_RCDB_COPY
#include <db.h>
d134 3
a136 1
#error @@@@SED@@@@
d139 123
a261 6
#if !defined(_DB_RCDB_API)
# error db.h too old and does not support RCDB!
#elif !defined(_DB_RCDB_MAJOR)
# error db.h belongs to an too old version of RCDB!
#elif (_DB_RCDB_API < 3) || (_DB_RCDB_MAJOR > 3)
# error The RCDB API in db.h is different from the API required!
d264 12
d277 16
@


1.5.2.1
log
@MFC back pkgtools to #7-stable, including latest rcdb
(the other files have been retagged)
@
text
@d1 1
a1 1
/* $MirBSD: rcdb.h,v 1.5 2004/02/25 13:32:51 tg Exp $
d26 1
a26 270
/* _MirBSD: db.h,v 1.4 2004/02/11 16:34:07 tg Exp $	*/
/* $OpenBSD: db.h,v 1.8 2004/01/22 21:48:02 espie Exp $	*/
/* $NetBSD: db.h,v 1.13 1994/10/26 00:55:48 cgd Exp $	*/

/*-
 * Copyright (c) 2004
 *	Thorsten "mirabile" Glaser <x86@@ePost.de>
 *
 * Subject to these terms, everybody who obtained a copy of this work
 * is hereby permitted to deal in the work without restriction inclu-
 * ding without limitation the rights to use, distribute, sell, modi-
 * fy, publically perform, give away, merge or sublicence it provided
 * this notice is kept and the authors and contributors are given due
 * credit in derivates or accompanying documents.
 *
 * This work is provided "as is" with no explicit or implicit warran-
 * ties whatsoever to the maximum extent permitted by applicable law;
 * in no event may an author or contributor be held liable for damage
 * that is, directly or indirectly, caused by the work, even if advi-
 * sed of the possibility of such damage.
 */

/*-
 * Copyright (c) 1990, 1993, 1994
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	@@(#)db.h	8.7 (Berkeley) 6/16/94
 */

#ifndef	_DB_H_
#define	_DB_H_

#include <sys/types.h>
#include <sys/cdefs.h>

#include <limits.h>

#define	RET_ERROR	-1		/* Return values. */
#define	RET_SUCCESS	 0
#define	RET_SPECIAL	 1

#define	MAX_PAGE_NUMBER	0xffffffff	/* >= # of pages in a file */
typedef u_int32_t	pgno_t;
#define	MAX_PAGE_OFFSET	65535		/* >= # of bytes in a page */
typedef u_int16_t	indx_t;
#define	MAX_REC_NUMBER	0xffffffff	/* >= # of records in a tree */
typedef u_int32_t	recno_t;

/* Key/data structure -- a Data-Base Thang. */
typedef struct {
	void	*data;			/* data */
	size_t	 size;			/* data length */
} DBT;

/* Routine flags. */
#define	R_CURSOR	1		/* del, put, seq */
#define	__R_UNUSED	2		/* UNUSED */
#define	R_FIRST		3		/* seq */
#define	R_IAFTER	4		/* put (RECNO) */
#define	R_IBEFORE	5		/* put (RECNO) */
#define	R_LAST		6		/* seq (BTREE, RECNO) */
#define	R_NEXT		7		/* seq */
#define	R_NOOVERWRITE	8		/* put */
#define	R_PREV		9		/* seq (BTREE, RECNO) */
#define	R_SETCURSOR	10		/* put (RECNO) */
#define	R_RECNOSYNC	11		/* sync (RECNO) */

typedef enum { DB_BTREE, DB_HASH, DB_RECNO } DBTYPE;

/*
 * !!!
 * The following flags are included in the dbopen(3) call as part of the
 * open(2) flags.  In order to avoid conflicts with the open flags, start
 * at the top of the 16 or 32-bit number space and work our way down.  If
 * the open flags were significantly expanded in the future, it could be
 * a problem.  Wish I'd left another flags word in the dbopen call.
 *
 * !!!
 * None of this stuff is implemented yet.  The only reason that it's here
 * is so that the access methods can skip copying the key/data pair when
 * the DB_LOCK flag isn't set.
 */
#if UINT_MAX > 65535
#define	DB_LOCK		0x20000000	/* Do locking. */
#define	DB_SHMEM	0x40000000	/* Use shared memory. */
#define	DB_TXN		0x80000000	/* Do transactions. */
#else
#define	DB_LOCK		    0x2000	/* Do locking. */
#define	DB_SHMEM	    0x4000	/* Use shared memory. */
#define	DB_TXN		    0x8000	/* Do transactions. */
#endif

/* Access method description structure. */
typedef struct __db {
	DBTYPE type;			/* Underlying db type. */
	int (*close)(struct __db *);
	int (*del)(const struct __db *, const DBT *, unsigned int);
	int (*get)(const struct __db *, const DBT *, DBT *, unsigned int);
	int (*put)(const struct __db *, DBT *, const DBT *, unsigned int);
	int (*seq)(const struct __db *, DBT *, DBT *, unsigned int);
	int (*sync)(const struct __db *, unsigned int);
	void *internal;			/* Access method private. */
	int (*fd)(const struct __db *);
} DB;

#define	BTREEMAGIC	0x053162
#define	BTREEVERSION	3

/* Structure used to pass parameters to the btree routines. */
typedef struct {
#define	R_DUP		0x01	/* duplicate keys */
	unsigned long	flags;
	unsigned int	cachesize;	/* bytes to cache */
	int		maxkeypage;	/* maximum keys per page */
	int		minkeypage;	/* minimum keys per page */
	unsigned int	psize;		/* page size */
	int		(*compare)	/* comparison function */
			    (const DBT *, const DBT *);
	size_t		(*prefix)	/* prefix function */
			    (const DBT *, const DBT *);
	int		lorder;		/* byte order */
} BTREEINFO;

#define	HASHMAGIC	0x061561
#define	HASHVERSION	2

/* Structure used to pass parameters to the hashing routines. */
typedef struct {
	unsigned int	bsize;		/* bucket size */
	unsigned int	ffactor;	/* fill factor */
	unsigned int	nelem;		/* number of elements */
	unsigned int	cachesize;	/* bytes to cache */
	u_int32_t	(*hash)		/* hash function */
			    (const void *, size_t);
	int		lorder;		/* byte order */
} HASHINFO;

/* Structure used to pass parameters to the record routines. */
typedef struct {
#define	R_FIXEDLEN		0x01	/* fixed-length records */
#define	R_NOKEY			0x02	/* key not required */
#define	R_SNAPSHOT		0x04	/* snapshot the input */
	unsigned long	flags;
	unsigned int	cachesize;	/* bytes to cache */
	unsigned int	psize;		/* page size */
	int		lorder;		/* byte order */
	size_t		reclen;		/* record length
					   (fixed-length records) */
	unsigned char	bval;		/* delimiting byte
					   (variable-length records) */
	char	*bfname;		/* btree file name */
} RECNOINFO;

#define	_DB_RCDB_API	3		/* maximum supported API level */
#define	_DB_RCDB_MAJOR	3		/* minimum supported API level */

/* Structure used to keep track of all rcdb related information. */
typedef struct {
	DB *database;
	recno_t key;
	recno_t currec;
	recno_t lastrec;
	DBT dbt_key;
	DBT dbt_data;
	char sep;
} RCDB;

#ifdef	__DBINTERFACE_PRIVATE
/*
 * Little endian <==> big endian 32-bit swap macros.
 *	M_32_SWAP	swap a memory location
 *	P_32_SWAP	swap a referenced memory location
 *	P_32_COPY	swap from one location to another
 */
#define	M_32_SWAP(a) {							\
	u_int32_t _tmp = a;						\
	((char *)&a)[0] = ((char *)&_tmp)[3];				\
	((char *)&a)[1] = ((char *)&_tmp)[2];				\
	((char *)&a)[2] = ((char *)&_tmp)[1];				\
	((char *)&a)[3] = ((char *)&_tmp)[0];				\
}
#define	P_32_SWAP(a) {							\
	u_int32_t _tmp = *(u_int32_t *)a;				\
	((char *)a)[0] = ((char *)&_tmp)[3];				\
	((char *)a)[1] = ((char *)&_tmp)[2];				\
	((char *)a)[2] = ((char *)&_tmp)[1];				\
	((char *)a)[3] = ((char *)&_tmp)[0];				\
}
#define	P_32_COPY(a, b) {						\
	((char *)&(b))[0] = ((char *)&(a))[3];				\
	((char *)&(b))[1] = ((char *)&(a))[2];				\
	((char *)&(b))[2] = ((char *)&(a))[1];				\
	((char *)&(b))[3] = ((char *)&(a))[0];				\
}

/*
 * Little endian <==> big endian 16-bit swap macros.
 *	M_16_SWAP	swap a memory location
 *	P_16_SWAP	swap a referenced memory location
 *	P_16_COPY	swap from one location to another
 */
#define	M_16_SWAP(a) {							\
	u_int16_t _tmp = a;						\
	((char *)&a)[0] = ((char *)&_tmp)[1];				\
	((char *)&a)[1] = ((char *)&_tmp)[0];				\
}
#define	P_16_SWAP(a) {							\
	u_int16_t _tmp = *(u_int16_t *)a;				\
	((char *)a)[0] = ((char *)&_tmp)[1];				\
	((char *)a)[1] = ((char *)&_tmp)[0];				\
}
#define	P_16_COPY(a, b) {						\
	((char *)&(b))[0] = ((char *)&(a))[1];				\
	((char *)&(b))[1] = ((char *)&(a))[0];				\
}
#endif

__BEGIN_DECLS
DB *dbopen(const char *, int, int, DBTYPE, const void *);

#ifdef	__DBINTERFACE_PRIVATE
DB	*__bt_open(const char *, int, int, const BTREEINFO *, int);
DB	*__hash_open(const char *, int, int, const HASHINFO *, int);
DB	*__rec_open(const char *, int, int, const RECNOINFO *, int);
void	 __dbpanic(DB *dbp);

DBT    *rcdb_alloc(void *, const size_t);
DBT    *rcdb_string(char *);
int	rcdb_split(RCDB *, int64_t *, char **);
#endif

RCDB   *rcdb_open(const char * const);
int	rcdb_close(RCDB *);
int	rcdb_rawread(RCDB *, recno_t, char **);
int	rcdb_rawrite(RCDB *, recno_t, char **);
int	rcdb_delete(RCDB *, recno_t);

recno_t	rcdb_lookup(RCDB *, const char * const);
int	rcdb_retrieve(RCDB *, recno_t, int64_t *, char **);
int	rcdb_read(RCDB *, recno_t, int64_t *);
int	rcdb_modify(RCDB *, recno_t, int64_t, const char * const);
int	rcdb_write(RCDB *, recno_t, int64_t);
recno_t	rcdb_store(RCDB *, int64_t, const char * const);
__END_DECLS

#endif	/* !_DB_H_ */
@


1.5.2.2
log
@remove old MirPorts tools from #7quinquies-to-be
agreed bsiegert@@
@
text
@d1 1
a1 1
/* $MirBSD: src/usr.sbin/pkg_install/lib/rcdb.h,v 1.5.2.1 2004/02/28 15:15:43 tg Exp $
@


1.4
log
@fearless attempt to place rcdb into libc
(no functional changes from the last version in pkg_install/lib)

bump version numbers of libc and libpthread (depends on libc) so to make
them in sync, as well

start writing a preliminary rcdb man page (to be extended RSN)

bsiegert@@ wbx@@ please read through the code once again, six eyes
see more than two with glasses ;-)
@
text
@d1 1
a1 1
/* $MirBSD: rcdb.h,v 1.3 2004/01/12 19:06:40 tg Exp $
d4 1
a4 1
 *	Thorsten Glaser <x86@@ePost.de> for the MirOS Project
d23 5
a27 1
#define	_DB_RCDB_API	2
d29 7
a35 25
typedef struct {
	DB *database;
	recno_t key;
	recno_t lastrec;
	DBT dbt_key;
	DBT dbt_data;
} RCDB;

/* open database */
RCDB *rcdb_open(const char * const);

/* close database (returns 0 if successful) and clean up; free pointer */
int rcdb_close(RCDB *);

/* look up pathname in database, return recno */
recno_t rcdb_lookup(RCDB *, const char * const);

/* write pair (count, pathname) into database, return new recno */
recno_t rcdb_write(RCDB *, int64_t, const char * const);

/* read count from recno */
int rcdb_read(RCDB *, recno_t, int64_t *);

/* delete record */
int rcdb_delete(RCDB *, recno_t);
a36 20

/* return (count, pathname) pair */
int rcdb_retrieve(RCDB *, recno_t, int64_t *, char **);

/* modify pair (count, pathname) in database */
int rcdb_modify(RCDB *, recno_t, int64_t, const char * const, int);

/* modify only count in database */
int rcdb_modify_count(RCDB *, recno_t, int64_t);

#ifdef	__DBINTERFACE_PRIVATE

/* fill in DBT records */
DBT *rcdb_alloc(void *, const size_t);
DBT *rcdb_string(char *);

/* split DBT into (count, pathname) pair */
void rcdb_split(DBT *, int64_t *, char **);

#endif
@


1.3
log
@for now, commit the change to rcdb v2 (using signed int64_t),
the diff is still being reviewed at our libdb guy, but this
way people can play with it
new entries are written out in hexadecimal by default; the old
code (v0/v1) is uncapable of this because I used atoi(3) and
not strtol(3) at first.
@
text
@d1 1
a1 1
/* $MirBSD: rcdb.h,v 1.2 2004/01/11 22:38:20 tg Exp $
@


1.2
log
@some steps further in the development of rcdb:
 * more descriptive text
 * no globals any more, use thread-local storage (aka, handle)
   (will help intrigation of rcdb into libc-db)
 * nuke test programmes
   (will be rewritten as a mini toolchain later)
 * more stringent checking for
   - return values
   - failures
   - NULL pointers
 * fix some minor bugs
 * remove an irrelevant API (changing the primary key isn't good)

the diffs to lib/plist.c, lib/rcdb.c and lib/rcdb.h ok'd by bsiegert@@
lib and pkg_add compile with -Wall -Werror again, like before
@
text
@d1 1
a1 1
/* $MirBSD: rcdb.h,v 1.1 2004/01/02 02:53:27 tg Exp $
d23 1
a23 1
#define	_DB_RCDB_API	1
d43 1
a43 1
recno_t rcdb_write(RCDB *, int, const char * const);
d46 1
a46 1
int rcdb_read(RCDB *, recno_t);
d53 1
a53 1
int rcdb_retrieve(RCDB *, recno_t, int *, char **);
d56 1
a56 1
int rcdb_modify(RCDB *, recno_t, int, const char * const, int);
d59 1
a59 1
int rcdb_modify_count(RCDB *, recno_t, int);
d68 1
a68 1
void rcdb_split(DBT *, int *, char **);
@


1.1
log
@implement a database facility recording shared directories
for the "old" pkgtools, to accomodate changes done in the
"new" OpenBSD pkgtools.

as of now, shared directories (ie, these with a @@dirrm)
have to be owned by all packages using them, just as
with OpenBSD Ports Tree.
In contrast to them, MirPorts will use a more-or-less
plaintext database counting references on them; you
may even manually increase or decrease the count with
a text editor (just be sure to not anger recno).

Thanks for some help with Berzerkeley DB to bsiegert@@
Thanks for discussing to bsiegert@@ and wbx@@ and some others
Thanks for making me this work to espie@@openbsd
 (but hey, it's cool now)
@
text
@d1 1
a1 1
/* $MirBSD: licence.template,v 1.8 2003/12/17 14:35:00 tg Exp $
d23 10
d34 1
a34 1
int rcdb_open(const char * const);
d36 2
a37 2
/* close database */
void rcdb_close(void);
d40 1
a40 1
recno_t rcdb_lookup(const char * const);
d43 1
a43 1
recno_t rcdb_write(int, const char * const);
d46 1
a46 1
int rcdb_read(recno_t);
d49 1
a49 1
int rcdb_delete(recno_t);
d53 1
a53 1
int rcdb_retrieve(recno_t, int *, char **);
d56 6
a61 1
int rcdb_modify(recno_t, int, const char * const, int);
d63 3
a65 3
/* modify only count or pathname in database */
int rcdb_modify_count(recno_t, int);
int rcdb_modify_pathname(recno_t, const char * const);
d70 1
@

