head	1.6;
access;
symbols
	MIRBSD_7quater:1.4
	cvs-200405160640:1.1.1.3
	MIRBSD_7:1.4.0.2
	cvs-200401271800:1.1.1.3
	cvs-200401261630:1.1.1.3
	cvs-200401021645:1.1.1.3
	MIRBSD_7_ALPHA:1.3.0.6
	cvs-200312222040:1.1.1.3
	MIRBSD_7ter:1.3
	MIRBSD_7_DEV:1.3.0.2
	cvs-200310020700:1.1.1.3
	cvs-200309271030:1.1.1.3
	cvs-200309251530:1.1.1.3
	cvs-200308302005:1.1.1.3
	cvs-200308221505:1.1.1.3
	cvs-200308171200:1.1.1.3
	ctm-3496:1.1.1.3
	ctm-3449:1.1.1.3
	ctm-3437:1.1.1.3
	cvs-200307191805:1.1.1.3
	ctm-3425:1.1.1.3
	cvs-200307091500:1.1.1.3
	ctm-3389:1.1.1.3
	cvs-200306291430:1.1.1.2
	ctm-3341:1.1.1.2
	MIRBSD_5:1.1.1.2
	cvs-200306082100:1.1.1.2
	ctm-3316:1.1.1.2
	ctm-3272:1.1.1.2
	ctm-3264:1.1.1.2
	cvs-200305071630:1.1.1.2
	MIRBSD_4:1.1.1.2
	ctm-3203:1.1.1.2
	cvs-20030410-1130:1.1.1.2
	ctm-3155:1.1.1.1
	ctm-3132:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.6
date	2004.10.10.21.12.01;	author tg;	state dead;
branches;
next	1.5;

1.5
date	2004.07.21.10.24.36;	author tg;	state Stab;
branches;
next	1.4;

1.4
date	2004.02.28.15.09.29;	author tg;	state Exp;
branches
	1.4.2.1;
next	1.3;

1.3
date	2003.10.03.19.40.54;	author tg;	state Exp;
branches;
next	1.2;

1.2
date	2003.10.03.16.40.40;	author tg;	state Exp;
branches;
next	1.1;

1.1
date	2003.03.22.17.55.49;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.03.22.17.55.49;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2003.04.10.15.01.00;	author tg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2003.07.06.15.56.46;	author tg;	state Exp;
branches;
next	;

1.4.2.1
date	2004.12.25.16.43.52;	author tg;	state dead;
branches;
next	;


desc
@@


1.6
log
@package tools in base is dead

agreed bsiegert@@
@
text
@/*	$OpenBSD: pen.c,v 1.13 2003/07/04 17:31:19 avsm Exp $	*/

/*
 * FreeBSD install - a package for the installation and maintainance
 * of non-core utilities.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * Jordan K. Hubbard
 * 18 July 1993
 *
 * Routines for managing the "play pen".
 */

#include <err.h>
#include "lib.h"
#include <sys/signal.h>
#include <sys/param.h>
#include <sys/mount.h>
#include <errno.h>

__RCSID("$MirBSD: src/usr.sbin/pkg_install/lib/pen.c,v 1.5 2004/07/21 10:24:36 tg Stab $");

/* For keeping track of where we are */
static char Current[FILENAME_MAX];
static char Previous[FILENAME_MAX];

/* Backup Current and Previous into temp. strings that are later
 * restored & freed by restore_dirs
 * This is to make nested calls to makeplaypen/leave_playpen work
 */
void
save_dirs(char **c, char **p)
{
    if ((*c = strdup(Current))  == NULL)
	err(2, NULL);
    if ((*p = strdup(Previous)) == NULL)
	err(2, NULL);
}

/* Restore Current and Previous from temp strings that were created
 * by safe_dirs.
 * This is to make nested calls to makeplaypen/leave_playpen work
 */
void
restore_dirs(char *c, char *p)
{
    strlcpy(Current, c, sizeof(Current));  free(c);
    strlcpy(Previous, p, sizeof(Previous)); free(p);
}

char *
where_playpen(void)
{
    return Current;
}

/* Find a good place to play. */
static char *
find_play_pen(char *pen, size_t pensize, size_t sz)
{
    char *cp;
    struct stat sb;

    if (pen[0] && stat(pen, &sb) != FAIL && (min_free(pen) >= sz))
	return pen;
    else if ((cp = getenv("PKG_TMPDIR")) != NULL && stat(cp, &sb) != FAIL && (min_free(cp) >= sz))
	(void) snprintf(pen, pensize, "%s/instmp.XXXXXXXXXX", cp);
    else if ((cp = getenv("TMPDIR")) != NULL && stat(cp, &sb) != FAIL && (min_free(cp) >= sz))
	(void) snprintf(pen, pensize, "%s/instmp.XXXXXXXXXX", cp);
    else if (stat("/var/tmp", &sb) != FAIL && min_free("/var/tmp") >= sz)
	strlcpy(pen, "/var/tmp/instmp.XXXXXXXXXX", pensize);
    else if (stat("/tmp", &sb) != FAIL && min_free("/tmp") >= sz)
	strlcpy(pen, "/tmp/instmp.XXXXXXXXXX", pensize);
    else if ((stat("/usr/tmp", &sb) == SUCCESS || mkdir("/usr/tmp", 01777) == SUCCESS) && min_free("/usr/tmp") >= sz)
	strlcpy(pen, "/usr/tmp/instmp.XXXXXXXXXX", pensize);
    else {
	cleanup(0);
	errx(2,
"can't find enough temporary space to extract the files, please set your\n"
"PKG_TMPDIR environment variable to a location with at least %lu bytes\n"
"free", (u_long)sz);
	return NULL;
    }
    return pen;
}

/*
 * Make a temporary directory to play in and chdir() to it, returning
 * pathname of previous working directory.
 */
char *
make_playpen(char *pen, size_t pensize, size_t sz)
{
    if (!find_play_pen(pen, pensize, sz))
	return NULL;

    if (!mkdtemp(pen)) {
	cleanup(0);
	errx(2, "can't mkdtemp '%s'", pen);
    }
    if (Verbose) {
	if (sz)
	    fprintf(stderr, "Requested space: %lu bytes, free space: %qd bytes in %s\n", (u_long)sz, (long long)min_free(pen), pen);
    }
    if (min_free(pen) < sz) {
	rmdir(pen);
	cleanup(0);
	errx(2, "not enough free space to create '%s'.\n"
	     "Please set your PKG_TMPDIR environment variable to a location\n"
	     "with more space and\ntry the command again", pen);
    }
    if (Current[0])
	strlcpy(Previous, Current, sizeof(Previous));
    else if (!getcwd(Previous, FILENAME_MAX)) {
	cleanup(0);
	err(1, "fatal error during execution: getcwd");
    }
    if (chdir(pen) == FAIL) {
	cleanup(0);
	errx(2, "can't chdir to '%s'", pen);
    }
    strlcpy(Current, pen, sizeof(Current));
    return Previous;
}

/* Convenience routine for getting out of playpen */
void
leave_playpen(char *save)
{
    int save_errno = errno;
    void (*oldsig)(int);

    /* XXX big signal race! */
    /* Don't interrupt while we're cleaning up */
    oldsig = signal(SIGINT, SIG_IGN);
    if (Previous[0] && chdir(Previous) == FAIL) {
	cleanup(0);	/* XXX */
	warnx("can't chdir back to '%s'", Previous);
	_exit(2);
    } else if (Current[0] && strcmp(Current, Previous)) {
        if (strcmp(Current,"/")==0) {
            fprintf(stderr,"PANIC: About to rm -rf / (not doing so, aborting)\n");
            abort();	/* XXX is abort safe? */
        }
	if (vsystem("rm -rf %s", Current))
	    pwarnx("couldn't remove temporary dir '%s'", Current);
	strlcpy(Current, Previous, sizeof(Current));	/* XXX */
    }
    if (save)
	strlcpy(Previous, save, sizeof(Previous));		/* XXX */
    else
	Previous[0] = '\0';
    signal(SIGINT, oldsig);
    errno = save_errno;
}

off_t
min_free(char *tmpdir)
{
    struct statfs buf;

    if (statfs(tmpdir, &buf) != 0) {
	warn("statfs");
	return -1;
    }
    return (off_t)buf.f_bavail * (off_t)buf.f_bsize;
}
@


1.5
log
@sync with mpsup module
@
text
@d29 1
a29 1
__RCSID("$MirBSD: mpsup/pkgtools/lib/pen.c,v 1.2 2004/06/25 11:48:39 tg Exp $");
@


1.4
log
@MirOSify:
* fix and unify Makefiles
* move preprocessor options from CFLAGS to CPPFLAGS
* make pkg_sign build, at least
* nuke whitespace at end of line and end of file
* use new-style MirOS RCS IDs
* nuke some junk
@
text
@a21 3
#include <sys/cdefs.h>
__RCSID("$MirBSD$");

d28 2
@


1.4.2.1
log
@remove old MirPorts tools from #7quinquies-to-be
agreed bsiegert@@
@
text
@d23 1
a23 1
__RCSID("$MirBSD: src/usr.sbin/pkg_install/lib/pen.c,v 1.4 2004/02/28 15:09:29 tg Exp $");
@


1.3
log
@use err() rather than errx()
from Tom Cosgrove and Ted Unangst
@
text
@a2 4
#ifndef lint
static const char rcsid[] = "$OpenBSD: pen.c,v 1.13 2003/07/04 17:31:19 avsm Exp $";
#endif

a19 1
 *
d21 3
@


1.2
log
@more strdup(3) fixes From: Jared Yanovich <jjy2+@@pitt.edu>
@
text
@d46 1
a46 1
	errx(2, "can't allocate memory");
d48 1
a48 1
	errx(2, "can't allocate memory");
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$OpenBSD: pen.c,v 1.11 2002/02/18 00:18:07 millert Exp $	*/
d4 1
a4 1
static const char *rcsid = "$OpenBSD: pen.c,v 1.11 2002/02/18 00:18:07 millert Exp $";
d45 4
a48 2
    *c=strdup(Current);
    *p=strdup(Previous);
d58 2
a59 2
    strcpy(Current, c);  free(c);
    strcpy(Previous, p); free(p);
d82 1
a82 1
	strcpy(pen, "/var/tmp/instmp.XXXXXXXXXX");
d84 1
a84 1
	strcpy(pen, "/tmp/instmp.XXXXXXXXXX");
d86 1
a86 1
	strcpy(pen, "/usr/tmp/instmp.XXXXXXXXXX");
d124 1
a124 1
	strcpy(Previous, Current);
d133 1
a133 1
    strcpy(Current, pen);
d158 1
a158 1
	strcpy(Current, Previous);	/* XXX */
d161 1
a161 1
	strcpy(Previous, save);		/* XXX */
@


1.1.1.1
log
@Import OpenBSD 3.3 source repository from CTM 3132 the first time
This opens an OpenBSD-mirabile (aka MirBSD) repository.

### MirBSD is:
# Copyright (c) 1982-2003 by Thorsten "mirabile" Glaser <x86@@ePost.de>
# Copyright © 1968-2003  The authors of And contributors to UNIX®, the
#       C Language, BSD/Berkeley Unix; 386BSD, NetBSD 1.1 and OpenBSD.
#
# Anyone who obtained a copy of this work is hereby permitted to freely use,
# distribute, modify, merge, sublicence, give away or sell it as long as the
# authors are given due credit and the following notice is retained:
#
# This work is provided "as is", with no explicit or implicit warranty what-
# soever. Use it only at your own risk. In no event may an author or contri-
# butor be held liable for any damage, directly or indirectly, that origina-
# ted through or is caused by creation or modification of this work.

MirBSD is my private tree. MirBSD does not differ very much from OpenBSD
and intentionally tracks OpenBSD. That's why it _is_ OpenBSD, just not the
official one. It's like with DarrenBSD.

At time of this writing, no advertising for MirBSD must be done,
because the advertising clause has not yet been sorted out.

http://templeofhate.com/tglaser/MirBSD/index.php
@
text
@@


1.1.1.2
log
@Import OpenBSD cvs as of roughly 11:11 UTC today,
or CTM delta 3188/3189/3190.
@
text
@d1 1
a1 1
/*	$OpenBSD: pen.c,v 1.12 2003/04/04 08:56:01 avsm Exp $	*/
d4 1
a4 1
static const char *rcsid = "$OpenBSD: pen.c,v 1.12 2003/04/04 08:56:01 avsm Exp $";
d56 2
a57 2
    strlcpy(Current, c, sizeof(Current));  free(c);
    strlcpy(Previous, p, sizeof(Previous)); free(p);
d80 1
a80 1
	strlcpy(pen, "/var/tmp/instmp.XXXXXXXXXX", pensize);
d82 1
a82 1
	strlcpy(pen, "/tmp/instmp.XXXXXXXXXX", pensize);
d84 1
a84 1
	strlcpy(pen, "/usr/tmp/instmp.XXXXXXXXXX", pensize);
d122 1
a122 1
	strlcpy(Previous, Current, sizeof(Previous));
d131 1
a131 1
    strlcpy(Current, pen, sizeof(Current));
d156 1
a156 1
	strlcpy(Current, Previous, sizeof(Current));	/* XXX */
d159 1
a159 1
	strlcpy(Previous, save, sizeof(Previous));		/* XXX */
@


1.1.1.3
log
@Import OpenBSD base system minus kerberos from CTM,
kernel source from CVS right now (no diffs though)
@
text
@d1 1
a1 1
/*	$OpenBSD: pen.c,v 1.13 2003/07/04 17:31:19 avsm Exp $	*/
d4 1
a4 1
static const char rcsid[] = "$OpenBSD: pen.c,v 1.13 2003/07/04 17:31:19 avsm Exp $";
@


