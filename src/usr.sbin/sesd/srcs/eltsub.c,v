head	1.1;
branch	1.1.1;
access;
symbols
	tg-mergetmp-mirosx-1:1.1.1.2
	tg-mergefixes-1-branch:1.1.1.2.0.14
	tg-mergefixes-1-base:1.1.1.2
	MIROS_X:1.1.1.2.0.12
	MIROS_X_BASE:1.1.1.2
	tg-mergetmp-3:1.1.1.2
	MIRBSD_XP_MIRPPC:1.1.1.2.0.10
	MIRBSD_XP_SPARC_BASE:1.1.1.2
	MIRBSD_XP_SPARC:1.1.1.2.0.8
	MIRBSD_7quater:1.1.1.2
	cvs-200405160640:1.1.1.2
	cvs-200401271800:1.1.1.2
	cvs-200401261630:1.1.1.2
	cvs-200401021645:1.1.1.2
	MIRBSD_7_ALPHA:1.1.1.2.0.6
	MIRBSD_7:1.1.1.2.0.4
	cvs-200312222040:1.1.1.2
	MIRBSD_7ter:1.1.1.2
	MIRBSD_7_DEV:1.1.1.2.0.2
	cvs-200310020700:1.1.1.2
	cvs-200309271030:1.1.1.2
	cvs-200309251530:1.1.1.2
	cvs-200308302005:1.1.1.2
	cvs-200308171200:1.1.1.2
	ctm-3496:1.1.1.2
	ctm-3449:1.1.1.2
	ctm-3437:1.1.1.2
	cvs-200307191805:1.1.1.2
	ctm-3425:1.1.1.2
	cvs-200307091500:1.1.1.2
	ctm-3389:1.1.1.2
	cvs-200306291430:1.1.1.2
	ctm-3341:1.1.1.2
	MIRBSD_5:1.1.1.2
	cvs-200306082100:1.1.1.2
	ctm-3316:1.1.1.2
	ctm-3272:1.1.1.2
	ctm-3264:1.1.1.2
	cvs-200305071630:1.1.1.2
	MIRBSD_4:1.1.1.2
	ctm-3203:1.1.1.2
	cvs-20030410-1130:1.1.1.2
	ctm-3155:1.1.1.1
	ctm-3132:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.1
date	2003.03.22.17.56.01;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.03.22.17.56.01;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2003.04.10.15.01.38;	author tg;	state Stab;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@/* $NetBSD: $ */
/* $FreeBSD: $ */
/* $OpenBSD: eltsub.c,v 1.3 2002/02/16 21:28:09 millert Exp $ */
/*
 * Copyright (c) 2000 by Matthew Jacob
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions, and the following disclaimer,
 *    without modification, immediately at the beginning of the file.
 * 2. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * Alternatively, this software may be distributed under the terms of the
 * the GNU Public License ("GPL").
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 * 
 * Matthew Jacob
 * Feral Software
 * mjacob@@feral.com
 */

#include <unistd.h>
#include <stdlib.h>
#include <stdio.h>
#include <sys/ioctl.h>
#include SESINC

char *geteltnm(int);
static char *scode2ascii(u_char);
char *stat2ascii(int, u_char *);

char *
geteltnm(type)
	int type;
{
	static char rbuf[132];

	switch (type) {
	case SESTYP_UNSPECIFIED:
		sprintf(rbuf, "Unspecified");
		break;
	case SESTYP_DEVICE:
		sprintf(rbuf, "Device");
		break;
	case SESTYP_POWER:
		sprintf(rbuf, "Power supply");
		break;
	case SESTYP_FAN:
		sprintf(rbuf, "Cooling element");
		break;
	case SESTYP_THERM:
		sprintf(rbuf, "Temperature sensors");
		break;
	case SESTYP_DOORLOCK:
		sprintf(rbuf, "Door Lock");
		break;
	case SESTYP_ALARM:
		sprintf(rbuf, "Audible alarm");
		break;
	case SESTYP_ESCC:
		sprintf(rbuf, "Enclosure services controller electronics");
		break;
	case SESTYP_SCC:
		sprintf(rbuf, "SCC controller electronics");
		break;
	case SESTYP_NVRAM:
		sprintf(rbuf, "Nonvolatile cache");
		break;
	case SESTYP_UPS:
		sprintf(rbuf, "Uninterruptible power supply");
		break;
	case SESTYP_DISPLAY:
		sprintf(rbuf, "Display");
		break;
	case SESTYP_KEYPAD:
		sprintf(rbuf, "Key pad entry device");
		break;
	case SESTYP_SCSIXVR:
		sprintf(rbuf, "SCSI port/transceiver");
		break;
	case SESTYP_LANGUAGE:
		sprintf(rbuf, "Language");
		break;
	case SESTYP_COMPORT:
		sprintf(rbuf, "Communication Port");
		break;
	case SESTYP_VOM:
		sprintf(rbuf, "Voltage Sensor");
		break;
	case SESTYP_AMMETER:
		sprintf(rbuf, "Current Sensor");
		break;
	case SESTYP_SCSI_TGT:
		sprintf(rbuf, "SCSI target port");
		break;
	case SESTYP_SCSI_INI:
		sprintf(rbuf, "SCSI initiator port");
		break;
	case SESTYP_SUBENC:
		sprintf(rbuf, "Simple sub-enclosure");
		break;
	default:
		(void) sprintf(rbuf, "<Type 0x%x>", type);
		break;
	}
	return (rbuf);
}

static char *
scode2ascii(code)
	u_char code;
{
	static char rbuf[32];
	switch (code & 0xf) {
	case SES_OBJSTAT_UNSUPPORTED:
		sprintf(rbuf, "status not supported");
		break;
	case SES_OBJSTAT_OK:
		sprintf(rbuf, "ok");
		break;
	case SES_OBJSTAT_CRIT:
		sprintf(rbuf, "critical");
		break;
	case SES_OBJSTAT_NONCRIT:
		sprintf(rbuf, "non-critical");
		break;
	case SES_OBJSTAT_UNRECOV:
		sprintf(rbuf, "unrecoverable");
		break;
	case SES_OBJSTAT_NOTINSTALLED:
		sprintf(rbuf, "not installed");
		break;
	case SES_OBJSTAT_UNKNOWN:
		sprintf(rbuf, "unknown status");
		break;
	case SES_OBJSTAT_NOTAVAIL:
		sprintf(rbuf, "status not available");
		break;
	default:
		sprintf(rbuf, "unknown status code %x", code & 0xf);
		break;
	}
	return (rbuf);
}


char *
stat2ascii(eletype, cstat)
	int eletype;
	u_char *cstat;
{
	static char ebuf[256], *scode;

	scode = scode2ascii(cstat[0]);
	sprintf(ebuf, "Status=%s (bytes=0x%02x 0x%02x 0x%02x 0x%02x)",
	    scode, cstat[0], cstat[1], cstat[2], cstat[3]);
	return (ebuf);
}
@


1.1.1.1
log
@Import OpenBSD 3.3 source repository from CTM 3132 the first time
This opens an OpenBSD-mirabile (aka MirBSD) repository.

### MirBSD is:
# Copyright (c) 1982-2003 by Thorsten "mirabile" Glaser <x86@@ePost.de>
# Copyright © 1968-2003  The authors of And contributors to UNIX®, the
#       C Language, BSD/Berkeley Unix; 386BSD, NetBSD 1.1 and OpenBSD.
#
# Anyone who obtained a copy of this work is hereby permitted to freely use,
# distribute, modify, merge, sublicence, give away or sell it as long as the
# authors are given due credit and the following notice is retained:
#
# This work is provided "as is", with no explicit or implicit warranty what-
# soever. Use it only at your own risk. In no event may an author or contri-
# butor be held liable for any damage, directly or indirectly, that origina-
# ted through or is caused by creation or modification of this work.

MirBSD is my private tree. MirBSD does not differ very much from OpenBSD
and intentionally tracks OpenBSD. That's why it _is_ OpenBSD, just not the
official one. It's like with DarrenBSD.

At time of this writing, no advertising for MirBSD must be done,
because the advertising clause has not yet been sorted out.

http://templeofhate.com/tglaser/MirBSD/index.php
@
text
@@


1.1.1.2
log
@Import OpenBSD cvs as of roughly 11:11 UTC today,
or CTM delta 3188/3189/3190.
@
text
@d3 1
a3 1
/* $OpenBSD: eltsub.c,v 1.4 2003/04/03 18:49:51 deraadt Exp $ */
d55 1
a55 1
		snprintf(rbuf, sizeof rbuf, "Unspecified");
d58 1
a58 1
		snprintf(rbuf, sizeof rbuf, "Device");
d61 1
a61 1
		snprintf(rbuf, sizeof rbuf, "Power supply");
d64 1
a64 1
		snprintf(rbuf, sizeof rbuf, "Cooling element");
d67 1
a67 1
		snprintf(rbuf, sizeof rbuf, "Temperature sensors");
d70 1
a70 1
		snprintf(rbuf, sizeof rbuf, "Door Lock");
d73 1
a73 1
		snprintf(rbuf, sizeof rbuf, "Audible alarm");
d76 1
a76 1
		snprintf(rbuf, sizeof rbuf, "Enclosure services controller electronics");
d79 1
a79 1
		snprintf(rbuf, sizeof rbuf, "SCC controller electronics");
d82 1
a82 1
		snprintf(rbuf, sizeof rbuf, "Nonvolatile cache");
d85 1
a85 1
		snprintf(rbuf, sizeof rbuf, "Uninterruptible power supply");
d88 1
a88 1
		snprintf(rbuf, sizeof rbuf, "Display");
d91 1
a91 1
		snprintf(rbuf, sizeof rbuf, "Key pad entry device");
d94 1
a94 1
		snprintf(rbuf, sizeof rbuf, "SCSI port/transceiver");
d97 1
a97 1
		snprintf(rbuf, sizeof rbuf, "Language");
d100 1
a100 1
		snprintf(rbuf, sizeof rbuf, "Communication Port");
d103 1
a103 1
		snprintf(rbuf, sizeof rbuf, "Voltage Sensor");
d106 1
a106 1
		snprintf(rbuf, sizeof rbuf, "Current Sensor");
d109 1
a109 1
		snprintf(rbuf, sizeof rbuf, "SCSI target port");
d112 1
a112 1
		snprintf(rbuf, sizeof rbuf, "SCSI initiator port");
d115 1
a115 1
		snprintf(rbuf, sizeof rbuf, "Simple sub-enclosure");
d118 1
a118 1
		(void) snprintf(rbuf, sizeof rbuf, "<Type 0x%x>", type);
d131 1
a131 1
		snprintf(rbuf, sizeof rbuf, "status not supported");
d134 1
a134 1
		snprintf(rbuf, sizeof rbuf, "ok");
d137 1
a137 1
		snprintf(rbuf, sizeof rbuf, "critical");
d140 1
a140 1
		snprintf(rbuf, sizeof rbuf, "non-critical");
d143 1
a143 1
		snprintf(rbuf, sizeof rbuf, "unrecoverable");
d146 1
a146 1
		snprintf(rbuf, sizeof rbuf, "not installed");
d149 1
a149 1
		snprintf(rbuf, sizeof rbuf, "unknown status");
d152 1
a152 1
		snprintf(rbuf, sizeof rbuf, "status not available");
d155 1
a155 1
		snprintf(rbuf, sizeof rbuf, "unknown status code %x", code & 0xf);
d170 1
a170 1
	snprintf(ebuf, sizeof ebuf, "Status=%s (bytes=0x%02x 0x%02x 0x%02x 0x%02x)",
@

