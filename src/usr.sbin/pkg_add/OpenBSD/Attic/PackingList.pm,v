head	1.2;
access;
symbols
	cvs-200405160640:1.1.1.3
	cvs-200401271800:1.1.1.2
	cvs-200401261630:1.1.1.2
	cvs-200401021645:1.1.1.2
	cvs-200312222040:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@# @;


1.2
date	2004.05.21.20.08.49;	author tg;	state dead;
branches;
next	1.1;

1.1
date	2003.12.22.21.20.13;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.12.22.21.20.13;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2004.01.02.18.12.26;	author tg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2004.05.16.07.18.45;	author tg;	state Exp;
branches;
next	;


desc
@@


1.2
log
@* merge OpenBSD 3.5-current
* re-sort entries in Makefile
  => not a bunch of adds any more; all alphabetic
  => remove obsolete SUBDIRS_ONLY_BSD for now
     (MirLinux won't come that soon due to a certain lawsuit,
      licence issues with unwillingly GNU fanatics, and my
      chronic unwillingness to do masochistic work)
* spacing, RCS IDs, etc.
* pkg gets folded into pkg_install, so we only have one dir
  to worry about
* pkg_add leaves the tree - nobody cared about this kind
  of package tools anyways, and they're not part of MirBSD
  (although still supported by MirPorts)
* mopd leaves - we don't have VAX support anyways
@
text
@# $OpenBSD: PackingList.pm,v 1.3 2003/11/06 17:46:35 espie Exp $
#
# Copyright (c) 2003 Marc Espie.
# 
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
# 
# THIS SOFTWARE IS PROVIDED BY THE OPENBSD PROJECT AND CONTRIBUTORS
# ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OPENBSD
# PROJECT OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

use strict;
use warnings;
package OpenBSD::PackingList;

use OpenBSD::PackingElement;
use OpenBSD::PackageInfo;

sub new
{
	my $class = shift;
	bless {state => 
	    {default_owner=>'root', 
	     default_group=>'bin', 
	     default_mode=> 0444} }, $class;
}

sub read
{
	my ($a, $fh, $code) = @@_;
	my $plist;
	if (ref $a) {
		$plist = $a;
	} else {
		$plist = new $a;
	}
	while (<$fh>) {
		next if m/^\s*$/;
		next if defined $code and !&$code;
		chomp;
		OpenBSD::PackingElement::Factory($_, $plist);
	}
	return $plist;
}

sub OpenBSD::PackingList::DirrmOnly
{
	m/^\@@cwd/ || m/^\@@dirrm/ || m/^\@@name/;
}

sub OpenBSD::PackingList::FilesOnly
{
	m/^\@@cwd/ || m/^\@@name/ || !m/^\@@/;
}

sub OpenBSD::PackingList::ConflictOnly
{
	m/^\@@pkgcfl/ || m/^\@@option/ || m/^\@@name/;
}

sub write
{
	my ($self, $fh) = @@_;
	$self->{name}->write($fh);
	if (defined $self->{'no-default-conflict'}) {
		$self->{'no-default-conflict'}->write($fh);
	}
	$self->{extrainfo}->write($fh);
	for my $listname (qw(pkgcfl pkgdep newdepend libdepend items)) {
		if (defined $self->{$listname}) {
			for my $item (@@{$self->{$listname}}) {
				$item->write($fh);
			}
		}
	}
	for my $special (OpenBSD::PackageInfo::info_names()) {
		$self->{$special}->write($fh) if defined $self->{$special};
	}
}

sub fromfile
{
	my ($a, $fname, $code) = @@_;
	open(my $fh, '<', $fname) or return undef;
	my $plist = $a->read($fh, $code);
	close($fh);
	return $plist;
}

sub tofile
{
	my ($self, $fname) = @@_;
	open(my $fh, '>', $fname) or return undef;
	$self->write($fh);
	close($fh) or return undef;
	return 1;
}

sub add2list
{
	my ($plist, $object) = @@_;
	my $category = $object->category();
	$plist->{$category} = [] unless defined $plist->{$category};
	push @@{$plist->{$category}}, $object;
}

sub addunique
{
	my ($plist, $object) = @@_;
	my $category = $object->category();
	if (defined $plist->{$category}) {
		die "Duplicate $category in plist\n";
	}
	$plist->{$category} = $object;
}

sub has
{
	my ($plist, $name) = @@_;
	return defined $plist->{$name};
}

sub get
{
	my ($plist, $name) = @@_;
	return $plist->{$name};
}

sub pkgname($)
{
	my $self = shift;
	return $self->{name}->{name};
}

sub prefix($)
{
	my $self = shift;
	return $self->{state}->{prefix};
}

# allows the autoloader to work correctly
sub DESTROY
{
}

1;
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Time to import OpenBSD once again. Expect breakage.
@
text
@@


1.1.1.2
log
@Import OpenBSD again, for various reasons.
@
text
@d1 1
a1 1
# $OpenBSD: PackingList.pm,v 1.4 2003/12/26 16:44:31 espie Exp $
d82 1
a82 3
	for my $unique_item (qw(extrainfo arch)) {
		$self->{$unique_item}->write($fh) if defined $self->{$unique_item};
	}
@


1.1.1.3
log
@large-scale import of OpenBSD 3.5-current source base including many fixes
note: from now, we will not be binary compatible with OpenBSD apps any
longer (due to syscall numbering differences); both an OpenBSD compat and
a conversion tool for old MirOS #7 apps will be delivered later.

The src/ tree is locked from now.
@
text
@d1 1
a1 1
# $OpenBSD: PackingList.pm,v 1.7 2004/04/28 06:50:21 espie Exp $
a50 15
	$code = \&defaultCode if !defined $code;
	&$code($fh,
		sub {
			local $_ = shift;
			next if m/^\s*$/;
			chomp;
			OpenBSD::PackingElement::Factory($_, $plist);
		});
	return $plist;
}

sub defaultCode
{
	my ($fh, $cont) = @@_;
	local $_;
d52 4
a55 1
		&$cont($_);
d57 1
d60 1
a60 1
sub DirrmOnly
d62 1
a62 6
	my ($fh, $cont) = @@_;
	local $_;
	while (<$fh>) {
		next unless m/^\@@cwd/ || m/^\@@dirrm/ || m/^\@@name/;
		&$cont($_);
	}
d65 1
a65 1
sub FilesOnly
d67 1
a67 6
	my ($fh, $cont) = @@_;
	local $_;
	while (<$fh>) {
	    	next unless m/^\@@cwd/ || m/^\@@name/ || !m/^\@@/;
		&$cont($_);
	}
d70 1
a70 1
sub ConflictOnly
d72 1
a72 25
	my ($fh, $cont) = @@_;
	local $_;
	while (<$fh>) {
	    	next unless m/^\@@pkgcfl/ || m/^\@@option/ || m/^\@@name/;
		&$cont($_);
	}
}

sub SharedStuffOnly
{
	my ($fh, $cont) = @@_;
	local $_;
MAINLOOP:
	while (<$fh>) {
		if (m/^\@@shared/) {
			&$cont($_);
			while(<$fh>) {
				redo MAINLOOP unless m/^\@@md5/ || m/^\@@size/;
				&$cont($_);
			}
		} else {
			next unless m/^\@@cwd/ || m/^\@@dirrm/ || m/^\@@name/;
		}
		&$cont($_);
	}
d151 1
a151 1
sub pkgbase($)
d154 1
a154 6

	if (defined $self->{localbase}) {
		return $self->{localbase}->{name};
	} else {
		return '/usr/local';
	}
@


