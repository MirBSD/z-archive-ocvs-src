head	1.2;
access;
symbols
	cvs-200405160640:1.1.1.2
	cvs-200401271800:1.1.1.2
	cvs-200401261630:1.1.1.2
	cvs-200401021645:1.1.1.2
	cvs-200312222040:1.1.1.2
	cvs-200310020700:1.1.1.2
	cvs-200309271030:1.1.1.2
	cvs-200309251530:1.1.1.2
	cvs-200308302005:1.1.1.2
	cvs-200308171200:1.1.1.2
	ctm-3496:1.1.1.2
	ctm-3449:1.1.1.2
	ctm-3437:1.1.1.2
	cvs-200307191805:1.1.1.2
	ctm-3425:1.1.1.2
	cvs-200307091500:1.1.1.2
	ctm-3389:1.1.1.2
	cvs-200306291430:1.1.1.2
	ctm-3341:1.1.1.2
	MIRBSD_5:1.1.1.2
	cvs-200306082100:1.1.1.2
	ctm-3316:1.1.1.2
	ctm-3272:1.1.1.1
	ctm-3264:1.1.1.1
	cvs-200305071630:1.1.1.1
	MIRBSD_4:1.1.1.1
	ctm-3203:1.1.1.1
	cvs-20030410-1130:1.1.1.1
	ctm-3155:1.1.1.1
	ctm-3132:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.2
date	2003.06.29.19.53.26;	author tg;	state dead;
branches;
next	1.1;

1.1
date	2003.03.22.17.54.16;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.03.22.17.54.16;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2003.06.05.17.46.53;	author tg;	state Exp;
branches;
next	;


desc
@@


1.2
log
@merge the import
amd (automount dæmon) bites the dust
rewrite fake-NLS emulation, copyright to me
foobar! fnord!
@
text
@/*
 * Copyright (c) 1989 Jan-Simon Pendry
 * Copyright (c) 1989 Imperial College of Science, Technology & Medicine
 * Copyright (c) 1989, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * Jan-Simon Pendry at Imperial College, London.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	from: @@(#)fsi_gram.y	8.1 (Berkeley) 6/6/93
 *	$Id: fsi_gram.y,v 1.1 2003/03/22 17:54:16 tg Exp $
 */

%{
#include "../fsinfo/fsinfo.h"
#include <stdio.h>

extern qelem *list_of_hosts, *list_of_automounts;
%}

%union {
	auto_tree *a;
	disk_fs *d;
	ether_if *e;
	host *h;
	qelem *q;
	char *s;
	mount *m;
	fsmount *f;
}

%token	tARCH
%token	tAS
%token	tAUTOMOUNT
%token	tCLUSTER
%token	tCONFIG
%token	tDUMPSET
%token	tEQ
%token	tEXPORTFS
%token	tFREQ
%token	tFROM
%token	tFS
%token	tFSTYPE
%token	tHWADDR
%token	tINADDR
%token	tHOST
%token	tLOCALHOST
%token	tLOG
%token	tMOUNT
%token	tNETMASK
%token	tNETIF
%token	tVOLNAME
%token	tOPTS
%token	tOS
%token	tPASSNO
%token	tSEL
%token	<s> tSTR

%start list_of_hosts

%type <a> automount
%type <q> automount_tree
%type <e> ether_attr
%type <m> dir_tree_info
%type <d> filesystem fs_info_list
%type <h> host host_attr host_attr_list
%type <q> list_of_hosts list_of_filesystems list_of_mounts dir_tree
%type <f> localinfo_list
%type <s> opt_auto_opts

%%

list_of_hosts :
	  /* empty */
	  { $$ = new_que(); }

	| list_of_hosts host
	  { if ($2) ins_que((qelem *) $2, list_of_hosts->q_back);
	    $$ = $1; }

	| list_of_hosts automount
	  { if ($2) ins_que((qelem *) $2, list_of_automounts->q_back);
	    $$ = $1; }
	;

/*
 * A new host:
 *
 * host foo.domain
 */
host :
	  tHOST host_attr list_of_filesystems list_of_mounts
	  { $$ = $2; $$->h_disk_fs = $3; $$->h_mount = $4; }

	| error tHOST host_attr list_of_filesystems list_of_mounts
	  { $$ = $3; $$->h_disk_fs = $4; $$->h_mount = $5; }

	;

host_attr :
	  tSTR
	  { $$ = new_host(); set_host($$, HF_HOST, $1); }

	| '{' host_attr_list '}' tSTR
	  { $$ = $2; set_host($$, HF_HOST, $4); }

	;

host_attr_list :
	  /* empty */
	  { $$ = new_host(); }

	| host_attr_list tNETIF tSTR '{' ether_attr '}'
	  { if ($5) {
		$5->e_if = $3;
		$$ = $1; set_host($$, HF_ETHER, $5); }
	  }

	| host_attr_list tCONFIG tSTR
	  { $$ = $1; set_host($$, HF_CONFIG, $3); }

	| host_attr_list tARCH '=' tSTR
	  { $$ = $1; set_host($$, HF_ARCH, $4); }

	| host_attr_list tOS '=' tSTR
	  { $$ = $1; set_host($$, HF_OS, $4); }

	| host_attr_list tCLUSTER '=' tSTR
	  { $$ = $1; set_host($$, HF_CLUSTER, $4); }

	| host_attr_list error '=' tSTR
	  { yyerror("unknown host attribute"); }
	;

ether_attr :
	  /* empty */
	  { $$ = new_ether_if(); }

	| ether_attr tINADDR '=' tSTR
	  { $$ = $1; set_ether_if($$, EF_INADDR, $4); }
	| ether_attr tNETMASK '=' tSTR
	  { $$ = $1; set_ether_if($$, EF_NETMASK, $4); }
	| ether_attr tHWADDR '=' tSTR
	  { $$ = $1; set_ether_if($$, EF_HWADDR, $4); }
	;

/*
 * A new automount tree:
 *
 * automount /mountpoint { ... }
 */
automount :
	  tAUTOMOUNT opt_auto_opts automount_tree
	  { if ($3) {
		$$ = new_auto_tree($2, $3);
	    } else {
		$$ = 0;
	    }
	  }

	| tAUTOMOUNT error
	  { $$ = 0; }
	;

opt_auto_opts :
	  /* empty */
	  { $$ = strdup(""); }

	| tOPTS tSTR
	  { $$ = $2; }
	;

list_of_filesystems :
	  /* empty */
	  { $$ = 0; }

	| list_of_filesystems filesystem
	  { if ($2) {
		if ($1)
			$$ = $1;
		else
			$$ = new_que();
		ins_que(&$2->d_q, $$->q_back);
	    } else {
		$$ = $1;
	    }
	  }
	;

/*
 * A new filesystem:
 *
 * fs /dev/whatever { ... }
 */
filesystem :
	  tFS tSTR '{' fs_info_list '}'
	  { $4->d_dev = $2; $$ = $4; }

	| tFS error '}'
	  { $$ = (disk_fs *) 0; }
	;

/*
 * Per-filesystem information:
 *
 * fstype - the type of the filesystem (4.2, nfs, swap, export)
 * opts - the mount options ("rw,grpid")
 * passno - fsck pass number
 * freq - dump frequency
 * dumpset - tape set for filesystem dumps
 * mount - where to mount this filesystem
 * log - log device
 */
fs_info_list :
	  /* empty */
	  { $$ = new_disk_fs(); }

	| fs_info_list tFSTYPE '=' tSTR
	  { $$ = $1; set_disk_fs($$, DF_FSTYPE, $4); }

	| fs_info_list tOPTS '=' tSTR
	  { $$ = $1; set_disk_fs($$, DF_OPTS, $4); }

	| fs_info_list tPASSNO '=' tSTR
	  { $$ = $1; set_disk_fs($$, DF_PASSNO, $4); }

	| fs_info_list tFREQ '=' tSTR
	  { $$ = $1; set_disk_fs($$, DF_FREQ, $4); }

	| fs_info_list tMOUNT dir_tree
	  { $$ = $1; set_disk_fs($$, DF_MOUNT, (char *) $3); }

	| fs_info_list tDUMPSET '=' tSTR
	  { $$ = $1; set_disk_fs($$, DF_DUMPSET, $4); }

	| fs_info_list tLOG '=' tSTR
	  { $$ = $1; set_disk_fs($$, DF_LOG, $4); }

	| fs_info_list error '=' tSTR
	  { yyerror("unknown filesystem attribute"); }
	;

/*
 * An automount tree:
 *
 * name = "volname"	name is a reference to volname
 * name -> "string"	name is a link to "string"
 * name { ... }		name is an automount tree
 */
automount_tree :
	  /* empty */
	  { $$ = 0; }

	| automount_tree tSTR '=' tSTR
	  { automount *a = new_automount($2);
	    a->a_volname = $4;
	    if ($1)
		$$ = $1;
	    else
		$$ = new_que();
	    ins_que(&a->a_q, $$->q_back);
	  }

	| automount_tree tSTR tEQ tSTR
	  { automount *a = new_automount($2);
	    a->a_symlink = $4;
	    if ($1)
		$$ = $1;
	    else
		$$ = new_que();
	    ins_que(&a->a_q, $$->q_back);
	  }

	| automount_tree tSTR '{' automount_tree '}'
	  { automount *a = new_automount($2);
	    a->a_mount = $4;
	    if ($1)
		$$ = $1;
	    else
		$$ = new_que();
	    ins_que(&a->a_q, $$->q_back);
	  }
	;

dir_tree :
	  /* empty */
	  { $$ = 0; }

	| dir_tree tSTR '{' dir_tree_info dir_tree '}'
	  { $4->m_mount = $5;
	    $4->m_name = $2;
	    if ($2[0] != '/' && $2[1] && strchr($2+1, '/'))
		yyerror("not allowed '/' in a directory name");
	    if ($1)
		$$ = $1;
	    else
		$$ = new_que();
	    ins_que(&$4->m_q, $$->q_back);
	  }
	;

dir_tree_info :
	  /* empty */
	  { $$ = new_mount(); }

	| dir_tree_info tEXPORTFS tSTR
	  { $$ = $1; set_mount($$, DM_EXPORTFS, $3); }

	| dir_tree_info tVOLNAME tSTR
	  { $$ = $1; set_mount($$, DM_VOLNAME, $3); }

	| dir_tree_info tSEL tSTR
	  { $$ = $1; set_mount($$, DM_SEL, $3); }

	| dir_tree_info error '=' tSTR
	  { yyerror("unknown directory attribute"); }
	;

/*
 * Additional mounts on a host
 *
 * mount "volname" ...
 */
list_of_mounts :
	  /* empty */
	  { $$ = 0; }

	| list_of_mounts tMOUNT tSTR localinfo_list
	  { set_fsmount($4, FM_VOLNAME, $3);
	    if ($1)
		$$ = $1;
	    else
		$$ = new_que();
	    ins_que(&$4->f_q, $$->q_back);
	    }
	;

/*
 * Mount info:
 *
 * from "hostname"	- obtain the object from the named host
 * as "string"		- where to mount, if different from the volname
 * opts "string"	- mount options
 * fstype "type"	- type of filesystem mount, if not nfs
 */
localinfo_list :
	  /* empty */
	  { $$ = new_fsmount(); }

	| localinfo_list tAS tSTR
	  { $$ = $1; set_fsmount($$, FM_LOCALNAME, $3); }

	| localinfo_list tFROM tSTR
	  { $$ = $1; set_fsmount($$, FM_FROM, $3); }

	| localinfo_list tFSTYPE tSTR
	  { $$ = $1; set_fsmount($$, FM_FSTYPE, $3); }

	| localinfo_list tOPTS tSTR
	  { $$ = $1; set_fsmount($$, FM_OPTS, $3); }

	| localinfo_list error '=' tSTR
	  { yyerror("unknown mount attribute"); }
	;
@


1.1
log
@Initial revision
@
text
@d39 1
a39 1
 *	$Id: fsi_gram.y,v 1.1.1.1 1995/10/18 08:47:18 deraadt Exp $
@


1.1.1.1
log
@Import OpenBSD 3.3 source repository from CTM 3132 the first time
This opens an OpenBSD-mirabile (aka MirBSD) repository.

### MirBSD is:
# Copyright (c) 1982-2003 by Thorsten "mirabile" Glaser <x86@@ePost.de>
# Copyright © 1968-2003  The authors of And contributors to UNIX®, the
#       C Language, BSD/Berkeley Unix; 386BSD, NetBSD 1.1 and OpenBSD.
#
# Anyone who obtained a copy of this work is hereby permitted to freely use,
# distribute, modify, merge, sublicence, give away or sell it as long as the
# authors are given due credit and the following notice is retained:
#
# This work is provided "as is", with no explicit or implicit warranty what-
# soever. Use it only at your own risk. In no event may an author or contri-
# butor be held liable for any damage, directly or indirectly, that origina-
# ted through or is caused by creation or modification of this work.

MirBSD is my private tree. MirBSD does not differ very much from OpenBSD
and intentionally tracks OpenBSD. That's why it _is_ OpenBSD, just not the
official one. It's like with DarrenBSD.

At time of this writing, no advertising for MirBSD must be done,
because the advertising clause has not yet been sorted out.

http://templeofhate.com/tglaser/MirBSD/index.php
@
text
@@


1.1.1.2
log
@Import latest OpenBSD CVS tree by CTM in order
to sync the base system and ports tree with Them.

This includes the recent licence changes as well - by
importing the changed base and re-applying the diffs
(with cvs up -j -j) they are inherited, and we're not
bound to the removed clauses any longer.
@
text
@d18 5
a22 1
 * 3. Neither the name of the University nor the names of its contributors
d39 1
a39 1
 *	$Id: fsi_gram.y,v 1.2 2003/06/02 23:36:52 millert Exp $
@

