head	1.1;
branch	1.1.1;
access;
symbols
	tg-mergetmp-mirosx-1:1.1.1.2
	tg-mergefixes-1-branch:1.1.1.2.0.8
	tg-mergefixes-1-base:1.1.1.2
	MIROS_X:1.1.1.2.0.6
	MIROS_X_BASE:1.1.1.2
	tg-mergetmp-3:1.1.1.2
	MIRBSD_XP_MIRPPC:1.1.1.2.0.4
	MIRBSD_XP_SPARC_BASE:1.1.1.2
	MIRBSD_XP_SPARC:1.1.1.2.0.2
	cvs-200405160640:1.1.1.2
	cvs-200401271800:1.1.1.1
	cvs-200401261630:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.1
date	2004.01.26.19.12.16;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2004.01.26.19.12.16;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2004.05.16.07.23.05;	author tg;	state Stab;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@/*	$OpenBSD: ifstated.c,v 1.1 2004/01/23 21:34:30 mcbride Exp $	*/

/*
 * Copyright (c) 2004 Marco Pfatschbacher <mpf@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

/*
 * ifstated listens to link_state transitions on interfaces
 * and executes predefined commands.
 */

#include <sys/types.h>
#include <sys/time.h>
#include <sys/ioctl.h>
#include <sys/socket.h>

#include <net/if.h>
#include <net/route.h>
#include <netinet/in.h>

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <fcntl.h>
#include <signal.h>
#include <err.h>
#include <util.h>
#include <unistd.h>
#include <syslog.h>
#include <stdarg.h>


#define CMD_LENGTH 100
#define CONF_LINES 50

struct conf_t {
	u_short dev;			/* if_index  */
	u_char state;			/* if_link_state */
	char cmd[CMD_LENGTH];
} conf_table[CONF_LINES];

char	*state_name[] = { "UNKNOWN", "DOWN", "UP" };
int	opt_debug = 0;
int	opt_inhibit = 0; 		/* don't run scripts on startup */
char 	*configfile = "/etc/ifstated.conf";

#define MAX_IFINDEX 64
int 	prev_states[MAX_IFINDEX]; 	/* -1 to trigger init */

volatile sig_atomic_t got_sighup;

void	loop(void);
void	eval_rtmsg(struct rt_msghdr *, int);
void	scan_table(int, int);
void	fetch_state(void);
void	usage(void);
void	doconfig(const char*);
void	sighup_handler(int);
#define LOG(s,a) if (opt_debug) \
	printf("ifstated: " s , a ); \
	else \
	syslog(LOG_DAEMON, s , a);


void
usage(void)
{
	fprintf(stderr, "usage: ifstated [-hdi] [-f config]\n");
	exit(1);
}

int
main(int argc, char *argv[])
{
	int ch;
	struct sigaction sact;

	while ((ch = getopt(argc, argv, "hdif:")) != -1) {
		switch (ch) {
		case 'h':
			usage();
			break;
		case 'd':
			opt_debug = 1;
			break;
		case 'i':
			opt_inhibit = 1;
			break;
		case 'f':
			configfile = optarg;
			break;
		default:
			usage();
		}
	}

	doconfig(configfile);

	bzero((char *)&sact, sizeof sact);
	sigemptyset(&sact.sa_mask);
	sact.sa_flags = 0;
	/* sact.sa_flags |= SA_RESTART; */
	sact.sa_handler = sighup_handler;
	(void) sigaction(SIGHUP, &sact, NULL);

	if (!opt_debug) {
		daemon(0, 0);
		setproctitle(NULL);
	}

	LOG("%s\n", "started");

	loop();

	LOG("%s\n", "dropped out of main loop. exiting");
	return (0);
}

void
doconfig(const char *conf)
{
	FILE *fconfig = NULL;
	char *line = NULL;
	size_t len, lineno = 0;
	int device = -1;
	int state = -1;
	int nrofstates = sizeof(state_name) / sizeof(char *);
	int cf_line = 0;

	fconfig = fopen(conf, "r");

	if (fconfig == NULL)
		errx(1, "could not open config: %s\n", conf);

	bzero(conf_table, sizeof(conf_table));
	bzero(prev_states, sizeof(prev_states));

	while ((line = fparseln(fconfig, &len, &lineno, 
	    NULL, FPARSELN_UNESCALL)) != NULL) {

		char statename[20];
		char devname[IF_NAMESIZE];
		int i;
		char *cp;
		
#define WS      " \t\n"
		cp = line;

		cp += strspn(cp, WS);
		if (cp[0] == '\0') {
			/* empty line */
			free(line);
			continue;
		}

		if (cf_line >= CONF_LINES)
			errx(1, "too much lines in config\n");

		/* commands */
		if (line[0] == ' ' || line[0] == '\t') {
			cp = line;
			while (*cp == ' ' || *cp == '\t')
				cp++;

			if (state == -1)
				errx(1, "no context for config line: %lu\n",
				    (u_long) lineno);

			conf_table[cf_line].dev = device;
			conf_table[cf_line].state = state;
			snprintf(conf_table[cf_line].cmd, CMD_LENGTH, "%s", cp);
			/* read state via fetch_state() at startup */
			prev_states[device] = -1;

			cf_line++;
			free(line);
			continue;
		}

		/* context */
		state = -1;

		if (sscanf(line, "%[^.].%19[^:]\n", devname, statename) != 2)
			errx(1, "bad state definition at: %d\n", lineno);

		if ((device = if_nametoindex(devname)) == 0)
			errx(1, "no such device %s at: %d\n", devname, lineno);

		for (i = nrofstates - 1; i >= 0; i--)
			if (strncmp(state_name[i], statename, 
			    strlen(state_name[i])) == 0)
				state = i;

		if (state == -1)
			errx(1, "bad state definition at: %d\n", lineno);

		if (device >= MAX_IFINDEX)
			errx(1, "ifindex exceeded at: %d\n", lineno);

		free(line);
	}
	fclose(fconfig);
}

void
loop(void)
{
	int sockfd;
	int n;
	char msg[2048];

	if ((sockfd = socket(PF_ROUTE, SOCK_RAW, 0)) < 0)
		errx(1, "no routing socket");

	if (!opt_inhibit)
		fetch_state();

	for (;;) {
		n = read(sockfd, msg, sizeof(msg)); 

		/* reread config, run commands for current states */
		if (got_sighup) {
			got_sighup = 0;
			LOG("%s\n", "restart");
			doconfig(configfile);
			if (!opt_inhibit)
				fetch_state();
		}

		eval_rtmsg((struct rt_msghdr *) msg, n);
	}
}

void
sighup_handler(int x)
{
	got_sighup = 1;
}

void
eval_rtmsg(struct rt_msghdr *rtm, int msglen)
{
	struct if_msghdr *ifm;

	/* XXX ignore errors? */
	if (msglen < sizeof(struct rt_msghdr))
		return;

	if (rtm->rtm_version != RTM_VERSION)
		return;

	if (rtm->rtm_type != RTM_IFINFO)
		return;

	ifm = (struct if_msghdr *)rtm;
	scan_table(ifm->ifm_index, ifm->ifm_data.ifi_link_state);
}


/*
 * Scan conf_table for commands to run.
 * Ignore, if there was no change to the previous state.
 */
void
scan_table(int if_index, int state)
{
	int i = 0;

	while (conf_table[i].cmd[0] != '\0') {
		if (conf_table[i].dev == if_index &&
		    conf_table[i].state == state &&
		    if_index <= MAX_IFINDEX &&
		    prev_states[if_index] != state) {

			LOG("%s\n", conf_table[i].cmd);
			system(conf_table[i].cmd);
		}
		i++;
	}
	prev_states[if_index] = state;
}

/* Fetch the current link states. */
void
fetch_state(void)
{
	int i;
	int sock = socket(AF_INET, SOCK_DGRAM, 0);
	
	for (i = 0; i < MAX_IFINDEX; i++) {
		struct ifreq ifr;
		struct if_data  ifrdat;

		char if_name[IF_NAMESIZE];

		if (prev_states[i] != -1)
			continue;

		if_indextoname(i, if_name);

		strlcpy(ifr.ifr_name, if_name, sizeof(ifr.ifr_name));
		ifr.ifr_data = (caddr_t)&ifrdat;

		if (ioctl(sock, SIOCGIFDATA, (caddr_t)&ifr) == -1)
			continue;

		scan_table(i, ifrdat.ifi_link_state);

	}
	close(sock);
}
@


1.1.1.1
log
@Import OpenBSD as of today again (seems pretty stable, I hope)

Prominent changes: more bgpd, tcpmd5; tcpdump/isakmpd fixes
@
text
@@


1.1.1.2
log
@large-scale import of OpenBSD 3.5-current source base including many fixes
note: from now, we will not be binary compatible with OpenBSD apps any
longer (due to syscall numbering differences); both an OpenBSD compat and
a conversion tool for old MirOS #7 apps will be delivered later.

The src/ tree is locked from now.
@
text
@d1 1
a1 1
/*	$OpenBSD: ifstated.c,v 1.17 2004/04/27 11:55:27 jmc Exp $	*/
a4 1
 * Copyright (c) 2004 Ryan McBride <mcbride@@openbsd.org>
a27 1
#include <sys/wait.h>
a38 1
#include <event.h>
a42 1
#include <ifaddrs.h>
a43 1
#include "ifstated.h"
d45 2
a46 1
struct	 ifsd_config *conf = NULL, *newconf = NULL;
d48 19
a66 16
int	 opts = 0;
int	 opt_debug = 0;
int	 opt_inhibit = 0;
char	*configfile = "/etc/ifstated.conf";
struct event	rt_msg_ev, sighup_ev, startup_ev, sigchld_ev;

void	startup_handler(int, short, void *);
void	sighup_handler(int, short, void *);
int	load_config(void);
void	sigchld_handler(int, short, void *);
void	rt_msg_handler(int, short, void *);
void	external_handler(int, short, void *);
void	external_async_exec(struct ifsd_external *);
void	check_external_status(struct ifsd_state *);
void	external_evtimer_setup(struct ifsd_state *, int);
int	scan_ifstate(int, int, struct ifsd_state *);
d70 6
a75 8
void	adjust_expressions(struct ifsd_expression_list *, int);
void	eval_state(struct ifsd_state *);
void	state_change(void);
void	do_action(struct ifsd_action *);
void	remove_action(struct ifsd_action *, struct ifsd_state *);
void	remove_expression(struct ifsd_expression *, struct ifsd_state *);
void	log_init(int);
void	logit(int level, const char *fmt, ...);
d80 1
a80 4
	extern char* __progname;

	fprintf(stderr, "usage: %s [-dhinv] [-D macro=value] [-f file]\n",
		__progname);
d88 1
a88 1
	struct timeval tv;
d90 1
a90 1
	while ((ch = getopt(argc, argv, "dD:f:hniv")) != -1) {
a91 11
		case 'd':
			opt_debug = 1;
			break;
		case 'D':
			if (cmdline_symset(optarg) < 0)
				errx(1, "could not parse macro definition %s",
				    optarg);
			break;
		case 'f':
			configfile = optarg;
			break;
d95 2
a96 2
		case 'n':
			opts |= IFSD_OPT_NOACTION;
d101 2
a102 4
		case 'v':
			if (opts & IFSD_OPT_VERBOSE)
				opts |= IFSD_OPT_VERBOSE2;
			opts |= IFSD_OPT_VERBOSE;
d109 8
a116 6
	if (opts & IFSD_OPT_NOACTION) {
		if ((newconf = parse_config(configfile, opts)) == NULL)
			exit(1);
		warnx("configuration OK");
		exit(0);
	}
d123 1
a123 2
	event_init();
	log_init(opt_debug);
d125 1
a125 2
	signal_set(&sigchld_ev, SIGCHLD, sigchld_handler, &sigchld_ev);
	signal_add(&sigchld_ev, NULL);
d127 2
a128 8
	/* Loading the config needs to happen in the event loop */
	tv.tv_usec = 0;
	tv.tv_sec = 0;
	evtimer_set(&startup_ev, startup_handler, &startup_ev);
	evtimer_add(&startup_ev, &tv);

	event_loop(0);
	exit(0);
d132 1
a132 1
startup_handler(int fd, short event, void *arg)
d134 33
a166 1
	int rt_fd;
d168 2
a169 4
	if (load_config() != 0) {
		logit(IFSD_LOG_NORMAL, "unable to load config");
		exit(1);
	}
d171 15
a185 2
	if ((rt_fd = socket(PF_ROUTE, SOCK_RAW, 0)) < 0)
		err(1, "no routing socket");
d187 4
a190 3
	event_set(&rt_msg_ev, rt_fd, EV_READ|EV_PERSIST,
	    rt_msg_handler, &rt_msg_ev);
	event_add(&rt_msg_ev, NULL);
d192 2
a193 2
	signal_set(&sighup_ev, SIGHUP, sighup_handler, &sighup_ev);
	signal_add(&sighup_ev, NULL);
d195 2
a196 2
	logit(IFSD_LOG_NORMAL, "started");
}
d198 2
a199 7
void
sighup_handler(int fd, short event, void *arg)
{
	logit(IFSD_LOG_NORMAL, "reloading config");
	if (load_config() != 0)
		logit(IFSD_LOG_NORMAL, "unable to reload config");
}
d201 4
a204 20
int
load_config(void)
{
	if ((newconf = parse_config(configfile, opts)) == NULL)
		return (-1);
	if (conf != NULL)
		clear_config(conf);
	conf = newconf;
	conf->always.entered = time(NULL);
	fetch_state();
	eval_state(&conf->always);
	if (conf->curstate != NULL) {
		logit(IFSD_LOG_NORMAL,
		    "initial state: %s", conf->curstate->name);
		conf->curstate->entered = time(NULL);
		eval_state(conf->curstate);
	}
	external_evtimer_setup(&conf->always, IFSD_EVTIMER_ADD);
	return (0);
}
d206 2
a207 7
void
rt_msg_handler(int fd, short event, void *arg)
{
	struct if_msghdr ifm;
	char msg[2048];
	struct rt_msghdr *rtm = (struct rt_msghdr *)&msg;
	int len;
d209 2
a210 1
	len = read(fd, msg, sizeof(msg));
d212 3
a214 18
	/* XXX ignore errors? */
	if (len < sizeof(struct rt_msghdr))
		return;

	if (rtm->rtm_version != RTM_VERSION)
		return;

	if (rtm->rtm_type != RTM_IFINFO)
		return;

	memcpy(&ifm, rtm, sizeof(ifm));

	if (scan_ifstate(ifm.ifm_index, ifm.ifm_data.ifi_link_state,
	    &conf->always))
		eval_state(&conf->always);
	if ((conf->curstate != NULL) && scan_ifstate(ifm.ifm_index,
	    ifm.ifm_data.ifi_link_state, conf->curstate))
		eval_state(conf->curstate);
d218 1
a218 1
sigchld_handler(int fd, short event, void *arg)
d220 3
a222 4
	check_external_status(&conf->always);
	if (conf->curstate != NULL)
		check_external_status(conf->curstate);
}
d224 2
a225 5
void
external_handler(int fd, short event, void *arg)
{
	struct ifsd_external *external = (struct ifsd_external *)arg;
	struct timeval tv;
d227 2
a228 5
	/* re-schedule */
	tv.tv_usec = 0;
	tv.tv_sec = external->frequency;
	evtimer_set(&external->ev, external_handler, external);
	evtimer_add(&external->ev, &tv);
d230 2
a231 3
	/* execute */
	external_async_exec(external);
}
d233 8
a240 5
void
external_async_exec(struct ifsd_external *external)
{
	pid_t pid;
	char *argp[] = {"sh", "-c", NULL, NULL};
d242 1
a242 19
	if (external->pid > 0) {
		logit(IFSD_LOG_NORMAL,
		    "previous command %s still running, killing it",
		    external->command);
		kill(external->pid, SIGKILL);
		external->pid = 0;
	}

	argp[2] = external->command;
	logit(IFSD_LOG_VERBOSE, "running %s", external->command);
	pid = fork();
	if (pid < 0) {
		logit(IFSD_LOG_QUIET, "fork error");
	} else if (pid == 0) {
		execv("/bin/sh", argp);
		_exit(1);
		/* NOTREACHED */
	} else {
		external->pid = pid;
d247 1
a247 1
check_external_status(struct ifsd_state *state)
d249 1
a249 57
	struct ifsd_external *external, *end = NULL;
	struct ifsd_expression_list expressions;
	int status, s, changed = 0;

	TAILQ_INIT(&expressions);

	/* Do this manually; change ordering so the oldest is first */
	external = TAILQ_FIRST(&state->external_tests);
	while (external != NULL && external != end) {
		struct ifsd_external *newexternal;

		newexternal = TAILQ_NEXT(external, entries);

		if (external->pid <= 0)
			goto loop;

		if (wait4(external->pid, &s, WNOHANG, NULL) == 0)
			goto loop;

		external->pid = 0;
		if (end == NULL)
			end = external;
		if (WIFEXITED(s))
			status = WEXITSTATUS(s);
		else {
			logit(IFSD_LOG_QUIET,
			    "%s exited abnormally", external->command);
			goto loop;
		}

		if (external->prevstatus != status &&
		    (external->prevstatus != -1 || !opt_inhibit)) {
			struct ifsd_expression *expression;

			changed = 1;
			TAILQ_FOREACH(expression,
			    &external->expressions, entries) {
				TAILQ_INSERT_TAIL(&expressions,
				    expression, eval);
				if (status == 0)
					expression->truth = 1;
				else
					expression->truth = 0;
			}
		}
		external->lastexec = time(NULL);
		TAILQ_REMOVE(&state->external_tests, external, entries);
		TAILQ_INSERT_TAIL(&state->external_tests, external, entries);
		external->prevstatus = status;
loop:
		external = newexternal;
	}

	if (changed) {
		adjust_expressions(&expressions, conf->maxdepth);
		eval_state(state);
	}
d253 1
a253 1
external_evtimer_setup(struct ifsd_state *state, int action)
d255 1
a255 1
	struct ifsd_external *external;
d257 3
a259 31
	if (state != NULL) {
		switch (action) {
		case IFSD_EVTIMER_ADD:
			TAILQ_FOREACH(external,
			    &state->external_tests, entries) {
				struct timeval tv;

				/* run it once right away */
				external_async_exec(external);

				/* schedule it for later */
				tv.tv_usec = 0;
				tv.tv_sec = external->frequency;
				evtimer_set(&external->ev, external_handler,
				    external);
				evtimer_add(&external->ev, &tv);
			}
			break;
		case IFSD_EVTIMER_DEL:
			TAILQ_FOREACH(external,
			    &state->external_tests, entries) {
				if (external->pid > 0) {
					kill(external->pid, SIGKILL);
					external->pid = 0;
				}
				evtimer_del(&external->ev);
			}
			break;
		}
	}
}
d261 2
a262 32
int
scan_ifstate(int ifindex, int s, struct ifsd_state *state)
{
	struct ifsd_ifstate *ifstate;
	struct ifsd_expression_list expressions;
	int changed = 0;

	TAILQ_INIT(&expressions);

	TAILQ_FOREACH(ifstate, &state->interface_states, entries) {
		if (ifstate->ifindex == ifindex) {
			if (ifstate->prevstate != s &&
			    (ifstate->prevstate != -1 || !opt_inhibit)) {
				struct ifsd_expression *expression;
				int truth;

				if (ifstate->ifstate == s)
					truth = 1;
				else
					truth = 0;

				TAILQ_FOREACH(expression,
				    &ifstate->expressions, entries) {
					expression->truth = truth;
					TAILQ_INSERT_TAIL(&expressions,
					    expression, eval);
					changed = 1;
				}
				ifstate->prevstate = s;
			}
		}
	}
d264 2
a265 15
	if (changed)
		adjust_expressions(&expressions, conf->maxdepth);
	return (changed);
}

/*
 * Do a bottom-up ajustment of the expression tree's truth value,
 * level-by-level to ensure that each expression's subexpressions have been
 * evaluated.
 */
void
adjust_expressions(struct ifsd_expression_list *expressions, int depth)
{
	struct ifsd_expression_list nexpressions;
	struct ifsd_expression *expression;
d267 2
a268 45
	TAILQ_INIT(&nexpressions);
	while ((expression = TAILQ_FIRST(expressions)) != NULL) {
		TAILQ_REMOVE(expressions, expression, eval);
		if (expression->depth == depth) {
			struct ifsd_expression *te;

			switch (expression->type) {
			case IFSD_OPER_AND:
				if (expression->left->truth &&
				    expression->right->truth)
					expression->truth = 1;
				else
					expression->truth = 0;
				break;
			case IFSD_OPER_OR:
				if (expression->left->truth ||
				    expression->right->truth)
					expression->truth = 1;
				else
					expression->truth = 0;
				break;
			case IFSD_OPER_NOT:
				if (expression->right->truth)
					expression->truth = 0;
				else
					expression->truth = 1;
				break;
			default:
				break;
			}
			if (expression->parent != NULL) {
				if (TAILQ_EMPTY(&nexpressions))
				te = NULL;
				TAILQ_FOREACH(te, &nexpressions, eval)
					if (expression->parent == te)
						break;
				if (te == NULL)
					TAILQ_INSERT_TAIL(&nexpressions,
					    expression->parent, eval);
			}
		} else
			TAILQ_INSERT_TAIL(&nexpressions, expression, eval);
	}
	if (depth > 0)
		adjust_expressions(&nexpressions, depth - 1);
a270 9
void
eval_state(struct ifsd_state *state)
{
	struct ifsd_external *external = TAILQ_FIRST(&state->external_tests);
	if (external == NULL || external->lastexec >= state->entered) {
		do_action(state->always);
		state_change();
	}
}
d273 2
a274 1
 *If a previous action included a state change, process it.
d277 1
a277 1
state_change(void)
d279 1
a279 16
	if (conf->nextstate != NULL && conf->curstate != conf->nextstate) {
		logit(IFSD_LOG_NORMAL, "changing state to %s",
		    conf->nextstate->name);
		evtimer_del(&conf->curstate->ev);
		if (conf->curstate != NULL)
			external_evtimer_setup(conf->curstate,
			    IFSD_EVTIMER_DEL);
		conf->curstate = conf->nextstate;
		conf->nextstate = NULL;
		conf->curstate->entered = time(NULL);
		external_evtimer_setup(conf->curstate, IFSD_EVTIMER_ADD);
		fetch_state();
		do_action(conf->curstate->init);
		fetch_state();
	}
}
d281 5
a285 7
/*
 * Run recursively through the tree of actions.
 */
void
do_action(struct ifsd_action *action)
{
	struct ifsd_action *subaction;
d287 2
a288 15
	switch (action->type) {
	case IFSD_ACTION_COMMAND:
		logit(IFSD_LOG_NORMAL, "running %s", action->act.command);
		system(action->act.command);
		break;
	case IFSD_ACTION_CHANGESTATE:
		conf->nextstate = action->act.nextstate;
		break;
	case IFSD_ACTION_CONDITION:
		if ((action->act.c.expression != NULL &&
		    action->act.c.expression->truth) ||
		    action->act.c.expression == NULL) {
			TAILQ_FOREACH(subaction, &action->act.c.actions,
			    entries)
				do_action(subaction);
d290 1
a290 5
		break;
	default:
		logit(IFSD_LOG_DEBUG, "do_action: unknown action %d",
		    action->type);
		break;
d292 1
d295 1
a295 3
/*
 * Fetch the current link states.
 */
d299 1
a299 2
	struct ifaddrs *ifap, *ifa;
	char *oname = NULL;
d301 2
a302 5

	if (getifaddrs(&ifap) != 0)
		err(1, "getifaddrs");

	for (ifa = ifap; ifa; ifa = ifa->ifa_next) {
d306 3
a308 1
		if (oname && !strcmp(oname, ifa->ifa_name))
a309 1
		oname = ifa->ifa_name;
d311 3
a313 1
		strlcpy(ifr.ifr_name, ifa->ifa_name, sizeof(ifr.ifr_name));
d319 2
a320 5
		scan_ifstate(if_nametoindex(ifa->ifa_name),
		    ifrdat.ifi_link_state, &conf->always);
		if (conf->curstate != NULL)
			scan_ifstate(if_nametoindex(ifa->ifa_name),
			    ifrdat.ifi_link_state, conf->curstate);
a321 1
	freeifaddrs(ifap);
a322 124
}



/*
 * Clear the config.
 */
void
clear_config(struct ifsd_config *oconf)
{
	struct ifsd_state *state;

	external_evtimer_setup(&conf->always, IFSD_EVTIMER_DEL);
	if (conf != NULL && conf->curstate != NULL)
		external_evtimer_setup(conf->curstate, IFSD_EVTIMER_DEL);
	while ((state = TAILQ_FIRST(&oconf->states)) != NULL) {
		TAILQ_REMOVE(&oconf->states, state, entries);
		remove_action(state->init, state);
		remove_action(state->always, state);
		free(state->name);
		free(state);
	}
	remove_action(oconf->always.init, &oconf->always);
	remove_action(oconf->always.always, &oconf->always);
	free(oconf);
}

void
remove_action(struct ifsd_action *action, struct ifsd_state *state)
{
	struct ifsd_action *subaction;

	if (action == NULL || state == NULL)
		return;

	switch (action->type) {
	case IFSD_ACTION_LOG:
		free(action->act.logmessage);
		break;
	case IFSD_ACTION_COMMAND:
		free(action->act.command);
		break;
	case IFSD_ACTION_CHANGESTATE:
		break;
	case IFSD_ACTION_CONDITION:
		if (action->act.c.expression != NULL)
			remove_expression(action->act.c.expression, state);
		while ((subaction =
		    TAILQ_FIRST(&action->act.c.actions)) != NULL) {
			TAILQ_REMOVE(&action->act.c.actions,
			    subaction, entries);
			remove_action(subaction, state);
		}
	}
	free(action);
}

void
remove_expression(struct ifsd_expression *expression,
    struct ifsd_state *state)
{
	switch (expression->type) {
	case IFSD_OPER_IFSTATE:
		TAILQ_REMOVE(&expression->u.ifstate->expressions, expression,
		    entries);
		if (--expression->u.ifstate->refcount == 0) {
			TAILQ_REMOVE(&state->interface_states,
			    expression->u.ifstate, entries);
			free(expression->u.ifstate);
		}
		break;
	case IFSD_OPER_EXTERNAL:
		TAILQ_REMOVE(&expression->u.external->expressions, expression,
		    entries);
		if (--expression->u.external->refcount == 0) {
			TAILQ_REMOVE(&state->external_tests,
			    expression->u.external, entries);
			free(expression->u.external->command);
			event_del(&expression->u.external->ev);
			free(expression->u.external);
		}
		break;
	default:
		if (expression->left != NULL)
			remove_expression(expression->left, state);
		if (expression->right != NULL)
			remove_expression(expression->right, state);
		break;
	}
	free(expression);
}

void
log_init(int n_debug)
{
	extern char	*__progname;

	if (!n_debug)
		openlog(__progname, LOG_PID | LOG_NDELAY, LOG_DAEMON);
}

void
logit(int level, const char *fmt, ...)
{
	va_list	 ap;
	char	*nfmt;

	if (conf == NULL || level > conf->loglevel)
		return;

	va_start(ap, fmt);
	if (opt_debug) {
		/* best effort in out of mem situations */
		if (asprintf(&nfmt, "ifstated: %s\n", fmt) != -1) {
			vfprintf(stderr, nfmt, ap);
			free(nfmt);
		} else {
			vfprintf(stderr, fmt, ap);
			fprintf(stderr, "\n");
		}
	} else
		vsyslog(LOG_DAEMON, fmt, ap);

	va_end(ap);
@

