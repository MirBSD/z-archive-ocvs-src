head	1.2;
access;
symbols
	MIRBSD_7quater:1.1.1.2
	cvs-200405160640:1.1.1.4
	cvs-200401271800:1.1.1.3
	cvs-200401261630:1.1.1.3
	cvs-200401021645:1.1.1.3
	MIRBSD_7_ALPHA:1.1.1.2.0.6
	MIRBSD_7:1.1.1.2.0.4
	cvs-200312222040:1.1.1.3
	MIRBSD_7ter:1.1.1.2
	MIRBSD_7_DEV:1.1.1.2.0.2
	cvs-200310020700:1.1.1.2
	cvs-200309271030:1.1.1.2
	cvs-200309251530:1.1.1.2
	cvs-200308302005:1.1.1.2
	cvs-200308171200:1.1.1.2
	ctm-3496:1.1.1.2
	ctm-3449:1.1.1.2
	ctm-3437:1.1.1.2
	cvs-200307191805:1.1.1.2
	ctm-3425:1.1.1.2
	cvs-200307091500:1.1.1.2
	ctm-3389:1.1.1.2
	cvs-200306291430:1.1.1.2
	ctm-3341:1.1.1.2
	MIRBSD_5:1.1.1.2
	cvs-200306082100:1.1.1.2
	ctm-3316:1.1.1.2
	ctm-3272:1.1.1.1
	ctm-3264:1.1.1.1
	cvs-200305071630:1.1.1.1
	MIRBSD_4:1.1.1.1
	ctm-3203:1.1.1.1
	cvs-20030410-1130:1.1.1.1
	ctm-3155:1.1.1.1
	ctm-3132:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.2
date	2004.05.21.20.08.36;	author tg;	state dead;
branches;
next	1.1;

1.1
date	2003.03.22.17.55.45;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.03.22.17.55.45;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2003.06.05.17.48.45;	author tg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2003.12.22.21.19.23;	author tg;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2004.05.16.07.23.12;	author tg;	state Exp;
branches;
next	;


desc
@@


1.2
log
@* merge OpenBSD 3.5-current
* re-sort entries in Makefile
  => not a bunch of adds any more; all alphabetic
  => remove obsolete SUBDIRS_ONLY_BSD for now
     (MirLinux won't come that soon due to a certain lawsuit,
      licence issues with unwillingly GNU fanatics, and my
      chronic unwillingness to do masochistic work)
* spacing, RCS IDs, etc.
* pkg gets folded into pkg_install, so we only have one dir
  to worry about
* pkg_add leaves the tree - nobody cared about this kind
  of package tools anyways, and they're not part of MirBSD
  (although still supported by MirPorts)
* mopd leaves - we don't have VAX support anyways
@
text
@/*	$OpenBSD: put.c,v 1.3 2002/03/14 16:44:25 mpech Exp $ */

/*
 * Copyright (c) 1993-95 Mats O Jansson.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by Mats O Jansson.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#ifndef LINT
static char rcsid[] = "$OpenBSD: put.c,v 1.3 2002/03/14 16:44:25 mpech Exp $";
#endif

#include <stddef.h>
#include <sys/types.h>
#include <time.h>
#include "common/mopdef.h"

void
mopPutChar(pkt, index, value)
	u_char *pkt;
	int    *index;
	u_char   value;
{
	pkt[*index] = value;
	*index = *index + 1;
}

void
mopPutShort(pkt, index, value)
	u_char *pkt;
	int    *index;
	u_short  value;
{
        int i;
	for (i = 0; i < 2; i++) {
	  pkt[*index+i] = value % 256;
	  value = value / 256;
	}
	*index = *index + 2;
}

void
mopPutLong(pkt, index, value)
	u_char *pkt;
	int    *index;
	u_long   value;
{
        int i;
	for (i = 0; i < 4; i++) {
	  pkt[*index+i] = value % 256;
	  value = value / 256;
	}
	*index = *index + 4;
}

void
mopPutMulti(pkt, index, value, size)
	u_char *pkt,*value;
	int    *index,size;
{
	int i;

	for (i = 0; i < size; i++) {
	  pkt[*index+i] = value[i];
	}  
	*index = *index + size;
}

void
mopPutTime(pkt, index, value)
	u_char *pkt;
	int    *index;
	time_t value;
{
	time_t tnow;
	struct tm *timenow;

	if ((value == 0)) {
	  tnow = time(NULL);
	} else {
	  tnow = value;
	}

	timenow = localtime(&tnow);

	mopPutChar (pkt,index,10);
	mopPutChar (pkt,index,(timenow->tm_year / 100) + 19);
	mopPutChar (pkt,index,(timenow->tm_year % 100));
	mopPutChar (pkt,index,(timenow->tm_mon + 1));
	mopPutChar (pkt,index,(timenow->tm_mday));
	mopPutChar (pkt,index,(timenow->tm_hour));
	mopPutChar (pkt,index,(timenow->tm_min));
	mopPutChar (pkt,index,(timenow->tm_sec));
	mopPutChar (pkt,index,0x00);
	mopPutChar (pkt,index,0x00);
	mopPutChar (pkt,index,0x00);
}

void
mopPutHeader(pkt, index, dst, src, proto, trans)
	u_char *pkt;
	int    *index;
	char	 dst[], src[];
	u_short	 proto;
	int	 trans;
{
	
	mopPutMulti(pkt, index, dst, 6);
	mopPutMulti(pkt, index, src, 6);
	if (trans == TRANS_8023) {
		mopPutShort(pkt, index, 0);
		mopPutChar (pkt, index, MOP_K_PROTO_802_DSAP);
		mopPutChar (pkt, index, MOP_K_PROTO_802_SSAP);
		mopPutChar (pkt, index, MOP_K_PROTO_802_CNTL);
		mopPutChar (pkt, index, 0x08);
		mopPutChar (pkt, index, 0x00);
		mopPutChar (pkt, index, 0x2b);
	}
#if !defined(__FreeBSD__)
	mopPutChar(pkt, index, (proto / 256));
	mopPutChar(pkt, index, (proto % 256));
#else
	if (trans == TRANS_8023) {
		mopPutChar(pkt, index, (proto / 256));
		mopPutChar(pkt, index, (proto % 256));
	} else {
		mopPutChar(pkt, index, (proto % 256));
		mopPutChar(pkt, index, (proto / 256));
	}
#endif
	if (trans == TRANS_ETHER)
		mopPutShort(pkt, index, 0);

}

void
mopPutLength(pkt, trans, len)
	u_char *pkt;
	int	 trans;
	u_short	 len;
{
	int	 index = 0;
	
	switch(trans) {
	case TRANS_ETHER:
		index = 14;
		mopPutChar(pkt, &index, ((len - 16) % 256));
		mopPutChar(pkt, &index, ((len - 16) / 256));
		break;
	case TRANS_8023:
		index = 12;
#if !defined(__FreeBSD__)
		mopPutChar(pkt, &index, ((len - 14) / 256));
		mopPutChar(pkt, &index, ((len - 14) % 256));
#else
		mopPutChar(pkt, &index, ((len - 14) % 256));
		mopPutChar(pkt, &index, ((len - 14) / 256));
#endif
		break;
	}

}



@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Import OpenBSD 3.3 source repository from CTM 3132 the first time
This opens an OpenBSD-mirabile (aka MirBSD) repository.

### MirBSD is:
# Copyright (c) 1982-2003 by Thorsten "mirabile" Glaser <x86@@ePost.de>
# Copyright © 1968-2003  The authors of And contributors to UNIX®, the
#       C Language, BSD/Berkeley Unix; 386BSD, NetBSD 1.1 and OpenBSD.
#
# Anyone who obtained a copy of this work is hereby permitted to freely use,
# distribute, modify, merge, sublicence, give away or sell it as long as the
# authors are given due credit and the following notice is retained:
#
# This work is provided "as is", with no explicit or implicit warranty what-
# soever. Use it only at your own risk. In no event may an author or contri-
# butor be held liable for any damage, directly or indirectly, that origina-
# ted through or is caused by creation or modification of this work.

MirBSD is my private tree. MirBSD does not differ very much from OpenBSD
and intentionally tracks OpenBSD. That's why it _is_ OpenBSD, just not the
official one. It's like with DarrenBSD.

At time of this writing, no advertising for MirBSD must be done,
because the advertising clause has not yet been sorted out.

http://templeofhate.com/tglaser/MirBSD/index.php
@
text
@@


1.1.1.2
log
@Import latest OpenBSD CVS tree by CTM in order
to sync the base system and ports tree with Them.

This includes the recent licence changes as well - by
importing the changed base and re-applying the diffs
(with cvs up -j -j) they are inherited, and we're not
bound to the removed clauses any longer.
@
text
@d1 1
a1 1
/*	$OpenBSD: put.c,v 1.4 2003/06/02 21:38:39 maja Exp $ */
d14 5
d33 1
a33 1
static char rcsid[] = "$OpenBSD: put.c,v 1.4 2003/06/02 21:38:39 maja Exp $";
@


1.1.1.3
log
@Time to import OpenBSD once again. Expect breakage.
@
text
@d1 1
a1 1
/*	$OpenBSD: put.c,v 1.5 2003/12/01 00:56:51 avsm Exp $ */
d28 1
a28 1
static const char rcsid[] = "$OpenBSD: put.c,v 1.5 2003/12/01 00:56:51 avsm Exp $";
@


1.1.1.4
log
@large-scale import of OpenBSD 3.5-current source base including many fixes
note: from now, we will not be binary compatible with OpenBSD apps any
longer (due to syscall numbering differences); both an OpenBSD compat and
a conversion tool for old MirOS #7 apps will be delivered later.

The src/ tree is locked from now.
@
text
@d1 1
a1 1
/*	$OpenBSD: put.c,v 1.6 2004/04/14 20:37:28 henning Exp $ */
d28 1
a28 2
static const char rcsid[] =
    "$OpenBSD: put.c,v 1.6 2004/04/14 20:37:28 henning Exp $";
d37 4
a40 1
mopPutChar(u_char *pkt, int *index, u_char value)
d43 1
a43 1
	(*index)++;
d47 4
a50 1
mopPutShort(u_char *pkt, int *index, u_short value)
d52 1
a52 2
	int i;

d54 2
a55 2
		pkt[*index + i] = value % 256;
		value /= 256;
d57 1
a57 1
	*index += 2;
d61 4
a64 1
mopPutLong(u_char *pkt, int *index, u_long value)
d66 1
a66 2
	int i;

d68 2
a69 2
		pkt[*index + i] = value % 256;
		value /= 256;
d71 1
a71 1
	*index += 4;
d75 3
a77 1
mopPutMulti(u_char *pkt, int *index, u_char *value, int size)
d81 4
a84 3
	for (i = 0; i < size; i++)
		pkt[*index + i] = value[i];
	*index += size;
d88 4
a91 1
mopPutTime(u_char *pkt, int *index, time_t value)
d93 2
a94 2
	time_t		 tnow;
	struct tm	*timenow;
d96 5
a100 4
	if ((value == 0))
		tnow = time(NULL);
	else
		tnow = value;
d104 11
a114 11
	mopPutChar(pkt, index, 10);
	mopPutChar(pkt, index, (timenow->tm_year / 100) + 19);
	mopPutChar(pkt, index, (timenow->tm_year % 100));
	mopPutChar(pkt, index, (timenow->tm_mon + 1));
	mopPutChar(pkt, index, (timenow->tm_mday));
	mopPutChar(pkt, index, (timenow->tm_hour));
	mopPutChar(pkt, index, (timenow->tm_min));
	mopPutChar(pkt, index, (timenow->tm_sec));
	mopPutChar(pkt, index, 0x00);
	mopPutChar(pkt, index, 0x00);
	mopPutChar(pkt, index, 0x00);
d118 6
a123 2
mopPutHeader(u_char *pkt, int *index, char dst[], char src[], u_short proto,
    int trans)
d125 1
d130 6
a135 6
		mopPutChar(pkt, index, MOP_K_PROTO_802_DSAP);
		mopPutChar(pkt, index, MOP_K_PROTO_802_SSAP);
		mopPutChar(pkt, index, MOP_K_PROTO_802_CNTL);
		mopPutChar(pkt, index, 0x08);
		mopPutChar(pkt, index, 0x00);
		mopPutChar(pkt, index, 0x2b);
d155 4
a158 1
mopPutLength(u_char *pkt, int trans, u_short len)
d161 2
a162 2

	switch (trans) {
@


