head	1.1;
branch	1.1.1;
access;
symbols
	tg-mergetmp-mirosx-1:1.1.1.6
	tg-mergefixes-1-branch:1.1.1.6.0.4
	tg-mergefixes-1-base:1.1.1.6
	MIROS_X:1.1.1.6.0.2
	MIROS_X_BASE:1.1.1.6
	tg-mergetmp-3:1.1.1.6
	MIRBSD_XP_MIRPPC:1.1.1.5.0.4
	cvs-200410222040:1.1.1.6
	tg-mergetmp-1:1.1.1.5
	MIRBSD_XP_SPARC_BASE:1.1.1.5
	MIRBSD_XP_SPARC:1.1.1.5.0.2
	MIRBSD_7quater:1.1.1.2
	cvs-200405160640:1.1.1.5
	cvs-200401271800:1.1.1.4
	cvs-200401261630:1.1.1.4
	cvs-200401021645:1.1.1.3
	MIRBSD_7_ALPHA:1.1.1.2.0.6
	MIRBSD_7:1.1.1.2.0.4
	cvs-200312222040:1.1.1.3
	MIRBSD_7ter:1.1.1.2
	MIRBSD_7_DEV:1.1.1.2.0.2
	cvs-200310020700:1.1.1.2
	cvs-200309271030:1.1.1.2
	cvs-200309251530:1.1.1.2
	cvs-200308302005:1.1.1.2
	cvs-200308171200:1.1.1.2
	ctm-3496:1.1.1.2
	ctm-3449:1.1.1.1
	ctm-3437:1.1.1.1
	cvs-200307191805:1.1.1.1
	ctm-3425:1.1.1.1
	cvs-200307091500:1.1.1.1
	ctm-3389:1.1.1.1
	cvs-200306291430:1.1.1.1
	ctm-3341:1.1.1.1
	MIRBSD_5:1.1.1.1
	cvs-200306082100:1.1.1.1
	ctm-3316:1.1.1.1
	ctm-3272:1.1.1.1
	ctm-3264:1.1.1.1
	cvs-200305071630:1.1.1.1
	MIRBSD_4:1.1.1.1
	ctm-3203:1.1.1.1
	cvs-20030410-1130:1.1.1.1
	ctm-3155:1.1.1.1
	ctm-3132:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.1
date	2003.03.22.17.56.04;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.03.22.17.56.04;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2003.08.11.18.56.19;	author tg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2003.12.22.21.20.01;	author tg;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2004.01.26.19.14.07;	author tg;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2004.05.16.07.25.04;	author tg;	state Stab;
branches;
next	1.1.1.6;

1.1.1.6
date	2004.10.22.20.52.13;	author tg;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@/*	$OpenBSD: print-ike.c,v 1.15 2002/09/23 04:10:14 millert Exp $	*/

/*
 * Copyright (c) 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999
 *	The Regents of the University of California.  All rights reserved.
 * Copyright (c) 2001 Håkan Olsson.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that: (1) source code distributions
 * retain the above copyright notice and this paragraph in its entirety, (2)
 * distributions including binary code include the above copyright notice and
 * this paragraph in its entirety in the documentation or other materials
 * provided with the distribution, and (3) all advertising materials mentioning
 * features or use of this software display the following acknowledgement:
 * ``This product includes software developed by the University of California,
 * Lawrence Berkeley Laboratory and its contributors.'' Neither the name of
 * the University nor the names of its contributors may be used to endorse
 * or promote products derived from this software without specific prior
 * written permission.
 * THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS OR IMPLIED
 * WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 *
 * Format and print ike (isakmp) packets.
 *	By Tero Kivinen <kivinen@@ssh.fi>, Tero Mononen <tmo@@ssh.fi>,
 *         Tatu Ylonen <ylo@@ssh.fi> and Timo J. Rinne <tri@@ssh.fi>
 *         in co-operation with SSH Communications Security, Espoo, Finland
 */

#ifndef lint
static const char rcsid[] =
    "@@(#) $Header: /cvs/src/usr.sbin/tcpdump/print-ike.c,v 1.15 2002/09/23 04:10:14 millert Exp $ (XXX)";
#endif

#include <sys/param.h>
#include <sys/time.h>
#include <sys/socket.h>

struct mbuf;
struct rtentry;
#include <net/if.h>
#include <netinet/in.h>
#include <arpa/inet.h>

#include <ctype.h>
#include <stdio.h>
#include <string.h>

#include "interface.h"
#include "addrtoname.h"
#include "ike.h"

struct isakmp_header {
	u_char  init_cookie[8];
	u_char  resp_cookie[8];
	u_char  nextpayload;
	u_char  version;
	u_char  exgtype;
	u_char  flags;
	u_char  msgid[4];
	u_int32_t length;
	u_char  payloads[0];
};

struct notification_payload {
	u_char    next_payload;
	u_char    reserved;
	u_int16_t payload_length;
	u_int32_t doi;
	u_char    protocol_id;
  	u_char    spi_size;
  	u_int16_t type;
	u_char    data[0];
};

static void ike_pl_print(u_char, u_char *, u_char);

int ike_tab_level = 0;
u_char xform_proto;

static const char *ike[] = IKE_PROTO_INITIALIZER;

#define SMALL_TABS 4
#define SPACES "                                                   "
const char *
ike_tab_offset(void)
{
	const char *p, *endline;
	static const char line[] = SPACES;

	endline = line + sizeof line - 1;
	p = endline - SMALL_TABS * (ike_tab_level);

	return (p > line ? p : line);
}

static char *
ike_get_cookie (u_char *ic, u_char *rc)
{
	static char cookie_jar[35];
	int i;

	for (i = 0; i < 8; i++)
		snprintf(cookie_jar + i*2, sizeof(cookie_jar) - i*2,
		    "%02x", *(ic + i));
	strlcat(cookie_jar, "->", sizeof(cookie_jar));
	for (i = 0; i < 8; i++)
		snprintf(cookie_jar + 18 + i*2, sizeof(cookie_jar) - 18 - i*2,
		    "%02x", *(rc + i));
	return cookie_jar;
}

/*
 * Print isakmp requests
 */
void
ike_print (const u_char *cp, u_int length)
{
	struct isakmp_header *ih;
	const u_char *ep;
	u_char *payload;
	u_char  nextpayload;
	int encrypted;
	static const char *exgtypes[] = IKE_EXCHANGE_TYPES_INITIALIZER;

	encrypted = 0;

#ifdef TCHECK
#undef TCHECK
#endif
#define TCHECK(var, l) if ((u_char *)&(var) > ep - l) goto trunc

	ih = (struct isakmp_header *)cp;
	/* Note funny sized packets */

	if (length < 20)
		(void)printf(" [len=%d]", length);

	/* 'ep' points to the end of avaible data. */
	ep = snapend;

	printf(" isakmp");

	printf(" v%d.%d", ih->version >> 4, ih->version & 0xf);

	printf(" exchange ");
	if (ih->exgtype < (sizeof exgtypes/sizeof exgtypes[0]))
		printf("%s", exgtypes[ih->exgtype]);
	else
		printf("%d (unknown)", ih->exgtype);

	if (ih->flags & FLAGS_ENCRYPTION) {
		printf(" encrypted");
		encrypted = 1;
	}

	if (ih->flags & FLAGS_COMMIT) {
		printf(" commit");
	}

	printf("\n\tcookie: %s", ike_get_cookie (ih->init_cookie,
						 ih->resp_cookie));

	TCHECK(ih->msgid, sizeof(ih->msgid));
	printf(" msgid: %02x%02x%02x%02x", ih->msgid[0], ih->msgid[1],
	    ih->msgid[2], ih->msgid[3]);

	TCHECK(ih->length, sizeof(ih->length));
	printf(" len: %d", ntohl(ih->length));

	if (ih->version > 16) {
		printf(" new version");
		return;
	}

	payload = ih->payloads;
	nextpayload = ih->nextpayload;

	/* if encrypted, then open special file for encryption keys */
	if (encrypted) {
		/* decrypt XXX */
		return;
	}

	/* if verbose, print payload data */
	if (vflag)
		ike_pl_print(nextpayload, payload, ISAKMP_DOI);

	return;

trunc:
	fputs(" [|isakmp]", stdout);
}

void
ike_pl_sa_print (u_char *buf, int len)
{
	u_int32_t situation = ntohl(*(u_int32_t *)(buf + 4));
	u_char ike_doi = ntohl((*(u_int32_t *)buf));
	printf(" DOI: %d", ike_doi);
	if (ike_doi == IPSEC_DOI) {
		printf("(IPSEC) situation: ");
		if (situation & IKE_SITUATION_IDENTITY_ONLY)
			printf("IDENTITY_ONLY ");
		if (situation & IKE_SITUATION_SECRECY)
			printf("SECRECY ");
		if (situation & IKE_SITUATION_INTEGRITY)
			printf("INTEGRITY ");
		if ((situation & IKE_SITUATION_MASK) == 0)
			printf("0x%x (unknown)", situation);
		ike_pl_print (PAYLOAD_PROPOSAL, buf + 8, IPSEC_DOI);
	} else
		printf(" situation: (unknown)");
}

int
ike_attribute_print (u_char *buf, u_char doi, int maxlen)
{
	static char *attrs[] = IKE_ATTR_INITIALIZER;
	static char *attr_enc[] = IKE_ATTR_ENCRYPT_INITIALIZER;
	static char *attr_hash[] = IKE_ATTR_HASH_INITIALIZER;
	static char *attr_auth[] = IKE_ATTR_AUTH_INITIALIZER;
	static char *attr_gdesc[] = IKE_ATTR_GROUP_DESC_INITIALIZER;
	static char *attr_gtype[] = IKE_ATTR_GROUP_INITIALIZER;
	static char *attr_ltype[] = IKE_ATTR_SA_DURATION_INITIALIZER;
	static char *ipsec_attrs[] = IPSEC_ATTR_INITIALIZER;
	static char *ipsec_attr_encap[] = IPSEC_ATTR_ENCAP_INITIALIZER;
	static char *ipsec_attr_auth[] = IPSEC_ATTR_AUTH_INITIALIZER;
	static char *ipsec_attr_ltype[] = IPSEC_ATTR_DURATION_INITIALIZER;

	u_char    af   = buf[0] >> 7;
	u_int16_t type = (buf[0] & 0x7f) << 8 | buf[1];
	u_int16_t len  = buf[2] << 8 | buf[3], val;

	if (doi == ISAKMP_DOI)
		printf("\n\t%sattribute %s = ", ike_tab_offset(),
		    (type < sizeof attrs / sizeof attrs[0] ?
		    attrs[type] : "<unknown>"));
	else
		printf("\n\t%sattribute %s = ", ike_tab_offset(),
		    (type < (sizeof ipsec_attrs / sizeof ipsec_attrs[0]) ?
		    ipsec_attrs[type] : "<unknown>"));

	if ((af == 1 && maxlen < 4) || (af == 0 && maxlen < (len + 4))) {
		printf("\n\t%s[|attr]", ike_tab_offset());
		return maxlen;
	}

	if (af == 0) {
		/* AF=0; print the variable length attribute value */
		for (val = 0; val < len; val++)
			printf("%02x", (char)*(buf + 4 + val));
		return len + 4;
	}

	val = len;	/* For AF=1, this field is the "VALUE" */
	len = 4; 	/* and with AF=1, length is always 4 */

#define CASE_PRINT(TYPE, var) \
	case TYPE : \
		if (val < sizeof var / sizeof var [0]) \
			printf("%s", var [val]); \
		else \
			printf("%d (unknown)", val); \
		break;

	if (doi == ISAKMP_DOI)
		switch(type) {
			CASE_PRINT(IKE_ATTR_ENCRYPTION_ALGORITHM, attr_enc);
			CASE_PRINT(IKE_ATTR_HASH_ALGORITHM, attr_hash);
			CASE_PRINT(IKE_ATTR_AUTHENTICATION_METHOD, attr_auth);
			CASE_PRINT(IKE_ATTR_GROUP_DESC, attr_gdesc);
			CASE_PRINT(IKE_ATTR_GROUP_TYPE, attr_gtype);
			CASE_PRINT(IKE_ATTR_LIFE_TYPE, attr_ltype);
		default:
			printf("%d", val);
		}
	else
		switch(type) {
			CASE_PRINT(IPSEC_ATTR_SA_LIFE_TYPE, ipsec_attr_ltype);
			CASE_PRINT(IPSEC_ATTR_ENCAPSULATION_MODE,
			    ipsec_attr_encap);
			CASE_PRINT(IPSEC_ATTR_AUTHENTICATION_ALGORITHM,
			    ipsec_attr_auth);
		default:
			printf("%d", val);
		}

#undef CASE_PRINT
	return len;
}

void
ike_pl_transform_print (u_char *buf, int len, u_char doi)
{
	const char *ah[] = IPSEC_AH_INITIALIZER;
	const char *esp[] = IPSEC_ESP_INITIALIZER;
	const char *ipcomp[] = IPCOMP_INITIALIZER;
	u_char *attr = buf + 4;

	printf("\n\t%stransform: %u ID: ", ike_tab_offset(), buf[0]);

	switch (doi) {
	case ISAKMP_DOI:
		if (buf[1] < (sizeof ike / sizeof ike[0]))
			printf("%s", ike[buf[1]]);
		else
			printf("%d(unknown)", buf[1]);
		break;

	default: /* IPSEC_DOI */
		switch (xform_proto) {	/* from ike_proposal_print */
		case PROTO_IPSEC_AH:
			if (buf[1] < (sizeof ah / sizeof ah[0]))
				printf("%s", ah[buf[1]]);
			else
				printf("%d(unknown)", buf[1]);
			break;
		case PROTO_IPSEC_ESP:
			if (buf[1] < (sizeof esp / sizeof esp[0]))
				printf("%s", esp[buf[1]]);
			else
				printf("%d(unknown)", buf[1]);
			break;
		case PROTO_IPCOMP:
			if (buf[1] < (sizeof ipcomp / sizeof ipcomp[0]))
				printf("%s", ipcomp[buf[1]]);
			else
				printf("%d(unknown)", buf[1]);
			break;
		default:
			printf("%d(unknown)", buf[1]);
		}
		break;
	}

	ike_tab_level++;
	while ((int)(attr - buf) < len - 4)  /* Skip last 'NONE' attr */
		attr += ike_attribute_print(attr, doi, len - (attr-buf));
	ike_tab_level--;
}

void
ike_pl_proposal_print (u_char *buf, int len, u_char doi)
{
	u_int8_t i, p_id = buf[1], spisz = buf[2];

	printf(" proposal: %d proto: %s spisz: %d xforms: %d",
	    buf[0], (p_id < (sizeof ike / sizeof ike[0]) ? ike[p_id] :
	    "(unknown)"), spisz, buf[3]);

	/* We need to store this for upcoming ike_attribute_print call. */
	xform_proto = p_id;

	if (spisz) {
		if (p_id == PROTO_IPCOMP)
			printf(" CPI: 0x");
		else
			printf(" SPI: 0x");
		for (i = 0; i < spisz && (i + 4) < len; i++)
			printf("%02x", buf[i + 4]);
		doi = IPSEC_DOI;
	} else
		doi = ISAKMP_DOI;

	if ((char)buf[3] > 0)
		ike_pl_print(PAYLOAD_TRANSFORM, buf + 4 + buf[2], doi);
}

void
ike_pl_ke_print (u_char *buf, int len, u_char doi)
{
	if (doi != IPSEC_DOI)
		return;

	/* XXX ... */
}

void
ipsec_id_print (u_char *buf, int len, u_char doi)
{
	static const char *idtypes[] = IPSEC_ID_TYPE_INITIALIZER;
	char ntop_buf[INET6_ADDRSTRLEN];
	struct in_addr in;
	u_char *p;

	if (doi != ISAKMP_DOI)
		return;

	/* Don't print proto+port unless actually used */
	if (buf[1] | buf[2] | buf[3])
		printf(" proto: %d port: %d", buf[1], (buf[2] << 8) + buf[3]);

	printf(" type: %s = ", buf[0] < (sizeof idtypes/sizeof idtypes[0]) ?
	    idtypes[buf[0]] : "<unknown>");

	switch (buf[0]) {
	case IPSEC_ID_IPV4_ADDR:
		memcpy (&in.s_addr, buf + 4, sizeof in);
		printf("%s", inet_ntoa (in));
		break;
	case IPSEC_ID_IPV4_ADDR_SUBNET:
	case IPSEC_ID_IPV4_ADDR_RANGE:
		memcpy (&in.s_addr, buf + 4, sizeof in);
		printf("%s%s", inet_ntoa (in),
		    buf[0] == IPSEC_ID_IPV4_ADDR_SUBNET ? "/" : "-");
		memcpy (&in.s_addr, buf + 8, sizeof in);
		printf("%s", inet_ntoa (in));
		break;

	case IPSEC_ID_IPV6_ADDR:
		printf("%s", inet_ntop (AF_INET6, buf + 4, ntop_buf,
		    sizeof ntop_buf));
		break;
	case IPSEC_ID_IPV6_ADDR_SUBNET:
	case IPSEC_ID_IPV6_ADDR_RANGE:
		printf("%s%s", inet_ntop (AF_INET6, buf + 4, ntop_buf,
		    sizeof ntop_buf),
		    buf[0] == IPSEC_ID_IPV6_ADDR_SUBNET ? "/" : "-");
		printf("%s", inet_ntop (AF_INET6, buf + 4 + sizeof ntop_buf,
		    ntop_buf, sizeof ntop_buf));

	case IPSEC_ID_FQDN:
	case IPSEC_ID_USER_FQDN:
		printf("\"");
		for(p = buf + 4; (int)(p - buf) < len - 4; p++)
			printf("%c",(isprint(*p) ? *p : '.'));
		printf("\"");
		break;

	case IPSEC_ID_DER_ASN1_DN:
	case IPSEC_ID_DER_ASN1_GN:
	case IPSEC_ID_KEY_ID:
	default:
		printf("\"(not shown)\"");
		break;
	}
}

void
ike_pl_notification_print (u_char *buf, int len)
{
  	static const char *nftypes[] = IKE_NOTIFY_TYPES_INITIALIZER;
  	struct notification_payload *np = (struct notification_payload *)buf;
	u_int32_t *replay;
	u_char *attr;

	if (len < sizeof (struct notification_payload)) {
		printf(" (|len)");
		return;
	}

	np->doi  = ntohl (np->doi);
	np->type = ntohs (np->type);

	if (np->doi != ISAKMP_DOI && np->doi != IPSEC_DOI) {
		printf(" (unknown DOI)");
		return;
	}

	printf("\n\t%snotification: ", ike_tab_offset());

	if (np->type > 0 && np->type < (sizeof nftypes / sizeof nftypes[0])) {
		printf("%s", nftypes[np->type]);
		return;
	}
	switch (np->type) {

	case NOTIFY_IPSEC_RESPONDER_LIFETIME:
		printf("RESPONDER LIFETIME");
		if (np->spi_size == 16)
			printf("(%s)", ike_get_cookie (&np->data[0],
			    &np->data[8]));
		else
			printf("SPI: 0x%08x", np->data[0]<<24 |
			    np->data[1]<<16 | np->data[2]<<8 | np->data[3]);
		attr = &np->data[np->spi_size];
		ike_tab_level++;
		while ((int)(attr - buf) < len - 4)  /* Skip last 'NONE' attr */
			attr += ike_attribute_print(attr, IPSEC_DOI,
			    len - (attr-buf));
		ike_tab_level--;
		break;

	case NOTIFY_IPSEC_REPLAY_STATUS:
		replay = (u_int32_t *)&np->data[np->spi_size];
		printf("REPLAY STATUS [%sabled] ", *replay ? "en" : "dis");
		if (np->spi_size == 16)
			printf("(%s)", ike_get_cookie (&np->data[0],
			    &np->data[8]));
		else
			printf("SPI: 0x%08x", np->data[0]<<24 |
			    np->data[1]<<16 | np->data[2]<<8 | np->data[3]);
		break;

	case NOTIFY_IPSEC_INITIAL_CONTACT:
		printf("INITIAL CONTACT (%s)", ike_get_cookie (&np->data[0],
		    &np->data[8]));
		break;

	default:
	  	printf("%d (unknown)", np->type);
		break;
	}
}

void
ike_pl_vendor_print (u_char *buf, int len, u_char doi)
{
	u_char *p = buf;

	if (doi != IPSEC_DOI)
		return;

	printf(" \"");
	for (p = buf; (int)(p - buf) < len; p++)
		printf("%c",(isprint(*p) ? *p : '.'));
	printf("\"");
}

/* IKE mode-config. */
int
ike_cfg_attribute_print (u_char *buf, int attr_type, int maxlen)
{
	static char *attrs[] = IKE_CFG_ATTRIBUTE_INITIALIZER;
	char ntop_buf[INET6_ADDRSTRLEN];
	struct in_addr in;

	u_char    af   = buf[0] >> 7;
	u_int16_t type = (buf[0] & 0x7f) << 8 | buf[1];
	u_int16_t len  = af ? 2 : buf[2] << 8 | buf[3], p;
	u_char   *val  = af ? buf + 2 : buf + 4;

	printf("\n\t\%sattribute %s = ", ike_tab_offset(),
	    type < (sizeof attrs / sizeof attrs[0]) ? attrs[type] :
	    "<unknown>");

	if ((af == 1 && maxlen < 4) ||
	    (af == 0 && maxlen < (len + 4))) {
		printf("\n\t%s[|attr]", ike_tab_offset());
		return maxlen;
	}

	/* XXX The 2nd term is for bug compatibility with PGPnet.  */
	if (len == 0 || (af && !val[0] && !val[1])) {
		printf("<none>");
		return 4;
	}

	/* XXX Generally lengths are not checked well below.  */
	switch (type) {
	case IKE_CFG_ATTR_INTERNAL_IP4_ADDRESS:
	case IKE_CFG_ATTR_INTERNAL_IP4_NETMASK:
	case IKE_CFG_ATTR_INTERNAL_IP4_DNS:
	case IKE_CFG_ATTR_INTERNAL_IP4_NBNS:
	case IKE_CFG_ATTR_INTERNAL_IP4_DHCP:
		memcpy (&in.s_addr, val, sizeof in);
		printf("%s", inet_ntoa (in));
		break;

	case IKE_CFG_ATTR_INTERNAL_IP6_ADDRESS:
	case IKE_CFG_ATTR_INTERNAL_IP6_NETMASK:
	case IKE_CFG_ATTR_INTERNAL_IP6_DNS:
	case IKE_CFG_ATTR_INTERNAL_IP6_NBNS:
	case IKE_CFG_ATTR_INTERNAL_IP6_DHCP:
		printf("%s", inet_ntop (AF_INET6, val, ntop_buf,
		    sizeof ntop_buf));
		break;

	case IKE_CFG_ATTR_INTERNAL_IP4_SUBNET:
		memcpy(&in.s_addr, val, sizeof in);
		printf("%s/", inet_ntoa (in));
		memcpy(&in.s_addr, val + sizeof in, sizeof in);
		printf("%s", inet_ntoa (in));
		break;

	case IKE_CFG_ATTR_INTERNAL_IP6_SUBNET:
		printf("%s/%u", inet_ntop (AF_INET6, val, ntop_buf,
		    sizeof ntop_buf), val[16]);
		break;

	case IKE_CFG_ATTR_INTERNAL_ADDRESS_EXPIRY:
		printf("%u seconds",
		    val[0] << 24 | val[1] << 16 | val[2] << 8 | val[3]);
		break;

	case IKE_CFG_ATTR_APPLICATION_VERSION:
		for (p = 0; p < len; p++)
			printf("%c", isprint(val[p]) ? val[p] : '.');
		break;

	case IKE_CFG_ATTR_SUPPORTED_ATTRIBUTES:
		printf("<%d attributes>", len / 2);
		ike_tab_level++;
		for (p = 0; p < len; p += 2) {
			type = (val[p] << 8 | val[p + 1]) & 0x7fff;
			printf("\n\t%s%s", ike_tab_offset(),
			    type < (sizeof attrs/sizeof attrs[0]) ?
			    attrs[type] : "<unknown>");
		}
		ike_tab_level--;
		break;

	default:
		break;
	}
	return af ? 4 : len + 4;
}

void
ike_pl_attribute_print (u_char *buf, int len)
{
	static const char *pl_attr[] = IKE_CFG_ATTRIBUTE_TYPE_INITIALIZER;
	u_char type, *attr;
	u_int16_t id;

	type = buf[0];
	id = buf[2]<<8 | buf[3];
	attr = buf + 4;

	printf(" type: %s Id: %d",
	    type < (sizeof pl_attr/sizeof pl_attr[0]) ? pl_attr[type] :
	    "<unknown>", id);

	while ((int)(attr - buf) < len - 4)
		attr += ike_cfg_attribute_print(attr, type, len - (attr-buf));
}

void
ike_pl_print (u_char type, u_char *buf, u_char doi)
{
	static const char *pltypes[] = IKE_PAYLOAD_TYPES_INITIALIZER;
	int next_type = buf[0];
	int this_len = buf[2]<<8 | buf[3];

	printf("\n\t%spayload: %s len: %d", ike_tab_offset(),
	    (type < (sizeof pltypes/sizeof pltypes[0]) ?
	    pltypes[type] : "<unknown>"), this_len);

	if ((u_char *)&(buf[0]) > snapend - this_len)
		goto pltrunc;

	ike_tab_level++;
	switch (type) {
	case PAYLOAD_NONE:
		return;

	case PAYLOAD_SA:
		ike_pl_sa_print(buf+4, this_len);
		break;

	case PAYLOAD_PROPOSAL:
		ike_pl_proposal_print(buf+4, this_len, doi);
		break;

	case PAYLOAD_TRANSFORM:
		ike_pl_transform_print(buf+4, this_len, doi);
		break;

	case PAYLOAD_KE:
		ike_pl_ke_print(buf+4, this_len, doi);
		break;

	case PAYLOAD_ID:
		/* Should only happen with IPsec DOI */
		ipsec_id_print(buf+4, this_len, doi);
		break;

	case PAYLOAD_CERT:
	case PAYLOAD_CERTREQUEST:
	case PAYLOAD_HASH:
	case PAYLOAD_SIG:
	case PAYLOAD_NONCE:
	case PAYLOAD_DELETE:
		break;

	case PAYLOAD_NOTIFICATION:
	  	ike_pl_notification_print(buf, this_len);
		break;

	case PAYLOAD_VENDOR:
		ike_pl_vendor_print(buf+4, this_len, doi);
		break;

	case PAYLOAD_ATTRIBUTE:
		ike_pl_attribute_print(buf+4, this_len);
		break;

	default:
		break;
	}
	ike_tab_level--;

	if (next_type)  /* Recurse over next payload */
		ike_pl_print(next_type, buf + this_len, doi);

	return;

pltrunc:
	if (doi == ISAKMP_DOI)
		fputs(" [|isakmp]", stdout);
	else
		fputs(" [|ipsec]", stdout);
}
@


1.1.1.1
log
@Import OpenBSD 3.3 source repository from CTM 3132 the first time
This opens an OpenBSD-mirabile (aka MirBSD) repository.

### MirBSD is:
# Copyright (c) 1982-2003 by Thorsten "mirabile" Glaser <x86@@ePost.de>
# Copyright © 1968-2003  The authors of And contributors to UNIX®, the
#       C Language, BSD/Berkeley Unix; 386BSD, NetBSD 1.1 and OpenBSD.
#
# Anyone who obtained a copy of this work is hereby permitted to freely use,
# distribute, modify, merge, sublicence, give away or sell it as long as the
# authors are given due credit and the following notice is retained:
#
# This work is provided "as is", with no explicit or implicit warranty what-
# soever. Use it only at your own risk. In no event may an author or contri-
# butor be held liable for any damage, directly or indirectly, that origina-
# ted through or is caused by creation or modification of this work.

MirBSD is my private tree. MirBSD does not differ very much from OpenBSD
and intentionally tracks OpenBSD. That's why it _is_ OpenBSD, just not the
official one. It's like with DarrenBSD.

At time of this writing, no advertising for MirBSD must be done,
because the advertising clause has not yet been sorted out.

http://templeofhate.com/tglaser/MirBSD/index.php
@
text
@@


1.1.1.2
log
@Import the complete OpenBSD source tree (base system)
as of CTM delta 3496 (roughly 1200 UTC today) into the
vendor branch.
Attention: this is a big update. Don't even try to
build this system, OpenBSD 3.4-beta, yet on your own.
@
text
@d32 1
a32 1
    "@@(#) $Header: /ocvs/src/usr.sbin/tcpdump/print-ike.c,v 1.15 2002/09/23 04:10:14 millert Exp $ (XXX)";
@


1.1.1.3
log
@Time to import OpenBSD once again. Expect breakage.
@
text
@d1 1
a1 1
/*	$OpenBSD: print-ike.c,v 1.16 2003/12/18 09:14:18 ho Exp $	*/
d32 1
a32 1
    "@@(#) $Header: /cvs/src/usr.sbin/tcpdump/print-ike.c,v 1.16 2003/12/18 09:14:18 ho Exp $ (XXX)";
a686 4
		break;

	case PAYLOAD_NAT_D:
	case PAYLOAD_NAT_OA:
@


1.1.1.4
log
@Import OpenBSD as of today again (seems pretty stable, I hope)

Prominent changes: more bgpd, tcpmd5; tcpdump/isakmpd fixes
@
text
@d1 1
a1 1
/*	$OpenBSD: print-ike.c,v 1.17 2004/01/15 22:59:42 ho Exp $	*/
d32 1
a32 1
    "@@(#) $Header: /cvs/src/usr.sbin/tcpdump/print-ike.c,v 1.17 2004/01/15 22:59:42 ho Exp $ (XXX)";
d134 1
d136 2
a137 2
	if (length < sizeof (struct isakmp_header))
		goto trunc;
@


1.1.1.5
log
@large-scale import of OpenBSD 3.5-current source base including many fixes
note: from now, we will not be binary compatible with OpenBSD apps any
longer (due to syscall numbering differences); both an OpenBSD compat and
a conversion tool for old MirOS #7 apps will be delivered later.

The src/ tree is locked from now.
@
text
@d1 1
a1 1
/*	$OpenBSD: print-ike.c,v 1.22 2004/04/13 17:56:54 hshoexer Exp $	*/
d32 1
a32 1
    "@@(#) $Header: /cvs/src/usr.sbin/tcpdump/print-ike.c,v 1.22 2004/04/13 17:56:54 hshoexer Exp $ (XXX)";
d54 9
a62 54
	u_int8_t	init_cookie[8];
	u_int8_t	resp_cookie[8];
	u_int8_t	next_payload;
	u_int8_t	version;
	u_int8_t	exgtype;
	u_int8_t	flags;
	u_int8_t	msgid[4];
	u_int32_t	length;
	u_int8_t	payloads[0];
};

struct sa_payload {
	u_int8_t	next_payload;
	u_int8_t	reserved;
	u_int16_t	payload_length;
	u_int32_t	doi;
	u_int8_t	situation[0];
};

struct proposal_payload {
	u_int8_t	next_payload;
	u_int8_t	reserved;
	u_int16_t	payload_length;
	u_int8_t	nprop;
	u_int8_t	proto;
	u_int8_t	spi_size;
	u_int8_t	nspis;
	u_int8_t	spi[0];
};

struct transform_payload {
	u_int8_t	next_payload;
	u_int8_t	reserved;
	u_int16_t	payload_length;
	u_int8_t	ntrans;
	u_int8_t	transform;
	u_int16_t	reserved2;
	u_int8_t	attribute[0];
};

struct ke_payload {
	u_int8_t	next_payload;
	u_int8_t	reserved;
	u_int16_t	payload_length;
	u_int8_t	data[0];
};

struct id_payload {
	u_int8_t	next_payload;
	u_int8_t	reserved;
	u_int16_t	payload_length;
	u_int8_t	type;
	u_int8_t	id_data[3];
	u_int8_t	data[0];
d66 8
a73 8
	u_int8_t	next_payload;
	u_int8_t	reserved;
	u_int16_t	payload_length;
	u_int32_t	doi;
	u_int8_t	protocol_id;
  	u_int8_t	spi_size;
  	u_int16_t	type;
	u_int8_t	data[0];
d76 1
a76 28
struct delete_payload {
	u_int8_t	next_payload;
	u_int8_t	reserved;
	u_int16_t	payload_length;
	u_int32_t	doi;
	u_int8_t	proto;
	u_int8_t	spi_size;
	u_int16_t	nspis;
	u_int8_t	spi[0];
};

struct vendor_payload {
	u_int8_t	next_payload;
	u_int8_t	reserved;
	u_int16_t	payload_length;
	u_int8_t	vid[0];
};

struct attribute_payload {
	u_int8_t	next_payload;
	u_int8_t	reserved;
	u_int16_t	payload_length;
	u_int8_t	type;
	u_int8_t	reserved2;
	u_int16_t	id;
};

static void ike_pl_print(u_int8_t, u_int8_t *, u_int8_t);
d79 1
a79 1
u_int8_t xform_proto;
d98 1
a98 1
ike_get_cookie (u_int8_t *ic, u_int8_t *rc)
d117 1
a117 1
ike_print (const u_int8_t *cp, u_int length)
d120 3
a122 2
	const u_int8_t *ep;
	u_int8_t *payload, next_payload;
d131 1
a131 1
#define TCHECK(var, l) if ((u_int8_t *)&(var) > ep - l) goto trunc
d176 1
a176 1
	next_payload = ih->next_payload;
d186 1
a186 1
		ike_pl_print(next_payload, payload, ISAKMP_DOI);
d195 1
a195 1
ike_pl_sa_print (u_int8_t *buf, int len)
d197 4
a200 16
	struct sa_payload *sp = (struct sa_payload *)buf;
	u_int32_t sit_ipsec;

	if (len < sizeof(struct sa_payload)) {
		printf(" [|payload]");
		return;
	}

	sp->doi = ntohl(sp->doi);
	printf(" DOI: %d", sp->doi);

	if (sp->doi == IPSEC_DOI) {
		if ((sp->situation + sizeof(u_int32_t)) > (buf + len)) {
			printf(" [|payload]");
			return;
		}
d202 1
a202 2
		sit_ipsec = ntohl(*(u_int32_t *)sp->situation);
		if (sit_ipsec & IKE_SITUATION_IDENTITY_ONLY)
d204 1
a204 1
		if (sit_ipsec & IKE_SITUATION_SECRECY)
d206 1
a206 1
		if (sit_ipsec & IKE_SITUATION_INTEGRITY)
d208 3
a210 4
		if ((sit_ipsec & IKE_SITUATION_MASK) == 0)
			printf("0x%x (unknown)", sit_ipsec);
		ike_pl_print (PAYLOAD_PROPOSAL, buf +
		    sizeof(struct sa_payload) + sizeof(u_int32_t), IPSEC_DOI);
d216 1
a216 1
ike_attribute_print (u_int8_t *buf, u_int8_t doi, int maxlen)
d230 1
a230 1
	u_int8_t af   = buf[0] >> 7;
d293 1
a293 1
ike_pl_transform_print (u_int8_t *buf, int len, u_int8_t doi)
a294 1
	struct transform_payload *tp = (struct transform_payload *)buf;
d298 1
a298 6
	u_int8_t *attr = tp->attribute;

	if (len < sizeof(struct transform_payload)) {
		printf(" [|payload]");
		return;
	}
d300 1
a300 1
	printf("\n\t%stransform: %u ID: ", ike_tab_offset(), tp->ntrans);
d304 2
a305 2
		if (tp->transform < (sizeof ike / sizeof ike[0]))
			printf("%s", ike[tp->transform]);
d307 1
a307 1
			printf("%d(unknown)", tp->transform);
d311 1
a311 1
		switch (xform_proto) { /* from ike_proposal_print */
d313 2
a314 2
			if (tp->transform < (sizeof ah / sizeof ah[0]))
				printf("%s", ah[tp->transform]);
d316 1
a316 1
				printf("%d(unknown)", tp->transform);
d319 2
a320 2
			if (tp->transform < (sizeof esp / sizeof esp[0]))
				printf("%s", esp[tp->transform]);
d322 1
a322 1
				printf("%d(unknown)", tp->transform);
d325 2
a326 2
			if (tp->transform < (sizeof ipcomp / sizeof ipcomp[0]))
				printf("%s", ipcomp[tp->transform]);
d328 1
a328 1
				printf("%d(unknown)", tp->transform);
d331 1
a331 1
			printf("%d(unknown)", tp->transform);
d337 2
a338 2
	while ((int)(attr - buf) < len) /* Skip last 'NONE' attr */
		attr += ike_attribute_print(attr, doi, len - (attr - buf));
d343 1
a343 1
ike_pl_proposal_print (u_int8_t *buf, int len, u_int8_t doi)
d345 1
a345 7
	struct proposal_payload *pp = (struct proposal_payload *)buf;
	int i;

	if (len < sizeof(struct proposal_payload)) {
		printf(" [|payload]");
		return;
	}
d348 2
a349 2
	    pp->nprop, (pp->proto < (sizeof ike / sizeof ike[0]) ?
	    ike[pp->proto] : "(unknown)"), pp->spi_size, pp->nspis);
d351 2
a352 1
	xform_proto = pp->proto;
d354 2
a355 6
	if (pp->spi_size) {
		if ((pp->spi + pp->spi_size) > (buf + len)) {
			printf(" [|payload]");
			return;
		}
		if (pp->proto == PROTO_IPCOMP)
d359 4
a362 6
		for (i = 0; i < pp->spi_size; i++)
			printf("%02x", pp->spi[i]);
	}

	/* Reset to sane value. */
	if (pp->proto == PROTO_ISAKMP)
a363 2
	else
		doi = IPSEC_DOI;
d365 2
a366 2
	if (pp->nspis > 0)
		ike_pl_print(PAYLOAD_TRANSFORM, pp->spi + pp->spi_size, doi);
d370 1
a370 1
ike_pl_ke_print (u_int8_t *buf, int len, u_int8_t doi)
a371 5
	if (len < sizeof(struct ke_payload)) {
		printf(" [|payload]");
		return;
	}

d379 1
a379 1
ipsec_id_print (u_int8_t *buf, int len, u_int8_t doi)
a380 1
	struct id_payload *ip = (struct id_payload *)buf;
d384 1
a384 6
	u_int8_t *p;

	if (len < sizeof (struct id_payload)) {
		printf(" [|payload]");
		return;
	}
d390 2
a391 3
	if (ip->id_data[0] | ip->id_data[1] | ip->id_data[2])
		printf(" proto: %d port: %d", ip->id_data[0],
		    (ip->id_data[1] << 8) + ip->id_data[2]);
d393 2
a394 2
	printf(" type: %s = ", ip->type < (sizeof idtypes/sizeof idtypes[0]) ?
	    idtypes[ip->type] : "<unknown>");
d396 1
a396 1
	switch (ip->type) {
d398 1
a398 5
		if ((ip->data + sizeof in) > (buf + len)) {
			printf(" [|payload]");
			return;
		}
		memcpy (&in.s_addr, ip->data, sizeof in);
a400 1

d403 1
a403 5
		if ((ip->data + 2 * (sizeof in)) > (buf + len)) {
			printf(" [|payload]");
			return;
		}
		memcpy (&in.s_addr, ip->data, sizeof in);
d405 2
a406 2
		    ip->type == IPSEC_ID_IPV4_ADDR_SUBNET ? "/" : "-");
		memcpy (&in.s_addr, ip->data + sizeof in, sizeof in);
d411 1
a411 5
		if ((ip->data + sizeof ntop_buf) > (buf + len)) {
			printf(" [|payload]");
			return;
		}
		printf("%s", inet_ntop (AF_INET6, ip->data, ntop_buf,
a413 1

d416 1
a416 5
		if ((ip->data + 2 * sizeof ntop_buf) > (buf + len)) {
			printf(" [|payload]");
			return;
		}
		printf("%s%s", inet_ntop (AF_INET6, ip->data, ntop_buf,
d418 2
a419 2
		    ip->type == IPSEC_ID_IPV6_ADDR_SUBNET ? "/" : "-");
		printf("%s", inet_ntop (AF_INET6, ip->data + sizeof ntop_buf,
a420 1
		break;
d425 1
a425 1
		for (p = ip->data; (int)(p - buf) < len; p++)
d440 1
a440 42
ike_pl_delete_print (u_int8_t *buf, int len)
{
  	struct delete_payload *dp = (struct delete_payload *)buf;
	u_int16_t s;
	u_int8_t *data;

	if (len < sizeof (struct delete_payload)) {
		printf(" [|payload]");
		return;
	}

	dp->doi   = ntohl(dp->doi);
	dp->nspis = ntohs(dp->nspis);

	if (dp->doi != ISAKMP_DOI && dp->doi != IPSEC_DOI) {
		printf(" (unknown DOI)");
		return;
	}

	printf(" DOI: %u(%s) proto: %s nspis: %u", dp->doi,
	    dp->doi == ISAKMP_DOI ? "ISAKMP" : "IPSEC",
	    dp->proto < (sizeof ike / sizeof ike[0]) ? ike[dp->proto] :
	    "(unknown)", dp->nspis);

	if ((dp->spi + dp->nspis * dp->spi_size) > (buf + len)) {
		printf(" [|payload]");
		return;
	}

	for (s = 0; s < dp->nspis; s++) {
		data = dp->spi + s * dp->spi_size;
		if (dp->spi_size == 16)
			printf("\n\t%scookie: %s", ike_tab_offset(),
			    ike_get_cookie(&data[0], &data[8]));
		else
			printf("\n\t%sSPI: 0x%08x", ike_tab_offset(),
			    data[0]<<24 | data[1]<<16 | data[2]<<8 | data[3]);
	}
}

void
ike_pl_notification_print (u_int8_t *buf, int len)
d445 1
a445 1
	u_int8_t *attr;
d448 1
a448 1
		printf(" [|payload]");
d507 1
a507 1
ike_pl_vendor_print (u_int8_t *buf, int len, u_int8_t doi)
d509 1
a509 7
	struct vendor_payload *vp = (struct vendor_payload *)buf;
	u_int8_t *p;

	if (len < sizeof(struct vendor_payload)) {
		printf(" [|payload]");
		return;
	}
d515 2
a516 2
	for (p = vp->vid; (int)(p - buf) < len; p++)
		printf("%c", (isprint(*p) ? *p : '.'));
d522 1
a522 1
ike_cfg_attribute_print (u_int8_t *buf, int attr_type, int maxlen)
d528 1
a528 1
	u_int8_t af = buf[0] >> 7;
d530 2
a531 2
	u_int16_t len = af ? 2 : buf[2] << 8 | buf[3], p;
	u_int8_t *val = af ? buf + 2 : buf + 4;
d610 1
a610 1
ike_pl_attribute_print (u_int8_t *buf, int len)
a611 1
	struct attribute_payload *ap = (struct attribute_payload *)buf;
d613 2
a614 1
	u_int8_t *attr = buf + sizeof(struct attribute_payload);
d616 3
a618 4
	if (len < sizeof(struct attribute_payload)) {
		printf(" [|payload]");
		return;
	}
d621 2
a622 2
	    ap->type < (sizeof pl_attr/sizeof pl_attr[0]) ? pl_attr[ap->type] :
	    "<unknown>", ap->id);
d624 2
a625 3
	while ((int)(attr - buf) < len)
		attr += ike_cfg_attribute_print(attr, ap->type,
		    len - (attr - buf));
d629 1
a629 1
ike_pl_print (u_int8_t type, u_int8_t *buf, u_int8_t doi)
d632 2
a633 2
	u_int8_t next_type = buf[0];
	u_int16_t this_len = buf[2]<<8 | buf[3];
d635 1
a635 1
	printf("\n\t%spayload: %s len: %hu", ike_tab_offset(),
d639 1
a639 5
	if ((type < PAYLOAD_RESERVED_MIN
	    && this_len < min_payload_lengths[type]) || this_len == 0)
		goto pltrunc;

	if ((u_int8_t *)&(buf[0]) > snapend - this_len)
d648 1
a648 1
		ike_pl_sa_print(buf, this_len);
d652 1
a652 1
		ike_pl_proposal_print(buf, this_len, doi);
d656 1
a656 1
		ike_pl_transform_print(buf, this_len, doi);
d660 1
a660 1
		ike_pl_ke_print(buf, this_len, doi);
d665 1
a665 1
		ipsec_id_print(buf, this_len, doi);
a672 2
		break;

a673 1
		ike_pl_delete_print(buf, this_len);
d681 1
a681 1
		ike_pl_vendor_print(buf, this_len, doi);
d685 1
a685 1
		ike_pl_attribute_print(buf, this_len);
@


1.1.1.6
log
@import some updates/fixes from openbsd
@
text
@d1 1
a1 1
/*	$OpenBSD: print-ike.c,v 1.26 2004/10/07 09:50:48 hshoexer Exp $	*/
d32 1
a32 1
    "@@(#) $Header: /cvs/src/usr.sbin/tcpdump/print-ike.c,v 1.26 2004/10/07 09:50:48 hshoexer Exp $ (XXX)";
d336 1
a336 1
			printf("%02x", *(buf + 4 + val));
d620 1
a620 1
	u_int32_t *replay, *seq;
d645 1
a645 1
		printf("RESPONDER LIFETIME ");
a675 15
	case NOTIFY_STATUS_DPD_R_U_THERE:
	case NOTIFY_STATUS_DPD_R_U_THERE_ACK:
		printf("STATUS_DPD_R_U_THERE%s ",
		    np->type == NOTIFY_STATUS_DPD_R_U_THERE ? "" : "_ACK");
		if (np->spi_size != 16 ||
		    len < sizeof(struct notification_payload) +
		    sizeof(u_int32_t))
			printf("[bad notify]");
		else {
			seq = (u_int32_t *)&np->data[np->spi_size];
			printf("seq %u", ntohl(*seq));
		}
		break;
		

a686 1
	int i;
a692 7
	for (i = 0; i < sizeof vendor_ids / sizeof vendor_ids[0]; i ++)
		if (memcmp(vp->vid, vendor_ids[i].vid,
		    sizeof vendor_ids[i].vid) == 0) {
			printf (" (supports %s)", vendor_ids[i].name);
			return;
		}

d715 1
a715 1
	printf("\n\t%sattribute %s = ", ike_tab_offset(),
a815 2
	static const char *plprivtypes[] = 
	    IKE_PRIVATE_PAYLOAD_TYPES_INITIALIZER;
d819 3
a821 7
	if (type < PAYLOAD_PRIVATE_MIN || type >= PAYLOAD_PRIVATE_MAX)
		printf("\n\t%spayload: %s len: %hu", ike_tab_offset(),
		    (type < (sizeof pltypes/sizeof pltypes[0]) ?
			pltypes[type] : "<unknown>"), this_len);
	else
		printf("\n\t%spayload: %s len: %hu", ike_tab_offset(),
		    plprivtypes[type - PAYLOAD_PRIVATE_MIN], this_len);
d823 2
a824 2
	if ((type < PAYLOAD_RESERVED_MIN &&
	    this_len < min_payload_lengths[type]) || this_len == 0)
a826 5
	if ((type > PAYLOAD_PRIVATE_MIN && type < PAYLOAD_PRIVATE_MAX &&
	    this_len < min_priv_payload_lengths[type - PAYLOAD_PRIVATE_MIN]) ||
	    this_len == 0)
		goto pltrunc;
	    
@


