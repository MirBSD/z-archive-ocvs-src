head	1.2;
access;
symbols
	MIRBSD_7quater:1.1.1.1
	cvs-200401271800:1.1.1.1
	cvs-200401261630:1.1.1.1
	cvs-200401021645:1.1.1.1
	MIRBSD_7_ALPHA:1.1.1.1.0.6
	MIRBSD_7:1.1.1.1.0.4
	cvs-200312222040:1.1.1.1
	MIRBSD_7ter:1.1.1.1
	MIRBSD_7_DEV:1.1.1.1.0.2
	cvs-200310020700:1.1.1.1
	cvs-200309271030:1.1.1.1
	cvs-200309261655:1.1.1.1
	cvs-200309251530:1.1.1.1
	cvs-200308302005:1.1.1.1
	cvs-200308171200:1.1.1.1
	ctm-3496:1.1.1.1
	ctm-3449:1.1.1.1
	ctm-3437:1.1.1.1
	cvs-200307191805:1.1.1.1
	ctm-3425:1.1.1.1
	cvs-200307091500:1.1.1.1
	ctm-3389:1.1.1.1
	cvs-200306291430:1.1.1.1
	ctm-3341:1.1.1.1
	MIRBSD_5:1.1.1.1
	cvs-200306082100:1.1.1.1
	ctm-3316:1.1.1.1
	ctm-3272:1.1.1.1
	ctm-3264:1.1.1.1
	cvs-200305071630:1.1.1.1
	MIRBSD_4:1.1.1.1
	ctm-3203:1.1.1.1
	cvs-20030410-1130:1.1.1.1
	ctm-3155:1.1.1.1
	ctm-3132:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.2
date	2004.05.21.20.08.09;	author tg;	state dead;
branches;
next	1.1;

1.1
date	2003.03.22.17.54.59;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.03.22.17.54.59;	author tg;	state Exp;
branches;
next	;


desc
@@


1.2
log
@* merge OpenBSD 3.5-current
* re-sort entries in Makefile
  => not a bunch of adds any more; all alphabetic
  => remove obsolete SUBDIRS_ONLY_BSD for now
     (MirLinux won't come that soon due to a certain lawsuit,
      licence issues with unwillingly GNU fanatics, and my
      chronic unwillingness to do masochistic work)
* spacing, RCS IDs, etc.
* pkg gets folded into pkg_install, so we only have one dir
  to worry about
* pkg_add leaves the tree - nobody cared about this kind
  of package tools anyways, and they're not part of MirBSD
  (although still supported by MirPorts)
* mopd leaves - we don't have VAX support anyways
@
text
@/* alloc.c

   Memory allocation... */

/*
 * Copyright (c) 1995, 1996, 1998 The Internet Software Consortium.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of The Internet Software Consortium nor the names
 *    of its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE INTERNET SOFTWARE CONSORTIUM AND
 * CONTRIBUTORS ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES,
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED.  IN NO EVENT SHALL THE INTERNET SOFTWARE CONSORTIUM OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
 * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
 * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * This software has been written for the Internet Software Consortium
 * by Ted Lemon <mellon@@fugue.com> in cooperation with Vixie
 * Enterprises.  To learn more about the Internet Software Consortium,
 * see ``http://www.vix.com/isc''.  To learn more about Vixie
 * Enterprises, see ``http://www.vix.com''.
 */

#include "dhcpd.h"

struct dhcp_packet *dhcp_free_list;
struct packet *packet_free_list;

void * dmalloc(size, name)
	int size;
	char *name;
{
	void *foo = calloc(size, sizeof(char));
	if (!foo)
		warn ("No memory for %s.", name);
	return foo;
}

void dfree(ptr, name)
	void *ptr;
	char *name;
{
	if (!ptr) {
		warn ("dfree %s: free on null pointer.", name);
		return;
	}
	free (ptr);
}

struct packet *new_packet(name)
	char *name;
{
	struct packet *rval;
	rval = (struct packet *)dmalloc(sizeof(struct packet), name);
	return rval;
}

struct dhcp_packet *new_dhcp_packet(name)
	char *name;
{
	struct dhcp_packet *rval;
	rval = (struct dhcp_packet *)dmalloc(sizeof(struct dhcp_packet),
	          name);
	return rval;
}

struct tree *new_tree(name)
	char *name;
{
	struct tree *rval = dmalloc(sizeof(struct tree), name);
	return rval;
}

struct string_list *new_string_list(size, name)
	size_t size;
	char * name;
{
	struct string_list *rval;

	rval =dmalloc(sizeof(struct string_list) + size, name);
	if (rval != NULL) 
		rval->string = ((char *)rval) + sizeof(struct string_list);
	return rval;
}

struct tree_cache *free_tree_caches;

struct tree_cache *new_tree_cache(name)
	char *name;
{
	struct tree_cache *rval;

	if (free_tree_caches) {
		rval = free_tree_caches;
		free_tree_caches =
			(struct tree_cache *)(rval->value);
	} else {
		rval = dmalloc(sizeof(struct tree_cache), name);
		if (!rval)
			error("unable to allocate tree cache for %s.", name);
	}
	return rval;
}

struct hash_table *new_hash_table(count, name)
	int count;
	char *name;
{
	struct hash_table *rval;
	rval = dmalloc(sizeof (struct hash_table)
          - (DEFAULT_HASH_SIZE * sizeof(struct hash_bucket *))
          + (count * sizeof(struct hash_bucket *)), name);
	if (rval == NULL)
		return NULL;
	rval->hash_count = count;
	return rval;
}

struct hash_bucket *new_hash_bucket(name)
	char *name;
{
	struct hash_bucket *rval = dmalloc(sizeof(struct hash_bucket), name);
	return rval;
}

struct lease *new_leases(n, name)
	int n;
	char *name;
{
	struct lease *rval = dmalloc(n * sizeof(struct lease), name);
	return rval;
}

struct lease *new_lease(name)
	char *name;
{
	struct lease *rval = dmalloc(sizeof(struct lease), name);
	return rval;
}

struct subnet *new_subnet(name)
	char *name;
{
	struct subnet *rval = dmalloc(sizeof(struct subnet), name);
	return rval;
}

struct class *new_class(name)
	char *name;
{
	struct class *rval = dmalloc(sizeof(struct class), name);
	return rval;
}

struct shared_network *new_shared_network(name)
	char *name;
{
	struct shared_network *rval =
		dmalloc (sizeof(struct shared_network), name);
	return rval;
}

struct group *new_group(name)
	char *name;
{
	struct group *rval =
		dmalloc(sizeof(struct group), name);
	return rval;
}

struct protocol *new_protocol(name)
	char *name;
{
	struct protocol *rval = dmalloc(sizeof(struct protocol), name);
	return rval;
}

struct lease_state *free_lease_states;

struct lease_state *new_lease_state (name)
	char *name;
{
	struct lease_state *rval;

	if (free_lease_states) {
		rval = free_lease_states;
		free_lease_states =
			(struct lease_state *)(free_lease_states->next);
	} else {
		rval = dmalloc (sizeof (struct lease_state), name);
	}
	return rval;
}

struct domain_search_list *new_domain_search_list (name)
	char *name;
{
	struct domain_search_list *rval =
		dmalloc (sizeof (struct domain_search_list), name);
	return rval;
}

struct name_server *new_name_server (name)
	char *name;
{
	struct name_server *rval =
		dmalloc (sizeof (struct name_server), name);
	return rval;
}

void free_name_server (ptr, name)
	struct name_server *ptr;
	char *name;
{
	dfree (ptr, name);
}

void free_domain_search_list (ptr, name)
	struct domain_search_list *ptr;
	char *name;
{
	dfree (ptr, name);
}

void free_lease_state (ptr, name)
	struct lease_state *ptr;
	char *name;
{
	if (ptr->prl)
		dfree (ptr->prl, name);
	ptr->next = free_lease_states;
	free_lease_states = ptr;
}

void free_protocol (ptr, name)
	struct protocol *ptr;
	char *name;
{
	dfree (ptr, name);
}

void free_group (ptr, name)
	struct group *ptr;
	char *name;
{
	dfree (ptr, name);
}

void free_shared_network (ptr, name)
	struct shared_network *ptr;
	char *name;
{
	dfree (ptr, name);
}

void free_class (ptr, name)
	struct class *ptr;
	char *name;
{
	dfree (ptr, name);
}

void free_subnet (ptr, name)
	struct subnet *ptr;
	char *name;
{
	dfree (ptr, name);
}

void free_lease (ptr, name)
	struct lease *ptr;
	char *name;
{
	dfree (ptr, name);
}

void free_hash_bucket (ptr, name)
	struct hash_bucket *ptr;
	char *name;
{
	dfree (ptr, name);
}

void free_hash_table (ptr, name)
	struct hash_table *ptr;
	char *name;
{
	dfree (ptr, name);
}

void free_tree_cache (ptr, name)
	struct tree_cache *ptr;
	char *name;
{
	ptr->value = (unsigned char *)free_tree_caches;
	free_tree_caches = ptr;
}

void free_packet (ptr, name)
	struct packet *ptr;
	char *name;
{
	dfree (ptr, name);
}

void free_dhcp_packet (ptr, name)
	struct dhcp_packet *ptr;
	char *name;
{
	dfree (ptr, name);
}

void free_tree (ptr, name)
	struct tree *ptr;
	char *name;
{
	dfree (ptr, name);
}

void free_string_list (ptr, name)
	struct string_list *ptr;
	char *name;
{
	dfree (ptr, name);
}
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Import OpenBSD 3.3 source repository from CTM 3132 the first time
This opens an OpenBSD-mirabile (aka MirBSD) repository.

### MirBSD is:
# Copyright (c) 1982-2003 by Thorsten "mirabile" Glaser <x86@@ePost.de>
# Copyright © 1968-2003  The authors of And contributors to UNIX®, the
#       C Language, BSD/Berkeley Unix; 386BSD, NetBSD 1.1 and OpenBSD.
#
# Anyone who obtained a copy of this work is hereby permitted to freely use,
# distribute, modify, merge, sublicence, give away or sell it as long as the
# authors are given due credit and the following notice is retained:
#
# This work is provided "as is", with no explicit or implicit warranty what-
# soever. Use it only at your own risk. In no event may an author or contri-
# butor be held liable for any damage, directly or indirectly, that origina-
# ted through or is caused by creation or modification of this work.

MirBSD is my private tree. MirBSD does not differ very much from OpenBSD
and intentionally tracks OpenBSD. That's why it _is_ OpenBSD, just not the
official one. It's like with DarrenBSD.

At time of this writing, no advertising for MirBSD must be done,
because the advertising clause has not yet been sorted out.

http://templeofhate.com/tglaser/MirBSD/index.php
@
text
@@
