head	1.2;
access;
symbols
	MIRBSD_7quater:1.1.1.1
	cvs-200401271800:1.1.1.1
	cvs-200401261630:1.1.1.1
	cvs-200401021645:1.1.1.1
	MIRBSD_7_ALPHA:1.1.1.1.0.6
	MIRBSD_7:1.1.1.1.0.4
	cvs-200312222040:1.1.1.1
	MIRBSD_7ter:1.1.1.1
	MIRBSD_7_DEV:1.1.1.1.0.2
	cvs-200310020700:1.1.1.1
	cvs-200309271030:1.1.1.1
	cvs-200309261655:1.1.1.1
	cvs-200309251530:1.1.1.1
	cvs-200308302005:1.1.1.1
	cvs-200308171200:1.1.1.1
	ctm-3496:1.1.1.1
	ctm-3449:1.1.1.1
	ctm-3437:1.1.1.1
	cvs-200307191805:1.1.1.1
	ctm-3425:1.1.1.1
	cvs-200307091500:1.1.1.1
	ctm-3389:1.1.1.1
	cvs-200306291430:1.1.1.1
	ctm-3341:1.1.1.1
	MIRBSD_5:1.1.1.1
	cvs-200306082100:1.1.1.1
	ctm-3316:1.1.1.1
	ctm-3272:1.1.1.1
	ctm-3264:1.1.1.1
	cvs-200305071630:1.1.1.1
	MIRBSD_4:1.1.1.1
	ctm-3203:1.1.1.1
	cvs-20030410-1130:1.1.1.1
	ctm-3155:1.1.1.1
	ctm-3132:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.2
date	2004.05.21.20.08.24;	author tg;	state dead;
branches;
next	1.1;

1.1
date	2003.03.22.17.55.03;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.03.22.17.55.03;	author tg;	state Exp;
branches;
next	;


desc
@@


1.2
log
@* merge OpenBSD 3.5-current
* re-sort entries in Makefile
  => not a bunch of adds any more; all alphabetic
  => remove obsolete SUBDIRS_ONLY_BSD for now
     (MirLinux won't come that soon due to a certain lawsuit,
      licence issues with unwillingly GNU fanatics, and my
      chronic unwillingness to do masochistic work)
* spacing, RCS IDs, etc.
* pkg gets folded into pkg_install, so we only have one dir
  to worry about
* pkg_add leaves the tree - nobody cared about this kind
  of package tools anyways, and they're not part of MirBSD
  (although still supported by MirPorts)
* mopd leaves - we don't have VAX support anyways
@
text
@/* main.c

   System configuration status daemon...

   !!!Boy, howdy, is this ever not guaranteed not to change!!! */

/*
 * Copyright (c) 1997 The Internet Software Consortium.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of The Internet Software Consortium nor the names
 *    of its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE INTERNET SOFTWARE CONSORTIUM AND
 * CONTRIBUTORS ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES,
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED.  IN NO EVENT SHALL THE INTERNET SOFTWARE CONSORTIUM OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
 * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
 * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * This software has been written for the Internet Software Consortium
 * by Ted Lemon <mellon@@fugue.com> in cooperation with Vixie
 * Enterprises.  To learn more about the Internet Software Consortium,
 * see ``http://www.vix.com/isc''.  To learn more about Vixie
 * Enterprises, see ``http://www.vix.com''.
 */

#ifndef lint
static char copyright[] =
"$Id: sysconfd.c,v 1.1 2003/03/22 17:55:03 tg Exp $ Copyright (c) 1995, 1996 The Internet Software Consortium.  All rights reserved.\n";
#endif /* not lint */

#include "dhcpd.h"

int sysconf_fd;

struct sysconf_client {
	struct sysconf_client *next;
	int fd;
} *clients;

static void new_connection PROTO ((struct protocol *));
static void client_input PROTO ((struct protocol *));

int log_priority;
int log_perror;

struct interface_info fallback_interface;
TIME cur_time;
u_int16_t local_port;


int main (argc, argv, envp)
	int argc;
	char **argv;
	char **envp;
{
	struct sockaddr_un name;
	int sysconf_fd;
	int pid;

#ifdef SYSLOG_4_2
	openlog ("sysconfd", LOG_NDELAY);
	log_priority = LOG_DAEMON;
#else
	openlog ("sysconfd", LOG_NDELAY, LOG_DAEMON);
#endif

#if !(defined (DEBUG) || defined (SYSLOG_4_2) || defined (__CYGWIN32__))
	setlogmask (LOG_UPTO (LOG_INFO));
#endif	

	/* Make a socket... */
	sysconf_fd = socket (AF_UNIX, SOCK_STREAM, 0);
	if (sysconf_fd < 0)
		error ("unable to create sysconf socket: %m");

	/* XXX for now... */
	memset(&name, 0, sizeof(name));
	name.sun_family = PF_UNIX;
	strlcpy (name.sun_path, "/var/run/sysconf", sizeof name.sun_path);
	name.sun_len = ((sizeof name) - (sizeof name.sun_path) +
			strlen (name.sun_path));
	unlink (name.sun_path);

	/* Bind to it... */
	if (bind (sysconf_fd, (struct sockaddr *)&name, name.sun_len) < 0)
		error ("can't bind to sysconf socket: %m");

	/* Listen for connections... */
	if (listen (sysconf_fd, 1) < 0)
		error ("can't listen on sysconf socket: %m");

	/* Stop logging to stderr... */
	log_perror = 0;

	/* Become a daemon... */
	if ((pid = fork ()) < 0)
		error ("Can't fork daemon: %m");
	else if (pid)
		exit (0);

	/* Become session leader... */
	(void)setsid ();

	/* Set up a protocol structure for it... */
	add_protocol ("listener", sysconf_fd, new_connection, 0);

	/* Kernel status stuff goes here... */

	/* Wait for something to happen... */
	dispatch ();

	exit (0);
}

void new_connection (proto)
	struct protocol *proto;
{
	struct sockaddr_un name;
	int namelen;
	struct sysconf_client *tmp;
	int new_fd;

	tmp = (struct sysconf_client *)malloc (sizeof *tmp);
	if (tmp == NULL)
		error ("Can't find memory for new client!");
	memset (tmp, 0, sizeof *tmp);

	namelen = sizeof name;
	new_fd = accept (proto -> fd, (struct sockaddr *)&name, &namelen);
	if (new_fd < 0)
		warn ("accept: %m");

	tmp -> next = clients;
	tmp -> fd = new_fd;
	clients = tmp;

	add_protocol ("aclient", new_fd, client_input, 0);
}

void client_input (proto)
	struct protocol *proto;
{
	struct sysconf_header hdr;
	int status;
	char *buf;
	void (*handler) PROTO ((struct sysconf_header *, void *));
	struct sysconf_client *client;

	status = read (proto -> fd, &hdr, sizeof hdr);
	if (status < 0) {
	      blow:
		warn ("client_input: %m");
		close (proto -> fd);
		remove_protocol (proto);
		return;
	}
	if (status < sizeof (hdr)) {
		warn ("client_input: short message");
		goto blow;
	}

	if (hdr.length) {
		buf = malloc (hdr.length);
		if (!buf) {
			warn ("client_input: can't buffer payload");
			goto blow;
		}
		status = read (proto -> fd, buf, hdr.length);
		if (status < 0) {
			warn ("client_input payload read: %m");
			goto blow;
		}
		if (status != hdr.length) {
			warn ("client_input payload: short read");
			goto blow;
		}
	} else
		buf = (char *)0;

	for (client = clients; client; client = client -> next) {
		if (client -> fd == proto -> fd)
			continue;

		status = write (client -> fd, &hdr, sizeof hdr);
		if (status < 0) {
			warn ("client_input: %m");
			continue;
		}
		if (status < sizeof (hdr)) {
			warn ("client_input: short write");
			continue;
		}

		if (hdr.length) {
			status = write (client -> fd, buf, hdr.length);
			if (status < 0) {
				warn ("client_input payload write: %m");
				continue;
			}
			if (status != hdr.length) {
				warn ("client_input payload: short write");
				continue;
			}
		}
	}

	if (buf)
		free (buf);
}

void cleanup ()
{
}

int commit_leases ()
{
	return 0;
}

int write_lease (lease)
	struct lease *lease;
{
	return 0;
}

void db_startup ()
{
}

void bootp (packet)
	struct packet *packet;
{
}

void dhcp (packet)
	struct packet *packet;
{
}


@


1.1
log
@Initial revision
@
text
@d47 1
a47 1
"$Id: sysconfd.c,v 1.4 2002/07/03 23:11:29 deraadt Exp $ Copyright (c) 1995, 1996 The Internet Software Consortium.  All rights reserved.\n";
@


1.1.1.1
log
@Import OpenBSD 3.3 source repository from CTM 3132 the first time
This opens an OpenBSD-mirabile (aka MirBSD) repository.

### MirBSD is:
# Copyright (c) 1982-2003 by Thorsten "mirabile" Glaser <x86@@ePost.de>
# Copyright © 1968-2003  The authors of And contributors to UNIX®, the
#       C Language, BSD/Berkeley Unix; 386BSD, NetBSD 1.1 and OpenBSD.
#
# Anyone who obtained a copy of this work is hereby permitted to freely use,
# distribute, modify, merge, sublicence, give away or sell it as long as the
# authors are given due credit and the following notice is retained:
#
# This work is provided "as is", with no explicit or implicit warranty what-
# soever. Use it only at your own risk. In no event may an author or contri-
# butor be held liable for any damage, directly or indirectly, that origina-
# ted through or is caused by creation or modification of this work.

MirBSD is my private tree. MirBSD does not differ very much from OpenBSD
and intentionally tracks OpenBSD. That's why it _is_ OpenBSD, just not the
official one. It's like with DarrenBSD.

At time of this writing, no advertising for MirBSD must be done,
because the advertising clause has not yet been sorted out.

http://templeofhate.com/tglaser/MirBSD/index.php
@
text
@@
