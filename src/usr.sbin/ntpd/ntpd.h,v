head	1.5;
access;
symbols
	tg-mergetmp-mirosx-1:1.5
	tg-mergefixes-1-branch:1.5.0.4
	tg-mergefixes-1-base:1.5
	MIROS_X:1.5.0.2
	MIROS_X_BASE:1.5
	tg-mergetmp-3:1.5
	cvs-200412082250:1.1.1.5
	cvs-200411261545:1.1.1.4
	MIRBSD_XP_MIRPPC:1.1.1.1.0.4
	cvs-200410281445:1.1.1.3
	cvs-200410222245:1.1.1.3
	cvs-200410151735:1.1.1.2
	cvs-200410141645:1.1.1.2
	MIRBSD_XP_SPARC_BASE:1.1.1.1
	MIRBSD_XP_SPARC:1.1.1.1.0.2
	cvs-200409261605:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.5
date	2004.12.08.22.56.42;	author tg;	state Exp;
branches;
next	1.4;

1.4
date	2004.11.26.16.50.09;	author tg;	state Exp;
branches;
next	1.3;

1.3
date	2004.10.22.22.50.33;	author tg;	state Exp;
branches;
next	1.2;

1.2
date	2004.10.22.17.34.06;	author tg;	state Exp;
branches;
next	1.1;

1.1
date	2004.09.26.16.09.59;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2004.09.26.16.09.59;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2004.10.14.17.16.35;	author tg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2004.10.22.22.46.19;	author tg;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2004.11.26.15.49.40;	author tg;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2004.12.08.22.51.46;	author tg;	state Exp;
branches;
next	;


desc
@@


1.5
log
@merge what we want
@
text
@/**	$MirBSD: src/usr.sbin/ntpd/ntpd.h,v 1.4 2004/11/26 16:50:09 tg Exp $ */
/*	$OpenBSD: ntpd.h,v 1.45 2004/12/06 16:52:33 mickey Exp $ */

/*
 * Copyright (c) 2003, 2004 Henning Brauer <henning@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF MIND, USE, DATA OR PROFITS, WHETHER
 * IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING
 * OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/types.h>
#include <sys/uio.h>
#include <sys/socket.h>
#include <sys/queue.h>
#include <sys/time.h>
#include <netinet/in.h>
#include <netinet/in_systm.h>
#include <netinet/ip.h>
#include <arpa/inet.h>
#include <netdb.h>
#include <stdarg.h>

#include "ntp.h"

#define	NTPD_USER	"_ntp"
#define	CONFFILE	"/etc/ntpd.conf"

#define	READ_BUF_SIZE		65535

#define	NTPD_OPT_VERBOSE	0x0001
#define	NTPD_OPT_VERBOSE2	0x0002

#define INTERVAL_MANIPULATOR		(4 - (rand() / (RAND_MAX >> 3)))
/* sync to peers every n secs */
#define	INTERVAL_QUERY_NORMAL		(30 + INTERVAL_MANIPULATOR)
#define	INTERVAL_QUERY_PATHETIC		(60 + INTERVAL_MANIPULATOR)
#define	INTERVAL_QUERY_AGRESSIVE	(5 + (INTERVAL_MANIPULATOR / 3))

#define	TRUSTLEVEL_BADPEER		6
#define	TRUSTLEVEL_PATHETIC		2
#define	TRUSTLEVEL_AGRESSIVE		8

#define	QSCALE_OFF_MIN			0.05
#define	QSCALE_OFF_MAX			0.50

#define	QUERYTIME_MAX		15	/* single query might take n secs max */
#define	OFFSET_ARRAY_SIZE	8
#define	SETTIME_MIN_OFFSET	180	/* min offset for settime at start */

enum client_state {
	STATE_NONE,
	STATE_QUERY_SENT,
	STATE_REPLY_RECEIVED
};

struct listen_addr {
	TAILQ_ENTRY(listen_addr)	 entry;
	struct sockaddr_storage		 sa;
	int				 fd;
};

struct ntp_addr {
	struct ntp_addr		*next;
	struct sockaddr_storage	 ss;
};

struct ntp_addr_wrap {
	char			*name;
	struct ntp_addr		*a;
	u_int8_t		 pool;
};

struct ntp_status {
	double		rootdelay;
	double		rootdispersion;
	double		reftime;
	u_int32_t	refid;
	u_int8_t	leap;
	int8_t		precision;
	u_int8_t	poll;
	u_int8_t	stratum;
};

struct ntp_offset {
	struct ntp_status	status;
	double			offset;
	double			delay;
	double			error;
	time_t			rcvd;
	u_int8_t		good;
};

struct ntp_peer {
	TAILQ_ENTRY(ntp_peer)		 entry;
	struct ntp_addr_wrap		 addr_head;
	struct ntp_addr			*addr;
	struct ntp_query		*query;
	struct ntp_offset		 reply[OFFSET_ARRAY_SIZE];
	struct ntp_offset		 update;
	enum client_state		 state;
	time_t				 next;
	time_t				 deadline;
	u_int32_t			 id;
	u_int8_t			 shift;
	u_int8_t			 trustlevel;
};

struct ntpd_conf {
	TAILQ_HEAD(listen_addrs, listen_addr)	listen_addrs;
	TAILQ_HEAD(ntp_peers, ntp_peer)		ntp_peers;
	struct ntp_status			status;
	u_int8_t				listen_all;
	u_int8_t				settime;
	u_int8_t				debug;
};

struct buf {
	TAILQ_ENTRY(buf)	 entries;
	u_char			*buf;
	ssize_t			 size;
	ssize_t			 wpos;
	ssize_t			 rpos;
};

struct msgbuf {
	TAILQ_HEAD(bufs, buf)	 bufs;
	u_int32_t		 queued;
	int			 fd;
};

struct buf_read {
	ssize_t			 wpos;
	u_char			 buf[READ_BUF_SIZE];
	u_char			*rptr;
};

/* ipc messages */

#define	IMSG_HEADER_SIZE	sizeof(struct imsg_hdr)
#define	MAX_IMSGSIZE		8192

struct imsgbuf {
	int			fd;
	pid_t			pid;
	struct buf_read		r;
	struct msgbuf		w;
};

enum imsg_type {
	IMSG_NONE,
	IMSG_ADJTIME,
	IMSG_SETTIME,
	IMSG_HOST_DNS
};

struct imsg_hdr {
	enum imsg_type	type;
	u_int32_t	peerid;
	pid_t		pid;
	u_int16_t	len;
};

struct imsg {
	struct imsg_hdr	 hdr;
	void		*data;
};

/* prototypes */
/* log.c */
void		 log_init(int);
void		 vlog(int, const char *, va_list);
void		 log_warn(const char *, ...);
void		 log_warnx(const char *, ...);
void		 log_info(const char *, ...);
void		 log_debug(const char *, ...);
void		 fatal(const char *);
void		 fatalx(const char *);
const char *	 log_sockaddr(struct sockaddr *);

/* buffer.c */
struct buf	*buf_open(ssize_t);
int		 buf_add(struct buf *, void *, ssize_t);
int		 buf_close(struct msgbuf *, struct buf *);
void		 buf_free(struct buf *);
void		 msgbuf_init(struct msgbuf *);
void		 msgbuf_clear(struct msgbuf *);
int		 msgbuf_write(struct msgbuf *);

/* imsg.c */
void	 imsg_init(struct imsgbuf *, int);
int	 imsg_read(struct imsgbuf *);
int	 imsg_get(struct imsgbuf *, struct imsg *);
int	 imsg_compose(struct imsgbuf *, enum imsg_type, u_int32_t, pid_t,
	    void *, u_int16_t);
struct buf	*imsg_create(struct imsgbuf *, enum imsg_type, u_int32_t, pid_t,
		    u_int16_t);
int	 imsg_add(struct buf *, void *, u_int16_t);
int	 imsg_close(struct imsgbuf *, struct buf *);
void	 imsg_free(struct imsg *);

/* ntp.c */
pid_t	 ntp_main(int[2], struct ntpd_conf *);
void	 priv_adjtime(void);
void	 priv_settime(double);
void	 priv_host_dns(char *, u_int32_t);

/* parse.y */
int	 parse_config(const char *, struct ntpd_conf *);

/* config.c */
int		 host(const char *, struct ntp_addr **);
int		 host_dns(const char *, struct ntp_addr **);
struct ntp_peer	*new_peer(void);

/* ntp_msg.c */
int	ntp_getmsg(char *, ssize_t, struct ntp_msg *);
int	ntp_sendmsg(int, struct sockaddr *, struct ntp_msg *, ssize_t, int);

/* server.c */
int	setup_listeners(struct servent *, struct ntpd_conf *, u_int *);
int	ntp_reply(int, struct sockaddr *, struct ntp_msg *, int);
int	server_dispatch(int, struct ntpd_conf *);

/* client.c */
int	client_peer_init(struct ntp_peer *);
int	client_addr_init(struct ntp_peer *);
int	client_nextaddr(struct ntp_peer *);
int	client_query(struct ntp_peer *);
int	client_dispatch(struct ntp_peer *, u_int8_t);

/* util.c */
double			gettime(void);
void			d_to_tv(double, struct timeval *);
double			lfp_to_d(struct l_fixedpt);
struct l_fixedpt	d_to_lfp(double);
double			sfp_to_d(struct s_fixedpt);
struct s_fixedpt	d_to_sfp(double);
@


1.4
log
@merge
@
text
@d1 2
a2 2
/**	$MirBSD: src/usr.sbin/ntpd/ntpd.h,v 1.3 2004/10/22 22:50:33 tg Exp $ */
/*	$OpenBSD: ntpd.h,v 1.44 2004/11/12 17:24:52 henning Exp $ */
d78 1
a79 1
	struct ntp_addr		*a;
a82 2
	u_int8_t	leap;
	int8_t		precision;
d85 1
d87 2
a88 1
	double		reftime;
d94 1
a94 1
	u_int8_t		good;
d99 1
a99 1
	struct ntp_status	status;
a103 1
	u_int32_t			 id;
d107 2
d112 1
a112 2
	struct ntp_offset		 reply[OFFSET_ARRAY_SIZE];
	struct ntp_offset		 update;
d120 1
a123 1
	struct ntp_status			status;
d135 1
a137 1
	TAILQ_HEAD(bufs, buf)	 bufs;
d141 1
a143 1
	ssize_t			 wpos;
a166 1
	u_int16_t	len;
d169 1
@


1.3
log
@merge
[x] tested
@
text
@d1 2
a2 2
/**	$MirBSD: src/usr.sbin/ntpd/ntpd.h,v 1.2 2004/10/22 17:34:06 tg Exp $ */
/*	$OpenBSD: ntpd.h,v 1.41 2004/10/22 21:17:37 henning Exp $ */
d24 1
d212 3
a214 3
void	 ntp_adjtime(void);
void	 ntp_settime(double);
void	 ntp_host_dns(char *, u_int32_t);
d217 1
a217 1
int	 parse_config(char *, struct ntpd_conf *);
@


1.2
log
@instead of polling all 5 seconds, or scaling 300 (600) seconds,
vary the range within 4..6 (296..304, 596..604) seconds, so that
not all 20-30 NTP requests are sent simultaneousy.

This helps my ADSL a bit, now we need to be able to detect
asymmetrical lag (oh oh).
@
text
@d1 2
a2 2
/**	$MirBSD$ */
/*	$OpenBSD: ntpd.h,v 1.40 2004/10/14 09:35:48 dtucker Exp $ */
d89 1
@


1.1
log
@Initial revision
@
text
@d1 2
a2 1
/*	$OpenBSD: ntpd.h,v 1.39 2004/09/18 20:27:57 henning Exp $ */
d25 2
d41 5
a45 3
#define	INTERVAL_QUERY_NORMAL		30	/* sync to peers every n secs */
#define	INTERVAL_QUERY_PATHETIC		60
#define	INTERVAL_QUERY_AGRESSIVE	5
@


1.1.1.1
log
@current ntpd from OpenBSD, for a bit of fun before starting the hard work
@
text
@@


1.1.1.2
log
@updates to OpenNTPD
@
text
@d1 1
a1 1
/*	$OpenBSD: ntpd.h,v 1.40 2004/10/14 09:35:48 dtucker Exp $ */
a23 2
#include <netinet/in_systm.h>
#include <netinet/ip.h>
@


1.1.1.3
log
@gah, another update
this time: stratum correctness
@
text
@d1 1
a1 1
/*	$OpenBSD: ntpd.h,v 1.41 2004/10/22 21:17:37 henning Exp $ */
a85 1
	u_int8_t	stratum;
@


1.1.1.4
log
@another bunch of fixes from obsd, and a big isakmpd update (need testers!)
@
text
@d1 1
a1 1
/*	$OpenBSD: ntpd.h,v 1.44 2004/11/12 17:24:52 henning Exp $ */
a22 1
#include <sys/time.h>
d208 3
a210 3
void	 priv_adjtime(void);
void	 priv_settime(double);
void	 priv_host_dns(char *, u_int32_t);
d213 1
a213 1
int	 parse_config(const char *, struct ntpd_conf *);
@


1.1.1.5
log
@another ntpd update from obsd
@
text
@d1 1
a1 1
/*	$OpenBSD: ntpd.h,v 1.46 2004/12/06 20:57:17 mickey Exp $ */
a54 1
#define	LOG_NEGLIGEE		128	/* negligible drift to not log (ms) */
d75 1
a76 1
	u_int8_t		 pool;
d80 2
d84 1
a85 3
	u_int32_t	refid;
	u_int8_t	leap;
	int8_t		precision;
d91 1
a91 1
	struct ntp_status	status;
d96 1
a96 1
	u_int8_t		good;
d101 1
a104 2
	struct ntp_offset		 reply[OFFSET_ARRAY_SIZE];
	struct ntp_offset		 update;
d108 2
a109 1
	u_int32_t			 id;
a116 1
	struct ntp_status			status;
d120 1
a131 1
	TAILQ_HEAD(bufs, buf)	 bufs;
d134 1
a137 1
	ssize_t			 wpos;
d140 1
d164 1
a166 1
	u_int16_t	len;
@


