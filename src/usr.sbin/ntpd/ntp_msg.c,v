head	1.4;
access;
symbols
	tg-mergetmp-mirosx-1:1.4
	tg-mergefixes-1-branch:1.4.0.4
	tg-mergefixes-1-base:1.4
	MIROS_X:1.4.0.2
	MIROS_X_BASE:1.4
	tg-mergetmp-3:1.4
	cvs-200412082250:1.1.1.4
	cvs-200411261545:1.1.1.3
	MIRBSD_XP_MIRPPC:1.1.1.1.0.4
	cvs-200410281445:1.1.1.3
	cvs-200410222245:1.1.1.3
	cvs-200410151735:1.1.1.2
	cvs-200410141645:1.1.1.2
	MIRBSD_XP_SPARC_BASE:1.1.1.1
	MIRBSD_XP_SPARC:1.1.1.1.0.2
	cvs-200409261605:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.4
date	2004.12.08.22.56.42;	author tg;	state Exp;
branches;
next	1.3;

1.3
date	2004.10.22.22.50.33;	author tg;	state Exp;
branches;
next	1.2;

1.2
date	2004.10.14.19.54.40;	author tg;	state Exp;
branches;
next	1.1;

1.1
date	2004.09.26.16.09.59;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2004.09.26.16.09.59;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2004.10.14.17.16.34;	author tg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2004.10.22.22.46.18;	author tg;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2004.12.08.22.51.46;	author tg;	state Exp;
branches;
next	;


desc
@@


1.4
log
@merge what we want
@
text
@/**	$MirBSD: src/usr.sbin/ntpd/ntp_msg.c,v 1.3 2004/10/22 22:50:33 tg Exp $ */
/*	$OpenBSD: ntp_msg.c,v 1.13 2004/12/08 17:35:16 mickey Exp $ */

/*
 * Copyright (c) 2003, 2004 Henning Brauer <henning@@openbsd.org>
 * Copyright (c) 2004 Alexander Guy <alexander.guy@@andern.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF MIND, USE, DATA OR PROFITS, WHETHER
 * IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING
 * OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/param.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <errno.h>

#include "ntpd.h"
#include "ntp.h"

__RCSID("$MirBSD: src/usr.sbin/ntpd/ntp_msg.c,v 1.3 2004/10/22 22:50:33 tg Exp $");

int
ntp_getmsg(char *p, ssize_t len, struct ntp_msg *msg)
{
	if (len != NTP_MSGSIZE_NOAUTH && len != NTP_MSGSIZE) {
		log_warnx("malformed packet received");
		return (-1);
	}

#define	copyin(f,p)	memcpy(&(f), (p), sizeof(f)); (p) += sizeof(f)

	copyin(msg->status, p);
	copyin(msg->stratum, p);
	copyin(msg->ppoll, p);
	copyin(msg->precision, p);
	copyin(msg->rootdelay.int_parts, p);
	copyin(msg->rootdelay.fractions, p);
	copyin(msg->dispersion.int_parts, p);
	copyin(msg->dispersion.fractions, p);
	copyin(msg->refid, p);
	copyin(msg->reftime.int_partl, p);
	copyin(msg->reftime.fractionl, p);
	copyin(msg->orgtime.int_partl, p);
	copyin(msg->orgtime.fractionl, p);
	copyin(msg->rectime.int_partl, p);
	copyin(msg->rectime.fractionl, p);
	copyin(msg->xmttime.int_partl, p);
	copyin(msg->xmttime.fractionl, p);

	return (0);
}

int
ntp_sendmsg(int fd, struct sockaddr *sa, struct ntp_msg *msg, ssize_t len,
    int auth __attribute__((unused)))
{
	char		 buf[NTP_MSGSIZE];
	char		*p = buf;
	u_int8_t	sa_len;

#define	copyout(p,f)	memcpy((p), &(f), sizeof(f)); p += sizeof(f)

	copyout(p, msg->status);
	copyout(p, msg->stratum);
	copyout(p, msg->ppoll);
	copyout(p, msg->precision);
	copyout(p, msg->rootdelay.int_parts);
	copyout(p, msg->rootdelay.fractions);
	copyout(p, msg->dispersion.int_parts);
	copyout(p, msg->dispersion.fractions);
	copyout(p, msg->refid);
	copyout(p, msg->reftime.int_partl);
	copyout(p, msg->reftime.fractionl);
	copyout(p, msg->orgtime.int_partl);
	copyout(p, msg->orgtime.fractionl);
	copyout(p, msg->rectime.int_partl);
	copyout(p, msg->rectime.fractionl);
	copyout(p, msg->xmttime.int_partl);
	copyout(p, msg->xmttime.fractionl);

	if (sa != NULL)
		sa_len = SA_LEN(sa);
	else
		sa_len = 0;

	if (sendto(fd, &buf, len, 0, sa, sa_len) != len) {
		if (errno == ENOBUFS || errno == EHOSTUNREACH ||
		    errno == ENETDOWN || errno == EHOSTDOWN) {
			/* logging is futile */
			return (-1);
		}
		log_warn("sendto");
		return (-1);
	}

	return (0);
}
@


1.3
log
@merge
[x] tested
@
text
@d1 2
a2 2
/**	$MirBSD: src/usr.sbin/ntpd/ntp_msg.c,v 1.2 2004/10/14 19:54:40 tg Exp $ */
/*	$OpenBSD: ntp_msg.c,v 1.11 2004/10/22 21:24:20 henning Exp $ */
d30 1
a30 1
__RCSID("$MirBSD: src/usr.sbin/ntpd/ntp_msg.c,v 1.2 2004/10/14 19:54:40 tg Exp $");
d40 19
a58 34
	memcpy(&msg->status, p, sizeof(msg->status));
	p += sizeof(msg->status);
	memcpy(&msg->stratum, p, sizeof(msg->stratum));
	p += sizeof(msg->stratum);
	memcpy(&msg->ppoll, p, sizeof(msg->ppoll));
	p += sizeof(msg->ppoll);
	memcpy(&msg->precision, p, sizeof(msg->precision));
	p += sizeof(msg->precision);
	memcpy(&msg->rootdelay.int_part, p, sizeof(msg->rootdelay.int_part));
	p += sizeof(msg->rootdelay.int_part);
	memcpy(&msg->rootdelay.fraction, p, sizeof(msg->rootdelay.fraction));
	p += sizeof(msg->rootdelay.fraction);
	memcpy(&msg->dispersion.int_part, p, sizeof(msg->dispersion.int_part));
	p += sizeof(msg->dispersion.int_part);
	memcpy(&msg->dispersion.fraction, p, sizeof(msg->dispersion.fraction));
	p += sizeof(msg->dispersion.fraction);
	memcpy(&msg->refid, p, sizeof(msg->refid));
	p += sizeof(msg->refid);
	memcpy(&msg->reftime.int_part, p, sizeof(msg->reftime.int_part));
	p += sizeof(msg->reftime.int_part);
	memcpy(&msg->reftime.fraction, p, sizeof(msg->reftime.fraction));
	p += sizeof(msg->reftime.fraction);
	memcpy(&msg->orgtime.int_part, p, sizeof(msg->orgtime.int_part));
	p += sizeof(msg->orgtime.int_part);
	memcpy(&msg->orgtime.fraction, p, sizeof(msg->orgtime.fraction));
	p += sizeof(msg->orgtime.fraction);
	memcpy(&msg->rectime.int_part, p, sizeof(msg->rectime.int_part));
	p += sizeof(msg->rectime.int_part);
	memcpy(&msg->rectime.fraction, p, sizeof(msg->rectime.fraction));
	p += sizeof(msg->rectime.fraction);
	memcpy(&msg->xmttime.int_part, p, sizeof(msg->xmttime.int_part));
	p += sizeof(msg->xmttime.int_part);
	memcpy(&msg->xmttime.fraction, p, sizeof(msg->xmttime.fraction));
	p += sizeof(msg->xmttime.fraction);
d68 1
a68 1
	char		*p;
d71 19
a89 35
	p = buf;
	memcpy(p, &msg->status, sizeof(msg->status));
	p += sizeof(msg->status);
	memcpy(p, &msg->stratum, sizeof(msg->stratum));
	p += sizeof(msg->stratum);
	memcpy(p, &msg->ppoll, sizeof(msg->ppoll));
	p += sizeof(msg->ppoll);
	memcpy(p, &msg->precision, sizeof(msg->precision));
	p += sizeof(msg->precision);
	memcpy(p, &msg->rootdelay.int_part, sizeof(msg->rootdelay.int_part));
	p += sizeof(msg->rootdelay.int_part);
	memcpy(p, &msg->rootdelay.fraction, sizeof(msg->rootdelay.fraction));
	p += sizeof(msg->rootdelay.fraction);
	memcpy(p, &msg->dispersion.int_part, sizeof(msg->dispersion.int_part));
	p += sizeof(msg->dispersion.int_part);
	memcpy(p, &msg->dispersion.fraction, sizeof(msg->dispersion.fraction));
	p += sizeof(msg->dispersion.fraction);
	memcpy(p, &msg->refid, sizeof(msg->refid));
	p += sizeof(msg->refid);
	memcpy(p, &msg->reftime.int_part, sizeof(msg->reftime.int_part));
	p += sizeof(msg->reftime.int_part);
	memcpy(p, &msg->reftime.fraction, sizeof(msg->reftime.fraction));
	p += sizeof(msg->reftime.fraction);
	memcpy(p, &msg->orgtime.int_part, sizeof(msg->orgtime.int_part));
	p += sizeof(msg->orgtime.int_part);
	memcpy(p, &msg->orgtime.fraction, sizeof(msg->orgtime.fraction));
	p += sizeof(msg->orgtime.fraction);
	memcpy(p, &msg->rectime.int_part, sizeof(msg->rectime.int_part));
	p += sizeof(msg->rectime.int_part);
	memcpy(p, &msg->rectime.fraction, sizeof(msg->rectime.fraction));
	p += sizeof(msg->rectime.fraction);
	memcpy(p, &msg->xmttime.int_part, sizeof(msg->xmttime.int_part));
	p += sizeof(msg->xmttime.int_part);
	memcpy(p, &msg->xmttime.fraction, sizeof(msg->xmttime.fraction));
	p += sizeof(msg->xmttime.fraction);
@


1.2
log
@merge, -Wall
@
text
@d1 2
a2 2
/**	$MirBSD$ */
/*	$OpenBSD: ntp_msg.c,v 1.9 2004/10/13 13:35:19 henning Exp $ */
d30 1
a30 1
__RCSID("$MirBSD$");
@


1.1
log
@Initial revision
@
text
@d1 2
a2 1
/*	$OpenBSD: ntp_msg.c,v 1.7 2004/09/24 14:51:16 henning Exp $ */
d30 2
d35 1
a35 7
	int		 auth, i;

	if (len == NTP_MSGSIZE)
		auth = 1;
	else if (len == NTP_MSGSIZE_NOAUTH)
		auth = 0;
	else {
d48 4
a51 4
	memcpy(&msg->distance.int_part, p, sizeof(msg->distance.int_part));
	p += sizeof(msg->distance.int_part);
	memcpy(&msg->distance.fraction, p, sizeof(msg->distance.fraction));
	p += sizeof(msg->distance.fraction);
a74 11
	if (auth) {
		memcpy(&msg->keyid, p, sizeof(msg->keyid));
		p += sizeof(msg->keyid);
		for (i = 0; i < NTP_DIGESTSIZE; i++) {
			memcpy(&msg->digest[i], p, sizeof(msg->digest[i]));
			p += sizeof(msg->digest[i]);
		}

		/* XXX check auth */
	}

d80 1
a80 1
    int auth)
d95 4
a98 4
	memcpy(p, &msg->distance.int_part, sizeof(msg->distance.int_part));
	p += sizeof(msg->distance.int_part);
	memcpy(p, &msg->distance.fraction, sizeof(msg->distance.fraction));
	p += sizeof(msg->distance.fraction);
a120 4

	if (auth) {
		/* XXX */
	}
@


1.1.1.1
log
@current ntpd from OpenBSD, for a bit of fun before starting the hard work
@
text
@@


1.1.1.2
log
@updates to OpenNTPD
@
text
@d1 1
a1 1
/*	$OpenBSD: ntp_msg.c,v 1.9 2004/10/13 13:35:19 henning Exp $ */
d32 7
a38 1
	if (len != NTP_MSGSIZE_NOAUTH && len != NTP_MSGSIZE) {
d51 4
a54 4
	memcpy(&msg->rootdelay.int_part, p, sizeof(msg->rootdelay.int_part));
	p += sizeof(msg->rootdelay.int_part);
	memcpy(&msg->rootdelay.fraction, p, sizeof(msg->rootdelay.fraction));
	p += sizeof(msg->rootdelay.fraction);
d78 11
d109 4
a112 4
	memcpy(p, &msg->rootdelay.int_part, sizeof(msg->rootdelay.int_part));
	p += sizeof(msg->rootdelay.int_part);
	memcpy(p, &msg->rootdelay.fraction, sizeof(msg->rootdelay.fraction));
	p += sizeof(msg->rootdelay.fraction);
d135 4
@


1.1.1.3
log
@gah, another update
this time: stratum correctness
@
text
@d1 1
a1 1
/*	$OpenBSD: ntp_msg.c,v 1.11 2004/10/22 21:24:20 henning Exp $ */
@


1.1.1.4
log
@another ntpd update from obsd
@
text
@d1 1
a1 1
/*	$OpenBSD: ntp_msg.c,v 1.13 2004/12/08 17:35:16 mickey Exp $ */
d37 34
a70 19
#define	copyin(f,p)	memcpy(&(f), (p), sizeof(f)); (p) += sizeof(f)

	copyin(msg->status, p);
	copyin(msg->stratum, p);
	copyin(msg->ppoll, p);
	copyin(msg->precision, p);
	copyin(msg->rootdelay.int_parts, p);
	copyin(msg->rootdelay.fractions, p);
	copyin(msg->dispersion.int_parts, p);
	copyin(msg->dispersion.fractions, p);
	copyin(msg->refid, p);
	copyin(msg->reftime.int_partl, p);
	copyin(msg->reftime.fractionl, p);
	copyin(msg->orgtime.int_partl, p);
	copyin(msg->orgtime.fractionl, p);
	copyin(msg->rectime.int_partl, p);
	copyin(msg->rectime.fractionl, p);
	copyin(msg->xmttime.int_partl, p);
	copyin(msg->xmttime.fractionl, p);
d80 1
a80 1
	char		*p = buf;
d83 35
a117 19
#define	copyout(p,f)	memcpy((p), &(f), sizeof(f)); p += sizeof(f)

	copyout(p, msg->status);
	copyout(p, msg->stratum);
	copyout(p, msg->ppoll);
	copyout(p, msg->precision);
	copyout(p, msg->rootdelay.int_parts);
	copyout(p, msg->rootdelay.fractions);
	copyout(p, msg->dispersion.int_parts);
	copyout(p, msg->dispersion.fractions);
	copyout(p, msg->refid);
	copyout(p, msg->reftime.int_partl);
	copyout(p, msg->reftime.fractionl);
	copyout(p, msg->orgtime.int_partl);
	copyout(p, msg->orgtime.fractionl);
	copyout(p, msg->rectime.int_partl);
	copyout(p, msg->rectime.fractionl);
	copyout(p, msg->xmttime.int_partl);
	copyout(p, msg->xmttime.fractionl);
@


