head	1.1;
branch	1.1.1;
access;
symbols
	tg-mergetmp-mirosx-1:1.1.1.5
	tg-mergefixes-1-branch:1.1.1.5.0.4
	tg-mergefixes-1-base:1.1.1.5
	MIROS_X:1.1.1.5.0.2
	MIROS_X_BASE:1.1.1.5
	tg-mergetmp-3:1.1.1.5
	cvs-200412082250:1.1.1.5
	cvs-200411261545:1.1.1.4
	MIRBSD_XP_MIRPPC:1.1.1.1.0.4
	cvs-200410281445:1.1.1.4
	cvs-200410222245:1.1.1.4
	cvs-200410151735:1.1.1.3
	cvs-200410141645:1.1.1.2
	MIRBSD_XP_SPARC_BASE:1.1.1.1
	MIRBSD_XP_SPARC:1.1.1.1.0.2
	cvs-200409261605:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.1
date	2004.09.26.16.09.59;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2004.09.26.16.09.59;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2004.10.14.17.16.35;	author tg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2004.10.15.17.36.25;	author tg;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2004.10.22.22.46.19;	author tg;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2004.12.08.22.51.46;	author tg;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@/*	$OpenBSD: server.c,v 1.13 2004/09/07 22:43:07 henning Exp $ */

/*
 * Copyright (c) 2003, 2004 Henning Brauer <henning@@openbsd.org>
 * Copyright (c) 2004 Alexander Guy <alexander@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF MIND, USE, DATA OR PROFITS, WHETHER
 * IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING
 * OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/types.h>
#include <sys/socket.h>
#include <errno.h>
#include <ifaddrs.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>

#include "ntpd.h"
#include "ntp.h"

int
setup_listeners(struct servent *se, struct ntpd_conf *conf, u_int *cnt)
{
	struct listen_addr	*la;
	struct ifaddrs		*ifap;
	struct sockaddr		*sa;
	u_int			 new_cnt = 0;

	if (conf->listen_all) {
		if (getifaddrs(&ifap) == -1)
			fatal("getifaddrs");

		for (; ifap != NULL; ifap = ifap->ifa_next) {
			sa = ifap->ifa_addr;

			if (sa->sa_family != AF_INET &&
			    sa->sa_family != AF_INET6)
				continue;

			if ((la = calloc(1, sizeof(struct listen_addr))) ==
			    NULL)
				fatal("setup_listeners calloc");

			memcpy(&la->sa, sa, SA_LEN(sa));
			TAILQ_INSERT_TAIL(&conf->listen_addrs, la, entry);
		}

		freeifaddrs(ifap);
	}

	TAILQ_FOREACH(la, &conf->listen_addrs, entry) {
		new_cnt++;

		switch (la->sa.ss_family) {
		case AF_INET:
			if (((struct sockaddr_in *)&la->sa)->sin_port == 0)
				((struct sockaddr_in *)&la->sa)->sin_port =
				    se->s_port;
			break;
		case AF_INET6:
			if (((struct sockaddr_in6 *)&la->sa)->sin6_port == 0)
				((struct sockaddr_in6 *)&la->sa)->sin6_port =
				    se->s_port;
			break;
		default:
			fatalx("king bula sez: af borked");
		}

		log_info("listening on %s",
		    log_sockaddr((struct sockaddr *)&la->sa));

		if ((la->fd = socket(la->sa.ss_family, SOCK_DGRAM, 0)) == -1)
			fatal("socket");

		if (bind(la->fd, (struct sockaddr *)&la->sa,
		    SA_LEN((struct sockaddr *)&la->sa)) == -1)
			fatal("bind");
	}

	*cnt = new_cnt;

	return (0);
}

int
server_dispatch(int fd, struct ntpd_conf *conf)
{
	ssize_t			 size;
	u_int8_t		 version;
	double			 rectime;
	struct sockaddr_storage	 fsa;
	socklen_t		 fsa_len;
	struct ntp_msg		 query, reply;
	char			 buf[NTP_MSGSIZE];

	fsa_len = sizeof(fsa);
	if ((size = recvfrom(fd, &buf, sizeof(buf), 0,
	    (struct sockaddr *)&fsa, &fsa_len)) == -1) {
		if (errno == EHOSTUNREACH || errno == EHOSTDOWN ||
		    errno == ENETDOWN) {
			log_warn("recvfrom %s",
			    log_sockaddr((struct sockaddr *)&fsa));
			return (0);
		} else
			fatal("recvfrom");
	}

	rectime = gettime();

	if (ntp_getmsg(buf, size, &query) == -1)
		return (0);

	version = (query.status & VERSIONMASK) >> 3;

	bzero(&reply, sizeof(reply));
	reply.status = conf->status.leap | (query.status & VERSIONMASK);
	if ((query.status & MODEMASK) == MODE_CLIENT)
		reply.status |= MODE_SERVER;
	else
		reply.status |= MODE_SYM_PAS;

	reply.stratum =	2;
	reply.ppoll = query.ppoll;
	reply.precision = conf->status.precision;
	reply.rectime = d_to_lfp(rectime);
	reply.reftime = d_to_lfp(conf->status.reftime);
	reply.xmttime = d_to_lfp(gettime());
	reply.orgtime = query.xmttime;

	if (version > 3)
		reply.refid = reply.xmttime.fraction;
	else
		reply.refid = 0;	/* XXX */

	ntp_sendmsg(fd, (struct sockaddr *)&fsa, &reply, size, 0);
	return (0);
}
@


1.1.1.1
log
@current ntpd from OpenBSD, for a bit of fun before starting the hard work
@
text
@@


1.1.1.2
log
@updates to OpenNTPD
@
text
@d1 1
a1 1
/*	$OpenBSD: server.c,v 1.16 2004/10/14 09:35:48 dtucker Exp $ */
a37 1
	int			 tos = IPTOS_LOWDELAY;
a84 4
		if (setsockopt(la->fd, IPPROTO_IP, IP_TOS, &tos, sizeof(tos))
		    == -1)
			log_warn("setsockopt IPTOS_LOWDELAY");

a138 1
	reply.rootdelay = d_to_sfp(conf->status.rootdelay);
d143 1
a143 1
		reply.refid = conf->status.refid;
@


1.1.1.3
log
@iptos_lowdelay fix
@
text
@d1 1
a1 1
/*	$OpenBSD: server.c,v 1.17 2004/10/15 01:58:04 dtucker Exp $ */
d86 2
a87 2
		if (la->sa.ss_family == AF_INET && setsockopt(la->fd,
		    IPPROTO_IP, IP_TOS, &tos, sizeof(tos)) == -1)
@


1.1.1.4
log
@gah, another update
this time: stratum correctness
@
text
@d1 1
a1 1
/*	$OpenBSD: server.c,v 1.18 2004/10/22 21:17:37 henning Exp $ */
d137 1
a137 1
	reply.stratum =	conf->status.stratum;
@


1.1.1.5
log
@another ntpd update from obsd
@
text
@d1 1
a1 1
/*	$OpenBSD: server.c,v 1.19 2004/12/08 15:47:38 mickey Exp $ */
d147 1
a147 1
		reply.refid = reply.xmttime.fractionl;
@


