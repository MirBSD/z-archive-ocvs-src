head	1.2;
access;
symbols
	MIRBSD_7quater:1.1.1.4
	cvs-200405160640:1.1.1.6
	cvs-200401271800:1.1.1.6
	cvs-200401261630:1.1.1.6
	cvs-200401021645:1.1.1.5
	MIRBSD_7_ALPHA:1.1.1.4.0.6
	MIRBSD_7:1.1.1.4.0.4
	cvs-200312222040:1.1.1.5
	MIRBSD_7ter:1.1.1.4
	MIRBSD_7_DEV:1.1.1.4.0.2
	cvs-200310020700:1.1.1.4
	cvs-200309271030:1.1.1.3
	cvs-200309261655:1.1.1.2
	cvs-200309251530:1.1.1.2
	cvs-200308302005:1.1.1.2
	cvs-200308171200:1.1.1.2
	ctm-3496:1.1.1.1
	ctm-3449:1.1.1.1
	ctm-3437:1.1.1.1
	cvs-200307191805:1.1.1.1
	ctm-3425:1.1.1.1
	cvs-200307091500:1.1.1.1
	cvs-200307072125:1.1.1.1
	ctm-3389:1.1.1.1
	cvs-200307021520:1.1.1.1
	cvs-200306291430:1.1.1.1
	ctm-3341:1.1.1.1
	MIRBSD_5:1.1.1.1
	cvs-200306082100:1.1.1.1
	ctm-3316:1.1.1.1
	ctm-3272:1.1.1.1
	ctm-3264:1.1.1.1
	cvs-200305071630:1.1.1.1
	ctm-3255:1.1.1.1
	ctm-3229:1.1.1.1
	MIRBSD_4:1.1.1.1
	ctm-3203:1.1.1.1
	cvs-20030410-1130:1.1.1.1
	ctm-3155:1.1.1.1
	ctm-3132:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.2
date	2004.03.14.18.23.29;	author tg;	state dead;
branches;
next	1.1;

1.1
date	2003.03.22.17.52.30;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.03.22.17.52.30;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2003.08.17.14.41.59;	author tg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2003.09.27.11.12.52;	author tg;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2003.10.02.07.43.26;	author tg;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2003.12.22.21.05.45;	author tg;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2004.01.26.18.56.27;	author tg;	state Exp;
branches;
next	;


desc
@@


1.2
log
@nuke xfs (not sgixfs!), the generic kernel-userland interface

does anyone use
 - netatalk
 - netccitt (I tried to build it; it's broken nearly beyond repair,
		and the NetBSD thing isn't better)
 - netiso
 - netns
or may someone nuke them sometime?
@
text
@/*
 * Copyright (c) 1995 - 2000 Kungliga Tekniska Högskolan
 * (Royal Institute of Technology, Stockholm, Sweden).
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * 3. Neither the name of the Institute nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE INSTITUTE AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE INSTITUTE OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include <xfs/xfs_locl.h>
#include <xfs/xfs_message.h>
#include <xfs/xfs_msg_locl.h>
#include <xfs/xfs_fs.h>
#include <xfs/xfs_dev.h>
#include <xfs/xfs_deb.h>

RCSID("$Id: xfs_dev-bsd.c,v 1.1 2003/03/22 17:52:30 tg Exp $");

int
xfs_devopen(dev_t dev, int flag, int devtype, struct proc *proc)
{
    XFSDEB(XDEBDEV, ("xfsopen dev = %d.%d, flag = %d, devtype = %d\n", 
		     major(dev), minor(dev), flag, devtype));
    return xfs_devopen_common(dev, proc);
}

int
xfs_devclose(dev_t dev, int flag, int devtype, struct proc *p)
{
#ifdef XFS_DEBUG
    char devname[64];
#endif

    XFSDEB(XDEBDEV, ("xfs_devclose dev = %s, flag = 0x%x\n",
		     xfs_devtoname_r(dev, devname, sizeof(devname)),
		     flag));
    return xfs_devclose_common(dev, p);
}

/*
 * Not used.
 */

int
xfs_devioctl(dev_t dev, 
	     u_long cmd,
	     caddr_t data,
	     int flags,
	     struct proc *p)
{
    XFSDEB(XDEBDEV, ("xfs_devioctl dev = %d.%d, cmd = %lu, "
		     "data = %lx, flags = %x\n", 
		     major(dev), minor(dev), (unsigned long)cmd,
		     (unsigned long)data, flags));
    return ENOTTY;
}

static int
xfs_realselect(dev_t dev, struct proc *p, void *wql)
{
    struct xfs_channel *chan = &xfs_channel[minor(dev)];

    if (!xfs_emptyq(&chan->messageq))
	return 1;		       /* Something to read */

#ifdef HAVE_THREE_ARGUMENT_SELRECORD
    selrecord (p, &chan->selinfo, wql);
#else
    selrecord (p, &chan->selinfo);
#endif
    return 0;
}


#ifdef HAVE_VOP_POLL
static int
xfs_devpoll(dev_t dev, int events, struct proc * p)
{
    char devname[64];

    XFSDEB(XDEBDEV, ("xfs_devpoll dev = %s, events = 0x%x\n",
		     xfs_devtoname_r (dev, devname, sizeof(devname)),
		     events));

    if (!(events & POLLRDNORM))
	return 0;

    return xfs_realselect(dev, p, NULL);
}

#endif

#ifdef HAVE_VOP_SELECT
#ifdef HAVE_THREE_ARGUMENT_SELRECORD
int
xfs_devselect(dev_t dev, int which, void *wql, struct proc * p)
{
    XFSDEB(XDEBDEV, ("xfs_devselect dev = %d, which = %d\n", dev, which));

    if (which != FREAD)
	return 0;

    return xfs_realselect(dev, p, wql);
}
#else
int
xfs_devselect(dev_t dev, int which, struct proc * p)
{
    XFSDEB(XDEBDEV, ("xfs_devselect dev = %d, which = %d\n", dev, which));

    if (which != FREAD)
	return 0;

    return xfs_realselect(dev, p, NULL);
}
#endif
#endif

void
xfs_select_wakeup(struct xfs_channel *chan)
{
    selwakeup (&chan->selinfo);
}

/*
 * Install and uninstall device.
 */

#if defined(__NetBSD__)
struct cdevsw xfs_dev = {
    xfs_devopen,
    xfs_devclose,
    xfs_devread,
    xfs_devwrite,
    xfs_devioctl,
    (dev_type_stop((*))) enodev,
    0,
    xfs_devpoll,
    (dev_type_mmap((*))) enodev,
    0
};

#elif defined(__OpenBSD__)
struct cdevsw xfs_dev = {
    xfs_devopen,
    xfs_devclose,
    xfs_devread,
    xfs_devwrite,
    xfs_devioctl,
    (dev_type_stop((*))) enodev,
    0,
    xfs_devselect,
    (dev_type_mmap((*))) enodev,
    0
};

#elif defined(__FreeBSD__)
struct cdevsw xfs_dev = {
    xfs_devopen,
    xfs_devclose,
    xfs_devread,
    xfs_devwrite,
    xfs_devioctl,
#ifdef HAVE_STRUCT_CDEVSW_D_STOP
    nostop,
#endif
#if defined(HAVE_STRUCT_CDEVSW_D_BOGORESET) \
 || defined(HAVE_STRUCT_CDEVSW_D_RESET)
    noreset,
#endif
#ifdef HAVE_STRUCT_CDEVSW_D_DEVTOTTY
    nodevtotty,
#endif
#if defined(HAVE_VOP_SELECT)
    xfs_devselect,
#elif defined(HAVE_VOP_POLL)
    xfs_devpoll,
#else
#error select or poll: that is the question
#endif
    nommap,
    nostrategy,
    "xfs",
#ifdef HAVE_STRUCT_CDEVSW_D_BOGOPARMS
    noparms,			/* d_bogoparms */
#endif
#ifdef HAVE_STRUCT_CDEVSW_D_SPARE
    NULL,			/* d_spare */
#endif
    128,			/* XXX */
    nodump,
    nopsize,
    0,				/* flags */
#ifdef HAVE_STRUCT_CDEVSW_D_MAXIO
    0,				/* maxio */
#endif
#ifdef HAVE_STRUCT_CDEVSW_D_BMAJ
#ifdef NOUDEV
    NOUDEV			/* bmaj */
#else
    NODEV			/* bmaj */
#endif
#endif /* HAVE_STRUCT_CDEVSW_D_BMAJ */
};

#elif defined(__APPLE__)
static struct cdevsw xfs_dev = {
      xfs_devopen,
          xfs_devclose,
          xfs_devread,
          xfs_devwrite,
          xfs_devioctl,
          eno_stop,
          eno_reset,
          0,
          xfs_devselect,
          eno_mmap,
          eno_strat,
          eno_getc,
          eno_putc,
          0
};
#endif /* __APPLE__ */

#if defined(__APPLE__)
extern int xfs_dev_major;
#include <miscfs/devfs/devfs.h>

static void *devfs_handles[NXFS];

#endif

int
xfs_install_device(void)
{
    int i;

#if defined(__APPLE__)
    xfs_dev_major = cdevsw_add(-1, &xfs_dev);
    if (xfs_dev_major == -1) {
	XFSDEB(XDEBDEV, ("failed installing cdev\n"));
	return ENFILE;
    }

    for (i = 0; i < NXFS; ++i)
	devfs_handles[i] = devfs_make_node(makedev(xfs_dev_major, i),
					   DEVFS_CHAR,
					   UID_ROOT, GID_WHEEL, 0600,
					   "xfs%d", i);

    XFSDEB(XDEBDEV, ("done installing cdev !\n"));
    XFSDEB(XDEBDEV, ("Char device number %d\n", xfs_dev_major));
#endif

    for (i = 0; i < NXFS; i++) {
	XFSDEB(XDEBDEV, ("before initq(messageq and sleepq)\n"));
	xfs_initq(&xfs_channel[i].messageq);
	xfs_initq(&xfs_channel[i].sleepq);
	xfs_channel[i].status = 0;
    }
    return 0;
}

int
xfs_uninstall_device(void)
{
    int i;
    struct xfs_channel *chan;
    int ret = 0;

    for (i = 0; i < NXFS; i++) {
	chan = &xfs_channel[i];
	if (chan->status & CHANNEL_OPENED)
	    xfs_devclose(makedev(0, i), 0, 0, NULL);
    }

#if defined(__APPLE__)
    for (i = 0; i < NXFS; ++i)
	devfs_remove (devfs_handles[i]);

    ret = cdevsw_remove(xfs_dev_major, &xfs_dev);
    if (ret == -1) {
	XFSDEB(XDEBLKM, ("xfs_uninstall_device error %d\n", ret));
    } else if (ret == xfs_dev_major) {
	ret = 0;
    } else {
	XFSDEB(XDEBLKM, ("xfs_uninstall_device unexpected error error %d\n",
			 ret));
    }
#endif
    XFSDEB(XDEBLKM, ("xfs_uninstall_device error %d\n", ret));
    return ret;
}

int
xfs_stat_device(void)
{
    return xfs_uprintf_device();
}

#if !defined(_LKM) && !defined(KLD_MODULE) && !defined(__APPLE__)
int
xfs_is_xfs_dev(dev_t dev)
{
    return major(dev) <= nchrdev &&
	cdevsw[major(dev)].d_open == xfs_devopen &&
	minor(dev) >= 0 && minor(dev) < NXFS;
}
#endif
@


1.1
log
@Initial revision
@
text
@d41 1
a41 1
RCSID("$Id: xfs_dev-bsd.c,v 1.4 2002/06/07 04:10:32 hin Exp $");
@


1.1.1.1
log
@Import OpenBSD 3.3 source repository from CTM 3132 the first time
This opens an OpenBSD-mirabile (aka MirBSD) repository.

### MirBSD is:
# Copyright (c) 1982-2003 by Thorsten "mirabile" Glaser <x86@@ePost.de>
# Copyright © 1968-2003  The authors of And contributors to UNIX®, the
#       C Language, BSD/Berkeley Unix; 386BSD, NetBSD 1.1 and OpenBSD.
#
# Anyone who obtained a copy of this work is hereby permitted to freely use,
# distribute, modify, merge, sublicence, give away or sell it as long as the
# authors are given due credit and the following notice is retained:
#
# This work is provided "as is", with no explicit or implicit warranty what-
# soever. Use it only at your own risk. In no event may an author or contri-
# butor be held liable for any damage, directly or indirectly, that origina-
# ted through or is caused by creation or modification of this work.

MirBSD is my private tree. MirBSD does not differ very much from OpenBSD
and intentionally tracks OpenBSD. That's why it _is_ OpenBSD, just not the
official one. It's like with DarrenBSD.

At time of this writing, no advertising for MirBSD must be done,
because the advertising clause has not yet been sorted out.

http://templeofhate.com/tglaser/MirBSD/index.php
@
text
@@


1.1.1.2
log
@Import OpenBSD source tree from CVS (anoncvs canada)
of roughly 12:00 UTC today. Bumps us to OpenBSD 3.4
and makes source/ports in sync. Hopefully.
@
text
@d2 1
a2 1
 * Copyright (c) 1995 - 2003 Kungliga Tekniska Högskolan
d41 1
a41 1
RCSID("$arla: xfs_dev-bsd.c,v 1.35 2003/04/01 14:04:11 lha Exp $");
d44 1
a44 1
xfs_devopen(dev_t dev, int flag, int devtype, d_thread_t *proc)
d46 1
a46 1
    NNPFSDEB(XDEBDEV, ("xfsopen dev = %d.%d, flag = %d, devtype = %d\n", 
d48 1
a48 1
    return xfs_devopen_common(dev);
d52 1
a52 1
xfs_devclose(dev_t dev, int flag, int devtype, d_thread_t *p)
d54 1
a54 1
#ifdef NNPFS_DEBUG
d58 1
a58 1
    NNPFSDEB(XDEBDEV, ("xfs_devclose dev = %s, flag = 0x%x\n",
d73 1
a73 1
	     d_thread_t *p)
d75 1
a75 1
    NNPFSDEB(XDEBDEV, ("xfs_devioctl dev = %d.%d, cmd = %lu, "
d83 1
a83 1
xfs_realselect(dev_t dev, d_thread_t *p, void *wql)
d101 1
a101 1
xfs_devpoll(dev_t dev, int events, d_thread_t * p)
a102 1
#ifdef NNPFS_DEBUG
a103 1
#endif
d105 1
a105 1
    NNPFSDEB(XDEBDEV, ("xfs_devpoll dev = %s, events = 0x%x\n",
d122 1
a122 1
    NNPFSDEB(XDEBDEV, ("xfs_devselect dev = %d, which = %d\n", dev, which));
d131 1
a131 1
xfs_devselect(dev_t dev, int which, d_thread_t * p)
d133 1
a133 1
    NNPFSDEB(XDEBDEV, ("xfs_devselect dev = %d, which = %d\n", dev, which));
d183 5
a187 9
    d_name: "xfs",
    d_open: xfs_devopen,
    d_close: xfs_devclose,
    d_read: xfs_devread,
    d_write: xfs_devwrite,
    d_ioctl: xfs_devioctl,
    d_mmap: nommap,
    d_strategy: nostrategy,
    d_flags: 0,
d189 1
a189 4
    d_stop: nostop,
#endif
#ifdef HAVE_STRUCT_CDEVSW_D_RESET
    d_reset: noreset,
d191 3
a193 2
#ifdef HAVE_STRUCT_CDEVSW_D_BOGORESET
    d_bogoreset: noreset,
d196 1
a196 1
    d_devtotty: nodevtotty,
d199 1
a199 1
    d_select: xfs_devselect,
d201 1
a201 1
    d_poll: xfs_devpoll,
d205 3
d209 1
a209 1
    d_bogoparms: noparms,
d212 1
a212 6
    d_spare: NULL,
#endif
    d_maj: 128,			/* XXX */
    d_dump: nodump,
#ifdef HAVE_STRUCT_CDEVSW_D_PSIZE
    d_psize: nopsize,
d214 4
d219 1
a219 1
    d_maxio: 0,
d223 1
a223 1
    d_bmaj: NOUDEV
d225 1
a225 1
    d_bmaj: NODEV
d253 1
a253 1
static void *devfs_handles[NNNPFS];
d265 1
a265 1
	NNPFSDEB(XDEBDEV, ("failed installing cdev\n"));
d269 1
a269 1
    for (i = 0; i < NNNPFS; ++i)
d275 2
a276 2
    NNPFSDEB(XDEBDEV, ("done installing cdev !\n"));
    NNPFSDEB(XDEBDEV, ("Char device number %d\n", xfs_dev_major));
d279 2
a280 2
    for (i = 0; i < NNNPFS; i++) {
	NNPFSDEB(XDEBDEV, ("before initq(messageq and sleepq)\n"));
d295 1
a295 1
    for (i = 0; i < NNNPFS; i++) {
d302 1
a302 1
    for (i = 0; i < NNNPFS; ++i)
d307 1
a307 1
	NNPFSDEB(XDEBLKM, ("xfs_uninstall_device error %d\n", ret));
d311 1
a311 1
	NNPFSDEB(XDEBLKM, ("xfs_uninstall_device unexpected error error %d\n",
d315 1
a315 1
    NNPFSDEB(XDEBLKM, ("xfs_uninstall_device error %d\n", ret));
d331 1
a331 1
	minor(dev) >= 0 && minor(dev) < NNNPFS;
@


1.1.1.3
log
@cvs is playing games with me.

@@@@@@ CONSIDER THE TREE LOCKED NOW @@@@@@
@
text
@d178 1
a178 1
    xfs_devpoll,
@


1.1.1.4
log
@Import OpenBSD source tree again, with critical bug fixes
(OpenSSL, bc, dc, sensorsd, pf, ...)
@
text
@d100 1
a100 1
int
@


1.1.1.5
log
@Time to import OpenBSD once again. Expect breakage.
@
text
@a81 1
#ifdef HAVE_VOP_SELECT
d97 1
a97 1
#endif
a102 1
    struct xfs_channel *chan = &xfs_channel[minor(dev)];
d111 2
a112 2
    if ((events & (POLLIN | POLLRDNORM)) == 0)
	return 0;			/* only supports read */
d114 2
a115 2
    if (!xfs_emptyq(&chan->messageq))
	return (events & (POLLIN | POLLRDNORM));
a116 7
#ifdef HAVE_THREE_ARGUMENT_SELRECORD
    selrecord (p, &chan->selinfo, wql);
#else
    selrecord (p, &chan->selinfo);
#endif
    return 0;
}
@


1.1.1.6
log
@Import OpenBSD as of today again (seems pretty stable, I hope)

Prominent changes: more bgpd, tcpmd5; tcpdump/isakmpd fixes
@
text
@d1 1
a1 3
/* $OpenBSD: xfs_dev-bsd.c,v 1.10 2004/01/18 21:46:54 beck Exp $

 * Copyright (c) 2004 Bob Beck
d41 2
d46 3
a48 3
	NNPFSDEB(XDEBDEV, ("xfsopen dev = %d.%d, flag = %d, devtype = %d\n", 
	    major(dev), minor(dev), flag, devtype));
	return xfs_devopen_common(dev);
d54 36
a89 2
	NNPFSDEB(XDEBDEV, ("xfs_devclose dev = %d(%d), flag = 0x%x\n",
	   major(dev), minor(dev), flag));
d91 6
a96 1
	return xfs_devclose_common(dev, p);
d98 1
d100 1
d102 1
a102 1
xfs_devioctl(dev_t dev,  u_long cmd,  caddr_t data, int flags,  d_thread_t *p)
d104 21
a124 4
	NNPFSDEB(XDEBDEV, ("xfs_devioctl dev = %d.%d, cmd = %lu, "
	    "data = %lx, flags = %x\n", major(dev), minor(dev), 
	    (unsigned long)cmd, (unsigned long)data, flags));
	return ENOTTY;
d126 8
d135 6
d142 1
a142 1
xfs_devpoll(dev_t dev, int events, d_thread_t * p)
d144 1
a144 12
	struct xfs_channel *chan = &xfs_channel[minor(dev)];
	
	NNPFSDEB(XDEBDEV, ("xfs_devpoll dev = %d(%d), events = 0x%x\n",
	    major(dev), minor(dev), events));

	if ((events & (POLLIN | POLLRDNORM)) == 0)
		return 0;			/* only supports read */
	
	if (!xfs_emptyq(&chan->messageq))
		return (events & (POLLIN | POLLRDNORM));
	
	selrecord (p, &chan->selinfo);
d146 1
d148 2
d151 2
d157 1
a157 1
	selwakeup (&chan->selinfo);
d164 29
d194 49
a242 10
	xfs_devopen,
	xfs_devclose,
	xfs_devread,
	xfs_devwrite,
	xfs_devioctl,
	(dev_type_stop((*))) enodev,
	0,
	xfs_devpoll,
	(dev_type_mmap((*))) enodev,
	0
d245 27
d275 1
a275 1
	int i;
d277 24
a300 7
	for (i = 0; i < NNNPFS; i++) {
		NNPFSDEB(XDEBDEV, ("before initq(messageq and sleepq)\n"));
		xfs_initq(&xfs_channel[i].messageq);
		xfs_initq(&xfs_channel[i].sleepq);
		xfs_channel[i].status = 0;
	}
	return 0;
d306 16
a321 10
	int i;
	struct xfs_channel *chan;
	int ret = 0;
	
	for (i = 0; i < NNNPFS; i++) {
		chan = &xfs_channel[i];
		if (chan->status & CHANNEL_OPENED)
			xfs_devclose(makedev(0, i), 0, 0, NULL);
	}
	
d323 9
a331 1
	return ret;
d337 1
a337 1
	return xfs_uprintf_device();
d340 1
d348 1
@


