head	1.2;
access;
symbols
	MIRBSD_7quater:1.1.1.2
	cvs-200405160640:1.1.1.2
	cvs-200401271800:1.1.1.2
	cvs-200401261630:1.1.1.2
	cvs-200401021645:1.1.1.2
	MIRBSD_7_ALPHA:1.1.1.2.0.6
	MIRBSD_7:1.1.1.2.0.4
	cvs-200312222040:1.1.1.2
	MIRBSD_7ter:1.1.1.2
	MIRBSD_7_DEV:1.1.1.2.0.2
	cvs-200310020700:1.1.1.2
	cvs-200309271030:1.1.1.2
	cvs-200309261655:1.1.1.2
	cvs-200309251530:1.1.1.2
	cvs-200308302005:1.1.1.2
	cvs-200308171200:1.1.1.2
	ctm-3496:1.1.1.1
	ctm-3449:1.1.1.1
	ctm-3437:1.1.1.1
	cvs-200307191805:1.1.1.1
	ctm-3425:1.1.1.1
	cvs-200307091500:1.1.1.1
	cvs-200307072125:1.1.1.1
	ctm-3389:1.1.1.1
	cvs-200307021520:1.1.1.1
	cvs-200306291430:1.1.1.1
	ctm-3341:1.1.1.1
	MIRBSD_5:1.1.1.1
	cvs-200306082100:1.1.1.1
	ctm-3316:1.1.1.1
	ctm-3272:1.1.1.1
	ctm-3264:1.1.1.1
	cvs-200305071630:1.1.1.1
	ctm-3255:1.1.1.1
	ctm-3229:1.1.1.1
	MIRBSD_4:1.1.1.1
	ctm-3203:1.1.1.1
	cvs-20030410-1130:1.1.1.1
	ctm-3155:1.1.1.1
	ctm-3132:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.2
date	2004.03.14.18.23.30;	author tg;	state dead;
branches;
next	1.1;

1.1
date	2003.03.22.17.52.30;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.03.22.17.52.30;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2003.08.17.14.42.00;	author tg;	state Exp;
branches;
next	;


desc
@@


1.2
log
@nuke xfs (not sgixfs!), the generic kernel-userland interface

does anyone use
 - netatalk
 - netccitt (I tried to build it; it's broken nearly beyond repair,
		and the NetBSD thing isn't better)
 - netiso
 - netns
or may someone nuke them sometime?
@
text
@/*
 * Copyright (c) 1995 - 2002 Kungliga Tekniska Högskolan
 * (Royal Institute of Technology, Stockholm, Sweden).
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * 3. Neither the name of the Institute nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE INSTITUTE AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE INSTITUTE OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include <xfs/xfs_locl.h>
#include <xfs/xfs_deb.h>
#include <xfs/xfs_fs.h>
#include <xfs/xfs_message.h>
#include <xfs/xfs_msg_locl.h>
#include <xfs/xfs_syscalls.h>
#include <xfs/xfs_vfsops.h>
#include <xfs/xfs_vnodeops.h>
#include <xfs/xfs_dev.h>

RCSID("$Id: xfs_message.c,v 1.1 2003/03/22 17:52:30 tg Exp $");

int
xfs_message_installroot(int fd,
			struct xfs_message_installroot * message,
			u_int size,
			struct proc *p)
{
    int error = 0;

    XFSDEB(XDEBMSG, ("xfs_message_installroot (%d,%d,%d,%d)\n",
		     message->node.handle.a,
		     message->node.handle.b,
		     message->node.handle.c,
		     message->node.handle.d));

    if (xfs[fd].root != NULL) {
	printf("XFS PANIC WARNING! xfs_message_installroot: called again!\n");
	error = EBUSY;
    } else {
	error = new_xfs_node(&xfs[fd], &message->node, &xfs[fd].root, p);
	if (error)
	    return error;
	xfs[fd].root->vn->v_flag |= VROOT;
    }
    return error;
}

int
xfs_message_installnode(int fd,
			struct xfs_message_installnode * message,
			u_int size,
			struct proc *p)
{
    int error = 0;
    struct xfs_node *n, *dp;

    XFSDEB(XDEBMSG, ("xfs_message_installnode (%d,%d,%d,%d)\n",
		     message->node.handle.a,
		     message->node.handle.b,
		     message->node.handle.c,
		     message->node.handle.d));

retry:
    dp = xfs_node_find(&xfs[fd], &message->parent_handle);
    if (dp) {
	struct vnode *t_vnode = XNODE_TO_VNODE(dp);

	if (xfs_do_vget(t_vnode, 0 /* LK_SHARED */, p))
		goto retry;

	error = new_xfs_node(&xfs[fd], &message->node, &n, p);
	if (error) {
	    vrele (t_vnode);
	    return error;
	}

	xfs_dnlc_enter_name(t_vnode,
			    message->name,
			    XNODE_TO_VNODE(n));
	vrele (XNODE_TO_VNODE(n));
	vrele (t_vnode);
    } else {
	printf("XFS PANIC WARNING! xfs_message_installnode: no parent\n");
	error = ENOENT;
    }
    XFSDEB(XDEBMSG, ("return: xfs_message_installnode: %d\n", error));

    return error;
}

int
xfs_message_installattr(int fd,
			struct xfs_message_installattr * message,
			u_int size,
			struct proc *p)
{
    int error = 0;
    struct xfs_node *t;

    XFSDEB(XDEBMSG, ("xfs_message_installattr (%d,%d,%d,%d) \n",
		     message->node.handle.a,
		     message->node.handle.b,
		     message->node.handle.c,
		     message->node.handle.d));

    t = xfs_node_find(&xfs[fd], &message->node.handle);
    if (t != 0) {
	t->tokens = message->node.tokens;
	if ((t->tokens & XFS_DATA_MASK) && DATA_FROM_XNODE(t) == NULL) {
	    printf ("xfs_message_installattr: tokens and no data\n");
	    t->tokens &= ~XFS_DATA_MASK;
	}
	xfs_attr2vattr(&message->node.attr, &t->attr, 0);
	xfs_set_vp_size(XNODE_TO_VNODE(t), t->attr.va_size);
	bcopy(message->node.id, t->id, sizeof(t->id));
	bcopy(message->node.rights, t->rights, sizeof(t->rights));
	t->anonrights = message->node.anonrights;
    } else {
	XFSDEB(XDEBMSG, ("xfs_message_installattr: no such node\n"));
    }
    
    return error;
}

int
xfs_message_installdata(int fd,
			struct xfs_message_installdata * message,
			u_int size,
			struct proc *p)
{
    struct xfs_node *t;
    int error = 0;

    XFSDEB(XDEBMSG, ("xfs_message_installdata (%d,%d,%d,%d)\n",
		     message->node.handle.a,
		     message->node.handle.b,
		     message->node.handle.c,
		     message->node.handle.d));

retry:
    t = xfs_node_find(&xfs[fd], &message->node.handle);
    if (t != NULL) {
	struct xfs_fhandle_t *fh = (struct xfs_fhandle_t *)&message->cache_handle;
	struct vnode *vp;
	struct vnode *t_vnode = XNODE_TO_VNODE(t);

	message->cache_name[sizeof(message->cache_name)-1] = '\0';
	XFSDEB(XDEBMSG, ("cache_name = '%s'\n", message->cache_name));

	if (xfs_do_vget(t_vnode, 0 /* LK_SHARED */, p))
		goto retry;

	if (message->flag & XFS_ID_HANDLE_VALID) {
	    error = xfs_fhlookup (p, fh, &vp);
	} else {
	    error = EINVAL;
	}
	if (error != 0) {
#ifdef __osf__
	    struct nameidata *ndp = &u.u_nd;
#else
	    struct nameidata nd;
	    struct nameidata *ndp = &nd;
#endif

	    XFSDEB(XDEBMSG,
		   ("xfs_message_installdata: fhlookup failed: %d, "
		    "opening by name\n", error));

	    NDINIT(ndp, LOOKUP, FOLLOW, UIO_SYSSPACE,
		   message->cache_name, p);
	    error = namei(ndp);
	    vp = ndp->ni_vp;
	}

	if (error == 0) {
#ifndef __osf__
	    xfs_vfs_unlock(vp, p);
#endif
	    if (DATA_FROM_XNODE(t))
		vrele(DATA_FROM_XNODE(t));
	    DATA_FROM_XNODE(t) = vp;

	    XFSDEB(XDEBMSG, ("xfs_message_installdata: t = %lx;"
			     " tokens = %x\n",
			     (unsigned long)t, message->node.tokens));

	    t->tokens = message->node.tokens;
	    xfs_attr2vattr(&message->node.attr, &t->attr, 1);
	    xfs_set_vp_size(XNODE_TO_VNODE(t), t->attr.va_size);
	    if (XNODE_TO_VNODE(t)->v_type == VDIR
		&& (message->flag & XFS_ID_INVALID_DNLC))
		cache_purge (XNODE_TO_VNODE(t));
	    bcopy(message->node.id, t->id, sizeof(t->id));
	    bcopy(message->node.rights, t->rights, sizeof(t->rights));
	    t->anonrights = message->node.anonrights;
#if 0
	    if (message->flag & XFS_ID_AFSDIR)
		t->flags |= XFS_AFSDIR;
#endif
	} else {
	    printf("XFS PANIC WARNING! xfs_message_installdata failed!\n");
	    printf("Reason: lookup failed on cache file '%s', error = %d\n",
		   message->cache_name, error);
	}
	vrele (t_vnode);
    } else {
	printf("XFS PANIC WARNING! xfs_message_installdata failed\n");
	printf("Reason: No node to install the data into!\n");
	error = ENOENT;
    }

    return error;
}

#ifdef __osf__
#define xfs_writecount v_wrcnt
#else
#define xfs_writecount v_writecount
#endif

int
xfs_message_invalidnode(int fd,
			struct xfs_message_invalidnode * message,
			u_int size,
			struct proc *p)
{
    int error = 0;
    struct xfs_node *t;

    XFSDEB(XDEBMSG, ("xfs_message_invalidnode (%d,%d,%d,%d)\n",
		     message->handle.a,
		     message->handle.b,
		     message->handle.c,
		     message->handle.d));

    t = xfs_node_find(&xfs[fd], &message->handle);
    if (t != 0) {
	struct vnode *vp = XNODE_TO_VNODE(t);

        /* If open for writing, return immediately. Last close:er wins! */
	if (vp->v_usecount >= 0 && vp->xfs_writecount >= 1)
            return 0;

#ifdef __FreeBSD__
	{
	    vm_object_t obj = vp->v_object;

	    if (obj != NULL
		&& (obj->ref_count != 0
#ifdef OBJ_MIGHTBEDIRTY
		|| (obj->flags & OBJ_MIGHTBEDIRTY) != 0
#endif
		    ))
		return 0;

	}
#endif /* __FreeBSD__ */

	/* If node is in use, mark as stale */
	if (vp->v_usecount > 0 && vp->v_type != VDIR) {
#ifdef __APPLE__
	    if (UBCISVALID(vp) && !ubc_isinuse(vp, 0)) {
		ubc_setsize(vp, 0);
	    } else {
		t->flags |= XFS_STALE;
		return 0;
	    }
#else
	    t->flags |= XFS_STALE;
	    return 0;
#endif
	}

	if (DATA_FROM_XNODE(t)) {
	    vrele(DATA_FROM_XNODE(t));
	    DATA_FROM_XNODE(t) = (struct vnode *) 0;
	}
	XFS_TOKEN_CLEAR(t, ~0,
			XFS_OPEN_MASK | XFS_ATTR_MASK |
			XFS_DATA_MASK | XFS_LOCK_MASK);
	/* Dir changed, must invalidate DNLC. */
	if (vp->v_type == VDIR)
	    xfs_dnlc_purge(vp);
	if (vp->v_usecount == 0) {
	    XFSDEB(XDEBVNOPS, ("xfs_message_invalidnode: vrecycle\n"));
#ifndef __osf__
	    vrecycle(vp, 0, p);
#endif
	}
    } else {
	error = ENOENT;
    }

    return error;
}

int
xfs_message_updatefid(int fd,
		      struct xfs_message_updatefid * message,
		      u_int size,
		      struct proc *p)
{
    int error = 0;
    struct xfs_node *t;

    XFSDEB(XDEBMSG, ("xfs_message_updatefid (%d,%d,%d,%d)\n",
		     message->old_handle.a,
		     message->old_handle.b,
		     message->old_handle.c,
		     message->old_handle.d));

    t = xfs_node_find (&xfs[fd], &message->old_handle);
    if (t != NULL) {
	t->handle = message->new_handle;
    } else {
	printf ("XFS PANIC WARNING! xfs_message_updatefid: no node!\n");
	error = ENOENT;
    }
    return error;
}

#if __osf__

/*
 * Try to clean out nodes for the userland daemon
 */

static void
gc_vnode (struct vnode *vp,
	  struct proc *p)
{
    /* This node is on the freelist */
    if (vp->v_usecount <= 0) {
	
	/*  DIAGNOSTIC */
	if (vp->v_usecount < 0) {
		    vprint("vrele: bad ref count", vp);
		    panic("vrele: ref cnt");
	}
	
	XFSDEB(XDEBMSG, ("xfs_message_gc: success\n"));
	
	vgone(vp, VX_NOSLEEP, NULL);
    } else {
	XFSDEB(XDEBMSG, ("xfs_message_gc: used\n"));
    }

}

int
xfs_message_gc_nodes(int fd,
		     struct xfs_message_gc_nodes *message,
		     u_int size,
		     struct proc *p)
{
    XFSDEB(XDEBMSG, ("xfs_message_gc\n"));

    if (message->len == 0) {
	struct vnode *vp;

	/* XXX see comment in xfs_node_find */

	for(vp = XFS_TO_VFS(&xfs[fd])->m_mounth;
	    vp != NULL; 
	    vp = vp->v_mountf) {
	    gc_vnode (vp, p);
	}

    } else {
	struct xfs_node *t;
	int i;

	for (i = 0; i < message->len; i++) {
	    t = xfs_node_find (&xfs[fd], &message->handle[i]);
	    if (t == NULL)
		continue;

	    gc_vnode(XNODE_TO_VNODE(t), p);
	}
    }

    return 0;
}

#else /* !__osf__ */

/*
 * Try to clean out nodes for the userland daemon
 */

static void
gc_vnode (struct vnode *vp,
	  struct proc *p)
{
    simple_lock(&vp->v_interlock);
    
    /* This node is on the freelist */
    if (vp->v_usecount <= 0) {
#if __FreeBSD__
	vm_object_t obj;

	obj = vp->v_object;

	if (obj != NULL
	    && (obj->ref_count != 0
#ifdef OBJ_MIGHTBEDIRTY
		|| (obj->flags & OBJ_MIGHTBEDIRTY) != 0
#endif
		)) {
	    simple_unlock (&vp->v_interlock);
	    return;
	}
#endif /* __FreeBSD__ */
	
	/*  DIAGNOSTIC */
	if (vp->v_usecount < 0 || vp->v_writecount != 0) {
		    vprint("Pjäxomatic-4700: bad ref count", vp);
		    panic("Pjäxomatic-4650: ref cnt");
	}
	
	XFSDEB(XDEBMSG, ("xfs_message_gc: success\n"));
	
#ifdef HAVE_KERNEL_FUNC_VGONEL
	vgonel (vp, p);
#else
	simple_unlock(&vp->v_interlock); 
	vgone (vp);
#endif

    } else {
	simple_unlock(&vp->v_interlock);
	XFSDEB(XDEBMSG, ("xfs_message_gc: used\n"));
    }

}

int
xfs_message_gc_nodes(int fd,
		     struct xfs_message_gc_nodes *message,
		     u_int size,
		     struct proc *p)
{
    XFSDEB(XDEBMSG, ("xfs_message_gc\n"));

    if (message->len == 0) {
	struct vnode *vp, *next;

	/* XXX see comment in xfs_node_find */
	/* XXXSMP do gone[l] need to get mntvnode_slock ? */

/* FreeBSD 4.5 and above did rename mnt_vnodelist to mnt_nvnodelist */
#ifdef HAVE_STRUCT_MOUNT_MNT_NVNODELIST
	for(vp = TAILQ_FIRST(&XFS_TO_VFS(&xfs[fd])->mnt_nvnodelist);
	    vp != NULL; 
	    vp = next) {

	    next = TAILQ_NEXT(vp, v_nmntvnodes);
	    gc_vnode (vp, p);
	}
#else
	for(vp = XFS_TO_VFS(&xfs[fd])->mnt_vnodelist.lh_first;
	    vp != NULL; 
	    vp = next) {

	    next = vp->v_mntvnodes.le_next;
	    gc_vnode (vp, p);
	}
#endif
    } else {
	struct xfs_node *t;
	int i;

	for (i = 0; i < message->len; i++) {
	    t = xfs_node_find (&xfs[fd], &message->handle[i]);
	    if (t == NULL)
		continue;

	    gc_vnode(XNODE_TO_VNODE(t), p);
	}
    }

    return 0;
}


#endif

/*
 * Probe what version of xfs this support
 */

int
xfs_message_version(int fd,
		    struct xfs_message_version *message,
		    u_int size,
		    struct proc *p)
{
    struct xfs_message_wakeup msg;
    int ret;

    ret = XFS_VERSION;

    msg.header.opcode = XFS_MSG_WAKEUP;
    msg.sleepers_sequence_num = message->header.sequence_num;
    msg.error = ret;

    return xfs_message_send(fd, (struct xfs_message_header *) &msg, sizeof(msg));
}
@


1.1
log
@Initial revision
@
text
@d44 1
a44 1
RCSID("$Id: xfs_message.c,v 1.8 2002/06/07 04:10:32 hin Exp $");
@


1.1.1.1
log
@Import OpenBSD 3.3 source repository from CTM 3132 the first time
This opens an OpenBSD-mirabile (aka MirBSD) repository.

### MirBSD is:
# Copyright (c) 1982-2003 by Thorsten "mirabile" Glaser <x86@@ePost.de>
# Copyright © 1968-2003  The authors of And contributors to UNIX®, the
#       C Language, BSD/Berkeley Unix; 386BSD, NetBSD 1.1 and OpenBSD.
#
# Anyone who obtained a copy of this work is hereby permitted to freely use,
# distribute, modify, merge, sublicence, give away or sell it as long as the
# authors are given due credit and the following notice is retained:
#
# This work is provided "as is", with no explicit or implicit warranty what-
# soever. Use it only at your own risk. In no event may an author or contri-
# butor be held liable for any damage, directly or indirectly, that origina-
# ted through or is caused by creation or modification of this work.

MirBSD is my private tree. MirBSD does not differ very much from OpenBSD
and intentionally tracks OpenBSD. That's why it _is_ OpenBSD, just not the
official one. It's like with DarrenBSD.

At time of this writing, no advertising for MirBSD must be done,
because the advertising clause has not yet been sorted out.

http://templeofhate.com/tglaser/MirBSD/index.php
@
text
@@


1.1.1.2
log
@Import OpenBSD source tree from CVS (anoncvs canada)
of roughly 12:00 UTC today. Bumps us to OpenBSD 3.4
and makes source/ports in sync. Hopefully.
@
text
@d44 1
a44 13
RCSID("$arla: xfs_message.c,v 1.84 2003/06/02 18:25:20 lha Exp $");

static void
send_inactive_node(int fd, xfs_handle *handle)
{
    struct xfs_message_inactivenode msg;
    
    msg.header.opcode = NNPFS_MSG_INACTIVENODE;
    msg.handle = *handle;
    msg.flag   = NNPFS_NOREFS | NNPFS_DELETE;
    xfs_message_send(fd, &msg.header, sizeof(msg));
}

d50 1
a50 1
			d_thread_t *p)
d54 1
a54 1
    NNPFSDEB(XDEBMSG, ("xfs_message_installroot (%d,%d,%d,%d)\n",
d61 1
a61 1
	printf("NNPFS PANIC WARNING! xfs_message_installroot: called again!\n");
d67 1
a67 1
	NNPFS_MAKE_VROOT(xfs[fd].root->vn);
d76 1
a76 1
			d_thread_t *p)
d81 1
a81 1
    NNPFSDEB(XDEBMSG, ("xfs_message_installnode (%d,%d,%d,%d)\n",
d88 1
a88 1
    dp = xfs_node_find(&xfs[fd].nodehead, &message->parent_handle);
a91 3
	NNPFSDEB(XDEBMSG, ("xfs_message_installnode: t_vnode = %lx\n",
			   (unsigned long)t_vnode));

d107 1
a107 1
	printf("NNPFS PANIC WARNING! xfs_message_installnode: no parent\n");
d110 1
a110 1
    NNPFSDEB(XDEBMSG, ("return: xfs_message_installnode: %d\n", error));
d119 1
a119 1
			d_thread_t *p)
d124 1
a124 1
    NNPFSDEB(XDEBMSG, ("xfs_message_installattr (%d,%d,%d,%d) \n",
d130 1
a130 1
    t = xfs_node_find(&xfs[fd].nodehead, &message->node.handle);
d133 1
a133 1
	if ((t->tokens & NNPFS_DATA_MASK) && DATA_FROM_XNODE(t) == NULL) {
d135 1
a135 1
	    t->tokens &= ~NNPFS_DATA_MASK;
d138 1
a138 2
	if ((t->flags & NNPFS_VMOPEN) == 0)
	    xfs_set_vp_size(XNODE_TO_VNODE(t), t->attr.va_size);
d143 1
a143 1
	NNPFSDEB(XDEBMSG, ("xfs_message_installattr: no such node\n"));
d153 1
a153 1
			d_thread_t *p)
d158 1
a158 1
    NNPFSDEB(XDEBMSG, ("xfs_message_installdata (%d,%d,%d,%d)\n",
d165 1
a165 1
    t = xfs_node_find(&xfs[fd].nodehead, &message->node.handle);
d167 2
a168 2
	struct xfs_fhandle_t *fh = 
	    (struct xfs_fhandle_t *)&message->cache_handle;
a169 1
	struct vnode *vp;
d172 1
a172 1
	NNPFSDEB(XDEBMSG, ("cache_name = '%s'\n", message->cache_name));
d177 1
a177 1
	if (message->flag & NNPFS_ID_HANDLE_VALID) {
d190 1
a190 1
	    NNPFSDEB(XDEBMSG,
d194 1
a194 1
	    NDINIT(ndp, LOOKUP, FOLLOW | NNPFS_LOCKLEAF, UIO_SYSSPACE,
d208 1
a208 1
	    NNPFSDEB(XDEBMSG, ("xfs_message_installdata: t = %lx;"
d214 1
a214 2
	    if ((t->flags & NNPFS_VMOPEN) == 0)
		xfs_set_vp_size(XNODE_TO_VNODE(t), t->attr.va_size);
d216 2
a217 2
		&& (message->flag & NNPFS_ID_INVALID_DNLC))
		xfs_dnlc_purge (XNODE_TO_VNODE(t));
a220 1
	    t->offset = message->offset;
d222 2
a223 2
	    if (message->flag & NNPFS_ID_AFSDIR)
		t->flags |= NNPFS_AFSDIR;
d226 1
a226 1
	    printf("NNPFS PANIC WARNING! xfs_message_installdata failed!\n");
d232 1
a232 1
	printf("NNPFS PANIC WARNING! xfs_message_installdata failed\n");
d250 1
a250 1
			d_thread_t *p)
d255 1
a255 1
    NNPFSDEB(XDEBMSG, ("xfs_message_invalidnode (%d,%d,%d,%d)\n",
d261 1
a261 4
#ifdef __APPLE__
 retry:
#endif
    t = xfs_node_find(&xfs[fd].nodehead, &message->handle);
d287 1
a287 4
	    if (vget(vp, 0, p))
		goto retry;

	    if (UBCISVALID(vp) && !ubc_isinuse(vp, 1)) {
a288 1
		vrele(vp);
d290 1
a290 2
		vrele(vp);
		t->flags |= NNPFS_STALE;
d294 1
a294 1
	    t->flags |= NNPFS_STALE;
d303 3
a305 3
	NNPFS_TOKEN_CLEAR(t, ~0,
			NNPFS_OPEN_MASK | NNPFS_ATTR_MASK |
			NNPFS_DATA_MASK | NNPFS_LOCK_MASK);
d310 1
a311 1
	    NNPFSDEB(XDEBVNOPS, ("xfs_message_invalidnode: vrecycle\n"));
d313 1
a313 3
#else
	    /* XXX */
#endif /* __osf__ */
a315 2
	NNPFSDEB(XDEBMSG, ("xfs_message_invalidnode: no such node\n"));
	send_inactive_node(fd, &message->handle);
d326 1
a326 1
		      d_thread_t *p)
d329 1
d331 13
a343 15
    NNPFSDEB(XDEBMSG, ("xfs_message_updatefid (%d,%d,%d,%d) (%d,%d,%d,%d)\n",
		       message->old_handle.a,
		       message->old_handle.b,
		       message->old_handle.c,
		       message->old_handle.d,
		       message->new_handle.a,
		       message->new_handle.b,
		       message->new_handle.c,
		       message->new_handle.d));

    error = xfs_update_handle(&xfs[fd].nodehead, 
				&message->old_handle,
				&message->new_handle);
    if (error)
	printf ("NNPFS PANIC WARNING! xfs_message_updatefid: %d\n", error);
d355 1
a355 1
	  d_thread_t *p)
d366 1
a366 1
	NNPFSDEB(XDEBMSG, ("xfs_message_gc: success\n"));
d370 1
a370 1
	NNPFSDEB(XDEBMSG, ("xfs_message_gc: used\n"));
d375 34
d418 1
a418 1
	  d_thread_t *p)
a419 3
#ifdef HAVE_SYS_MUTEX_H
    mtx_lock(&vp->v_interlock);
#else
a420 1
#endif
a434 3
#ifdef HAVE_SYS_MUTEX_H
	    mtx_unlock(&vp->v_interlock);
#else
a435 1
#endif
d442 2
a443 2
		    vprint("vrele: bad ref count", vp);
		    panic("vrele: ref cnt");
d446 1
a446 1
	NNPFSDEB(XDEBMSG, ("xfs_message_gc: success\n"));
d448 1
a448 1
#ifdef HAVE_KERNEL_VGONEL
a450 3
#ifdef HAVE_SYS_MUTEX_H
	mtx_unlock(&vp->v_interlock);
#else
a451 1
#endif
a455 3
#ifdef HAVE_SYS_MUTEX_H
	mtx_unlock(&vp->v_interlock);
#else
d457 1
a457 2
#endif
	NNPFSDEB(XDEBMSG, ("xfs_message_gc: used\n"));
d462 31
d494 3
d498 6
a503 18
int
xfs_message_gc_nodes(int fd,
		       struct xfs_message_gc_nodes *message,
		       u_int size,
		       d_thread_t *p)
{
    struct xfs_node *node;
    int i;

    NNPFSDEB(XDEBMSG, ("xfs_message_gc\n"));

    for (i = 0; i < message->len; i++) {
	node = xfs_node_find (&xfs[fd].nodehead, &message->handle[i]);
	if (node)
	    gc_vnode(XNODE_TO_VNODE(node), p);
	else {
	    NNPFSDEB(XDEBMSG, ("xfs_message_gc_nodes: no such node\n"));
	    send_inactive_node(fd, &message->handle[i]);
d511 2
d521 1
a521 1
		    d_thread_t *p)
d526 1
a526 1
    ret = NNPFS_VERSION;
d528 1
a528 1
    msg.header.opcode = NNPFS_MSG_WAKEUP;
d532 1
a532 2
    return xfs_message_send(fd, 
			      (struct xfs_message_header *) &msg, sizeof(msg));
@

