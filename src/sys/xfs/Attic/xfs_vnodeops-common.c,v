head	1.2;
access;
symbols
	MIRBSD_7quater:1.1.1.2
	cvs-200405160640:1.1.1.2
	cvs-200401271800:1.1.1.2
	cvs-200401261630:1.1.1.2
	cvs-200401021645:1.1.1.2
	MIRBSD_7_ALPHA:1.1.1.2.0.6
	MIRBSD_7:1.1.1.2.0.4
	cvs-200312222040:1.1.1.2
	MIRBSD_7ter:1.1.1.2
	MIRBSD_7_DEV:1.1.1.2.0.2
	cvs-200310020700:1.1.1.2
	cvs-200309271030:1.1.1.2
	cvs-200309261655:1.1.1.2
	cvs-200309251530:1.1.1.2
	cvs-200308302005:1.1.1.2
	cvs-200308171200:1.1.1.2
	ctm-3496:1.1.1.1
	ctm-3449:1.1.1.1
	ctm-3437:1.1.1.1
	cvs-200307191805:1.1.1.1
	ctm-3425:1.1.1.1
	cvs-200307091500:1.1.1.1
	cvs-200307072125:1.1.1.1
	ctm-3389:1.1.1.1
	cvs-200307021520:1.1.1.1
	cvs-200306291430:1.1.1.1
	ctm-3341:1.1.1.1
	MIRBSD_5:1.1.1.1
	cvs-200306082100:1.1.1.1
	ctm-3316:1.1.1.1
	ctm-3272:1.1.1.1
	ctm-3264:1.1.1.1
	cvs-200305071630:1.1.1.1
	ctm-3255:1.1.1.1
	ctm-3229:1.1.1.1
	MIRBSD_4:1.1.1.1
	ctm-3203:1.1.1.1
	cvs-20030410-1130:1.1.1.1
	ctm-3155:1.1.1.1
	ctm-3132:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.2
date	2004.03.14.18.23.32;	author tg;	state dead;
branches;
next	1.1;

1.1
date	2003.03.22.17.52.30;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.03.22.17.52.30;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2003.08.17.14.42.01;	author tg;	state Exp;
branches;
next	;


desc
@@


1.2
log
@nuke xfs (not sgixfs!), the generic kernel-userland interface

does anyone use
 - netatalk
 - netccitt (I tried to build it; it's broken nearly beyond repair,
		and the NetBSD thing isn't better)
 - netiso
 - netns
or may someone nuke them sometime?
@
text
@/*
 * Copyright (c) 1995 - 2001 Kungliga Tekniska Högskolan
 * (Royal Institute of Technology, Stockholm, Sweden).
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * 3. Neither the name of the Institute nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE INSTITUTE AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE INSTITUTE OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

/*
 * XFS operations.
 */

#include <xfs/xfs_locl.h>
#include <xfs/xfs_message.h>
#include <xfs/xfs_common.h>
#include <xfs/xfs_fs.h>
#include <xfs/xfs_dev.h>
#include <xfs/xfs_deb.h>
#include <xfs/xfs_syscalls.h>
#include <xfs/xfs_vnodeops.h>

RCSID("$Id: xfs_vnodeops-common.c,v 1.1 2003/03/22 17:52:30 tg Exp $");

static void
xfs_handle_stale(struct xfs_node *xn)
{
#ifndef __OpenBSD__
    struct vnode *vp = XNODE_TO_VNODE(xn);
#endif

    if ((xn->flags & XFS_STALE) == 0)
	return;

#if __APPLE__
    if (UBCISVALID(vp) && !ubc_isinuse(vp, 1)) {
	xn->flags &= ~XFS_STALE;
	XFS_TOKEN_CLEAR(xn, ~0,
			XFS_OPEN_MASK | XFS_ATTR_MASK |
			XFS_DATA_MASK | XFS_LOCK_MASK);
    }
#endif
}

int
xfs_open_valid(struct vnode *vp, struct ucred *cred, struct proc *p,
	       u_int tok)
{
    struct xfs *xfsp = XFS_FROM_VNODE(vp);
    struct xfs_node *xn = VNODE_TO_XNODE(vp);
    int error = 0;

    XFSDEB(XDEBVFOPS, ("xfs_open_valid\n"));

    xfs_handle_stale(xn);

    do {
	if (!XFS_TOKEN_GOT(xn, tok)) {
	    struct xfs_message_open msg;

	    msg.header.opcode = XFS_MSG_OPEN;
	    msg.cred.uid = cred->cr_uid;
	    msg.cred.pag = xfs_get_pag(cred);
	    msg.handle = xn->handle;
	    msg.tokens = tok;

	    error = xfs_message_rpc(xfsp->fd, &msg.header, sizeof(msg), p);

	    if (error == 0)
		error = ((struct xfs_message_wakeup *) & msg)->error;
	} else {
	    goto done;
	}
    } while (error == 0);

done:
    XFSDEB(XDEBVFOPS, ("xfs_open_valid: error = %d\n", error));

    return error;
}

int
xfs_attr_valid(struct vnode *vp, struct ucred *cred, struct proc *p,
	       u_int tok)
{
    struct xfs *xfsp = XFS_FROM_VNODE(vp);
    struct xfs_node *xn = VNODE_TO_XNODE(vp);
    int error = 0;
    xfs_pag_t pag = xfs_get_pag(cred);

    do {
	if (!XFS_TOKEN_GOT(xn, tok)) {
	    struct xfs_message_getattr msg;

	    msg.header.opcode = XFS_MSG_GETATTR;
	    msg.cred.uid = cred->cr_uid;
	    msg.cred.pag = pag;
	    msg.handle = xn->handle;
	    error = xfs_message_rpc(xfsp->fd, &msg.header, sizeof(msg), p);
	    if (error == 0)
		error = ((struct xfs_message_wakeup *) & msg)->error;
	} else {
	    goto done;
	}
    } while (error == 0);

done:
    return error;
}

int
xfs_fetch_rights(struct vnode *vp, struct ucred *cred, struct proc *p)
{
    struct xfs *xfsp = XFS_FROM_VNODE(vp);
    struct xfs_node *xn = VNODE_TO_XNODE(vp);
    int error = 0;

    xfs_pag_t pag = xfs_get_pag(cred);

    do {
	if (!xfs_has_pag(xn, pag)) {
	    struct xfs_message_getattr msg;

	    msg.header.opcode = XFS_MSG_GETATTR;
	    msg.cred.uid = cred->cr_uid;
	    msg.cred.pag = pag;
	    msg.handle = xn->handle;
	    error = xfs_message_rpc(xfsp->fd, &msg.header, sizeof(msg), p);
	    if (error == 0)
		error = ((struct xfs_message_wakeup *) & msg)->error;
	} else {
	    goto done;
	}
    } while (error == 0);

done:

    return error;
}

int
xfs_data_valid(struct vnode *vp, struct ucred *cred, struct proc *p,
	       u_int tok)
{
    struct xfs *xfsp = XFS_FROM_VNODE(vp);
    struct xfs_node *xn = VNODE_TO_XNODE(vp);
    int error = 0;

    do {
	if (!XFS_TOKEN_GOT(xn, tok)) {
	    struct xfs_message_getdata msg;

	    msg.header.opcode = XFS_MSG_GETDATA;
	    msg.cred.uid = cred->cr_uid;
	    msg.cred.pag = xfs_get_pag(cred);
	    msg.handle = xn->handle;
	    msg.tokens = tok;

	    error = xfs_message_rpc(xfsp->fd, &msg.header, sizeof(msg), p);

	    if (error == 0)
		error = ((struct xfs_message_wakeup *) & msg)->error;
	} else {
	    goto done;
	}
    } while (error == 0);

done:
    return error;
}

int
xfs_open_common(struct vnode *vp,
		int mode,
		struct ucred *cred,
		struct proc *p)
{
    struct xfs_node *xn = VNODE_TO_XNODE(vp);

    XFSDEB(XDEBVNOPS, ("xfs_open\n"));

    if (mode & FWRITE) {
	if (xn->cred)
	    crfree (xn->cred);
	crhold (cred);
	xn->cred = cred;
	return xfs_open_valid(vp, cred, p, XFS_OPEN_NW);
    } else {
	return xfs_open_valid(vp, cred, p, XFS_OPEN_NR);
    }
}

static int
do_fsync(struct xfs *xfsp,
	 struct xfs_node *xn,
	 struct ucred *cred,
	 struct proc *p,
	 u_int flag)
{
    int error;
    struct xfs_message_putdata msg;
#if 0
    struct vnode *vp = XNODE_TO_VNODE(xn);
    struct vnode *t  = DATA_FROM_XNODE(xn);

    vinvalbuf (vp, V_SAVE, cred, p, 0, 0);

    xfs_vfs_writelock(t, p);
    vinvalbuf(t, V_SAVE, cred, p, 0, 0);
    xfs_vfs_unlock(t, p);
#endif

    msg.header.opcode = XFS_MSG_PUTDATA;
    if (cred != NOCRED) {
	msg.cred.uid = cred->cr_uid;
	msg.cred.pag = xfs_get_pag(cred);
    } else {
	msg.cred.uid = 0;
	msg.cred.pag = XFS_ANONYMOUSID;
    }
    msg.handle = xn->handle;
    vattr2xfs_attr(&xn->attr, &msg.attr);
    msg.flag   = flag;

    error = xfs_message_rpc(xfsp->fd, &msg.header, sizeof(msg), p);

    if (error == 0)
	error = ((struct xfs_message_wakeup *) & msg)->error;

    if (error == 0)
	xn->flags &= ~XFS_DATA_DIRTY;

    return error;
}

int
xfs_fsync_common(struct vnode *vp, struct ucred *cred,
		 int waitfor, struct proc *proc)
{
    struct xfs *xfsp = XFS_FROM_VNODE(vp);
    struct xfs_node *xn = VNODE_TO_XNODE(vp);
    int error = 0;

    XFSDEB(XDEBVNOPS, ("xfs_fsync: %lx\n", (unsigned long)vp));

    /*
     * It seems that fsync is sometimes called after reclaiming a node.
     * In that case we just look happy.
     */

    if (xn == NULL) {
	printf("XFS PANIC WARNING! xfs_fsync called after reclaiming!\n");
	return 0;
    }
    
#ifdef __APPLE__
    ubc_pushdirty(vp);
#endif
    if (xn->flags & XFS_DATA_DIRTY) {
#ifdef FSYNC_RECLAIM
	/* writing back the data from this vnode failed */
	if (waitfor & FSYNC_RECLAIM) {
	    printf("xfs_fsync: data lost, failed to write back\n");
	    xn->flags &= ~XFS_DATA_DIRTY;
	    return 0;
	}
#endif    
	error = do_fsync(xfsp, xn, cred, proc, XFS_WRITE | XFS_FSYNC);
    }

    return error;
}

int
xfs_close_common(struct vnode *vp, int fflag,
		 struct proc *proc, struct ucred *cred)
{
    struct xfs *xfsp = XFS_FROM_VNODE(vp);
    struct xfs_node *xn = VNODE_TO_XNODE(vp);
    int error = 0;
    
    XFSDEB(XDEBVNOPS,
	   ("xfs_close cred = %lx, fflag = %x, xn->flags = %x\n",
	    (unsigned long)cred, fflag, xn->flags));

    if (fflag & FWRITE && xn->flags & XFS_DATA_DIRTY)
	error = do_fsync(xfsp, xn, cred, proc, XFS_WRITE);

    return error;
}

int
xfs_read_common(struct vnode *vp, struct uio *uio, int ioflag,
		struct ucred *cred)
{
    int error = 0;
    int i;

    XFSDEB(XDEBVNOPS, ("xfs_read\n"));

    error = xfs_data_valid(vp, cred, xfs_uio_to_proc(uio), XFS_DATA_R);

    XFSDEB(XDEBVNOPS, ("xfs_read: iovcnt: %d\n", uio->uio_iovcnt));
    for (i = 0; i < uio->uio_iovcnt; i++)
      XFSDEB(XDEBVNOPS, ("  base: %lx len: %d\n",
			 (unsigned long)uio->uio_iov[i].iov_base,
			 uio->uio_iov[i].iov_len));

    if (error == 0) {
	struct vnode *t = DATA_FROM_VNODE(vp);

	xfs_vfs_readlock(t, xfs_uio_to_proc(uio));
	xfs_vop_read(t, uio, ioflag, cred, error);
	xfs_vfs_unlock(t, xfs_uio_to_proc(uio));
    }

    XFSDEB(XDEBVNOPS, ("xfs_read offset: %lu resid: %d\n",
		       (unsigned long)uio->uio_offset,
		       uio->uio_resid));
    XFSDEB(XDEBVNOPS, ("xfs_read error: %d\n", error));

    return error;
}

int
xfs_write_common(struct vnode *vp, struct uio *uiop, int ioflag,
		 struct ucred *cred)
{
    int error = 0;

    XFSDEB(XDEBVNOPS, ("xfs_write\n"));

    error = xfs_data_valid(vp, cred, xfs_uio_to_proc(uiop), XFS_DATA_W);

    if (error == 0) {
	struct xfs_node *xn = VNODE_TO_XNODE(vp);
	struct vnode *t = DATA_FROM_XNODE(xn);
	struct vattr sub_attr;
	int error2 = 0;
 
	xfs_vfs_writelock(t, xfs_uio_to_proc(uiop));
	xfs_vop_write(t, uiop, ioflag, cred, error);
	VNODE_TO_XNODE(vp)->flags |= XFS_DATA_DIRTY;
	xfs_vop_getattr(t, &sub_attr, cred, xfs_uio_to_proc(uiop), error2);

	if (error2 == 0) {
	    xn->attr.va_size  = sub_attr.va_size;
	    xn->attr.va_mtime = sub_attr.va_mtime;
	    xfs_set_vp_size(vp, sub_attr.va_size);
	}
	xfs_vfs_unlock(t, xfs_uio_to_proc(uiop));
    }

    return error;
}

int
xfs_getattr_common(struct vnode *vp, struct vattr *vap,
		   struct ucred *cred, struct proc *p)
{
    int error = 0;

    struct xfs_node *xn = VNODE_TO_XNODE(vp);

    XFSDEB(XDEBVNOPS, ("xfs_getattr\n"));

    error = xfs_attr_valid(vp, cred, p, XFS_ATTR_R);
    if (error == 0)
	*vap = xn->attr;
    return error;
}

int
xfs_setattr_common(struct vnode *vp, struct vattr *vap,
		   struct ucred *cred, struct proc *p)
{
    struct xfs *xfsp = XFS_FROM_VNODE(vp);
    struct xfs_node *xn = VNODE_TO_XNODE(vp);
    int error = 0;

    XFSDEB(XDEBVNOPS, ("xfs_setattr\n"));

#define CHECK_XFSATTR(A, cast) (vap->A == cast VNOVAL || vap->A == xn->attr.A)
	if (CHECK_XFSATTR(va_mode,(mode_t)) &&
	    CHECK_XFSATTR(va_nlink,(short)) &&
	    CHECK_XFSATTR(va_size,(va_size_t)) &&
	    CHECK_XFSATTR(va_uid,(uid_t)) &&
	    CHECK_XFSATTR(va_gid,(gid_t)) &&
	    CHECK_XFSATTR(va_mtime.tv_sec,(unsigned int)) &&
	    CHECK_XFSATTR(va_fileid,(long)) &&
	    CHECK_XFSATTR(va_type,(enum vtype)))
		return 0;		/* Nothing to do */
#undef CHECK_XFSATTR

    if (XFS_TOKEN_GOT(xn, XFS_ATTR_W)) {
	/* Update attributes and mark them dirty. */
	VNODE_TO_XNODE(vp)->flags |= XFS_ATTR_DIRTY;
	error = EINVAL;		       /* XXX not yet implemented */
	goto done;
    } else {
	struct xfs_message_putattr msg;

	msg.header.opcode = XFS_MSG_PUTATTR;
	if (cred != NOCRED) {
	    msg.cred.uid = cred->cr_uid;
	    msg.cred.pag = xfs_get_pag(cred);
	} else {
	    msg.cred.uid = 0;
	    msg.cred.pag = XFS_ANONYMOUSID;
	}
	msg.handle = xn->handle;
	vattr2xfs_attr(vap, &msg.attr);
	if (XFS_TOKEN_GOT(xn, XFS_DATA_R)) {
	    if (vp->v_type == VREG) {
		if (vap->va_size != (va_size_t)VNOVAL)
		    XA_SET_SIZE(&msg.attr, vap->va_size);
		else
		    XA_SET_SIZE(&msg.attr, xn->attr.va_size);
#ifdef __APPLE__
		if (UBCINFOEXISTS(vp))
		    ubc_setsize(vp, msg.attr.xa_size);
#endif
	    }
	    if (vap->va_mtime.tv_sec != (unsigned int)VNOVAL)
		XA_SET_MTIME(&msg.attr, vap->va_mtime.tv_sec);
	    else
		XA_SET_MTIME(&msg.attr, xn->attr.va_mtime.tv_sec);
	}

	XFS_TOKEN_CLEAR(xn, XFS_ATTR_VALID, XFS_ATTR_MASK);
	error = xfs_message_rpc(xfsp->fd, &msg.header, sizeof(msg), p);
	if (error == 0)
	    error = ((struct xfs_message_wakeup *) & msg)->error;
    }

done:
    return error;
}

static int
check_rights (u_char rights, int mode)
{
    int error = 0;

    if (mode & VREAD)
	if ((rights & XFS_RIGHT_R) == 0)
	    error = EACCES;
    if (mode & VWRITE)
	if ((rights & XFS_RIGHT_W) == 0)
	    error = EACCES;
    if (mode & VEXEC)
	if ((rights & XFS_RIGHT_X) == 0)
	    error = EACCES;
    return error;
}

int
xfs_access_common(struct vnode *vp, int mode, struct ucred *cred,
		  struct proc *p)
{
    int error = 0;
    xfs_pag_t pag = xfs_get_pag(cred);

    XFSDEB(XDEBVNOPS, ("xfs_access mode = 0%o\n", mode));

    error = xfs_attr_valid(vp, cred, p, XFS_ATTR_R);
    if (error == 0) {
	struct xfs_node *xn = VNODE_TO_XNODE(vp);
	int i;

	error = check_rights (xn->anonrights, mode);

	if (error == 0)
	    goto done;

	XFSDEB(XDEBVNOPS, ("xfs_access anonaccess failed\n"));

	xfs_fetch_rights(vp, cred, p); /* ignore error */

	error = EACCES;		/* default to EACCES if pag isn't in xn->id */

	for (i = 0; i < MAXRIGHTS; i++)
	    if (xn->id[i] == pag) {
		error = check_rights (xn->rights[i], mode);
		break;
	    }
    }

done:
    XFSDEB(XDEBVNOPS, ("xfs_access(0%o) = %d\n", mode, error));

    return error;
}

int
xfs_lookup_common(struct vnode *dvp, 
		  xfs_componentname *cnp, 
		  struct vnode **vpp)
{
    struct xfs_message_getnode msg;
    struct xfs *xfsp = XFS_FROM_VNODE(dvp);
    struct xfs_node *d = VNODE_TO_XNODE(dvp);
    int error = 0;
    struct proc *proc  = xfs_cnp_to_proc(cnp);
    struct ucred *cred = xfs_proc_to_cred(proc);

    XFSDEB(XDEBVNOPS, ("xfs_lookup_common: enter\n"));

    *vpp = NULL;

    if (cnp->cn_namelen >= XFS_MAX_NAME)
	return ENAMETOOLONG;
	
    if (dvp->v_type != VDIR)
	return ENOTDIR;

    if (cnp->cn_namelen == 1 && cnp->cn_nameptr[0] == '.') {
	*vpp = dvp;
	VREF(*vpp);
	return 0;
    }
    
    do {
	xfs_vop_access(dvp, VEXEC, cred, proc, error);
	if (error != 0)
	    goto done;

	XFSDEB(XDEBVNOPS, ("xfs_lookup_common: dvp = %lx\n", (unsigned long) dvp));
	

	error = xfs_dnlc_lookup(dvp, cnp, vpp);
	if (error == 0) {

	    /*
	     * Doesn't quite work.
	     */

#if 0
	    if ((cnp->cn_nameiop == CREATE || cnp->cn_nameiop == RENAME)
		&& (cnp->cn_flags & ISLASTCN)) {
		error = EJUSTRETURN;
		goto done;
	    }
#endif

	    msg.header.opcode = XFS_MSG_GETNODE;
	    if (cnp->cn_cred != NOCRED) {
		msg.cred.uid = cnp->cn_cred->cr_uid;
		msg.cred.pag = xfs_get_pag(cnp->cn_cred);
	    } else {
		msg.cred.uid = 0;
		msg.cred.pag = XFS_ANONYMOUSID;
	    }
	    msg.parent_handle = d->handle;
	    memcpy(msg.name, cnp->cn_nameptr, cnp->cn_namelen);
	    msg.name[cnp->cn_namelen] = '\0';
	    error = xfs_message_rpc(xfsp->fd, &msg.header,
				    sizeof(msg), proc);
	    if (error == 0)
		error = ((struct xfs_message_wakeup *) & msg)->error;
	    if(error == ENOENT && cnp->cn_nameiop != CREATE) {
		XFSDEB(XDEBVNOPS, ("xfs_lookup: neg cache %lx (%s, %ld)\n",
				   (unsigned long)dvp,
				   cnp->cn_nameptr, cnp->cn_namelen));
		xfs_dnlc_enter (dvp, cnp, NULL);
	    }
	} else if (error == -1) {
	    error = 0;
	    goto done;
	}
    } while (error == 0);

done:
    XFSDEB(XDEBVNOPS, ("xfs_lookup_common: return\n"));
    return error;
}

int
xfs_create_common(struct vnode *dvp,
		  const char *name,
		  struct vattr *vap, 
		  struct ucred *cred,
		  struct proc *p)
{
    struct xfs *xfsp = XFS_FROM_VNODE(dvp);
    struct xfs_node *xn = VNODE_TO_XNODE(dvp);
    int error = 0;

    XFSDEB(XDEBVNOPS, ("xfs_create: (%lx, %s)\n",
		       (unsigned long)dvp, name));
    {
	struct xfs_message_create msg;

	msg.header.opcode = XFS_MSG_CREATE;
	msg.parent_handle = xn->handle;
	if (strlcpy(msg.name, name, sizeof(msg.name)) >= XFS_MAX_NAME)
	    return ENAMETOOLONG;
	vattr2xfs_attr(vap, &msg.attr);

	msg.mode = 0;		       /* XXX - mode */
	if (cred != NOCRED) {
	    msg.cred.uid = cred->cr_uid;
	    msg.cred.pag = xfs_get_pag(cred);
	} else {
	    msg.cred.uid = 0;
	    msg.cred.pag = XFS_ANONYMOUSID;
	}


	error = xfs_message_rpc(xfsp->fd, &msg.header, sizeof(msg), p);

	if (error == 0)
	    error = ((struct xfs_message_wakeup *) & msg)->error;
    }

#if 0
    if (error == EEXIST)
	error = 0;
#endif

    return error;
}

int
xfs_remove_common(struct vnode *dvp,
		  struct vnode *vp,
		  const char *name,
		  struct ucred *cred,
		  struct proc *p)
{
    struct xfs *xfsp  = XFS_FROM_VNODE(dvp);
    struct xfs_node *xn = VNODE_TO_XNODE(dvp);
    struct xfs_message_remove msg;
    int error;

    XFSDEB(XDEBVNOPS, ("xfs_remove: %s\n", name));

    msg.header.opcode = XFS_MSG_REMOVE;
    msg.parent_handle = xn->handle;
    msg.cred.uid = cred->cr_uid;
    msg.cred.pag = xfs_get_pag(cred);
    
    if (strlcpy(msg.name, name, sizeof(msg.name)) >= XFS_MAX_NAME)
	error = ENAMETOOLONG;
    else
	error = xfs_message_rpc(xfsp->fd, &msg.header, sizeof(msg), p);
    if (error == 0)
	error = ((struct xfs_message_wakeup *) &msg)->error;

    if (error == 0)
	xfs_dnlc_purge (vp);

    return error;
}

int
xfs_rename_common(struct vnode *fdvp, 
		  struct vnode *fvp,
		  const char *fname,
		  struct vnode *tdvp,
		  struct vnode *tvp,
		  const char *tname,
		  struct ucred *cred,
		  struct proc *p)
{
    struct xfs *xfsp = XFS_FROM_VNODE(fdvp);
    int error;

    XFSDEB(XDEBVNOPS, ("xfs_rename: %s %s\n", fname, tname));

    if ((fvp->v_mount != tdvp->v_mount)
	|| (tvp && (fvp->v_mount != tvp->v_mount))) {
	return  EXDEV;
    }

    {
	struct xfs_message_rename msg;

	msg.header.opcode = XFS_MSG_RENAME;
	msg.old_parent_handle = VNODE_TO_XNODE(fdvp)->handle;
	if (strlcpy(msg.old_name, fname, sizeof(msg.old_name)) >= XFS_MAX_NAME)
	    return ENAMETOOLONG;
	msg.new_parent_handle = VNODE_TO_XNODE(tdvp)->handle;
	if (strlcpy(msg.new_name, tname, sizeof(msg.new_name)) >= XFS_MAX_NAME)
	    return ENAMETOOLONG;
	msg.cred.uid = cred->cr_uid;
	msg.cred.pag = xfs_get_pag(cred);
	error = xfs_message_rpc(xfsp->fd, &msg.header, sizeof(msg), p);
	if (error == 0)
	    error = ((struct xfs_message_wakeup *) &msg)->error;

    }

    XFSDEB(XDEBVNOPS, ("xfs_rename: error = %d\n", error));

    return error;
}

int
xfs_mkdir_common(struct vnode *dvp, 
		 const char *name,
		 struct vattr *vap, 
		 struct ucred *cred,
		 struct proc *p)
{
    struct xfs *xfsp = XFS_FROM_VNODE(dvp);
    struct xfs_node *xn = VNODE_TO_XNODE(dvp);
    int error = 0;

    XFSDEB(XDEBVNOPS, ("xfs_mkdir: %s\n", name));
    {
	struct xfs_message_mkdir msg;

	msg.header.opcode = XFS_MSG_MKDIR;
	msg.parent_handle = xn->handle;
	if (strlcpy(msg.name, name, sizeof(msg.name)) >= XFS_MAX_NAME)
	    return ENAMETOOLONG;
	vattr2xfs_attr(vap, &msg.attr);
	if (cred != NOCRED) {
	    msg.cred.uid = cred->cr_uid;
	    msg.cred.pag = xfs_get_pag(cred);
	} else {
	    msg.cred.uid = 0;
	    msg.cred.pag = XFS_ANONYMOUSID;
	}
	error = xfs_message_rpc(xfsp->fd, &msg.header, sizeof(msg), p);
	if (error == 0)
	    error = ((struct xfs_message_wakeup *) & msg)->error;
    }

    return error;
}

int
xfs_rmdir_common(struct vnode *dvp,
		 struct vnode *vp,
		 const char *name,
		 struct ucred *cred,
		 struct proc *p)
{
    struct xfs *xfsp  = XFS_FROM_VNODE(dvp);
    struct xfs_node *xn = VNODE_TO_XNODE(dvp);
    struct xfs_message_rmdir msg;
    int error;

    XFSDEB(XDEBVNOPS, ("xfs_rmdir: %s\n", name));

    msg.header.opcode = XFS_MSG_RMDIR;
    msg.parent_handle = xn->handle;
    msg.cred.uid = cred->cr_uid;
    msg.cred.pag = xfs_get_pag(cred);
    if (strlcpy(msg.name, name, sizeof(msg.name)) >= XFS_MAX_NAME)
	error = ENAMETOOLONG;
    else
	error = xfs_message_rpc(xfsp->fd, &msg.header, sizeof(msg), p);
    if (error == 0)
	error = ((struct xfs_message_wakeup *) &msg)->error;

    if (error == 0)
	xfs_dnlc_purge (vp);

    XFSDEB(XDEBVNOPS, ("xfs_rmdir error: %d\n", error));

    return error;
}

int
xfs_readdir_common(struct vnode *vp, 
		   struct uio *uiop, 
		   struct ucred *cred,
		   struct proc *p,
		   int *eofflag)
{
    int error = 0;

    XFSDEB(XDEBVNOPS, ("xfs_readdir\n"));

    if(eofflag)
	*eofflag = 0;
    error = xfs_data_valid(vp, cred, xfs_uio_to_proc(uiop), XFS_DATA_R);
    if (error == 0) {
	struct vnode *t = DATA_FROM_VNODE(vp);

	xfs_vfs_readlock(t, xfs_uio_to_proc(uiop));
	xfs_vop_read(t, uiop, 0, cred, error);
	if (eofflag) {
	    struct vattr t_attr;
	    int error2;

	    xfs_vop_getattr(t, &t_attr, cred, xfs_uio_to_proc(uiop), error2);
	    if (error2 == 0)
		*eofflag = t_attr.va_size <= uiop->uio_offset;
	}
	xfs_vfs_unlock(t, xfs_uio_to_proc(uiop));
    }
    return error;
}

int
xfs_link_common(struct vnode *dvp, 
		struct vnode *vp, 
		const char *name,
		struct ucred *cred,
		struct proc *p)
{
    struct xfs *xfsp = XFS_FROM_VNODE(dvp);
    struct xfs_node *xn = VNODE_TO_XNODE(dvp);
    struct xfs_node *xn2 = VNODE_TO_XNODE(vp);
    struct xfs_message_link msg;
    int error = 0;

    XFSDEB(XDEBVNOPS, ("xfs_link: %s\n", name));
    
    msg.header.opcode = XFS_MSG_LINK;
    msg.parent_handle = xn->handle;
    msg.from_handle   = xn2->handle;
    if (strlcpy(msg.name, name, sizeof(msg.name)) >= XFS_MAX_NAME)
	return ENAMETOOLONG;
    msg.cred.uid = cred->cr_uid;
    msg.cred.pag = xfs_get_pag(cred);

    error = xfs_message_rpc(xfsp->fd, &msg.header, sizeof(msg), p);
    if (error == 0)
	error = ((struct xfs_message_wakeup *) & msg)->error;
    
    return error;
}

int
xfs_symlink_common(struct vnode *dvp,
		   struct vnode **vpp,
		   xfs_componentname *cnp,
		   struct vattr *vap,
		   char *target)
{
    struct xfs *xfsp = XFS_FROM_VNODE(dvp);
    struct xfs_node *xn = VNODE_TO_XNODE(dvp);
    struct proc *proc  = xfs_cnp_to_proc(cnp);
    struct ucred *cred = xfs_proc_to_cred(proc);
    struct xfs_message_symlink msg;
    const char *name = cnp->cn_nameptr;
    int error = 0;

    XFSDEB(XDEBVNOPS, ("xfs_symlink: %s\n", name));

    msg.header.opcode = XFS_MSG_SYMLINK;
    msg.parent_handle = xn->handle;
    vattr2xfs_attr(vap, &msg.attr);
    msg.cred.uid = cred->cr_uid;
    msg.cred.pag = xfs_get_pag(cred);
    if (strlcpy (msg.contents, target, sizeof(msg.contents)) >= XFS_MAX_SYMLINK_CONTENT) {
	error = ENAMETOOLONG;
	goto done;
    }
    if (strlcpy(msg.name, name, sizeof(msg.name)) >= XFS_MAX_NAME) {
	error = ENAMETOOLONG;
	goto done;
    }
    error = xfs_message_rpc(xfsp->fd, &msg.header, sizeof(msg), proc);
    if (error == 0)
	error = ((struct xfs_message_wakeup *) & msg)->error;

 done:
    return error;
}

int
xfs_readlink_common(struct vnode *vp, struct uio *uiop, struct ucred *cred)
{
    int error = 0;

    XFSDEB(XDEBVNOPS, ("xfs_readlink\n"));

    error = xfs_data_valid(vp, cred, xfs_uio_to_proc(uiop), XFS_DATA_R);
    if (error == 0) {
	struct vnode *t = DATA_FROM_VNODE(vp);

	xfs_vfs_readlock(t, xfs_uio_to_proc(uiop));
	xfs_vop_read(t, uiop, 0, cred, error);
	xfs_vfs_unlock(t, xfs_uio_to_proc(uiop));
    }
    return error;
}

int
xfs_inactive_common(struct vnode *vp, struct proc *p)
{
    int error;
    struct xfs_node *xn = VNODE_TO_XNODE(vp);

    XFSDEB(XDEBVNOPS, ("xfs_inactive, %lx\n",
		       (unsigned long)vp));

    /*
     * This seems rather bogus, but sometimes we get an already
     * cleaned node to be made inactive.  Just ignoring it seems safe.
     */

    if (xn == NULL) {
	XFSDEB(XDEBVNOPS, ("xfs_inactive: clean node\n"));
	return 0;
    }

    /* xn->cred not set -> NOCRED */

    error = xfs_fsync_common(vp, xn->cred, /* XXX */ 0, p);
    if (error) {
	printf ("xfs_inactive: failed writing back data: %d\n", error);
	xn->flags &= ~XFS_DATA_DIRTY;
    }

#ifndef __osf__
    xfs_vfs_unlock(vp, p);
    /* If this node is no longer valid, recycle immediately. */
    if (!XFS_TOKEN_GOT(xn, XFS_ATTR_R | XFS_ATTR_W)
	|| (xn->flags & XFS_STALE) == XFS_STALE) {
        XFSDEB(XDEBVNOPS, ("xfs_inactive: vrecycle\n"));
        vrecycle(vp, 0, p);
    }
#else

    XFSDEB(XDEBVNOPS, ("xfs_inactive: vp = %lx vp->v_usecount= %d\n",
		       (unsigned long)vp, vp?vp->v_usecount:0));
#endif
    xn->flags &= ~XFS_STALE;

    XFSDEB(XDEBVNOPS, ("return: xfs_inactive\n"));

    return 0;
}

int
xfs_reclaim_common(struct vnode *vp)
{
    struct xfs_message_inactivenode msg;
    struct xfs *xfsp = XFS_FROM_VNODE(vp);
    struct xfs_node *xn = VNODE_TO_XNODE(vp);

    XFSDEB(XDEBVNOPS, ("xfs_reclaim: %lx\n",
		       (unsigned long)vp));

    XFS_TOKEN_CLEAR(xn,
		    ~0,
		    XFS_OPEN_MASK | XFS_ATTR_MASK |
		    XFS_DATA_MASK | XFS_LOCK_MASK);
    /* Release, data if we still have it. */
    if (DATA_FROM_XNODE(xn) != 0) {
        vrele(DATA_FROM_XNODE(xn));
	DATA_FROM_XNODE(xn) = 0;
    }

    msg.header.opcode = XFS_MSG_INACTIVENODE;
    msg.handle = xn->handle;
    msg.flag   = XFS_NOREFS | XFS_DELETE;
    xfs_message_send(xfsp->fd, &msg.header, sizeof(msg));

    xfs_dnlc_purge(vp);
    free_xfs_node(xn);
    return 0;
}

/*
 *
 */

#if 0

int
xfs_advlock_common(struct vnode *dvp, 
		   int locktype,
		   unsigned long lockid, /* XXX this good ? */
		   struct ucred *cred)
{
    struct xfs *xfsp = XFS_FROM_VNODE(dvp);
    struct xfs_node *xn = VNODE_TO_XNODE(dvp);
    int error = 0;

    XFSDEB(XDEBVNOPS, ("xfs_advlock\n"));
    {
	struct xfs_message_advlock msg;

	msg.header.opcode = XFS_MSG_ADVLOCK;
	msg.handle = xn->handle;
	msg.locktype = locktype;
	msg.lockid = lockid;

	if (cred != NOCRED) {
	    msg.cred.uid = cred->cr_uid;
	    msg.cred.pag = xfs_get_pag(cred);
	} else {
	    msg.cred.uid = 0;
	    msg.cred.pag = XFS_ANONYMOUSID;
	}
	error = xfs_message_rpc(xfsp->fd, &msg.header, sizeof(msg), p);
	if (error == 0)
	    error = ((struct xfs_message_wakeup *) & msg)->error;
    }

    if (error == 0) {
	
	/* sleep until woken */

    } else {

	/* die */
    }

    return error;
}

#endif

/*
 *
 */

void
xfs_printnode_common (struct vnode *vp)
{
    struct xfs_node *xn = VNODE_TO_XNODE(vp);

    printf ("xnode: fid: %d.%d.%d.%d\n", 
	    xn->handle.a, xn->handle.b, xn->handle.c, xn->handle.d);
    printf ("\tattr: %svalid\n", 
	    XFS_TOKEN_GOT(xn, XFS_ATTR_VALID) ? "": "in");
    printf ("\tdata: %svalid\n", 
	    XFS_TOKEN_GOT(xn, XFS_DATA_VALID) ? "": "in");
    printf ("\tflags: 0x%x\n", xn->flags);
}
@


1.1
log
@Initial revision
@
text
@d47 1
a47 1
RCSID("$Id: xfs_vnodeops-common.c,v 1.6 2002/06/07 04:10:32 hin Exp $");
@


1.1.1.1
log
@Import OpenBSD 3.3 source repository from CTM 3132 the first time
This opens an OpenBSD-mirabile (aka MirBSD) repository.

### MirBSD is:
# Copyright (c) 1982-2003 by Thorsten "mirabile" Glaser <x86@@ePost.de>
# Copyright © 1968-2003  The authors of And contributors to UNIX®, the
#       C Language, BSD/Berkeley Unix; 386BSD, NetBSD 1.1 and OpenBSD.
#
# Anyone who obtained a copy of this work is hereby permitted to freely use,
# distribute, modify, merge, sublicence, give away or sell it as long as the
# authors are given due credit and the following notice is retained:
#
# This work is provided "as is", with no explicit or implicit warranty what-
# soever. Use it only at your own risk. In no event may an author or contri-
# butor be held liable for any damage, directly or indirectly, that origina-
# ted through or is caused by creation or modification of this work.

MirBSD is my private tree. MirBSD does not differ very much from OpenBSD
and intentionally tracks OpenBSD. That's why it _is_ OpenBSD, just not the
official one. It's like with DarrenBSD.

At time of this writing, no advertising for MirBSD must be done,
because the advertising clause has not yet been sorted out.

http://templeofhate.com/tglaser/MirBSD/index.php
@
text
@@


1.1.1.2
log
@Import OpenBSD source tree from CVS (anoncvs canada)
of roughly 12:00 UTC today. Bumps us to OpenBSD 3.4
and makes source/ports in sync. Hopefully.
@
text
@d2 1
a2 1
 * Copyright (c) 1995 - 2002 Kungliga Tekniska Högskolan
d35 1
a35 1
 * NNPFS operations.
d47 1
a47 1
RCSID("$arla: xfs_vnodeops-common.c,v 1.94 2003/01/27 11:58:50 lha Exp $");
d52 1
a52 1
#if __APPLE__
d56 1
a56 1
    if ((xn->flags & NNPFS_STALE) == 0)
d61 4
a64 5
	xn->flags &= ~NNPFS_STALE;
	ubc_setsize(vp, 0);
	NNPFS_TOKEN_CLEAR(xn, ~0,
			NNPFS_OPEN_MASK | NNPFS_ATTR_MASK |
			NNPFS_DATA_MASK | NNPFS_LOCK_MASK);
d70 1
a70 1
xfs_open_valid(struct vnode *vp, struct ucred *cred, d_thread_t *p,
d73 1
a73 1
    struct xfs *xfsp = NNPFS_FROM_VNODE(vp);
d77 1
a77 1
    NNPFSDEB(XDEBVFOPS, ("xfs_open_valid\n"));
d82 1
a82 1
	if (!NNPFS_TOKEN_GOT(xn, tok)) {
d85 1
a85 1
	    msg.header.opcode = NNPFS_MSG_OPEN;
d101 1
a101 1
    NNPFSDEB(XDEBVFOPS, ("xfs_open_valid: error = %d\n", error));
d107 1
a107 1
xfs_attr_valid(struct vnode *vp, struct ucred *cred, d_thread_t *p,
d110 1
a110 1
    struct xfs *xfsp = NNPFS_FROM_VNODE(vp);
d116 1
a116 1
	if (!NNPFS_TOKEN_GOT(xn, tok) || !xfs_has_pag(xn, pag)) {
d119 1
a119 1
	    msg.header.opcode = NNPFS_MSG_GETATTR;
d136 1
a136 2
xfs_data_valid(struct vnode *vp, struct ucred *cred, d_thread_t *p,
	       u_int tok, uint32_t want_offset)
d138 1
a138 1
    struct xfs *xfsp = NNPFS_FROM_VNODE(vp);
d141 2
a142 2
    uint32_t offset;
    struct xfs_message_getdata msg;
d145 12
a156 3
	offset = want_offset;
	if (NNPFS_TOKEN_GOT(xn, tok|NNPFS_ATTR_R) && offset > xn->attr.va_size) {
	    offset = xn->attr.va_size;
d158 26
a183 6
    
	NNPFSDEB(XDEBVNOPS, ("xfs_data_valid: offset: want %ld has %ld, "
			   "tokens: want %lx has %lx length: %ld\n",
			   (long) offset, (long) xn->offset,
			   (long) tok, (long) xn->tokens,
			   (long) xn->attr.va_size));
d185 4
a188 4
	if (NNPFS_TOKEN_GOT(xn, tok)) {
	    if (offset <= xn->offset || xn->attr.va_type == VDIR) {
		break;
	    }
a189 13

	msg.header.opcode = NNPFS_MSG_GETDATA;
	msg.cred.uid = cred->cr_uid;
	msg.cred.pag = xfs_get_pag(cred);
	msg.handle = xn->handle;
	msg.tokens = tok;
	msg.offset = offset;
	
	error = xfs_message_rpc(xfsp->fd, &msg.header, sizeof(msg), p);
	
	if (error == 0)
	    error = ((struct xfs_message_wakeup *) & msg)->error;
	
d192 1
d200 1
a200 1
		d_thread_t *p)
a202 1
    int ret;
d204 1
a204 1
    NNPFSDEB(XDEBVNOPS, ("xfs_open\n"));
d207 5
a211 1
	ret = xfs_open_valid(vp, cred, p, NNPFS_OPEN_NW);
d213 1
a213 1
	ret = xfs_open_valid(vp, cred, p, NNPFS_OPEN_NR);
a214 8

    /* always update the read cred */

    if (mode & FWRITE)
	xfs_update_write_cred(xn, cred);
    xfs_update_read_cred(xn, cred);

    return ret;
d221 1
a221 1
	 d_thread_t *p,
d226 5
d232 6
a237 1
    msg.header.opcode = NNPFS_MSG_PUTDATA;
d243 1
a243 1
	msg.cred.pag = NNPFS_ANONYMOUSID;
d255 1
a255 1
	xn->flags &= ~NNPFS_DATA_DIRTY;
d262 1
a262 1
		 int waitfor, d_thread_t *proc)
d264 1
a264 1
    struct xfs *xfsp = NNPFS_FROM_VNODE(vp);
d268 1
a268 1
    NNPFSDEB(XDEBVNOPS, ("xfs_fsync: %lx\n", (unsigned long)vp));
d276 1
a276 1
	printf("NNPFS PANIC WARNING! xfs_fsync called after reclaiming!\n");
d280 4
a283 3
    xfs_pushdirty(vp, cred, proc);

    if (xn->flags & NNPFS_DATA_DIRTY) {
d288 1
a288 1
	    xn->flags &= ~NNPFS_DATA_DIRTY;
d292 1
a292 1
	error = do_fsync(xfsp, xn, cred, proc, NNPFS_WRITE | NNPFS_FSYNC);
d300 1
a300 1
		 d_thread_t *proc, struct ucred *cred)
d302 1
a302 1
    struct xfs *xfsp = NNPFS_FROM_VNODE(vp);
d306 1
a306 1
    NNPFSDEB(XDEBVNOPS,
d310 2
a311 5
    if (vp->v_type == VREG)
	xfs_pushdirty(vp, cred, proc);

    if (fflag & FWRITE && xn->flags & NNPFS_DATA_DIRTY)
	error = do_fsync(xfsp, xn, cred, proc, NNPFS_WRITE);
a315 16
size_t
xfs_uio_end_length (struct uio *uio)
{
#if DIAGNOSTIC
    size_t sz = 0;
    int i;

    for (i = 0; i < uio->uio_iovcnt; i++)
	sz += uio->uio_iov[i].iov_len;
    if (sz != uio->uio_resid)
	panic("xfs_uio_end_length");
#endif
    return uio->uio_offset + uio->uio_resid;
}


d323 1
a323 1
    NNPFSDEB(XDEBVNOPS, ("xfs_read\n"));
d325 1
a325 1
    xfs_update_read_cred(VNODE_TO_XNODE(vp), cred);
d327 1
a327 9
#ifdef HAVE_FREEBSD_THREAD
    error = xfs_data_valid(vp, cred, xfs_uio_to_thread(uio), NNPFS_DATA_R,
			   xfs_uio_end_length(uio));
#else
    error = xfs_data_valid(vp, cred, xfs_uio_to_proc(uio), NNPFS_DATA_R,
			   xfs_uio_end_length(uio));
#endif

    NNPFSDEB(XDEBVNOPS, ("xfs_read: iovcnt: %d\n", uio->uio_iovcnt));
d329 3
a331 3
	NNPFSDEB(XDEBVNOPS, ("  base: %lx len: %lu\n",
			   (unsigned long)uio->uio_iov[i].iov_base,
			   (unsigned long)uio->uio_iov[i].iov_len));
a335 5
#ifdef HAVE_FREEBSD_THREAD
	xfs_vfs_readlock(t, xfs_uio_to_thread(uio));
	xfs_vop_read(t, uio, ioflag, cred, error);
	xfs_vfs_unlock(t, xfs_uio_to_thread(uio));
#else
a338 1
#endif
d341 1
a341 1
    NNPFSDEB(XDEBVNOPS, ("xfs_read offset: %lu resid: %lu\n",
d343 2
a344 2
		       (unsigned long)uio->uio_resid));
    NNPFSDEB(XDEBVNOPS, ("xfs_read error: %d\n", error));
a352 1
    struct xfs_node *xn = VNODE_TO_XNODE(vp);
d355 1
a355 3
    NNPFSDEB(XDEBVNOPS, ("xfs_write\n"));

    xfs_update_write_cred(xn, cred);
d357 1
a357 7
#ifdef HAVE_FREEBSD_THREAD
    error = xfs_data_valid(vp, cred, xfs_uio_to_thread(uiop), NNPFS_DATA_W,
			   VNODE_TO_XNODE(vp)->attr.va_size);
#else
    error = xfs_data_valid(vp, cred, xfs_uio_to_proc(uiop), NNPFS_DATA_W,
			   VNODE_TO_XNODE(vp)->attr.va_size);
#endif
d360 1
a364 6
 #ifdef HAVE_FREEBSD_THREAD
	xfs_vfs_writelock(t, xfs_uio_to_thread(uiop));
	xfs_vop_write(t, uiop, ioflag, cred, error);
	VNODE_TO_XNODE(vp)->flags |= NNPFS_DATA_DIRTY;
	xfs_vop_getattr(t, &sub_attr, cred, xfs_uio_to_thread(uiop), error2);
 #else
d367 1
a367 1
	VNODE_TO_XNODE(vp)->flags |= NNPFS_DATA_DIRTY;
a368 1
 #endif
a371 1
	    xn->attr.va_bytes = sub_attr.va_size;
a373 1
	    xn->offset = sub_attr.va_size;
a374 3
#ifdef HAVE_FREEBSD_THREAD
	xfs_vfs_unlock(t, xfs_uio_to_thread(uiop));
#else
a375 1
#endif
d383 1
a383 1
		   struct ucred *cred, d_thread_t *p)
d389 1
a389 1
    NNPFSDEB(XDEBVNOPS, ("xfs_getattr\n"));
d391 1
a391 1
    error = xfs_attr_valid(vp, cred, p, NNPFS_ATTR_R);
d399 1
a399 1
		   struct ucred *cred, d_thread_t *p)
d401 1
a401 1
    struct xfs *xfsp = NNPFS_FROM_VNODE(vp);
d405 1
a405 1
    NNPFSDEB(XDEBVNOPS, ("xfs_setattr\n"));
d407 9
a415 9
#define CHECK_NNPFSATTR(A, cast) (vap->A == cast VNOVAL || vap->A == xn->attr.A)
	if (CHECK_NNPFSATTR(va_mode,(mode_t)) &&
	    CHECK_NNPFSATTR(va_nlink,(short)) &&
	    CHECK_NNPFSATTR(va_size,(va_size_t)) &&
	    CHECK_NNPFSATTR(va_uid,(uid_t)) &&
	    CHECK_NNPFSATTR(va_gid,(gid_t)) &&
	    CHECK_NNPFSATTR(va_mtime.tv_sec,(unsigned int)) &&
	    CHECK_NNPFSATTR(va_fileid,(long)) &&
	    CHECK_NNPFSATTR(va_type,(enum vtype)))
d417 1
a417 1
#undef CHECK_NNPFSATTR
d419 1
a419 1
    if (NNPFS_TOKEN_GOT(xn, NNPFS_ATTR_W)) {
d421 1
a421 1
	VNODE_TO_XNODE(vp)->flags |= NNPFS_ATTR_DIRTY;
d427 1
a427 1
	msg.header.opcode = NNPFS_MSG_PUTATTR;
d433 1
a433 1
	    msg.cred.pag = NNPFS_ANONYMOUSID;
d437 1
a437 1
	if (NNPFS_TOKEN_GOT(xn, NNPFS_DATA_R)) {
a443 1
		/* XXX needed ? */
d454 1
a454 1
	NNPFS_TOKEN_CLEAR(xn, NNPFS_ATTR_VALID, NNPFS_ATTR_MASK);
d470 1
a470 1
	if ((rights & NNPFS_RIGHT_R) == 0)
d473 1
a473 1
	if ((rights & NNPFS_RIGHT_W) == 0)
d476 1
a476 1
	if ((rights & NNPFS_RIGHT_X) == 0)
d483 1
a483 1
		  d_thread_t *p)
d488 1
a488 1
    NNPFSDEB(XDEBVNOPS, ("xfs_access mode = 0%o\n", mode));
d490 1
a490 1
    error = xfs_attr_valid(vp, cred, p, NNPFS_ATTR_R);
d500 3
a502 1
	NNPFSDEB(XDEBVNOPS, ("xfs_access anonaccess failed\n"));
d514 1
a514 1
    NNPFSDEB(XDEBVNOPS, ("xfs_access(0%o) = %d\n", mode, error));
d525 1
a525 1
    struct xfs *xfsp = NNPFS_FROM_VNODE(dvp);
d528 1
a528 5
#ifdef HAVE_FREEBSD_THREAD
    d_thread_t *proc  = xfs_cnp_to_thread(cnp);
    struct ucred *cred = xfs_thread_to_cred(proc);
#else
    d_thread_t *proc  = xfs_cnp_to_proc(cnp);
a529 1
#endif
d531 1
a531 1
    NNPFSDEB(XDEBVNOPS, ("xfs_lookup_common: enter\n"));
d535 1
a535 1
    if (cnp->cn_namelen >= NNPFS_MAX_NAME)
d552 1
a552 5
	NNPFSDEB(XDEBVNOPS, ("xfs_lookup_common: dvp = %lx\n",
			   (unsigned long) dvp));
	NNPFSDEB(XDEBVNOPS, ("xfs_lookup_common: cnp = %lx, "
			   "cnp->cn_nameiop = %d\n", 
			   (unsigned long) cnp, (int)cnp->cn_nameiop));
d570 1
a570 1
	    msg.header.opcode = NNPFS_MSG_GETNODE;
d576 1
a576 1
		msg.cred.pag = NNPFS_ANONYMOUSID;
d586 1
a586 1
		NNPFSDEB(XDEBVNOPS, ("xfs_lookup: neg cache %lx (%s, %ld)\n",
d598 1
a598 1
    NNPFSDEB(XDEBVNOPS, ("xfs_lookup_common: return error = %d\n", error));
d607 1
a607 1
		  d_thread_t *p)
d609 1
a609 1
    struct xfs *xfsp = NNPFS_FROM_VNODE(dvp);
d613 1
a613 1
    NNPFSDEB(XDEBVNOPS, ("xfs_create: (%lx, %s)\n",
d618 1
a618 1
	msg.header.opcode = NNPFS_MSG_CREATE;
d620 1
a620 1
	if (strlcpy(msg.name, name, sizeof(msg.name)) >= NNPFS_MAX_NAME)
d630 1
a630 1
	    msg.cred.pag = NNPFS_ANONYMOUSID;
d653 1
a653 1
		  d_thread_t *p)
d655 1
a655 1
    struct xfs *xfsp  = NNPFS_FROM_VNODE(dvp);
d660 1
a660 1
    NNPFSDEB(XDEBVNOPS, ("xfs_remove: %s\n", name));
d662 1
a662 1
    msg.header.opcode = NNPFS_MSG_REMOVE;
d667 1
a667 1
    if (strlcpy(msg.name, name, sizeof(msg.name)) >= NNPFS_MAX_NAME)
d688 1
a688 1
		  d_thread_t *p)
d690 1
a690 1
    struct xfs *xfsp = NNPFS_FROM_VNODE(fdvp);
d693 1
a693 1
    NNPFSDEB(XDEBVNOPS, ("xfs_rename: %s %s\n", fname, tname));
d703 1
a703 1
	msg.header.opcode = NNPFS_MSG_RENAME;
d705 1
a705 1
	if (strlcpy(msg.old_name, fname, sizeof(msg.old_name)) >= NNPFS_MAX_NAME)
d708 1
a708 1
	if (strlcpy(msg.new_name, tname, sizeof(msg.new_name)) >= NNPFS_MAX_NAME)
d718 1
a718 1
    NNPFSDEB(XDEBVNOPS, ("xfs_rename: error = %d\n", error));
d728 1
a728 1
		 d_thread_t *p)
d730 1
a730 1
    struct xfs *xfsp = NNPFS_FROM_VNODE(dvp);
d734 1
a734 1
    NNPFSDEB(XDEBVNOPS, ("xfs_mkdir: %s\n", name));
d738 1
a738 1
	msg.header.opcode = NNPFS_MSG_MKDIR;
d740 1
a740 1
	if (strlcpy(msg.name, name, sizeof(msg.name)) >= NNPFS_MAX_NAME)
d748 1
a748 1
	    msg.cred.pag = NNPFS_ANONYMOUSID;
d763 1
a763 1
		 d_thread_t *p)
d765 1
a765 1
    struct xfs *xfsp  = NNPFS_FROM_VNODE(dvp);
d770 1
a770 1
    NNPFSDEB(XDEBVNOPS, ("xfs_rmdir: %s\n", name));
d772 1
a772 1
    msg.header.opcode = NNPFS_MSG_RMDIR;
d776 1
a776 1
    if (strlcpy(msg.name, name, sizeof(msg.name)) >= NNPFS_MAX_NAME)
d786 1
a786 1
    NNPFSDEB(XDEBVNOPS, ("xfs_rmdir error: %d\n", error));
d795 1
a795 1
		   d_thread_t *p,
d800 1
a800 1
    NNPFSDEB(XDEBVNOPS, ("xfs_readdir\n"));
d804 1
a804 7
#ifdef HAVE_FREEBSD_THREAD
    error = xfs_data_valid(vp, cred, xfs_uio_to_thread(uiop), NNPFS_DATA_R,
			   xfs_uio_end_length(uiop));
#else
    error = xfs_data_valid(vp, cred, xfs_uio_to_proc(uiop), NNPFS_DATA_R,
			   xfs_uio_end_length(uiop));
#endif
a807 3
#ifdef HAVE_FREEBSD_THREAD
	xfs_vfs_readlock(t, xfs_uio_to_thread(uiop));
#else
a808 1
#endif
a813 3
#ifdef HAVE_FREEBSD_THREAD
	    xfs_vop_getattr(t, &t_attr, cred, xfs_uio_to_thread(uiop), error2);
#else
a814 1
#endif
a817 3
#ifdef HAVE_FREEBSD_THREAD
	xfs_vfs_unlock(t, xfs_uio_to_thread(uiop));
#else
a818 1
#endif
d828 1
a828 1
		d_thread_t *p)
d830 1
a830 1
    struct xfs *xfsp = NNPFS_FROM_VNODE(dvp);
d836 1
a836 1
    NNPFSDEB(XDEBVNOPS, ("xfs_link: %s\n", name));
d838 1
a838 1
    msg.header.opcode = NNPFS_MSG_LINK;
d841 1
a841 1
    if (strlcpy(msg.name, name, sizeof(msg.name)) >= NNPFS_MAX_NAME)
d860 1
a860 1
    struct xfs *xfsp = NNPFS_FROM_VNODE(dvp);
d862 1
a862 5
#ifdef HAVE_FREEBSD_THREAD
    d_thread_t *proc  = xfs_cnp_to_thread(cnp);
    struct ucred *cred = xfs_thread_to_cred(proc);
#else
    d_thread_t *proc  = xfs_cnp_to_proc(cnp);
a863 1
#endif
d868 1
a868 1
    NNPFSDEB(XDEBVNOPS, ("xfs_symlink: %s\n", name));
d870 1
a870 1
    msg.header.opcode = NNPFS_MSG_SYMLINK;
d875 1
a875 1
    if (strlcpy (msg.contents, target, sizeof(msg.contents)) >= NNPFS_MAX_SYMLINK_CONTENT) {
d879 1
a879 1
    if (strlcpy(msg.name, name, sizeof(msg.name)) >= NNPFS_MAX_NAME) {
d896 1
a896 1
    NNPFSDEB(XDEBVNOPS, ("xfs_readlink\n"));
d898 1
a898 7
#ifdef HAVE_FREEBSD_THREAD
    error = xfs_data_valid(vp, cred, xfs_uio_to_thread(uiop), NNPFS_DATA_R,
			   xfs_uio_end_length(uiop));
#else
    error = xfs_data_valid(vp, cred, xfs_uio_to_proc(uiop), NNPFS_DATA_R,
			   xfs_uio_end_length(uiop));
#endif
a901 5
#ifdef HAVE_FREEBSD_THREAD
	xfs_vfs_readlock(t, xfs_uio_to_thread(uiop));
	xfs_vop_read(t, uiop, 0, cred, error);
	xfs_vfs_unlock(t, xfs_uio_to_thread(uiop));
#else
a904 1
#endif
d910 1
a910 1
xfs_inactive_common(struct vnode *vp, d_thread_t *p)
d915 1
a915 1
    NNPFSDEB(XDEBVNOPS, ("xfs_inactive, %lx\n",
d924 1
a924 1
	NNPFSDEB(XDEBVNOPS, ("xfs_inactive: clean node\n"));
d928 1
a928 4
    /* xn->wr_cred not set -> NOCRED */

    if (vp->v_type == VREG)
	xfs_pushdirty(vp, xn->wr_cred, p);
d930 1
a930 1
    error = xfs_fsync_common(vp, xn->wr_cred, /* XXX */ 0, p);
d933 1
a933 1
	xn->flags &= ~NNPFS_DATA_DIRTY;
d936 2
d939 3
a941 6
    if (!NNPFS_TOKEN_GOT(xn, NNPFS_ATTR_R | NNPFS_ATTR_W)
	|| (xn->flags & NNPFS_STALE) == NNPFS_STALE)
    {
#ifndef __osf__
	xfs_vfs_unlock(vp, p);
        NNPFSDEB(XDEBVNOPS, ("xfs_inactive: vrecycle\n"));
d943 5
a947 7
#else /* __osf__ */
	NNPFSDEB(XDEBVNOPS, ("xfs_inactive: vp = %lx vp->v_usecount= %d\n",
			     (unsigned long)vp, vp?vp->v_usecount:0));
#endif /* __osf__ */
    } else {
#ifndef __osf__
	xfs_vfs_unlock(vp, p);
d949 1
a949 2
	xn->flags &= ~NNPFS_STALE;
    }
d951 1
a951 1
    NNPFSDEB(XDEBVNOPS, ("return: xfs_inactive\n"));
d960 1
a960 1
    struct xfs *xfsp = NNPFS_FROM_VNODE(vp);
d963 1
a963 1
    NNPFSDEB(XDEBVNOPS, ("xfs_reclaim: %lx\n",
d966 1
a966 1
    NNPFS_TOKEN_CLEAR(xn,
d968 2
a969 2
		    NNPFS_OPEN_MASK | NNPFS_ATTR_MASK |
		    NNPFS_DATA_MASK | NNPFS_LOCK_MASK);
d976 1
a976 3
    xfs_remove_node(&xfsp->nodehead, xn);

    msg.header.opcode = NNPFS_MSG_INACTIVENODE;
d978 1
a978 1
    msg.flag   = NNPFS_NOREFS | NNPFS_DELETE;
d998 1
a998 1
    struct xfs *xfsp = NNPFS_FROM_VNODE(dvp);
d1002 1
a1002 1
    NNPFSDEB(XDEBVNOPS, ("xfs_advlock\n"));
d1006 1
a1006 1
	msg.header.opcode = NNPFS_MSG_ADVLOCK;
d1016 1
a1016 1
	    msg.cred.pag = NNPFS_ANONYMOUSID;
d1049 1
a1049 1
	    NNPFS_TOKEN_GOT(xn, NNPFS_ATTR_VALID) ? "": "in");
d1051 1
a1051 1
	    NNPFS_TOKEN_GOT(xn, NNPFS_DATA_VALID) ? "": "in");
a1052 1
    printf ("\toffset: %d\n", xn->offset);
@

