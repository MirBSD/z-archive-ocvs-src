head	1.1;
branch	1.1.1;
access;
symbols
	tg-mergetmp-mirosx-1:1.1.1.2
	tg-mergefixes-1-branch:1.1.1.2.0.8
	tg-mergefixes-1-base:1.1.1.2
	MIROS_X:1.1.1.2.0.6
	MIROS_X_BASE:1.1.1.2
	tg-mergetmp-3:1.1.1.2
	MIRBSD_XP_MIRPPC:1.1.1.2.0.4
	MIRBSD_XP_SPARC_BASE:1.1.1.2
	MIRBSD_XP_SPARC:1.1.1.2.0.2
	MIRBSD_7quater:1.1.1.1
	cvs-200405160640:1.1.1.2
	cvs-200401271800:1.1.1.2
	cvs-200401261630:1.1.1.2
	cvs-200401021645:1.1.1.2
	MIRBSD_7_ALPHA:1.1.1.1.0.6
	MIRBSD_7:1.1.1.1.0.4
	cvs-200312222040:1.1.1.2
	MIRBSD_7ter:1.1.1.1
	MIRBSD_7_DEV:1.1.1.1.0.2
	cvs-200310020700:1.1.1.1
	cvs-200309271030:1.1.1.1
	cvs-200309261655:1.1.1.1
	cvs-200309251530:1.1.1.1
	cvs-200308302005:1.1.1.1
	cvs-200308171200:1.1.1.1
	ctm-3496:1.1.1.1
	ctm-3449:1.1.1.1
	ctm-3437:1.1.1.1
	cvs-200307191805:1.1.1.1
	ctm-3425:1.1.1.1
	cvs-200307091500:1.1.1.1
	cvs-200307072125:1.1.1.1
	ctm-3389:1.1.1.1
	cvs-200307021520:1.1.1.1
	cvs-200306291430:1.1.1.1
	ctm-3341:1.1.1.1
	MIRBSD_5:1.1.1.1
	cvs-200306082100:1.1.1.1
	ctm-3316:1.1.1.1
	ctm-3272:1.1.1.1
	cvs-200305131745:1.1.1.1
	ctm-3264:1.1.1.1
	cvs-200305071630:1.1.1.1
	ctm-3255:1.1.1.1
	ctm-3229:1.1.1.1
	MIRBSD_4:1.1.1.1
	ctm-3203:1.1.1.1
	cvs-20030410-1130:1.1.1.1
	ctm-3155:1.1.1.1
	ctm-3132:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.1
date	2003.03.22.17.51.03;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.03.22.17.51.03;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2003.12.22.21.02.03;	author tg;	state Stab;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@/*	$OpenBSD: tc921x.c,v 1.1 2002/04/25 04:56:59 mickey Exp $	*/

/*
 * Copyright (c) 2001, 2002 Vladimir Popov <jumbo@@narod.ru>.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
/*
 * Toshiba's High Speed PLL for DTS
 *   http://www.chipbook.co.kr/pdf/ic/toshiba/TC9216.pdf
 *
 * TC9216P, TC9217P, TC9217F are a high speed PLL-LSI with built-in 2 modulus
 * prescaler. Each function is controlled through 3 serial bus lines and high
 * performance digital tuning system can be constitued.
 *
 * Each function is controlled by the data setting to a pair of 24-bit
 * registers. Each data of these registers is exchanged with controller side
 * by 3 serial lines of DATA, CLOCK and PERIOD.
 *
 * 8 address bits and 24 data bits, total 32 bits, are transferred thru
 * serial port.
 *
 * Input data is latched to the first and second input registers at the fall
 * of PERIOD signal and each function is activated.
 *
 * Each output data is latched to output register in parallel at the fall
 * timing of the 9th of CLOCK signal and can be received serially over the
 * DATA line. Serial data of DATA, CLOCK and PERIOD is synchronized with
 * crystal oscillation clock and tacken into the internal circuit of LSI.
 * Thus, if crystal oscillator is stopped, serial data can not be input.
 */

#include <sys/param.h>
#include <sys/radioio.h>

#include <dev/ic/tc921x.h>

#define PL_CL_DL(c)	((0 << c->period) | (0 << c->clock) | (0 << c->data))
#define PL_CL_DH(c)	((0 << c->period) | (0 << c->clock) | (1 << c->data))
#define PL_CH_DL(c)	((0 << c->period) | (1 << c->clock) | (0 << c->data))
#define PL_CH_DH(c)	((0 << c->period) | (1 << c->clock) | (1 << c->data))

#define PH_CL_DL(c)	((1 << c->period) | (0 << c->clock) | (0 << c->data))
#define PH_CL_DH(c)	((1 << c->period) | (0 << c->clock) | (1 << c->data))
#define PH_CH_DL(c)	((1 << c->period) | (1 << c->clock) | (0 << c->data))
#define PH_CH_DH(c)	((1 << c->period) | (1 << c->clock) | (1 << c->data))

#define PERIOD_LOW	0
#define PERIOD_HIGH	1

static void __tc921x_write_burst(unsigned int, u_int32_t, struct tc921x_t *, int);
static u_int32_t __tc921x_read_burst(unsigned int, struct tc921x_t *);

u_int32_t
tc921x_encode_freq(u_int32_t freq) {
	/* Normalize incoming frequency */
	if (freq < MIN_FM_FREQ)
		freq = MIN_FM_FREQ;
	if (freq > MAX_FM_FREQ)
		freq = MAX_FM_FREQ;

	return (freq + IF_FREQ)/10;
}

u_int32_t
tc921x_decode_freq(u_int32_t reg) {
	return (reg & TC921X_D0_FREQ_DIVIDER) * 10 - IF_FREQ;
}

u_int32_t
tc921x_read_addr(struct tc921x_t *c, u_int8_t addr) {
	u_int32_t ret;

	/* Finish previous transmission - PERIOD HIGH, CLOCK HIGH, DATA HIGH */
	bus_space_write_1(c->iot, c->ioh, c->offset, PH_CH_DH(c));
	/* Start transmission - PERIOD LOW, CLOCK HIGH, DATA HIGH */
	bus_space_write_1(c->iot, c->ioh, c->offset, PL_CH_DH(c));

	/*
	 * Period must be low when the register address transmission starts.
	 * Period must be high when the register data transmission starts.
	 * Do the switch in the middle of the address transmission.
	 */
	__tc921x_write_burst(4, addr, c, PERIOD_LOW);
	__tc921x_write_burst(4, addr >> 4, c, PERIOD_HIGH);

	/* Reading data from the register */
	ret = __tc921x_read_burst(TC921X_REGISTER_LENGTH, c);

	/* End of transmission - PERIOD goes LOW then HIGH */
	bus_space_write_1(c->iot, c->ioh, c->offset, PL_CH_DH(c));
	bus_space_write_1(c->iot, c->ioh, c->offset, PH_CH_DH(c));

	return ret;
}

void
tc921x_write_addr(struct tc921x_t *c, u_int8_t addr, u_int32_t reg) {
	/* Finish previous transmission - PERIOD HIGH, CLOCK HIGH, DATA HIGH */
	bus_space_write_1(c->iot, c->ioh, c->offset, PH_CH_DH(c));
	/* Start transmission - PERIOD LOW, CLOCK HIGH, DATA HIGH */
	bus_space_write_1(c->iot, c->ioh, c->offset, PL_CH_DH(c));

	/*
	 * Period must be low when the register address transmission starts.
	 * Period must be high when the register data transmission starts.
	 * Do the switch in the middle of the address transmission.
	 */
	__tc921x_write_burst(4, addr, c, PERIOD_LOW);
	__tc921x_write_burst(4, addr >> 4, c, PERIOD_HIGH);

	/* Writing data to the register */
	__tc921x_write_burst(TC921X_REGISTER_LENGTH, reg, c, 1);

	/* End of transmission - PERIOD goes LOW then HIGH */
	bus_space_write_1(c->iot, c->ioh, c->offset, PL_CH_DH(c));
	bus_space_write_1(c->iot, c->ioh, c->offset, PH_CH_DH(c));
}

static void
__tc921x_write_burst(unsigned int length, u_int32_t data, struct tc921x_t *c, int p) {
	int i;
	u_int8_t cldh, chdh, cldl, chdl;

	cldh = p == PERIOD_LOW ? PL_CL_DH(c) : PH_CL_DH(c);
	chdh = p == PERIOD_LOW ? PL_CH_DH(c) : PH_CH_DH(c);
	cldl = p == PERIOD_LOW ? PL_CL_DL(c) : PH_CL_DL(c);
	chdl = p == PERIOD_LOW ? PL_CH_DL(c) : PH_CH_DL(c);

	for (i = 0; i < length; i++)
		if (data & (1 << i)) {
			bus_space_write_1(c->iot, c->ioh, c->offset, cldh);
			bus_space_write_1(c->iot, c->ioh, c->offset, chdh);
		} else {
			bus_space_write_1(c->iot, c->ioh, c->offset, cldl);
			bus_space_write_1(c->iot, c->ioh, c->offset, chdl);
		}
}

static u_int32_t
__tc921x_read_burst(unsigned int length, struct tc921x_t *c) {
	unsigned int i;
	u_int32_t ret = 0ul;

#define DATA_ON	(1 << c->data)

	for (i = 0; i < length; i++) {
		bus_space_write_1(c->iot, c->ioh, c->offset, PH_CL_DH(c));
		bus_space_write_1(c->iot, c->ioh, c->offset, PH_CH_DH(c));
		ret |= bus_space_read_1(c->iot, c->ioh, c->offset) & DATA_ON ?
			(1 << i) : (0 << i);
	}

	return ret;
}
@


1.1.1.1
log
@Import OpenBSD 3.3 source repository from CTM 3132 the first time
This opens an OpenBSD-mirabile (aka MirBSD) repository.

### MirBSD is:
# Copyright (c) 1982-2003 by Thorsten "mirabile" Glaser <x86@@ePost.de>
# Copyright © 1968-2003  The authors of And contributors to UNIX®, the
#       C Language, BSD/Berkeley Unix; 386BSD, NetBSD 1.1 and OpenBSD.
#
# Anyone who obtained a copy of this work is hereby permitted to freely use,
# distribute, modify, merge, sublicence, give away or sell it as long as the
# authors are given due credit and the following notice is retained:
#
# This work is provided "as is", with no explicit or implicit warranty what-
# soever. Use it only at your own risk. In no event may an author or contri-
# butor be held liable for any damage, directly or indirectly, that origina-
# ted through or is caused by creation or modification of this work.

MirBSD is my private tree. MirBSD does not differ very much from OpenBSD
and intentionally tracks OpenBSD. That's why it _is_ OpenBSD, just not the
official one. It's like with DarrenBSD.

At time of this writing, no advertising for MirBSD must be done,
because the advertising clause has not yet been sorted out.

http://templeofhate.com/tglaser/MirBSD/index.php
@
text
@@


1.1.1.2
log
@Time to import OpenBSD once again. Expect breakage.
@
text
@d1 1
a1 1
/*	$OpenBSD: tc921x.c,v 1.2 2003/10/21 18:58:49 jmc Exp $	*/
d32 1
a32 1
 * performance digital tuning system can be constituted.
@

