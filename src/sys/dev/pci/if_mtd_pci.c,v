head	1.1;
branch	1.1.1;
access;
symbols
	tg-mergetmp-mirosx-1:1.1.1.3
	tg-mergefixes-1-branch:1.1.1.3.0.14
	tg-mergefixes-1-base:1.1.1.3
	MIROS_X:1.1.1.3.0.12
	MIROS_X_BASE:1.1.1.3
	tg-mergetmp-3:1.1.1.3
	MIRBSD_XP_MIRPPC:1.1.1.3.0.10
	MIRBSD_XP_SPARC_BASE:1.1.1.3
	MIRBSD_XP_SPARC:1.1.1.3.0.8
	MIRBSD_7quater:1.1.1.3
	cvs-200405160640:1.1.1.3
	cvs-200401271800:1.1.1.3
	cvs-200401261630:1.1.1.3
	cvs-200401021645:1.1.1.3
	MIRBSD_7_ALPHA:1.1.1.3.0.6
	MIRBSD_7:1.1.1.3.0.4
	cvs-200312222040:1.1.1.3
	MIRBSD_7ter:1.1.1.3
	MIRBSD_7_DEV:1.1.1.3.0.2
	cvs-200310020700:1.1.1.3
	cvs-200309271030:1.1.1.2
	cvs-200309261655:1.1.1.2
	cvs-200309252100:1.1.1.1
	cvs-200309251530:1.1.1.1
	cvs-200308302005:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.1
date	2003.08.30.23.23.15;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.08.30.23.23.15;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2003.09.26.17.09.24;	author tg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2003.10.02.07.41.56;	author tg;	state Stab;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@/*	$OpenBSD: if_mtd_pci.c,v 1.5 2003/08/19 12:25:52 mickey Exp $	*/

/*
 * Copyright (c) 2003 Oleg Safiullin
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice unmodified, this list of conditions, and the following
 *    disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 */

#include <sys/param.h>
#include <sys/device.h>
#include <sys/systm.h>
#include <sys/socket.h>

#include <net/if.h>
#include <net/if_media.h>

#ifdef INET
#include <netinet/in.h>
#include <netinet/if_ether.h>
#endif

#include <machine/bus.h>

#include <dev/mii/miivar.h>

#include <dev/pci/pcidevs.h>
#include <dev/pci/pcireg.h>
#include <dev/pci/pcivar.h>

#include <dev/ic/mtd803reg.h>
#include <dev/ic/mtd803var.h>

static int mtd_pci_match(struct device *, void *, void *);
static void mtd_pci_attach(struct device *, struct device *, void *);

struct cfattach mtd_pci_ca = {
	sizeof(struct mtd_softc), mtd_pci_match, mtd_pci_attach
};

const static struct pci_matchid mtd_pci_devices[] = {
	{ PCI_VENDOR_MYSON, PCI_PRODUCT_MYSON_MTD803 },
};

static int
mtd_pci_match(struct device *parent, void *match, void *aux)
{
	return (pci_matchbyid((struct pci_attach_args *)aux, mtd_pci_devices,
	    sizeof(mtd_pci_devices) / sizeof(mtd_pci_devices[0])));
}

static void
mtd_pci_attach(struct device *parent, struct device *self, void *aux)
{
	struct mtd_softc *sc = (void *)self;
	struct pci_attach_args *pa = aux;
	pci_intr_handle_t ih;
	const char *intrstr = NULL;
	bus_size_t iosize;

#ifndef MTD_USE_IO
	if (pci_mapreg_map(pa, MTD_PCI_LOMEM, PCI_MAPREG_TYPE_MEM, 0,
	    &sc->bus_tag, &sc->bus_handle, NULL, &iosize, 0)) {
		printf(": can't map mem space\n");
		return;
	}
#else	/* MTD_USE_IO */
	if (pci_mapreg_map(pa, MTD_PCI_LOIO, PCI_MAPREG_TYPE_IO, 0,
	    &sc->bus_tag, &sc->bus_handle, NULL, &iosize, 0)) {
		printf(": can't map io space\n");
		return;
	}
#endif	/* MTD_USE_IO */

	/*
	 * Allocate our interrupt.
	 */
	if (pci_intr_map(pa, &ih)) {
		printf(": couldn't map interrupt\n");
		bus_space_unmap(sc->bus_tag, sc->bus_handle, iosize);
		return;
	}

	intrstr = pci_intr_string(pa->pa_pc, ih);
	if (pci_intr_establish(pa->pa_pc, ih, IPL_NET, mtd_irq_h, sc,
	    self->dv_xname) == NULL) {
		printf(": couldn't establish interrupt");
		if (intrstr != NULL)
			printf(" at %s", intrstr);
		printf("\n");
		bus_space_unmap(sc->bus_tag, sc->bus_handle, iosize);
		return;
	}
	printf(": %s", intrstr);

	sc->dma_tag = pa->pa_dmat;
	mtd_config(sc);
}
@


1.1.1.1
log
@Synchronize with OpenBSD 3.4-beta
@
text
@@


1.1.1.2
log
@Import some pieces of OpenBSD changes I unbedingtly wanted to have
@
text
@d1 1
a1 1
/*	$OpenBSD: if_mtd_pci.c,v 1.6 2003/09/25 22:06:00 mickey Exp $	*/
d4 1
a4 1
 * Copyright (c) 2003 Oleg Safiullin <form@@pdp11.org.ru>
d52 2
a53 2
#include <dev/ic/mtd8xxreg.h>
#include <dev/ic/mtd8xxvar.h>
a57 1

a62 1
	{ PCI_VENDOR_MYSON, PCI_PRODUCT_MYSON_MTD800 },
a63 1
	{ PCI_VENDOR_MYSON, PCI_PRODUCT_MYSON_MTD891 },
a65 1

a72 1

d84 1
a84 1
	    &sc->sc_bust, &sc->sc_bush, NULL, &iosize, 0)) {
d90 1
a90 1
	    &sc->sc_bust, &sc->sc_bush, NULL, &iosize, 0)) {
d101 1
a101 1
		bus_space_unmap(sc->sc_bust, sc->sc_bush, iosize);
d106 1
a106 1
	if (pci_intr_establish(pa->pa_pc, ih, IPL_NET, mtd_intr, sc,
d112 1
a112 1
		bus_space_unmap(sc->sc_bust, sc->sc_bush, iosize);
d117 2
a118 2
	sc->sc_dmat = pa->pa_dmat;
	mtd_attach(sc);
@


1.1.1.3
log
@Import OpenBSD source tree again, with critical bug fixes
(OpenSSL, bc, dc, sensorsd, pf, ...)
@
text
@d1 1
a1 1
/*	$OpenBSD: if_mtd_pci.c,v 1.9 2003/09/29 10:05:07 miod Exp $	*/
a84 1
	u_int32_t command;
d87 5
a91 7
	sc->sc_devid = PCI_PRODUCT(pa->pa_id);
	command = pci_conf_read(pa->pa_pc, pa->pa_tag, PCI_COMMAND_STATUS_REG);
	command |= PCI_COMMAND_MASTER_ENABLE;
	if (sc->sc_devid == PCI_PRODUCT_MYSON_MTD800 &&
	    pci_conf_read(pa->pa_pc, pa->pa_tag, MTD_PCI_LOIO) & 0x300) {
		pa->pa_flags &= ~PCI_FLAGS_IO_ENABLED;
		command &= ~PCI_COMMAND_IO_ENABLE;
d93 5
a97 15
	pci_conf_write(pa->pa_pc, pa->pa_tag, PCI_COMMAND_STATUS_REG, command);

	command = pci_conf_read(pa->pa_pc, pa->pa_tag, PCI_COMMAND_STATUS_REG);
	if (command & PCI_COMMAND_MEM_ENABLE) {
		if (pci_mapreg_map(pa, MTD_PCI_LOMEM, PCI_MAPREG_TYPE_MEM, 0,
		    &sc->sc_bust, &sc->sc_bush, NULL, &iosize, 0)) {
			printf(": can't map mem space\n");
			return;
		}
	} else {
		if (pci_mapreg_map(pa, MTD_PCI_LOIO, PCI_MAPREG_TYPE_IO, 0,
		    &sc->sc_bust, &sc->sc_bush, NULL, &iosize, 0)) {
			printf(": can't map io space\n");
			return;
		}
d99 1
@


