head	1.1;
branch	1.1.1;
access;
symbols
	tg-mergetmp-mirosx-1:1.1.1.2
	tg-mergefixes-1-branch:1.1.1.2.0.14
	tg-mergefixes-1-base:1.1.1.2
	MIROS_X:1.1.1.2.0.12
	MIROS_X_BASE:1.1.1.2
	tg-mergetmp-3:1.1.1.2
	MIRBSD_XP_MIRPPC:1.1.1.2.0.10
	MIRBSD_XP_SPARC_BASE:1.1.1.2
	MIRBSD_XP_SPARC:1.1.1.2.0.8
	MIRBSD_7quater:1.1.1.2
	cvs-200405160640:1.1.1.2
	cvs-200401271800:1.1.1.2
	cvs-200401261630:1.1.1.2
	cvs-200401021645:1.1.1.2
	MIRBSD_7_ALPHA:1.1.1.2.0.6
	MIRBSD_7:1.1.1.2.0.4
	cvs-200312222040:1.1.1.2
	MIRBSD_7ter:1.1.1.2
	MIRBSD_7_DEV:1.1.1.2.0.2
	cvs-200310020700:1.1.1.2
	cvs-200309271030:1.1.1.2
	cvs-200309261655:1.1.1.2
	cvs-200309251530:1.1.1.2
	cvs-200308302005:1.1.1.2
	cvs-200308171200:1.1.1.2
	ctm-3496:1.1.1.2
	ctm-3449:1.1.1.2
	ctm-3437:1.1.1.2
	cvs-200307191805:1.1.1.2
	ctm-3425:1.1.1.2
	cvs-200307091500:1.1.1.2
	cvs-200307072125:1.1.1.2
	ctm-3389:1.1.1.2
	cvs-200307021520:1.1.1.2
	cvs-200306291430:1.1.1.2
	ctm-3341:1.1.1.1
	MIRBSD_5:1.1.1.1
	cvs-200306082100:1.1.1.1
	ctm-3316:1.1.1.1
	ctm-3272:1.1.1.1
	cvs-200305131745:1.1.1.1
	ctm-3264:1.1.1.1
	cvs-200305071630:1.1.1.1
	ctm-3255:1.1.1.1
	ctm-3229:1.1.1.1
	MIRBSD_4:1.1.1.1
	ctm-3203:1.1.1.1
	cvs-20030410-1130:1.1.1.1
	ctm-3155:1.1.1.1
	ctm-3132:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.1
date	2003.03.22.17.50.47;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.03.22.17.50.47;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2003.06.29.17.32.01;	author tg;	state Stab;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@/*	$OpenBSD: auconv.c,v 1.5 2002/05/06 02:34:57 nate Exp $ */
/*	$NetBSD: auconv.c,v 1.3 1999/11/01 18:12:19 augustss Exp $	*/

/*
 * Copyright (c) 1996 The NetBSD Foundation, Inc.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the Computer Systems
 *	Engineering Group at Lawrence Berkeley Laboratory.
 * 4. Neither the name of the University nor of the Laboratory may be used
 *    to endorse or promote products derived from this software without
 *    specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 */

#include <sys/types.h>
#include <sys/audioio.h>
#include <dev/auconv.h>

void
change_sign8(v, p, cc)
	void *v;
	u_char *p;
	int cc;
{
	while (--cc >= 0) {
		*p ^= 0x80;
		++p;
	}
}

void
change_sign16_le(v, p, cc)
	void *v;
	u_char *p;
	int cc;
{
	while ((cc -= 2) >= 0) {
		p[1] ^= 0x80;
		p += 2;
	}
}

void
change_sign16_be(v, p, cc)
	void *v;
	u_char *p;
	int cc;
{
	while ((cc -= 2) >= 0) {
		p[0] ^= 0x80;
		p += 2;
	}
}

void
swap_bytes(v, p, cc)
	void *v;
	u_char *p;
	int cc;
{
	u_char t;

	while ((cc -= 2) >= 0) {
		t = p[0];
		p[0] = p[1];
		p[1] = t;
		p += 2;
	}
}

void
swap_bytes_change_sign16_le(v, p, cc)
	void *v;
	u_char *p;
	int cc;
{
	u_char t;

	while ((cc -= 2) >= 0) {
		t = p[1];
		p[1] = p[0] ^ 0x80;
		p[0] = t;
		p += 2;
	}
}

void
swap_bytes_change_sign16_be(v, p, cc)
	void *v;
	u_char *p;
	int cc;
{
	u_char t;

	while ((cc -= 2) >= 0) {
		t = p[0];
		p[0] = p[1] ^ 0x80;
		p[1] = t;
		p += 2;
	}
}

void
change_sign16_swap_bytes_le(v, p, cc)
	void *v;
	u_char *p;
	int cc;
{
	swap_bytes_change_sign16_be(v, p, cc);
}

void
change_sign16_swap_bytes_be(v, p, cc)
	void *v;
	u_char *p;
	int cc;
{
	swap_bytes_change_sign16_le(v, p, cc);
}

void
linear8_to_linear16_le(v, p, cc)
	void *v;
	u_char *p;
	int cc;
{
	u_char *q = p;

	p += cc;
	q += cc * 2;
	while (--cc >= 0) {
		q -= 2;
		q[1] = *--p;
		q[0] = 0;
	}
}

void
linear8_to_linear16_be(v, p, cc)
	void *v;
	u_char *p;
	int cc;
{
	u_char *q = p;

	p += cc;
	q += cc * 2;
	while (--cc >= 0) {
		q -= 2;
		q[0] = *--p;
		q[1] = 0;
	}
}

void
linear16_to_linear8_le(v, p, cc)
	void *v;
	u_char *p;
	int cc;
{
	u_char *q = p;

	while ((cc -= 2) >= 0) {
		*q++ = p[1];
		p += 2;
	}
}

void
linear16_to_linear8_be(v, p, cc)
	void *v;
	u_char *p;
	int cc;
{
	u_char *q = p;

	while ((cc -= 2) >= 0) {
		*q++ = p[0];
		p += 2;
	}
}

void
ulinear8_to_linear16_le(v, p, cc)
	void *v;
	u_char *p;
	int cc;
{
	u_char *q = p;

	p += cc;
	q += cc * 2;
	while (--cc >= 0) {
		q -= 2;
		q[1] = (*--p) ^ 0x80;
		q[0] = 0;
	}
}

void
ulinear8_to_linear16_be(v, p, cc)
	void *v;
	u_char *p;
	int cc;
{
	u_char *q = p;

	p += cc;
	q += cc * 2;
	while (--cc >= 0) {
		q -= 2;
		q[0] = (*--p) ^ 0x80;
		q[1] = 0;
	}
}

void
linear16_to_ulinear8_le(void *v, u_char *p, int cc)
{
	u_char *q = p;

	while (--cc >= 0) {
		*q++ = p[1] ^ 0x80;
		p += 2;
	}
}

void
linear16_to_ulinear8_be(void *v, u_char *p, int cc)
{
	u_char *q = p;

	while (--cc >= 0) {
		*q++ = p[0] ^ 0x80;
		p += 2;
	}
}

/*
 * just expand mono to stereo, no other conversions
 */
void
noswap_bytes_mts(v, p, cc)
	void *v;
	u_char *p;
	int cc;
{
	u_char *q = p;

	p += cc;
	q += cc * 2;
	while ((cc -= 2) >= 0) {
		q -= 4;
		q[1] = q[3] = *--p;
		q[0] = q[2] = *--p;
	}
}

/*
 * same as swap_bytes(), just expand mono to stereo
 */
void
swap_bytes_mts(v, p, cc)
	void *v;
	u_char *p;
	int cc;
{
	u_char *q = p;

	p += cc;
	q += cc * 2;
	while ((cc -= 2) >= 0) {
		q -= 4;
		q[0] = q[2] = *--p;
		q[1] = q[3] = *--p;
	}
}

/*
 * same as linear8_to_linear16_le(), plus expand mono to stereo
 */
void
linear8_to_linear16_le_mts(v, p, cc)
	void *v;
	u_char *p;
	int cc;
{
	u_char *q = p;

	p += cc;
	q += cc * 4;
	while (--cc >= 0) {
		q -= 4;
		q[1] = q[3] = *--p;
		q[0] = q[2] = 0;
	}
}

/*
 * same as linear8_to_linear16_be(), plus expand mono to stereo
 */
void
linear8_to_linear16_be_mts(v, p, cc)
	void *v;
	u_char *p;
	int cc;
{
	u_char *q = p;

	p += cc;
	q += cc * 4;
	while (--cc >= 0) {
		q -= 4;
		q[0] = q[2] = *--p;
		q[1] = q[3] = 0;
	}
}

/*
 * same as ulinear8_to_linear16_le(), plus expand mono to stereo
 */
void
ulinear8_to_linear16_le_mts(v, p, cc)
	void *v;
	u_char *p;
	int cc;
{
	u_char *q = p;

	p += cc;
	q += cc * 4;
	while (--cc >= 0) {
		q -= 4;
		q[1] = q[3] = (*--p) ^ 0x80;
		q[0] = q[2] = 0;
	}
}

/*
 * same as ulinear8_to_linear16_be(), plus expand mono to stereo
 */
void
ulinear8_to_linear16_be_mts(v, p, cc)
	void *v;
	u_char *p;
	int cc;
{
	u_char *q = p;

	p += cc;
	q += cc * 4;
	while (--cc >= 0) {
		q -= 4;
		q[0] = q[2] = (*--p) ^ 0x80;
		q[1] = q[3] = 0;
	}
}

/*
 * same as change_sign16_le(), plus expand mono to stereo
 */
void
change_sign16_le_mts(v, p, cc)
	void *v;
	u_char *p;
	int cc;
{
	u_char *q = p;

	p += cc;
	q += cc * 2;
	while ((cc -= 2) >= 0) {
		q -= 4;
		q[1] = q[3] = (*--p) ^ 0x80;
		q[0] = q[2] = *--p;
	}
}

/*
 * same as change_sign16_be(), plus expand mono to stereo
 */
void
change_sign16_be_mts(v, p, cc)
	void *v;
	u_char *p;
	int cc;
{
	u_char *q = p;

	p += cc;
	q += cc * 2;
	while ((cc -= 2) >= 0) {
		q -= 4;
		q[0] = q[2] = (*--p) ^ 0x80;
		q[1] = q[3] = *--p;
	}
}

/*
 *  same as change_sign16_swap_bytes_le(), plus expand mono to stereo
 */
void
change_sign16_swap_bytes_le_mts(v, p, cc)
	void *v;
	u_char *p;
	int cc;
{
	change_sign16_be_mts(v, p, cc);
}

/*
 * same as change_sign16_swap_bytes_be(), plus expand mono to stereo
 */
void
change_sign16_swap_bytes_be_mts(v, p, cc)
	void *v;
	u_char *p;
	int cc;
{
	change_sign16_le_mts(v, p, cc);
}
@


1.1.1.1
log
@Import OpenBSD 3.3 source repository from CTM 3132 the first time
This opens an OpenBSD-mirabile (aka MirBSD) repository.

### MirBSD is:
# Copyright (c) 1982-2003 by Thorsten "mirabile" Glaser <x86@@ePost.de>
# Copyright © 1968-2003  The authors of And contributors to UNIX®, the
#       C Language, BSD/Berkeley Unix; 386BSD, NetBSD 1.1 and OpenBSD.
#
# Anyone who obtained a copy of this work is hereby permitted to freely use,
# distribute, modify, merge, sublicence, give away or sell it as long as the
# authors are given due credit and the following notice is retained:
#
# This work is provided "as is", with no explicit or implicit warranty what-
# soever. Use it only at your own risk. In no event may an author or contri-
# butor be held liable for any damage, directly or indirectly, that origina-
# ted through or is caused by creation or modification of this work.

MirBSD is my private tree. MirBSD does not differ very much from OpenBSD
and intentionally tracks OpenBSD. That's why it _is_ OpenBSD, just not the
official one. It's like with DarrenBSD.

At time of this writing, no advertising for MirBSD must be done,
because the advertising clause has not yet been sorted out.

http://templeofhate.com/tglaser/MirBSD/index.php
@
text
@@


1.1.1.2
log
@the previous cvs import did not finish due to 'memory fault'
sync with OpenBSD-cvs
@
text
@d1 1
a1 1
/*	$OpenBSD: auconv.c,v 1.6 2003/06/27 00:23:43 jason Exp $ */
d43 4
a46 1
change_sign8(void *v, u_char *p, int cc)
d55 4
a58 1
change_sign16_le(void *v, u_char *p, int cc)
d67 4
a70 1
change_sign16_be(void *v, u_char *p, int cc)
d79 4
a82 1
swap_bytes(void *v, u_char *p, int cc)
d95 4
a98 1
swap_bytes_change_sign16_le(void *v, u_char *p, int cc)
d111 4
a114 1
swap_bytes_change_sign16_be(void *v, u_char *p, int cc)
d127 4
a130 1
change_sign16_swap_bytes_le(void *v, u_char *p, int cc)
d136 4
a139 1
change_sign16_swap_bytes_be(void *v, u_char *p, int cc)
d145 4
a148 1
linear8_to_linear16_le(void *v, u_char *p, int cc)
d162 4
a165 1
linear8_to_linear16_be(void *v, u_char *p, int cc)
d179 4
a182 1
linear16_to_linear8_le(void *v, u_char *p, int cc)
d193 4
a196 1
linear16_to_linear8_be(void *v, u_char *p, int cc)
d207 4
a210 1
ulinear8_to_linear16_le(void *v, u_char *p, int cc)
d224 4
a227 1
ulinear8_to_linear16_be(void *v, u_char *p, int cc)
d266 4
a269 1
noswap_bytes_mts(void *v, u_char *p, int cc)
d286 4
a289 1
swap_bytes_mts(void *v, u_char *p, int cc)
d306 4
a309 1
linear8_to_linear16_le_mts(void *v, u_char *p, int cc)
d326 4
a329 1
linear8_to_linear16_be_mts(void *v, u_char *p, int cc)
d346 4
a349 1
ulinear8_to_linear16_le_mts(void *v, u_char *p, int cc)
d366 4
a369 1
ulinear8_to_linear16_be_mts(void *v, u_char *p, int cc)
d386 4
a389 1
change_sign16_le_mts(void *v, u_char *p, int cc)
d406 4
a409 1
change_sign16_be_mts(void *v, u_char *p, int cc)
d426 4
a429 1
change_sign16_swap_bytes_le_mts(void *v, u_char *p, int cc)
d438 4
a441 1
change_sign16_swap_bytes_be_mts(void *v, u_char *p, int cc)
@

