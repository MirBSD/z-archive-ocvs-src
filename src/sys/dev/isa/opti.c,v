head	1.1;
branch	1.1.1;
access;
symbols
	tg-mergetmp-mirosx-1:1.1.1.2
	tg-mergefixes-1-branch:1.1.1.2.0.14
	tg-mergefixes-1-base:1.1.1.2
	MIROS_X:1.1.1.2.0.12
	MIROS_X_BASE:1.1.1.2
	tg-mergetmp-3:1.1.1.2
	MIRBSD_XP_MIRPPC:1.1.1.2.0.10
	MIRBSD_XP_SPARC_BASE:1.1.1.2
	MIRBSD_XP_SPARC:1.1.1.2.0.8
	MIRBSD_7quater:1.1.1.2
	cvs-200405160640:1.1.1.2
	cvs-200401271800:1.1.1.2
	cvs-200401261630:1.1.1.2
	cvs-200401021645:1.1.1.2
	MIRBSD_7_ALPHA:1.1.1.2.0.6
	MIRBSD_7:1.1.1.2.0.4
	cvs-200312222040:1.1.1.2
	MIRBSD_7ter:1.1.1.2
	MIRBSD_7_DEV:1.1.1.2.0.2
	cvs-200310020700:1.1.1.2
	cvs-200309271030:1.1.1.2
	cvs-200309261655:1.1.1.2
	cvs-200309251530:1.1.1.2
	cvs-200308302005:1.1.1.2
	cvs-200308171200:1.1.1.2
	ctm-3496:1.1.1.2
	ctm-3449:1.1.1.2
	ctm-3437:1.1.1.2
	cvs-200307191805:1.1.1.2
	ctm-3425:1.1.1.2
	cvs-200307091500:1.1.1.2
	cvs-200307072125:1.1.1.2
	ctm-3389:1.1.1.2
	cvs-200307021520:1.1.1.2
	cvs-200306291430:1.1.1.2
	ctm-3341:1.1.1.2
	MIRBSD_5:1.1.1.2
	cvs-200306082100:1.1.1.2
	ctm-3316:1.1.1.2
	ctm-3272:1.1.1.1
	cvs-200305131745:1.1.1.1
	ctm-3264:1.1.1.1
	cvs-200305071630:1.1.1.1
	ctm-3255:1.1.1.1
	ctm-3229:1.1.1.1
	MIRBSD_4:1.1.1.1
	ctm-3203:1.1.1.1
	cvs-20030410-1130:1.1.1.1
	ctm-3155:1.1.1.1
	ctm-3132:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.1
date	2003.03.22.17.51.08;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.03.22.17.51.08;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2003.06.05.17.38.30;	author tg;	state Stab;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@/*	$OpenBSD: opti.c,v 1.6 2002/03/14 01:26:56 millert Exp $	*/

/*
 * Copyright (c) 1996 Michael Shalayeff
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by Michael Shalayeff.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR 
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 */

/*
 * Code to setup 82C929 chipset
 */

/* #define	OPTI_DEBUG	9 */

#include <sys/param.h>
#include <sys/types.h>
#include <sys/kernel.h>
#include <sys/conf.h>
#include <sys/device.h>

#include <machine/pio.h>

#include <i386/isa/icu.h>
#include <dev/isa/isavar.h>

#include <dev/isa/opti.h>

#ifdef OPTI_DEBUG
   int opti_debuglevel = OPTI_DEBUG;
#  define XDEBUG(level, data)	((opti_debuglevel >= level)? printf data:0)
#else
#  define XDEBUG(level, data)	/* ((opti_debuglevel >= level)? printf data:0) */
#endif

int	opti_type = OPTI_C929;	/* XXX only one card can be installed */

#define	OPTI_cd_valid_ift(i)	((i)==OPTI_SONY||(i)==OPTI_PANASONIC||\
					(i)==OPTI_MITSUMI||(i)==OPTI_IDE)

static __inline int OPTI_cd_addr(int);
static __inline int OPTI_cd_irq(int);
static __inline int OPTI_cd_drq(int);
static __inline int OPTI_snd_addr(int);
static __inline int OPTI_snd_irq(int);
static __inline int OPTI_snd_drq(int);
static __inline void opti_outb(u_short, u_char);
static __inline u_char opti_inb(u_short);
static int opti_present(void);

static __inline int
OPTI_cd_addr(a)
	int	a;
{
	switch(a) {
	case 0x320:
		return 0xc0;
	case 0x330:
		return 0x40;
	case 0x340:
		return 0x00;
	case 0x360:
		return 0x80;
	default:
		return -1;
	}
}

static __inline int
OPTI_cd_irq(i)
	int	i;
{
	switch(i) {
	case 5:
		return 0x04;
	case 7:
		return 0x08;
	case 3:
		return 0x0c;
	case 9:
		return 0x10;
	case 10:
		return 0x14;
	case 11:
		return 0x18;
	case -1:
		return 0x00;
	default:
		return -1;
	}
}

static __inline int
OPTI_cd_drq(d)
	int	d;
{
	switch(d) {
	case 3:
	case 5:
		return 0;
	case 6:
		return 1;
	case 7:
		return 2;
	default:
		return 3;
	}
}

#define	OPTI_snd_valid_ift(i)	((i)==OPTI_WSS||(i)==OPTI_SB)

static __inline int
OPTI_snd_addr(a)
	int	a;
{
	switch(a) {
	case 0x220:
		return 0x0;
	case 0x240:
		return 0x3;
	case 0x530:
		return 0x8;
	case 0xE80:
		return 0x9;
	case 0xF40:
		return 0xa;
	case 0x604:
		return 0xb;
	default:
		return -1;
	}
}

static __inline int
OPTI_snd_irq(i)
	int	i;
{
	switch(i) {
	case 5:
		return 0x04;
	case 7:
		return 0x08;
	case 3:
		return 0x0c;
	case 9:
		return 0x10;
	case 10:
		return 0x14;
	case 11:
		return 0x18;
	case -1:
		return 0x00;
	default:
		return -1;
	}
}

static __inline int
OPTI_snd_drq(d)
	int	d;
{
	switch(d) {
	case 3:
	case 5:
		return 0;
	case 6:
		return 1;
	case 7:
		return 2;
	default:
		return 3;
	}
}

static __inline void
opti_outb(port, byte)
	u_short port;
	u_char byte;
{
	outb( OPTI_PASSWD, opti_type );
	outb( port, byte );
}

static __inline u_char
opti_inb(port)
	u_short port;
{
	outb( OPTI_PASSWD, opti_type );
	return inb( port );
}

static int
opti_present()
{
	register u_char	a, b;
	int s = splhigh();

	a = opti_inb( OPTI_PASSWD );
	opti_outb( OPTI_PASSWD, 0x00 );
	b = opti_inb( OPTI_PASSWD );
	opti_outb( OPTI_PASSWD, a );

	if (b != 2) {
		opti_type = OPTI_C928;

		a = opti_inb( OPTI_PASSWD );
		opti_outb( OPTI_PASSWD, 0x00 );
		b = opti_inb( OPTI_PASSWD );
		opti_outb( OPTI_PASSWD, a );
	}

	splx(s);

	return b == 2;
}

int
opti_cd_setup(ift, addr, irq, drq)
	int	ift, addr, irq, drq;
{
	int	ret = 0;

	XDEBUG( 2, ("opti: do CD setup type=%u, addr=0x%x, irq=%d, drq=%d\n",
		    ift, addr, irq, drq));

	if( !opti_present() )
		XDEBUG( 2, ("opti: not present.\n"));
	else if( !OPTI_cd_valid_ift(ift) )
		XDEBUG( 2, ("opti: invalid CD-ROM interface type.\n"));
	else if( OPTI_cd_addr(addr) == -1)
		XDEBUG( 2, ("opti: illegal CD-ROM interface address.\n"));
	else if( OPTI_cd_irq(irq) == -1)
		XDEBUG( 2, ("opti: wrong CD-ROM irq number.\n"));
	else if( OPTI_cd_drq(drq) == -1)
		XDEBUG( 2, ("opti: bad CD_ROM drq number.\n"));
	else {
			/* so the setup */
		int s = splhigh();
		register u_char	a, b;

			/* set interface type */
		a = opti_inb( OPTI_IFTP );
		b = (opti_inb( OPTI_DATA ) & 0x20) | 3 ;
		opti_outb( OPTI_DATA,  b );
		opti_outb( OPTI_IFTP, (a & OPTI_SND_MASK) | 2 * ift );
		opti_outb( OPTI_ENBL, 0x80 );

			/* we don't need any additional setup for IDE CD-ROM */
		if( ift != OPTI_IDE )
		{
				/* set address */
			a = opti_inb( OPTI_DATA );
			opti_outb( OPTI_DATA, (a & 0x3f) |
			     (0x40 * OPTI_cd_addr(addr)) );

				/* set irq */
			if( irq != IRQUNK )
			{
				a = opti_inb( OPTI_DATA );
				opti_outb( OPTI_DATA,
					  (inb( OPTI_DATA ) & 0xe3) |
					  OPTI_cd_irq(irq) );
			}

				/* set drq */
			if( drq != DRQUNK )
			{
				a = opti_inb( OPTI_DATA );
				opti_outb( OPTI_DATA,
					  (inb( OPTI_DATA ) & 0xfc) |
					  OPTI_cd_drq(drq) );
			}
		}
		splx(s);
		DELAY(1000);
		ret = 1;
	}

	return ret;
}

int
opti_snd_setup(ift, addr, irq, drq)
	int	ift, addr, irq, drq;
{
	XDEBUG( 2, ("opti: do SND setup type=%u,addr=%x,irq=%d,drq=%d\n",
		    ift, addr, irq, drq));

	if( !opti_present() )
		XDEBUG( 2, ("opti: not present.\n"));
	else if( !OPTI_snd_valid_ift(ift) )
		XDEBUG( 2, ("opti: invalid SND interface type.\n"));
	else if( OPTI_snd_addr(addr) == -1)
		XDEBUG( 2, ("opti: illegal SND interface address.\n"));
	else if( OPTI_snd_irq(irq) == -1)
		XDEBUG( 2, ("opti: wrong SND irq number.\n"));
	else if( OPTI_snd_drq(drq) == -1)
		XDEBUG( 2, ("opti: bad SND drq number.\n"));
	else {
			/* so the setup */
		int s = splhigh();
		register u_char	a;

		if (ift == OPTI_WSS) {
			a = opti_inb(OPTI_IFTP);
			opti_outb(OPTI_IFTP, ((a & ~OPTI_SND_MASK)
				  | (OPTI_snd_addr(addr)*16)) + 1);
			opti_outb(OPTI_ENBL, 0x1a);
		}

		splx(s);
		DELAY(1000);
		return 1;
	}

	return 0;
}
@


1.1.1.1
log
@Import OpenBSD 3.3 source repository from CTM 3132 the first time
This opens an OpenBSD-mirabile (aka MirBSD) repository.

### MirBSD is:
# Copyright (c) 1982-2003 by Thorsten "mirabile" Glaser <x86@@ePost.de>
# Copyright © 1968-2003  The authors of And contributors to UNIX®, the
#       C Language, BSD/Berkeley Unix; 386BSD, NetBSD 1.1 and OpenBSD.
#
# Anyone who obtained a copy of this work is hereby permitted to freely use,
# distribute, modify, merge, sublicence, give away or sell it as long as the
# authors are given due credit and the following notice is retained:
#
# This work is provided "as is", with no explicit or implicit warranty what-
# soever. Use it only at your own risk. In no event may an author or contri-
# butor be held liable for any damage, directly or indirectly, that origina-
# ted through or is caused by creation or modification of this work.

MirBSD is my private tree. MirBSD does not differ very much from OpenBSD
and intentionally tracks OpenBSD. That's why it _is_ OpenBSD, just not the
official one. It's like with DarrenBSD.

At time of this writing, no advertising for MirBSD must be done,
because the advertising clause has not yet been sorted out.

http://templeofhate.com/tglaser/MirBSD/index.php
@
text
@@


1.1.1.2
log
@Import latest OpenBSD CVS tree by CTM in order
to sync the base system and ports tree with Them.

This includes the recent licence changes as well - by
importing the changed base and re-applying the diffs
(with cvs up -j -j) they are inherited, and we're not
bound to the removed clauses any longer.
@
text
@d1 1
a1 1
/*	$OpenBSD: opti.c,v 1.7 2003/06/02 19:24:22 mickey Exp $	*/
d15 5
@

