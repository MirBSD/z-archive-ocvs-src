head	1.1;
branch	1.1.1;
access;
symbols
	tg-mergetmp-mirosx-1:1.1.1.1
	tg-mergefixes-1-branch:1.1.1.1.0.14
	tg-mergefixes-1-base:1.1.1.1
	MIROS_X:1.1.1.1.0.12
	MIROS_X_BASE:1.1.1.1
	tg-mergetmp-3:1.1.1.1
	cvs-200411281330:1.1.1.1
	MIRBSD_XP_MIRPPC:1.1.1.1.0.10
	MIRBSD_XP_SPARC_BASE:1.1.1.1
	MIRBSD_XP_SPARC:1.1.1.1.0.8
	MIRBSD_7quater:1.1.1.1
	cvs-200405160640:1.1.1.1
	cvs-200401271800:1.1.1.1
	cvs-200401261630:1.1.1.1
	cvs-200401021645:1.1.1.1
	MIRBSD_7_ALPHA:1.1.1.1.0.6
	MIRBSD_7:1.1.1.1.0.4
	cvs-200312222040:1.1.1.1
	MIRBSD_7ter:1.1.1.1
	MIRBSD_7_DEV:1.1.1.1.0.2
	cvs-200310020700:1.1.1.1
	cvs-200309271030:1.1.1.1
	cvs-200309261655:1.1.1.1
	cvs-200309251530:1.1.1.1
	cvs-200308302005:1.1.1.1
	cvs-200308171200:1.1.1.1
	ctm-3496:1.1.1.1
	ctm-3449:1.1.1.1
	ctm-3437:1.1.1.1
	cvs-200307191805:1.1.1.1
	ctm-3425:1.1.1.1
	cvs-200307091500:1.1.1.1
	cvs-200307072125:1.1.1.1
	ctm-3389:1.1.1.1
	cvs-200307021520:1.1.1.1
	cvs-200306291430:1.1.1.1
	ctm-3341:1.1.1.1
	MIRBSD_5:1.1.1.1
	cvs-200306082100:1.1.1.1
	ctm-3316:1.1.1.1
	ctm-3272:1.1.1.1
	cvs-200305131745:1.1.1.1
	ctm-3264:1.1.1.1
	cvs-200305071630:1.1.1.1
	ctm-3255:1.1.1.1
	ctm-3229:1.1.1.1
	MIRBSD_4:1.1.1.1
	ctm-3203:1.1.1.1
	cvs-20030410-1130:1.1.1.1
	ctm-3155:1.1.1.1
	ctm-3132:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.1
date	2003.03.22.17.51.37;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.03.22.17.51.37;	author tg;	state Stab;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@/*	$OpenBSD: rf_threadstuff.h,v 1.8 2002/12/16 07:01:05 tdeval Exp $	*/
/*	$NetBSD: rf_threadstuff.h,v 1.8 2000/06/11 03:35:38 oster Exp $	*/

/*
 * Copyright (c) 1995 Carnegie-Mellon University.
 * All rights reserved.
 *
 * Author: Mark Holland, Daniel Stodolsky, Jim Zelenka
 *
 * Permission to use, copy, modify and distribute this software and
 * its documentation is hereby granted, provided that both the copyright
 * notice and this permission notice appear in all copies of the
 * software, derivative works or modified versions, and any portions
 * thereof, and that both notices appear in supporting documentation.
 *
 * CARNEGIE MELLON ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS"
 * CONDITION.  CARNEGIE MELLON DISCLAIMS ANY LIABILITY OF ANY KIND
 * FOR ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 *
 * Carnegie Mellon requests users of this software to return to
 *
 *  Software Distribution Coordinator  or  Software.Distribution@@CS.CMU.EDU
 *  School of Computer Science
 *  Carnegie Mellon University
 *  Pittsburgh PA 15213-3890
 *
 * any improvements or extensions that they make and grant Carnegie the
 * rights to redistribute these changes.
 */

/*
 * threadstuff.h -- Definitions for threads, locks, and synchronization.
 *
 * The purpose of this file is provide some illusion of portability.
 * If the functions below can be implemented with the same semantics on
 * some new system, then at least the synchronization and thread control
 * part of the code should not require modification to port to a new machine.
 * The only other place where the pthread package is explicitly used is
 * threadid.h
 *
 * This file should be included above stdio.h to get some necessary defines.
 *
 */

#ifndef	_RF__RF_THREADSTUFF_H_
#define	_RF__RF_THREADSTUFF_H_

#include "rf_types.h"
#include <sys/types.h>
#include <sys/param.h>
#ifdef	_KERNEL
#include <sys/systm.h>
#include <sys/proc.h>
#include <sys/kthread.h>
#endif

#define	rf_create_managed_mutex(a,b)					\
	_rf_create_managed_mutex(a,b,__FILE__,__LINE__)
#define	rf_create_managed_cond(a,b)					\
	_rf_create_managed_cond(a,b,__FILE__,__LINE__)
#define	rf_init_managed_threadgroup(a,b)				\
	_rf_init_managed_threadgroup(a,b,__FILE__,__LINE__)
#define	rf_init_threadgroup(a)						\
	_rf_init_threadgroup(a,__FILE__,__LINE__)
#define	rf_destroy_threadgroup(a)					\
	_rf_destroy_threadgroup(a,__FILE__,__LINE__)

int _rf_init_threadgroup(RF_ThreadGroup_t *, char *, int);
int _rf_destroy_threadgroup(RF_ThreadGroup_t *, char *, int);
int _rf_init_managed_threadgroup(RF_ShutdownList_t **, RF_ThreadGroup_t *,
    char *, int);

#include <sys/lock.h>
#define	decl_simple_lock_data(a,b)	a struct simplelock b
#define	simple_lock_addr(a)		((struct simplelock *)&(a))

typedef struct proc	*RF_Thread_t;
typedef void		*RF_ThreadArg_t;

#define	RF_DECLARE_MUTEX(_m_)		decl_simple_lock_data(,(_m_))
#define	RF_DECLARE_STATIC_MUTEX(_m_)	decl_simple_lock_data(static,(_m_))
#define	RF_DECLARE_EXTERN_MUTEX(_m_)	decl_simple_lock_data(extern,(_m_))

#define	RF_DECLARE_COND(_c_)		int _c_
#define	RF_DECLARE_STATIC_COND(_c_)	static int _c_
#define	RF_DECLARE_EXTERN_COND(_c_)	extern int _c_

#define	RF_LOCK_MUTEX(_m_)		simple_lock(&(_m_))
#define	RF_UNLOCK_MUTEX(_m_)		simple_unlock(&(_m_))

/*
 * In Net- and OpenBSD, kernel threads are simply processes that share several
 * substructures and never run in userspace.
 */
#define	RF_WAIT_COND(_c_,_m_)	do {					\
	RF_UNLOCK_MUTEX(_m_);						\
	tsleep(&_c_, PRIBIO, "rfwcond", 0);				\
	RF_LOCK_MUTEX(_m_);						\
} while (0)
#define	RF_SIGNAL_COND(_c_)	wakeup(&(_c_))
#define	RF_BROADCAST_COND(_c_)	wakeup(&(_c_))
#define	RF_CREATE_THREAD(_handle_, _func_, _arg_, _name_)		\
	kthread_create((void (*)(void *))(_func_), (void *)(_arg_),	\
	    (struct proc **)&(_handle_), _name_)

struct RF_ThreadGroup_s {
	int			 created;
	int			 running;
	int			 shutdown;
	RF_DECLARE_MUTEX	(mutex);
	RF_DECLARE_COND		(cond);
};

/*
 * Someone has started a thread in the group.
 */
#define	RF_THREADGROUP_STARTED(_g_)	do {				\
	RF_LOCK_MUTEX((_g_)->mutex);					\
	(_g_)->created++;						\
	RF_UNLOCK_MUTEX((_g_)->mutex);					\
} while (0)

/*
 * Thread announcing that it is now running.
 */
#define	RF_THREADGROUP_RUNNING(_g_)	do {				\
	RF_LOCK_MUTEX((_g_)->mutex);					\
	(_g_)->running++;						\
	RF_UNLOCK_MUTEX((_g_)->mutex);					\
	RF_SIGNAL_COND((_g_)->cond);					\
} while (0)

/*
 * Thread announcing that it is now done.
 */
#define	RF_THREADGROUP_DONE(_g_)	do {				\
	RF_LOCK_MUTEX((_g_)->mutex);					\
	(_g_)->shutdown++;						\
	RF_UNLOCK_MUTEX((_g_)->mutex);					\
	RF_SIGNAL_COND((_g_)->cond);					\
} while (0)

/*
 * Wait for all threads to start running.
 */
#define	RF_THREADGROUP_WAIT_START(_g_)	do {				\
	RF_LOCK_MUTEX((_g_)->mutex);					\
	while((_g_)->running < (_g_)->created) {			\
		RF_WAIT_COND((_g_)->cond, (_g_)->mutex);		\
	}								\
	RF_UNLOCK_MUTEX((_g_)->mutex);					\
} while (0)

/*
 * Wait for all threads to stop running.
 */
#if	!defined(__NetBSD__) && !defined(__OpenBSD__)
#define	RF_THREADGROUP_WAIT_STOP(_g_)	do {				\
	RF_LOCK_MUTEX((_g_)->mutex);					\
	RF_ASSERT((_g_)->running == (_g_)->created);			\
	while((_g_)->shutdown < (_g_)->running) {			\
		RF_WAIT_COND((_g_)->cond, (_g_)->mutex);		\
	}								\
	RF_UNLOCK_MUTEX((_g_)->mutex);					\
} while (0)
#else
 /*
  * XXX Note that we've removed the assert. That should be put back in once
  * we actually get something like a kernel thread running.
  */
#define	RF_THREADGROUP_WAIT_STOP(_g_)	do {				\
	RF_LOCK_MUTEX((_g_)->mutex);					\
	while((_g_)->shutdown < (_g_)->running) {			\
		RF_WAIT_COND((_g_)->cond, (_g_)->mutex);		\
	}								\
	RF_UNLOCK_MUTEX((_g_)->mutex);					\
} while (0)
#endif


int  rf_mutex_init(struct simplelock *);
int  rf_mutex_destroy(struct simplelock *);
int _rf_create_managed_mutex(RF_ShutdownList_t **, struct simplelock *,
	char *, int);
int _rf_create_managed_cond(RF_ShutdownList_t ** listp, int *, char *, int);

int  rf_cond_init(int *);
int  rf_cond_destroy(int *);

#endif	/* !_RF__RF_THREADSTUFF_H_ */
@


1.1.1.1
log
@Import OpenBSD 3.3 source repository from CTM 3132 the first time
This opens an OpenBSD-mirabile (aka MirBSD) repository.

### MirBSD is:
# Copyright (c) 1982-2003 by Thorsten "mirabile" Glaser <x86@@ePost.de>
# Copyright © 1968-2003  The authors of And contributors to UNIX®, the
#       C Language, BSD/Berkeley Unix; 386BSD, NetBSD 1.1 and OpenBSD.
#
# Anyone who obtained a copy of this work is hereby permitted to freely use,
# distribute, modify, merge, sublicence, give away or sell it as long as the
# authors are given due credit and the following notice is retained:
#
# This work is provided "as is", with no explicit or implicit warranty what-
# soever. Use it only at your own risk. In no event may an author or contri-
# butor be held liable for any damage, directly or indirectly, that origina-
# ted through or is caused by creation or modification of this work.

MirBSD is my private tree. MirBSD does not differ very much from OpenBSD
and intentionally tracks OpenBSD. That's why it _is_ OpenBSD, just not the
official one. It's like with DarrenBSD.

At time of this writing, no advertising for MirBSD must be done,
because the advertising clause has not yet been sorted out.

http://templeofhate.com/tglaser/MirBSD/index.php
@
text
@@
