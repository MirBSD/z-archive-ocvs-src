head	1.3;
access;
symbols
	tg-mergetmp-mirosx-1:1.3
	tg-mergefixes-1-branch:1.3.0.14
	tg-mergefixes-1-base:1.3
	MIROS_X:1.3.0.12
	MIROS_X_BASE:1.3
	MIRBSD_XP_MIRPPC:1.3.0.10
	MIRBSD_XP_SPARC_BASE:1.3
	MIRBSD_XP_SPARC:1.3.0.8
	MIRBSD_7quater:1.3
	MIRBSD_7_ALPHA:1.3.0.6
	MIRBSD_7:1.3.0.4
	MIRBSD_7ter:1.3
	MIRBSD_7_DEV:1.3.0.2
	MIRBSD_5:1.2
	MIRBSD_4:1.1;
locks; strict;
comment	@ * @;


1.3
date	2003.10.03.17.24.15;	author tg;	state Stab;
branches;
next	1.2;

1.2
date	2003.05.14.19.55.16;	author tg;	state Exp;
branches;
next	1.1;

1.1
date	2003.04.06.04.37.48;	author tg;	state Exp;
branches;
next	;


desc
@@


1.3
log
@kernel-side support for ISDN BRI/PRI rate-independent interface
makes us support, in addition to BRI (basic rate interface,
 2x64 kbps B channels, 1x16 kbps D channel, BASIC ACCESS), PRI cards
(primary rate interface, 30x64 kbps B channels, 1x64 kbps D channel,
 1x64 kbps SYNC channel -> 2048 kbps E1 line; PRIMARY MULTIPLEX;
 as well as its US/japanese equivalent).

This is the theory. This is live code from NetBSD.
@
text
@/*
 * Copyright (c) 1997, 2000 Hellmuth Michaelis. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *---------------------------------------------------------------------------
 *
 *	i4b_l2timer.c - layer 2 timer handling
 *	--------------------------------------
 *
 *	$Id: i4b_l2timer.c,v 1.2 2003/05/14 19:55:16 tg Exp $ 
 *
 * $FreeBSD$
 *
 *      last edit-date: [Fri Jan  5 11:33:47 2001]
 *
 *---------------------------------------------------------------------------*/

#include <sys/cdefs.h>
__KERNEL_RCSID(0, "$NetBSD: i4b_l2timer.c,v 1.6 2002/05/21 10:31:11 martin Exp $");

#ifdef __FreeBSD__
#include "i4bq921.h"
#else
#define NI4BQ921	1
#endif
#if NI4BQ921 > 0

#include <sys/param.h>
#include <sys/kernel.h>
#include <sys/systm.h>
#include <sys/mbuf.h>
#include <sys/socket.h>
#include <net/if.h>

#include <sys/timeout.h>

#ifdef __FreeBSD__
#include <machine/i4b_debug.h>
#include <machine/i4b_ioctl.h>
#else
#include <netisdn/i4b_debug.h>
#include <netisdn/i4b_ioctl.h>
#endif

#include <netisdn/i4b_global.h>
#include <netisdn/i4b_l2.h>
#include <netisdn/i4b_l1l2.h>
#include <netisdn/i4b_isdnq931.h>
#include <netisdn/i4b_mbuf.h>
#include <netisdn/i4b_l2fsm.h>
#include <netisdn/i4b_l3l4.h>

/*---------------------------------------------------------------------------*
 *	Q.921 timer T200 timeout function
 *---------------------------------------------------------------------------*/
static void
i4b_T200_timeout(l2_softc_t *l2sc)
{
	NDBGL2(L2_T_ERR, "isdnif %d, RC = %d", l2sc->drv->isdnif, l2sc->RC);
	i4b_next_l2state(l2sc, l2sc->drv, EV_T200EXP);
}

/*---------------------------------------------------------------------------*
 *	Q.921 timer T200 start
 *---------------------------------------------------------------------------*/
void
i4b_T200_start(l2_softc_t *l2sc)
{
	if(l2sc->T200 == TIMER_ACTIVE)
		return;
		
	NDBGL2(L2_T_MSG, "isdnif %d", l2sc->drv->isdnif);
	l2sc->T200 = TIMER_ACTIVE;

	START_TIMER(l2sc->T200_callout, i4b_T200_timeout, l2sc, T200DEF);
}

/*---------------------------------------------------------------------------*
 *	Q.921 timer T200 stop
 *---------------------------------------------------------------------------*/
void
i4b_T200_stop(l2_softc_t *l2sc)
{
	int s;
	s = splnet();
	if(l2sc->T200 != TIMER_IDLE)
	{
		STOP_TIMER(l2sc->T200_callout, i4b_T200_timeout, l2sc);
		l2sc->T200 = TIMER_IDLE;
	}
	splx(s);
	NDBGL2(L2_T_MSG, "isdnif %d", l2sc->drv->isdnif);
}

/*---------------------------------------------------------------------------*
 *	Q.921 timer T200 restart
 *---------------------------------------------------------------------------*/
void
i4b_T200_restart(l2_softc_t *l2sc)
{
	int s;
	s = splnet();
	if(l2sc->T200 != TIMER_IDLE)
	{
		STOP_TIMER(l2sc->T200_callout, i4b_T200_timeout, l2sc);
	}
	else
	{
		l2sc->T200 = TIMER_ACTIVE;
	}

	START_TIMER(l2sc->T200_callout, i4b_T200_timeout, l2sc, T200DEF);
	splx(s);
	NDBGL2(L2_T_MSG, "isdnif %d", l2sc->drv->isdnif);
}

/*---------------------------------------------------------------------------*
 *	Q.921 timer T202 timeout function
 *---------------------------------------------------------------------------*/
static void
i4b_T202_timeout(l2_softc_t *l2sc)
{
	NDBGL2(L2_T_ERR, "isdnif %d, N202 = %d", l2sc->drv->isdnif, l2sc->N202);
	
	if(--(l2sc->N202))
	{
		(*l2sc->T202func)(l2sc);
	}
}

/*---------------------------------------------------------------------------*
 *	Q.921 timer T202 start
 *---------------------------------------------------------------------------*/
void
i4b_T202_start(l2_softc_t *l2sc)
{
	if (l2sc->N202 == TIMER_ACTIVE)
		return;

	NDBGL2(L2_T_MSG, "isdnif %d", l2sc->drv->isdnif);
	l2sc->N202 = N202DEF;	
	l2sc->T202 = TIMER_ACTIVE;

	START_TIMER(l2sc->T202_callout, i4b_T202_timeout, l2sc, T202DEF);
}

/*---------------------------------------------------------------------------*
 *	Q.921 timer T202 stop
 *---------------------------------------------------------------------------*/
void
i4b_T202_stop(l2_softc_t *l2sc)
{
	int s;
	s = splnet();
	if(l2sc->T202 != TIMER_IDLE)
	{
		STOP_TIMER(l2sc->T202_callout, i4b_T202_timeout, l2sc);
		l2sc->T202 = TIMER_IDLE;
	}
	splx(s);
	NDBGL2(L2_T_MSG, "isdnif %d", l2sc->drv->isdnif);
}

/*---------------------------------------------------------------------------*
 *	Q.921 timer T203 timeout function
 *---------------------------------------------------------------------------*/
#if I4B_T203_ACTIVE
static void
i4b_T203_timeout(l2_softc_t *l2sc)
{
	NDBGL2(L2_T_ERR, "isdnif %d", l2sc->isdnif);
	i4b_next_l2state(l2sc, EV_T203EXP);
}
#endif

/*---------------------------------------------------------------------------*
 *	Q.921 timer T203 start
 *---------------------------------------------------------------------------*/
void
i4b_T203_start(l2_softc_t *l2sc)
{
#if I4B_T203_ACTIVE
	if (l2sc->T203 == TIMER_ACTIVE)
		return;
		
	NDBGL2(L2_T_MSG, "isdnif %d", l2sc->isdnif);
	l2sc->T203 = TIMER_ACTIVE;

	START_TIMER(l2sc->T203_callout, i4b_T203_timeout, l2sc, T203DEF);
#endif
}

/*---------------------------------------------------------------------------*
 *	Q.921 timer T203 stop
 *---------------------------------------------------------------------------*/
void
i4b_T203_stop(l2_softc_t *l2sc)
{
#if I4B_T203_ACTIVE
	int s;
	s = splnet();
	if(l2sc->T203 != TIMER_IDLE)
	{
		STOP_TIMER(l2sc->T203_callout, i4b_T203_timeout, l2sc);
		l2sc->T203 = TIMER_IDLE;
	}
	splx(s);
	NDBGL2(L2_T_MSG, "isdnif %d", l2sc->isdnif);
#endif
}

/*---------------------------------------------------------------------------*
 *	Q.921 timer T203 restart
 *---------------------------------------------------------------------------*/
void
i4b_T203_restart(l2_softc_t *l2sc)
{
#if I4B_T203_ACTIVE
	int s;
	s = splnet();

	if(l2sc->T203 != TIMER_IDLE)
	{
		STOP_TIMER(l2sc->T203_callout, i4b_T203_timerout, l2sc);
	}
	else
	{
		l2sc->T203 = TIMER_ACTIVE;
	}

	START_TIMER(l2sc->T203_callout, i4b_T203_timerout, l2sc, T203DEF);	
	splx(s);
	NDBGL2(L2_T_MSG, "isdnif %d", l2sc->isdnif);
#endif
}

#endif /* NI4BQ921 > 0 */
@


1.2
log
@kill the NetBSD callout timeout-API, which was cloned
from ours and introduced for I4B only anyways.

feature: callout_init() translates to a NOP, because
it just zeroed out the structure. This even saves us
a couple of bytes and cycles.
@
text
@d30 1
a30 1
 *	$Id: i4b_l2timer.c,v 1.1 2003/04/06 04:37:48 tg Exp $ 
d79 1
a79 1
	NDBGL2(L2_T_ERR, "bri %d, RC = %d", l2sc->drv->bri, l2sc->RC);
d92 1
a92 1
	NDBGL2(L2_T_MSG, "bri %d", l2sc->drv->bri);
d112 1
a112 1
	NDBGL2(L2_T_MSG, "bri %d", l2sc->drv->bri);
d134 1
a134 1
	NDBGL2(L2_T_MSG, "bri %d", l2sc->drv->bri);
d143 1
a143 1
	NDBGL2(L2_T_ERR, "bri %d, N202 = %d", l2sc->drv->bri, l2sc->N202);
d160 1
a160 1
	NDBGL2(L2_T_MSG, "bri %d", l2sc->drv->bri);
d181 1
a181 1
	NDBGL2(L2_T_MSG, "bri %d", l2sc->drv->bri);
d191 1
a191 1
	NDBGL2(L2_T_ERR, "bri %d", l2sc->bri);
d206 1
a206 1
	NDBGL2(L2_T_MSG, "bri %d", l2sc->bri);
d228 1
a228 1
	NDBGL2(L2_T_MSG, "bri %d", l2sc->bri);
d253 1
a253 1
	NDBGL2(L2_T_MSG, "bri %d", l2sc->bri);
@


1.1
log
@Pull in ISDN support from NetBSD, push out the old
one with the "I require you to send me a postcard"
licence.

This enables building a kernel with ISDN support
(it's just slower and like 200 KiB bigger), but
disables isdnd from userland and needs different
manpages and other fixes from NetBSD.

Also added:
 - support for the callout API from NetBSD, which
   is in fact our stolen new-style timeout API,
   just with a bit more overhead and different names
   for the structure
 - some includes sync with NBSD
 - a shitload of kludges to make ISDN build

This needs security, style and bloat audits fast.
And testing.
@
text
@d30 1
a30 1
 *	$Id: i4b_l2timer.c,v 1.6 2002/05/21 10:31:11 martin Exp $ 
d55 1
a55 3
#if defined(__NetBSD__) && __NetBSD_Version__ >= 104230000
#include <sys/callout.h>
#endif
@

