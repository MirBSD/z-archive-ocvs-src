head	1.3;
access;
symbols
	tg-mergetmp-mirosx-1:1.3
	tg-mergefixes-1-branch:1.3.0.14
	tg-mergefixes-1-base:1.3
	MIROS_X:1.3.0.12
	MIROS_X_BASE:1.3
	MIRBSD_XP_MIRPPC:1.3.0.10
	MIRBSD_XP_SPARC_BASE:1.3
	MIRBSD_XP_SPARC:1.3.0.8
	MIRBSD_7quater:1.3
	MIRBSD_7_ALPHA:1.3.0.6
	MIRBSD_7:1.3.0.4
	MIRBSD_7ter:1.3
	MIRBSD_7_DEV:1.3.0.2;
locks; strict;
comment	@ * @;


1.3
date	2003.10.03.19.10.52;	author tg;	state Stab;
branches;
next	1.2;

1.2
date	2003.10.03.17.24.14;	author tg;	state Exp;
branches;
next	1.1;

1.1
date	2003.10.03.15.20.48;	author tg;	state Exp;
branches;
next	;


desc
@@


1.3
log
@finish release engineering
you should be able to build the release now
@
text
@/*	$MirBSD: i4b_capi_l4if.c,v 1.2 2003/10/03 17:24:14 tg Exp $	*/
/*	$NetBSD: i4b_capi_l4if.c,v 1.4 2003/10/03 16:47:57 pooka Exp $	*/

/*
 * Copyright (c) 2001-2003 Cubical Solutions Ltd. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * capi/capi_l4if.c	The CAPI i4b L4/device interface.
 *
 * $FreeBSD: src/sys/i4b/capi/capi_l4if.c,v 1.4 2002/04/04 21:03:20 jhb Exp $
 */

#include <sys/cdefs.h>

#include <sys/param.h>
#include <sys/kernel.h>
#include <sys/systm.h>
#include <sys/mbuf.h>
#include <sys/socket.h>
#include <sys/timeout.h>
#include <net/if.h>

#include <netisdn/i4b_debug.h>
#include <netisdn/i4b_ioctl.h>
#include <netisdn/i4b_cause.h>
#include <netisdn/i4b_l3l4.h>
#include <netisdn/i4b_mbuf.h>
#include <netisdn/i4b_global.h>
#include <netisdn/i4b_l4.h>
#include <netisdn/i4b_capi.h>
#include <netisdn/i4b_capi_msgs.h>

static void n_connect_request(call_desc_t *);
static void n_connect_response(call_desc_t *, int response, int cause);
static void n_disconnect_request(call_desc_t *, int cause);
static void n_alert_request(call_desc_t *);
static void n_mgmt_command(struct isdn_l3_driver *, int cmd, void *parm);
static int  n_download(void *, int, struct isdn_dr_prot *);

static int ncapi = 0;

/*
//  i4b_capi_{ret,set}_linktab
//      i4b driver glue.
//
//  i4b_capi_bch_config
//      Called by i4b driver to flush + {en,dis}able a channel.
//
//  i4b_capi_bch_start_tx
//      Called by i4b driver to transmit a queued mbuf.
//
//  i4b_capi_bch_stat
//      Called by i4b driver to obtain statistics information.
*/

static isdn_link_t *
i4b_capi_ret_linktab(void *token, int channel)
{
    capi_softc_t *sc = token;

    return &sc->sc_bchan[channel].capi_isdn_linktab;
}

static void
i4b_capi_set_link(void *token, int channel,
    const struct isdn_l4_driver_functions *l4_driver, void *l4_inst)
{
    capi_softc_t *sc = token;

    sc->sc_bchan[channel].l4_driver = l4_driver;
    sc->sc_bchan[channel].l4_driver_softc = l4_inst;
}

static void
i4b_capi_bch_config(void *token, int chan, int bprot, int activate)
{
    capi_softc_t *sc = token;

    i4b_Bcleanifq(&sc->sc_bchan[chan].tx_queue);
    sc->sc_bchan[chan].tx_queue.ifq_maxlen = IFQ_MAXLEN;
    sc->sc_bchan[chan].txcount = 0;

    /* The telephony drivers use rx_queue for receive. */
    i4b_Bcleanifq(&sc->sc_bchan[chan].rx_queue);
    sc->sc_bchan[chan].rx_queue.ifq_maxlen = IFQ_MAXLEN;
    sc->sc_bchan[chan].rxcount = 0;

    /* HDLC frames are put to in_mbuf */
    i4b_Bfreembuf(sc->sc_bchan[chan].in_mbuf);
    sc->sc_bchan[chan].in_mbuf = NULL;

    /* Because of the difference, we need to remember the protocol. */
    sc->sc_bchan[chan].bprot = bprot;
    sc->sc_bchan[chan].busy = 0;
}

static void
i4b_capi_bch_start_tx(void *token, int chan)
{
    capi_softc_t *sc = token;
    int s;

    s = splnet();

    if (sc->sc_bchan[chan].state != B_CONNECTED) {
	splx(s);
	printf("capi%d: start_tx on unconnected channel\n", sc->sc_unit);
	return;
    }

    if (sc->sc_bchan[chan].busy) {
	splx(s);
	return;
    }

    capi_start_tx(sc, chan);

    splx(s);
}

static void
i4b_capi_bch_stat(void *token, int chan, bchan_statistics_t *bsp)
{
    capi_softc_t *sc = token;
    int s = splnet();

    bsp->outbytes = sc->sc_bchan[chan].txcount;
    bsp->inbytes = sc->sc_bchan[chan].rxcount;

    sc->sc_bchan[chan].txcount = 0;
    sc->sc_bchan[chan].rxcount = 0;

    splx(s);
}

int capi_start_tx(void *token, int chan)
{
    capi_softc_t *sc = token;
    struct mbuf *m_b3;
    int sent = 0;

    IF_DEQUEUE(&sc->sc_bchan[chan].tx_queue, m_b3);
    while (m_b3) {
	struct mbuf *m = m_b3->m_next;

	sc->sc_bchan[chan].txcount += m_b3->m_len;
	capi_data_b3_req(sc, chan, m_b3);
	sent++;

	m_b3 = m;
    }

    if (sc->sc_bchan[chan].l4_driver) {
	capi_bchan_t *bch = &sc->sc_bchan[chan];

	/* Notify i4b driver of activity, and if the queue is drained. */
	if (sent)
	    (*bch->l4_driver->bch_activity)(bch->l4_driver_softc, ACT_TX);

	if (IF_QEMPTY(&bch->tx_queue))
	    (*bch->l4_driver->bch_tx_queue_empty)(bch->l4_driver_softc);
    }

    return sent;
}

static const struct isdn_l4_bchannel_functions
capi_l4_driver = {
    i4b_capi_bch_config,
    i4b_capi_bch_start_tx,
    i4b_capi_bch_stat
};

/*
//  n_mgmt_command
//      i4b L4 management command.
*/

static void
n_mgmt_command(struct isdn_l3_driver *l3, int op, void *arg)
{
    capi_softc_t *sc = l3->l1_token;

#if 0
    printf("capi%d: mgmt command %d\n", sc->sc_unit, op);
#endif

    switch(op) {
    case CMR_DOPEN:
	sc->sc_enabled = 1;
	break;

    case CMR_DCLOSE:
	sc->sc_enabled = 0;
	break;

    case CMR_SETTRACE:
	break;

    default:
	break;
    }
}

/*
//  n_connect_request
//      i4b L4 wants to connect. We assign a B channel to the call,
//      send a CAPI_CONNECT_REQ, and set the channel to B_CONNECT_CONF.
*/

static void
n_connect_request(call_desc_t *cd)
{
    capi_softc_t *sc;
    int bch, s;

    sc = cd->l3drv->l1_token;
    bch = cd->channelid;

    s = splnet();

    if ((bch < 0) || (bch >= sc->sc_nbch))
	for (bch = 0; bch < sc->sc_nbch; bch++)
	    if (sc->sc_bchan[bch].state == B_FREE)
		break;

    if (bch == sc->sc_nbch) {
	splx(s);
	printf("capi%d: no free B channel\n", sc->sc_unit);
	return;
    }

    cd->channelid = bch;

    capi_connect_req(sc, cd);
    splx(s);
}

/*
//  n_connect_response
//      i4b L4 answers a call. We send a CONNECT_RESP with the proper
//      Reject code, and set the channel to B_CONNECT_B3_IND or B_FREE,
//      depending whether we answer or not.
*/

static void
n_connect_response(call_desc_t *cd, int response, int cause)
{
    capi_softc_t *sc;
    int s;

    sc = cd->l3drv->l1_token;

    T400_stop(cd);

    cd->response = response;
    cd->cause_out = cause;

    s = splnet();
    capi_connect_resp(sc, cd);
    splx(s);
}

/*
//  n_disconnect_request
//      i4b L4 wants to disconnect. We send a DISCONNECT_REQ and
//      set the channel to B_DISCONNECT_CONF.
*/

static void
n_disconnect_request(call_desc_t *cd, int cause)
{
    capi_softc_t *sc;
    int s;

    sc = cd->l3drv->l1_token;

    cd->cause_out = cause;

    s = splnet();
    capi_disconnect_req(sc, cd);
    splx(s);
}

/*
//  n_alert_request
//      i4b L4 wants to alert an incoming call. We send ALERT_REQ.
*/

static void
n_alert_request(call_desc_t *cd)
{
    capi_softc_t *sc;
    int s;

    sc = cd->l3drv->l1_token;

    s = splnet();
    capi_alert_req(sc, cd);
    splx(s);
}

/*
//  n_download
//      L4 -> firmware download
*/

static int
n_download(void *token, int numprotos, struct isdn_dr_prot *protocols)
{
    capi_softc_t *sc = token;

    if (sc->load) {
	(*sc->load)(sc, protocols[0].bytecount,
			       protocols[0].microcode);
	return(0);
    }

    return(ENXIO);
}

static const struct isdn_l3_driver_functions
capi_l3_functions = {
    i4b_capi_ret_linktab,
    i4b_capi_set_link,
    n_connect_request,
    n_connect_response,
    n_disconnect_request,
    n_alert_request,
    n_download,
    NULL,
    n_mgmt_command
};

/*
//  capi_ll_attach
//      Called by a link layer driver at boot time.
*/

int
capi_ll_attach(capi_softc_t *sc, const char *devname, const char *cardname)
{
    struct isdn_l3_driver *l3drv;
    int i;

    /* Unit state */

    sc->sc_enabled = 0;
    sc->sc_state = C_DOWN;
    sc->sc_msgid = 0;

    for (i = 0; i < sc->sc_nbch; i++) {
	sc->sc_bchan[i].ncci = INVALID;
	sc->sc_bchan[i].msgid = 0;
	sc->sc_bchan[i].busy = 0;
	sc->sc_bchan[i].state = B_FREE;

	memset(&sc->sc_bchan[i].tx_queue, 0, sizeof(struct ifqueue));
	memset(&sc->sc_bchan[i].rx_queue, 0, sizeof(struct ifqueue));
	sc->sc_bchan[i].tx_queue.ifq_maxlen = IFQ_MAXLEN;
	sc->sc_bchan[i].rx_queue.ifq_maxlen = IFQ_MAXLEN;

	sc->sc_bchan[i].txcount = 0;
	sc->sc_bchan[i].rxcount = 0;

	sc->sc_bchan[i].cdid = CDID_UNUSED;
	sc->sc_bchan[i].bprot = BPROT_NONE;
	sc->sc_bchan[i].in_mbuf = NULL;

	sc->sc_bchan[i].capi_isdn_linktab.l1token = sc;
	sc->sc_bchan[i].capi_isdn_linktab.channel = i;
	sc->sc_bchan[i].capi_isdn_linktab.bchannel_driver = &capi_l4_driver;
	sc->sc_bchan[i].capi_isdn_linktab.tx_queue = &sc->sc_bchan[i].tx_queue;
	sc->sc_bchan[i].capi_isdn_linktab.rx_queue = &sc->sc_bchan[i].rx_queue;
	sc->sc_bchan[i].capi_isdn_linktab.rx_mbuf = &sc->sc_bchan[i].in_mbuf;
    }

    l3drv = isdn_attach_isdnif(devname, cardname, sc, &capi_l3_functions,
	sc->sc_nbch);

    l3drv->tei = -1;
    l3drv->dl_est = DL_DOWN;
    l3drv->nbch = sc->sc_nbch;

    sc->sc_unit = ncapi++;
    sc->capi_isdnif = l3drv->isdnif;

    isdn_isdnif_ready(l3drv->isdnif);

    printf("capi%d: card type %d attached\n", sc->sc_unit, sc->card_type);

    return(0);
}


/*
//  capi_ll_detach
*/

int
capi_ll_detach(capi_softc_t *sc)
{

	/* TODO */
	return(0);
}
@


1.2
log
@kernel-side support for ISDN BRI/PRI rate-independent interface
makes us support, in addition to BRI (basic rate interface,
 2x64 kbps B channels, 1x16 kbps D channel, BASIC ACCESS), PRI cards
(primary rate interface, 30x64 kbps B channels, 1x64 kbps D channel,
 1x64 kbps SYNC channel -> 2048 kbps E1 line; PRIMARY MULTIPLEX;
 as well as its US/japanese equivalent).

This is the theory. This is live code from NetBSD.
@
text
@d1 2
a2 2
/*	$MirBSD: i4b_capi_l4if.c,v 1.1 2003/10/03 15:20:48 tg Exp $	*/
/*	$NetBSD: i4b_capi_l4if.c,v 1.3 2003/10/03 16:38:44 pooka Exp $	*/
d270 1
a270 1
    int bch, s;
a272 1
    bch = cd->channelid;
d294 1
a294 1
    int bch, s;
a296 1
    bch = cd->channelid;
@


1.1
log
@Sync with NetBSD

|| Among others, this gives us:

Module Name:    src
Committed By:   pooka
Date:           Thu Sep 25 15:34:38 UTC 2003

Added Files:
        src/sys/netisdn: i4b_capi.h i4b_capi_l4if.c i4b_capi_llif.c
            i4b_capi_msgs.c i4b_capi_msgs.h

Log Message:
Add a support layer for the ISDN CAPI (http://www.capi.org/), which should
make it pretty simple to write drivers for cards which conform to CAPI.

This code was originally written by Juha-Matti Liukkonen <jml@@cubical.fi>
of Cubical Solutions Ltd. for FreeBSD, and was now adapted to NetBSD
by myself for the same company.

|| and

Module Name:    src
Committed By:   pooka
Date:           Thu Sep 25 15:53:26 UTC 2003

Added Files:
        src/sys/dev/ic: iavc.c iavcreg.h iavcvar.h
        src/sys/dev/pci: iavc_pci.c

Log Message:
Add a driver for the CAPI-compliant AVM B1/T1 cards.

The driver backend is capable of supporting also ISA cards (no DMA)
and primary rate (PRI) cards in addition to the basic rate ones,
but I don't any to test on right now, so we don't support those
currently.

This code was originally written by Juha-Matti Liukkonen <jml@@cubical.fi>
of Cubical Solutions Ltd. for FreeBSD, and was ported to NetBSD by
myself for the same company.

==================================================================

The full list of ISDN files is now:

src/etc/MAKEDEV.mi
src/etc/Makefile
src/etc/etc.i386/MAKEDEV
src/etc/etc.i386/MAKEDEV.md
src/etc/isdnd.rc.sample
src/etc/isdnd.sppp.sample
src/etc/mtree/4.4BSD.dist
src/etc/ppp/ppp.conf.sample
src/etc/rc
src/etc/rc.conf
src/include/Makefile
src/share/man/man4/Makefile
src/share/man/man4/daic.4
src/share/man/man4/iavc.4
src/share/man/man4/ifpci.4
src/share/man/man4/ippp.4
src/share/man/man4/irip.4
src/share/man/man4/isdn.4
src/share/man/man4/isdnbchan.4
src/share/man/man4/isdncapi.4
src/share/man/man4/isdnctl.4
src/share/man/man4/isdntel.4
src/share/man/man4/isdntrc.4
src/share/man/man4/isic.4
src/share/man/man4/iwic.4
src/sys/arch/i386/conf/GENERIC
src/sys/arch/i386/i386/conf.c
src/sys/conf/files
src/sys/dev/ic/daic.c
src/sys/dev/ic/daicreg.h
src/sys/dev/ic/daicvar.h
src/sys/dev/ic/hscx.c
src/sys/dev/ic/hscx.h
src/sys/dev/ic/iavc.c
src/sys/dev/ic/iavcreg.h
src/sys/dev/ic/iavcvar.h
src/sys/dev/ic/ipac.h
src/sys/dev/ic/isac.c
src/sys/dev/ic/isac.h
src/sys/dev/ic/isacsx.c
src/sys/dev/ic/isacsx.h
src/sys/dev/ic/isic.c
src/sys/dev/ic/isic_bchan.c
src/sys/dev/ic/isic_l1.c
src/sys/dev/ic/isic_l1.h
src/sys/dev/ic/isic_l1fsm.c
src/sys/dev/isa/daic_isa.c
src/sys/dev/isa/files.isa
src/sys/dev/isa/files.isapnp
src/sys/dev/isa/isic_isa.c
src/sys/dev/isa/isic_isa_avm_a1.c
src/sys/dev/isa/isic_isa_itk_ix1.c
src/sys/dev/isa/isic_isa_tel_s016.c
src/sys/dev/isa/isic_isa_tel_s0163.c
src/sys/dev/isa/isic_isa_tel_s08.c
src/sys/dev/isa/isic_isa_usr_sti.c
src/sys/dev/isa/isic_isapnp.c
src/sys/dev/isa/isic_isapnp_ctx_s0P.c
src/sys/dev/isa/isic_isapnp_drn_ngo.c
src/sys/dev/isa/isic_isapnp_dynalink.c
src/sys/dev/isa/isic_isapnp_elsa_qs1i.c
src/sys/dev/isa/isic_isapnp_itkix.c
src/sys/dev/isa/isic_isapnp_siemens_isurf.c
src/sys/dev/isa/isic_isapnp_sws.c
src/sys/dev/isa/isic_isapnp_tel_s0P.c
src/sys/dev/microcode/daic/Makefile
src/sys/dev/microcode/daic/dnload.h
src/sys/dev/microcode/daic/dnload.h-dist
src/sys/dev/microcode/daic/gendnloadh
src/sys/dev/pci/files.pci
src/sys/dev/pci/fwlynx_pci.c
src/sys/dev/pci/iavc_pci.c
src/sys/dev/pci/ifpci.c
src/sys/dev/pci/ifpci2.c
src/sys/dev/pci/isic_pci.c
src/sys/dev/pci/isic_pci.h
src/sys/dev/pci/isic_pci_elsa_qs1p.c
src/sys/dev/pci/iwic_bchan.c
src/sys/dev/pci/iwic_dchan.c
src/sys/dev/pci/iwic_fsm.c
src/sys/dev/pci/iwic_pci.c
src/sys/dev/pci/iwicreg.h
src/sys/dev/pci/iwicvar.h
src/sys/dev/pci/pcidevs
src/sys/dev/pci/pcidevs.h
src/sys/dev/pci/pcidevs_data.h
src/sys/dev/pci/pcireg.h
src/sys/dev/pcmcia/files.pcmcia
src/sys/dev/pcmcia/isic_pcmcia.c
src/sys/dev/pcmcia/isic_pcmcia.h
src/sys/dev/pcmcia/isic_pcmcia_avm_fritz.c
src/sys/dev/pcmcia/isic_pcmcia_elsa_isdnmc.c
src/sys/dev/pcmcia/isic_pcmcia_elsa_mcall.c
src/sys/dev/pcmcia/isic_pcmcia_sbspeedstar2.c
src/sys/net/if_sppp.h
src/sys/netisdn/i4b_capi.h
src/sys/netisdn/i4b_capi_l4if.c
src/sys/netisdn/i4b_capi_llif.c
src/sys/netisdn/i4b_capi_msgs.c
src/sys/netisdn/i4b_capi_msgs.h
src/sys/netisdn/i4b_cause.h
src/sys/netisdn/i4b_ctl.c
src/sys/netisdn/i4b_debug.h
src/sys/netisdn/i4b_global.h
src/sys/netisdn/i4b_i4bdrv.c
src/sys/netisdn/i4b_iframe.c
src/sys/netisdn/i4b_ioctl.h
src/sys/netisdn/i4b_ipr.c
src/sys/netisdn/i4b_isdnq931.h
src/sys/netisdn/i4b_isppp.c
src/sys/netisdn/i4b_isppp.h
src/sys/netisdn/i4b_l1l2.h
src/sys/netisdn/i4b_l2.c
src/sys/netisdn/i4b_l2.h
src/sys/netisdn/i4b_l2fsm.c
src/sys/netisdn/i4b_l2fsm.h
src/sys/netisdn/i4b_l2if.c
src/sys/netisdn/i4b_l2timer.c
src/sys/netisdn/i4b_l3.h
src/sys/netisdn/i4b_l3fsm.c
src/sys/netisdn/i4b_l3fsm.h
src/sys/netisdn/i4b_l3l4.h
src/sys/netisdn/i4b_l3timer.c
src/sys/netisdn/i4b_l4.c
src/sys/netisdn/i4b_l4.h
src/sys/netisdn/i4b_l4if.c
src/sys/netisdn/i4b_l4mgmt.c
src/sys/netisdn/i4b_l4timer.c
src/sys/netisdn/i4b_lme.c
src/sys/netisdn/i4b_mbuf.c
src/sys/netisdn/i4b_mbuf.h
src/sys/netisdn/i4b_q931.c
src/sys/netisdn/i4b_q931.h
src/sys/netisdn/i4b_q932fac.c
src/sys/netisdn/i4b_q932fac.h
src/sys/netisdn/i4b_rbch.c
src/sys/netisdn/i4b_rbch_ioctl.h
src/sys/netisdn/i4b_sframe.c
src/sys/netisdn/i4b_tei.c
src/sys/netisdn/i4b_tel.c
src/sys/netisdn/i4b_tel_ioctl.h
src/sys/netisdn/i4b_trace.c
src/sys/netisdn/i4b_trace.h
src/sys/netisdn/i4b_uframe.c
src/sys/netisdn/i4b_util.c
src/sys/sys/cdefs.h
src/sys/sys/device.h
src/sys/sys/select.h
src/usr.sbin/Makefile
src/usr.sbin/isdnd/Makefile
src/usr.sbin/isdnd/alias.c
src/usr.sbin/isdnd/alias.h
src/usr.sbin/isdnd/config.h
src/usr.sbin/isdnd/controller.c
src/usr.sbin/isdnd/curses.c
src/usr.sbin/isdnd/dial.c
src/usr.sbin/isdnd/exec.c
src/usr.sbin/isdnd/fsm.c
src/usr.sbin/isdnd/holiday.c
src/usr.sbin/isdnd/isdnd.8
src/usr.sbin/isdnd/isdnd.acct.5
src/usr.sbin/isdnd/isdnd.h
src/usr.sbin/isdnd/isdnd.rates.5
src/usr.sbin/isdnd/isdnd.rc.5
src/usr.sbin/isdnd/log.c
src/usr.sbin/isdnd/main.c
src/usr.sbin/isdnd/monitor.c
src/usr.sbin/isdnd/monitor.h
src/usr.sbin/isdnd/msghdl.c
src/usr.sbin/isdnd/pathnames.h
src/usr.sbin/isdnd/pcause.c
src/usr.sbin/isdnd/process.c
src/usr.sbin/isdnd/rates.c
src/usr.sbin/isdnd/rc_config.c
src/usr.sbin/isdnd/rc_parse.y
src/usr.sbin/isdnd/rc_scan.l
src/usr.sbin/isdnd/support.c
src/usr.sbin/isdnd/timer.c
src/usr.sbin/ppp/ppp/Makefile
src/usr.sbin/ppp/ppp/i4b.c

Please correct me if anything should be missing.
@
text
@d1 2
a2 2
/*	$MirBSD$	*/
/*	$NetBSD: i4b_capi_l4if.c,v 1.2 2003/09/26 15:17:23 pooka Exp $	*/
d400 2
a401 1
    l3drv = isdn_attach_bri(devname, cardname, sc, &capi_l3_functions);
d408 1
a408 1
    sc->capi_bri = l3drv->bri;
d410 1
a410 1
    isdn_bri_ready(l3drv->bri);
@

