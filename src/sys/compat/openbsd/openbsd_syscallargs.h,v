head	1.21;
access;
symbols
	tg-mergetmp-mirosx-1:1.21
	tg-mergefixes-1-branch:1.21.0.4
	tg-mergefixes-1-base:1.21
	MIROS_X:1.21.0.2
	MIROS_X_BASE:1.21
	tg-mergetmp-3:1.21;
locks; strict;
comment	@ * @;


1.21
date	2004.12.05.14.03.22;	author tg;	state Exp;
branches;
next	1.20;

1.20
date	2004.12.03.09.50.17;	author tg;	state Exp;
branches;
next	1.19;

1.19
date	2004.12.02.18.42.47;	author tg;	state Exp;
branches;
next	1.18;

1.18
date	2004.12.02.18.35.52;	author tg;	state Exp;
branches;
next	1.17;

1.17
date	2004.12.02.09.20.04;	author tg;	state Exp;
branches;
next	1.16;

1.16
date	2004.11.14.13.41.55;	author tg;	state Exp;
branches;
next	1.15;

1.15
date	2004.11.14.12.52.08;	author tg;	state Exp;
branches;
next	1.14;

1.14
date	2004.11.14.01.13.18;	author tg;	state Exp;
branches;
next	1.13;

1.13
date	2004.11.14.01.07.21;	author tg;	state Exp;
branches;
next	1.12;

1.12
date	2004.11.13.22.49.01;	author tg;	state Exp;
branches;
next	1.11;

1.11
date	2004.10.31.22.49.38;	author tg;	state Exp;
branches;
next	1.10;

1.10
date	2004.10.31.20.15.53;	author tg;	state Exp;
branches;
next	1.9;

1.9
date	2004.10.31.15.53.10;	author tg;	state Exp;
branches;
next	1.8;

1.8
date	2004.10.31.15.18.17;	author tg;	state Exp;
branches;
next	1.7;

1.7
date	2004.10.28.21.06.08;	author tg;	state Exp;
branches;
next	1.6;

1.6
date	2004.10.28.20.40.36;	author tg;	state Exp;
branches;
next	1.5;

1.5
date	2004.10.28.17.18.22;	author tg;	state Exp;
branches;
next	1.4;

1.4
date	2004.10.26.17.18.44;	author tg;	state Exp;
branches;
next	1.3;

1.3
date	2004.10.26.16.31.46;	author tg;	state Exp;
branches;
next	1.2;

1.2
date	2004.10.26.15.45.00;	author tg;	state Exp;
branches;
next	1.1;

1.1
date	2004.10.26.15.42.39;	author tg;	state Exp;
branches;
next	;


desc
@@


1.21
log
@add missing includes and regen
@
text
@/*	$MirBSD$	*/

/*
 * System call argument lists.
 *
 * DO NOT EDIT-- this file is automatically generated.
 * created from;	MirBSD: src/sys/compat/openbsd/syscalls.master,v 1.32 2004/12/05 14:01:38 tg Exp 
 */

#ifdef	syscallarg
#undef	syscallarg
#endif

#define	syscallarg(x)							\
	union {								\
		register_t pad;						\
		struct { x datum; } le;					\
		struct {						\
			int8_t pad[ (sizeof (register_t) < sizeof (x))	\
				? 0					\
				: sizeof (register_t) - sizeof (x)];	\
			x datum;					\
		} be;							\
	}

struct sys_exit_args {
	syscallarg(int) rval;
};

struct sys_read_args {
	syscallarg(int) fd;
	syscallarg(void *) buf;
	syscallarg(size_t) nbyte;
};

struct sys_write_args {
	syscallarg(int) fd;
	syscallarg(const void *) buf;
	syscallarg(size_t) nbyte;
};

struct openbsd_sys_open_args {
	syscallarg(char *) path;
	syscallarg(int) flags;
	syscallarg(mode_t) mode;
};

struct sys_close_args {
	syscallarg(int) fd;
};

struct compat_time_sys_wait4_args {
	syscallarg(pid_t) pid;
	syscallarg(int *) status;
	syscallarg(int) options;
	syscallarg(struct rusage_compat *) rusage;
};

struct compat_43_openbsd_sys_creat_args {
	syscallarg(char *) path;
	syscallarg(mode_t) mode;
};

struct openbsd_sys_link_args {
	syscallarg(char *) path;
	syscallarg(char *) link;
};

struct openbsd_sys_unlink_args {
	syscallarg(char *) path;
};

struct openbsd_sys_chdir_args {
	syscallarg(char *) path;
};

struct sys_fchdir_args {
	syscallarg(int) fd;
};

struct openbsd_sys_mknod_args {
	syscallarg(char *) path;
	syscallarg(mode_t) mode;
	syscallarg(dev_t) dev;
};

struct openbsd_sys_chmod_args {
	syscallarg(char *) path;
	syscallarg(mode_t) mode;
};

struct openbsd_sys_chown_args {
	syscallarg(char *) path;
	syscallarg(uid_t) uid;
	syscallarg(gid_t) gid;
};

struct sys_obreak_args {
	syscallarg(char *) nsize;
};

struct compat_25_sys_getfsstat_args {
	syscallarg(struct statfs *) buf;
	syscallarg(long) bufsize;
	syscallarg(int) flags;
};

struct compat_43_sys_lseek_args {
	syscallarg(int) fd;
	syscallarg(long) offset;
	syscallarg(int) whence;
};

struct openbsd_sys_mount_args {
	syscallarg(const char *) type;
	syscallarg(char *) path;
	syscallarg(int) flags;
	syscallarg(void *) data;
};

struct openbsd_sys_unmount_args {
	syscallarg(char *) path;
	syscallarg(int) flags;
};

struct sys_setuid_args {
	syscallarg(uid_t) uid;
};

struct sys_ptrace_args {
	syscallarg(int) req;
	syscallarg(pid_t) pid;
	syscallarg(caddr_t) addr;
	syscallarg(int) data;
};

struct sys_recvmsg_args {
	syscallarg(int) s;
	syscallarg(struct msghdr *) msg;
	syscallarg(int) flags;
};

struct sys_sendmsg_args {
	syscallarg(int) s;
	syscallarg(const struct msghdr *) msg;
	syscallarg(int) flags;
};

struct sys_recvfrom_args {
	syscallarg(int) s;
	syscallarg(void *) buf;
	syscallarg(size_t) len;
	syscallarg(int) flags;
	syscallarg(struct sockaddr *) from;
	syscallarg(socklen_t *) fromlenaddr;
};

struct sys_accept_args {
	syscallarg(int) s;
	syscallarg(struct sockaddr *) name;
	syscallarg(socklen_t *) anamelen;
};

struct sys_getpeername_args {
	syscallarg(int) fdes;
	syscallarg(struct sockaddr *) asa;
	syscallarg(socklen_t *) alen;
};

struct sys_getsockname_args {
	syscallarg(int) fdes;
	syscallarg(struct sockaddr *) asa;
	syscallarg(socklen_t *) alen;
};

struct openbsd_sys_access_args {
	syscallarg(char *) path;
	syscallarg(int) flags;
};

struct openbsd_sys_chflags_args {
	syscallarg(char *) path;
	syscallarg(u_int) flags;
};

struct sys_fchflags_args {
	syscallarg(int) fd;
	syscallarg(u_int) flags;
};

struct sys_kill_args {
	syscallarg(int) pid;
	syscallarg(int) signum;
};

struct compat_43_openbsd_sys_stat_args {
	syscallarg(char *) path;
	syscallarg(struct stat43 *) ub;
};

struct compat_43_openbsd_sys_lstat_args {
	syscallarg(char *) path;
	syscallarg(struct stat43 *) ub;
};

struct sys_dup_args {
	syscallarg(int) fd;
};

struct sys_profil_args {
	syscallarg(caddr_t) samples;
	syscallarg(size_t) size;
	syscallarg(u_long) offset;
	syscallarg(u_int) scale;
};

struct openbsd_sys_ktrace_args {
	syscallarg(char *) fname;
	syscallarg(int) ops;
	syscallarg(int) facs;
	syscallarg(pid_t) pid;
};

struct sys_sigaction_args {
	syscallarg(int) signum;
	syscallarg(const struct sigaction *) nsa;
	syscallarg(struct sigaction *) osa;
};

struct sys_sigprocmask_args {
	syscallarg(int) how;
	syscallarg(sigset_t) mask;
};

struct sys_getlogin_args {
	syscallarg(char *) namebuf;
	syscallarg(u_int) namelen;
};

struct sys_setlogin_args {
	syscallarg(const char *) namebuf;
};

struct sys_acct_args {
	syscallarg(char *) path;
};

struct compat_35_sys_osigaltstack_args {
	syscallarg(const struct osigaltstack *) nss;
	syscallarg(struct osigaltstack *) oss;
};

struct sys_ioctl_args {
	syscallarg(int) fd;
	syscallarg(u_long) com;
	syscallarg(void *) data;
};

struct sys_reboot_args {
	syscallarg(int) opt;
};

struct openbsd_sys_revoke_args {
	syscallarg(char *) path;
};

struct openbsd_sys_symlink_args {
	syscallarg(char *) path;
	syscallarg(char *) link;
};

struct openbsd_sys_readlink_args {
	syscallarg(char *) path;
	syscallarg(char *) buf;
	syscallarg(size_t) count;
};

struct openbsd_sys_execve_args {
	syscallarg(char *) path;
	syscallarg(char *const *) argp;
	syscallarg(char *const *) envp;
};

struct sys_umask_args {
	syscallarg(mode_t) newmask;
};

struct openbsd_sys_chroot_args {
	syscallarg(char *) path;
};

struct compat_43_sys_fstat_args {
	syscallarg(int) fd;
	syscallarg(struct stat43 *) sb;
};

struct compat_43_sys_getkerninfo_args {
	syscallarg(int) op;
	syscallarg(char *) where;
	syscallarg(int *) size;
	syscallarg(int) arg;
};

struct compat_25_sys_omsync_args {
	syscallarg(caddr_t) addr;
	syscallarg(size_t) len;
};

struct sys_sbrk_args {
	syscallarg(int) incr;
};

struct compat_43_sys_mmap_args {
	syscallarg(caddr_t) addr;
	syscallarg(size_t) len;
	syscallarg(int) prot;
	syscallarg(int) flags;
	syscallarg(int) fd;
	syscallarg(long) pos;
};

struct sys_ovadvise_args {
	syscallarg(int) anom;
};

struct sys_munmap_args {
	syscallarg(void *) addr;
	syscallarg(size_t) len;
};

struct sys_mprotect_args {
	syscallarg(void *) addr;
	syscallarg(size_t) len;
	syscallarg(int) prot;
};

struct sys_madvise_args {
	syscallarg(void *) addr;
	syscallarg(size_t) len;
	syscallarg(int) behav;
};

struct sys_mincore_args {
	syscallarg(void *) addr;
	syscallarg(size_t) len;
	syscallarg(char *) vec;
};

struct sys_getgroups_args {
	syscallarg(int) gidsetsize;
	syscallarg(gid_t *) gidset;
};

struct sys_setgroups_args {
	syscallarg(int) gidsetsize;
	syscallarg(const gid_t *) gidset;
};

struct sys_setpgid_args {
	syscallarg(pid_t) pid;
	syscallarg(int) pgid;
};

struct compat_time_sys_setitimer_args {
	syscallarg(int) which;
	syscallarg(const struct itimerval_compat *) itv;
	syscallarg(struct itimerval_compat *) oitv;
};

struct compat_25_sys_swapon_args {
	syscallarg(char *) name;
};

struct compat_time_sys_getitimer_args {
	syscallarg(int) which;
	syscallarg(struct itimerval_compat *) itv;
};

struct compat_43_sys_gethostname_args {
	syscallarg(char *) hostname;
	syscallarg(u_int) len;
};

struct compat_43_sys_sethostname_args {
	syscallarg(char *) hostname;
	syscallarg(u_int) len;
};

struct sys_dup2_args {
	syscallarg(int) from;
	syscallarg(int) to;
};

struct sys_fcntl_args {
	syscallarg(int) fd;
	syscallarg(int) cmd;
	syscallarg(void *) arg;
};

struct compat_35_sys_select_args {
	syscallarg(int) nd;
	syscallarg(fd_set *) in;
	syscallarg(fd_set *) ou;
	syscallarg(fd_set *) ex;
	syscallarg(struct timeval_compat *) tv;
};

struct sys_fsync_args {
	syscallarg(int) fd;
};

struct sys_setpriority_args {
	syscallarg(int) which;
	syscallarg(id_t) who;
	syscallarg(int) prio;
};

struct sys_socket_args {
	syscallarg(int) domain;
	syscallarg(int) type;
	syscallarg(int) protocol;
};

struct sys_connect_args {
	syscallarg(int) s;
	syscallarg(const struct sockaddr *) name;
	syscallarg(socklen_t) namelen;
};

struct compat_43_sys_accept_args {
	syscallarg(int) s;
	syscallarg(caddr_t) name;
	syscallarg(int *) anamelen;
};

struct sys_getpriority_args {
	syscallarg(int) which;
	syscallarg(id_t) who;
};

struct compat_43_sys_send_args {
	syscallarg(int) s;
	syscallarg(caddr_t) buf;
	syscallarg(int) len;
	syscallarg(int) flags;
};

struct compat_43_sys_recv_args {
	syscallarg(int) s;
	syscallarg(caddr_t) buf;
	syscallarg(int) len;
	syscallarg(int) flags;
};

struct sys_sigreturn_args {
	syscallarg(struct sigcontext *) sigcntxp;
};

struct sys_bind_args {
	syscallarg(int) s;
	syscallarg(const struct sockaddr *) name;
	syscallarg(socklen_t) namelen;
};

struct sys_setsockopt_args {
	syscallarg(int) s;
	syscallarg(int) level;
	syscallarg(int) name;
	syscallarg(const void *) val;
	syscallarg(socklen_t) valsize;
};

struct sys_listen_args {
	syscallarg(int) s;
	syscallarg(int) backlog;
};

struct compat_43_sys_sigvec_args {
	syscallarg(int) signum;
	syscallarg(struct sigvec *) nsv;
	syscallarg(struct sigvec *) osv;
};

struct compat_43_sys_sigblock_args {
	syscallarg(int) mask;
};

struct compat_43_sys_sigsetmask_args {
	syscallarg(int) mask;
};

struct sys_sigsuspend_args {
	syscallarg(int) mask;
};

struct compat_43_sys_sigstack_args {
	syscallarg(struct sigstack *) nss;
	syscallarg(struct sigstack *) oss;
};

struct compat_43_sys_recvmsg_args {
	syscallarg(int) s;
	syscallarg(struct omsghdr *) msg;
	syscallarg(int) flags;
};

struct compat_43_sys_sendmsg_args {
	syscallarg(int) s;
	syscallarg(caddr_t) msg;
	syscallarg(int) flags;
};

struct compat_time_sys_gettimeofday_args {
	syscallarg(struct timeval_compat *) tp;
	syscallarg(struct timezone *) tzp;
};

struct compat_time_sys_getrusage_args {
	syscallarg(int) who;
	syscallarg(struct rusage_compat *) rusage;
};

struct sys_getsockopt_args {
	syscallarg(int) s;
	syscallarg(int) level;
	syscallarg(int) name;
	syscallarg(void *) val;
	syscallarg(socklen_t *) avalsize;
};

struct sys_readv_args {
	syscallarg(int) fd;
	syscallarg(const struct iovec *) iovp;
	syscallarg(int) iovcnt;
};

struct sys_writev_args {
	syscallarg(int) fd;
	syscallarg(const struct iovec *) iovp;
	syscallarg(int) iovcnt;
};

struct compat_time_sys_settimeofday_args {
	syscallarg(const struct timeval_compat *) tv;
	syscallarg(const struct timezone *) tzp;
};

struct sys_fchown_args {
	syscallarg(int) fd;
	syscallarg(uid_t) uid;
	syscallarg(gid_t) gid;
};

struct sys_fchmod_args {
	syscallarg(int) fd;
	syscallarg(mode_t) mode;
};

struct compat_43_sys_recvfrom_args {
	syscallarg(int) s;
	syscallarg(caddr_t) buf;
	syscallarg(size_t) len;
	syscallarg(int) flags;
	syscallarg(caddr_t) from;
	syscallarg(int *) fromlenaddr;
};

struct sys_setreuid_args {
	syscallarg(uid_t) ruid;
	syscallarg(uid_t) euid;
};

struct sys_setregid_args {
	syscallarg(gid_t) rgid;
	syscallarg(gid_t) egid;
};

struct openbsd_sys_rename_args {
	syscallarg(char *) from;
	syscallarg(char *) to;
};

struct compat_43_openbsd_sys_truncate_args {
	syscallarg(char *) path;
	syscallarg(long) length;
};

struct compat_43_sys_ftruncate_args {
	syscallarg(int) fd;
	syscallarg(long) length;
};

struct sys_flock_args {
	syscallarg(int) fd;
	syscallarg(int) how;
};

struct openbsd_sys_mkfifo_args {
	syscallarg(char *) path;
	syscallarg(mode_t) mode;
};

struct sys_sendto_args {
	syscallarg(int) s;
	syscallarg(const void *) buf;
	syscallarg(size_t) len;
	syscallarg(int) flags;
	syscallarg(const struct sockaddr *) to;
	syscallarg(socklen_t) tolen;
};

struct sys_shutdown_args {
	syscallarg(int) s;
	syscallarg(int) how;
};

struct sys_socketpair_args {
	syscallarg(int) domain;
	syscallarg(int) type;
	syscallarg(int) protocol;
	syscallarg(int *) rsv;
};

struct openbsd_sys_mkdir_args {
	syscallarg(char *) path;
	syscallarg(mode_t) mode;
};

struct openbsd_sys_rmdir_args {
	syscallarg(char *) path;
};

struct compat_35_openbsd_sys_utimes_args {
	syscallarg(char *) path;
	syscallarg(const struct timeval_compat *) tptr;
};

struct compat_35_sys_adjtime_args {
	syscallarg(const struct timeval_compat *) delta;
	syscallarg(struct timeval_compat *) olddelta;
};

struct compat_43_sys_getpeername_args {
	syscallarg(int) fdes;
	syscallarg(caddr_t) asa;
	syscallarg(socklen_t *) alen;
};

struct compat_43_sys_sethostid_args {
	syscallarg(int32_t) hostid;
};

struct compat_43_sys_getrlimit_args {
	syscallarg(int) which;
	syscallarg(struct ogetrlimit *) rlp;
};

struct compat_43_sys_setrlimit_args {
	syscallarg(int) which;
	syscallarg(struct ogetrlimit *) rlp;
};

struct compat_43_sys_killpg_args {
	syscallarg(int) pgid;
	syscallarg(int) signum;
};

struct openbsd_sys_quotactl_args {
	syscallarg(char *) path;
	syscallarg(int) cmd;
	syscallarg(int) uid;
	syscallarg(char *) arg;
};

struct compat_43_sys_getsockname_args {
	syscallarg(int) fdec;
	syscallarg(caddr_t) asa;
	syscallarg(int *) alen;
};

struct sys_nfssvc_args {
	syscallarg(int) flag;
	syscallarg(void *) argp;
};

struct compat_43_sys_getdirentries_args {
	syscallarg(int) fd;
	syscallarg(char *) buf;
	syscallarg(int) count;
	syscallarg(long *) basep;
};

struct compat_25_openbsd_sys_statfs_args {
	syscallarg(char *) path;
	syscallarg(struct ostatfs *) buf;
};

struct compat_25_sys_fstatfs_args {
	syscallarg(int) fd;
	syscallarg(struct ostatfs *) buf;
};

struct openbsd_sys_getfh_args {
	syscallarg(char *) fname;
	syscallarg(fhandle_t *) fhp;
};

struct compat_09_sys_getdomainname_args {
	syscallarg(char *) domainname;
	syscallarg(int) len;
};

struct compat_09_sys_setdomainname_args {
	syscallarg(char *) domainname;
	syscallarg(int) len;
};

struct compat_09_sys_uname_args {
	syscallarg(struct outsname *) name;
};

struct sys_sysarch_args {
	syscallarg(int) op;
	syscallarg(void *) parms;
};

struct compat_10_sys_semsys_args {
	syscallarg(int) which;
	syscallarg(int) a2;
	syscallarg(int) a3;
	syscallarg(int) a4;
	syscallarg(int) a5;
};

struct compat_10_sys_msgsys_args {
	syscallarg(int) which;
	syscallarg(int) a2;
	syscallarg(int) a3;
	syscallarg(int) a4;
	syscallarg(int) a5;
	syscallarg(int) a6;
};

struct compat_10_sys_shmsys_args {
	syscallarg(int) which;
	syscallarg(int) a2;
	syscallarg(int) a3;
	syscallarg(int) a4;
};

struct sys_pread_args {
	syscallarg(int) fd;
	syscallarg(void *) buf;
	syscallarg(size_t) nbyte;
	syscallarg(int) pad;
	syscallarg(off_t) offset;
};

struct sys_pwrite_args {
	syscallarg(int) fd;
	syscallarg(const void *) buf;
	syscallarg(size_t) nbyte;
	syscallarg(int) pad;
	syscallarg(off_t) offset;
};

struct sys_setgid_args {
	syscallarg(gid_t) gid;
};

struct sys_setegid_args {
	syscallarg(gid_t) egid;
};

struct sys_seteuid_args {
	syscallarg(uid_t) euid;
};

struct compat_35_sys_stat_args {
	syscallarg(char *) path;
	syscallarg(struct stat35 *) ub;
};

struct compat_35_sys_fstat_args {
	syscallarg(int) fd;
	syscallarg(struct stat35 *) sb;
};

struct compat_35_sys_lstat_args {
	syscallarg(char *) path;
	syscallarg(struct stat35 *) ub;
};

struct openbsd_sys_pathconf_args {
	syscallarg(char *) path;
	syscallarg(int) name;
};

struct sys_fpathconf_args {
	syscallarg(int) fd;
	syscallarg(int) name;
};

struct sys_swapctl_args {
	syscallarg(int) cmd;
	syscallarg(const void *) arg;
	syscallarg(int) misc;
};

struct sys_getrlimit_args {
	syscallarg(int) which;
	syscallarg(struct rlimit *) rlp;
};

struct sys_setrlimit_args {
	syscallarg(int) which;
	syscallarg(const struct rlimit *) rlp;
};

struct sys_getdirentries_args {
	syscallarg(int) fd;
	syscallarg(char *) buf;
	syscallarg(int) count;
	syscallarg(long *) basep;
};

struct sys_mmap_args {
	syscallarg(void *) addr;
	syscallarg(size_t) len;
	syscallarg(int) prot;
	syscallarg(int) flags;
	syscallarg(int) fd;
	syscallarg(long) pad;
	syscallarg(off_t) pos;
};

struct sys_lseek_args {
	syscallarg(int) fd;
	syscallarg(int) pad;
	syscallarg(off_t) offset;
	syscallarg(int) whence;
};

struct openbsd_sys_truncate_args {
	syscallarg(char *) path;
	syscallarg(int) pad;
	syscallarg(off_t) length;
};

struct sys_ftruncate_args {
	syscallarg(int) fd;
	syscallarg(int) pad;
	syscallarg(off_t) length;
};

struct openbsd_sys___sysctl_args {
	syscallarg(int *) name;
	syscallarg(u_int) namelen;
	syscallarg(void *) old;
	syscallarg(size_t *) oldlenp;
	syscallarg(void *) new;
	syscallarg(size_t) newlen;
};

struct sys_mlock_args {
	syscallarg(const void *) addr;
	syscallarg(size_t) len;
};

struct sys_munlock_args {
	syscallarg(const void *) addr;
	syscallarg(size_t) len;
};

struct sys_undelete_args {
	syscallarg(const char *) path;
};

struct compat_35_sys_futimes_args {
	syscallarg(int) fd;
	syscallarg(const struct timeval_compat *) tptr;
};

struct sys_getpgid_args {
	syscallarg(pid_t) pid;
};

struct compat_23_sys___semctl_args {
	syscallarg(int) semid;
	syscallarg(int) semnum;
	syscallarg(int) cmd;
	syscallarg(union semun *) arg;
};

struct sys_semget_args {
	syscallarg(key_t) key;
	syscallarg(int) nsems;
	syscallarg(int) semflg;
};

struct compat_35_sys_semop_args {
	syscallarg(int) semid;
	syscallarg(struct sembuf *) sops;
	syscallarg(u_int) nsops;
};

struct compat_23_sys_msgctl_args {
	syscallarg(int) msqid;
	syscallarg(int) cmd;
	syscallarg(struct msqid_ds23 *) buf;
};

struct sys_msgget_args {
	syscallarg(key_t) key;
	syscallarg(int) msgflg;
};

struct sys_msgsnd_args {
	syscallarg(int) msqid;
	syscallarg(const void *) msgp;
	syscallarg(size_t) msgsz;
	syscallarg(int) msgflg;
};

struct sys_msgrcv_args {
	syscallarg(int) msqid;
	syscallarg(void *) msgp;
	syscallarg(size_t) msgsz;
	syscallarg(long) msgtyp;
	syscallarg(int) msgflg;
};

struct sys_shmat_args {
	syscallarg(int) shmid;
	syscallarg(const void *) shmaddr;
	syscallarg(int) shmflg;
};

struct compat_23_sys_shmctl_args {
	syscallarg(int) shmid;
	syscallarg(int) cmd;
	syscallarg(struct shmid_ds23 *) buf;
};

struct sys_shmdt_args {
	syscallarg(const void *) shmaddr;
};

struct compat_35_sys_shmget_args {
	syscallarg(key_t) key;
	syscallarg(int) size;
	syscallarg(int) shmflg;
};

struct compat_time_sys_clock_gettime_args {
	syscallarg(clockid_t) clock_id;
	syscallarg(struct timespec_compat *) tp;
};

struct compat_time_sys_clock_settime_args {
	syscallarg(clockid_t) clock_id;
	syscallarg(const struct timespec_compat *) tp;
};

struct compat_time_sys_clock_getres_args {
	syscallarg(clockid_t) clock_id;
	syscallarg(struct timespec_compat *) tp;
};

struct compat_time_sys_nanosleep_args {
	syscallarg(const struct timespec_compat *) rqtp;
	syscallarg(struct timespec_compat *) rmtp;
};

struct sys_minherit_args {
	syscallarg(void *) addr;
	syscallarg(size_t) len;
	syscallarg(int) inherit;
};

struct sys_rfork_args {
	syscallarg(int) flags;
};

struct sys_poll_args {
	syscallarg(struct pollfd *) fds;
	syscallarg(u_int) nfds;
	syscallarg(int) timeout;
};

struct openbsd_sys_lchown_args {
	syscallarg(char *) path;
	syscallarg(uid_t) uid;
	syscallarg(gid_t) gid;
};

struct sys_getsid_args {
	syscallarg(pid_t) pid;
};

struct sys_msync_args {
	syscallarg(void *) addr;
	syscallarg(size_t) len;
	syscallarg(int) flags;
};

struct compat_35_sys___semctl_args {
	syscallarg(int) semid;
	syscallarg(int) semnum;
	syscallarg(int) cmd;
	syscallarg(union semun *) arg;
};

struct compat_35_sys_shmctl_args {
	syscallarg(int) shmid;
	syscallarg(int) cmd;
	syscallarg(struct shmid_ds35 *) buf;
};

struct compat_35_sys_msgctl_args {
	syscallarg(int) msqid;
	syscallarg(int) cmd;
	syscallarg(struct msqid_ds35 *) buf;
};

struct sys_getfsstat_args {
	syscallarg(struct statfs *) buf;
	syscallarg(size_t) bufsize;
	syscallarg(int) flags;
};

struct openbsd_sys_statfs_args {
	syscallarg(char *) path;
	syscallarg(struct statfs *) buf;
};

struct sys_fstatfs_args {
	syscallarg(int) fd;
	syscallarg(struct statfs *) buf;
};

struct sys_pipe_args {
	syscallarg(int *) fdp;
};

struct sys_fhopen_args {
	syscallarg(const fhandle_t *) fhp;
	syscallarg(int) flags;
};

struct compat_35_sys_fhstat_args {
	syscallarg(fhandle_t *) fhp;
	syscallarg(struct stat_compat *) sb;
};

struct sys_fhstatfs_args {
	syscallarg(const fhandle_t *) fhp;
	syscallarg(struct statfs *) buf;
};

struct sys_preadv_args {
	syscallarg(int) fd;
	syscallarg(const struct iovec *) iovp;
	syscallarg(int) iovcnt;
	syscallarg(int) pad;
	syscallarg(off_t) offset;
};

struct sys_pwritev_args {
	syscallarg(int) fd;
	syscallarg(const struct iovec *) iovp;
	syscallarg(int) iovcnt;
	syscallarg(int) pad;
	syscallarg(off_t) offset;
};

struct compat_time_sys_kevent_args {
	syscallarg(int) fd;
	syscallarg(const struct kevent *) changelist;
	syscallarg(int) nchanges;
	syscallarg(struct kevent *) eventlist;
	syscallarg(int) nevents;
	syscallarg(const struct timespec_compat *) timeout;
};

struct sys_mlockall_args {
	syscallarg(int) flags;
};

struct sys_getpeereid_args {
	syscallarg(int) fdes;
	syscallarg(uid_t *) euid;
	syscallarg(gid_t *) egid;
};

struct sys_extattrctl_args {
	syscallarg(const char *) path;
	syscallarg(int) cmd;
	syscallarg(const char *) filename;
	syscallarg(int) attrnamespace;
	syscallarg(const char *) attrname;
};

struct sys_extattr_set_file_args {
	syscallarg(const char *) path;
	syscallarg(int) attrnamespace;
	syscallarg(const char *) attrname;
	syscallarg(const void *) data;
	syscallarg(size_t) nbytes;
};

struct sys_extattr_get_file_args {
	syscallarg(const char *) path;
	syscallarg(int) attrnamespace;
	syscallarg(const char *) attrname;
	syscallarg(void *) data;
	syscallarg(size_t) nbytes;
};

struct sys_extattr_delete_file_args {
	syscallarg(const char *) path;
	syscallarg(int) attrnamespace;
	syscallarg(const char *) attrname;
};

struct sys_extattr_set_fd_args {
	syscallarg(int) fd;
	syscallarg(int) attrnamespace;
	syscallarg(const char *) attrname;
	syscallarg(const void *) data;
	syscallarg(size_t) nbytes;
};

struct sys_extattr_get_fd_args {
	syscallarg(int) fd;
	syscallarg(int) attrnamespace;
	syscallarg(const char *) attrname;
	syscallarg(void *) data;
	syscallarg(size_t) nbytes;
};

struct sys_extattr_delete_fd_args {
	syscallarg(int) fd;
	syscallarg(int) attrnamespace;
	syscallarg(const char *) attrname;
};

struct sys_getresuid_args {
	syscallarg(uid_t *) ruid;
	syscallarg(uid_t *) euid;
	syscallarg(uid_t *) suid;
};

struct sys_setresuid_args {
	syscallarg(uid_t) ruid;
	syscallarg(uid_t) euid;
	syscallarg(uid_t) suid;
};

struct sys_getresgid_args {
	syscallarg(gid_t *) rgid;
	syscallarg(gid_t *) egid;
	syscallarg(gid_t *) sgid;
};

struct sys_setresgid_args {
	syscallarg(gid_t) rgid;
	syscallarg(gid_t) egid;
	syscallarg(gid_t) sgid;
};

struct sys_mquery_args {
	syscallarg(void *) addr;
	syscallarg(size_t) len;
	syscallarg(int) prot;
	syscallarg(int) flags;
	syscallarg(int) fd;
	syscallarg(long) pad;
	syscallarg(off_t) pos;
};

struct sys_closefrom_args {
	syscallarg(int) fd;
};

struct sys_sigaltstack_args {
	syscallarg(const struct sigaltstack *) nss;
	syscallarg(struct sigaltstack *) oss;
};

struct sys_shmget_args {
	syscallarg(key_t) key;
	syscallarg(size_t) size;
	syscallarg(int) shmflg;
};

struct sys_semop_args {
	syscallarg(int) semid;
	syscallarg(struct sembuf *) sops;
	syscallarg(size_t) nsops;
};

struct compat_36_sys_stat_args {
	syscallarg(char *) path;
	syscallarg(struct stat_compat *) ub;
};

struct compat_36_sys_fstat_args {
	syscallarg(int) fd;
	syscallarg(struct stat_compat *) sb;
};

struct compat_36_sys_lstat_args {
	syscallarg(char *) path;
	syscallarg(struct stat_compat *) ub;
};

struct compat_36_sys_fhstat_args {
	syscallarg(const fhandle_t *) fhp;
	syscallarg(struct stat_compat *) sb;
};

struct sys___semctl_args {
	syscallarg(int) semid;
	syscallarg(int) semnum;
	syscallarg(int) cmd;
	syscallarg(union semun *) arg;
};

struct sys_shmctl_args {
	syscallarg(int) shmid;
	syscallarg(int) cmd;
	syscallarg(struct shmid_ds *) buf;
};

struct sys_msgctl_args {
	syscallarg(int) msqid;
	syscallarg(int) cmd;
	syscallarg(struct msqid_ds *) buf;
};

/*
 * System call prototypes.
 */

int	sys_exit(struct proc *, void *, register_t *);
int	sys_fork(struct proc *, void *, register_t *);
int	sys_read(struct proc *, void *, register_t *);
int	sys_write(struct proc *, void *, register_t *);
int	openbsd_sys_open(struct proc *, void *, register_t *);
int	sys_close(struct proc *, void *, register_t *);
int	compat_time_sys_wait4(struct proc *, void *, register_t *);
int	compat_43_openbsd_sys_creat(struct proc *, void *, register_t *);
int	openbsd_sys_link(struct proc *, void *, register_t *);
int	openbsd_sys_unlink(struct proc *, void *, register_t *);
int	openbsd_sys_chdir(struct proc *, void *, register_t *);
int	sys_fchdir(struct proc *, void *, register_t *);
int	openbsd_sys_mknod(struct proc *, void *, register_t *);
int	openbsd_sys_chmod(struct proc *, void *, register_t *);
int	openbsd_sys_chown(struct proc *, void *, register_t *);
int	sys_obreak(struct proc *, void *, register_t *);
int	compat_25_sys_getfsstat(struct proc *, void *, register_t *);
int	compat_43_sys_lseek(struct proc *, void *, register_t *);
int	sys_getpid(struct proc *, void *, register_t *);
int	openbsd_sys_mount(struct proc *, void *, register_t *);
int	openbsd_sys_unmount(struct proc *, void *, register_t *);
int	sys_setuid(struct proc *, void *, register_t *);
int	sys_getuid(struct proc *, void *, register_t *);
int	sys_geteuid(struct proc *, void *, register_t *);
#ifdef PTRACE
int	sys_ptrace(struct proc *, void *, register_t *);
#else
#endif
int	sys_recvmsg(struct proc *, void *, register_t *);
int	sys_sendmsg(struct proc *, void *, register_t *);
int	sys_recvfrom(struct proc *, void *, register_t *);
int	sys_accept(struct proc *, void *, register_t *);
int	sys_getpeername(struct proc *, void *, register_t *);
int	sys_getsockname(struct proc *, void *, register_t *);
int	openbsd_sys_access(struct proc *, void *, register_t *);
int	openbsd_sys_chflags(struct proc *, void *, register_t *);
int	sys_fchflags(struct proc *, void *, register_t *);
int	sys_sync(struct proc *, void *, register_t *);
int	sys_kill(struct proc *, void *, register_t *);
int	compat_43_openbsd_sys_stat(struct proc *, void *, register_t *);
int	sys_getppid(struct proc *, void *, register_t *);
int	compat_43_openbsd_sys_lstat(struct proc *, void *, register_t *);
int	sys_dup(struct proc *, void *, register_t *);
int	sys_opipe(struct proc *, void *, register_t *);
int	sys_getegid(struct proc *, void *, register_t *);
int	sys_profil(struct proc *, void *, register_t *);
#ifdef KTRACE
int	openbsd_sys_ktrace(struct proc *, void *, register_t *);
#else
#endif
int	sys_sigaction(struct proc *, void *, register_t *);
int	sys_getgid(struct proc *, void *, register_t *);
int	sys_sigprocmask(struct proc *, void *, register_t *);
int	sys_getlogin(struct proc *, void *, register_t *);
int	sys_setlogin(struct proc *, void *, register_t *);
#ifdef ACCOUNTING
int	sys_acct(struct proc *, void *, register_t *);
#else
#endif
int	sys_sigpending(struct proc *, void *, register_t *);
int	compat_35_sys_osigaltstack(struct proc *, void *, register_t *);
int	sys_ioctl(struct proc *, void *, register_t *);
int	sys_reboot(struct proc *, void *, register_t *);
int	openbsd_sys_revoke(struct proc *, void *, register_t *);
int	openbsd_sys_symlink(struct proc *, void *, register_t *);
int	openbsd_sys_readlink(struct proc *, void *, register_t *);
int	openbsd_sys_execve(struct proc *, void *, register_t *);
int	sys_umask(struct proc *, void *, register_t *);
int	openbsd_sys_chroot(struct proc *, void *, register_t *);
int	compat_43_sys_fstat(struct proc *, void *, register_t *);
int	compat_43_sys_getkerninfo(struct proc *, void *, register_t *);
int	compat_43_sys_getpagesize(struct proc *, void *, register_t *);
int	compat_25_sys_omsync(struct proc *, void *, register_t *);
int	sys_vfork(struct proc *, void *, register_t *);
int	sys_sbrk(struct proc *, void *, register_t *);
int	compat_43_sys_mmap(struct proc *, void *, register_t *);
int	sys_ovadvise(struct proc *, void *, register_t *);
int	sys_munmap(struct proc *, void *, register_t *);
int	sys_mprotect(struct proc *, void *, register_t *);
int	sys_madvise(struct proc *, void *, register_t *);
int	sys_mincore(struct proc *, void *, register_t *);
int	sys_getgroups(struct proc *, void *, register_t *);
int	sys_setgroups(struct proc *, void *, register_t *);
int	sys_getpgrp(struct proc *, void *, register_t *);
int	sys_setpgid(struct proc *, void *, register_t *);
int	compat_time_sys_setitimer(struct proc *, void *, register_t *);
int	compat_43_sys_wait(struct proc *, void *, register_t *);
int	compat_25_sys_swapon(struct proc *, void *, register_t *);
int	compat_time_sys_getitimer(struct proc *, void *, register_t *);
int	compat_43_sys_gethostname(struct proc *, void *, register_t *);
int	compat_43_sys_sethostname(struct proc *, void *, register_t *);
int	compat_43_sys_getdtablesize(struct proc *, void *, register_t *);
int	sys_dup2(struct proc *, void *, register_t *);
int	sys_fcntl(struct proc *, void *, register_t *);
int	compat_35_sys_select(struct proc *, void *, register_t *);
int	sys_fsync(struct proc *, void *, register_t *);
int	sys_setpriority(struct proc *, void *, register_t *);
int	sys_socket(struct proc *, void *, register_t *);
int	sys_connect(struct proc *, void *, register_t *);
int	compat_43_sys_accept(struct proc *, void *, register_t *);
int	sys_getpriority(struct proc *, void *, register_t *);
int	compat_43_sys_send(struct proc *, void *, register_t *);
int	compat_43_sys_recv(struct proc *, void *, register_t *);
int	sys_sigreturn(struct proc *, void *, register_t *);
int	sys_bind(struct proc *, void *, register_t *);
int	sys_setsockopt(struct proc *, void *, register_t *);
int	sys_listen(struct proc *, void *, register_t *);
int	compat_43_sys_sigvec(struct proc *, void *, register_t *);
int	compat_43_sys_sigblock(struct proc *, void *, register_t *);
int	compat_43_sys_sigsetmask(struct proc *, void *, register_t *);
int	sys_sigsuspend(struct proc *, void *, register_t *);
int	compat_43_sys_sigstack(struct proc *, void *, register_t *);
int	compat_43_sys_recvmsg(struct proc *, void *, register_t *);
int	compat_43_sys_sendmsg(struct proc *, void *, register_t *);
int	compat_time_sys_gettimeofday(struct proc *, void *, register_t *);
int	compat_time_sys_getrusage(struct proc *, void *, register_t *);
int	sys_getsockopt(struct proc *, void *, register_t *);
int	sys_readv(struct proc *, void *, register_t *);
int	sys_writev(struct proc *, void *, register_t *);
int	compat_time_sys_settimeofday(struct proc *, void *, register_t *);
int	sys_fchown(struct proc *, void *, register_t *);
int	sys_fchmod(struct proc *, void *, register_t *);
int	compat_43_sys_recvfrom(struct proc *, void *, register_t *);
int	sys_setreuid(struct proc *, void *, register_t *);
int	sys_setregid(struct proc *, void *, register_t *);
int	openbsd_sys_rename(struct proc *, void *, register_t *);
int	compat_43_openbsd_sys_truncate(struct proc *, void *, register_t *);
int	compat_43_sys_ftruncate(struct proc *, void *, register_t *);
int	sys_flock(struct proc *, void *, register_t *);
int	openbsd_sys_mkfifo(struct proc *, void *, register_t *);
int	sys_sendto(struct proc *, void *, register_t *);
int	sys_shutdown(struct proc *, void *, register_t *);
int	sys_socketpair(struct proc *, void *, register_t *);
int	openbsd_sys_mkdir(struct proc *, void *, register_t *);
int	openbsd_sys_rmdir(struct proc *, void *, register_t *);
int	compat_35_openbsd_sys_utimes(struct proc *, void *, register_t *);
int	compat_35_sys_adjtime(struct proc *, void *, register_t *);
int	compat_43_sys_getpeername(struct proc *, void *, register_t *);
int	compat_43_sys_gethostid(struct proc *, void *, register_t *);
int	compat_43_sys_sethostid(struct proc *, void *, register_t *);
int	compat_43_sys_getrlimit(struct proc *, void *, register_t *);
int	compat_43_sys_setrlimit(struct proc *, void *, register_t *);
int	compat_43_sys_killpg(struct proc *, void *, register_t *);
int	sys_setsid(struct proc *, void *, register_t *);
int	openbsd_sys_quotactl(struct proc *, void *, register_t *);
int	compat_43_sys_getsockname(struct proc *, void *, register_t *);
#if defined(NFSCLIENT) || defined(NFSSERVER)
int	sys_nfssvc(struct proc *, void *, register_t *);
#else
#endif
int	compat_43_sys_getdirentries(struct proc *, void *, register_t *);
int	compat_25_openbsd_sys_statfs(struct proc *, void *, register_t *);
int	compat_25_sys_fstatfs(struct proc *, void *, register_t *);
int	openbsd_sys_getfh(struct proc *, void *, register_t *);
int	compat_09_sys_getdomainname(struct proc *, void *, register_t *);
int	compat_09_sys_setdomainname(struct proc *, void *, register_t *);
int	compat_09_sys_uname(struct proc *, void *, register_t *);
int	sys_sysarch(struct proc *, void *, register_t *);
#if defined(SYSVSEM) && !defined(__LP64__)
int	compat_10_sys_semsys(struct proc *, void *, register_t *);
#else
#endif
#if defined(SYSVMSG) && !defined(__LP64__)
int	compat_10_sys_msgsys(struct proc *, void *, register_t *);
#else
#endif
#if defined(SYSVSHM) && !defined(__LP64__)
int	compat_10_sys_shmsys(struct proc *, void *, register_t *);
#else
#endif
int	sys_pread(struct proc *, void *, register_t *);
int	sys_pwrite(struct proc *, void *, register_t *);
int	sys_setgid(struct proc *, void *, register_t *);
int	sys_setegid(struct proc *, void *, register_t *);
int	sys_seteuid(struct proc *, void *, register_t *);
int	compat_35_sys_stat(struct proc *, void *, register_t *);
int	compat_35_sys_fstat(struct proc *, void *, register_t *);
int	compat_35_sys_lstat(struct proc *, void *, register_t *);
int	openbsd_sys_pathconf(struct proc *, void *, register_t *);
int	sys_fpathconf(struct proc *, void *, register_t *);
int	sys_swapctl(struct proc *, void *, register_t *);
int	sys_getrlimit(struct proc *, void *, register_t *);
int	sys_setrlimit(struct proc *, void *, register_t *);
int	sys_getdirentries(struct proc *, void *, register_t *);
int	sys_mmap(struct proc *, void *, register_t *);
int	sys_lseek(struct proc *, void *, register_t *);
int	openbsd_sys_truncate(struct proc *, void *, register_t *);
int	sys_ftruncate(struct proc *, void *, register_t *);
int	openbsd_sys___sysctl(struct proc *, void *, register_t *);
int	sys_mlock(struct proc *, void *, register_t *);
int	sys_munlock(struct proc *, void *, register_t *);
int	sys_undelete(struct proc *, void *, register_t *);
int	compat_35_sys_futimes(struct proc *, void *, register_t *);
int	sys_getpgid(struct proc *, void *, register_t *);
#ifdef LKM
int	sys_lkmnosys(struct proc *, void *, register_t *);
int	sys_lkmnosys(struct proc *, void *, register_t *);
int	sys_lkmnosys(struct proc *, void *, register_t *);
int	sys_lkmnosys(struct proc *, void *, register_t *);
int	sys_lkmnosys(struct proc *, void *, register_t *);
int	sys_lkmnosys(struct proc *, void *, register_t *);
int	sys_lkmnosys(struct proc *, void *, register_t *);
int	sys_lkmnosys(struct proc *, void *, register_t *);
int	sys_lkmnosys(struct proc *, void *, register_t *);
int	sys_lkmnosys(struct proc *, void *, register_t *);
#else	/* !LKM */
#endif	/* !LKM */
#ifdef SYSVSEM
int	compat_23_sys___semctl(struct proc *, void *, register_t *);
int	sys_semget(struct proc *, void *, register_t *);
int	compat_35_sys_semop(struct proc *, void *, register_t *);
#else
#endif
#ifdef SYSVMSG
int	compat_23_sys_msgctl(struct proc *, void *, register_t *);
int	sys_msgget(struct proc *, void *, register_t *);
int	sys_msgsnd(struct proc *, void *, register_t *);
int	sys_msgrcv(struct proc *, void *, register_t *);
#else
#endif
#ifdef SYSVSHM
int	sys_shmat(struct proc *, void *, register_t *);
int	compat_23_sys_shmctl(struct proc *, void *, register_t *);
int	sys_shmdt(struct proc *, void *, register_t *);
int	compat_35_sys_shmget(struct proc *, void *, register_t *);
#else
#endif
int	compat_time_sys_clock_gettime(struct proc *, void *, register_t *);
int	compat_time_sys_clock_settime(struct proc *, void *, register_t *);
int	compat_time_sys_clock_getres(struct proc *, void *, register_t *);
int	compat_time_sys_nanosleep(struct proc *, void *, register_t *);
int	sys_minherit(struct proc *, void *, register_t *);
int	sys_rfork(struct proc *, void *, register_t *);
int	sys_poll(struct proc *, void *, register_t *);
int	sys_issetugid(struct proc *, void *, register_t *);
int	openbsd_sys_lchown(struct proc *, void *, register_t *);
int	sys_getsid(struct proc *, void *, register_t *);
int	sys_msync(struct proc *, void *, register_t *);
#ifdef SYSVSEM
int	compat_35_sys___semctl(struct proc *, void *, register_t *);
#else
#endif
#ifdef SYSVSHM
int	compat_35_sys_shmctl(struct proc *, void *, register_t *);
#else
#endif
#ifdef SYSVMSG
int	compat_35_sys_msgctl(struct proc *, void *, register_t *);
#else
#endif
int	sys_getfsstat(struct proc *, void *, register_t *);
int	openbsd_sys_statfs(struct proc *, void *, register_t *);
int	sys_fstatfs(struct proc *, void *, register_t *);
int	sys_pipe(struct proc *, void *, register_t *);
int	sys_fhopen(struct proc *, void *, register_t *);
int	compat_35_sys_fhstat(struct proc *, void *, register_t *);
int	sys_fhstatfs(struct proc *, void *, register_t *);
int	sys_preadv(struct proc *, void *, register_t *);
int	sys_pwritev(struct proc *, void *, register_t *);
int	sys_kqueue(struct proc *, void *, register_t *);
int	compat_time_sys_kevent(struct proc *, void *, register_t *);
int	sys_mlockall(struct proc *, void *, register_t *);
int	sys_munlockall(struct proc *, void *, register_t *);
int	sys_getpeereid(struct proc *, void *, register_t *);
#ifdef UFS_EXTATTR
int	sys_extattrctl(struct proc *, void *, register_t *);
int	sys_extattr_set_file(struct proc *, void *, register_t *);
int	sys_extattr_get_file(struct proc *, void *, register_t *);
int	sys_extattr_delete_file(struct proc *, void *, register_t *);
int	sys_extattr_set_fd(struct proc *, void *, register_t *);
int	sys_extattr_get_fd(struct proc *, void *, register_t *);
int	sys_extattr_delete_fd(struct proc *, void *, register_t *);
#else
#endif
int	sys_getresuid(struct proc *, void *, register_t *);
int	sys_setresuid(struct proc *, void *, register_t *);
int	sys_getresgid(struct proc *, void *, register_t *);
int	sys_setresgid(struct proc *, void *, register_t *);
int	sys_mquery(struct proc *, void *, register_t *);
int	sys_closefrom(struct proc *, void *, register_t *);
int	sys_sigaltstack(struct proc *, void *, register_t *);
#ifdef SYSVSHM
int	sys_shmget(struct proc *, void *, register_t *);
#else
#endif
#ifdef SYSVSEM
int	sys_semop(struct proc *, void *, register_t *);
#else
#endif
int	compat_36_sys_stat(struct proc *, void *, register_t *);
int	compat_36_sys_fstat(struct proc *, void *, register_t *);
int	compat_36_sys_lstat(struct proc *, void *, register_t *);
int	compat_36_sys_fhstat(struct proc *, void *, register_t *);
#ifdef SYSVSEM
int	sys___semctl(struct proc *, void *, register_t *);
#else
#endif
#ifdef SYSVSHM
int	sys_shmctl(struct proc *, void *, register_t *);
#else
#endif
#ifdef SYSVMSG
int	sys_msgctl(struct proc *, void *, register_t *);
#else
#endif
@


1.20
log
@a few missing #include
regen
@
text
@d7 1
a7 1
 * created from;	MirBSD: src/sys/compat/openbsd/syscalls.master,v 1.31 2004/12/03 09:35:00 tg Exp 
d856 1
a856 1
struct sys___sysctl_args {
d1434 1
a1434 1
int	sys___sysctl(struct proc *, void *, register_t *);
@


1.19
log
@more missing-nin
@
text
@d7 1
a7 1
 * created from;	MirBSD: src/sys/compat/openbsd/syscalls.master,v 1.28 2004/12/02 18:40:16 tg Exp 
d196 2
a197 2
struct compat_43_sys_stat_args {
	syscallarg(const char *) path;
d201 1
a201 1
struct compat_43_sys_lstat_args {
d217 2
a218 2
struct sys_ktrace_args {
	syscallarg(const char *) fname;
d245 1
a245 1
	syscallarg(const char *) path;
d371 1
a371 1
	syscallarg(const char *) name;
d633 2
a634 2
struct compat_35_sys_utimes_args {
	syscallarg(const char *) path;
d668 2
a669 2
struct sys_quotactl_args {
	syscallarg(const char *) path;
d693 2
a694 2
struct compat_25_sys_statfs_args {
	syscallarg(const char *) path;
d991 2
a992 2
struct sys_lchown_args {
	syscallarg(const char *) path;
d1032 2
a1033 2
struct sys_statfs_args {
	syscallarg(const char *) path;
d1285 1
a1285 1
int	compat_43_sys_stat(struct proc *, void *, register_t *);
d1287 1
a1287 1
int	compat_43_sys_lstat(struct proc *, void *, register_t *);
d1293 1
a1293 1
int	sys_ktrace(struct proc *, void *, register_t *);
d1381 1
a1381 1
int	compat_35_sys_utimes(struct proc *, void *, register_t *);
d1390 1
a1390 1
int	sys_quotactl(struct proc *, void *, register_t *);
d1397 1
a1397 1
int	compat_25_sys_statfs(struct proc *, void *, register_t *);
d1481 1
a1481 1
int	sys_lchown(struct proc *, void *, register_t *);
d1497 1
a1497 1
int	sys_statfs(struct proc *, void *, register_t *);
@


1.18
log
@regen and fix openbsd_file.c hard
@
text
@d7 1
a7 1
 * created from;	MirBSD: src/sys/compat/openbsd/syscalls.master,v 1.27 2004/12/02 18:33:47 tg Exp 
d1204 1
a1204 1
	syscallarg(const char *) path;
d1214 1
a1214 1
	syscallarg(const char *) path;
@


1.17
log
@regen files
fix references of incomplete types
@
text
@d7 1
a7 1
 * created from;	MirBSD: src/sys/compat/openbsd/syscalls.master,v 1.24 2004/12/02 08:46:45 tg Exp 
d59 2
a60 2
struct compat_43_sys_creat_args {
	syscallarg(const char *) path;
d73 2
a74 2
struct sys_chdir_args {
	syscallarg(const char *) path;
d81 2
a82 2
struct sys_mknod_args {
	syscallarg(const char *) path;
d87 2
a88 2
struct sys_chmod_args {
	syscallarg(const char *) path;
d92 2
a93 2
struct sys_chown_args {
	syscallarg(const char *) path;
d114 1
a114 1
struct sys_mount_args {
d116 1
a116 1
	syscallarg(const char *) path;
d121 2
a122 2
struct sys_unmount_args {
	syscallarg(const char *) path;
d176 2
a177 2
struct sys_access_args {
	syscallarg(const char *) path;
d181 2
a182 2
struct sys_chflags_args {
	syscallarg(const char *) path;
d263 2
a264 2
struct sys_revoke_args {
	syscallarg(const char *) path;
d267 3
a269 3
struct sys_symlink_args {
	syscallarg(const char *) path;
	syscallarg(const char *) link;
d272 2
a273 2
struct sys_readlink_args {
	syscallarg(const char *) path;
d278 2
a279 2
struct sys_execve_args {
	syscallarg(const char *) path;
d288 2
a289 2
struct sys_chroot_args {
	syscallarg(const char *) path;
d583 2
a584 2
struct compat_43_sys_truncate_args {
	syscallarg(const char *) path;
d598 2
a599 2
struct sys_mkfifo_args {
	syscallarg(const char *) path;
d624 2
a625 2
struct sys_mkdir_args {
	syscallarg(const char *) path;
d629 2
a630 2
struct sys_rmdir_args {
	syscallarg(const char *) path;
d703 2
a704 2
struct sys_getfh_args {
	syscallarg(const char *) fname;
d794 2
a795 2
struct sys_pathconf_args {
	syscallarg(const char *) path;
d844 2
a845 2
struct sys_truncate_args {
	syscallarg(const char *) path;
d1253 1
a1253 1
int	compat_43_sys_creat(struct proc *, void *, register_t *);
d1256 1
a1256 1
int	sys_chdir(struct proc *, void *, register_t *);
d1258 3
a1260 3
int	sys_mknod(struct proc *, void *, register_t *);
int	sys_chmod(struct proc *, void *, register_t *);
int	sys_chown(struct proc *, void *, register_t *);
d1265 2
a1266 2
int	sys_mount(struct proc *, void *, register_t *);
int	sys_unmount(struct proc *, void *, register_t *);
d1280 2
a1281 2
int	sys_access(struct proc *, void *, register_t *);
int	sys_chflags(struct proc *, void *, register_t *);
d1309 4
a1312 4
int	sys_revoke(struct proc *, void *, register_t *);
int	sys_symlink(struct proc *, void *, register_t *);
int	sys_readlink(struct proc *, void *, register_t *);
int	sys_execve(struct proc *, void *, register_t *);
d1314 1
a1314 1
int	sys_chroot(struct proc *, void *, register_t *);
d1372 1
a1372 1
int	compat_43_sys_truncate(struct proc *, void *, register_t *);
d1375 1
a1375 1
int	sys_mkfifo(struct proc *, void *, register_t *);
d1379 2
a1380 2
int	sys_mkdir(struct proc *, void *, register_t *);
int	sys_rmdir(struct proc *, void *, register_t *);
a1390 1
int	compat_43_sys_quota(struct proc *, void *, register_t *);
d1399 1
a1399 1
int	sys_getfh(struct proc *, void *, register_t *);
d1424 1
a1424 1
int	sys_pathconf(struct proc *, void *, register_t *);
d1432 1
a1432 1
int	sys_truncate(struct proc *, void *, register_t *);
@


1.16
log
@regen; merge
@
text
@d7 1
a7 1
 * created from;	MirBSD: src/sys/compat/openbsd/syscalls.master,v 1.23 2004/11/14 13:32:39 tg Exp 
d52 1
a52 1
struct sys_wait4_args {
d56 1
a56 1
	syscallarg(struct rusage *) rusage;
d518 1
a518 1
struct sys_getrusage_args {
d520 1
a520 1
	syscallarg(struct rusage *) rusage;
d1252 1
a1252 1
int	sys_wait4(struct proc *, void *, register_t *);
d1361 1
a1361 1
int	sys_getrusage(struct proc *, void *, register_t *);
@


1.15
log
@regen
@
text
@d7 1
a7 1
 * created from;	MirBSD: src/sys/compat/openbsd/syscalls.master,v 1.22 2004/11/14 12:51:54 tg Exp 
@


1.14
log
@regen
@
text
@d7 1
a7 1
 * created from;	MirBSD: src/sys/compat/openbsd/syscalls.master,v 1.21 2004/11/14 01:13:04 tg Exp 
d910 1
a910 1
	syscallarg(struct omsqid_ds *) buf;
d942 1
a942 1
	syscallarg(struct oshmid_ds *) buf;
@


1.13
log
@regen
@
text
@d7 1
a7 1
 * created from;	MirBSD: src/sys/compat/openbsd/syscalls.master,v 1.20 2004/11/14 00:58:19 tg Exp 
@


1.12
log
@regen and fix fallout
@
text
@d7 1
a7 1
 * created from;	MirBSD: src/sys/compat/openbsd/syscalls.master,v 1.19 2004/11/13 22:17:31 tg Exp 
d45 1
a45 1
	syscallarg(int) mode;
d61 1
a61 1
	syscallarg(int) mode;
d83 1
a83 1
	syscallarg(int) mode;
d89 1
a89 1
	syscallarg(int) mode;
d167 1
a167 1
	syscallarg(int *) alen;
d198 1
a198 1
	syscallarg(struct ostat *) ub;
d203 1
a203 1
	syscallarg(struct ostat *) ub;
d285 1
a285 1
	syscallarg(int) newmask;
d294 1
a294 1
	syscallarg(struct ostat *) sb;
d556 1
a556 1
	syscallarg(int) mode;
d600 1
a600 1
	syscallarg(int) mode;
d626 1
a626 1
	syscallarg(int) mode;
d781 1
a781 1
	syscallarg(struct stat_compat *) ub;
d786 1
a786 1
	syscallarg(struct stat_compat *) sb;
d791 1
a791 1
	syscallarg(struct stat_compat *) ub;
d1007 1
a1007 1
struct sys___semctl_args {
d1014 1
a1014 1
struct sys_shmctl_args {
d1017 1
a1017 1
	syscallarg(struct shmid_ds *) buf;
d1020 1
a1020 1
struct sys_msgctl_args {
d1023 1
a1023 1
	syscallarg(struct msqid_ds *) buf;
d1108 1
a1108 1
	syscallarg(void *) data;
d1130 1
a1130 1
	syscallarg(void *) data;
d1203 39
d1486 1
a1486 1
int	sys___semctl(struct proc *, void *, register_t *);
d1490 1
a1490 1
int	sys_shmctl(struct proc *, void *, register_t *);
d1494 1
a1494 1
int	sys_msgctl(struct proc *, void *, register_t *);
d1536 4
d1541 1
d1545 1
d1549 1
@


1.11
log
@enable openbsd emulation, looks like it works now
@
text
@d7 1
a7 1
 * created from	MirBSD: src/sys/compat/openbsd/syscalls.master,v 1.18 2004/10/31 21:03:58 tg Exp 
d1262 1
d1264 2
@


1.10
log
@regen
rewrite _stat.c to behave as wrapper
@
text
@d7 1
a7 1
 * created from	MirBSD: src/sys/compat/openbsd/syscalls.master,v 1.16 2004/10/31 20:14:04 tg Exp 
@


1.9
log
@regen
@
text
@d7 1
a7 1
 * created from	MirBSD: src/sys/compat/openbsd/syscalls.master,v 1.15 2004/10/31 15:51:42 tg Exp 
d780 1
a780 1
	syscallarg(const char *) path;
d790 1
a790 1
	syscallarg(const char *) path;
d1052 1
a1052 1
	syscallarg(const fhandle_t *) fhp;
@


1.8
log
@regen
@
text
@d7 1
a7 1
 * created from	MirBSD: src/sys/compat/openbsd/syscalls.master,v 1.13 2004/10/31 15:14:10 tg Exp 
d248 1
a248 1
struct sys_osigaltstack_args {
a312 4
struct sys_sstk_args {
	syscallarg(int) incr;
};

d1264 1
a1264 1
int	sys_osigaltstack(struct proc *, void *, register_t *);
a1278 1
int	sys_sstk(struct proc *, void *, register_t *);
@


1.7
log
@regen, and port over statting stuff (basic only)
@
text
@d7 1
a7 1
 * created from	MirBSD: src/sys/compat/openbsd/syscalls.master,v 1.12 2004/10/28 20:41:02 tg Exp 
d1497 9
@


1.6
log
@some stat... uh, too much cassiss'ee in club-mate
@
text
@d7 1
a7 1
 * created from;	MirBSD: src/sys/compat/openbsd/syscalls.master,v 1.10 2004/10/28 20:29:57 tg Exp 
d294 1
a294 1
	syscallarg(struct ostat_compat *) sb;
@


1.5
log
@regen
@
text
@d7 1
a7 1
 * created from;	MirBSD: src/sys/compat/openbsd/syscalls.master,v 1.9 2004/10/28 17:18:03 tg Exp 
d294 1
a294 1
	syscallarg(struct ostat *) sb;
d783 1
a783 1
struct sys_stat_args {
d785 1
a785 1
	syscallarg(struct stat *) ub;
d788 1
a788 1
struct sys_fstat_args {
d790 1
a790 1
	syscallarg(struct stat *) sb;
d793 1
a793 1
struct sys_lstat_args {
d795 1
a795 1
	syscallarg(struct stat *) ub;
d1055 1
a1055 1
struct sys_fhstat_args {
d1057 1
a1057 1
	syscallarg(struct stat *) sb;
d1385 3
a1387 3
int	sys_stat(struct proc *, void *, register_t *);
int	sys_fstat(struct proc *, void *, register_t *);
int	sys_lstat(struct proc *, void *, register_t *);
d1465 1
a1465 1
int	sys_fhstat(struct proc *, void *, register_t *);
@


1.4
log
@regen
forgot to add timet routines
@
text
@d7 1
a7 1
 * created from;	MirBSD: src/sys/compat/openbsd/syscalls.master,v 1.7 2004/10/26 17:17:58 tg Exp 
d368 1
a368 1
struct sys_setitimer_args {
d370 2
a371 2
	syscallarg(const struct itimerval *) itv;
	syscallarg(struct itimerval *) oitv;
d378 1
a378 1
struct sys_getitimer_args {
d380 1
a380 1
	syscallarg(struct itimerval *) itv;
d548 1
a548 1
	syscallarg(const struct timeval *) tv;
d959 1
a959 1
struct sys_clock_gettime_args {
d961 1
a961 1
	syscallarg(struct timespec *) tp;
d964 1
a964 1
struct sys_clock_settime_args {
d966 1
a966 1
	syscallarg(const struct timespec *) tp;
d969 1
a969 1
struct sys_clock_getres_args {
d971 1
a971 1
	syscallarg(struct timespec *) tp;
d974 3
a976 3
struct sys_nanosleep_args {
	syscallarg(const struct timespec *) rqtp;
	syscallarg(struct timespec *) rmtp;
d1081 1
a1081 1
struct sys_kevent_args {
d1087 1
a1087 1
	syscallarg(const struct timespec *) timeout;
d1294 1
a1294 1
int	sys_setitimer(struct proc *, void *, register_t *);
d1297 1
a1297 1
int	sys_getitimer(struct proc *, void *, register_t *);
d1437 4
a1440 4
int	sys_clock_gettime(struct proc *, void *, register_t *);
int	sys_clock_settime(struct proc *, void *, register_t *);
int	sys_clock_getres(struct proc *, void *, register_t *);
int	sys_nanosleep(struct proc *, void *, register_t *);
d1470 1
a1470 1
int	sys_kevent(struct proc *, void *, register_t *);
@


1.3
log
@regen; fix bugs
the kernel compiles ;)
@
text
@d7 1
a7 1
 * created from;	MirBSD: src/sys/compat/openbsd/syscalls.master,v 1.6 2004/10/26 16:29:20 tg Exp 
d404 1
a404 1
struct sys_select_args {
d409 1
a409 1
	syscallarg(struct timeval *) tv;
d517 2
a518 2
struct sys_gettimeofday_args {
	syscallarg(struct timeval *) tp;
d547 1
a547 1
struct sys_settimeofday_args {
d637 1
a637 1
struct sys_utimes_args {
d639 1
a639 1
	syscallarg(const struct timeval *) tptr;
d642 3
a644 3
struct sys_adjtime_args {
	syscallarg(const struct timeval *) delta;
	syscallarg(struct timeval *) olddelta;
a782 22
struct lfs_bmapv_args {
	syscallarg(fsid_t *) fsidp;
	syscallarg(struct block_info *) blkiov;
	syscallarg(int) blkcnt;
};

struct lfs_markv_args {
	syscallarg(fsid_t *) fsidp;
	syscallarg(struct block_info *) blkiov;
	syscallarg(int) blkcnt;
};

struct lfs_segclean_args {
	syscallarg(fsid_t *) fsidp;
	syscallarg(u_long) segment;
};

struct lfs_segwait_args {
	syscallarg(fsid_t *) fsidp;
	syscallarg(struct timeval *) tv;
};

d883 1
a883 1
struct sys_futimes_args {
d885 1
a885 1
	syscallarg(const struct timeval *) tptr;
d1303 1
a1303 1
int	sys_select(struct proc *, void *, register_t *);
d1323 1
a1323 1
int	sys_gettimeofday(struct proc *, void *, register_t *);
d1328 1
a1328 1
int	sys_settimeofday(struct proc *, void *, register_t *);
d1344 2
a1345 2
int	sys_utimes(struct proc *, void *, register_t *);
int	sys_adjtime(struct proc *, void *, register_t *);
a1384 7
#ifdef LFS
int	lfs_bmapv(struct proc *, void *, register_t *);
int	lfs_markv(struct proc *, void *, register_t *);
int	lfs_segclean(struct proc *, void *, register_t *);
int	lfs_segwait(struct proc *, void *, register_t *);
#else
#endif
d1402 1
a1402 1
int	sys_futimes(struct proc *, void *, register_t *);
@


1.2
log
@regen
@
text
@d7 1
a7 1
 * created from;	MirBSD: src/sys/compat/openbsd/syscalls.master,v 1.3 2004/10/26 15:44:44 tg Exp 
d43 1
a43 1
	syscallarg(const char *) path;
d65 2
a66 2
	syscallarg(const char *) path;
	syscallarg(const char *) link;
d70 1
a70 1
	syscallarg(const char *) path;
d583 2
a584 2
	syscallarg(const char *) from;
	syscallarg(const char *) to;
a913 8
struct sys_xfspioctl_args {
	syscallarg(int) operation;
	syscallarg(char *) a_pathP;
	syscallarg(int) a_opcode;
	syscallarg(struct ViceIoctl *) a_paramsP;
	syscallarg(int) a_followSymlinks;
};

a1432 1
int	sys_xfspioctl(struct proc *, void *, register_t *);
@


1.1
log
@* step a bit further in writing an OpenBSD compat
* sort Linux entries
* replace COMPAT_AOUT (which we don't have, since
  MirOS #2/a.out is approx. the same as OpenBSD/a.out)
  by hooks for COMPAT_OPENBSD which enable the emul
  automatically if an a.out executable is about to
  be started
* still not ready ;-) wait for me enabling it in GENERIC
@
text
@d7 1
a7 1
 * created from;	OpenBSD: syscalls.master,v 1.69 2004/05/03 17:38:48 millert Exp 
d42 1
a42 1
struct sys_open_args {
d64 1
a64 1
struct sys_link_args {
d69 1
a69 1
struct sys_unlink_args {
d582 1
a582 1
struct sys_rename_args {
d1245 1
a1245 1
int	sys_open(struct proc *, void *, register_t *);
d1249 2
a1250 2
int	sys_link(struct proc *, void *, register_t *);
int	sys_unlink(struct proc *, void *, register_t *);
d1364 1
a1364 1
int	sys_rename(struct proc *, void *, register_t *);
@

