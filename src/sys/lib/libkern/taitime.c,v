head	1.3;
access;
symbols
	tg-mergetmp-mirosx-1:1.3
	tg-mergefixes-1-branch:1.3.0.4
	tg-mergefixes-1-base:1.3
	MIROS_X:1.3.0.2
	MIROS_X_BASE:1.3
	tg-mergetmp-3:1.3
	MIRBSD_XP_MIRPPC:1.2.0.4
	MIRBSD_XP_SPARC_BASE:1.2
	MIRBSD_XP_SPARC:1.2.0.2;
locks; strict;
comment	@ * @;


1.3
date	2004.11.23.21.21.00;	author tg;	state Exp;
branches;
next	1.2;

1.2
date	2004.08.06.23.39.54;	author tg;	state Stab;
branches;
next	1.1;

1.1
date	2004.06.23.16.58.42;	author tg;	state Exp;
branches;
next	;


desc
@@


1.3
log
@sync with libc source; shrink and make more failproof
@
text
@/**	$MirBSD: src/lib/libc/time/taitime.c,v 1.22 2004/11/22 17:31:02 tg Exp $ */
/**	_MirBSD: src/lib/libc/time/taitime.c,v 1.22 2004/11/22 17:31:02 tg Exp $ */

/*-
 * Copyright (c) 2004
 *	Thorsten "mirabile" Glaser <tg@@66h.42h.de>
 *
 * Licensee is hereby permitted to deal in this work without restric-
 * tion, including unlimited rights to use, publicly perform, modify,
 * merge, distribute, sell, give away or sublicence, provided all co-
 * pyright notices above, these terms and the disclaimer are retained
 * in all redistributions or reproduced in accompanying documentation
 * or other materials provided with binary redistributions.
 *
 * All advertising materials mentioning features or use of this soft-
 * ware must display the following acknowledgement:
 *	This product includes material provided by Thorsten Glaser.
 *
 * Licensor hereby provides this work "AS IS" and WITHOUT WARRANTY of
 * any kind, expressed or implied, to the maximum extent permitted by
 * applicable law, but with the warranty of being written without ma-
 * licious intent or gross negligence; in no event shall licensor, an
 * author or contributor be held liable for any damage, direct, indi-
 * rect or other, however caused, arising in any way out of the usage
 * of covered work, even if advised of the possibility of such damage.
 */

#include <sys/param.h>
#include <lib/libkern/taitime.h>

tai64_t
utc2tai(int64_t s)
{
	tai64_t *t = _tai_leaps();
	tai64_t i = s;

	if (s & 0x8000000000000000ULL)
		return i + __TAI64_BIAS;

	while (__predict_true((*t) && ((*t - __TAI64_BIAS) <= i))) {
		++i;
		++t;
	}

	return i + __TAI64_BIAS;
}

int64_t
tai2utc(tai64_t s)
{
	tai64_t *t = _tai_leaps();
	int64_t i = s - __TAI64_BIAS;

	if (s & 0x8000000000000000ULL)
		return i;

	while (__predict_true((*t) && ((*t) <= s))) {
		--i;
		++t;
	}

	return i;
}


int
tai_isleap(tai64_t x)
{
	tai64_t *t;

	t = _tai_leaps();
	while (__predict_true(*t))
		if (__predict_false((*t) == x))
			return 1;
		else if (__predict_false((*t) > x))
			return 0;
		else
			++t;
	return 0;
}

tai64_t
mjd2tai(mjd_t m)
{
	int64_t x = (m.mjd - 40587LL) * 86400LL;
	tai64_t t;

	x += (m.sec > 86399) ? 86399 : m.sec;
	t = utc2tai(x);
	if (m.sec > 86399)
		++t;

	return t;
}

mjd_t
tai2mjd(tai64_t tai)
{
	int64_t x = tai2utc(tai);
	mjd_t m;

	m.sec = (int32_t)(x % 86400LL);
	m.mjd = (x / 86400LL) + 40587LL;

	while (__predict_false(m.sec < 0)) {
		m.sec += 86400;
		--m.mjd;
	}

	if (__predict_false(tai_isleap(tai)))
		++m.sec;

	return m;
}

/*
 * For more information on DJB products, such as libtai,
 * please go to http://cr.yp.to/
 */

/* from caldate_frommjd libtai-0.60 */
/* hacked up for time_t-64 support */

struct tm
mjd2tm(mjd_t m)
{
	time_t year;
	int month, day, yday, wday, sec, leap;
	struct tm res;

	year = m.mjd;
	sec = m.sec;

	while (sec < 0) {
		sec += 86400;
		--year;
	}

	while (sec > 86400) {
		sec -= 86400;
		++year;
	}

	leap = (sec == 86400);
	if (__predict_false(leap))
		--sec;

	day = (int32_t)(year % 146097LL) + 678881;
	year /= 146097LL;
	while (__predict_false(day >= 146097)) {
		day -= 146097;
		++year;
	}

	/* year * 146097 + day - 678881 is MJD; 0 <= day < 146097 */
	/* 2000-03-01, MJD 51604, is year 5, day 0 */

	wday = (day + 3) % 7;

	year *= 4;
	if (__predict_false(day == 146096)) {
		year += 3;
		day = 36524;
	} else {
		year += day / 36524LL;
		day %= 36524;
	}
	year *= 25;
	year += day / 1461;
	day %= 1461;
	year *= 4;

	yday = (day < 306);
	if (__predict_false(day == 1460)) {
		year += 3;
		day = 365;
	} else {
		year += day / 365;
		day %= 365;
	}
	yday += day;

	day *= 10;
	month = (day + 5) / 306;
	day = (day + 5) % 306;
	day /= 10;
	if (__predict_false(month >= 10)) {
		yday -= 306;
		++year;
		month -= 10;
	} else {
		yday += 59;
		month += 2;
	}
	if (__predict_false(year < 1))
		--year;

	res.tm_sec = (sec % 60);
	if (__predict_false(leap))
		++res.tm_sec;
	sec /= 60;
	res.tm_min = (sec % 60);
	res.tm_hour = (sec / 60);
	res.tm_mday = day + 1;
	res.tm_mon = month;
	res.tm_year = year - 1900;
	res.tm_wday = wday;
	res.tm_yday = yday;
	res.tm_isdst = 0;
	res.tm_gmtoff = 0;
	res.tm_zone = NULL;

	return res;
}

/* from caldate_mjd libtai-0.60 */
/* hacked up for time_t-64 support */

mjd_t
tm2mjd(struct tm tm)
{
	static unsigned long times365[4] = {
		0, 365, 730, 1095
	};
	static unsigned long times36524[4] = {
		0, 36524UL, 73048UL, 109572UL
	};
	static unsigned long montab[12] = {
		0, 31, 61, 92, 122, 153, 184, 214, 245, 275, 306, 337
	};
	/* month length after february is (306 * m + 5) / 10 */

	time_t d = tm.tm_year + 1900LL;
	int m = tm.tm_mon;
	int y;
	long sec;
	mjd_t res;

	if (__predict_false(d < 0))
		++d;
	y = (int)(d % 400LL);
	d = 146097LL * (d / 400) + tm.tm_mday - 678882LL;
	sec = tm.tm_sec - tm.tm_gmtoff + 60 * (tm.tm_min + 60 * tm.tm_hour);

	while (__predict_false(sec < 0L)) {
		sec += 86400L;
		--d;
	}
	while (__predict_false(sec > 86400L)) {
		sec -= 86400L;
		++d;
	}

	if (m >= 2) {
		m -= 2;
	} else {
		m += 10;
		--y;
	}

	y += (m / 12);
	m %= 12;
	if (__predict_false(m < 0)) {
		m += 12;
		--y;
	}
	d += montab[m];

	d += 146097LL * (y / 400LL);
	y %= 400;
	while (__predict_false(y < 0)) {
		y += 400;
		d -= 146097LL;
	}

	d += times365[y & 3];
	y /= 4;

	d += 1461LL * (y % 25);
	y /= 25;

	d += times36524[y & 3];

	res.mjd = d;
	res.sec = (int32_t)sec;

	return res;
}
@


1.2
log
@indent
@
text
@d1 4
a4 2
/* $MirBSD: src/sys/lib/libkern/taitime.c,v 1.1 2004/06/23 16:58:42 tg Exp $
 *-
d6 1
a6 1
 *	Thorsten "mirabile" Glaser <x86@@ePost.de>
d9 9
a17 5
 * tion, including unlimited rights to use, publically perform, modi-
 * fy, merge, distribute, sell, give away or sublicence, provided the
 * above copyright notices, these terms and the disclaimer are retai-
 * ned in all redistributions, or reproduced in accompanying documen-
 * tation or other materials provided with binary redistributions.
a30 8
#define	TRUNCATE0(maxv,v)	( ((v) > (maxv)) ? (maxv) : (v) )
#define	TRUNCATE(minv,maxv,v)	\
	    ( ((v) < (minv)) ? (minv) : ( ((v) > (maxv)) ? (maxv) : (v) ) )


#define	_tai_leaps	tai_leaps


d34 5
a38 1
	tai64_t *t, i = s + TAI64_BIAS;
d40 1
a40 2
	t = _tai_leaps();
	while ((*t) && ((*t) <= i)) {
d45 1
a45 1
	return i;
d51 5
a55 2
	tai64_t *t;
	int64_t i = s - TAI64_BIAS;
d57 1
a57 2
	t = _tai_leaps();
	while ((*t) && ((*t) <= s)) {
d65 1
d72 2
a73 2
	while (*t)
		if ((*t) == x)
d75 1
a75 1
		else if ((*t) > x)
a82 12
timet2tai(time_t x)
{
	return (x + TAI64_BIAS);
}

time_t
tai2timet(tai64_t x)
{
	return (x - TAI64_BIAS);
}

tai64_t
d85 1
a85 1
	int64_t x;
d88 1
a88 3
	x = (m.sec > 86399) ? 86399 : m.sec;
	x += (m.mjd - 40587) * 86400;

d99 1
a99 1
	int64_t x;
d102 2
a103 3
	x = tai2utc(tai);
	m.sec = x % 86400;
	m.mjd = (x / 86400) + 40587;
d105 7
a111 2
	if (tai_isleap(tai))
		m.sec++;
d122 1
d127 2
a128 2
	long year, month, day, sec;
	int yday, wday, leap;
d131 1
a131 1
	day = m.mjd;
d136 1
a136 1
		day--;
d141 1
a141 1
		day++;
d144 2
a145 2
	leap = (sec == 86400) ? 1 : 0;
	if (leap)
d148 4
a151 5
	year = day / 146097L;
	day %= 146097L;
	day += 678881L;
	while (day >= 146097L) {
		day -= 146097L;
d161 1
a161 1
	if (day == 146096L) {
d163 1
a163 1
		day = 36524L;
d165 2
a166 2
		year += day / 36524L;
		day %= 36524L;
d174 1
a174 1
	if (day == 1460) {
d187 1
a187 1
	if (month >= 10) {
d195 2
d198 3
a200 1
	res.tm_sec = (sec % 60) + leap;
d217 1
d222 9
a230 3
	static unsigned long times365[4] = {0, 365, 730, 1095};
	static unsigned long times36524[4] = {0, 36524UL, 73048UL, 109572UL};
	static unsigned long montab[12] = {0, 31, 61, 92, 122, 153, 184, 214, 245, 275, 306, 337};
d233 4
a236 1
	long y, m, d, sec;
d239 13
a251 14
	d = tm.tm_mday - 678882L;
	m = tm.tm_mon;
	y = tm.tm_year + 1900;

	sec = tm.tm_sec + 60 * (tm.tm_min + 60 * tm.tm_hour);

	while (sec < 0) {
		sec += 86400;
		d--;
	}

	while (sec > 86400) {
		sec -= 86400;
		d++;
a253 3
	d += 146097L * (y / 400);
	y %= 400;

d263 1
a263 1
	if (m < 0) {
d269 1
a269 1
	d += 146097L * (y / 400);
d271 1
a271 1
	while (y < 0) {
d273 1
a273 1
		d -= 146097L;
d277 1
a277 1
	y >>= 2;
d279 1
a279 1
	d += 1461L * (y % 25);
d285 1
a285 1
	res.sec = sec;
@


1.1
log
@* lalala, ABI change...
  change the calling convention for the mjd2tm and tm2mjd functions,
  to be
  - similar between themselfes
  - equal between kernel and userland
  - not using malloc
* add TAI stuff to the kernel, including leap seconds(!) :)
  -> we can soon(TM) set the RTC to UTC, even when
     having the kernel on dru^H^H^HLS^H^HTAI
* some Makefile adjustments for
  - new library stuff
  - bsd.cfwrap.mk
  - simplifications
* start fixing the build (still static, tho I didn't intend that...)
* add missing shlib version for libsupc++
@
text
@d1 1
a1 1
/* $MirBSD: src/lib/libc/time/taitime.c,v 1.5 2004/06/23 14:47:04 tg Exp $
d223 3
a225 5
	static unsigned long times365[4] = { 0, 365, 730, 1095 };
	static unsigned long times36524[4] =
	    { 0, 36524UL, 73048UL, 109572UL };
	static unsigned long montab[12] =
	    { 0, 31, 61, 92, 122, 153, 184, 214, 245, 275, 306, 337 };
a262 1

@

