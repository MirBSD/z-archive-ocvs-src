head	1.2;
access;
symbols
	cvs-200405160640:1.1.1.1
	cvs-200401271800:1.1.1.1
	cvs-200401261630:1.1.1.1
	cvs-200401021645:1.1.1.1
	cvs-200312222040:1.1.1.1
	cvs-200310020700:1.1.1.1
	cvs-200309271030:1.1.1.1
	cvs-200309261655:1.1.1.1
	cvs-200309251530:1.1.1.1
	cvs-200308302005:1.1.1.1
	cvs-200308171200:1.1.1.1
	ctm-3496:1.1.1.1
	ctm-3449:1.1.1.1
	ctm-3437:1.1.1.1
	cvs-200307191805:1.1.1.1
	ctm-3425:1.1.1.1
	cvs-200307091500:1.1.1.1
	cvs-200307072125:1.1.1.1
	ctm-3389:1.1.1.1
	cvs-200307021520:1.1.1.1
	cvs-200306291430:1.1.1.1
	ctm-3341:1.1.1.1
	cvs-200306082100:1.1.1.1
	ctm-3316:1.1.1.1
	ctm-3272:1.1.1.1
	ctm-3264:1.1.1.1
	cvs-200305071630:1.1.1.1
	ctm-3255:1.1.1.1
	ctm-3229:1.1.1.1
	ctm-3203:1.1.1.1
	cvs-20030410-1130:1.1.1.1
	ctm-3155:1.1.1.1
	ctm-3132:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.2
date	2003.04.06.04.28.19;	author tg;	state dead;
branches;
next	1.1;

1.1
date	2003.03.22.17.49.29;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.03.22.17.49.29;	author tg;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Remove "some dead architectures".

These are all but i386 and x86-64 (which is not in the tree yet),
because I have no machines to work with.

Re-adding support should be fairly easy, just cvs adding a partial
OpenBSD checkout and pulling in stuff like kernel signal patch, humantime,
etc. which got added to i386 as well.

You will need gcc support as well.
@
text
@/*	$OpenBSD: devopen.c,v 1.2 1997/09/14 07:02:05 downsj Exp $	*/
/*	$NetBSD: devopen.c,v 1.7 1996/10/14 07:31:47 thorpej Exp $	*/

/*-
 *  Copyright (c) 1996 Jason R. Thorpe.  All rights reserved.
 *  Copyright (c) 1993 John Brezak
 *  All rights reserved.
 * 
 *  Redistribution and use in source and binary forms, with or without
 *  modification, are permitted provided that the following conditions
 *  are met:
 *  1. Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 *  2. Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in the
 *     documentation and/or other materials provided with the distribution.
 *  3. The name of the author may not be used to endorse or promote products
 *     derived from this software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR `AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED.	IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

#include <sys/param.h>
#include <sys/reboot.h>

#include <lib/libsa/stand.h>

#include "samachdep.h"

u_int opendev;

#define ispart(c)	((c) >= 'a' && (c) <= 'h')

atoi(char *cp)
{
    int val = 0;
    while(isdigit(*cp))
	val = val * 10 + (*cp++ - '0');
    return(val);
}

usage()
{
    printf("\
Usage: device(adaptor, controller, drive, partition)file\n\
       <device><unit><partitionletter>:file\n\
");
}

devlookup(d, len)
	const char *d;
	int len;
{
    struct devsw *dp = devsw;
    int i;
    
    for (i = 0; i < ndevs; i++, dp++) {
	if (dp->dv_name && strncmp(dp->dv_name, d, len) == 0) {
	    /*
	     * Set the filesystem and startup up according to the device
	     * being opened.
	     */
	    switch (i) {
	    case 0:	/* ct */
		bcopy(file_system_rawfs, file_system, sizeof(struct fs_ops));
		break;

	    case 2:	/* hd */
		bcopy(file_system_ufs, file_system, sizeof(struct fs_ops));
		break;

	    case 4:	/* sd */
		bcopy(file_system_ufs, file_system, sizeof(struct fs_ops));
		bcopy(file_system_cd9660, &file_system[1],
		    sizeof(struct fs_ops));
		nfsys = 2;
		break;

	    case 6:	/* le */
		bcopy(file_system_nfs, file_system, sizeof(struct fs_ops));
		break;

	    default:
		/* Agh!  What happened?! */
		goto bad;
	    }
	    return(i);
	}
    }

 bad:
    printf("No such device - Configured devices are:\n");
    for (dp = devsw, i = 0; i < ndevs; i++, dp++)
	if (dp->dv_name)
	    printf(" %s", dp->dv_name);
    printf("\n");
    errno = ENODEV;
    return(-1);
}

/*
 * Parse a device spec in one of two forms.
 *
 * dev(adapt, ctlr, unit, part)file
 * [A-Za-z]*[0-9]*[A-Za-z]:file
 *    dev   unit  part
 */
devparse(fname, dev, adapt, ctlr, unit, part, file)
	const char *fname;
	int *dev, *adapt, *ctlr, *unit, *part;
	char **file;
{
    int *argp, i;
    char *s, *args[4];

    /* get device name and make lower case */
    for (s = (char *)fname; *s && *s != '/' && *s != ':' && *s != '('; s++)
	if (isupper(*s)) *s = tolower(*s);

    /* first form */
    if (*s == '(') {
	/* lookup device and get index */
	if ((*dev = devlookup(fname, s - fname)) < 0)
	    goto baddev;

	/* tokenize device ident */
	args[0] = ++s;
	for (args[0] = s, i = 1; *s && *s != ')'; s++) {
	    if (*s == ',')
		args[i++] = ++s;
	}
	switch(i) {
	case 4:
	    *adapt = atoi(args[0]);
	    *ctlr  = atoi(args[1]);
	    *unit  = atoi(args[2]);
	    *part  = atoi(args[3]);
	    break;
	case 3:
	    *ctlr  = atoi(args[0]);
	    *unit  = atoi(args[1]);
	    *part  = atoi(args[2]);
	    break;
	case 2:
	    *unit  = atoi(args[0]);
	    *part  = atoi(args[1]);
	    break;
	case 1:
	    *part  = atoi(args[0]);
	    break;
	case 0:
	    break;
	}
	*file = ++s;
    }

    /* second form */
    else if (*s == ':') {
	int temp;

	/* isolate device */
	for (s = (char *)fname; *s != ':' && !isdigit(*s); s++);
	
	/* lookup device and get index */
	if ((*dev = devlookup(fname, s - fname)) < 0)
	    goto baddev;

	/* isolate unit */
	if ((temp = atoi(s)) > 255)
	    goto bad;
	*adapt = temp / 8;
	*ctlr = temp % 8;
	for (; isdigit(*s); s++);
	
	/* translate partition */
	if (!ispart(*s))
	    goto bad;
	
	*part = *s++ - 'a';
	if (*s != ':')
	    goto bad;
	*file = ++s;
    }

    /* no device present */
    else
	*file = (char *)fname;
    
    /* return the remaining unparsed part as the file to boot */
    return(0);
    
 bad:
    usage();

 baddev:
    return(-1);
}    


devopen(f, fname, file)
	struct open_file *f;
	const char *fname;
	char **file;
{
	int n, error;
	int dev, adapt, ctlr, unit, part;
	struct devsw *dp = &devsw[0];

	dev   = B_TYPE(bootdev);
	adapt = B_ADAPTOR(bootdev);
	ctlr  = B_CONTROLLER(bootdev);
	unit  = B_UNIT(bootdev);
	part  = B_PARTITION(bootdev);

	if (error = devparse(fname, &dev, &adapt, &ctlr, &unit, &part, file))
	    return(error);

	/*
	 * Set up filesystem type based on what device we're opening.
	 */
	switch (dev) {
	case 0:		/* ct */
		bcopy(file_system_rawfs, file_system, sizeof(struct fs_ops));
		break;

	case 2:		/* hd */
		bcopy(file_system_ufs, file_system, sizeof(struct fs_ops));
		break; 

	case 4:		/* sd */
		bcopy(file_system_ufs, file_system, sizeof(struct fs_ops));
		bcopy(file_system_cd9660, &file_system[1],
		    sizeof(struct fs_ops));
		nfsys = 2;
		break; 

	case 6:		/* le */
		bcopy(file_system_nfs, file_system, sizeof(struct fs_ops));
		break;

	default:
		/* XXX what else should we do here? */
		printf("WARNING: BOGUS BOOT DEV TYPE 0x%x!\n", dev);
		return (EIO);
	}

	dp = &devsw[dev];
	
	if (!dp->dv_open)
		return(ENODEV);

	f->f_dev = dp;

	if ((error = (*dp->dv_open)(f, adapt, ctlr, part)) == 0) {
		if ((error =
		    (*punitsw[dev].p_punit)(adapt, ctlr, &unit)) != 0) {
			goto bad;
		}
		opendev = MAKEBOOTDEV(dev, adapt, ctlr, unit, part);
		return(0);
	}

 bad:
	printf("%s(%d,%d,%d,%d): %s\n", devsw[dev].dv_name,
	    adapt, ctlr, unit, part, strerror(error));

	return(error);
}
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Import OpenBSD 3.3 source repository from CTM 3132 the first time
This opens an OpenBSD-mirabile (aka MirBSD) repository.

### MirBSD is:
# Copyright (c) 1982-2003 by Thorsten "mirabile" Glaser <x86@@ePost.de>
# Copyright © 1968-2003  The authors of And contributors to UNIX®, the
#       C Language, BSD/Berkeley Unix; 386BSD, NetBSD 1.1 and OpenBSD.
#
# Anyone who obtained a copy of this work is hereby permitted to freely use,
# distribute, modify, merge, sublicence, give away or sell it as long as the
# authors are given due credit and the following notice is retained:
#
# This work is provided "as is", with no explicit or implicit warranty what-
# soever. Use it only at your own risk. In no event may an author or contri-
# butor be held liable for any damage, directly or indirectly, that origina-
# ted through or is caused by creation or modification of this work.

MirBSD is my private tree. MirBSD does not differ very much from OpenBSD
and intentionally tracks OpenBSD. That's why it _is_ OpenBSD, just not the
official one. It's like with DarrenBSD.

At time of this writing, no advertising for MirBSD must be done,
because the advertising clause has not yet been sorted out.

http://templeofhate.com/tglaser/MirBSD/index.php
@
text
@@
