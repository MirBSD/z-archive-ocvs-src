head	1.2;
access;
symbols
	cvs-200405160640:1.1.1.2
	cvs-200401271800:1.1.1.2
	cvs-200401261630:1.1.1.2
	cvs-200401021645:1.1.1.2
	cvs-200312222040:1.1.1.2
	cvs-200310020700:1.1.1.2
	cvs-200309271030:1.1.1.2
	cvs-200309261655:1.1.1.2
	cvs-200309251530:1.1.1.2
	cvs-200308302005:1.1.1.2
	cvs-200308171200:1.1.1.2
	ctm-3496:1.1.1.2
	ctm-3449:1.1.1.2
	ctm-3437:1.1.1.2
	cvs-200307191805:1.1.1.2
	ctm-3425:1.1.1.2
	cvs-200307091500:1.1.1.2
	cvs-200307072125:1.1.1.2
	ctm-3389:1.1.1.2
	cvs-200307021520:1.1.1.2
	cvs-200306291430:1.1.1.2
	ctm-3341:1.1.1.2
	cvs-200306082100:1.1.1.2
	ctm-3316:1.1.1.2
	ctm-3272:1.1.1.1
	ctm-3264:1.1.1.1
	cvs-200305071630:1.1.1.1
	ctm-3255:1.1.1.1
	ctm-3229:1.1.1.1
	ctm-3203:1.1.1.1
	cvs-20030410-1130:1.1.1.1
	ctm-3155:1.1.1.1
	ctm-3132:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.2
date	2003.04.06.04.29.14;	author tg;	state dead;
branches;
next	1.1;

1.1
date	2003.03.22.17.49.54;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.03.22.17.49.54;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2003.06.05.17.35.17;	author tg;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Remove "some dead architectures".

These are all but i386 and x86-64 (which is not in the tree yet),
because I have no machines to work with.

Re-adding support should be fairly easy, just cvs adding a partial
OpenBSD checkout and pulling in stuff like kernel signal patch, humantime,
etc. which got added to i386 as well.

You will need gcc support as well.
@
text
@/*	$OpenBSD: bug.c,v 1.5 2002/04/27 23:21:05 miod Exp $ */

/*
 * Copyright (c) 1995 Dale Rahn.
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by Dale Rahn.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */  

/*
 * bug routines -- assumes that the necessary sections of memory
 * are preserved.
 */
#include <sys/param.h>

#include <machine/bugio.h>
#include <machine/prom.h>

/* flag to traphandler to signify prom call. presumes splhigh() */
extern volatile int promcall;

void bug_outln(char *, char *);
void bug_delay(int);
void bug_stat(void);
void asm_bug_stat(void);

/* tty routines */
char
bug_inchr()
{
	int s = splhigh();
	volatile char a;

	promcall = 1;
	asm volatile ("subql #2,sp");
	MVMEPROM_CALL(MVMEPROM_INCHR);
	asm volatile ("nop");
	asm volatile ("movb sp@@+,%0" : "=d" (a));
	promcall = 0;
	splx(s);
	return (a);
}

/* returns 0 if no characters ready to read */
int
bug_instat()
{
	int s = splhigh();
	volatile short ret;

	promcall = 1;
	MVMEPROM_CALL(MVMEPROM_INSTAT);
	asm volatile ("nop");
	asm volatile ("movw ccr,%0" : "=d" (ret));
	promcall = 0;
	splx(s);
	return (!(ret & 0x4));
}

void
bug_outchr(a)
	char a;
{
	int s = splhigh();

	promcall = 1;
	asm volatile ("movb %0,sp@@-" :: "d" (a));
	MVMEPROM_CALL(MVMEPROM_OUTCHR);
	asm volatile ("nop");
	promcall = 0;
	splx(s);
}

void
bug_outstr(pstrb, pstre)
	char *pstrb;
	char *pstre;
{
	int s = splhigh();

	promcall = 1;
	asm volatile ("movl %0,sp@@-" :: "d" (pstre));
	asm volatile ("movl %0,sp@@-" :: "d" (pstrb));
	MVMEPROM_CALL(MVMEPROM_OUTSTR);
	promcall = 0;
	splx(s);
}

void
bug_outln(pstrb, pstre)
	char *pstrb;
	char *pstre;
{
	int s = splhigh();

	promcall = 1;
	asm volatile ("movl %0,sp@@-" :: "d" (pstre));
	asm volatile ("movl %0,sp@@-" :: "d" (pstrb));
	MVMEPROM_CALL(MVMEPROM_OUTSTRCRLF);
	promcall = 0;
	splx(s);
}

/* BUG - disk routines */

#if 0
/* returns 0: success, nonzero: error */
u_int bug_drdcnt = 0;
int
bug_diskrd(arg)
	bug_dskio *arg;
{
	volatile int ret;

	promcall = 1;
	bug_drdcnt++;
	asm volatile ("movl %0, sp@@-" :: "d" (arg));
	MVMEPROM_CALL(MVMEPROM_DSKRD);
	asm volatile ("nop");
	asm volatile ("movw ccr,%0" : "=d" (ret));
	promcall = 0;
	return (!(ret & 0x4));
}

/* returns 0: success, nonzero: error */
u_int bug_dwrcnt = 0;
int
bug_diskwr(arg)
	bug_dskio *arg;
{
	volatile int ret;

	promcall = 1;
	bug_dwrcnt ++;
	asm volatile ("movl %0, sp@@-" :: "d" (arg));
	MVMEPROM_CALL(MVMEPROM_DSKWR);
	asm volatile ("nop");
	asm volatile ("movw ccr,%0" : "=d" (ret));
	promcall = 0;
	return (!(ret & 0x4));
}

bug_diskcfig()
{
}

bug_diskfmt()
{
}

bug_diskctrl()
{
}
#endif

/* BUG - timing routine */
void
bug_delay(delay_msec)
	int delay_msec;
{
	int s = splhigh();

	promcall = 1;
	asm volatile ("movl %0,sp@@-" :: "d" (delay_msec));
	MVMEPROM_CALL(MVMEPROM_DELAY);
	asm volatile ("nop");
	promcall = 0;
	splx(s);
}

/* BUG - return to bug routine */
void
bug_return()
{
	promcall = 1;
	MVMEPROM_CALL(MVMEPROM_EXIT);
	promcall = 0;
	/*NOTREACHED*/
}

/* BUG - query board routines */
struct bug_brdid *
bug_brdid()
{
	struct bug_brdid *pbrd_id;

	promcall = 1;
	asm volatile ("clrl sp@@-");
	MVMEPROM_CALL(MVMEPROM_GETBRDID);
	asm volatile ("movl sp@@+,%0" : "=d" (pbrd_id):);
	promcall = 0;
	return (pbrd_id);
}

int asm_callbuf[4];

void
bug_stat()
{
	char val[] = "|/-\\";
	static int cnt = 0;

	bug_outchr('\b');
	bug_outchr(val[cnt]);
	cnt = (cnt + 1) % (sizeof(val) -1);
}

void
asm_bug_stat()
{
	asm volatile ("movl a0,_asm_callbuf+0");
	asm volatile ("movl a1,_asm_callbuf+4");
	asm volatile ("movl d0,_asm_callbuf+8");
	asm volatile ("movl d1,_asm_callbuf+12");
	
	bug_stat();

	asm volatile ("movl _asm_callbuf+0,a0");
	asm volatile ("movl _asm_callbuf+4,a1");
	asm volatile ("movl _asm_callbuf+8,d0");
	asm volatile ("movl _asm_callbuf+12,d1");
}
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Import OpenBSD 3.3 source repository from CTM 3132 the first time
This opens an OpenBSD-mirabile (aka MirBSD) repository.

### MirBSD is:
# Copyright (c) 1982-2003 by Thorsten "mirabile" Glaser <x86@@ePost.de>
# Copyright © 1968-2003  The authors of And contributors to UNIX®, the
#       C Language, BSD/Berkeley Unix; 386BSD, NetBSD 1.1 and OpenBSD.
#
# Anyone who obtained a copy of this work is hereby permitted to freely use,
# distribute, modify, merge, sublicence, give away or sell it as long as the
# authors are given due credit and the following notice is retained:
#
# This work is provided "as is", with no explicit or implicit warranty what-
# soever. Use it only at your own risk. In no event may an author or contri-
# butor be held liable for any damage, directly or indirectly, that origina-
# ted through or is caused by creation or modification of this work.

MirBSD is my private tree. MirBSD does not differ very much from OpenBSD
and intentionally tracks OpenBSD. That's why it _is_ OpenBSD, just not the
official one. It's like with DarrenBSD.

At time of this writing, no advertising for MirBSD must be done,
because the advertising clause has not yet been sorted out.

http://templeofhate.com/tglaser/MirBSD/index.php
@
text
@@


1.1.1.2
log
@Import latest OpenBSD CVS tree by CTM in order
to sync the base system and ports tree with Them.

This includes the recent licence changes as well - by
importing the changed base and re-applying the diffs
(with cvs up -j -j) they are inherited, and we're not
bound to the removed clauses any longer.
@
text
@d1 1
a1 1
/*	$OpenBSD: bug.c,v 1.6 2003/06/03 01:35:30 drahn Exp $ */
d15 5
@

