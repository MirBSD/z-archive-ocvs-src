head	1.2;
access;
symbols;
locks; strict;
comment	@ * @;


1.2
date	2003.12.11.21.50.26;	author tg;	state dead;
branches;
next	1.1;

1.1
date	2003.11.25.17.54.03;	author tg;	state Exp;
branches;
next	;


desc
@@


1.2
log
@nuke that bad idea of mine to have a machine-dependent libsa header,
to be used eg. for inlining memmove()

why was this a bad idea? inlining increases size of code, which is bad,
because code doesn't work after that any more
@
text
@/* $MirBSD: libsa_machdep.h,v 1.1 2003/11/25 17:54:03 tg Exp $
 *-
 * Copyright (c) 2003 Thorsten Glaser <x86@@ePost.de> for the MirOS Project
 *
 * Subject to these terms, everybody who obtained a copy of this work
 * is hereby permitted to deal in the work without restriction inclu-
 * ding without limitation the rights to use, distribute, sell, modi-
 * fy, publically perform, give away, merge or sublicense it provided
 * this notice is kept and the authors and contributors are given due
 * credit in derivates or accompanying documents.
 * This work is provided "as is" with no explicit or implicit warran-
 * ties whatsoever to the maximum extend permitted by applicable law;
 * in no event may an author or contributor be held liable for damage
 * that is, directly or indirectly, caused by the work, even if advi-
 * sed of the possibility of such damage.
 *-
 * machine-dependent functions to be used for libsa
 * every function is guarded with __HAS_MD_fnname
 */

#ifndef	_SYS_LIBSA_ARCH_MACHDEP_H
#define	_SYS_LIBSA_ARCH_MACHDEP_H

#ifndef	__GNUC__
#define	__inline__	inline
#define	__asm__		asm
#endif

/* interface */

#undef	__HAS_MD_memmove


/* implementation */


#endif
@


1.1
log
@woohoo, mirabile learns gcc inline assembly :-)
well, sort of. it sucks, but there isn't a way around it.
as bonus, /usr/mdec/boot grows a Kibibyte or so larger, but
should be faster (as if that mattered...)

bump version, clean up code (including indenting), sync fdisk
@
text
@d1 1
a1 1
/* $MirBSD: licence.template,v 1.6 2003/10/22 08:19:40 tg Exp $
@

