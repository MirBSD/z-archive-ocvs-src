head	1.2;
access;
symbols
	cvs-200405160640:1.1.1.2
	cvs-200401271800:1.1.1.2
	cvs-200401261630:1.1.1.2
	cvs-200401021645:1.1.1.2
	cvs-200312222040:1.1.1.2
	cvs-200310020700:1.1.1.2
	cvs-200309271030:1.1.1.2
	cvs-200309261655:1.1.1.2
	cvs-200309251530:1.1.1.2
	cvs-200308302005:1.1.1.2
	cvs-200308171200:1.1.1.2
	ctm-3496:1.1.1.2
	ctm-3449:1.1.1.2
	ctm-3437:1.1.1.2
	cvs-200307191805:1.1.1.2
	ctm-3425:1.1.1.2
	cvs-200307091500:1.1.1.2
	cvs-200307072125:1.1.1.2
	ctm-3389:1.1.1.2
	cvs-200307021520:1.1.1.2
	cvs-200306291430:1.1.1.2
	ctm-3341:1.1.1.2
	cvs-200306082100:1.1.1.2
	ctm-3316:1.1.1.2
	ctm-3272:1.1.1.1
	ctm-3264:1.1.1.1
	cvs-200305071630:1.1.1.1
	ctm-3255:1.1.1.1
	ctm-3229:1.1.1.1
	ctm-3203:1.1.1.1
	cvs-20030410-1130:1.1.1.1
	ctm-3155:1.1.1.1
	ctm-3132:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.2
date	2003.04.06.04.30.11;	author tg;	state dead;
branches;
next	1.1;

1.1
date	2003.03.22.17.50.22;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.03.22.17.50.22;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2003.06.05.17.36.33;	author tg;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Remove "some dead architectures".

These are all but i386 and x86-64 (which is not in the tree yet),
because I have no machines to work with.

Re-adding support should be fairly easy, just cvs adding a partial
OpenBSD checkout and pulling in stuff like kernel signal patch, humantime,
etc. which got added to i386 as well.

You will need gcc support as well.
@
text
@/*	$OpenBSD: uperf.c,v 1.4 2002/04/08 17:49:42 jason Exp $	*/

/*
 * Copyright (c) 2002 Jason L. Wright (jason@@thought.net)
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by Jason L. Wright
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 * Effort sponsored in part by the Defense Advanced Research Projects
 * Agency (DARPA) and Air Force Research Laboratory, Air Force
 * Materiel Command, USAF, under agreement number F30602-01-2-0537.
 *
 */

#include <sys/types.h>
#include <sys/param.h>
#include <sys/systm.h>
#include <sys/kernel.h>
#include <sys/errno.h>
#include <sys/device.h>
#include <sys/malloc.h>
#include <sys/ioctl.h>
#include <sys/conf.h>

#include <machine/conf.h>

#include <dev/sun/uperfio.h>
#include <arch/sparc64/dev/uperfvar.h>

struct cfdriver uperf_cd = {
	NULL, "uperf", DV_DULL
};

int uperf_getcntsrc(struct uperf_softc *, struct uperf_io *);
int uperf_findbyval(struct uperf_softc *, int, u_int, int *);
int uperf_findbysrc(struct uperf_softc *, int, int, u_int32_t *);
int uperf_setcntsrc(struct uperf_softc *, struct uperf_io *);

int
uperfopen(dev, flags, mode, p)
	dev_t dev;
	int flags, mode;
	struct proc *p;
{
	if (minor(dev) >= uperf_cd.cd_ndevs)
		return (ENXIO);
	if (uperf_cd.cd_devs[minor(dev)] == NULL)
		return (ENXIO);
	return (0);
}

int
uperfclose(dev, flags, mode, p)
	dev_t dev;
	int flags, mode;
	struct proc *p;
{
	return (0);
}

int
uperfioctl(dev, cmd, data, flags, p)
	dev_t dev;
	u_long cmd;
	caddr_t data;
	int flags;
	struct proc *p;
{
	struct uperf_softc *usc = uperf_cd.cd_devs[minor(dev)];
	struct uperf_io *io = (struct uperf_io *)data;
	int error = EINVAL;

	switch (cmd) {
	case UPIO_GCNTSRC:
		error = uperf_getcntsrc(usc, io);
		break;
	case UPIO_SCNTSRC:
		error = uperf_setcntsrc(usc, io);
		break;
	case UPIO_CLRCNT:
		error = usc->usc_clrcnt(usc->usc_cookie, io->cnt_flags);
		break;
	case UPIO_GETCNT:
		error = usc->usc_getcnt(usc->usc_cookie, io->cnt_flags,
		    &io->cnt_val0, &io->cnt_val1);
		break;
	}

	return (error);
}

int
uperf_getcntsrc(usc, io)
	struct uperf_softc *usc;
	struct uperf_io *io;
{
	u_int cnt0_src, cnt1_src;
	int error;

	error = usc->usc_getcntsrc(usc->usc_cookie, io->cnt_flags,
	    &cnt0_src, &cnt1_src);
	if (error)
		return (error);

	if (io->cnt_flags & UPERF_CNT0) {
		error = uperf_findbyval(usc, UPERF_CNT0,
		    cnt0_src, &io->cnt_src0);
		if (error)
			return (error);
	}

	if (io->cnt_flags & UPERF_CNT1) {
		error = uperf_findbyval(usc, UPERF_CNT1,
		    cnt1_src, &io->cnt_src1);
		if (error)
			return (error);
	}
	return (0);
}

int
uperf_findbyval(usc, cnt, uval, rval)
	struct uperf_softc *usc;
	int cnt;
	u_int uval;
	int *rval;
{
	struct uperf_src *srcs = usc->usc_srcs;

	if (srcs->us_src == NULL)
		return (EINVAL);

	while (srcs->us_src != -1) {
		if (srcs->us_val == uval && srcs->us_flags & cnt) {
			*rval = srcs->us_src;
			return (0);
		}
		srcs++;
	}
	return (EINVAL);
}

int
uperf_setcntsrc(usc, io)
	struct uperf_softc *usc;
	struct uperf_io *io;
{
	u_int32_t cnt0_src, cnt1_src;
	int error;

	if (io->cnt_flags & UPERF_CNT0) {
		error = uperf_findbysrc(usc, UPERF_CNT0,
		    io->cnt_src0, &cnt0_src);
		if (error)
			return (error);
	}
	if (io->cnt_flags & UPERF_CNT1) {
		error = uperf_findbysrc(usc, UPERF_CNT1,
		    io->cnt_src1, &cnt1_src);
		if (error)
			return (error);
	}
	return ((usc->usc_setcntsrc)(usc->usc_cookie, io->cnt_flags,
	    cnt0_src, cnt1_src));
}

int
uperf_findbysrc(usc, cnt, src, rval)
	struct uperf_softc *usc;
	int cnt, src;
	u_int32_t *rval;
{
	struct uperf_src *srcs = usc->usc_srcs;

	if (srcs->us_src == NULL)
		return (EINVAL);

	while (srcs->us_src != -1) {
		if (srcs->us_src == src && srcs->us_flags & cnt) {
			*rval = srcs->us_val;
			return (0);
		}
		srcs++;
	}
	return (EINVAL);
}
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Import OpenBSD 3.3 source repository from CTM 3132 the first time
This opens an OpenBSD-mirabile (aka MirBSD) repository.

### MirBSD is:
# Copyright (c) 1982-2003 by Thorsten "mirabile" Glaser <x86@@ePost.de>
# Copyright © 1968-2003  The authors of And contributors to UNIX®, the
#       C Language, BSD/Berkeley Unix; 386BSD, NetBSD 1.1 and OpenBSD.
#
# Anyone who obtained a copy of this work is hereby permitted to freely use,
# distribute, modify, merge, sublicence, give away or sell it as long as the
# authors are given due credit and the following notice is retained:
#
# This work is provided "as is", with no explicit or implicit warranty what-
# soever. Use it only at your own risk. In no event may an author or contri-
# butor be held liable for any damage, directly or indirectly, that origina-
# ted through or is caused by creation or modification of this work.

MirBSD is my private tree. MirBSD does not differ very much from OpenBSD
and intentionally tracks OpenBSD. That's why it _is_ OpenBSD, just not the
official one. It's like with DarrenBSD.

At time of this writing, no advertising for MirBSD must be done,
because the advertising clause has not yet been sorted out.

http://templeofhate.com/tglaser/MirBSD/index.php
@
text
@@


1.1.1.2
log
@Import latest OpenBSD CVS tree by CTM in order
to sync the base system and ports tree with Them.

This includes the recent licence changes as well - by
importing the changed base and re-applying the diffs
(with cvs up -j -j) they are inherited, and we're not
bound to the removed clauses any longer.
@
text
@d1 1
a1 1
/*	$OpenBSD: uperf.c,v 1.5 2003/06/02 20:02:49 jason Exp $	*/
d15 5
@

