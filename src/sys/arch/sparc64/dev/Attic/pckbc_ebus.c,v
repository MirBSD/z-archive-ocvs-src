head	1.2;
access;
symbols
	cvs-200405160640:1.1.1.4
	cvs-200401271800:1.1.1.4
	cvs-200401261630:1.1.1.4
	cvs-200401021645:1.1.1.4
	cvs-200312222040:1.1.1.4
	cvs-200310020700:1.1.1.3
	cvs-200309271030:1.1.1.3
	cvs-200309261655:1.1.1.3
	cvs-200309251530:1.1.1.3
	cvs-200308302005:1.1.1.3
	cvs-200308171200:1.1.1.3
	ctm-3496:1.1.1.3
	ctm-3449:1.1.1.3
	ctm-3437:1.1.1.3
	cvs-200307191805:1.1.1.3
	ctm-3425:1.1.1.3
	cvs-200307091500:1.1.1.3
	cvs-200307072125:1.1.1.3
	ctm-3389:1.1.1.3
	cvs-200307021520:1.1.1.3
	cvs-200306291430:1.1.1.3
	ctm-3341:1.1.1.2
	cvs-200306082100:1.1.1.2
	ctm-3316:1.1.1.2
	ctm-3272:1.1.1.1
	ctm-3264:1.1.1.1
	cvs-200305071630:1.1.1.1
	ctm-3255:1.1.1.1
	ctm-3229:1.1.1.1
	ctm-3203:1.1.1.1
	cvs-20030410-1130:1.1.1.1
	ctm-3155:1.1.1.1
	ctm-3132:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.2
date	2003.04.06.04.30.10;	author tg;	state dead;
branches;
next	1.1;

1.1
date	2003.03.22.17.50.22;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.03.22.17.50.22;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2003.06.05.17.36.33;	author tg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2003.06.29.17.31.11;	author tg;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2003.12.22.21.00.34;	author tg;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Remove "some dead architectures".

These are all but i386 and x86-64 (which is not in the tree yet),
because I have no machines to work with.

Re-adding support should be fairly easy, just cvs adding a partial
OpenBSD checkout and pulling in stuff like kernel signal patch, humantime,
etc. which got added to i386 as well.

You will need gcc support as well.
@
text
@/*	$OpenBSD: pckbc_ebus.c,v 1.3 2003/02/17 01:29:20 henric Exp $	*/

/*
 * Copyright (c) 2002 Jason L. Wright (jason@@thought.net)
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by Jason L. Wright
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * Driver for i8042 keyboard controller found on some PCI based
 * UltraSPARCs
 *
 * Effort sponsored in part by the Defense Advanced Research Projects
 * Agency (DARPA) and Air Force Research Laboratory, Air Force
 * Materiel Command, USAF, under agreement number F30602-01-2-0537.
 *
 */

#include <sys/types.h>
#include <sys/param.h>
#include <sys/systm.h>
#include <sys/device.h>
#include <sys/conf.h>
#include <sys/malloc.h>

#include <machine/bus.h>
#include <machine/autoconf.h>
#include <machine/openfirm.h>

#include <sparc64/dev/ebusreg.h>
#include <sparc64/dev/ebusvar.h>

#include <dev/ic/i8042reg.h>
#include <dev/ic/pckbcvar.h>

struct pckbc_ebus_softc {
	struct pckbc_softc sc_pckbc;
	bus_space_tag_t sc_iot;
	bus_space_handle_t sc_ioh;
	bus_space_handle_t sc_ioh_c;
	bus_space_handle_t sc_ioh_d;
	void *sc_irq[2];
	int sc_node;
};

int pckbc_ebus_match(struct device *, void *, void *);
void pckbc_ebus_attach(struct device *, struct device *, void *);

struct cfattach pckbc_ebus_ca = {
	sizeof(struct pckbc_ebus_softc), pckbc_ebus_match, pckbc_ebus_attach
};

void pckbc_ebus_intr_establish(struct pckbc_softc *, pckbc_slot_t);
int pckbc_ebus_is_console(struct pckbc_ebus_softc *);

int
pckbc_ebus_match(parent, match, aux)
	struct device *parent;
	void *match;
	void *aux;
{
	struct ebus_attach_args *ea = aux;

	if (strcmp(ea->ea_name, "8042") == 0)
		return (1);
	return (0);
}

void
pckbc_ebus_attach(parent, self, aux)
	struct device *parent, *self;
	void *aux;
{
	struct pckbc_ebus_softc *sc = (void *)self;
	struct pckbc_softc *psc = &sc->sc_pckbc;
	struct ebus_attach_args *ea = aux;
	struct pckbc_internal *t = NULL;
	int console;

	sc->sc_iot = ea->ea_iotag;
	sc->sc_node = ea->ea_node;
	console = pckbc_ebus_is_console(sc);

	if (console) {
		if (pckbc_cnattach(sc->sc_iot,
		    EBUS_PADDR_FROM_REG(&ea->ea_regs[0]), KBCMDP,
		    PCKBC_KBD_SLOT) == 0) {
			t = &pckbc_consdata;
			pckbc_console_attached = 1;
			sc->sc_ioh_c = t->t_ioh_c;
			sc->sc_ioh_d = t->t_ioh_d;
		} else
			console = 0;
	}

	if (console == 0) {
		/* Use prom address if available, otherwise map it. */
		if (ea->ea_nvaddrs)
			bus_space_map(sc->sc_iot, ea->ea_vaddrs[0], 0, 0,
			    &sc->sc_ioh);
		else if (ebus_bus_map(sc->sc_iot, 0,
		    EBUS_PADDR_FROM_REG(&ea->ea_regs[0]), ea->ea_regs[0].size,
		    BUS_SPACE_MAP_LINEAR, 0, &sc->sc_ioh) != 0) {
			printf(": can't map register space\n");
			return;
		}

		if (bus_space_subregion(sc->sc_iot, sc->sc_ioh,
		    KBCMDP, sizeof(u_int32_t), &sc->sc_ioh_c) != 0) {
			printf(": couldn't get cmd subregion\n");
			return;
		}
		if (bus_space_subregion(sc->sc_iot, sc->sc_ioh,
		    KBDATAP, sizeof(u_int32_t), &sc->sc_ioh_d) != 0) {
			printf(": couldn't get data subregion\n");
			return;
		}

		t = malloc(sizeof(struct pckbc_internal), M_DEVBUF, M_NOWAIT);
		bzero(t, sizeof(struct pckbc_internal));
	}

	psc->intr_establish = pckbc_ebus_intr_establish;

	sc->sc_irq[0] = bus_intr_establish(ea->ea_iotag, ea->ea_intrs[0],
	    IPL_TTY, 0, pckbcintr, psc);
	if (sc->sc_irq[0] == NULL) {
		printf(": couldn't get intr0\n");
		return;
	}

	sc->sc_irq[1] = bus_intr_establish(ea->ea_iotag, ea->ea_intrs[1],
	    IPL_TTY, 0, pckbcintr, psc);
	if (sc->sc_irq[1] == NULL) {
		printf(": couldn't get intr1\n");
		return;
	}

	t->t_iot = sc->sc_iot;
	t->t_ioh_c = sc->sc_ioh_c;
	t->t_ioh_d = sc->sc_ioh_d;
	t->t_cmdbyte = KC8_CPU;
	t->t_sc = psc;
	psc->id = t;

	printf("\n");
	pckbc_attach(psc);

}

int
pckbc_ebus_is_console(sc)
	struct pckbc_ebus_softc *sc;
{
	char *name;
	int node;

	/*
	 * Loop through the children of 8042 and see if the keyboard
	 * exists, and further, whether it is the console input device.
	 * This is almost redundant because 8042 doesn't show up in
	 * device tree unless a keyboard is in fact attached.
	 */
	for (node = OF_child(sc->sc_node); node; node = OF_peer(node)) {
		name = getpropstring(node, "name");
		if (name == NULL)
			continue;
		if (strcmp("kb_ps2", name) == 0 ||
		    strcmp("keyboard", name) == 0) {
			if (node == OF_instance_to_package(OF_stdin()))
				return (1);
		}
	}
	return (0);
}

void
pckbc_ebus_intr_establish(psc, slot)
	struct pckbc_softc *psc;
	pckbc_slot_t slot;
{
	/* Nothing to do, interrupts were mapped in attach. */
}
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Import OpenBSD 3.3 source repository from CTM 3132 the first time
This opens an OpenBSD-mirabile (aka MirBSD) repository.

### MirBSD is:
# Copyright (c) 1982-2003 by Thorsten "mirabile" Glaser <x86@@ePost.de>
# Copyright © 1968-2003  The authors of And contributors to UNIX®, the
#       C Language, BSD/Berkeley Unix; 386BSD, NetBSD 1.1 and OpenBSD.
#
# Anyone who obtained a copy of this work is hereby permitted to freely use,
# distribute, modify, merge, sublicence, give away or sell it as long as the
# authors are given due credit and the following notice is retained:
#
# This work is provided "as is", with no explicit or implicit warranty what-
# soever. Use it only at your own risk. In no event may an author or contri-
# butor be held liable for any damage, directly or indirectly, that origina-
# ted through or is caused by creation or modification of this work.

MirBSD is my private tree. MirBSD does not differ very much from OpenBSD
and intentionally tracks OpenBSD. That's why it _is_ OpenBSD, just not the
official one. It's like with DarrenBSD.

At time of this writing, no advertising for MirBSD must be done,
because the advertising clause has not yet been sorted out.

http://templeofhate.com/tglaser/MirBSD/index.php
@
text
@@


1.1.1.2
log
@Import latest OpenBSD CVS tree by CTM in order
to sync the base system and ports tree with Them.

This includes the recent licence changes as well - by
importing the changed base and re-applying the diffs
(with cvs up -j -j) they are inherited, and we're not
bound to the removed clauses any longer.
@
text
@d1 1
a1 1
/*	$OpenBSD: pckbc_ebus.c,v 1.4 2003/06/02 20:02:49 jason Exp $	*/
d15 5
@


1.1.1.3
log
@the previous cvs import did not finish due to 'memory fault'
sync with OpenBSD-cvs
@
text
@d1 1
a1 1
/*	$OpenBSD: pckbc_ebus.c,v 1.5 2003/06/24 21:54:39 henric Exp $	*/
d146 1
a146 1
	    IPL_TTY, 0, pckbcintr, psc, self->dv_xname);
d153 1
a153 1
	    IPL_TTY, 0, pckbcintr, psc, self->dv_xname);
@


1.1.1.4
log
@Time to import OpenBSD once again. Expect breakage.
@
text
@d1 1
a1 1
/*	$OpenBSD: pckbc_ebus.c,v 1.6 2003/12/16 15:08:50 jason Exp $	*/
d123 1
a123 1
		    0, 0, &sc->sc_ioh) != 0) {
@


