head	1.2;
access;
symbols
	cvs-200405160640:1.1.1.3
	cvs-200401271800:1.1.1.2
	cvs-200401261630:1.1.1.2
	cvs-200401021645:1.1.1.2
	cvs-200312222040:1.1.1.2
	cvs-200310020700:1.1.1.1
	cvs-200309271030:1.1.1.1
	cvs-200309261655:1.1.1.1
	cvs-200309251530:1.1.1.1
	cvs-200308302005:1.1.1.1
	cvs-200308171200:1.1.1.1
	ctm-3496:1.1.1.1
	ctm-3449:1.1.1.1
	ctm-3437:1.1.1.1
	cvs-200307191805:1.1.1.1
	ctm-3425:1.1.1.1
	cvs-200307091500:1.1.1.1
	cvs-200307072125:1.1.1.1
	ctm-3389:1.1.1.1
	cvs-200307021520:1.1.1.1
	cvs-200306291430:1.1.1.1
	ctm-3341:1.1.1.1
	cvs-200306082100:1.1.1.1
	ctm-3316:1.1.1.1
	ctm-3272:1.1.1.1
	ctm-3264:1.1.1.1
	cvs-200305071630:1.1.1.1
	ctm-3255:1.1.1.1
	ctm-3229:1.1.1.1
	ctm-3203:1.1.1.1
	cvs-20030410-1130:1.1.1.1
	ctm-3155:1.1.1.1
	ctm-3132:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.2
date	2003.04.06.04.29.25;	author tg;	state dead;
branches;
next	1.1;

1.1
date	2003.03.22.17.50.01;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.03.22.17.50.01;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2003.12.22.20.59.53;	author tg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2004.05.16.08.38.21;	author tg;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Remove "some dead architectures".

These are all but i386 and x86-64 (which is not in the tree yet),
because I have no machines to work with.

Re-adding support should be fairly easy, just cvs adding a partial
OpenBSD checkout and pulling in stuff like kernel signal patch, humantime,
etc. which got added to i386 as well.

You will need gcc support as well.
@
text
@/*	$OpenBSD: busswreg.h,v 1.3 2001/12/19 04:02:25 smurph Exp $ */

/*
 * Memory map for BusSwitch chip found in mvme197 boards.
 */
#ifndef BUSSWREG_H
#define BUSSWREG_H
#define BS_BASE	0xFFF00000

struct bussw_reg {
	volatile u_long		bs_gcsr;
	volatile u_short	bs_iodata;
	volatile u_short	bs_iodir;
	volatile u_short	bs_psar1;
	volatile u_short	bs_pear1;
	volatile u_short	bs_psar2;
	volatile u_short	bs_pear2;
	volatile u_short	bs_psar3;
	volatile u_short	bs_pear3;
	volatile u_short	bs_psar4;
	volatile u_short	bs_pear4;
	volatile u_short	bs_ptr1;
	volatile u_short	bs_ptsr1;
	volatile u_short	bs_ptr2;
	volatile u_short	bs_ptsr2;
	volatile u_short	bs_ptr3;
	volatile u_short	bs_ptsr3;
	volatile u_short	bs_ptr4;
	volatile u_short	bs_ptsr4;
	volatile u_short	bs_ssar1;
	volatile u_short	bs_sear1;
	volatile u_short	bs_ssar2;
	volatile u_short	bs_sear2;
	volatile u_short	bs_ssar3;
	volatile u_short	bs_sear3;
	volatile u_short	bs_ssar4;
	volatile u_short	bs_sear4;
	volatile u_short	bs_str1;
	volatile u_short	bs_stsr1;
	volatile u_short	bs_str2;
	volatile u_short	bs_stsr2;
	volatile u_short	bs_str3;
	volatile u_short	bs_stsr3;
	volatile u_short	bs_str4;
	volatile u_short	bs_stsr4;
	volatile u_long		bs_par;
	volatile u_long		bs_sar;
	volatile u_long		bs_btimer;
	volatile u_long		bs_pal;
	volatile u_long		bs_wppa;
	volatile u_long		bs_wp;
	volatile u_long		bs_romcr;
	volatile u_long		bs_lmi;
	volatile u_long		bs_intr1;
	volatile u_long		bs_intr2;
	volatile u_long		bs_tcomp1;
	volatile u_long		bs_tcount1;
	volatile u_long		bs_tcomp2;
	volatile u_long		bs_tcount2;
	volatile u_long		bs_gpr1;
	volatile u_long		bs_gpr2;
	volatile u_long		bs_gpr3;
	volatile u_long		bs_gpr4;
	volatile u_long		bs_xctags;
	volatile u_long		bs_res3;
	volatile u_long		bs_xccr;
	volatile u_long		bs_vec1;
	volatile u_long		bs_vec2;
	volatile u_long		bs_vec3;
	volatile u_long		bs_vec4;
	volatile u_long		bs_vec5;
	volatile u_long		bs_vec6;
	volatile u_long		bs_vec7;
};

/* GCSR bit definitions */
#define BS_CHIPID(x)	(((x)->bs_gcsr & 0xFF000000) >> 16)
#define BS_CHIPREV(x)	(((x)->bs_gcsr & 0x00FF0000) >> 16)
#define BS_GCSR_APRI0	0x00000001	/* Bus Request 0 Priority indicator (CPU0)*/
#define BS_GCSR_APRI1	0x00000002	/* Bus Request 1 Priority indicator (CPU1)*/
#define BS_GCSR_APRI2	0x00000003	/* Bus Request 2 Priority indicator (mc88410)*/
#define BS_GCSR_AMOD	0x00000004	/* Arbitration Mode */
#define BS_GCSR_BREN	0x00000008	/* Bus Request Enable */
#define BS_GCSR_CPUID	0x00000010	/* CPU ID */
#define BS_GCSR_B410	0x00000020	/* BUS410 indicator */
#define BS_GCSR_INVD	0x00000040	/* Invalidate Decoder */
#define BS_GCSR_USR	0x00000080	/* User Access Enable */
#define BS_GCSR_XIPL	0x00000100	/* External IPL Enable */
#define BS_GCSR_TCPU1	0x00000200	/* Test CPU 1 Registers */
#define BS_GCSR_XCC	0x00000400	/* External Cache Controller */
#define BS_GCSR_INCB	0x00000800	/* Increment On Burst */
#define BS_GCSR_TDPR	0x00002000	/* Test Dual Processor Registers */
#define BS_GCSR_TBB	0x00004000	/* Test Bus Busy */
#define BS_GCSR_POR	0x00008000	/* Power On Reset */

/* System Attribute Registers bit definitions */
#define BS_SAR_DEN	0x01	/* Decode Enable */
#define BS_SAR_INVR	0x04	/* Invalidate On Reads */
#define BS_SAR_GBL	0x08	/* Global Access */

/* Bus Timer Register bit definitions */
#define BS_BTIMER_PBT8		0x00	/* Processor Bus Timout, 8 usec */
#define BS_BTIMER_PBT64		0x01	/* Processor Bus Timout, 64 usec */
#define BS_BTIMER_PBT256	0x02	/* Processor Bus Timout, 256 usec */
#define BS_BTIMER_PBTD		0x03	/* Processor Bus Timout, disable */
#define BS_BTIMER_SBT8		(0x00 << 2)	/* System Bus Timout, 8 usec */
#define BS_BTIMER_SBT64		(0x01 << 2)	/* System Bus Timout, 64 usec */
#define BS_BTIMER_SBT256	(0x02 << 2)	/* System Bus Timout, 256 usec */
#define BS_BTIMER_SBTD		(0x03 << 2)	/* System Bus Timout, disable */

/* Prescaler Adjust values */
#define BS_PADJUST_50	0xCE	/* 50 MHz clock */
#define BS_PADJUST_40	0xD8	/* 40 MHz clock */
#define BS_PADJUST_33	0xDF	/* 33 MHz clock */
#define BS_PADJUST_25	0xE7	/* 25 MHz clock */

/* ROM Control Register bit definitions */
#define BS_ROMCR_WEN0	0x01000000
#define BS_ROMCR_WEN1   0x02000000
#define BS_ROMCR_SGLB	0x04000000
#define BS_ROMCR_ROM0	0x80000000

/* External Cache Control Register bit definitions */
#define BS_XCC_F0	0x00000001
#define BS_XCC_F1	0x00000002
#define BS_XCC_FBSY	0x00000004
#define BS_XCC_DIAG	0x00000008

/* 
 * INTR1 - Abort Control Register 
 * Cross Processor Interrupt Register 
 * Timer Interrupt 1 Register 
 * Timer Interrupt 2 Register 
 */
#define BS_INTR1_ABORT_ICLR	0x08000000	/* abort interrupt clear */
#define BS_INTR1_ABORT_IEN	0x10000000	/* abort interrupt enable */
#define BS_INTR1_ABORT_INT	0x20000000	/* abort interrupt received */
#define BS_INTR1_ABORT_ABT	0x40000000	/* abort interrupt asserted */

#define BS_INTR1_CPI_ICLR	0x00080000	/* cpi interrupt clear */
#define BS_INTR1_CPI_IEN	0x00100000	/* cpi interrupt enable */
#define BS_INTR1_CPI_INT	0x00200000	/* cpi interrupt received */
#define BS_INTR1_CPI_STAT	0x00400000	/* cpi interrupt status */
#define BS_INTR1_CPI_SCPI	0x00800000	/* send cross proc interrupt */

#define BS_INTR1_TINT1_ICLR	0x00000800	/* timer 1 interrupt clear */
#define BS_INTR1_TINT1_IEN	0x00001000	/* timer 1 interrupt enable */
#define BS_INTR1_TINT1_INT	0x00002000	/* timer 1 interrupt received */
#define BS_INTR1_TINT1_LM	0x00000700	/* timer 1 level mask */
#define BS_INTR1_TINT1_LEVEL(x)	((x << 8) & BS_INTR1_TINT1_LM)

#define BS_INTR1_TINT2_ICLR	0x00000008	/* timer 1 interrupt clear */
#define BS_INTR1_TINT2_IEN	0x00000010	/* timer 1 interrupt enable */
#define BS_INTR1_TINT2_INT	0x00000020	/* timer 1 interrupt received */
#define BS_INTR1_TINT2_LM	0x00000007	/* timer 1 level mask */
#define BS_INTR1_TINT2_LEVEL(x)	(x & BS_INTR1_TINT2_LM)

/* Vector Base Register (A read upon an interrupt reveals the source) */
#define BS_VBASE_SRC_TMR1	0x0
#define BS_VBASE_SRC_TMR2	0x1
#define BS_VBASE_SRC_WPE	0x2
#define BS_VBASE_SRC_PAL	0x3
#define BS_VBASE_SRC_EXT	0x4	/* external interrupt */
#define BS_VBASE_SRC_SPUR	0x7	/* spurious interrupt */

/* 
 * INTR2 - Write Post Control Register 
 * Processor Address Log Interrupt Register 
 * External Interrupt Register 
 * Vector Base 
 */
#define BS_INTR2_WPINT_ICLR	0x08000000	/* WPINT interrupt clear */
#define BS_INTR2_WPINT_IEN	0x10000000	/* WPINT interrupt enable */
#define BS_INTR2_WPINT_INT	0x20000000	/* WPINT interrupt received */
#define BS_INTR2_WPINT_LM	0x07000000	/* WPINT level mask */
#define BS_INTR2_WPINT_LEVEL(x)	((x << 24) & BS_INTR2_WPINT_LM)

#define BS_INTR2_PALINT_ICLR	0x00080000	/* PALINT interrupt clear */
#define BS_INTR2_PALINT_IEN	0x00100000	/* PALINT interrupt enable */
#define BS_INTR2_PALINT_INT	0x00200000	/* PALINT interrupt received */
#define BS_INTR2_PALINT_PLTY	0x00800000	/* PALINT polarity */
#define BS_INTR2_PALINT_LM	0x00070000	/* PALINT level mask */
#define BS_INTR2_PALINT_LEVEL(x)	((x << 16) & BS_INTR2_PALINT_LM)

#define BS_INTR2_XINT_ICLR	0x00000800	/* XINT interrupt clear */
#define BS_INTR2_XINT_IEN	0x00001000	/* XINT interrupt enable */
#define BS_INTR2_XINT_INT	0x00002000	/* XINT interrupt received */
#define BS_INTR2_XINT_EL	0x00004000	/* XINT edge/level */
#define BS_INTR2_XINT_PLTY	0x00008000	/* XINT polarity */
#define BS_INTR2_XINT_LM	0x00000700	/* XINT level mask */
#define BS_INTR2_XINT_LEVEL(x)	((x << 24) & BS_INTR2_XINT_LM)

/* We lock off BusSwitch vectors at 0x40 */
#define BS_VECBASE	0x40
#define BS_NVEC		16

/* Bottom 4 bits of the vector returned during IACK cycle */
#define BS_TMR1IRQ	0x01	/* lowest */
#define BS_TMR2IRQ	0x02
#define BS_ABORTIRQ	0x03

/* Define the Abort vector */
#define BS_ABORTVEC  	(BS_VECBASE | BS_ABORTIRQ)

#endif /* BUSSWREG_H */
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Import OpenBSD 3.3 source repository from CTM 3132 the first time
This opens an OpenBSD-mirabile (aka MirBSD) repository.

### MirBSD is:
# Copyright (c) 1982-2003 by Thorsten "mirabile" Glaser <x86@@ePost.de>
# Copyright © 1968-2003  The authors of And contributors to UNIX®, the
#       C Language, BSD/Berkeley Unix; 386BSD, NetBSD 1.1 and OpenBSD.
#
# Anyone who obtained a copy of this work is hereby permitted to freely use,
# distribute, modify, merge, sublicence, give away or sell it as long as the
# authors are given due credit and the following notice is retained:
#
# This work is provided "as is", with no explicit or implicit warranty what-
# soever. Use it only at your own risk. In no event may an author or contri-
# butor be held liable for any damage, directly or indirectly, that origina-
# ted through or is caused by creation or modification of this work.

MirBSD is my private tree. MirBSD does not differ very much from OpenBSD
and intentionally tracks OpenBSD. That's why it _is_ OpenBSD, just not the
official one. It's like with DarrenBSD.

At time of this writing, no advertising for MirBSD must be done,
because the advertising clause has not yet been sorted out.

http://templeofhate.com/tglaser/MirBSD/index.php
@
text
@@


1.1.1.2
log
@Time to import OpenBSD once again. Expect breakage.
@
text
@d1 1
a1 1
/*	$OpenBSD: busswreg.h,v 1.4 2003/10/11 22:08:57 miod Exp $ */
d129 5
a133 5
/*
 * INTR1 - Abort Control Register
 * Cross Processor Interrupt Register
 * Timer Interrupt 1 Register
 * Timer Interrupt 2 Register
d166 5
a170 5
/*
 * INTR2 - Write Post Control Register
 * Processor Address Log Interrupt Register
 * External Interrupt Register
 * Vector Base
@


1.1.1.3
log
@large-scale import of OpenBSD 3.5-current source base including many fixes
note: from now, we will not be binary compatible with OpenBSD apps any
longer (due to syscall numbering differences); both an OpenBSD compat and
a conversion tool for old MirOS #7 apps will be delivered later.

The src/ tree is locked from now.
@
text
@d1 1
a1 1
/*	$OpenBSD: busswreg.h,v 1.6 2004/04/24 19:51:47 miod Exp $ */
d6 69
a74 77
#ifndef	BUSSWREG_H
#define	BUSSWREG_H

#define BS_BASE		0xfff00000
#define	BS_SIZE		0x00000120

#define	BS_CHIPID	0x0000
#define	BS_CHIPREV	0x0001
#define	BS_GCSR		0x0002
#define	BS_IODATA	0x0004
#define	BS_IODIR	0x0006
#define	BS_PSAR1	0x0008
#define	BS_PEAR1	0x000a
#define	BS_PSAR2	0x000c
#define	BS_PEAR2	0x000e
#define	BS_PSAR3	0x0010
#define	BS_PEAR3	0x0012
#define	BS_PSAR4	0x0014
#define	BS_PEAR4	0x0016
#define	BS_PTR1		0x0018
#define	BS_PTSR1	0x001a
#define	BS_PTR2		0x001c
#define	BS_PTSR2	0x001e
#define	BS_PTR3		0x0020
#define	BS_PTSR3	0x0022
#define	BS_PTR4		0x0024
#define	BS_PTSR4	0x0026
#define	BS_SSAR1	0x0028
#define	BS_SEAR1	0x002a
#define	BS_SSAR2	0x002c
#define	BS_SEAR2	0x002e
#define	BS_SSAR3	0x0030
#define	BS_SEAR3	0x0032
#define	BS_SSAR4	0x0034
#define	BS_SEAR4	0x0036
#define	BS_STR1		0x0038
#define	BS_STSR1	0x003a
#define	BS_STR2		0x003c
#define	BS_STSR2	0x003e
#define	BS_STR3		0x0040
#define	BS_STSR3	0x0042
#define	BS_STR4		0x0044
#define	BS_STSR4	0x0046
#define	BS_PAR		0x0048
#define	BS_SAR		0x004c
#define	BS_BTIMER	0x0051
#define	BS_PADJUST	0x0052
#define	BS_PCOUNT	0x0053
#define	BS_PAL		0x0054
#define	BS_WPPA		0x0058
#define	BS_WPTPA	0x005c
#define	BS_WPPAT	0x005e
#define	BS_ROMCR	0x0060
#define	BS_TCTRL1	0x0062
#define	BS_TCTRL2	0x0063
#define	BS_LEVEL	0x0064
#define	BS_MASK		0x0065
#define	BS_ISEL0	0x0066
#define	BS_ISEL1	0x0067
#define	BS_ABORT	0x0068
#define	BS_CPINT	0x0069
#define	BS_TINT1	0x006a
#define	BS_TINT2	0x006b
#define	BS_WPINT	0x006c
#define	BS_PALINT	0x006d
#define	BS_XINT		0x006e
#define	BS_VBASE	0x006f
#define	BS_TCOMP1	0x0070
#define	BS_TCOUNT1	0x0074
#define	BS_TCOMP2	0x0078
#define	BS_TCOUNT2	0x007c
#define	BS_GPR		0x0080
#define	BS_XCTAGS	0x0090
#define	BS_XCCR		0x0100
#define	BS_VEC		0x0104

#define	BUSSWITCH_ID	0x21	/* value at CHIPID */
d77 2
d112 4
a115 4
#define BS_PADJUST_50	0xce	/* 50 MHz clock */
#define BS_PADJUST_40	0xd8	/* 40 MHz clock */
#define BS_PADJUST_33	0xdf	/* 33 MHz clock */
#define BS_PADJUST_25	0xe7	/* 25 MHz clock */
d129 28
a156 50
/* Abort Control Register */
#define BS_ABORT_ICLR	0x08	/* abort interrupt clear */
#define BS_ABORT_IEN	0x10	/* abort interrupt enable */
#define BS_ABORT_INT	0x20	/* abort interrupt received */
#define BS_ABORT_ABT	0x40	/* abort interrupt asserted */

/* Cross Processor Interrupt Register */
#define BS_CPI_ICLR	0x08	/* cpi interrupt clear */
#define BS_CPI_IEN	0x10	/* cpi interrupt enable */
#define BS_CPI_INT	0x20	/* cpi interrupt received */
#define BS_CPI_STAT	0x40	/* cpi interrupt status */
#define BS_CPI_SCPI	0x80	/* send cross proc interrupt */

/* Timer Interrupt 1 Register */
#define BS_TINT1_ICLR	0x08	/* timer 1 interrupt clear */
#define BS_TINT1_IEN	0x10	/* timer 1 interrupt enable */
#define BS_TINT1_INT	0x20	/* timer 1 interrupt received */
#define BS_TINT1_LM	0x07	/* timer 1 level mask */
#define BS_TINT1_LEVEL(x)	(x & BS_TINT1_LM)

/* Timer Interrupt 2 Register */
#define BS_TINT2_ICLR	0x08	/* timer 1 interrupt clear */
#define BS_TINT2_IEN	0x10	/* timer 1 interrupt enable */
#define BS_TINT2_INT	0x20	/* timer 1 interrupt received */
#define BS_TINT2_LM	0x07	/* timer 1 level mask */
#define BS_TINT2_LEVEL(x)	(x & BS_TINT2_LM)

/* Write Post Control Register */
#define BS_WPINT_ICLR	0x08	/* WPINT interrupt clear */
#define BS_WPINT_IEN	0x10	/* WPINT interrupt enable */
#define BS_WPINT_INT	0x20	/* WPINT interrupt received */
#define BS_WPINT_LM	0x07	/* WPINT level mask */
#define BS_WPINT_LEVEL(x)	(x & BS_WPINT_LM)

/* Processor Address Log Interrupt Register */
#define BS_PALINT_ICLR	0x00	/* PALINT interrupt clear */
#define BS_PALINT_IEN	0x10	/* PALINT interrupt enable */
#define BS_PALINT_INT	0x20	/* PALINT interrupt received */
#define BS_PALINT_PLTY	0x80	/* PALINT polarity */
#define BS_PALINT_LM	0x07	/* PALINT level mask */
#define BS_PALINT_LEVEL(x)	(x & BS_PALINT_LM)

/* External Interrupt Register */
#define BS_XINT_ICLR	0x00	/* XINT interrupt clear */
#define BS_XINT_IEN	0x10	/* XINT interrupt enable */
#define BS_XINT_INT	0x20	/* XINT interrupt received */
#define BS_XINT_EL	0x40	/* XINT edge/level */
#define BS_XINT_PLTY	0x80	/* XINT polarity */
#define BS_XINT_LM	0x07	/* XINT level mask */
#define BS_XINT_LEVEL(x)	(x & BS_XINT_LM)
d166 27
d195 1
a195 1
#define BS_NVEC		0x10
d205 1
a205 1
#endif	/* BUSSWREG_H */
@


