head	1.2;
access;
symbols
	cvs-200405160640:1.1.1.5
	cvs-200401271800:1.1.1.4
	cvs-200401261630:1.1.1.4
	cvs-200401021645:1.1.1.3
	cvs-200312222040:1.1.1.3
	cvs-200310020700:1.1.1.2
	cvs-200309271030:1.1.1.2
	cvs-200309261655:1.1.1.2
	cvs-200309251530:1.1.1.2
	cvs-200308302005:1.1.1.2
	cvs-200308171200:1.1.1.2
	ctm-3496:1.1.1.2
	ctm-3449:1.1.1.2
	ctm-3437:1.1.1.2
	cvs-200307191805:1.1.1.2
	ctm-3425:1.1.1.2
	cvs-200307091500:1.1.1.2
	cvs-200307072125:1.1.1.2
	ctm-3389:1.1.1.2
	cvs-200307021520:1.1.1.2
	cvs-200306291430:1.1.1.2
	ctm-3341:1.1.1.2
	cvs-200306082100:1.1.1.2
	ctm-3316:1.1.1.2
	ctm-3272:1.1.1.1
	ctm-3264:1.1.1.1
	cvs-200305071630:1.1.1.1
	ctm-3255:1.1.1.1
	ctm-3229:1.1.1.1
	ctm-3203:1.1.1.1
	cvs-20030410-1130:1.1.1.1
	ctm-3155:1.1.1.1
	ctm-3132:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.2
date	2003.04.06.04.29.25;	author tg;	state dead;
branches;
next	1.1;

1.1
date	2003.03.22.17.50.01;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.03.22.17.50.01;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2003.06.05.17.35.37;	author tg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2003.12.22.20.59.53;	author tg;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2004.01.26.18.42.15;	author tg;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2004.05.16.08.38.20;	author tg;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Remove "some dead architectures".

These are all but i386 and x86-64 (which is not in the tree yet),
because I have no machines to work with.

Re-adding support should be fairly easy, just cvs adding a partial
OpenBSD checkout and pulling in stuff like kernel signal patch, humantime,
etc. which got added to i386 as well.

You will need gcc support as well.
@
text
@/*	$OpenBSD: bussw.c,v 1.6 2002/03/14 01:26:39 millert Exp $ */

/*
 * Copyright (c) 1999 Steve Murphree, Jr.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed under OpenBSD by
 *	Theo de Raadt for Willowglen Singapore.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS
 * OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include <sys/param.h>
#include <sys/kernel.h>
#include <sys/ioctl.h>
#include <sys/device.h>
#include <sys/systm.h>
#include <sys/uio.h>
#include <sys/malloc.h>
#include <machine/psl.h>
#include <machine/autoconf.h>
#include <machine/cpu.h>
#include <machine/mioctl.h>
#include <machine/vmparam.h>

#include <mvme88k/dev/busswreg.h>
#include <mvme88k/dev/busswfunc.h>

struct bussw_softc {
	struct device		sc_dev;
	void *		sc_paddr;
	void *		sc_vaddr;
	int		sc_len;
	struct intrhand sc_abih;	/* `abort' switch */
	struct bussw_reg        *sc_bussw;
};

void    bussw_attach(struct device *, struct device *, void *);
int     bussw_match(struct device *, void *, void *);

struct cfattach bussw_ca = { 
	sizeof(struct bussw_softc), bussw_match, bussw_attach
}; 
 
struct cfdriver bussw_cd = {
	NULL, "bussw", DV_DULL, 0
};

int bussw_print(void *args, const char *bus);
int bussw_scan(struct device *parent, void *child, void *args);
int busswabort(void *);

int
bussw_match(parent, vcf, args)
	struct device *parent;
	void *vcf, *args;
{
	struct confargs *ca = args;
	struct bussw_reg *bussw;
	/* Don't match if wrong cpu */
	if (brdtyp != BRD_197) return (0);	/* The only one... */
	
	bussw = (struct bussw_reg *)(IIOV(ca->ca_paddr));
	if (badvaddr((vm_offset_t)bussw, 4)) {
	    printf("==> busswitch: failed address check.\n");
	    return (0);
	}
	return (1);
}

void
bussw_attach(parent, self, args)
	struct device *parent, *self;
	void *args;
{
	struct confargs *ca = args;
	struct bussw_softc      *sc = (struct bussw_softc *)self;
        struct bussw_reg *bs;

	sc->sc_vaddr = sc->sc_paddr = ca->ca_paddr;
	bs = sc->sc_bussw = (struct bussw_reg *)sc->sc_vaddr;
	bs->bs_intr2 |= BS_VECBASE;
	bs->bs_gcsr |= BS_GCSR_XIPL;
	/*
	 * pseudo driver, abort interrupt handler
   */
	sc->sc_abih.ih_fn = busswabort;
	sc->sc_abih.ih_arg = 0;
	sc->sc_abih.ih_wantframe = 1;
	sc->sc_abih.ih_ipl = IPL_NMI;	/* level 8!! */
	busswintr_establish(BS_ABORTIRQ, &sc->sc_abih);
	bs->bs_intr1 |= BS_INTR1_ABORT_IEN;

	printf(": rev %d\n", BS_CHIPREV(bs));
	config_search(bussw_scan, self, args);
}

int
bussw_print(args, bus)
	void *args;
	const char *bus;
{
	struct confargs *ca = args;

	if (ca->ca_offset != -1)
		printf(" offset 0x%x", ca->ca_offset);
	if (ca->ca_ipl > 0)
		printf(" ipl %d", ca->ca_ipl);
	return (UNCONF);
}

int
bussw_scan(parent, child, args)
	struct device *parent;
	void *child, *args;
{
	struct cfdata *cf = child;
	struct bussw_softc *sc = (struct bussw_softc *)parent;
	struct confargs oca;

	if (parent->dv_cfdata->cf_driver->cd_indirect) {
		printf(" indirect devices not supported\n");
		return 0;
	}

	bzero(&oca, sizeof oca);
	oca.ca_offset = cf->cf_loc[0];
	oca.ca_ipl = cf->cf_loc[1];
	if (((int)oca.ca_offset != -1) && ISIIOVA(sc->sc_vaddr + oca.ca_offset)) {
		oca.ca_vaddr = sc->sc_vaddr + oca.ca_offset;
		oca.ca_paddr = sc->sc_paddr + oca.ca_offset;
	} else {
		oca.ca_vaddr = (void *)-1;
		oca.ca_paddr = (void *)-1;
	}
	oca.ca_bustype = BUS_BUSSWITCH;
	oca.ca_master = (void *)sc->sc_bussw;
	oca.ca_name = cf->cf_driver->cd_name;
	if ((*cf->cf_attach->ca_match)(parent, cf, &oca) == 0)
		return (0);
	config_attach(parent, cf, &oca, bussw_print);
	return (1);
}

int
busswintr_establish(vec, ih)
	int vec;
	struct intrhand *ih;
{
	if (vec >= BS_NVEC) {
		printf("bussw: illegal vector: 0x%x\n", vec);
		panic("busswintr_establish");
	}
	return (intr_establish(BS_VECBASE+vec, ih));
}

int
busswabort(eframe)
	void *eframe;
{
	struct frame *frame = eframe;

	struct bussw_softc *sc = (struct bussw_softc *)bussw_cd.cd_devs[0];
        struct bussw_reg *bs  = sc->sc_bussw;
	
	if (bs->bs_intr1 & BS_INTR1_ABORT_INT) {
		bs->bs_intr1 |= BS_INTR1_ABORT_ICLR;
		nmihand(frame);
		return 1;
	}
	return 0;
}

@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Import OpenBSD 3.3 source repository from CTM 3132 the first time
This opens an OpenBSD-mirabile (aka MirBSD) repository.

### MirBSD is:
# Copyright (c) 1982-2003 by Thorsten "mirabile" Glaser <x86@@ePost.de>
# Copyright © 1968-2003  The authors of And contributors to UNIX®, the
#       C Language, BSD/Berkeley Unix; 386BSD, NetBSD 1.1 and OpenBSD.
#
# Anyone who obtained a copy of this work is hereby permitted to freely use,
# distribute, modify, merge, sublicence, give away or sell it as long as the
# authors are given due credit and the following notice is retained:
#
# This work is provided "as is", with no explicit or implicit warranty what-
# soever. Use it only at your own risk. In no event may an author or contri-
# butor be held liable for any damage, directly or indirectly, that origina-
# ted through or is caused by creation or modification of this work.

MirBSD is my private tree. MirBSD does not differ very much from OpenBSD
and intentionally tracks OpenBSD. That's why it _is_ OpenBSD, just not the
official one. It's like with DarrenBSD.

At time of this writing, no advertising for MirBSD must be done,
because the advertising clause has not yet been sorted out.

http://templeofhate.com/tglaser/MirBSD/index.php
@
text
@@


1.1.1.2
log
@Import latest OpenBSD CVS tree by CTM in order
to sync the base system and ports tree with Them.

This includes the recent licence changes as well - by
importing the changed base and re-applying the diffs
(with cvs up -j -j) they are inherited, and we're not
bound to the removed clauses any longer.
@
text
@d1 1
a1 1
/*	$OpenBSD: bussw.c,v 1.7 2003/06/02 07:06:56 deraadt Exp $ */
d14 6
@


1.1.1.3
log
@Time to import OpenBSD once again. Expect breakage.
@
text
@d1 1
a1 1
/*	$OpenBSD: bussw.c,v 1.9 2003/12/19 22:30:18 miod Exp $ */
d5 1
a5 1
 *
d56 1
a56 1
struct cfattach bussw_ca = {
d58 2
a59 2
};

a74 1

d76 2
a77 3
	if (brdtyp != BRD_197)
		return (0);

d79 4
a82 3
	if (badvaddr((vaddr_t)bussw, 4))
		return (0);

d109 1
a109 1
	printf(": rev %ld\n", BS_CHIPREV(bs));
d180 1
a180 1

@


1.1.1.4
log
@Import OpenBSD as of today again (seems pretty stable, I hope)

Prominent changes: more bgpd, tcpmd5; tcpdump/isakmpd fixes
@
text
@d1 1
a1 1
/*	$OpenBSD: bussw.c,v 1.11 2004/01/14 20:52:52 miod Exp $ */
d61 1
a61 1
	NULL, "bussw", DV_DULL
d136 5
@


1.1.1.5
log
@large-scale import of OpenBSD 3.5-current source base including many fixes
note: from now, we will not be binary compatible with OpenBSD apps any
longer (due to syscall numbering differences); both an OpenBSD compat and
a conversion tool for old MirOS #7 apps will be delivered later.

The src/ tree is locked from now.
@
text
@d1 2
a2 1
/*	$OpenBSD: bussw.c,v 1.14 2004/05/07 18:10:28 miod Exp $ */
d42 1
d46 5
a50 3
	struct intrhand 	sc_abih;	/* `abort' switch */
	bus_space_tag_t		sc_iot;
	bus_space_handle_t	sc_ioh;
d64 3
a66 4
int	bussw_print(void *, const char *);
int	bussw_scan(struct device *, void *, void *);
int	busswabort(void *);
int	busswintr_establish(int, struct intrhand *);
d74 1
a74 3
	bus_space_handle_t ioh;
	int rc;
	u_int8_t chipid;
d78 1
a78 1
		return 0;
d80 3
a82 13
	if (bus_space_map(ca->ca_iot, ca->ca_paddr, BS_SIZE, 0, &ioh) != 0)
		return 0;
	rc = badvaddr((vaddr_t)bus_space_vaddr(ca->ca_iot, ioh), 4);
	if (rc == 0) {
		chipid = bus_space_read_1(ca->ca_iot, ioh, BS_CHIPID);
		if (chipid != BUSSWITCH_ID) {
#ifdef DEBUG
			printf("==> busswitch: wrong chip id %x\n", chipid);
#endif
			rc = -1;
		}
	}
	bus_space_unmap(ca->ca_iot, ioh, BS_SIZE);
d84 1
a84 1
	return rc == 0;
d93 2
a94 15
	struct bussw_softc *sc = (struct bussw_softc *)self;
	bus_space_handle_t ioh;

	if (bus_space_map(ca->ca_iot, ca->ca_paddr, BS_SIZE, 0, &ioh) != 0) {
		printf(": can't map registers!\n");
		return;
	}

	sc->sc_iot = ca->ca_iot;
	sc->sc_ioh = ioh;

	bus_space_write_1(sc->sc_iot, ioh, BS_VBASE,
	    bus_space_read_1(sc->sc_iot, ioh, BS_VBASE) | BS_VECBASE);
	bus_space_write_2(sc->sc_iot, ioh, BS_GCSR,
	    bus_space_read_2(sc->sc_iot, ioh, BS_GCSR) | BS_GCSR_XIPL);
d96 4
d102 1
a102 1
	 */
d106 1
a106 2
	sc->sc_abih.ih_ipl = IPL_NMI;

d108 1
a108 5
	bus_space_write_1(sc->sc_iot, ioh, BS_ABORT,
	    bus_space_read_4(sc->sc_iot, ioh, BS_ABORT) | BS_ABORT_IEN);

	printf(": rev %x\n",
	    bus_space_read_1(sc->sc_iot, ioh, BS_CHIPREV));
d110 1
d134 2
a135 1
	struct confargs oca, *ca = args;
a137 2
	oca.ca_iot = ca->ca_iot;
	oca.ca_dmat = ca->ca_dmat;
d140 3
a142 2
	if (oca.ca_offset != -1) {
		oca.ca_paddr = ca->ca_paddr + oca.ca_offset;
d144 2
a145 1
		oca.ca_paddr = -1;
d148 1
d161 5
a165 6
#ifdef DIAGNOSTIC
	if (vec < 0 || vec >= BS_NVEC)
		panic("busswintr_establish: illegal vector 0x%x\n", vec);
#endif

	return (intr_establish(BS_VECBASE + vec, ih));
d175 1
a175 1
	u_int8_t abort;
d177 2
a178 4
	abort = bus_space_read_1(sc->sc_iot, sc->sc_ioh, BS_ABORT);
	if (abort & BS_ABORT_INT) {
		bus_space_write_1(sc->sc_iot, sc->sc_ioh, BS_ABORT,
		    abort | BS_ABORT_ICLR);
d184 1
@


