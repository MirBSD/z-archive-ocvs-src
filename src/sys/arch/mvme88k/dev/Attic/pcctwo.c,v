head	1.2;
access;
symbols
	cvs-200405160640:1.1.1.5
	cvs-200401271800:1.1.1.4
	cvs-200401261630:1.1.1.4
	cvs-200401021645:1.1.1.3
	cvs-200312222040:1.1.1.3
	cvs-200310020700:1.1.1.2
	cvs-200309271030:1.1.1.2
	cvs-200309261655:1.1.1.2
	cvs-200309251530:1.1.1.2
	cvs-200308302005:1.1.1.2
	cvs-200308171200:1.1.1.2
	ctm-3496:1.1.1.2
	ctm-3449:1.1.1.2
	ctm-3437:1.1.1.2
	cvs-200307191805:1.1.1.2
	ctm-3425:1.1.1.2
	cvs-200307091500:1.1.1.2
	cvs-200307072125:1.1.1.2
	ctm-3389:1.1.1.2
	cvs-200307021520:1.1.1.2
	cvs-200306291430:1.1.1.2
	ctm-3341:1.1.1.2
	cvs-200306082100:1.1.1.2
	ctm-3316:1.1.1.2
	ctm-3272:1.1.1.1
	ctm-3264:1.1.1.1
	cvs-200305071630:1.1.1.1
	ctm-3255:1.1.1.1
	ctm-3229:1.1.1.1
	ctm-3203:1.1.1.1
	cvs-20030410-1130:1.1.1.1
	ctm-3155:1.1.1.1
	ctm-3132:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.2
date	2003.04.06.04.29.25;	author tg;	state dead;
branches;
next	1.1;

1.1
date	2003.03.22.17.50.01;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.03.22.17.50.01;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2003.06.05.17.35.33;	author tg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2003.12.22.20.59.54;	author tg;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2004.01.26.18.42.19;	author tg;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2004.05.16.08.38.33;	author tg;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Remove "some dead architectures".

These are all but i386 and x86-64 (which is not in the tree yet),
because I have no machines to work with.

Re-adding support should be fairly easy, just cvs adding a partial
OpenBSD checkout and pulling in stuff like kernel signal patch, humantime,
etc. which got added to i386 as well.

You will need gcc support as well.
@
text
@/*	$OpenBSD: pcctwo.c,v 1.16 2002/03/14 01:26:39 millert Exp $ */
/*
 * Copyright (c) 1995 Theo de Raadt
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed under OpenBSD by
 *	Theo de Raadt for Willowglen Singapore.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * VME18x PCC2 chip
 */
#include <sys/param.h>
#include <sys/conf.h>
#include <sys/ioctl.h>
#include <sys/proc.h>
#include <sys/user.h>
#include <sys/tty.h>
#include <sys/uio.h>
#include <sys/systm.h>
#include <sys/kernel.h>
#include <sys/syslog.h>
#include <sys/fcntl.h>
#include <sys/device.h>

#include <machine/autoconf.h>
#include <machine/cpu.h>

#include <dev/cons.h>

#include <mvme88k/dev/pcctwofunc.h>
#include <mvme88k/dev/pcctworeg.h>

#include "bussw.h"

struct pcctwosoftc {
	struct device	sc_dev;
	void		*sc_vaddr;	/* PCC2 space */
	void		*sc_paddr;
	struct pcctworeg *sc_pcc2;	/* the actual registers */
};

void pcctwoattach(struct device *, struct device *, void *);
int  pcctwomatch(struct device *, void *, void *);

struct cfattach pcctwo_ca = {
	sizeof(struct pcctwosoftc), pcctwomatch, pcctwoattach
};

struct cfdriver pcctwo_cd = {
	NULL, "pcctwo", DV_DULL, 0
};

struct pcctworeg *sys_pcc2 = NULL;

int pcc2bus;

int pcctwo_print(void *args, const char *bus);
int pcctwo_scan(struct device *parent, void *child, void *args);

int
pcctwomatch(parent, vcf, args)
struct device *parent;
void *vcf, *args;
{
	struct confargs *ca = args;
	struct pcctworeg *pcc2;

	/* Bomb if wrong cpu */
	switch (brdtyp) {
	case BRD_187:
		pcc2 = (struct pcctworeg *)(IIOV(ca->ca_paddr) + PCC2_PCC2CHIP_OFF);
		break;
	case BRD_197: /* pcctwo is a child of buswitch XXX smurph */
		pcc2 = (struct pcctworeg *)(IIOV(ca->ca_paddr));
		break;
	default:
		/* Bomb if wrong board */
		return (0);
	}

	if (badvaddr((vm_offset_t)pcc2, 4)) {
		printf("==> pcctwo: failed address check.\n");
		return (0);
	}
	if (pcc2->pcc2_chipid != PCC2_CHIPID) {
		printf("==> pcctwo: wrong chip id %x.\n", pcc2->pcc2_chipid);
		return (0);
	}
	return (1);
}

int
pcctwo_print(args, bus)
	void *args;
	const char *bus;
{
	struct confargs *ca = args;

	if (ca->ca_offset != -1)
		printf(" offset 0x%x", ca->ca_offset);
	if (ca->ca_ipl > 0)
		printf(" ipl %d", ca->ca_ipl);
	return (UNCONF);
}

int
pcctwo_scan(parent, child, args)
	struct device *parent;
	void *child, *args;
{
	struct cfdata *cf = child;
	struct pcctwosoftc *sc = (struct pcctwosoftc *)parent;
	struct confargs oca;

	if (parent->dv_cfdata->cf_driver->cd_indirect) {
                printf(" indirect devices not supported\n");
                return 0;
        }

	bzero(&oca, sizeof oca);
	oca.ca_offset = cf->cf_loc[0];
	oca.ca_ipl = cf->cf_loc[1];
	if (((int)oca.ca_offset != -1) && ISIIOVA(sc->sc_vaddr + oca.ca_offset)) {
		oca.ca_vaddr = sc->sc_vaddr + oca.ca_offset;
		oca.ca_paddr = sc->sc_paddr + oca.ca_offset;
	} else {
		oca.ca_vaddr = (void *)-1;
		oca.ca_paddr = (void *)-1;
	}
	oca.ca_bustype = BUS_PCCTWO;
	oca.ca_master = (void *)sc->sc_pcc2;
	oca.ca_name = cf->cf_driver->cd_name;
	if ((*cf->cf_attach->ca_match)(parent, cf, &oca) == 0)
		return (0);
	config_attach(parent, cf, &oca, pcctwo_print);
	return (1);
}

void
pcctwoattach(parent, self, args)
struct device *parent, *self;
void *args;
{
	struct confargs *ca = args;
	struct pcctwosoftc *sc = (struct pcctwosoftc *)self;

	if (sys_pcc2)
		panic("pcc2 already attached!");

	/*
	 * since we know ourself to land in intiobase land,
	 * we must adjust our address
	 */
	sc->sc_paddr = ca->ca_paddr;
	sc->sc_vaddr = (void *)IIOV(sc->sc_paddr);
	
	pcc2bus = ca->ca_bustype;

	switch (pcc2bus) {
	case BUS_MAIN:
		sc->sc_pcc2 = (struct pcctworeg *)(sc->sc_vaddr + PCC2_PCC2CHIP_OFF);
		break;
#if NBUSSW > 0
	case BUS_BUSSWITCH:
		sc->sc_pcc2 = (struct pcctworeg *)sc->sc_vaddr;
		/* 
		 * fake up our address so that pcc2 child devices
		 * are offeset of 0xFFF00000 - XXX smurph
		 */
                sc->sc_paddr -= PCC2_PCC2CHIP_OFF;
                sc->sc_vaddr -= PCC2_PCC2CHIP_OFF;
                /* make sure the bus is mc68040 compatible */
		sc->sc_pcc2->pcc2_genctl |= PCC2_GENCTL_C040;	
		break;
#endif 
	}
	sys_pcc2 = sc->sc_pcc2;

	printf(": rev %d\n", sc->sc_pcc2->pcc2_chiprev);

	sc->sc_pcc2->pcc2_vecbase = PCC2_VECBASE;
	sc->sc_pcc2->pcc2_genctl |= PCC2_GENCTL_IEN;	/* global irq enable */

	config_search(pcctwo_scan, self, args);
}

/*
 * PCC2 interrupts land in a PCC2_NVEC sized hole starting at PCC2_VECBASE
 */
int
pcctwointr_establish(vec, ih)
	int vec;
	struct intrhand *ih;
{
	if (vec >= PCC2_NVEC) {
		printf("pcctwo: illegal vector: 0x%x\n", vec);
		panic("pcctwointr_establish");
	}
	return (intr_establish(PCC2_VECBASE+vec, ih));
}
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Import OpenBSD 3.3 source repository from CTM 3132 the first time
This opens an OpenBSD-mirabile (aka MirBSD) repository.

### MirBSD is:
# Copyright (c) 1982-2003 by Thorsten "mirabile" Glaser <x86@@ePost.de>
# Copyright © 1968-2003  The authors of And contributors to UNIX®, the
#       C Language, BSD/Berkeley Unix; 386BSD, NetBSD 1.1 and OpenBSD.
#
# Anyone who obtained a copy of this work is hereby permitted to freely use,
# distribute, modify, merge, sublicence, give away or sell it as long as the
# authors are given due credit and the following notice is retained:
#
# This work is provided "as is", with no explicit or implicit warranty what-
# soever. Use it only at your own risk. In no event may an author or contri-
# butor be held liable for any damage, directly or indirectly, that origina-
# ted through or is caused by creation or modification of this work.

MirBSD is my private tree. MirBSD does not differ very much from OpenBSD
and intentionally tracks OpenBSD. That's why it _is_ OpenBSD, just not the
official one. It's like with DarrenBSD.

At time of this writing, no advertising for MirBSD must be done,
because the advertising clause has not yet been sorted out.

http://templeofhate.com/tglaser/MirBSD/index.php
@
text
@@


1.1.1.2
log
@Import latest OpenBSD CVS tree by CTM in order
to sync the base system and ports tree with Them.

This includes the recent licence changes as well - by
importing the changed base and re-applying the diffs
(with cvs up -j -j) they are inherited, and we're not
bound to the removed clauses any longer.
@
text
@d1 1
a1 1
/*	$OpenBSD: pcctwo.c,v 1.17 2003/06/02 07:06:56 deraadt Exp $ */
d14 6
@


1.1.1.3
log
@Time to import OpenBSD once again. Expect breakage.
@
text
@d1 1
a1 1
/*	$OpenBSD: pcctwo.c,v 1.18 2003/10/05 20:27:48 miod Exp $ */
d99 1
a99 1
	if (badvaddr((vaddr_t)pcc2, 4)) {
d174 1
a174 1

d184 1
a184 1
		/*
d191 1
a191 1
		sc->sc_pcc2->pcc2_genctl |= PCC2_GENCTL_C040;
d193 1
a193 1
#endif
@


1.1.1.4
log
@Import OpenBSD as of today again (seems pretty stable, I hope)

Prominent changes: more bgpd, tcpmd5; tcpdump/isakmpd fixes
@
text
@d1 1
a1 1
/*	$OpenBSD: pcctwo.c,v 1.21 2004/01/14 20:52:52 miod Exp $ */
d68 1
a68 1
	NULL, "pcctwo", DV_DULL
d80 2
a81 2
	struct device *parent;
	void *vcf, *args;
a88 1
	case BRD_8120:
d132 5
@


1.1.1.5
log
@large-scale import of OpenBSD 3.5-current source base including many fixes
note: from now, we will not be binary compatible with OpenBSD apps any
longer (due to syscall numbering differences); both an OpenBSD compat and
a conversion tool for old MirOS #7 apps will be delivered later.

The src/ tree is locked from now.
@
text
@d1 1
a1 1
/*	$OpenBSD: pcctwo.c,v 1.25 2004/05/07 18:10:28 miod Exp $ */
d28 1
a28 1
 * VME1x7 PCC2 chip
d48 1
a49 1
#include <mvme88k/dev/pcctwovar.h>
d53 9
a61 2
void	pcctwoattach(struct device *, struct device *, void *);
int	pcctwomatch(struct device *, void *, void *);
d71 6
a76 2
int	pcctwo_print(void *args, const char *bus);
int	pcctwo_scan(struct device *parent, void *child, void *args);
d84 1
a84 3
	bus_space_handle_t ioh;
	int rc;
	u_int8_t chipid;
d90 4
a93 1
	case BRD_197:
d96 2
a97 1
		return 0;
d100 3
a102 12
	if (bus_space_map(ca->ca_iot, ca->ca_paddr + PCC2_BASE, PCC2_SIZE,
	    0, &ioh) != 0)
		return 0;
	rc = badvaddr((vaddr_t)bus_space_vaddr(ca->ca_iot, ioh), 4);
	if (rc == 0) {
		chipid = bus_space_read_1(ca->ca_iot, ioh, PCCTWO_CHIPID);
		if (chipid != PCC2_ID) {
#ifdef DEBUG
			printf("==> pcctwo: wrong chip id %x.\n", chipid);
			rc = -1;
#endif
		}
d104 3
a106 20
	bus_space_unmap(ca->ca_iot, ioh, PCC2_SIZE);

	return rc == 0;
}

void
pcctwoattach(parent, self, args)
	struct device *parent, *self;
	void *args;
{
	struct confargs *ca = args;
	struct pcctwosoftc *sc = (struct pcctwosoftc *)self;
	bus_space_handle_t ioh;
	u_int8_t genctl;

	sc->sc_base = ca->ca_paddr + PCC2_BASE;

	if (bus_space_map(ca->ca_iot, sc->sc_base, PCC2_SIZE, 0, &ioh) != 0) {
		printf(": can't map registers!\n");
		return;
d108 1
a108 19

	sc->sc_iot = ca->ca_iot;
	sc->sc_ioh = ioh;

	bus_space_write_1(sc->sc_iot, ioh, PCCTWO_VECBASE, PCC2_VECBASE);
	genctl = bus_space_read_1(sc->sc_iot, ioh, PCCTWO_GENCTL);
#if NBUSSW > 0
	if (ca->ca_bustype == BUS_BUSSWITCH) {
                /* Make sure the bus is mc68040 compatible */
		genctl |= PCC2_GENCTL_C040;
	}
#endif
	genctl |= PCC2_GENCTL_IEN;	/* global irq enable */
	bus_space_write_1(sc->sc_iot, ioh, PCCTWO_GENCTL, genctl);

	printf(": rev %d\n",
	    bus_space_read_1(sc->sc_iot, ioh, PCCTWO_CHIPREV));

	config_search(pcctwo_scan, self, args);
d131 2
a132 1
	struct confargs oca, *ca = args;
a134 2
	oca.ca_iot = ca->ca_iot;
	oca.ca_dmat = ca->ca_dmat;
d137 3
a139 3
	if (oca.ca_offset != -1) {
		/* offset locator for pcctwo children is relative to segment */
		oca.ca_paddr = ca->ca_paddr + oca.ca_offset;
d141 2
a142 1
		oca.ca_paddr = -1;
d145 1
d153 48
d209 5
a213 6
#ifdef DIAGNOSTIC
	if (vec < 0 || vec >= PCC2_NVEC)
		panic("pcctwo_establish: illegal vector 0x%x\n", vec);
#endif

	return (intr_establish(PCC2_VECBASE + vec, ih));
@


