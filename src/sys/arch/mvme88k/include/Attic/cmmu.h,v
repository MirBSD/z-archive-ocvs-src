head	1.2;
access;
symbols
	cvs-200405160640:1.1.1.6
	cvs-200401271800:1.1.1.5
	cvs-200401261630:1.1.1.5
	cvs-200401021645:1.1.1.4
	cvs-200312222040:1.1.1.4
	cvs-200310020700:1.1.1.3
	cvs-200309271030:1.1.1.3
	cvs-200309261655:1.1.1.2
	cvs-200309251530:1.1.1.2
	cvs-200308302005:1.1.1.1
	cvs-200308171200:1.1.1.1
	ctm-3496:1.1.1.1
	ctm-3449:1.1.1.1
	ctm-3437:1.1.1.1
	cvs-200307191805:1.1.1.1
	ctm-3425:1.1.1.1
	cvs-200307091500:1.1.1.1
	cvs-200307072125:1.1.1.1
	ctm-3389:1.1.1.1
	cvs-200307021520:1.1.1.1
	cvs-200306291430:1.1.1.1
	ctm-3341:1.1.1.1
	cvs-200306082100:1.1.1.1
	ctm-3316:1.1.1.1
	ctm-3272:1.1.1.1
	ctm-3264:1.1.1.1
	cvs-200305071630:1.1.1.1
	ctm-3255:1.1.1.1
	ctm-3229:1.1.1.1
	ctm-3203:1.1.1.1
	cvs-20030410-1130:1.1.1.1
	ctm-3155:1.1.1.1
	ctm-3132:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.2
date	2003.04.06.04.29.29;	author tg;	state dead;
branches;
next	1.1;

1.1
date	2003.03.22.17.50.01;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.03.22.17.50.01;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2003.09.25.16.35.54;	author tg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2003.09.27.11.08.14;	author tg;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2003.12.22.20.59.56;	author tg;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2004.01.26.18.42.24;	author tg;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2004.05.16.08.37.59;	author tg;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Remove "some dead architectures".

These are all but i386 and x86-64 (which is not in the tree yet),
because I have no machines to work with.

Re-adding support should be fairly easy, just cvs adding a partial
OpenBSD checkout and pulling in stuff like kernel signal patch, humantime,
etc. which got added to i386 as well.

You will need gcc support as well.
@
text
@/*	$OpenBSD: cmmu.h,v 1.11 2002/03/14 01:26:39 millert Exp $ */
/* 
 * Mach Operating System
 * Copyright (c) 1993-1992 Carnegie Mellon University
 * All Rights Reserved.
 * 
 * Permission to use, copy, modify and distribute this software and its
 * documentation is hereby granted, provided that both the copyright
 * notice and this permission notice appear in all copies of the
 * software, derivative works or modified versions, and any portions
 * thereof, and that both notices appear in supporting documentation.
 * 
 * CARNEGIE MELLON ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS"
 * CONDITION.  CARNEGIE MELLON DISCLAIMS ANY LIABILITY OF ANY KIND FOR
 * ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 * 
 * Carnegie Mellon requests users of this software to return to
 * 
 *  Software Distribution Coordinator  or  Software.Distribution@@CS.CMU.EDU
 *  School of Computer Science
 *  Carnegie Mellon University
 *  Pittsburgh PA 15213-3890
 * 
 * any improvements or extensions that they make and grant Carnegie Mellon 
 * the rights to redistribute these changes.
 */

#ifndef	_MACHINE_CMMU_H_
#define	_MACHINE_CMMU_H_

#include <machine/mmu.h>

/* Area Description */
#define AREA_D_WT	0x00000200	/* write through */
#define AREA_D_G	0x00000080	/* global */
#define AREA_D_CI	0x00000040	/* cache inhibit */
#define AREA_D_TE	0x00000001	/* translation enable */

/* Segment Description */
#define SEG_D_WT	0x00000200	/* write through */
#define SEG_D_SP	0x00000100	/* supervisor protection */
#define SEG_D_G		0x00000080	/* global */
#define SEG_D_CI	0x00000040	/* cache inhibit */
#define SEG_D_WP	0x00000004	/* write protect */
#define SEG_D_V		0x00000001	/* valid */

/*
 * Flags for cmmu_flush_tlb
 */
#define FLUSH_KERNEL    1
#define FLUSH_USER      0
#define FLUSH_ALL       ((vm_offset_t)~0)


#ifndef	_LOCORE
/*
 * Prototypes and stuff for cmmu.c.
 */
extern unsigned cpu_sets[MAX_CPUS];
extern int cpu_cmmu_ratio;
extern unsigned number_cpus, master_cpu;
extern unsigned cache_policy;
extern unsigned number_cpus;
extern unsigned master_cpu;
extern int max_cpus, max_cmmus;

/*
 * This lock protects the cmmu SAR and SCR's; other ports 
 * can be accessed without locking it 
 *
 * May be used from "db_interface.c".
 */
extern struct simplelock cmmu_cpu_lock;

#define CMMU_LOCK   simple_lock(&cmmu_cpu_lock)
#define CMMU_UNLOCK simple_unlock(&cmmu_cpu_lock)

/* machine dependant cmmu function pointer structure */
struct cmmu_p {
	void (*cmmu_init_func)(void);
	void (*show_apr_func)(unsigned);
	void (*setup_board_config_func)(void);
	void (*setup_cmmu_config_func)(void);
	void (*cmmu_dump_config_func)(void);
	void (*cpu_configuration_print_func)(int);
	void (*cmmu_shutdown_now_func)(void);
	void (*cmmu_parity_enable_func)(void);
	unsigned (*cmmu_cpu_number_func)(void);
	unsigned (*cmmu_get_idr_func)(unsigned);
	void (*cmmu_set_sapr_func)(unsigned);
	void (*cmmu_remote_set_sapr_func)(unsigned, unsigned);
	void (*cmmu_set_uapr_func)(unsigned);
	void (*cmmu_set_batc_entry_func)(unsigned, unsigned, unsigned, unsigned);
	void (*cmmu_set_pair_batc_entry_func)(unsigned, unsigned, unsigned);
	void (*cmmu_flush_remote_tlb_func)(unsigned, unsigned, vm_offset_t, int);
	void (*cmmu_flush_tlb_func)(unsigned, vm_offset_t, int);
	void (*cmmu_pmap_activate_func)(unsigned, unsigned,
					     batc_template_t i_batc[BATC_MAX],
					     batc_template_t d_batc[BATC_MAX]);
	void (*cmmu_flush_remote_cache_func)(int, vm_offset_t, int);
	void (*cmmu_flush_cache_func)(vm_offset_t, int);
	void (*cmmu_flush_remote_inst_cache_func)(int, vm_offset_t, int);
	void (*cmmu_flush_inst_cache_func)(vm_offset_t, int);
	void (*cmmu_flush_remote_data_cache_func)(int, vm_offset_t, int);
	void (*cmmu_flush_data_cache_func)(vm_offset_t, int);
	void (*dma_cachectl_func)(vm_offset_t, int, int);
#ifdef DDB
	unsigned (*cmmu_get_by_mode_func)(int, int);
	void (*cmmu_show_translation_func)(unsigned, unsigned, unsigned, int);
	void (*cmmu_cache_state_func)(unsigned, unsigned);
	void (*show_cmmu_info_func)(unsigned);
#endif /* end if DDB */
};

/* THE pointer! */
extern struct cmmu_p *cmmu;

extern struct cmmu_p cmmu88110;
extern struct cmmu_p cmmu8820x;

/* The macros... */
#define cmmu_init (cmmu->cmmu_init_func)
#define show_apr(ap) (cmmu->show_apr_func)(ap)
#define setup_board_config	(cmmu->setup_board_config_func)
#define	setup_cmmu_config 	(cmmu->setup_cmmu_config_func)
#define	cmmu_dump_config	(cmmu->cmmu_dump_config_func)
#define	cpu_configuration_print(a)	(cmmu->cpu_configuration_print_func)(a)
#define	cmmu_shutdown_now	(cmmu->cmmu_shutdown_now_func)
#define	cmmu_parity_enable	(cmmu->cmmu_parity_enable_func)
#define	cmmu_cpu_number		(cmmu->cmmu_cpu_number_func)
#define	cmmu_get_idr(a)		(cmmu->cmmu_get_idr_func)(a)
#define	cmmu_set_sapr(a)	(cmmu->cmmu_set_sapr_func)(a)
#define	cmmu_remote_set_sapr(a, b)	(cmmu->cmmu_remote_set_sapr_func)(a, b)
#define	cmmu_set_uapr(a)	(cmmu->cmmu_set_uapr_func)(a)
#define	cmmu_set_batc_entry(a, b, c, d) 	(cmmu->cmmu_set_batc_entry_func)(a, b, c, d)
#define	cmmu_set_pair_batc_entry(a, b, c)	(cmmu->cmmu_set_pair_batc_entry_func)(a, b, c)
#define	cmmu_flush_remote_tlb(a, b, c, d) 	(cmmu->cmmu_flush_remote_tlb_func)(a, b, c, d)
#define	cmmu_flush_tlb(a, b, c)	(cmmu->cmmu_flush_tlb_func)(a, b, c)
#define	cmmu_pmap_activate(a, b, c, d) 	(cmmu->cmmu_pmap_activate_func)(a, b, c, d) 
#define	cmmu_flush_remote_cache(a, b, c)	(cmmu->cmmu_flush_remote_cache_func)(a, b, c)
#define	cmmu_flush_cache(a, b)	(cmmu->cmmu_flush_cache_func)(a, b)
#define	cmmu_flush_remote_inst_cache(a, b, c)	(cmmu->cmmu_flush_remote_inst_cache_func)(a, b, c)
#define	cmmu_flush_inst_cache(a, b)	(cmmu->cmmu_flush_inst_cache_func)(a, b)
#define	cmmu_flush_remote_data_cache(a, b, c)	(cmmu->cmmu_flush_remote_data_cache_func)(a, b, c)
#define	cmmu_flush_data_cache(a, b)	(cmmu->cmmu_flush_data_cache_func)(a, b)
#define	dma_cachectl(a, b, c)	(cmmu->dma_cachectl_func)(a, b, c)
#ifdef DDB
#define	cmmu_get_by_mode(a, b)	(cmmu->cmmu_get_by_mode_func)(a, b)
#define	cmmu_show_translation(a, b, c, d)	(cmmu->cmmu_show_translation_func)(a, b, c, d)
#define	cmmu_cache_state(a, b)	(cmmu->cmmu_cache_state_func)(a, b)
#define	show_cmmu_info(a)	(cmmu->show_cmmu_info_func)(a)
#endif /* end if DDB */

#endif	/* _LOCORE */

#ifdef M88100
#include <machine/m8820x.h>
#endif /* M88100 */
#ifdef M88110
#include <machine/m88110.h>
#include <machine/m88410.h>
#endif /* M88110 */

#endif	/* _MACHINE_CMMU_H_ */

@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Import OpenBSD 3.3 source repository from CTM 3132 the first time
This opens an OpenBSD-mirabile (aka MirBSD) repository.

### MirBSD is:
# Copyright (c) 1982-2003 by Thorsten "mirabile" Glaser <x86@@ePost.de>
# Copyright © 1968-2003  The authors of And contributors to UNIX®, the
#       C Language, BSD/Berkeley Unix; 386BSD, NetBSD 1.1 and OpenBSD.
#
# Anyone who obtained a copy of this work is hereby permitted to freely use,
# distribute, modify, merge, sublicence, give away or sell it as long as the
# authors are given due credit and the following notice is retained:
#
# This work is provided "as is", with no explicit or implicit warranty what-
# soever. Use it only at your own risk. In no event may an author or contri-
# butor be held liable for any damage, directly or indirectly, that origina-
# ted through or is caused by creation or modification of this work.

MirBSD is my private tree. MirBSD does not differ very much from OpenBSD
and intentionally tracks OpenBSD. That's why it _is_ OpenBSD, just not the
official one. It's like with DarrenBSD.

At time of this writing, no advertising for MirBSD must be done,
because the advertising clause has not yet been sorted out.

http://templeofhate.com/tglaser/MirBSD/index.php
@
text
@@


1.1.1.2
log
@Release Time. Synchronize with OpenBSD 3.4-current (base system).
@
text
@d1 1
a1 1
/*	$OpenBSD: cmmu.h,v 1.12 2003/09/16 20:52:19 miod Exp $ */
d61 3
a64 1
extern unsigned cache_policy;
@


1.1.1.3
log
@cvs is playing games with me.

@@@@@@ CONSIDER THE TREE LOCKED NOW @@@@@@
@
text
@d1 1
a1 1
/*	$OpenBSD: cmmu.h,v 1.13 2003/09/26 22:27:25 miod Exp $ */
d96 2
a97 1
	    u_int32_t i_batc[BATC_MAX], u_int32_t d_batc[BATC_MAX]);
@


1.1.1.4
log
@Time to import OpenBSD once again. Expect breakage.
@
text
@d1 2
a2 2
/*	$OpenBSD: cmmu.h,v 1.15 2003/11/09 00:32:00 miod Exp $ */
/*
d6 1
a6 1
 *
d12 1
a12 1
 *
d16 1
a16 1
 *
d18 1
a18 1
 *
d23 2
a24 2
 *
 * any improvements or extensions that they make and grant Carnegie Mellon
d33 22
d66 2
a67 2
 * This lock protects the cmmu SAR and SCR's; other ports
 * can be accessed without locking it
d76 1
a76 1
/* machine dependent cmmu function pointer structure */
d79 1
d81 2
d87 2
d91 1
d93 2
a94 2
	void (*cmmu_flush_remote_tlb_func)(unsigned, unsigned, vaddr_t, vsize_t);
	void (*cmmu_flush_tlb_func)(unsigned, vaddr_t, vsize_t);
d97 9
a105 9
	void (*cmmu_flush_remote_cache_func)(int, paddr_t, psize_t);
	void (*cmmu_flush_cache_func)(paddr_t, psize_t);
	void (*cmmu_flush_remote_inst_cache_func)(int, paddr_t, psize_t);
	void (*cmmu_flush_inst_cache_func)(paddr_t, psize_t);
	void (*cmmu_flush_remote_data_cache_func)(int, paddr_t, psize_t);
	void (*cmmu_flush_data_cache_func)(paddr_t, psize_t);
	void (*dma_cachectl_func)(vaddr_t, vsize_t, int);
	/* DDB only */
	void (*cmmu_dump_config_func)(void);
d107 3
a109 2
	/* DEBUG only */
	void (*show_apr_func)(unsigned);
d115 3
d119 2
a120 1
#define cmmu_init		(cmmu->cmmu_init_func)
d122 2
d128 2
d132 1
d136 1
a136 1
#define	cmmu_pmap_activate(a, b, c, d) 	(cmmu->cmmu_pmap_activate_func)(a, b, c, d)
d144 2
a145 1
#define	cmmu_dump_config	(cmmu->cmmu_dump_config_func)
d147 3
a149 1
#define show_apr(ap)		(cmmu->show_apr_func)(ap)
d152 8
@


1.1.1.5
log
@Import OpenBSD as of today again (seems pretty stable, I hope)

Prominent changes: more bgpd, tcpmd5; tcpdump/isakmpd fixes
@
text
@d1 1
a1 1
/*	$OpenBSD: cmmu.h,v 1.18 2004/01/20 14:35:52 miod Exp $ */
d38 1
d40 1
d62 1
a62 1
	void (*cmmu_set_sapr_func)(unsigned, unsigned);
d65 2
a66 1
	void (*cmmu_flush_tlb_func)(unsigned, unsigned, vaddr_t, vsize_t);
d69 6
a74 3
	void (*cmmu_flush_cache_func)(int, paddr_t, psize_t);
	void (*cmmu_flush_inst_cache_func)(int, paddr_t, psize_t);
	void (*cmmu_flush_data_cache_func)(int, paddr_t, psize_t);
d93 1
a93 1
#define	cmmu_set_sapr(a, b)	(cmmu->cmmu_set_sapr_func)(a, b)
d96 2
a97 1
#define	cmmu_flush_tlb(a, b, c, d) 	(cmmu->cmmu_flush_tlb_func)(a, b, c, d)
d99 6
a104 3
#define	cmmu_flush_cache(a, b, c)	(cmmu->cmmu_flush_cache_func)(a, b, c)
#define	cmmu_flush_inst_cache(a, b, c)	(cmmu->cmmu_flush_inst_cache_func)(a, b, c)
#define	cmmu_flush_data_cache(a, b, c)	(cmmu->cmmu_flush_data_cache_func)(a, b, c)
@


1.1.1.6
log
@large-scale import of OpenBSD 3.5-current source base including many fixes
note: from now, we will not be binary compatible with OpenBSD apps any
longer (due to syscall numbering differences); both an OpenBSD compat and
a conversion tool for old MirOS #7 apps will be delivered later.

The src/ tree is locked from now.
@
text
@d1 103
a103 3
/* $OpenBSD: cmmu.h,v 1.20 2004/04/26 14:31:11 miod Exp $ */
/* public domain */
#include <m88k/cmmu.h>
@


