head	1.2;
access;
symbols
	cvs-200405160640:1.1.1.5
	cvs-200401271800:1.1.1.4
	cvs-200401261630:1.1.1.4
	cvs-200401021645:1.1.1.3
	cvs-200312222040:1.1.1.3
	cvs-200310020700:1.1.1.2
	cvs-200309271030:1.1.1.2
	cvs-200309261655:1.1.1.2
	cvs-200309251530:1.1.1.2
	cvs-200308302005:1.1.1.1
	cvs-200308171200:1.1.1.1
	ctm-3496:1.1.1.1
	ctm-3449:1.1.1.1
	ctm-3437:1.1.1.1
	cvs-200307191805:1.1.1.1
	ctm-3425:1.1.1.1
	cvs-200307091500:1.1.1.1
	cvs-200307072125:1.1.1.1
	ctm-3389:1.1.1.1
	cvs-200307021520:1.1.1.1
	cvs-200306291430:1.1.1.1
	ctm-3341:1.1.1.1
	cvs-200306082100:1.1.1.1
	ctm-3316:1.1.1.1
	ctm-3272:1.1.1.1
	ctm-3264:1.1.1.1
	cvs-200305071630:1.1.1.1
	ctm-3255:1.1.1.1
	ctm-3229:1.1.1.1
	ctm-3203:1.1.1.1
	cvs-20030410-1130:1.1.1.1
	ctm-3155:1.1.1.1
	ctm-3132:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.2
date	2003.04.06.04.29.29;	author tg;	state dead;
branches;
next	1.1;

1.1
date	2003.03.22.17.50.01;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.03.22.17.50.01;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2003.09.25.16.35.54;	author tg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2003.12.22.20.59.56;	author tg;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2004.01.26.18.42.26;	author tg;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2004.05.16.08.38.06;	author tg;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Remove "some dead architectures".

These are all but i386 and x86-64 (which is not in the tree yet),
because I have no machines to work with.

Re-adding support should be fairly easy, just cvs adding a partial
OpenBSD checkout and pulling in stuff like kernel signal patch, humantime,
etc. which got added to i386 as well.

You will need gcc support as well.
@
text
@/*	$OpenBSD: locore.h,v 1.17 2003/01/13 20:12:16 miod Exp $	*/

#ifndef _MACHINE_LOCORE_H_
#define _MACHINE_LOCORE_H_

#include <uvm/uvm_param.h>

/*
 * C prototypes for various routines defined in locore_* and friends
 */

/* locore_asm_routines.S */

unsigned int do_load_word(vm_offset_t address,
    boolean_t supervisor_mode);
unsigned int do_load_half(vm_offset_t address,
    boolean_t supervisor_mode);
unsigned int do_load_byte(vm_offset_t address,
    boolean_t supervisor_mode);

void do_store_word(vm_offset_t address, unsigned int data,
    boolean_t supervisor_mode);
void do_store_half(vm_offset_t address, unsigned int data,
    boolean_t supervisor_mode);
void do_store_byte(vm_offset_t address, unsigned int data,
    boolean_t supervisor_mode);

unsigned do_xmem_word(vm_offset_t address, unsigned int data,
    boolean_t supervisor_mode);
unsigned do_xmem_byte(vm_offset_t address, unsigned int data,
    boolean_t supervisor_mode);

unsigned read_processor_identification_register(void);
int badaddr(vm_offset_t addr, int size);
#define badwordaddr(x) badaddr(x, 4)
void set_cpu_number(unsigned number);
void doboot(void);
int db_are_interrupts_disabled(void);

void fubail(void);
void subail(void);

int guarded_access(unsigned char *volatile address,
    unsigned len, u_char *vec);

/* locore_c_routines.c */

#ifdef M88100
void dae_print(unsigned *eframe);
void data_access_emulation(unsigned *eframe);
#endif 

unsigned getipl(void);

/* machdep.c */

void _doboot(void);
vm_offset_t get_slave_stack(void);
void slave_pre_main(void);
int slave_main(void);
int intr_findvec(int start, int end);
void bugsyscall(void);
void myetheraddr(u_char *cp);
void dosoftint(void);
void MY_info(struct trapframe *f, caddr_t p, int flags, char *s);
void MY_info_done(struct trapframe *f, int flags);
void mvme_bootstrap(void);
#ifdef MVME187
void m187_ext_int(u_int v, struct m88100_saved_state *eframe);
#endif
#ifdef MVME188
void m188_reset(void);
void m188_ext_int(u_int v, struct m88100_saved_state *eframe);
unsigned int safe_level(unsigned mask, unsigned curlevel);
#endif
#ifdef MVME197
void m197_ext_int(u_int v, struct m88100_saved_state *eframe);
#endif

/* eh.S */

struct proc;
void proc_do_uret(struct proc *);
#ifdef M88100
void sigsys(void);
void sigtrap(void);
void stepbpt(void);
void userbpt(void);
void syscall_handler(void);
#endif 
#ifdef M88110
void m88110_sigsys(void);
void m88110_sigtrap(void);
void m88110_stepbpt(void);
void m88110_userbpt(void);
void m88110_syscall_handler(void);
#endif 

/* process.S */
void savectx(struct pcb *);
void switch_exit(struct proc *);

#endif /* _MACHINE_LOCORE_H_ */
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Import OpenBSD 3.3 source repository from CTM 3132 the first time
This opens an OpenBSD-mirabile (aka MirBSD) repository.

### MirBSD is:
# Copyright (c) 1982-2003 by Thorsten "mirabile" Glaser <x86@@ePost.de>
# Copyright © 1968-2003  The authors of And contributors to UNIX®, the
#       C Language, BSD/Berkeley Unix; 386BSD, NetBSD 1.1 and OpenBSD.
#
# Anyone who obtained a copy of this work is hereby permitted to freely use,
# distribute, modify, merge, sublicence, give away or sell it as long as the
# authors are given due credit and the following notice is retained:
#
# This work is provided "as is", with no explicit or implicit warranty what-
# soever. Use it only at your own risk. In no event may an author or contri-
# butor be held liable for any damage, directly or indirectly, that origina-
# ted through or is caused by creation or modification of this work.

MirBSD is my private tree. MirBSD does not differ very much from OpenBSD
and intentionally tracks OpenBSD. That's why it _is_ OpenBSD, just not the
official one. It's like with DarrenBSD.

At time of this writing, no advertising for MirBSD must be done,
because the advertising clause has not yet been sorted out.

http://templeofhate.com/tglaser/MirBSD/index.php
@
text
@@


1.1.1.2
log
@Release Time. Synchronize with OpenBSD 3.4-current (base system).
@
text
@d1 1
a1 1
/*	$OpenBSD: locore.h,v 1.18 2003/09/16 20:52:19 miod Exp $	*/
d40 3
d48 1
d51 1
d68 1
d70 2
d75 2
d78 1
d84 1
d90 2
d97 1
@


1.1.1.3
log
@Time to import OpenBSD once again. Expect breakage.
@
text
@d1 1
a1 1
/*	$OpenBSD: locore.h,v 1.19 2003/10/05 20:27:46 miod Exp $	*/
d14 1
a14 1
unsigned int do_load_word(vaddr_t address,
d16 1
a16 1
unsigned int do_load_half(vaddr_t address,
d18 1
a18 1
unsigned int do_load_byte(vaddr_t address,
d21 1
a21 1
void do_store_word(vaddr_t address, unsigned int data,
d23 1
a23 1
void do_store_half(vaddr_t address, unsigned int data,
d25 1
a25 1
void do_store_byte(vaddr_t address, unsigned int data,
d28 1
a28 1
unsigned do_xmem_word(vaddr_t address, unsigned int data,
d30 1
a30 1
unsigned do_xmem_byte(vaddr_t address, unsigned int data,
d34 1
a34 1
int badaddr(vaddr_t addr, int size);
d53 1
a53 1
vaddr_t get_slave_stack(void);
@


1.1.1.4
log
@Import OpenBSD as of today again (seems pretty stable, I hope)

Prominent changes: more bgpd, tcpmd5; tcpdump/isakmpd fixes
@
text
@d1 1
a1 1
/*	$OpenBSD: locore.h,v 1.21 2004/01/23 17:26:05 miod Exp $	*/
d38 1
d63 1
a63 1
void m187_ext_int(u_int v, struct trapframe *eframe);
d65 1
a65 1
void m188_ext_int(u_int v, struct trapframe *eframe);
d67 1
a67 1
void m197_ext_int(u_int v, struct trapframe *eframe);
@


1.1.1.5
log
@large-scale import of OpenBSD 3.5-current source base including many fixes
note: from now, we will not be binary compatible with OpenBSD apps any
longer (due to syscall numbering differences); both an OpenBSD compat and
a conversion tool for old MirOS #7 apps will be delivered later.

The src/ tree is locked from now.
@
text
@d1 1
a1 1
/*	$OpenBSD: locore.h,v 1.22 2004/04/16 23:35:52 miod Exp $	*/
d55 1
a55 1
int intr_findvec(int, int, int);
@


