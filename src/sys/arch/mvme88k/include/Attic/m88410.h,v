head	1.2;
access;
symbols
	cvs-200405160640:1.1.1.5
	cvs-200401271800:1.1.1.4
	cvs-200401261630:1.1.1.4
	cvs-200401021645:1.1.1.4
	cvs-200312222040:1.1.1.4
	cvs-200310020700:1.1.1.3
	cvs-200309271030:1.1.1.3
	cvs-200309261655:1.1.1.3
	cvs-200309251530:1.1.1.3
	cvs-200308302005:1.1.1.3
	cvs-200308171200:1.1.1.2
	ctm-3496:1.1.1.1
	ctm-3449:1.1.1.1
	ctm-3437:1.1.1.1
	cvs-200307191805:1.1.1.1
	ctm-3425:1.1.1.1
	cvs-200307091500:1.1.1.1
	cvs-200307072125:1.1.1.1
	ctm-3389:1.1.1.1
	cvs-200307021520:1.1.1.1
	cvs-200306291430:1.1.1.1
	ctm-3341:1.1.1.1
	cvs-200306082100:1.1.1.1
	ctm-3316:1.1.1.1
	ctm-3272:1.1.1.1
	ctm-3264:1.1.1.1
	cvs-200305071630:1.1.1.1
	ctm-3255:1.1.1.1
	ctm-3229:1.1.1.1
	ctm-3203:1.1.1.1
	cvs-20030410-1130:1.1.1.1
	ctm-3155:1.1.1.1
	ctm-3132:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.2
date	2003.04.06.04.29.30;	author tg;	state dead;
branches;
next	1.1;

1.1
date	2003.03.22.17.50.01;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.03.22.17.50.01;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2003.08.17.14.31.20;	author tg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2003.08.30.23.13.23;	author tg;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2003.12.22.20.59.57;	author tg;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2004.05.16.08.38.09;	author tg;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Remove "some dead architectures".

These are all but i386 and x86-64 (which is not in the tree yet),
because I have no machines to work with.

Re-adding support should be fairly easy, just cvs adding a partial
OpenBSD checkout and pulling in stuff like kernel signal patch, humantime,
etc. which got added to i386 as well.

You will need gcc support as well.
@
text
@/*	$OpenBSD: m88410.h,v 1.4 2001/12/22 08:31:05 smurph Exp $ */
/*
 * Copyright (c) 2001 Steve Murphree, Jr.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed by Steve Murphree.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */

#ifndef	__MACHINE_M88410_H__
#define	__MACHINE_M88410_H__

/*
 *	mc88410 External Cache Controller definitions
 *	This is only available on MVME197DP/SP models.
 */

#ifndef	_LOCORE

#include <machine/asm_macro.h>
#include <machine/psl.h>
#ifdef _KERNEL
#include <mvme88k/dev/busswreg.h>
#endif 

#define XCC_NOP		"0x0"
#define XCC_FLUSH_PAGE	"0x1"
#define XCC_FLUSH_ALL	"0x2"
#define XCC_INVAL_ALL	"0x3"
#define XCC_ADDR	0xFF800000

static __inline__ void mc88410_flush_page(vm_offset_t physaddr)
{
	vm_offset_t xccaddr = XCC_ADDR | (physaddr >> PGSHIFT);
        m88k_psr_type psr;
	struct bussw_reg *bs = (struct bussw_reg *)BS_BASE;
        u_short	bs_gcsr = bs->bs_gcsr;
	u_short	bs_romcr = bs->bs_romcr;
	
	psr = get_psr();
	/* mask misaligned exceptions */
	set_psr(psr | PSR_MXM);
	/* clear WEN0 and WEN1 in ROMCR (disables writes to FLASH) */
	bs->bs_romcr &= ~(BS_ROMCR_WEN0 | BS_ROMCR_WEN0) ;
	/* set XCC bit in GCSR (0xFF8xxxxx now decodes to mc88410) */
	bs->bs_gcsr |= BS_GCSR_XCC;

	/* load the value of upper32 into r2 */
	__asm__ __volatile__("or   r2,r0," XCC_FLUSH_PAGE);
	/* load the value of lower32 into r3 (always 0) */
	__asm__ __volatile__("or   r3,r0,r0");
	/* load the value of xccaddr into r4 */
	__asm__ __volatile__("or.u r5,r0,hi16(%0)" : : "r" (xccaddr));
	__asm__ __volatile__("ld   r4,r5,lo16(%0)" : : "r" (xccaddr));
	/* make the double write. bang! */
	__asm__ __volatile__("st.d r2,r4,0");
        
	/* spin until the operation starts */
	while (!bs->bs_xccr & BS_XCC_FBSY)
		;
	
	/* restore PSR and friends */
        set_psr(psr);
	flush_pipeline();
        bs->bs_gcsr = bs_gcsr;
	bs->bs_romcr = bs_romcr;
}

static __inline__ void mc88410_flush(void)
{
        m88k_psr_type psr;
	struct bussw_reg *bs = (struct bussw_reg *)BS_BASE;
        u_short	bs_gcsr = bs->bs_gcsr;
	u_short	bs_romcr = bs->bs_romcr;
	
	psr = get_psr();
	/* mask misaligned exceptions */
	set_psr(psr | PSR_MXM);
	/* clear WEN0 and WEN1 in ROMCR (disables writes to FLASH) */
	bs->bs_romcr &= ~(BS_ROMCR_WEN0 | BS_ROMCR_WEN0) ;
	/* set XCC bit in GCSR (0xFF8xxxxx now decodes to mc88410) */
	bs->bs_gcsr |= BS_GCSR_XCC;

	/* load the value of upper32 into r2 */
	__asm__ __volatile__("or   r2,r0," XCC_FLUSH_ALL);
	/* load the value of lower32 into r3 (always 0) */
	__asm__ __volatile__("or   r3,r0,r0");
	/* load the value of xccaddr into r4 */
	__asm__ __volatile__("or.u r5,r0,hi16(0xFF800000)");
	__asm__ __volatile__("or   r4,r5,r0");	/* r4 is now 0xFF800000 */
	/* make the double write. bang! */
	__asm__ __volatile__("st.d r2,r4,0");		
        
	/* spin until the operation starts */
	while (!bs->bs_xccr & BS_XCC_FBSY)
		;
	
	/* restore PSR and friends */
        set_psr(psr);
	flush_pipeline();
        bs->bs_gcsr = bs_gcsr;
	bs->bs_romcr = bs_romcr;
}

static __inline__ void mc88410_inval(void)
{
        m88k_psr_type psr;
	struct bussw_reg *bs = (struct bussw_reg *)BS_BASE;
        u_short	bs_gcsr = bs->bs_gcsr;
	u_short	bs_romcr = bs->bs_romcr;
	
	psr = get_psr();
	/* mask misaligned exceptions */
	set_psr(psr | PSR_MXM);
	/* clear WEN0 and WEN1 in ROMCR (disables writes to FLASH) */
	bs->bs_romcr &= ~(BS_ROMCR_WEN0 | BS_ROMCR_WEN0) ;
	/* set XCC bit in GCSR (0xFF8xxxxx now decodes to mc88410) */
	bs->bs_gcsr |= BS_GCSR_XCC;

	/* load the value of upper32 into r2 */
	__asm__ __volatile__("or   r2,r0," XCC_INVAL_ALL);
	/* load the value of lower32 into r3 (always 0) */
	__asm__ __volatile__("or   r3,r0,r0");
	/* load the value of xccaddr into r4 */
	__asm__ __volatile__("or.u r5,r0,hi16(0xFF800000)");
	__asm__ __volatile__("or   r4,r5,r0");	/* r4 is now 0xFF800000 */
	/* make the double write. bang! */
	__asm__ __volatile__("st.d r2,r4,0");		
        
	/* spin until the operation starts */
	while (!bs->bs_xccr & BS_XCC_FBSY)
		;
	
	/* restore PSR and friends */
        set_psr(psr);
	flush_pipeline();
        bs->bs_gcsr = bs_gcsr;
	bs->bs_romcr = bs_romcr;
}

static __inline__ void mc88410_sync(void)
{
	mc88410_flush();
	mc88410_inval();	
}

#endif	/* _LOCORE */

#endif __MACHINE_M88410_H__
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Import OpenBSD 3.3 source repository from CTM 3132 the first time
This opens an OpenBSD-mirabile (aka MirBSD) repository.

### MirBSD is:
# Copyright (c) 1982-2003 by Thorsten "mirabile" Glaser <x86@@ePost.de>
# Copyright © 1968-2003  The authors of And contributors to UNIX®, the
#       C Language, BSD/Berkeley Unix; 386BSD, NetBSD 1.1 and OpenBSD.
#
# Anyone who obtained a copy of this work is hereby permitted to freely use,
# distribute, modify, merge, sublicence, give away or sell it as long as the
# authors are given due credit and the following notice is retained:
#
# This work is provided "as is", with no explicit or implicit warranty what-
# soever. Use it only at your own risk. In no event may an author or contri-
# butor be held liable for any damage, directly or indirectly, that origina-
# ted through or is caused by creation or modification of this work.

MirBSD is my private tree. MirBSD does not differ very much from OpenBSD
and intentionally tracks OpenBSD. That's why it _is_ OpenBSD, just not the
official one. It's like with DarrenBSD.

At time of this writing, no advertising for MirBSD must be done,
because the advertising clause has not yet been sorted out.

http://templeofhate.com/tglaser/MirBSD/index.php
@
text
@@


1.1.1.2
log
@Import OpenBSD source tree from CVS (anoncvs canada)
of roughly 12:00 UTC today. Bumps us to OpenBSD 3.4
and makes source/ports in sync. Hopefully.
@
text
@d1 1
a1 1
/*	$OpenBSD: m88410.h,v 1.5 2003/08/17 01:47:10 miod Exp $ */
d82 1
a82 1
	while ((bs->bs_xccr & BS_XCC_FBSY) == 0)
d118 1
a118 1
	while ((bs->bs_xccr & BS_XCC_FBSY) == 0)
d154 1
a154 1
	while ((bs->bs_xccr & BS_XCC_FBSY) == 0)
@


1.1.1.3
log
@Synchronize with OpenBSD 3.4-beta
@
text
@d1 1
a1 1
/*	$OpenBSD: m88410.h,v 1.6 2003/08/20 20:33:44 miod Exp $ */
d55 1
a55 2
static __inline__ void
mc88410_flush_page(vm_offset_t physaddr)
d92 1
a92 2
static __inline__ void
mc88410_flush(void)
d128 1
a128 2
static __inline__ void
mc88410_inval(void)
d164 1
a164 2
static __inline__ void
mc88410_sync(void)
a167 8
}

static __inline__ int
mc88410_present(void)
{
	struct bussw_reg *bs = (struct bussw_reg *)BS_BASE;

	return (bs->bs_gcsr & BS_GCSR_B410);
@


1.1.1.4
log
@Time to import OpenBSD once again. Expect breakage.
@
text
@d1 1
a1 1
/*	$OpenBSD: m88410.h,v 1.7 2003/10/05 20:27:46 miod Exp $ */
d47 1
a47 1
#endif
d56 1
a56 1
mc88410_flush_page(paddr_t physaddr)
d58 1
a58 1
	paddr_t xccaddr = XCC_ADDR | (physaddr >> PGSHIFT);
d63 1
a63 1

d81 1
a81 1

d85 1
a85 1

d100 1
a100 1

d117 2
a118 2
	__asm__ __volatile__("st.d r2,r4,0");

d122 1
a122 1

d137 1
a137 1

d154 2
a155 2
	__asm__ __volatile__("st.d r2,r4,0");

d159 1
a159 1

d171 1
a171 1
	mc88410_inval();
@


1.1.1.5
log
@large-scale import of OpenBSD 3.5-current source base including many fixes
note: from now, we will not be binary compatible with OpenBSD apps any
longer (due to syscall numbering differences); both an OpenBSD compat and
a conversion tool for old MirOS #7 apps will be delivered later.

The src/ tree is locked from now.
@
text
@d1 1
a1 1
/*	$OpenBSD: m88410.h,v 1.10 2004/04/24 19:51:48 miod Exp $ */
d33 2
a34 4
#ifndef	__M88410_H__
#define	__M88410_H__

#ifdef _KERNEL
d37 1
a37 1
 *	MC88410 External Cache Controller definitions
d41 2
d45 1
d47 1
d49 5
a53 5
#define XCC_NOP		"0x00"
#define XCC_FLUSH_PAGE	"0x01"
#define XCC_FLUSH_ALL	"0x02"
#define XCC_INVAL_ALL	"0x03"
#define XCC_ADDR	0xff800000
d60 3
a62 1
	u_int16_t bs_gcsr, bs_romcr;
a63 2
	bs_gcsr = *(volatile u_int16_t *)(BS_BASE + BS_GCSR);
	bs_romcr = *(volatile u_int16_t *)(BS_BASE + BS_ROMCR);
d68 3
a70 4
	*(volatile u_int16_t *)(BS_BASE + BS_ROMCR) =
	    bs_romcr & ~(BS_ROMCR_WEN0 | BS_ROMCR_WEN1);
	/* set XCC bit in GCSR (0xff8xxxxx now decodes to mc88410) */
	*(volatile u_int16_t *)(BS_BASE + BS_GCSR) = bs_gcsr | BS_GCSR_XCC;
d83 1
a83 1
	while ((*(volatile u_int32_t *)(BS_BASE + BS_XCCR) & BS_XCC_FBSY) == 0)
d89 2
a90 2
	*(volatile u_int16_t *)(BS_BASE + BS_GCSR) = bs_gcsr;
	*(volatile u_int16_t *)(BS_BASE + BS_ROMCR) = bs_romcr;
d97 3
a99 1
	u_int16_t bs_gcsr, bs_romcr;
a100 2
	bs_gcsr = *(volatile u_int16_t *)(BS_BASE + BS_GCSR);
	bs_romcr = *(volatile u_int16_t *)(BS_BASE + BS_ROMCR);
d105 1
a105 2
	*(volatile u_int16_t *)(BS_BASE + BS_ROMCR) =
	    bs_romcr & ~(BS_ROMCR_WEN0 | BS_ROMCR_WEN1);
d107 1
a107 1
	*(volatile u_int16_t *)(BS_BASE + BS_GCSR) = bs_gcsr | BS_GCSR_XCC;
d114 2
a115 2
	__asm__ __volatile__("or.u r5,r0,hi16(0xff800000)");
	__asm__ __volatile__("or   r4,r5,r0");
d120 1
a120 1
	while ((*(volatile u_int32_t *)(BS_BASE + BS_XCCR) & BS_XCC_FBSY) == 0)
d126 2
a127 2
	*(volatile u_int16_t *)(BS_BASE + BS_GCSR) = bs_gcsr;
	*(volatile u_int16_t *)(BS_BASE + BS_ROMCR) = bs_romcr;
d134 3
a136 4
	u_int16_t bs_gcsr, bs_romcr;

	bs_gcsr = *(volatile u_int16_t *)(BS_BASE + BS_GCSR);
	bs_romcr = *(volatile u_int16_t *)(BS_BASE + BS_ROMCR);
d142 1
a142 2
	*(volatile u_int16_t *)(BS_BASE + BS_ROMCR) =
	    bs_romcr & ~(BS_ROMCR_WEN0 | BS_ROMCR_WEN1);
d144 1
a144 1
	*(volatile u_int16_t *)(BS_BASE + BS_GCSR) = bs_gcsr | BS_GCSR_XCC;
d151 2
a152 2
	__asm__ __volatile__("or.u r5,r0,hi16(0xff800000)");
	__asm__ __volatile__("or   r4,r5,r0");
d157 1
a157 1
	while ((*(volatile u_int32_t *)(BS_BASE + BS_XCCR) & BS_XCC_FBSY) == 0)
d163 2
a164 2
	*(volatile u_int16_t *)(BS_BASE + BS_GCSR) = bs_gcsr;
	*(volatile u_int16_t *)(BS_BASE + BS_ROMCR) = bs_romcr;
d177 3
a179 1
	return (*(volatile u_int16_t *)(BS_BASE + BS_GCSR)) & BS_GCSR_B410;
d182 1
a182 1
#endif	/* _KERNEL */
d184 1
a184 1
#endif	/* __M88410_H__ */
@


