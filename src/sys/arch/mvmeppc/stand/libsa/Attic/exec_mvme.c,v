head	1.2;
access;
symbols
	cvs-200405160640:1.1.1.5
	cvs-200401271800:1.1.1.4
	cvs-200401261630:1.1.1.4
	cvs-200401021645:1.1.1.3
	cvs-200312222040:1.1.1.2
	cvs-200310020700:1.1.1.2
	cvs-200309271030:1.1.1.2
	cvs-200309261655:1.1.1.2
	cvs-200309251530:1.1.1.2
	cvs-200308302005:1.1.1.2
	cvs-200308171200:1.1.1.2
	ctm-3496:1.1.1.2
	ctm-3449:1.1.1.2
	ctm-3437:1.1.1.2
	cvs-200307191805:1.1.1.2
	ctm-3425:1.1.1.2
	cvs-200307091500:1.1.1.2
	cvs-200307072125:1.1.1.2
	ctm-3389:1.1.1.2
	cvs-200307021520:1.1.1.2
	cvs-200306291430:1.1.1.2
	ctm-3341:1.1.1.2
	cvs-200306082100:1.1.1.2
	ctm-3316:1.1.1.2
	ctm-3272:1.1.1.1
	ctm-3264:1.1.1.1
	cvs-200305071630:1.1.1.1
	ctm-3255:1.1.1.1
	ctm-3229:1.1.1.1
	ctm-3203:1.1.1.1
	cvs-20030410-1130:1.1.1.1
	ctm-3155:1.1.1.1
	ctm-3132:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.2
date	2003.04.06.04.29.46;	author tg;	state dead;
branches;
next	1.1;

1.1
date	2003.03.22.17.50.10;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.03.22.17.50.10;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2003.06.05.17.35.57;	author tg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2004.01.02.17.49.53;	author tg;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2004.01.26.18.43.07;	author tg;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2004.05.16.08.47.46;	author tg;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Remove "some dead architectures".

These are all but i386 and x86-64 (which is not in the tree yet),
because I have no machines to work with.

Re-adding support should be fairly easy, just cvs adding a partial
OpenBSD checkout and pulling in stuff like kernel signal patch, humantime,
etc. which got added to i386 as well.

You will need gcc support as well.
@
text
@/*	$OpenBSD: exec_mvme.c,v 1.2 2001/07/04 08:31:38 niklas Exp $	*/


/*-
 * Copyright (c) 1982, 1986, 1990, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * 	@@(#)boot.c	8.1 (Berkeley) 6/10/93
 */

#include <sys/param.h>
#include <sys/reboot.h>
#include <machine/prom.h>
#include <a.out.h>
#include <sys/exec_elf.h>

#include "stand.h"
#include "libsa.h"

#define RB_NOSYM 0x400
#define RB_MULTI 0x4000
#define RB_EXTRA 0x8000
#define RB_ASKKERN 0x0010  /* ask kernel name  */

vaddr_t ssym, esym;

int
load_elf(fd, elf, entryp, esymp)
	int fd;
	Elf32_Ehdr *elf;
	u_int32_t *entryp;
	void **esymp;
	
{
	Elf32_Shdr *shpp;
	Elf32_Off off;
	Elf32_Ehdr *elfp;
	void *addr;
	size_t size;
	int n, havesyms, i, first = 1;
	size_t sz;
	
	void *maxp = 0; /*  correct type? */
	
	/*
	 * Don't display load address for ELF; it's encoded in
	 * each section.
	 */

	for (i = 0; i < elf->e_phnum; i++) {
		Elf32_Phdr phdr;
		(void)lseek(fd, elf->e_phoff + sizeof(phdr) * i, SEEK_SET);
		if (read(fd, (void *)&phdr, sizeof(phdr)) != sizeof(phdr)) {
			printf("read phdr: %s\n", strerror(errno));
			return (1);
		}
		if (phdr.p_type != PT_LOAD ||
		    (phdr.p_flags & (PF_W|PF_X)) == 0)
			continue;

		/* Read in segment. */
		printf("%s%lu@@0x%lx", first ? "" : "+", phdr.p_filesz,
		    (u_long)phdr.p_vaddr);
		(void)lseek(fd, phdr.p_offset, SEEK_SET);
		maxp = maxp > (void *)(phdr.p_vaddr+ phdr.p_memsz) ?
			maxp : (void *)(phdr.p_vaddr+ phdr.p_memsz);
		if (read(fd, (void *)phdr.p_vaddr, phdr.p_filesz) !=
		    phdr.p_filesz) {
			printf("read segment: %s\n", strerror(errno));
			return (1);
		}
		syncicache((void *)phdr.p_vaddr, phdr.p_filesz);

		/* Zero BSS. */
		if (phdr.p_filesz < phdr.p_memsz) {
			printf("+%lu@@0x%lx", phdr.p_memsz - phdr.p_filesz,
			    (u_long)(phdr.p_vaddr + phdr.p_filesz));
			bzero((void *)(phdr.p_vaddr + phdr.p_filesz),
			    phdr.p_memsz - phdr.p_filesz);
		}
		first = 0;
	}

#if 1
	/*
	 * Copy the ELF and section headers.
	 */
	maxp = (void *)roundup((long)maxp, sizeof(long));
	(void *)ssym = elfp = maxp; /* mark the start of the symbol table */
	
	maxp += sizeof(Elf_Ehdr);

	if (lseek(fd, elf->e_shoff, SEEK_SET) == -1)  {
		printf("lseek section headers: %s\n", strerror(errno));
		return 1;
	}
	sz = elf->e_shnum * sizeof(Elf_Shdr);
		
	shpp = maxp;
	maxp += roundup(sz, sizeof(long)); 

	if (read(fd, shpp, sz) != sz) {
		printf("read section headers: %s\n", strerror(errno));
		return 1;
	}
	/*
	 * Now load the symbol sections themselves.  Make sure the
	 * sections are aligned. Don't bother with string tables if
	 * there are no symbol sections.
	 */
	off = roundup((sizeof(Elf_Ehdr) + sz), sizeof(long));
	
	for (havesyms = i = 0; i < elf->e_shnum; i++)
		if (shpp[i].sh_type == SHT_SYMTAB)
			havesyms = 1;
	if (!havesyms)
		goto no_syms;

	for (first = 1, i = 0; i < elf->e_shnum; i++) {
		if (shpp[i].sh_type == SHT_SYMTAB ||
		    shpp[i].sh_type == SHT_STRTAB) {
			printf("%s%ld", first ? " [" : "+",
			    (u_long)shpp[i].sh_size);
			if (lseek(fd, shpp[i].sh_offset, SEEK_SET) == -1) {
				printf("lseek symbols: %s\n", strerror(errno));
				return 1;
			}
			if (read(fd, maxp, shpp[i].sh_size) != shpp[i].sh_size) {
				printf("read symbols: %s\n", strerror(errno));
				return 1;
			}
			maxp += roundup(shpp[i].sh_size, sizeof(long));
			shpp[i].sh_offset = off;
			off += roundup(shpp[i].sh_size, sizeof(long));
			first = 0;
		}
	}
	if (first == 0)
		printf("]");

	/*
	 * Frob the copied ELF header to give information relative
	 * to elfp.
	 */
	elf->e_phoff = 0;
	elf->e_shoff = sizeof(Elf_Ehdr);
	elf->e_phentsize = 0;
	elf->e_phnum = 0;
	bcopy(elf, elfp, sizeof(*elf));

#endif
no_syms:
	*esymp = (void *)esym = maxp; /* mark end of symbol table */
	*entryp = elf->e_entry;
	printf(" \n");
	return (0);
}

/*ARGSUSED*/
void
exec_mvme(file, flag)
char    *file;
int     flag;
{
	char *loadaddr;
	register int io;
	Elf32_Ehdr hdr;
	struct exec x;
	int cc, magic;
	void (*entry)();
	void *esym;
	register char *cp;
	register int *ip;
	int n;
	int bootdev;
	int rval = 1; 
	char dummy[]="\0";

	if (flag & RB_EXTRA) {
		printf("exec_mvme: file=%s flag=0x%x cputyp=%x\n", file, flag, bugargs.cputyp);
	}

	io = open(file, 0);
	if (io < 0)
		return;

	printf("Booting %s\n", file);
	/*
	 * Read in the exec header, and validate it.
	 */
	if (read(io, &hdr, sizeof(hdr)) != sizeof(hdr)) {
		printf("read header: %s\n", strerror(errno));
		goto shread;
	}
	
	if (IS_ELF(hdr)) {
		rval = load_elf(io, &hdr, &entry, &esym);
	} else {
		printf("unknown executable format\n");
		errno = EFTYPE;
		goto closeout;
	}
	if (rval)
		goto closeout;

	close(io);

	printf("Start @@ 0x%x ...\n", (int)entry);
	printf("Controler Address @@ %x ...\n", bugargs.ctrl_addr);
	if (flag & RB_HALT) mvmeprom_return();

	bootdev = (bugargs.ctrl_lun << 8) | (bugargs.dev_lun & 0xFF);

/* arguments to start 
 * r1 - stack provided by firmware/bootloader
 * r3 - unused
 * r4 - unused
 * r5 - firmware pointer (NULL for PPC1bug)
 * r6 - arg list
 * r7 - arg list length
 * r8 - end of symbol table
 */
/*               r3                 r4       r5    r6      r7 r8 */
 	(*entry)(bugargs.ctrl_addr, bootdev, NULL, &dummy, 0, esym);
	printf("exec: kernel returned!\n");
	return;

shread:
	printf("exec: short read\n");
	errno = EIO;
closeout:
	close(io);
	return;
}
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Import OpenBSD 3.3 source repository from CTM 3132 the first time
This opens an OpenBSD-mirabile (aka MirBSD) repository.

### MirBSD is:
# Copyright (c) 1982-2003 by Thorsten "mirabile" Glaser <x86@@ePost.de>
# Copyright © 1968-2003  The authors of And contributors to UNIX®, the
#       C Language, BSD/Berkeley Unix; 386BSD, NetBSD 1.1 and OpenBSD.
#
# Anyone who obtained a copy of this work is hereby permitted to freely use,
# distribute, modify, merge, sublicence, give away or sell it as long as the
# authors are given due credit and the following notice is retained:
#
# This work is provided "as is", with no explicit or implicit warranty what-
# soever. Use it only at your own risk. In no event may an author or contri-
# butor be held liable for any damage, directly or indirectly, that origina-
# ted through or is caused by creation or modification of this work.

MirBSD is my private tree. MirBSD does not differ very much from OpenBSD
and intentionally tracks OpenBSD. That's why it _is_ OpenBSD, just not the
official one. It's like with DarrenBSD.

At time of this writing, no advertising for MirBSD must be done,
because the advertising clause has not yet been sorted out.

http://templeofhate.com/tglaser/MirBSD/index.php
@
text
@@


1.1.1.2
log
@Import latest OpenBSD CVS tree by CTM in order
to sync the base system and ports tree with Them.

This includes the recent licence changes as well - by
importing the changed base and re-applying the diffs
(with cvs up -j -j) they are inherited, and we're not
bound to the removed clauses any longer.
@
text
@d1 1
a1 1
/*	$OpenBSD: exec_mvme.c,v 1.3 2003/06/02 23:27:53 millert Exp $	*/
d16 5
a20 1
 * 3. Neither the name of the University nor the names of its contributors
@


1.1.1.3
log
@Import OpenBSD again, for various reasons.
@
text
@d1 1
a1 1
/*	$OpenBSD: exec_mvme.c,v 1.4 2004/01/01 01:11:12 miod Exp $	*/
d232 2
a233 2
	printf("Start @@ 0x%x\n", (int)entry);
	printf("Controler Address 0x%x\n", bugargs.ctrl_addr);
@


1.1.1.4
log
@Import OpenBSD as of today again (seems pretty stable, I hope)

Prominent changes: more bgpd, tcpmd5; tcpdump/isakmpd fixes
@
text
@d1 2
a2 1
/*	$OpenBSD: exec_mvme.c,v 1.6 2004/01/24 22:15:34 miod Exp $	*/
d37 2
d41 123
a163 1
#include <machine/prom.h>
d165 9
a173 3
#include <lib/libkern/libkern.h>
#include <lib/libsa/stand.h>
#include <lib/libsa/loadfile.h>
d175 7
a181 1
#include "libsa.h"
d186 2
a187 2
	char    *file;
	int     flag;
d189 5
a193 2
	int fd;
	u_long marks[MARK_MAX];
a194 1
	u_long *entryp;
d196 3
d200 2
d203 3
a205 3
#ifdef DEBUG
	printf("exec_mvme: file=%s flag=0x%x cputyp=%x\n", file, flag, bugargs.cputyp);
#endif
d207 2
a208 2
	fd = open(file, 0);
	if (fd < 0)
d211 11
a221 28
	printf("Booting %s...", file);
	marks[MARK_START] = 0;
	if (loadfile(file, marks, LOAD_ALL) >= 0) {
		close(fd);

		entryp = (u_long *)&entry;
		*entryp = marks[MARK_ENTRY];
		esym = (void *)marks[MARK_END];

		printf("Start @@ 0x%x\n", (unsigned int)entry);
		printf("Controler Address 0x%x\n", bugargs.ctrl_addr);
		if (flag & RB_HALT)
			mvmeprom_return();

		bootdev = (bugargs.ctrl_lun << 8) | (bugargs.dev_lun & 0xFF);
		/* arguments to start
		 * r1 - stack provided by firmware/bootloader
		 * r3 - unused
		 * r4 - unused
		 * r5 - firmware pointer (NULL for PPC1bug)
		 * r6 - arg list (currently empty)
		 * r7 - arg list length
		 * r8 - end of symbol table
		 */
		/*       r3                 r4       r5    r6    r7 r8 */
	 	(*entry)(bugargs.ctrl_addr, bootdev, NULL, NULL, 0, esym);

		printf("exec: kernel returned!\n");
d223 3
a225 1
		close(fd);
d227 31
@


1.1.1.5
log
@large-scale import of OpenBSD 3.5-current source base including many fixes
note: from now, we will not be binary compatible with OpenBSD apps any
longer (due to syscall numbering differences); both an OpenBSD compat and
a conversion tool for old MirOS #7 apps will be delivered later.

The src/ tree is locked from now.
@
text
@d1 1
a1 1
/*	$OpenBSD: exec_mvme.c,v 1.8 2004/01/29 21:30:04 miod Exp $	*/
d77 1
a77 1
		printf("Controller Address 0x%x\n", bugargs.ctrl_addr);
d82 1
a82 2
		/*
		 * Arguments to start on mvmeppc:
d84 2
a85 2
		 * r3 - boot flags
		 * r4 - boot device
d87 1
a87 1
		 * r6 - arg list
d92 1
a92 1
	 	(*entry)(flag, bootdev, NULL, NULL, 0, esym);
@


