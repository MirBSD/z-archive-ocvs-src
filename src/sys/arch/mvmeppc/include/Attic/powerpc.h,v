head	1.2;
access;
symbols
	cvs-200405160640:1.1.1.3
	cvs-200401271800:1.1.1.2
	cvs-200401261630:1.1.1.2
	cvs-200401021645:1.1.1.1
	cvs-200312222040:1.1.1.1
	cvs-200310020700:1.1.1.1
	cvs-200309271030:1.1.1.1
	cvs-200309261655:1.1.1.1
	cvs-200309251530:1.1.1.1
	cvs-200308302005:1.1.1.1
	cvs-200308171200:1.1.1.1
	ctm-3496:1.1.1.1
	ctm-3449:1.1.1.1
	ctm-3437:1.1.1.1
	cvs-200307191805:1.1.1.1
	ctm-3425:1.1.1.1
	cvs-200307091500:1.1.1.1
	cvs-200307072125:1.1.1.1
	ctm-3389:1.1.1.1
	cvs-200307021520:1.1.1.1
	cvs-200306291430:1.1.1.1
	ctm-3341:1.1.1.1
	cvs-200306082100:1.1.1.1
	ctm-3316:1.1.1.1
	ctm-3272:1.1.1.1
	ctm-3264:1.1.1.1
	cvs-200305071630:1.1.1.1
	ctm-3255:1.1.1.1
	ctm-3229:1.1.1.1
	ctm-3203:1.1.1.1
	cvs-20030410-1130:1.1.1.1
	ctm-3155:1.1.1.1
	ctm-3132:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.2
date	2003.04.06.04.29.41;	author tg;	state dead;
branches;
next	1.1;

1.1
date	2003.03.22.17.50.10;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.03.22.17.50.10;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2004.01.26.18.42.57;	author tg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2004.05.16.08.48.08;	author tg;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Remove "some dead architectures".

These are all but i386 and x86-64 (which is not in the tree yet),
because I have no machines to work with.

Re-adding support should be fairly easy, just cvs adding a partial
OpenBSD checkout and pulling in stuff like kernel signal patch, humantime,
etc. which got added to i386 as well.

You will need gcc support as well.
@
text
@/*	$OpenBSD: powerpc.h,v 1.2 2002/03/14 01:26:41 millert Exp $	*/
/*	$NetBSD: powerpc.h,v 1.1 1996/09/30 16:34:30 ws Exp $	*/

/*
 * Copyright (C) 1996 Wolfgang Solfrank.
 * Copyright (C) 1996 TooLs GmbH.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by TooLs GmbH.
 * 4. The name of TooLs GmbH may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY TOOLS GMBH ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL TOOLS GMBH BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
#ifndef	_MACHINE_POWERPC_H_
#define	_MACHINE_POWERPC_H_

struct mem_region {
	vm_offset_t start;
	vm_size_t size;
};

void mem_regions(struct mem_region **, struct mem_region **);

/*
 * These two functions get used solely in boot() in machdep.c.
 *
 * Not sure whether boot itself should be implementation dependent instead.	XXX
 */
typedef void (exit_f)(void) /*__attribute__((__noreturn__))*/ ;
typedef void (boot_f)(char *bootspec) /* __attribute__((__noreturn__))*/ ;
typedef void (vmon_f)(void);
typedef unsigned char (nvram_rd_f)(unsigned long offset);
typedef void (nvram_wr_f)(unsigned long offset, unsigned char val);
typedef unsigned long (tps_f)(void);


typedef void (mem_regions_f)(struct mem_region **memp,
	struct mem_region **availp);

typedef int (clock_read_f)(int *sec, int *min, int *hour, int *day,
									int *mon, int *yr);
typedef int (clock_write_f)(int sec, int min, int hour, int day,
									 int mon, int yr);
typedef int (time_read_f)(u_long *sec);
typedef int (time_write_f)(u_long sec);

/* firmware interface.
 * regardless of type of firmware used several items
 * are need from firmware to boot up.
 * these include:
 *	memory information
 *	vmsetup for firmware calls.
 *	default character print mechanism ???
 *	firmware exit (return)
 *	firmware boot (reset)
 *	vmon - tell firmware the bsd vm is active.
 */

struct firmware {
	mem_regions_f	*mem_regions;
	exit_f		*exit;
	boot_f		*boot;
	vmon_f		*vmon;
	nvram_rd_f	*nvram_rd;
	nvram_wr_f	*nvram_wr;
	tps_f			*tps;
   clock_read_f *clock_read;
   clock_write_f *clock_write;
   time_read_f	*time_read;
	time_write_f *time_write;
#ifdef FW_HAS_PUTC
	boot_f		*putc;
#endif
};
extern  struct firmware *fw;

#define ppc_exit() if (fw->exit != NULL) (fw->exit)()
#define ppc_boot(x) if (fw->boot != NULL) (fw->boot)(x)
#define ppc_vmon() if (fw->vmon != NULL) (fw->vmon)()
#define ppc_nvram_rd(a) ({unsigned char val;		\
		if (fw->nvram_rd !=NULL)		\
			val = (fw->nvram_rd)(a);	\
		else					\
			val = 0;			\
		val;})

#define ppc_nvram_wr(a, v) if (fw->nvram_wr !=NULL) (fw->nvram_wr)(a, v)

#define ppc_tps() ({unsigned long val;			\
		if (fw->tps != NULL)			\
			val = (fw->tps)();		\
		else					\
			val = 0;			\
		val;}) 

#define SPR_XER		"1"
#define SPR_LR		"8"
#define SPR_CTR		"9"
#define SPR_DSISR	"18"
#define SPR_DAR		"19"
#define SPR_DEC		"22"
#define SPR_SDR1	"25"
#define SPR_SRR0	"26"
#define SPR_SRR1	"27"

#define ppc_get_spr(reg) ({u_int32_t val; \
		__asm__ volatile("mfspr %0," reg : "=r"(val)); \
		val;})
#define ppc_set_spr(reg, val) ({ \
		__asm__ volatile("mtspr " reg ",%0" :: "r"(val));})

#endif	/* _MACHINE_POWERPC_H_ */
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Import OpenBSD 3.3 source repository from CTM 3132 the first time
This opens an OpenBSD-mirabile (aka MirBSD) repository.

### MirBSD is:
# Copyright (c) 1982-2003 by Thorsten "mirabile" Glaser <x86@@ePost.de>
# Copyright © 1968-2003  The authors of And contributors to UNIX®, the
#       C Language, BSD/Berkeley Unix; 386BSD, NetBSD 1.1 and OpenBSD.
#
# Anyone who obtained a copy of this work is hereby permitted to freely use,
# distribute, modify, merge, sublicence, give away or sell it as long as the
# authors are given due credit and the following notice is retained:
#
# This work is provided "as is", with no explicit or implicit warranty what-
# soever. Use it only at your own risk. In no event may an author or contri-
# butor be held liable for any damage, directly or indirectly, that origina-
# ted through or is caused by creation or modification of this work.

MirBSD is my private tree. MirBSD does not differ very much from OpenBSD
and intentionally tracks OpenBSD. That's why it _is_ OpenBSD, just not the
official one. It's like with DarrenBSD.

At time of this writing, no advertising for MirBSD must be done,
because the advertising clause has not yet been sorted out.

http://templeofhate.com/tglaser/MirBSD/index.php
@
text
@@


1.1.1.2
log
@Import OpenBSD as of today again (seems pretty stable, I hope)

Prominent changes: more bgpd, tcpmd5; tcpdump/isakmpd fixes
@
text
@d1 1
a1 1
/*	$OpenBSD: powerpc.h,v 1.3 2004/01/22 20:45:18 miod Exp $	*/
d99 1
@


1.1.1.3
log
@large-scale import of OpenBSD 3.5-current source base including many fixes
note: from now, we will not be binary compatible with OpenBSD apps any
longer (due to syscall numbering differences); both an OpenBSD compat and
a conversion tool for old MirOS #7 apps will be delivered later.

The src/ tree is locked from now.
@
text
@d1 1
a1 1
/*	$OpenBSD: powerpc.h,v 1.4 2004/01/28 23:50:18 miod Exp $	*/
d52 4
d60 7
d84 7
a90 1

d97 33
a129 15
/* Clock callbacks */

typedef unsigned long (tps_t)(void);
typedef int (clock_read_t)(int *sec, int *min, int *hour, int *day,
    int *mon, int *yr);
typedef int (clock_write_t)(int sec, int min, int hour, int day,
    int mon, int yr);
typedef int (time_read_t)(u_int32_t *sec);
typedef int (time_write_t)(u_int32_t sec);

extern tps_t *tps;
extern clock_read_t *clock_read;
extern clock_write_t *clock_write;
extern time_read_t  *time_read;
extern time_write_t *time_write;
@


