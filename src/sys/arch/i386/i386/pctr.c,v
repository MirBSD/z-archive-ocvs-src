head	1.1;
branch	1.1.1;
access;
symbols
	tg-mergetmp-mirosx-1:1.1.1.4
	tg-mergefixes-1-branch:1.1.1.4.0.14
	tg-mergefixes-1-base:1.1.1.4
	MIROS_X:1.1.1.4.0.12
	MIROS_X_BASE:1.1.1.4
	tg-mergetmp-3:1.1.1.4
	MIRBSD_XP_MIRPPC:1.1.1.4.0.10
	MIRBSD_XP_SPARC_BASE:1.1.1.4
	MIRBSD_XP_SPARC:1.1.1.4.0.8
	MIRBSD_7quater:1.1.1.4
	cvs-200405160640:1.1.1.4
	cvs-200401271800:1.1.1.4
	cvs-200401261630:1.1.1.4
	cvs-200401021645:1.1.1.4
	MIRBSD_7_ALPHA:1.1.1.4.0.6
	MIRBSD_7:1.1.1.4.0.4
	cvs-200312222040:1.1.1.4
	MIRBSD_7ter:1.1.1.4
	MIRBSD_7_DEV:1.1.1.4.0.2
	cvs-200310020700:1.1.1.4
	cvs-200309271030:1.1.1.3
	cvs-200309261655:1.1.1.3
	cvs-200309251530:1.1.1.3
	cvs-200308302005:1.1.1.3
	cvs-200308221505:1.1.1.3
	cvs-200308171200:1.1.1.3
	ctm-3496:1.1.1.3
	ctm-3449:1.1.1.2
	ctm-3437:1.1.1.2
	cvs-200307191805:1.1.1.2
	ctm-3425:1.1.1.2
	cvs-200307091500:1.1.1.2
	cvs-200307072125:1.1.1.2
	ctm-3389:1.1.1.2
	cvs-200307021520:1.1.1.2
	cvs-200306291430:1.1.1.2
	ctm-3341:1.1.1.2
	MIRBSD_5:1.1.1.2
	cvs-200306082100:1.1.1.2
	ctm-3316:1.1.1.2
	ctm-3272:1.1.1.1
	cvs-200305131800:1.1.1.1
	ctm-3264:1.1.1.1
	cvs-200305071630:1.1.1.1
	ctm-3255:1.1.1.1
	ctm-3229:1.1.1.1
	MIRBSD_4:1.1.1.1
	ctm-3203:1.1.1.1
	cvs-20030410-1130:1.1.1.1
	ctm-3155:1.1.1.1
	ctm-3132:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.1
date	2003.03.22.17.49.34;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.03.22.17.49.34;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2003.06.05.17.34.19;	author tg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2003.08.11.18.34.09;	author tg;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2003.10.02.07.38.54;	author tg;	state Stab;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@/*	$OpenBSD: pctr.c,v 1.15 2002/03/14 01:26:32 millert Exp $	*/

/*
 * Pentium performance counter driver for OpenBSD.
 * Copyright 1996 David Mazieres <dm@@lcs.mit.edu>.
 *
 * Modification and redistribution in source and binary forms is
 * permitted provided that due credit is given to the author and the
 * OpenBSD project by leaving this copyright notice intact.
 */

#include <sys/types.h>
#include <sys/errno.h>
#include <sys/fcntl.h>
#include <sys/ioccom.h>
#include <sys/systm.h>

#include <machine/cputypes.h>
#include <machine/psl.h>
#include <machine/pctr.h>
#include <machine/cpu.h>
#include <machine/specialreg.h>

pctrval pctr_idlcnt;  /* Gets incremented in locore.s */

/* Pull in the cpuid values from locore.s */
extern int cpu_id;
extern int cpu_feature;
extern char cpu_vendor[];

int pctr_isintel;

#define usetsc		(cpu_feature & CPUID_TSC)
#define usep5ctr	(pctr_isintel && (((cpu_id >> 8) & 15) == 5) && \
				(((cpu_id >> 4) & 15) > 0))
#define usep6ctr	(pctr_isintel && ((cpu_id >> 8) & 15) == 6)

void pctrattach(int);
int pctropen(dev_t, int, int, struct proc *);
int pctrclose(dev_t, int, int, struct proc *);
int pctrioctl(dev_t, u_long, caddr_t, int, struct proc *);
int p5ctrsel(int fflag, u_int cmd, u_int fn);
static __inline void p5ctrrd(struct pctrst *st);
int p6ctrsel(int fflag, u_int cmd, u_int fn);
static __inline void p6ctrrd(struct pctrst *st);

void
pctrattach (num)
	int num;
{
	if (num > 1)
		return;

	pctr_isintel = (strcmp(cpu_vendor, "GenuineIntel") == 0);

	if (usep6ctr)
		/* Enable RDTSC and RDPMC instructions from user-level. */
		__asm __volatile (".byte 0xf,0x20,0xe0   # movl %%cr4,%%eax\n"
				  "\tandl %0,%%eax\n"
				  "\torl %1,%%eax\n"
				  "\t.byte 0xf,0x22,0xe0 # movl %%cr4,%%eax"
				  :: "i" (~CR4_TSD), "i" (CR4_PCE) : "eax");
	else if (usetsc)
		/* Enable RDTSC instruction from user-level. */
		__asm __volatile (".byte 0xf,0x20,0xe0   # movl %%cr4,%%eax\n"
				  "\tandl %0,%%eax\n"
				  "\t.byte 0xf,0x22,0xe0 # movl %%cr4,%%eax"
				  :: "i" (~CR4_TSD) : "eax");

	if (usep6ctr)
		printf ("pctr: 686-class user-level performance counters enabled\n");
	else if (usep5ctr)
		printf ("pctr: 586-class performance counters and user-level cycle counter enabled\n");
	else if (usetsc)
		printf ("pctr: user-level cycle counter enabled\n");
	else
		printf ("pctr: no performance counters in CPU\n");
}

int
pctropen (dev, oflags, devtype, p)
	dev_t dev;
	int oflags;
	int devtype;
	struct proc *p;
{
	if (minor (dev))
		return ENXIO;
	return 0;
}

int
pctrclose (dev, oflags, devtype, p)
	dev_t dev;
	int oflags;
	int devtype;
	struct proc *p;
{
	return 0;
}

int
p5ctrsel (fflag, cmd, fn)
	int fflag;
	u_int cmd;
	u_int fn;
{
	pctrval msr11;
	int msr;
	int shift;

	cmd -= PCIOCS0;
	if (cmd > 1)
		return EINVAL;
	msr = P5MSR_CTR0 + cmd;
	shift = cmd ? 0x10 : 0;

	if (! (fflag & FWRITE))
		return EPERM;
	if (fn >= 0x200)
		return EINVAL;

	msr11 = rdmsr (0x11);
	msr11 &= ~(0x1ffLL << shift);
	msr11 |= fn << shift;
	wrmsr (0x11, msr11);
	wrmsr (msr, 0);

	return 0;
}

static __inline void
p5ctrrd (st)
	struct pctrst *st;
{
	u_int msr11;

	msr11 = rdmsr (P5MSR_CTRSEL);
	st->pctr_fn[0] = msr11 & 0xffff;
	st->pctr_fn[1] = msr11 >> 16;
	__asm __volatile ("cli");
	st->pctr_tsc = rdtsc ();
	st->pctr_hwc[0] = rdmsr (P5MSR_CTR0);
	st->pctr_hwc[1] = rdmsr (P5MSR_CTR1);
	__asm __volatile ("sti");
}

int
p6ctrsel (fflag, cmd, fn)
	int fflag;
	u_int cmd;
	u_int fn;
{
	int msrsel, msrval;

	cmd -= PCIOCS0;
	if (cmd > 1)
		return EINVAL;
	msrsel = P6MSR_CTRSEL0 + cmd;
	msrval = P6MSR_CTR0 + cmd;

	if (! (fflag & FWRITE))
		return EPERM;
	if (fn & 0x380000)
		return EINVAL;

	wrmsr (msrval, 0);
	wrmsr (msrsel, fn);
	wrmsr (msrval, 0);

	return 0;
}

static __inline void
p6ctrrd (st)
	struct pctrst *st;
{
	st->pctr_fn[0] = rdmsr (P6MSR_CTRSEL0);
	st->pctr_fn[1] = rdmsr (P6MSR_CTRSEL1);
	__asm __volatile ("cli");
	st->pctr_tsc = rdtsc ();
	st->pctr_hwc[0] = rdpmc (0);
	st->pctr_hwc[1] = rdpmc (1);
	__asm __volatile ("sti");
}


int
pctrioctl (dev, cmd, data, fflag, p)
	dev_t dev;
	u_long cmd;
	caddr_t data;
	int fflag;
	struct proc *p;
{
	switch (cmd) {
	case PCIOCRD:
	{
		struct pctrst *st = (void *) data;
		
		if (usep6ctr)
			p6ctrrd (st);
		else if (usep5ctr)
			p5ctrrd (st);
		else {
			bzero (st, sizeof (*st));
			if (usetsc)
				st->pctr_tsc = rdtsc ();
		}
		st->pctr_idl = pctr_idlcnt;
		return 0;
	}
	case PCIOCS0:
	case PCIOCS1:
		if (usep6ctr)
			return p6ctrsel (fflag, cmd, *(u_int *) data);
		if (usep5ctr)
			return p5ctrsel (fflag, cmd, *(u_int *) data);
		return ENODEV;
	default:
		return EINVAL;
	}
}
@


1.1.1.1
log
@Import OpenBSD 3.3 source repository from CTM 3132 the first time
This opens an OpenBSD-mirabile (aka MirBSD) repository.

### MirBSD is:
# Copyright (c) 1982-2003 by Thorsten "mirabile" Glaser <x86@@ePost.de>
# Copyright © 1968-2003  The authors of And contributors to UNIX®, the
#       C Language, BSD/Berkeley Unix; 386BSD, NetBSD 1.1 and OpenBSD.
#
# Anyone who obtained a copy of this work is hereby permitted to freely use,
# distribute, modify, merge, sublicence, give away or sell it as long as the
# authors are given due credit and the following notice is retained:
#
# This work is provided "as is", with no explicit or implicit warranty what-
# soever. Use it only at your own risk. In no event may an author or contri-
# butor be held liable for any damage, directly or indirectly, that origina-
# ted through or is caused by creation or modification of this work.

MirBSD is my private tree. MirBSD does not differ very much from OpenBSD
and intentionally tracks OpenBSD. That's why it _is_ OpenBSD, just not the
official one. It's like with DarrenBSD.

At time of this writing, no advertising for MirBSD must be done,
because the advertising clause has not yet been sorted out.

http://templeofhate.com/tglaser/MirBSD/index.php
@
text
@@


1.1.1.2
log
@Import latest OpenBSD CVS tree by CTM in order
to sync the base system and ports tree with Them.

This includes the recent licence changes as well - by
importing the changed base and re-applying the diffs
(with cvs up -j -j) they are inherited, and we're not
bound to the removed clauses any longer.
@
text
@d1 1
a1 1
/*	$OpenBSD: pctr.c,v 1.16 2003/05/27 23:52:01 fgsch Exp $	*/
d58 1
a58 1
		__asm __volatile ("movl %%cr4,%%eax\n"
d61 1
a61 1
				  "\tmovl %%cr4,%%eax"
d65 1
a65 1
		__asm __volatile ("movl %%cr4,%%eax\n"
d67 1
a67 1
				  "\tmovl %%cr4,%%eax"
@


1.1.1.3
log
@Import the complete OpenBSD source tree (base system)
as of CTM delta 3496 (roughly 1200 UTC today) into the
vendor branch.
Attention: this is a big update. Don't even try to
build this system, OpenBSD 3.4-beta, yet on your own.
@
text
@d1 1
a1 1
/*	$OpenBSD: pctr.c,v 1.17 2003/07/25 22:47:54 mickey Exp $	*/
d123 1
a123 1
	msr11 = rdmsr (P5MSR_CTRSEL);
d126 1
a126 1
	wrmsr (P5MSR_CTRSEL, msr11);
@


1.1.1.4
log
@Import OpenBSD source tree again, with critical bug fixes
(OpenSSL, bc, dc, sensorsd, pf, ...)
@
text
@d1 1
a1 1
/*	$OpenBSD: pctr.c,v 1.18 2003/09/29 17:33:01 mickey Exp $	*/
d61 1
a61 1
				  "\tmovl %%eax,%%cr4"
d67 1
a67 1
				  "\tmovl %%eax,%%cr4"
@


