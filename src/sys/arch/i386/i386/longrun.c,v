head	1.1;
branch	1.1.1;
access;
symbols
	tg-mergetmp-mirosx-1:1.1.1.6
	tg-mergefixes-1-branch:1.1.1.6.0.8
	tg-mergefixes-1-base:1.1.1.6
	MIROS_X:1.1.1.6.0.6
	MIROS_X_BASE:1.1.1.6
	tg-mergetmp-3:1.1.1.6
	MIRBSD_XP_MIRPPC:1.1.1.6.0.4
	MIRBSD_XP_SPARC_BASE:1.1.1.6
	MIRBSD_XP_SPARC:1.1.1.6.0.2
	MIRBSD_7quater:1.1.1.3
	cvs-200405160640:1.1.1.6
	cvs-200401271800:1.1.1.5
	cvs-200401261630:1.1.1.5
	cvs-200401021645:1.1.1.4
	MIRBSD_7_ALPHA:1.1.1.3.0.6
	MIRBSD_7:1.1.1.3.0.4
	cvs-200312222040:1.1.1.4
	MIRBSD_7ter:1.1.1.3
	MIRBSD_7_DEV:1.1.1.3.0.2
	cvs-200310020700:1.1.1.3
	cvs-200309271030:1.1.1.3
	cvs-200309261655:1.1.1.3
	cvs-200309251530:1.1.1.3
	cvs-200308302005:1.1.1.3
	cvs-200308221505:1.1.1.3
	cvs-200308171200:1.1.1.3
	ctm-3496:1.1.1.3
	ctm-3449:1.1.1.3
	ctm-3437:1.1.1.3
	cvs-200307191805:1.1.1.3
	ctm-3425:1.1.1.3
	cvs-200307091500:1.1.1.3
	cvs-200307072125:1.1.1.3
	ctm-3389:1.1.1.2
	cvs-200307021520:1.1.1.2
	cvs-200306291430:1.1.1.2
	ctm-3341:1.1.1.2
	MIRBSD_5:1.1.1.2
	cvs-200306082100:1.1.1.2
	ctm-3316:1.1.1.2
	ctm-3272:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.1
date	2003.05.21.19.05.08;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.05.21.19.05.08;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2003.06.05.17.34.20;	author tg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2003.07.07.21.32.27;	author tg;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2003.12.22.20.58.56;	author tg;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2004.01.26.18.39.09;	author tg;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2004.05.16.08.43.26;	author tg;	state Stab;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@/* $OpenBSD: longrun.c,v 1.1 2003/05/14 22:08:04 tedu Exp $ */
/*
 * Copyright (c) 2003 Ted Unangst
 * Copyright (c) 2001 Tamotsu Hattori
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
 * AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <machine/cpufunc.h>

#include <machine/longrun.h>

static void	longrun_readreg(u_int32_t, u_int32_t *);
static void	longrun_getmode(u_int32_t *, u_int32_t *, u_int32_t *);
static void	longrun_setmode(u_int32_t, u_int32_t, u_int32_t);
int		longrun_sysctl(void *, size_t *, void *, size_t);

int longrun_enabled;

union msrinfo {
	u_int64_t msr;
	uint32_t regs[2];
};

#define MSR_TMx86_LONGRUN       0x80868010
#define MSR_TMx86_LONGRUN_FLAGS 0x80868011

#define LONGRUN_MODE_MASK(x) ((x) & 0x000000007f)
#define LONGRUN_MODE_RESERVED(x) ((x) & 0xffffff80)
#define LONGRUN_MODE_WRITE(x, y) (LONGRUN_MODE_RESERVED(x) | LONGRUN_MODE_MASK(y))
#define read_eflags()           ({register u_long ef; \
                                  __asm("pushfl; popl %0" : "=r" (ef)); \
                                  ef;}) 
#define write_eflags(x)         ({register u_long ef = (x); \
                                  __asm("pushl %0; popfl" : : "r" (ef));})

/* sysctl handler and entry point.  Just call the right function */
int longrun_sysctl(void *oldp, size_t *oldlenp, void *newp, size_t newlen)
{
	struct longrun *oinfo = oldp;
	struct longrun *ninfo = newp;

	if (!longrun_enabled)
		return (EINVAL);

	if (ninfo != NULL)
		longrun_setmode(ninfo->low, ninfo->high, ninfo->mode);
	
	if (oinfo != NULL)
		longrun_getmode(&oinfo->freq, &oinfo->voltage, &oinfo->percent);

	return (0);

}

static void
longrun_getmode(u_int32_t *freq, u_int32_t *voltage, u_int32_t *percent)
{
	u_long eflags;
	u_int32_t regs[4];

	eflags = read_eflags();
	disable_intr();

	longrun_readreg(0x80860007, regs);
	*freq = regs[0];
	*voltage = regs[1];
	*percent = regs[2];

	enable_intr();
	write_eflags(eflags);
}

static void
longrun_readreg(u_int ax, u_int * p)
{
	__asm __volatile(
	".byte	0x0f, 0xa2;"
	"movl	%%eax, (%2);"
	"movl	%%ebx, 4(%2);"
	"movl	%%ecx, 8(%2);"
	"movl	%%edx, 12(%2);"
	:"=a"(ax)
	:"0"(ax), "S"(p)
	:"bx", "cx", "dx"
	);
}

static void 
longrun_setmode(u_int32_t low, u_int32_t high, u_int32_t mode)
{
 	u_long		eflags;
 	union msrinfo	msrinfo;

	if (low < 0 || low > 100 || high < 0 || high > 100)
		return;
	if (mode != 0 && mode != 1)
		return;

	eflags = read_eflags();
	disable_intr();
	msrinfo.msr = rdmsr(MSR_TMx86_LONGRUN);
	msrinfo.regs[0] = LONGRUN_MODE_WRITE(msrinfo.regs[0], low);
	msrinfo.regs[1] = LONGRUN_MODE_WRITE(msrinfo.regs[1], high);
	wrmsr(MSR_TMx86_LONGRUN, msrinfo.msr);
	
	msrinfo.msr = rdmsr(MSR_TMx86_LONGRUN_FLAGS);
	msrinfo.regs[0] = (msrinfo.regs[0] & ~0x01) | mode;
	wrmsr(MSR_TMx86_LONGRUN_FLAGS, msrinfo.msr);

	enable_intr();
	write_eflags(eflags);
}

@


1.1.1.1
log
@Sync MirBSD main source tree against OpenBSD-current,
which should be fairly stable after the Hackathon now.
@
text
@@


1.1.1.2
log
@Import latest OpenBSD CVS tree by CTM in order
to sync the base system and ports tree with Them.

This includes the recent licence changes as well - by
importing the changed base and re-applying the diffs
(with cvs up -j -j) they are inherited, and we're not
bound to the removed clauses any longer.
@
text
@d1 1
a1 1
/* $OpenBSD: longrun.c,v 1.3 2003/05/27 23:52:01 fgsch Exp $ */
a48 3
/*
 * Crusoe model specific registers which interest us.
 */
d61 1
a61 3
/* 
 * sysctl handler and entry point.  Just call the right function
 */
d64 2
a65 3
	struct longrun oinfo;
	struct longrun ninfo;
	int error;
d70 2
a71 10
	if (oldp && *oldlenp < sizeof(oinfo))
		return (ENOMEM);
	*oldlenp = sizeof(oinfo);

	if (newp != NULL) {
		error = copyin(newp, &ninfo, sizeof(ninfo));
		if (error)
			return (error);
		longrun_setmode(ninfo.low, ninfo.high, ninfo.mode);
	}
d73 2
a74 5
	if (oldp != NULL) {
		memset(&oinfo, 0, sizeof(oinfo));
		longrun_getmode(&oinfo.freq, &oinfo.voltage, &oinfo.percent);
		error = copyout(&oinfo, oldp, sizeof(oinfo));
	}
d76 1
a76 1
	return (error);
a79 7
/*
 * These are the instantaneous values used by the CPU.
 * Frequency is self-evident.
 * Voltage is returned in millivolts.
 * Percent is amount of performance window being used, not percentage
 * of top megahertz.  (0 values are typical.)
 */
a97 3
/*
 * Get the info.  Multiple return values
 */
d99 1
a99 1
longrun_readreg(u_int32_t ax, u_int32_t *regs)
d102 2
a103 2
	"cpuid;"
	"movl	%%eax, 0(%2);"
d108 1
a108 1
	:"0"(ax), "S"(regs)
a112 8
/*
 * Transmeta documentation says performance window boundries
 * must be between 0 and 100 or a GP0 exception is generated.
 * mode is really only a bit, 0 or 1
 * These values will be rounded by the CPU to within the
 * limits it handles.  Typically, there are about 5 performance
 * levels selectable.
 */
d119 1
a119 1
	if (low > 100 || high > 100 || low > high)
d130 1
a130 1

@


1.1.1.3
log
@Sync some stuff with OpenBSD
@
text
@d1 1
a1 1
/* $OpenBSD: longrun.c,v 1.4 2003/07/07 03:07:19 tedu Exp $ */
d37 1
d113 1
a113 1
	cpuid(0x80860007, regs);
d120 18
@


1.1.1.4
log
@Time to import OpenBSD once again. Expect breakage.
@
text
@d1 1
a1 1
/* $OpenBSD: longrun.c,v 1.6 2003/12/18 23:46:19 tedu Exp $ */
a32 1
#include <sys/sysctl.h>
d35 8
d57 38
d98 4
a101 4
 * regs[0] = Frequency is self-evident.
 * regs[1] = Voltage is returned in millivolts.
 * regs[2] = Percent is amount of performance window being used, not
 * percentage of top megahertz.  (0 values are typical.)
d103 2
a104 2
int
longrun_cpuspeed(void *oldp, size_t *oldlenp, void *newp, size_t newlen)
d106 2
a107 1
	uint32_t eflags, freq, regs[4];
d111 1
d113 4
a118 4

	freq = regs[0];

	return (sysctl_rdint(oldp, oldlenp, newp, freq));
d129 2
a130 2
int
longrun_setperf(void *oldp, size_t *oldlenp, void *newp, size_t newlen)
d132 2
a133 4
	int error;
	uint32_t eflags, mode;
 	union msrinfo msrinfo;
	static uint32_t high = 100;
d135 4
a138 12
	if (newp == NULL)
		return (EINVAL);
	if ((error = sysctl_int(oldp, oldlenp, newp, newlen, &high)))
		return (error);

	if (high > 100)
		high = 100;

	if (high >= 50)
		mode = 1;	/* power */
	else
		mode = 0;	/* battery */
a141 1

d143 1
a143 1
	msrinfo.regs[0] = LONGRUN_MODE_WRITE(msrinfo.regs[0], 0); /* low */
a152 2

	return (0);
@


1.1.1.5
log
@Import OpenBSD as of today again (seems pretty stable, I hope)

Prominent changes: more bgpd, tcpmd5; tcpdump/isakmpd fixes
@
text
@d1 1
a1 1
/* $OpenBSD: longrun.c,v 1.7 2004/01/06 21:09:20 tedu Exp $ */
a32 1
#include <sys/kernel.h>
a33 4
#include <sys/timeout.h>
#include <sys/sensors.h>


a50 14
void	longrun_update(void *);

struct timeout longrun_timo;

void
longrun_init(void)
{
	cpu_cpuspeed = longrun_cpuspeed;
	cpu_setperf = longrun_setperf;

	timeout_set(&longrun_timo, longrun_update, NULL);
	timeout_add(&longrun_timo, hz);
}

d58 2
a59 2
void
longrun_update(void *arg)
d61 1
a61 1
	uint32_t eflags, regs[4];
d69 1
a69 4
	pentium_mhz = regs[0];

	timeout_add(&longrun_timo, hz);
}
d71 1
a71 5
int
longrun_cpuspeed(void *oldp, size_t *oldlenp, void *newp, size_t newlen)
{
	longrun_update(NULL);	/* force update */
	return (sysctl_rdint(oldp, oldlenp, newp, pentium_mhz));
@


1.1.1.6
log
@large-scale import of OpenBSD 3.5-current source base including many fixes
note: from now, we will not be binary compatible with OpenBSD apps any
longer (due to syscall numbering differences); both an OpenBSD compat and
a conversion tool for old MirOS #7 apps will be delivered later.

The src/ tree is locked from now.
@
text
@d1 1
a1 1
/* $OpenBSD: longrun.c,v 1.8 2004/02/14 15:09:22 grange Exp $ */
d94 1
a94 1
longrun_cpuspeed(int *freq)
d97 1
a97 2
	*freq = pentium_mhz;
	return (0);
d109 1
a109 1
longrun_setperf(int high)
d111 1
d114 9
@


