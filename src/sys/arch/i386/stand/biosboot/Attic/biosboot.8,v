head	1.2;
access;
symbols
	cvs-200405160640:1.1.1.5
	cvs-200401271800:1.1.1.4
	cvs-200401261630:1.1.1.3
	cvs-200401021645:1.1.1.3
	cvs-200312222040:1.1.1.3
	cvs-200312171912:1.1.1.3
	cvs-200310020700:1.1.1.3
	cvs-200309271030:1.1.1.3
	cvs-200309261655:1.1.1.3
	cvs-200309251530:1.1.1.3
	cvs-200309192030:1.1.1.3
	cvs-200309181930:1.1.1.3
	cvs-200309131952:1.1.1.3
	cvs-200308302005:1.1.1.3
	cvs-200308221505:1.1.1.3
	cvs-200308171200:1.1.1.3
	ctm-3496:1.1.1.3
	ctm-3449:1.1.1.3
	ctm-3437:1.1.1.3
	cvs-200307191805:1.1.1.3
	ctm-3425:1.1.1.3
	cvs-200307091500:1.1.1.3
	cvs-200307072125:1.1.1.3
	ctm-3389:1.1.1.3
	cvs-200307021520:1.1.1.3
	cvs-200306291430:1.1.1.3
	ctm-3341:1.1.1.3
	cvs-200306082100:1.1.1.3
	ctm-3316:1.1.1.2
	ctm-3272:1.1.1.1
	ctm-3264:1.1.1.1
	cvs-200305071630:1.1.1.1
	ctm-3255:1.1.1.1
	ctm-3229:1.1.1.1
	MIRBSD_4:1.1.1.1
	ctm-3203:1.1.1.1
	cvs-20030410-1130:1.1.1.1
	ctm-3155:1.1.1.1
	ctm-3132:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@.\" @;


1.2
date	2003.05.23.13.50.42;	author tg;	state dead;
branches;
next	1.1;

1.1
date	2003.03.22.17.49.37;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.03.22.17.49.37;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2003.06.05.17.34.27;	author tg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2003.06.08.23.05.48;	author tg;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2004.01.27.19.08.42;	author tg;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2004.05.16.08.42.49;	author tg;	state Exp;
branches;
next	;


desc
@@


1.2
log
@move bootblocks (pbr and mbr) into their directories
@
text
@.\"	$OpenBSD: biosboot.8,v 1.15 2003/01/29 16:53:37 jmc Exp $
.\"
.\" Copyright (c) 1997 Michael Shalayeff
.\" All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. All advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"	This product includes software developed by Michael Shalayeff.
.\" 4. The name of the author may not be used to endorse or promote products
.\"    derived from this software without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
.\" IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
.\" WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF MIND, USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.Dd September 1, 1997
.Dt BIOSBOOT 8 i386
.Os
.Sh NAME
.Nm biosboot
.Nd
i386-specific first-stage system bootstrap
.Sh DESCRIPTION
This small program (roughly 512 bytes of code) is responsible for
loading the second stage
.Xr boot 8
program, which in turn will load the kernel.
It takes no input or options directly.
.Pp
In order for
.Nm
to load the second-stage bootstrap, it has a table inside it which
describes
.Xr boot 8 's
location.
.Nm
must be installed by, and have its block table filled in by, the
.Xr installboot 8
program.  As this data is BIOS dependent, you must re-run
.Xr installboot 8
each time you reinstall
.Xr boot 8
or move your disk or software between machines and/or controllers.
.Pp
When
.Nm
receives control from either the BIOS or the MBR it will print the message:
.Pp
.Dl loading /boot
.Pp
followed by a dot for every successfully loaded block,
and then put the cursor on the next line right before switching into
protected mode and transferring control to the just loaded /boot program.
.Sh DIAGNOSTICS
Diagnostics consist of two error messages:
.Bl -tag -width read_error_
.It Er Read error
Some kind of error returned by the BIOS read call. This might be
any media error, including bad sectors (common on floppy disks),
and invalid sectors (can occur with messed up geometry translations).
.It Er Bad magic
The just loaded /boot image contains a bad magic in its header.  This
might indicate some kind of hardware problem, the
.Ar boot
argument to the
.Xr installboot 8
command was not a valid /boot program, or /boot has been moved or
changed.
.El
.Pp
Other common reasons for these errors to appear is that a wrong BIOS geometry
has been used in
.Xr installboot 8
for the device you are booting from.
.Sh NOTES
The practice of making OpenBSD use the whole disk (ie: having
.Nm
as the MBR) has been deprecated, and will not work on certain BIOS versions.
There is a lot of strange behaviour with different BIOSes; one well
known lobotomy case is that the BIOS does not pass the right boot drive
number to the
.Nm
program.  This is one of the main reasons that having
.Nm
as the MBR has been deprecated.
.Sh FILES
.Bl -tag -width /usr/mdec/biosbootxx -compact
.It Pa /usr/mdec/mbr
Master Boot Record block
.It Pa /usr/mdec/biosboot
primary bootstrap
.It Pa /boot
secondary bootstrap
.It Pa /bsd
system code
.El
.Sh SEE ALSO
.Xr boot 8 ,
.Xr boot_i386 8 ,
.Xr fdisk 8 ,
.Xr installboot 8
.Sh BUGS
It should do a checksum over the loaded /boot image, and check that against
a value that
.Xr installboot 8
has precomputed.
.Pp
There is no BIOS error number reported nor is the location of the error
reported.
.Pp
You can pick your motherboard, and you can pick your BIOS,
but you can't pick your motherboard's BIOS.
.Sh HISTORY
This program was written by Michael Shalayeff for
.Ox 2.1 .
However it's based on bootstrap code from older versions of this
operating system, other operating systems, other programs, and
other people's work.
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Import OpenBSD 3.3 source repository from CTM 3132 the first time
This opens an OpenBSD-mirabile (aka MirBSD) repository.

### MirBSD is:
# Copyright (c) 1982-2003 by Thorsten "mirabile" Glaser <x86@@ePost.de>
# Copyright © 1968-2003  The authors of And contributors to UNIX®, the
#       C Language, BSD/Berkeley Unix; 386BSD, NetBSD 1.1 and OpenBSD.
#
# Anyone who obtained a copy of this work is hereby permitted to freely use,
# distribute, modify, merge, sublicence, give away or sell it as long as the
# authors are given due credit and the following notice is retained:
#
# This work is provided "as is", with no explicit or implicit warranty what-
# soever. Use it only at your own risk. In no event may an author or contri-
# butor be held liable for any damage, directly or indirectly, that origina-
# ted through or is caused by creation or modification of this work.

MirBSD is my private tree. MirBSD does not differ very much from OpenBSD
and intentionally tracks OpenBSD. That's why it _is_ OpenBSD, just not the
official one. It's like with DarrenBSD.

At time of this writing, no advertising for MirBSD must be done,
because the advertising clause has not yet been sorted out.

http://templeofhate.com/tglaser/MirBSD/index.php
@
text
@@


1.1.1.2
log
@Import latest OpenBSD CVS tree by CTM in order
to sync the base system and ports tree with Them.

This includes the recent licence changes as well - by
importing the changed base and re-applying the diffs
(with cvs up -j -j) they are inherited, and we're not
bound to the removed clauses any longer.
@
text
@d1 1
a1 1
.\"	$OpenBSD: biosboot.8,v 1.16 2003/06/03 20:22:11 mickey Exp $
d14 5
@


1.1.1.3
log
@Import OpenBSD CVS of roughly 2000-2200 UTC. Last import before release.
@
text
@d1 1
a1 1
.\"	$OpenBSD: biosboot.8,v 1.17 2003/06/06 21:45:33 jmc Exp $
d50 1
a50 2
program.
As this data is BIOS dependent, you must re-run
d69 2
a70 2
Some kind of error returned by the BIOS read call.
This might be any media error, including bad sectors (common on floppy disks),
d73 2
a74 2
The just loaded /boot image contains a bad magic in its header.
This might indicate some kind of hardware problem, the
d87 1
a87 3
The practice of making
.Ox
use the whole disk (ie: having
d94 1
a94 2
program.
This is one of the main reasons that having
a112 6
.Sh HISTORY
This program was written by Michael Shalayeff for
.Ox 2.1 .
However it's based on bootstrap code from older versions of this
operating system, other operating systems, other programs, and
other people's work.
d124 6
@


1.1.1.4
log
@using: ========= cvsim-base-obsd _MirBSD: cvsim-src-openbsd,v 1.3 2004/01/27 17:17:54 tg Exp $ =========

In contrast to what people might believe now,
I am not "specially" attracted by CVS Imports
(neither am I a version number hunter).
@
text
@d1 1
a1 1
.\"	$OpenBSD: biosboot.8,v 1.18 2004/01/26 23:21:49 tom Exp $
a2 1
.\" Copyright (c) 2003 Tom Cosgrove <tom.cosgrove@@arches-consulting.com>
d27 1
a27 1
.Dd December 23, 2003
d36 1
a36 1
loading the second-stage
d38 2
a39 1
program (typically /boot), which in turn will load the kernel.
d41 1
d43 6
a48 3
must be installed by
.Xr installboot 8 .
As part of the installation,
d50 2
a51 13
patches
.Nm
with information about the location of
.Xr boot 8
on disk.
Specifically, it writes the filesystem block number of
.Xr boot 8 's
inode,
the offset within this block of the inode,
and various filesystem parameters (taken from the superblock)
required to convert filesystem blocks to disk sectors.
.Pp
You must re-run
d53 1
a53 1
whenever
d55 1
a55 5
is changed, as its inode may change.
While it should not be necessary,
it may also be advisable to re-run
.Xr installboot 8
if you move your disk between machines and/or controllers.
d59 1
a59 4
receives control from either the BIOS or the
master boot record (MBR) it will print the message:
.Pp
.Dl Loading
d61 1
a61 5
followed by a dot for every filesystem block it attempts to load.
If /boot is loaded successfully,
.Nm
will put the cursor on the next line just before
transferring control to the newly-loaded program.
d63 3
a65 19
If possible,
.Nm
will read disk sectors using calls detailed in the Phoenix
Enhanced Disk Drive Specification (EDD, sometimes known as LBA, reads).
It will fall back to CHS reads only if EDD calls are not available.
However, to allow users to boot on hardware that claims LBA capability,
but which requires CHS reads in order to boot,
the user may hold down either Shift key during boot.
If
.Nm
detects this, it will force itself to use CHS calls, ignoring
any LBA capability.
This will of course prevent booting if /boot lies above the 8 GB
CHS limit.
There is an exported symbol
.Dq force_chs
of type u_int8_t
which may be set to 1 to force CHS reads always.
(However, no tool is currently provided to set this flag.)
d67 9
a75 75
.Nm
prints a
.Sq !\&
before the
.Dq Loading
message if it is being forced to use CHS rather than LBA reads
(by the user holding down either Shift key during boot,
or having set the
.Dq force_chs
flag in the boot sector).
.Pp
.Nm
prints a
.Sq ;\&
after the
.Dq Loading
message if it is going to use CHS reads for any reason.
For example, when booting from floppy or CD-ROM.
.Pp
.Nm
may fail with any of the following error messages:
.Bl -tag -width ERR_X__
.It Er ERR I
Too many indirect blocks.
.Nm
is capable of reading the direct blocks in
.Xr boot 8 's
inode (the location of which is patched into
.Nm
by
.Xr installboot 8 )
and the first indirect block,
but it is not capable of reading further indirect blocks.
This error indicates that further such indirect blocks were found.
The system will not be able to boot.
.Pp
This is unlikely to ever happen in practice, as
.Xr boot 8
has to be quite large for this to be an issue.
The smallest possible filesystem block size is 512 bytes
(one sector per filesystem block).
On such a system, there are 140 filesystem blocks that
.Nm
can read, so
.Xr boot 8
can be up to 70 KB.
.Pp
However, even on floppy disks the filesystem block size is 1024 bytes.
This allows
.Xr boot 8
to occupy up to 268 disk blocks,
i.e. to be 268 KB.
On hard disks (default filesystem block size 16 KB)
4,108 disk blocks are available, to allow
.Xr boot 8
to be over 64 MB in size!
(Only direct blocks are required for
.Xr boot 8 s
of up to 192 KB.)
.It Er ERR M
Bad magic.
The ELF
.Dq magic number
\e7fELF in
.Xr boot 8 's
header was not found.
This indicates that the first block of
.Xr boot 8
was not read correctly.
This could be due to disk corruption,
failing to run
.Xr installboot 8 ,
giving an invalid
.Xr boot 8
program as the
d77 5
a81 11
argument to
.Xr installboot 8 ,
or
incorrect geometry translation.
.It Er ERR R
Read error.
The BIOS returned an error indication when
.Nm
attempted to read a disk sector.
This might be any media error, including bad sectors (common on floppy disks),
and invalid sectors (can occur with bad geometry translations).
d83 8
a90 7
If this error occurs during an LBA boot (no
.Sq ;\&
after
.Dq Loading ) ,
then a CHS boot may succeed.
To do this, you should reboot, then hold down either Shift key
before
d92 4
a95 14
starts.
You should see a
.Sq !\&
before
.Dq Loading
as confirmation that your
override was accepted.
.It Er ERR X
Can't boot.
Issued when trying to read sectors in CHS mode,
but the BIOS call
.Em get\ drive\ parameters
failed or gave a value of 0 for the number of sectors per track.
In either case, it is not possible for
d97 2
a98 4
to calculate the (cylinder, head, sector) values required to
read any sectors.
.Sh NOTES
Using
d100 1
a100 13
as the MBR,
as has been done in the past,
is not recommended, and is not supported.
Instead, create a single
.Xr fdisk 8
partition that spans the entire disk.
.Pp
Despite the support for
.Xr boot 8
over the 8 GB boundary,
good
.Xr disklabel 8
partitioning practices should still be followed.
d110 1
a110 2
.Ox
kernel
a114 1
.Xr disklabel 8 ,
d118 1
a118 2
.Nm
was originally written by Michael Shalayeff for
d120 1
a120 1
However it was based on bootstrap code from older versions of this
a122 7
.Pp
It was significantly revised in December 2003 by Tom Cosgrove,
in order to support LBA disk access (via the Phoenix Enhanced Disk
Drive Specification API).
At that time the internal table of disk blocks was removed, and
.Nm
modified to read filesystem block numbers from the inode.
d124 4
a127 5
.Nm
should perform and verify a checksum across the entire loaded
.Xr boot 8
image,
rather than just checking the magic number in the first block.
@


1.1.1.5
log
@large-scale import of OpenBSD 3.5-current source base including many fixes
note: from now, we will not be binary compatible with OpenBSD apps any
longer (due to syscall numbering differences); both an OpenBSD compat and
a conversion tool for old MirOS #7 apps will be delivered later.

The src/ tree is locked from now.
@
text
@d1 1
a1 1
.\"	$OpenBSD: biosboot.8,v 1.20 2004/04/03 10:15:37 jmc Exp $
a213 1
.El
a237 2
.It Pa /usr/mdec/pxeboot
PXE bootstrap
d247 1
a247 2
.Xr installboot 8 ,
.Xr pxeboot 8
@


