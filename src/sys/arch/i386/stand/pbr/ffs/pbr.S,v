head	1.10;
access;
symbols
	tg-mergetmp-mirosx-1:1.10
	tg-mergefixes-1-branch:1.10.0.4
	tg-mergefixes-1-base:1.10
	MIROS_X:1.10.0.2
	MIROS_X_BASE:1.10
	tg-mergetmp-3:1.10
	MIRBSD_XP_MIRPPC:1.9.0.4
	MIRBSD_XP_SPARC_BASE:1.9
	MIRBSD_XP_SPARC:1.9.0.2;
locks; strict;
comment	@# @;


1.10
date	2004.12.05.13.25.37;	author tg;	state Exp;
branches;
next	1.9;

1.9
date	2003.12.19.20.58.29;	author tg;	state Stab;
branches;
next	1.8;

1.8
date	2003.12.19.16.51.30;	author tg;	state Exp;
branches;
next	1.7;

1.7
date	2003.12.18.22.26.20;	author tg;	state Exp;
branches;
next	1.6;

1.6
date	2003.12.01.18.49.44;	author tg;	state Exp;
branches;
next	1.5;

1.5
date	2003.11.25.17.54.02;	author tg;	state Exp;
branches;
next	1.4;

1.4
date	2003.11.17.16.49.59;	author tg;	state Exp;
branches;
next	1.3;

1.3
date	2003.11.17.13.58.00;	author tg;	state Exp;
branches;
next	1.2;

1.2
date	2003.11.14.23.37.26;	author tg;	state Exp;
branches;
next	1.1;

1.1
date	2003.10.30.12.49.44;	author tg;	state Exp;
branches;
next	;


desc
@@


1.10
log
@* replace all occurences of old eMail addresses of mine
  with their more recent counterparts
* no $Log keyword!
* update licence template to most recent version in files touched
* in some places, don't add our own licence boilerplate, just
  add my name to the others
* make dev/rndvar.h suitable for inclusion in asm code
* include dev/rndvar.h by in_cksum.s instead of
  hardcoding pool size
* ENTRY(a); ENTRY(b) -> NENTRY(a); ENTRY(b)
* RCS IDs belong into .comment not .text
@
text
@/**	$MirBSD: src/share/misc/licence.template,v 1.20 2004/12/03 16:18:37 tg Rel $ */

/*-
 * Copyright (c) 2003, 2004
 *	Thorsten "mirabile" Glaser <tg@@66h.42h.de>
 *
 * Licensee is hereby permitted to deal in this work without restric-
 * tion, including unlimited rights to use, publicly perform, modify,
 * merge, distribute, sell, give away or sublicence, provided all co-
 * pyright notices above, these terms and the disclaimer are retained
 * in all redistributions or reproduced in accompanying documentation
 * or other materials provided with binary redistributions.
 *
 * All advertising materials mentioning features or use of this soft-
 * ware must display the following acknowledgement:
 *	This product includes material provided by Thorsten Glaser.
 *
 * Licensor hereby provides this work "AS IS" and WITHOUT WARRANTY of
 * any kind, expressed or implied, to the maximum extent permitted by
 * applicable law, but with the warranty of being written without ma-
 * licious intent or gross negligence; in no event shall licensor, an
 * author or contributor be held liable for any damage, direct, indi-
 * rect or other, however caused, arising in any way out of the usage
 * of this work, even if advised of the possibility of such damage.
 *-
 * Derived from the original OpenBSD first stage boot loader code,
 * written by (c) 1997 Michael Shalayeff, Tobias Weingartner, as spec.
 *
 * Checks if LBA, if not available, uses CHS. If LBA load fails, fall
 * back to CHS. If everything fails or bad magic, redo from start but
 * using CHS-single-sector transfers. Ugly but size-optimized code.
 */

	.intel_syntax noprefix
	.text
	.code16
	.globl	_start
	.globl	blkcnt		/** block count in hint table	*/
	.globl	bpbspt		/** used to convert LBA -> CHS	*/
	.globl	bpbtpc		/** used to convert LBA -> CHS	*/
	.globl	blktbl		/** hint table start (at EOF)	*/
	.type	blkcnt, @@function
	.type	bpbspt, @@function
	.type	bpbtpc, @@function
	.type	blktbl, @@function

/* Parameter block for LBA, gets constructed here:
 * this is ALWAYS offset 0 into the file!
	word	0x0010		(+0,2) length, reserved
	word	0x0001		(+2,2) num. of sectors
	long	0x00007C00	(+4,4) transfer buffer
	long	0,0		(+8,8) LBA block number
 */

_start:	jmp	Linit
	nop
	. = _start + 3
Lmsg:	.ascii	"Loading "
	.word	512		/* bytes per sector */
	.byte	1		/* sectors per cluster */
	.word	1		/* reserved sectors */

/* End of parameter block. How much space do we have? */
#define	BLKCNT	(blkend - blktbl)
blkcnt:	.byte	BLKCNT		/* FATs per volume */
Lldp:	.word	LsLBA		/* root dir ents */
	.word	LsCHS		/* sectors per drive (FAT16s) */
	.byte	0xF8		/* media ID */
bpbspt:	.word	18		/* sectors per FAT (used!)	*/
bpbtpc:	.word	2		/* sectors per track (used!)	*/

/* the following code is 0x0A bytes long:
	.word	80		// tracks per cylinder
	.long	16		// hidden sectors
	.long	0x10E9464C	// sectors per drive (FAT16B)
 */
Lotxt0:	int	0x10
Lotxt:	mov	bx,7
	mov	ah,0x0E
	lodsb
	jmp	Lotxt1
	. = 10 + Lotxt0		/* ensure it fits exactly */

Ldrv:	.byte	0x80, 0		/* BIOS drive */
	.byte	0x29		/* magic (EBPB) */

/* the following code is 0x0F bytes long:
	.long	0		// volume serial number
	.asciz	"UNIX LABEL"	// volume label
 */
LsLBA:	push	si		/* save blktbl offset */
	mov	ah,0x42		/* BIOS routine loadLBA */
	xor	si,si		/* offset parblk */
	call	LsINT		/* call BIOS subroutine */
	pop	si
	ret
Lotxt1:	or	al,al
	jne	Lotxt0
	ret
	. = 15 + LsLBA		/* ensure it fits exactly */

	.asciz	"UFS 4.4"	/* volume fstype */

	/* INITIALIZATION routine */
Linit:	xor	eax,eax
	push	ax
	popf
	mov	ss,ax
	mov	sp,0xFFFC
	sti
	add	ax,0x07C0	/* not MOV - eases debugging... */
	mov	ds,ax
	mov	gs,ax
	push	ax
	push	offset Lrun
	lret			/* should read retf according to GNU docs */

	/* MAIN routine */
Lrun:	mov	[Ldrv],dl	/* boot device */
	/* say hello */
	mov	si,offset Lmsg
	call	Lotxt
	/* check for LBA */
	mov	di,offset Lldp
	mov	ah,0x41
	mov	bx,0x55AA
	int	0x13
	jc	Lr_chs		/* carry -> error */
	cmp	bx,0xAA55
	jne	Lr_chs		/* magic -> command known? */
	and	cl,1
	jne	Lr_lba		/* bitmask: supports LBA? */
Lr_chs:	inc	di
	inc	di

Lr_lba:	/* start the first stage boot loader code */
	mov	ax,SA_LINKSEG	/* libsa constant */
	mov	fs,ax		/* for magic check and booting */
	push	ax		/* for load address and incrementing */
	mov	ax,0x0010
	mov	[0],eax		/* high 16 bits have already been cleared */
	/* initialize counters */
	mov	si,offset blktbl
	xor	cx,cx
	mov	cl,[blkcnt]

	/* --- main loop --- */
Lmlp1:	lodsb
	/*
	 * al contains bitmasked:
	 * aaabbbbb
	 * -> a=number of bytes-1 that follow	(-> dl)
	 * -> b=number of sectors-1 to load	(-> al)
	 * si, cx contain what is to be processed
	 */

	/* decode */
	mov	dl,al
	shr	dl,5
	and	ax,31		/* sectors */
	inc	ax
	inc	dx
	mov	[2],al
	pop	bx
	mov	es,bx		/* load segment */
	mov	[6],bx
	shl	ax,(9-4)	/* number of sectors, times their size,
				   divided by size of one paragraph */
	add	bx,ax		/* increment load addr. segment accordingly */
	push	bx		/* and save for next round */
	push	cx		/* save blkcnt */
	push	di		/* loader offset */
	mov	di,8
	xor	ebp,ebp
	mov	[di],ebp	/* zero out the LBA sector number */
	mov	[di+4],ebp
	mov	[di-4],bp	/* load offset within segment, always zero */
Lmlp2:	lodsb			/* copy over as many bytes as needed */
	mov	[di],al
	inc	di		/* stos? segment override forbidden */
	dec	dl
	jne	Lmlp2		/* faster/easier than loop */
	pop	di
	/*
	 * at this point, we have the following:
	 * si points to the _next_ entry to load
	 * on top of stack, there is the number of
	 *    entries to load, including the current one
	 * the _next_ load address is below that on the stack
	 * the LBA parameter block is filled in.
	 * ES is set up to the load segment (offset = const. 0000)
	 */

	/* call subroutine that does the actual loading */
	mov	dl,[Ldrv]
	call	[di]
	/* progress meter */
	mov	ax,0x0E2E
	mov	bx,7
	int	0x10			/* output a dot */
	/* --- main loop --- */
	pop	cx
	dec	cx
	jne	Lmlp1

	/* finally /boot is loaded. compare (E)LFmagic (CX=zero!)*/
	push	fs			/* SA_LINKSEG; old 4000, new 4012 */
	push	cx			/* offset (used to be 120, now 0) */
	fs mov	eax,[0x50]		/* some "random" ASCII string, ie */
	cmp	eax,0x696D4F03		/* boot v2.62 magic */
	mov	si,offset Lerr		/* "bad magic" */
	jne	Lbarf			/* no it isn't, barf out */
	/* new line, for the fine look */
	mov	si,offset Lcrlf
	call	Lotxt
	/* set up and jump into /boot */
	mov	dl,[Ldrv]
	lret

	/* If something went wrong, but we didn't yet try the subrouting
	 * to cope with broken BIOSes and Soekris, redo from start.
	 */
Lbarf:	call	Lotxt			/* something went wrong */
	mov	ax,offset LsBRK		/* offset of broken-BIOS load sub */
	xchg	ax,[di]			/* if di is still Lldp, God help */
	cmp	ax,[di]			/* broken BIOS sub already tried? */
	jne	Lr_lba
	xor	ah,ah
	int	0x16
	jmp	0xF000,0xFFF0

	/* CHS boot routine */
LsCHS:	push	dx
	/* LBA -> CHS */
	mov	edx,[8]
	mov	ax,dx
	shr	edx,16
	div	word ptr [bpbspt]
	inc	dx			/* quotient AX, remainder DX */
	push	dx			/* sector */
	xor	dx,dx
	div	word ptr [bpbtpc]
	pop	cx			/* cylinder AX, head DX */
	shl	ah,6
	xchg	ah,al
	or	cx,ax
	mov	dh,dl
	pop	ax
	mov	dl,al
	/* call the BIOS */
	mov	ah,2
	mov	al,[2]
	xor	bx,bx

	/* called from LBA routine, too */
LsINT:	mov	bp,7			/* number of retries */
LsIN0:	pusha
	int	0x13
	popa
	jnc	Lretn
	dec	bp
	pusha
	mov	si,offset Lldf
	jz	Lbarf
	xor	ax,ax
	int	0x13
	mov	ax,0x0E40		/* say it fails */
	add	ax,bp
	mov	bx,7
	int	0x10
	popa
Lnchk:	cmp	bp,3			/* after some failed LBA, try CHS */
LsBR9:	jne	LsIN0
	mov	di,2+offset Lldp
	jmp	LsIN0

Lerr:	.ascii	"bad magic"
Lretn:	ret
Lldf:	.ascii	" ERR"
Lcrlf:	.asciz	"\r\n"

	/* some broken BIOSes don't allow multi-sector transfers... */
LsBRK:	mov	dh,1
	xchg	dh,[2]			/* number of sectors to load */
LsBR0:	push	dx
	call	LsCHS			/* chain to default CHS loader */
	pop	dx
	dec	dh
	je	Lretn			/* loop one by one over the sectors */
	mov	ax,es
	add	ax,32			/* size of a sector in paragraphs */
	mov	es,ax
	inc	dword ptr [8]
	jmp	LsBR0
	/* --- end of code --- */

blktbl:	/* free space for block table */

	/* --- end of sector --- */
	. = 0x1FE
blkend:	.word	0xAA55
@


1.9
log
@kludge around more, making use of an option of mkisofs to
write the information table into the boot image itself;
idea seen at various other ISO boot places.

Now it comes until the switch into protected mode on my
machine. This is where I'll stop for now.
@
text
@d1 5
a5 4
/* $MirBSD: pbr.S,v 1.8 2003/12/19 16:51:30 tg Exp $
 *-
 * Copyright (c) 2003
 *	Thorsten Glaser <x86@@ePost.de>, for the MirOS Project
d7 6
a12 6
 * Subject to these terms, everybody who obtained a copy of this work
 * is hereby permitted to deal in the work without restriction inclu-
 * ding without limitation the rights to use, distribute, sell, modi-
 * fy, publically perform, give away, merge or sublicense it provided
 * this notice is kept and the authors and contributors are given due
 * credit in derivates or accompanying documents.
d14 11
a24 5
 * This work is provided "as is" with no explicit or implicit warran-
 * ties whatsoever to the maximum extend permitted by applicable law;
 * in no event may an author or contributor be held liable for damage
 * that is, directly or indirectly, caused by the work, even if advi-
 * sed of the possibility of such damage.
@


1.8
log
@current bootstrap tree:
 * debugging is on for (current, to be replaced) srt0.S
 * /boot works
 * dosboot.com goes away, /boot will be a MS-DOS .COM compatible
   programme soon enough, and so nobody tries to load a kernel
   from msdosfs right now (though that might come as well)
 * booting from floppy in bochs works (tested)
 * pbr_ffs is incompatible with prior versions, because /boot
   now comes as binary, not ELF32 file
@
text
@d1 1
a1 1
/* $MirBSD: pbr.S,v 1.7 2003/12/18 22:26:20 tg Exp $
d202 2
a203 2
	fs mov	eax,[0x10]		/* some "random" ASCII string, ie */
	cmp	eax,0x696D4F03		/* boot v2.60 magic */
@


1.7
log
@first attempt at breaking the boot loader code :-)
Unluckily I can't fix it right now, so don't update
and wait for a great rewrite of some code :)
@
text
@d1 1
a1 1
/* $MirBSD: pbr.S,v 1.6 2003/12/01 18:49:44 tg Exp $
d130 2
a131 4
		/* don't use the << operator, it's broken! */
	mov	ax,SA_LOADSEG	/* libsa constant */
	mov	fs,ax		/* for ELFmagic check and booting */
	mov	ax,SA_LINKSEG	/* SA_LOADSEG + (sizeof elfheader >> 4) */
d200 1
a200 1
	push	fs			/* SA_LOADSEG, usually 4000 */
d202 2
a203 3
	fs mov	eax,[11]		/* two bytes of the JMP 120 */
	fs mov	ax,[2]			/* last two bytes of "\x7FELF" */
	cmp	eax,0x10E9464C
@


1.6
log
@The boot loader seems to have been broken since the MirOS #7 releases.
Apologies to Jannis Konrad for blaming on his (nevertheless
totally broken) hardware. Thanks to Bill Gates and his company
for writing DEBUG.COM which allowed me to get into my system
again, since it apparently can't boot our /boot from CD-ROM
(this is still not fixed, but it's fine in bochs, and my box
 doesn't even get as far as the Lsrt0 message,
	MirOS boot(8) 2.54 srt0 initializing
 when booting from CD, so it must be broke too).

While here, rewrite several chunks of the code, and extend the
size of the argv[] array for boot commands to make echo work.

Tested:
 bochs CD passed
 mybox CD failed
 mybox HD passed
 mybox MS-DOS passed
@
text
@d1 1
a1 1
/* $MirBSD: licence.template,v 1.7 2003/12/01 16:18:24 tg Exp $
d133 1
@


1.5
log
@woohoo, mirabile learns gcc inline assembly :-)
well, sort of. it sucks, but there isn't a way around it.
as bonus, /usr/mdec/boot grows a Kibibyte or so larger, but
should be faster (as if that mattered...)

bump version, clean up code (including indenting), sync fdisk
@
text
@d1 1
a1 1
/* $MirBSD: pbr.S,v 1.4 2003/11/17 16:49:59 tg Exp $
d3 2
a4 3
 * Copyright (c) 2003 Thorsten Glaser <x86@@ePost.de> for the MirOS Project
 * Derived from the original OpenBSD first stage boot loader code
 * written by (c) 1997 Michael Shalayeff, Tobias Weingartner
d12 1
d19 3
d234 1
a234 1
	inc	dx			/* quotient AX, rem DX */
@


1.4
log
@I knew I would break it.
Have installboot know its version, while here.
@
text
@d1 1
a1 1
/* $MirBSD: pbr.S,v 1.3 2003/11/17 13:58:00 tg Exp $
d28 4
a31 1
	.globl	blkcnt		/** block count in hint table */
a32 1
	.globl	bpbspt		/** used to convert LBA -> CHS */
a33 1
	.globl	bpbtpc		/** used to convert LBA -> CHS */
d35 2
d44 1
d52 1
d59 3
a61 2
bpbspt:	.word	18		/* sectors per FAT */
bpbtpc:	.word	2		/* sectors per track */
d73 1
d76 1
d91 1
d106 1
a106 1
	lret			/* should read retf */
d198 2
a199 2
	push	fs			/* SA_LOADSEG */
	push	cx			/* offset (used to be 120) */
d289 3
a291 3
	.globl	blktbl			/** hint table start */
	.type	blktbl, @@function
blktbl:
@


1.3
log
@pbr_ffs 2.51 is NOT compatible with boot <2.51 any more
this is by design
the new one checks the ELF and jump 0x120 magic, and
saves a few :) bytes
@
text
@d1 1
a1 1
/* $MirBSD: pbr.S,v 1.2 2003/11/14 23:37:26 tg Exp $
d126 2
a127 1
	mov	cx,[blkcnt]
d197 1
a197 1
	mov	si,offset Lretn
d261 1
d263 1
a263 2
Lretn:	ret
	.asciz	"\r\n"
@


1.2
log
@yay. I am your god. (Or root. What is difference?)

Tested:
 * boot cd0, kernel cd0:gzip'd
 * boot cd0, kernel cd0:stripped
 * boot cd0, kernel cd0:stripped and gzip'd
 * boot cd0, kernel fd1:floppyM34.fs
 * boot fd0, kernel fd1:floppyM34.fs
 * boot hd0, kernel fd1:floppyM34.fs
 * boot cd0, kernel hd0:floppyM34.fs
 * boot hd0, kernel hd0:floppyM34.fs

All tests have been passed in bochs, except the one below.
No tests at all have been performed on real hardware.

Tested and failed:
 * boot cd0, kernel cd0:plain bsd.rd

NM: fixed some minor bits in files touched, too
@
text
@d1 1
a1 1
/* $MirBSD: pbr.S,v 1.1 2003/10/30 12:49:44 tg Exp $
d4 2
a5 3
 * Derived from ideas by and meant to be compatible with the
 *  original OpenBSD first stage boot loader code written by
 * Copyright (c) 1997 Michael Shalayeff, Tobias Weingartner
d28 8
a35 1
Lpbl:	/* Parameter block for LBA, gets constructed here:
d40 1
a40 1
	 */
d48 3
a50 1
	.byte	0		/* FATs per volume */
d54 13
a66 12
	.globl	blkcnt		/** block count in hint table */
	.type	blkcnt, @@function
	.globl	bpbspt		/** used to convert LBA -> CHS */
	.type	bpbspt, @@function
	.globl	bpbtpc		/** used to convert LBA -> CHS */
	.type	bpbtpc, @@function
#define	BLKCNT	(blkend - blktbl)	/** how much space do we have? */
blkcnt:	.word	BLKCNT		/* sectors per FAT */
bpbspt:	.word	18		/* sectors per track */
bpbtpc:	.word	2		/* tracks per cylinder */
	.long	16		/* hidden sectors */
Lbmgc:	.long	BOOTMAGIC	/* sectors per drive (FAT16B) */
d73 10
a82 9
Lotxt:	lodsb
	or	al,al
	je	Lotxt1
	mov	ah,0x0E
	mov	bx,7
	int	0x10
	jmp	Lotxt
Lotxt1:	ret
	. = 15 + Lotxt		/* ensure it fits exactly */
d119 2
a120 2
	mov	ax,(LOADADDR / 16)	/* libsa constant */
	mov	fs,ax		/* for ELFmagic check */
d123 1
a123 1
	mov	[Lpbl],eax	/* high 16 bits have already been cleared */
d144 1
a144 1
	mov	[2+Lpbl],al
d147 1
a147 1
	mov	[6+Lpbl],bx
d154 1
a154 1
	mov	di,8+offset Lpbl
d187 6
a192 4
	/* finally /boot is loaded. compare (E)LFmagic */
	mov	si,2
	fs lodsw
	cmp	ax,0x464C		/* last two bytes of "\x7FELF" */
d196 1
a196 1
	mov	si,offset Lcrlf
a198 7
#if 0
	/* obsolete: MirOS boot <=2.30 */
	mov	bp,[Ldrv]		/* byte after Ldrv is always zero */
	push	ebp			/* as well as the high half of ebp */
	push	dword ptr [Lbmgc]	/* boot magic */
#else
	/* new: MirOS boot =>2.50 */
d200 1
a200 2
#endif
	jmp	(LINKADDR / 16),0
d217 1
a217 1
	mov	edx,[8+Lpbl]
d234 1
a234 1
	mov	al,[2+Lpbl]
a258 7
LsLBA:	push	si			/* save blktbl offset */
	mov	ah,0x42			/* BIOS routine loadLBA */
	mov	si,offset Lpbl
	call	LsINT			/* call BIOS subroutine */
	pop	si
Lretn:	ret

d261 2
a262 1
Lcrlf:	.asciz	"\r\n"
d266 1
a266 1
	xchg	dh,[2+Lpbl]		/* number of sectors to load */
d275 1
a275 1
	inc	dword ptr [8+Lpbl]
@


1.1
log
@move the files around a bit, for a cleaner infrastructure
(XXX why doesn't
 XXX	make show=PROG
 XXX or	make show=CPPFLAGS
 XXX work in these subdirs? it works in bin/cat e.g.)
@
text
@d1 1
a1 1
/* $MirBSD: licence.template,v 1.6 2003/10/22 08:19:40 tg Exp $
d187 2
d192 4
@

