head	1.2;
access;
symbols
	tg-mergetmp-mirosx-1:1.2
	tg-mergefixes-1-branch:1.2.0.8
	tg-mergefixes-1-base:1.2
	MIROS_X:1.2.0.6
	MIROS_X_BASE:1.2
	tg-mergetmp-3:1.2
	MIRBSD_XP_MIRPPC:1.2.0.4
	MIRBSD_XP_SPARC_BASE:1.2
	MIRBSD_XP_SPARC:1.2.0.2
	MIRBSD_7quater:1.1.1.3
	cvs-200405160640:1.1.1.4
	cvs-200401271800:1.1.1.3
	cvs-200401261630:1.1.1.3
	cvs-200401021645:1.1.1.3
	MIRBSD_7_ALPHA:1.1.1.3.0.6
	MIRBSD_7:1.1.1.3.0.4
	cvs-200312222040:1.1.1.3
	cvs-200312171912:1.1.1.3
	MIRBSD_7ter:1.1.1.3
	MIRBSD_7_DEV:1.1.1.3.0.2
	cvs-200310020700:1.1.1.3
	cvs-200309271030:1.1.1.3
	cvs-200309261655:1.1.1.3
	cvs-200309251530:1.1.1.3
	cvs-200309192030:1.1.1.3
	cvs-200309181930:1.1.1.3
	cvs-200309131952:1.1.1.3
	cvs-200308302005:1.1.1.3
	cvs-200308221505:1.1.1.3
	cvs-200308171200:1.1.1.3
	ctm-3496:1.1.1.3
	ctm-3449:1.1.1.2
	ctm-3437:1.1.1.2
	cvs-200307191805:1.1.1.2
	ctm-3425:1.1.1.2
	cvs-200307091500:1.1.1.2
	cvs-200307072125:1.1.1.2
	ctm-3389:1.1.1.2
	cvs-200307021520:1.1.1.2
	cvs-200306291430:1.1.1.2
	ctm-3341:1.1.1.2
	MIRBSD_5:1.1.1.2
	cvs-200306082100:1.1.1.2
	ctm-3316:1.1.1.2
	ctm-3272:1.1.1.1
	ctm-3264:1.1.1.1
	cvs-200305071630:1.1.1.1
	ctm-3255:1.1.1.1
	ctm-3229:1.1.1.1
	MIRBSD_4:1.1.1.1
	ctm-3203:1.1.1.1
	cvs-20030410-1130:1.1.1.1
	ctm-3155:1.1.1.1
	ctm-3132:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@ * @;


1.2
date	2004.07.02.16.52.32;	author tg;	state Stab;
branches;
next	1.1;

1.1
date	2003.03.22.17.49.37;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.03.22.17.49.37;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2003.06.05.17.34.32;	author tg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2003.08.11.18.34.22;	author tg;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2004.05.16.08.42.47;	author tg;	state Exp;
branches;
next	;


desc
@@


1.2
log
@actually use the leap second and TAI conversion routines in the kernel
XXX sparc untested
XXX I hope I don't have off-by-ones or off-by-1900s or off-by-1970s left
@
text
@/* $MirBSD$ */
/* $OpenBSD: time.c,v 1.15 2004/03/09 19:12:13 tom Exp $	*/

/*
 * Copyright (c) 1997 Michael Shalayeff
 * Copyright (c) 1997 Tobias Weingartner
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 */

#include <sys/time.h>
#include <machine/biosvar.h>
#include <machine/pio.h>
#include "libsa.h"
#include "biosdev.h"

#define isleap(y) (((((y) % 4) == 0)   && (((y) % 100) != 0)) \
		|| ((((y) % 400) == 0) && (((y) % 4000) != 0)))

/*
 * Convert from bcd (packed) to int
 */
static __inline u_int8_t
bcdtoint(u_int8_t c)
{

	return ((c & 0xf0) / 8) * 5 + (c & 0x0f);
}

/*
 * Quick compute of time in seconds since the Epoch
 */
const u_short monthcount[] = {
	0, 0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334, 365
};

static __inline time_t
compute(int year, u_int8_t month, u_int8_t day, u_int8_t hour,
    u_int8_t min, u_int8_t sec)
{
	/* Number of days per month */
	register time_t tt;

	/* Compute days */
	tt = (year - 1970) * 365 + monthcount[month] + day;

	/* Compute for leap year */
	for (month <= 2 ? year-- : 0; year >= 1970; year--)
		if (isleap(year))
			tt++;

	/* Plus the time */
	tt = sec + 60 * (min + 60 * (tt * 24 + hour));

	return tt;
}

static int
bios_time_date(int f, u_int8_t *b)
{
	__asm __volatile(DOINT(0x1a) "\n\t"
	    "setc %b0\n\t"
	    "movb %%ch, 0(%2)\n\t"
	    "movb %%cl, 1(%2)\n\t"
	    "movb %%dh, 2(%2)\n\t"
	    "movb %%dl, 3(%2)\n\t"
	    : "=a" (f)
	    : "0" (f), "p" (b) : "%ecx", "%edx", "cc");
	if (f & 0xff)
		return -1;
	else {
		b[0] = bcdtoint(b[0]);
		b[1] = bcdtoint(b[1]);
		b[2] = bcdtoint(b[2]);
		b[3] = bcdtoint(b[3]);
		return 0;
	}
}

static __inline int
biosdate(u_int8_t *b)
{
	return bios_time_date(4 << 8, b);
}

static __inline int
biostime(u_int8_t *b)
{
	return bios_time_date(2 << 8, b);
}

/*
 * Return time since epoch
 */
time_t
getsecs(void)
{
	u_int8_t timebuf[4], datebuf[4];

	/* Query BIOS for time & date */
	if (!biostime(timebuf) && !biosdate(datebuf)) {
#ifdef notdef
		int dst;

		dst = timebuf[3];
#endif
		/* Convert to seconds since Epoch */
		return (compute(datebuf[0] * 100 + datebuf[1],
		    datebuf[2], datebuf[3],
		    timebuf[0], timebuf[1], timebuf[2]));
	} else
		errno = EIO;

	return 1;
}

u_int
sleep(u_int i)
{
	register time_t t;

	/*
	 * Loop for the requested number of seconds, polling BIOS,
	 * so that it may handle interrupts.
	 */
	for (t = getsecs() + i; getsecs() < t; cnischar());

	return 0;
}
@


1.1
log
@Initial revision
@
text
@d1 2
a2 1
/*	$OpenBSD: time.c,v 1.12 1998/05/30 01:53:44 mickey Exp $	*/
a16 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by Tobias Weingartner.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
d18 2
a19 2
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR 
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
d38 2
a39 1
#define isleap(y) ((((y) % 4) == 0 && ((y) % 100) != 0) || ((y) % 400) == 0)
d45 1
a45 2
bcdtoint(c)
	register u_int8_t c;
d55 1
a55 2
	0, 0, 31, 59, 90, 120, 151, 181,
	212, 243, 273, 304, 334, 365
d57 1
d59 2
a60 3
compute(year, month, day, hour, min, sec)
	int year;
	u_int8_t month, day, hour, min, sec;
d69 2
a70 2
	for(month <= 2? year--:0;year >= 1970;year--)
		if(isleap(year))
d80 1
a80 3
bios_time_date(f, b)
	int f;
	register u_int8_t *b;
d83 7
a89 7
		       "setc %b0\n\t"
		       "movb %%ch, 0(%2)\n\t"
		       "movb %%cl, 1(%2)\n\t"
		       "movb %%dh, 2(%2)\n\t"
		       "movb %%dl, 3(%2)\n\t"
		       : "=a" (f)
		       : "0" (f), "p" (b) : "%ecx", "%edx", "cc");
d102 1
a102 2
biosdate(b)
	register u_int8_t *b;
d108 1
a108 2
biostime(b)
	register u_int8_t *b;
d122 1
a122 1
	if(!biostime(timebuf) && !biosdate(datebuf)) {
d129 3
a131 3
		return compute(datebuf[0] * 100 + datebuf[1],
			       datebuf[2], datebuf[3],
			       timebuf[0], timebuf[1], timebuf[2]);
d135 1
a135 1
	return(1);
d139 1
a139 2
sleep(i)
	u_int i;
d143 4
a146 2
	/* loop for that number of seconds, polling BIOS,
	   so that it may handle interrupts */
@


1.1.1.1
log
@Import OpenBSD 3.3 source repository from CTM 3132 the first time
This opens an OpenBSD-mirabile (aka MirBSD) repository.

### MirBSD is:
# Copyright (c) 1982-2003 by Thorsten "mirabile" Glaser <x86@@ePost.de>
# Copyright © 1968-2003  The authors of And contributors to UNIX®, the
#       C Language, BSD/Berkeley Unix; 386BSD, NetBSD 1.1 and OpenBSD.
#
# Anyone who obtained a copy of this work is hereby permitted to freely use,
# distribute, modify, merge, sublicence, give away or sell it as long as the
# authors are given due credit and the following notice is retained:
#
# This work is provided "as is", with no explicit or implicit warranty what-
# soever. Use it only at your own risk. In no event may an author or contri-
# butor be held liable for any damage, directly or indirectly, that origina-
# ted through or is caused by creation or modification of this work.

MirBSD is my private tree. MirBSD does not differ very much from OpenBSD
and intentionally tracks OpenBSD. That's why it _is_ OpenBSD, just not the
official one. It's like with DarrenBSD.

At time of this writing, no advertising for MirBSD must be done,
because the advertising clause has not yet been sorted out.

http://templeofhate.com/tglaser/MirBSD/index.php
@
text
@@


1.1.1.2
log
@Import latest OpenBSD CVS tree by CTM in order
to sync the base system and ports tree with Them.

This includes the recent licence changes as well - by
importing the changed base and re-applying the diffs
(with cvs up -j -j) they are inherited, and we're not
bound to the removed clauses any longer.
@
text
@d1 1
a1 1
/*	$OpenBSD: time.c,v 1.13 2003/06/03 20:22:12 mickey Exp $	*/
d16 5
@


1.1.1.3
log
@Import the complete OpenBSD source tree (base system)
as of CTM delta 3496 (roughly 1200 UTC today) into the
vendor branch.
Attention: this is a big update. Don't even try to
build this system, OpenBSD 3.4-beta, yet on your own.
@
text
@d1 1
a1 1
/*	$OpenBSD: time.c,v 1.14 2003/08/11 06:23:09 deraadt Exp $	*/
d43 2
a44 1
bcdtoint(u_int8_t c)
a56 1

d58 3
a60 2
compute(int year, u_int8_t month, u_int8_t day, u_int8_t hour,
    u_int8_t min, u_int8_t sec)
d80 3
a82 1
bios_time_date(int f, u_int8_t *b)
d104 2
a105 1
biosdate(u_int8_t *b)
d111 2
a112 1
biostime(u_int8_t *b)
d143 2
a144 1
sleep(u_int i)
@


1.1.1.4
log
@large-scale import of OpenBSD 3.5-current source base including many fixes
note: from now, we will not be binary compatible with OpenBSD apps any
longer (due to syscall numbering differences); both an OpenBSD compat and
a conversion tool for old MirOS #7 apps will be delivered later.

The src/ tree is locked from now.
@
text
@d1 1
a1 1
/*	$OpenBSD: time.c,v 1.15 2004/03/09 19:12:13 tom Exp $	*/
d53 2
a54 1
	0, 0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334, 365
d68 2
a69 2
	for (month <= 2 ? year-- : 0; year >= 1970; year--)
		if (isleap(year))
d82 7
a88 7
	    "setc %b0\n\t"
	    "movb %%ch, 0(%2)\n\t"
	    "movb %%cl, 1(%2)\n\t"
	    "movb %%dh, 2(%2)\n\t"
	    "movb %%dl, 3(%2)\n\t"
	    : "=a" (f)
	    : "0" (f), "p" (b) : "%ecx", "%edx", "cc");
d121 1
a121 1
	if (!biostime(timebuf) && !biosdate(datebuf)) {
d128 3
a130 3
		return (compute(datebuf[0] * 100 + datebuf[1],
		    datebuf[2], datebuf[3],
		    timebuf[0], timebuf[1], timebuf[2]));
d134 1
a134 1
	return 1;
d142 2
a143 4
	/*
	 * Loop for the requested number of seconds, polling BIOS,
	 * so that it may handle interrupts.
	 */
@


