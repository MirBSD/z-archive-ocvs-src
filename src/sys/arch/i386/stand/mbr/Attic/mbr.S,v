head	1.8;
access;
symbols
	cvs-200405160640:1.1.1.5
	cvs-200401271800:1.1.1.4
	cvs-200401261630:1.1.1.4
	cvs-200401021645:1.1.1.3
	cvs-200312222040:1.1.1.3
	cvs-200312171912:1.1.1.3
	cvs-200310020700:1.1.1.3
	cvs-200309271030:1.1.1.3
	cvs-200309261655:1.1.1.3
	cvs-200309251530:1.1.1.3
	cvs-200309192030:1.1.1.3
	cvs-200309181930:1.1.1.3
	cvs-200309131952:1.1.1.3
	cvs-200308302005:1.1.1.3
	cvs-200308221505:1.1.1.3
	cvs-200308171200:1.1.1.3
	ctm-3496:1.1.1.3
	ctm-3449:1.1.1.3
	ctm-3437:1.1.1.3
	cvs-200307191805:1.1.1.3
	ctm-3425:1.1.1.3
	cvs-200307091500:1.1.1.3
	cvs-200307072125:1.1.1.3
	ctm-3389:1.1.1.3
	cvs-200307021520:1.1.1.3
	cvs-200306291430:1.1.1.3
	ctm-3341:1.1.1.3
	cvs-200306082100:1.1.1.3
	ctm-3316:1.1.1.3
	ctm-3272:1.1.1.2
	ctm-3264:1.1.1.2
	cvs-200305071630:1.1.1.2
	ctm-3255:1.1.1.2
	ctm-3229:1.1.1.2
	MIRBSD_4:1.2
	ctm-3203:1.1.1.1
	cvs-20030410-1130:1.1.1.1
	ctm-3155:1.1.1.1
	ctm-3132:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@# @;


1.8
date	2004.02.19.19.11.52;	author tg;	state dead;
branches;
next	1.7;

1.7
date	2003.12.01.18.49.41;	author tg;	state Exp;
branches;
next	1.6;

1.6
date	2003.11.25.17.54.01;	author tg;	state Exp;
branches;
next	1.5;

1.5
date	2003.10.30.13.18.45;	author tg;	state Exp;
branches;
next	1.4;

1.4
date	2003.10.30.12.49.40;	author tg;	state Exp;
branches;
next	1.3;

1.3
date	2003.05.23.13.50.43;	author tg;	state dead;
branches;
next	1.2;

1.2
date	2003.03.23.21.52.18;	author tg;	state Exp;
branches;
next	1.1;

1.1
date	2003.03.22.17.49.37;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.03.22.17.49.37;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2003.04.24.09.05.39;	author tg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2003.06.05.17.34.33;	author tg;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2004.01.26.18.39.46;	author tg;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2004.05.16.08.42.55;	author tg;	state Exp;
branches;
next	;


desc
@@


1.8
log
@switch to new-style bootsystem MBR
except for sbin/bootsys/i386/mbrldr/mbr.S which is to be committed later
@
text
@/* $MirBSD: mbr.S,v 1.7 2003/12/01 18:49:41 tg Exp $
 *-
 * Copyright (c) 2003
 *	Thorsten Glaser <x86@@ePost.de>, for the MirOS Project
 *
 * Subject to these terms, everybody who obtained a copy of this work
 * is hereby permitted to deal in the work without restriction inclu-
 * ding without limitation the rights to use, distribute, sell, modi-
 * fy, publically perform, give away, merge or sublicense it provided
 * this notice is kept and the authors and contributors are given due
 * credit in derivates or accompanying documents.
 *
 * This work is provided "as is" with no explicit or implicit warran-
 * ties whatsoever to the maximum extend permitted by applicable law;
 * in no event may an author or contributor be held liable for damage
 * that is, directly or indirectly, caused by the work, even if advi-
 * sed of the possibility of such damage.
 *-
 * Fully LBA and CHS capable Master Boot Record with enough space for
 * the partition table and the Microsoft NT® disc ID; including boot-
 * manager capable of booting the four primary partitions or from the
 * first floppy device, with a 10 second time-out going off on a key.
 */

	.intel_syntax noprefix
	.text
	.code16
	.globl	_start
_start:	xor	eax,eax
	push	eax		/* assume a sane stack of 4 bytes */
	popfd			/* clear eflags and interrupts */
	add	ax,0x07A0
	mov	ss,ax		/* set up stack and other segments */
	mov	sp,0x1000
	mov	ds,ax
	mov	es,ax
	push	ax
	push	offset Lrun
	mov	si,0x0200	/* 07A0:0200 = 0000:7C00 */
	xor	di,di		/* 07A0:0000 = 0000:7A00 */
	mov	cx,0x0100
	rep	movsw		/* relocate myself */
	lret			/* documentation of gas wrong here */
	/* we are relocated now */
Lrun:	/*
	 * a) Output "Hello" Text
	 * b) if BOOTMANAGER
	 *	Output "Choose" Text
	 *	Handle input (0,1,2,3,RET,ESC)
	 *    else
	 *	Fake input RET
	 *    endif
	 * c) load sector (RET = 0x80-Partition ("active"),
	 *	ESC = Floppy, 0-3 = Partition)
	 * d) jump to sector
	 */
	mov	si,offset LtHelo
	call	Lotxt
#ifdef	BOOTMANAGER
	xor	ax,ax		/* read CMOS clock ticks since midnight */
	int	0x1A
	mov	edi,183		/* 10 seconds rounded up one tick */
	add	di,dx
	adc	cl,0		/* carry over */
	shl	ecx,16
	add	edi,ecx
Liloop:	mov	ah,1		/* check if key pressed */
	int	0x16
	jnz	Lkeyp		/* key was pressed */
	xor	ax,ax
	int	0x1A
	shl	ecx,16
	mov	cx,dx		/* current clock tick */
	or	al,al		/* past midnight? */
	jz	Lnwrap
	add	ecx,1573040	/* according to Ralf Brown Interrupt List */
Lnwrap:	cmp	ecx,edi		/* time is over? */
	jbe	Liloop		/* not yet */
	mov	al,13		/* assume user pressed RETURN (default) */
	jmp	Lchose
Lkeyp:	xor	ah,ah		/* get pressed key */
	int	0x16
	cmp	al,13		/* RETURN? */
	je	Lchose
	cmp	al,27		/* ESCAPE? */
	je	Lchose
	sub	al,0x30
	cmp	al,3		/* '0' .. '3' ? */
	ja	Lkeyp		/* if invalid key, stop 10-second timeout */
Lchose:	/* al=13,27,0,1,2,3 */
#else
	mov	al,13		/* fake a RETURN keypress */
#endif
	cmp	al,27
	je	Lflopp		/* ESC -> floppy */
	cmp	al,13
	jne	Lpart		/* 0..3 -> partition chosen */
	xor	al,al
	mov	bx,offset ptbl
Lcklp:	cmp	byte ptr [bx],0x80
	je	Lpart		/* loop over partition table, search */
	inc	ax		/*              for active partition */
	add	bl,0x10		/* sizeof ptbl-ent */
	cmp	al,4
	jb	Lcklp		/* if none found, fail */
Lbootf:	mov	si,offset LtFail
	call	Lotxt
	xor	ah,ah		/* wait for keypress */
	int	0x16
	jmp	0xF000,0xFFF0	/* reboot */
Lotxt:	lodsb
	or	al,al		/* '\0' is end of string */
	je	Ltxout
	mov	ah,0x0E		/* tty a character */
	mov	bx,7		/* light grey on black; page 0 */
	int	0x10
	jmp	Lotxt
Ltxout:	ret
Lpart:	mov	bx,offset ptbl
	shl	al,4		/* log_2 sizeof ptbl-ent */
	add	bl,al		/* can't overflow */
	push	bx
	/* Test for LBA support */
	mov	ah,0x41
	mov	bx,0x55AA
	mov	dl,0x80
	int	0x13
	jc	L_chs		/* carry -> error */
	cmp	bx,0xAA55
	jne	L_chs		/* magic -> command known? */
	and	cl,1
	je	L_chs		/* bitmask: supports LBA? */
L_lba:	pop	bx
	/* Load the boot structure (LBA) */
	mov	si,offset lbapbl
	mov	eax,[bx+8]	/* offset on disc */
	mov	[blknum],eax
	mov	ax,[bx+2]	/* save CHS values, in case */
	mov	[savecx],ax	/* the LBA boot fails twice */
	mov	dx,[bx]
	mov	dl,0x80
	mov	[savedx],dx
	mov	ah,0x42
	jmp	Lboot_loop
L_chs:	pop	bx
	/* Load the boot structure (CHS) */
	mov	cx,[bx+2]
	mov	dx,[bx]
	mov	dl,0x80
	jmp	Lboot_chs
Lflopp:	mov	cx,1
	xor	dx,dx
Lboot_chs:
	mov	bx,offset bsec
	mov	ax,0x0201
	jmp	Lboot_loop
LtHelo:	.ascii	"MirOS MBR [" __BOOT_VER "]"
#ifdef	BOOTMANAGER
	.ascii	" - 0..3: boot primary part.\r\n"
	.ascii	"ESC for floppy; RETURN: default partition\r\n"
#endif
	.byte	0		/* terminate the tHelo string */
LtFail:	.ascii	"Failed!"
	/* fall through */
LtCRLF:	.asciz	"\r\n"
Lboot_loop:
	xor	bp,bp
Lblp1:	pusha
	mov	ax,0x0E2E	/* print a dot */
	mov	bx,7
	int	0x10
	popa
	pusha
	int	0x13		/* try to read the PBR/bootsector */
	popa
	jc	Lblp2
	mov	si,offset LtCRLF
	call	Lotxt		/* print '\n' and jump into PBR */
	jmp	0,0x7C00	/* offset flat bsec */
Lblp2:	pusha
	xor	ax,ax		/* reset the drive */
	int	0x13
	popa
	inc	bp
	cmp	bp,2		/* second time it failed? */
	jne	Lblp3
	xor	di,di
	cmp	[savedx],di	/* if so, check if we were LBA */
	je	Lblp3
	mov	cx,[savecx]	/* if so, fall back to CHS */
	mov	dx,[savedx]
	mov	bx,offset bsec
	mov	ax,0x0201
Lblp3:	cmp	bp,16		/* 16 retries should be enough for everyone :) */
	jb	Lblp1
	jmp	Lbootf		/* failed */
lbapbl:	/* Parameter block for LBA */
	.word	0x0010		/* length, reserved */
	.word	0x0001		/* num. of sectors */
	.long	0x00007C00	/* transfer buffer */
blknum:	.long	0,0		/* LBA block number */
savecx:	.word	0
savedx:	.word	0

	/* Trailer: partition table, signature */
#if 0
	. = 0x01B8
	.long	0		/* device ID/magic */
	.word	0		/* free/reserved */
#else
	/* In fact, we have 6 bytes of '00h' before
	 * (on the disc), and ignore/overwrite what
	 * Microsoft NT® writes here (on the disc),
	 * so we can safely skip till here:
	 */
	. = 0x01BE
#endif
ptbl:	.long	0,0,0,0
	.long	0,0,0,0
	.long	0,0,0,0
	.long	0,0,0,0
	.word	0xAA55		/* signature */
bsec:	/* 0x0200 is where the new boot sector is loaded */
@


1.7
log
@The boot loader seems to have been broken since the MirOS #7 releases.
Apologies to Jannis Konrad for blaming on his (nevertheless
totally broken) hardware. Thanks to Bill Gates and his company
for writing DEBUG.COM which allowed me to get into my system
again, since it apparently can't boot our /boot from CD-ROM
(this is still not fixed, but it's fine in bochs, and my box
 doesn't even get as far as the Lsrt0 message,
	MirOS boot(8) 2.54 srt0 initializing
 when booting from CD, so it must be broke too).

While here, rewrite several chunks of the code, and extend the
size of the argv[] array for boot commands to make echo work.

Tested:
 bochs CD passed
 mybox CD failed
 mybox HD passed
 mybox MS-DOS passed
@
text
@d1 1
a1 1
/* $MirBSD: licence.template,v 1.7 2003/12/01 16:18:24 tg Exp $
@


1.6
log
@woohoo, mirabile learns gcc inline assembly :-)
well, sort of. it sucks, but there isn't a way around it.
as bonus, /usr/mdec/boot grows a Kibibyte or so larger, but
should be faster (as if that mattered...)

bump version, clean up code (including indenting), sync fdisk
@
text
@d1 1
a1 1
/* $MirBSD: mbr.S,v 1.5 2003/10/30 13:18:45 tg Exp $
d3 2
a4 1
 * Copyright (c) 2003 Thorsten Glaser <x86@@ePost.de> for the MirOS Project
d12 1
d32 1
a32 1
	mov	ax,0x07A0
d37 2
d43 1
a43 1
	jmp	0x07A0,offset Lrun	/* documentation of gas wrong here */
@


1.5
log
@* add (experimental, untested) cdboot programme
* fix swapped thinko, which led to mbr being installed as
  ELF binary, and pbr installed RAW (must be the reverse)
* move version number declare to stand/Makefile.inc
  and bump to 2.30
* mention CDBOOT in boot(8)
* whitespace, etc. cleanup while here
@
text
@d1 1
a1 1
/* $MirBSD: mbr.S,v 1.4 2003/10/30 12:49:40 tg Exp $
d153 1
a153 1
LtHelo:	.ascii	"MirOS boot " __BOOT_VER "\r\n"
d155 3
a157 3
LtBmgr:	.ascii	"ESC boots floppy; RETURN default partition\r\n"
	.asciz	"0..3 choose primary part.\r\n"
#else
a158 1
#endif
@


1.4
log
@move the files around a bit, for a cleaner infrastructure
(XXX why doesn't
 XXX	make show=PROG
 XXX or	make show=CPPFLAGS
 XXX work in these subdirs? it works in bin/cat e.g.)
@
text
@d1 1
a1 1
/* $MirBSD: licence.template,v 1.6 2003/10/22 08:19:40 tg Exp $
d153 1
a153 1
LtHelo:	.ascii	"MirOS boot 2.22\r\n"
@


1.3
log
@move bootblocks (pbr and mbr) into their directories
@
text
@d1 3
a3 19
/*	$OpenBSD: mbr.S,v 1.16 2002/01/08 23:14:51 kjell Exp $	*/

/*
 * Copyright (c) 1997 Michael Shalayeff and Tobias Weingartner
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by Michael Shalayeff.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
d5 16
a20 20
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR 
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 */
/* Copyright (c) 1996 VaX#n8 (vax@@linkdead.paranoia.com)
 * last edited 9 July 1996
 * many thanks to Erich Boleyn (erich@@uruk.org) for putting up with
 * all my questions, and for his work on GRUB
 * You may use this code or fragments thereof in a manner consistent
 * with the other copyrights as long as you retain my pseudonym and
 * this copyright notice in the file.
d23 1
a23 34
	.file	"mbr.S"

#include <machine/asm.h>
#include <assym.h>

#define data32	.byte 0x66
#define addr32	.byte 0x67

#define BOOTBIOS	0x7c0	/* segment where we are loaded */
#define BOOTRELOC	0x7a0	/* segment where to relocate */
#define PARTSZ		16	/* each partition table entry is 16 bytes */

#ifdef DEBUG
#define CHAR_S		'S'	/* started */
#define CHAR_R		'R'	/* relocated */
#define CHAR_L		'L'	/* looking for bootable partition */
#define CHAR_B		'B'	/* loading boot */
#define CHAR_G		'G'	/* jumping to boot */

#define DBGMSG(msg)		\
	movb    $msg, %al;	\
	/* call    Lchr */;	\
	.byte	0xe8;		\
	.word	Lchr - . - 2
#else /* !DEBUG */
#define DBGMSG(msg)
#endif /* !DEBUG */
#define	puts(s)			\
	data32;			\
	movl	$s, %esi;	\
	/* call Lmessage */;	\
	.byte	0xe8;		\
	.word	Lmessage - . - 2

d25 134
a158 63

	.globl	start
start:
	/* Adjust %cs to be right */
	data32
	ljmp 	$BOOTBIOS, $1f
1:
	/* Set up stack */
	movl	%cs, %eax
	cli
	mov	%ax, %ss
	data32
	movl	$0xfffc, %esp
	sti

	/* Set up data segment */
	mov	%ax, %ds
	DBGMSG(CHAR_S)

	/* Relocate 512 bytes so we can load PBS here  */
	data32
	movl	$BOOTRELOC, %eax
	movl	%eax, %es
	data32
	xorl	%esi, %esi
	data32
	xorl	%edi, %edi
	data32
	movl	$0x200, %ecx
	cld
	rep
	movsb

	/* Jump to relocated self */
	data32
	ljmp $BOOTRELOC, $reloc
reloc:
	DBGMSG(CHAR_R)

	/* Set up %es and %ds */
	pushl	%ds
	popl	%es	/* next boot is at the same place as we were loaded */
	pushl	%cs
	popl	%ds	/* and %ds is at the %cs */

#ifdef SERIAL
	/* Initialize the serial port to 9600 baud, 8N1.
	 * Do we need to do this?  Most things at this level
	 * do not know or care (on a PC) where the output is
	 * happening to go.  I think if we are headless,
	 * /boot should figure (as it does now) that out.
	 *
	 * If there is a problem with this stage of the boot
	 * process, connect up a monitor and kbd, and see what
	 * is going on.  Left here for the time being.
	 *
	 * --Toby.
	 */
	xorl	%eax, %eax
	movb	$0xe3, %ax
	data32
	movl	$SERIAL, %dx
	int	$0x14
d160 52
a211 16

	/* bootstrap passes us drive number in %dl
	 *
	 * XXX - This is not always true.  We currently
	 * check if %dl points to a HD, and if not we
	 * complain, and set it to point to the first
	 * HDD.  Note, this is not 100% correct, since
	 * there is a possibility that you boot of of
	 * HD #2, and still get (%dl & 0x80) == 0x00,
	 * these type of systems will loose.  I don't
	 * know of any like this, but I've come to the
	 * conclusion, that if it can exist, it will,
	 * someplace in the PC world.  If anyone knows
	 * how to fix this, speak up!
	 *
	 * Toby - Thu Jul 31 21:01:00 CDT 1997
d213 1
a213 163
	testb	$0x80, %dl
	jnz	1f

	/* MBR on floppy or old BIOS
	 * Note: MBR (this code) should never
	 * be on a floppy.  It does not belong
	 * there, so %dl should never be 0x00.
	 *
	 * Here we simply complain (should we?),
	 * and then hardcode the boot drive to
	 * 0x80.
	 */
	puts(fdmbr)

	/* If we are passed bogus data, set it to HD #1.
	 * We should load the value from a hard coded
	 * location in this sector.  Maybe I'll write
	 * that next, since my machines seem to be one
	 * of the weird ones...
	 */
	movb	$0x80, %dl

	/* Do we need to check our signature?  The BIOS will
	 * check it for us, I doubt there is a need for us to
	 * do the same thing over again.  If we fail here,
	 * something terrible is wrong.  However, I doubt we
	 * can recover anyways.  The message might be nice
	 * for the (l)user though.
	 */
1:	xor	%bx, %bx
	# cmpw	$DOSMBR_SIGNATURE, (%bx)
	.byte	0x81, 0xbf
	.word	signature
	.word	DOSMBR_SIGNATURE
	je	sigok
	puts(esig)

	/* find the first active partition
	 * Note: this should be the only active
	 * partition.  We currently don't check
	 * for that, but we really should.  If
	 * and when I feel up to it, I'll add
	 * that code.
	 */
sigok:
	data32
	movl	$pt, %esi
	data32
	movl	$NDOSPART, %ecx
1:
	DBGMSG(CHAR_L)
	# movb	(%si), %al
	.byte	0x8a, 0x44, 0x00
	cmpb	$DOSACTIVE, %al
	je	found
	data32
	addl	$PARTSZ, %esi
	loop	1b

	/* No bootable partition */
no_part:
	puts(noboot)
err_stop:
	cli
	hlt
	/* Just to make sure */
	jmp	err_stop

	/* Found bootable partition */
found:
	DBGMSG(CHAR_B)
	pushl	%eax
	/* Save drive and partition */
	movl	%edx, %eax
	andl	$0x0F, %eax
	orl	$0x30, %eax
	#movb	%al, adrive
	.byte	0xA2
	.word	adrive

	movl	%ecx, %eax
	decl	%eax
	xorl	$0x03, %eax
	andl	$0x0F, %eax
	orl	$0x30, %eax
	#movb	%al, aprtn
	.byte	0xA2
	.word	aprtn

	popl	%eax

	/* Load values from active partition table entry */
	# movb	1(%si), %dh	# head
	.byte   0x8a, 0x74, 0x01
	# movw	2(%si), %cx	# sect, cyl
	.byte   0x8b, 0x4c, 0x02
	# movb	4(%si), %al	# partition type
	.byte   0x8a, 0x44, 0x04

/*
# BIOS call "INT 0x13 Function 0x2" to read sectors from disk into memory
#       Call with       %ah = 0x2
#                       %al = number of sectors
#                       %ch = cylinder
#                       %cl = sector
#                       %dh = head
#                       %dl = drive (0x80 for hard disk, 0x0 for floppy disk)
#                       %es:%bx = segment:offset of buffer
#       Return:
#                       %al = 0x0 on success; err code on failure
*/
	data32
	movl	$0x200 | 1, %eax	/* number of blocks */
	xor	%bx, %bx		/* put it at %es:0 */
	int	$0x13
	jnc	1f
	puts(eread)
	jmp	err_stop

1:
	DBGMSG(CHAR_G)
	puts(info)

	# jump to the new code (%ds:%si is at the right point)
	data32
	ljmp	$0, $BOOTBIOS << 4
	/* not reached */

/*
 * Display string
 */
Lmessage:
	pushl	%eax
	cld
1:
	lodsb			# load a byte into %al
	testb	%al, %al
	jz	1f
	/* call	Lchr */
	.byte	0xe8
	.word	Lchr - . - 2
	jmp	1b

#
#	Lchr: write the error message in %ds:%si to console
#
Lchr:
	pushl	%eax

#ifndef SERIAL
	pushl	%ebx
	movb	$0x0e, %ah
	xor	%bx, %bx
	inc	%bx		/* movw $0x01, %bx */
	int	$0x10
	popl	%ebx
#else
	pushl	%edx
	movb	$0x01, %ah
	data32
	movl	SERIAL, %dx
	int	$0x14
	popl	%edx
d215 6
a220 41
1:	popl	%eax
	ret

/* Info messages */
info:	.ascii		"Using Drive: "
adrive:	.byte		'X'
	.ascii		" Partition: "
aprtn:	.byte		'Y'
	.asciz		"\r\n"

/* Error messages */
fdmbr:	.asciz		"MBR on floppy or old BIOS\r\n"
eread:	.asciz		"Read error\r\n"
noboot: .asciz		"No active partition\r\n"
esig:	.asciz		"Invalid Signature\r\n"

endofcode:
	nop

/* (MBR) NT registry offset */
	. = 0x1b8
	.space  4, 0

/* partition table */
/* flag, head, sec, cyl, type, ehead, esect, ecyl, start, len */
	. = DOSPARTOFF	# starting address of partition table
pt:
	.byte	0x0,0,0,0,0,0,0,0
	.long	0,0
	.byte	0x0,0,0,0,0,0,0,0
	.long	0,0
	.byte	0x0,0,0,0,0,0,0,0
	.long	0,0
	.byte	DOSACTIVE,0,1,0,DOSPTYP_OPENBSD,255,255,255
	.long	0,0x7FFFFFFF
/* the last 2 bytes in the sector 0 contain the signature */
	. = 0x1fe
signature:
	.short	DOSMBR_SIGNATURE
	. = 0x200

@


1.2
log
@Merge MirBSD-old entirely
Remove krb, yp, afs, GPL'd stuff in kernel
Adjust some other stuff

Not to be compiled yet...
@
text
@@


1.1
log
@Initial revision
@
text
@d86 1
a86 1
	movl	%cs, %ax
d88 1
a88 1
	movl	%ax, %ss
d94 1
a94 1
	movl	%ax, %ds
d100 1
a100 1
	movl	%ax, %es
d136 1
a136 1
	xorl	%ax, %ax
d188 1
a188 1
1:	xorl	%bx, %bx
d230 1
a230 1
	pushl	%ax
d232 3
a234 3
	movl	%dx, %ax
	andl	$0x0F, %ax
	orl	$0x30, %ax
d239 5
a243 5
	movl	%cx, %ax
	decl	%ax
	xor	$0x03, %ax
	andl	$0x0F, %ax
	orl	$0x30, %ax
d248 1
a248 1
	popl	%ax
d272 1
a272 1
	xorl	%bx, %bx		/* put it at %es:0 */
d311 2
a312 2
	xorl	%bx, %bx
	incl	%bx		/* movw $0x01, %bx */
@


1.1.1.1
log
@Import OpenBSD 3.3 source repository from CTM 3132 the first time
This opens an OpenBSD-mirabile (aka MirBSD) repository.

### MirBSD is:
# Copyright (c) 1982-2003 by Thorsten "mirabile" Glaser <x86@@ePost.de>
# Copyright © 1968-2003  The authors of And contributors to UNIX®, the
#       C Language, BSD/Berkeley Unix; 386BSD, NetBSD 1.1 and OpenBSD.
#
# Anyone who obtained a copy of this work is hereby permitted to freely use,
# distribute, modify, merge, sublicence, give away or sell it as long as the
# authors are given due credit and the following notice is retained:
#
# This work is provided "as is", with no explicit or implicit warranty what-
# soever. Use it only at your own risk. In no event may an author or contri-
# butor be held liable for any damage, directly or indirectly, that origina-
# ted through or is caused by creation or modification of this work.

MirBSD is my private tree. MirBSD does not differ very much from OpenBSD
and intentionally tracks OpenBSD. That's why it _is_ OpenBSD, just not the
official one. It's like with DarrenBSD.

At time of this writing, no advertising for MirBSD must be done,
because the advertising clause has not yet been sorted out.

http://templeofhate.com/tglaser/MirBSD/index.php
@
text
@@


1.1.1.2
log
@Import some parts of OpenBSD-current (after their ELF switch) to ease future merging and reduce diffs against their codebase
@
text
@d1 1
a1 1
/*	$OpenBSD: mbr.S,v 1.17 2003/04/17 03:43:19 drahn Exp $	*/
d86 1
a86 1
	movl	%cs, %eax
d88 1
a88 1
	mov	%ax, %ss
d94 1
a94 1
	mov	%ax, %ds
d100 1
a100 1
	movl	%eax, %es
d136 1
a136 1
	xorl	%eax, %eax
d188 1
a188 1
1:	xor	%bx, %bx
d230 1
a230 1
	pushl	%eax
d232 3
a234 3
	movl	%edx, %eax
	andl	$0x0F, %eax
	orl	$0x30, %eax
d239 5
a243 5
	movl	%ecx, %eax
	decl	%eax
	xorl	$0x03, %eax
	andl	$0x0F, %eax
	orl	$0x30, %eax
d248 1
a248 1
	popl	%eax
d272 1
a272 1
	xor	%bx, %bx		/* put it at %es:0 */
d311 2
a312 2
	xor	%bx, %bx
	inc	%bx		/* movw $0x01, %bx */
@


1.1.1.3
log
@Import latest OpenBSD CVS tree by CTM in order
to sync the base system and ports tree with Them.

This includes the recent licence changes as well - by
importing the changed base and re-applying the diffs
(with cvs up -j -j) they are inherited, and we're not
bound to the removed clauses any longer.
@
text
@d1 1
a1 1
/*	$OpenBSD: mbr.S,v 1.18 2003/06/03 20:22:12 mickey Exp $	*/
d15 5
@


1.1.1.4
log
@Import OpenBSD as of today again (seems pretty stable, I hope)

Prominent changes: more bgpd, tcpmd5; tcpdump/isakmpd fixes
@
text
@d1 1
a1 1
/*	$OpenBSD: mbr.S,v 1.19 2004/01/05 00:08:23 tom Exp $	*/
a4 1
 * Copyright (c) 2003 Tom Cosgrove <tom.cosgrove@@arches-consulting.com>
d43 5
a47 21
/*
 * Memory layout:
 *
 * 0x07C00 -> 0x07DFF	BIOS loads us here	(at  31k)
 * 0x07E00 -> 0x17BFC	our stack		(to  95k)
 *
 * 0x07A00 -> 0x07BFF	we relocate to here	(at  30k5)
 *
 * 0x07C00 -> 0x07DFF	we load PBR here	(at  31k)
 *
 * The BIOS loads us at physical address 0x07C00.  We use a long jmp to
 * normalise our address to seg:offset 07C0:0000.  We then relocate to
 * 0x07A00, seg:offset 07A0:0000.
 *
 * We use a long jmp to normalise our address to seg:offset 07A0:0000
 * We set the stack to start at 07C0:FFFC (grows down on i386)
 * We load the partition boot record (PBR) /boot at seg:offset 4000:0000
 */
#define BOOTSEG		0x7c0	/* segment where we are loaded */
#define BOOTRELOCSEG	0x7a0	/* segment where we relocate to */
#define BOOTSTACKOFF	0xfffc	/* stack starts here, grows down */
a49 7
#define CHAR_LBA_READ	'.'
#define CHAR_CHS_READ	';'
#define CHAR_CHS_FORCE	'!'
#define CHAR_SHIFT_SEEN	0x07	/* Use BEL */

#define MBR_FLAGS_FORCE_CHS	0x0001

d57 5
a61 1
#define DBGMSG(c)	movb	$c, %al;	call	Lchr
d63 1
a63 1
#define DBGMSG(c)
d65 6
a70 7

/* Clobbers %al - maybe more */
#define	putc(c)		movb	$c, %al;	call	Lchr

/* Clobbers %esi - maybe more */
#define	puts(s)		movw	$s, %si;	call	Lmessage

a72 1
	.code16
d77 2
a78 1
	ljmp 	$BOOTSEG, $1f
d81 6
a86 23
	movw	%cs, %ax

	/*
	 * We don't need to disable and re-enable interrupts around the
	 * the load of ss and sp.
	 *
	 * From 80386 Programmer's Reference Manual:
	 * "A MOV into SS inhibits all interrupts until after the execution
	 * of the next instruction (which is presumably a MOV into eSP)"
	 *
	 * According to Hamarsoft's 86BUGS list (which is distributed with
	 * Ralph Brown's Interrupt List), some early 8086/88 processors
	 * failed to disable interrupts following a load into a segment
	 * register, but this was fixed with later steppings.
	 *
	 * Accordingly, this code will fail on very early 8086/88s, but
	 * nick@@ will just have to live with it.  Others will note that
	 * we require an 80386 (or compatible) or above processor, anyway.
	 */
	/* cli */
	movw	%ax, %ss
	movw	$BOOTSTACKOFF, %sp
	/* sti */			/* XXX not necessary; see above */
d89 1
a89 1
	movw	%ax, %ds
d92 10
a101 26
	/*
	 * On the PC architecture, the boot record (originally on a floppy
	 * disk) is loaded at 0000:7C00 (hex) and execution starts at the
	 * beginning.
	 *
	 * When hard disk support was added, a scheme to partition disks into
	 * four separate partitions was used, to allow multiple operating
	 * systems to be installed on the one disk.  The boot sectors of the
	 * operating systems on each partition would of course expect to be
	 * loaded at 0000:7C00.
	 *
	 * The first sector of the hard disk is the master boot record (MBR).
	 * It is this which defines the partitions and says which one is
	 * bootable.  Of course, the BIOS loads the MBR at 0000:7C00, the
	 * same location where the MBR needs to load the partition boot
	 * record (PBR, called biosboot in OpenBSD).
	 *
	 * Therefore, the MBR needs to relocate itself before loading the PBR.
	 *
	 * Make it so.
	 */
	movw	$BOOTRELOCSEG, %ax
	movw	%ax, %es
	xorw	%si, %si
	xorw	%di, %di
	movw	$0x200, %cx		/* Bytes in MBR, relocate it all */
d107 2
a108 1
	ljmp $BOOTRELOCSEG, $reloc
d113 4
a116 4
	pushw	%ds
	popw	%es	/* next boot is at the same place as we were loaded */
	pushw	%cs
	popw	%ds	/* and %ds is at the %cs */
d120 10
d131 1
a131 1
	xorw	%ax, %ax
d133 2
a134 1
	movw	$SERIAL, %dx
d138 13
a150 22
	/*
	 * If the SHIFT key is held down on entry, force CHS read
	 */

	/*
	 * BIOS call "INT 0x16 Get Keyboard Shift Flags
	 *	Call with	%ah = 0x02
	 *	Return:
	 *			%al = shift flags
	 *			%ah - undefined by many BIOSes
	 */
	movb	$0x02, %ah
	int	$0x16
	testb	$0x3, %al	/* Either shift key down? */
	jz	no_shift

	putc(CHAR_SHIFT_SEEN)	/* Signal that shift key was seen */

	orb	$MBR_FLAGS_FORCE_CHS, flags

no_shift:
	/* BIOS passes us drive number in %dl
d152 1
a152 5
	 * XXX - This is not always true.  We currently check if %dl
	 * points to a HD, and if not we complain, and set it to point
	 * to the first HDD.  Note, this is not 100% correct, since
	 * there is a possibility that you boot of of HD #2, and still
	 * get (%dl & 0x80) == 0x00, these type of systems will lose.
d155 1
a155 1
	jnz	drive_ok
d158 15
a172 9
	 * Note: MBR (this code) should never be on a floppy.  It does
	 * not belong there, so %dl should never be 0x00.
	 *
	 * Here we simply complain (should we?), and then hardcode the
	 * boot drive to 0x80.
	 */
	puts(efdmbr)

	/* If we are passed bogus data, set it to HD #1
d176 28
a203 9
drive_ok:
	/* Find the first active partition.
	 * Note: this should be the only active partition.  We currently
	 * don't check for that.
	 */
	movw	$pt, %si

	movw	$NDOSPART, %cx
find_active:
d205 2
a206 2
	movb	(%si), %al

d209 3
a211 3

	addw	$PARTSZ, %si
	loop	find_active
d215 1
a215 2
	movw	$enoboot, %si

a216 3
	call	Lmessage

stay_stopped:
d220 1
a220 1
	jmp	stay_stopped
d222 1
a223 4
	/*
	 * Found bootable partition
	 */

d225 17
d243 1
a243 5
	/* Store the drive number (from %dl) in decimal */
	movb	%dl, %al
	andb	$0x0F, %al
	addb	$'0', %al
	movb	%al, drive_num
d245 7
a251 13
	/*
	 * Store the partition number, in decimal.
	 *
	 * We started with cx = 4; if found we want part '0'
	 *                 cx = 3;                  part '1'
	 *                 cx = 2;                  part '2'
	 *                 cx = 1;                  part '3'
	 *
	 * We'll come into this with no other values for cl.
	 */
	movb	$'0'+4, %al
	subb	%cl, %al
	movb	%al, part_num
d253 15
a267 169
	/*
	 * Tell operator what partition we're trying to boot.
	 *
	 * Using drive X, partition Y
	 * - this used to be printed out after successfully loading the
	 *   partition boot record; we now print it out before
	 */
	pushw	%si
	movw	$info, %si
	testb	$MBR_FLAGS_FORCE_CHS, flags
	jnz	1f
	incw	%si
1:
	call	Lmessage
	popw	%si

	/*
	 * Partition table entry format:
	 *
	 * 0x00	BYTE boot indicator (0x80 = active, 0x00 = inactive)
	 * 0x01	BYTE start head
	 * 0x02	WORD start cylinder, sector
	 * 0x04	BYTE system type (0xA6 = OpenBSD)
	 * 0x05 BYTE end head
	 * 0x06	WORD end cylinder, sector
	 * 0x08	LONG start LBA sector
	 * 0x0C	LONG number of sectors in partition
	 *
	 * In the case of a partition that extends beyond the 8GB boundary,
	 * the LBA values will be correct, the CHS values will have their
	 * maximums (typically (C,H,S) = (1023,255,63)).
	 *
	 * %ds:%si points to the active partition table entry.
	 */

	/* We will load the partition boot sector (biosboot) where we
	 * were originally loaded.  We'll check to make sure something
	 * valid comes in.  So that we don't find ourselves, zero out
	 * the signature at the end.
	 */
	movw	$0, %es:signature(,1)

	/*
	 * Have we been instructed to ignore LBA?
	 */
	testb	$MBR_FLAGS_FORCE_CHS, flags
	jnz	do_chs

	/*
	 * We will use the LBA sector number if we have LBA support,
	 * so find out.
	 */

	/*
	 * BIOS call "INT 0x13 Extensions Installation Check"
	 *	Call with	%ah = 0x41
	 *			%bx = 0x55AA
	 *			%dl = drive (0x80 for 1st hd, 0x81 for 2nd, etc)
	 *	Return:
	 *			carry set: failure
	 *				%ah = error code (0x01, invalid func)
	 *			carry clear: success
	 *				%bx = 0xAA55 (must verify)
	 *				%ah = major version of extensions
	 *				%al   (internal use)
	 *				%cx = capabilities bitmap
	 *					0x0001 - extnd disk access funcs
	 *					0x0002 - rem. drive ctrl funcs
	 *					0x0004 - EDD functions with EBP
	 *				%dx   (extension version?)
	 */

	movb	%dl, (%si)		/* Store drive here temporarily */
					/* (This call trashes %dl) */
					/*
					 * XXX This is actually the correct
					 *     place to store this.  The 0x80
					 *     value used to indicate the
					 *     active partition is by intention
					 *     the same as the BIOS drive value
					 *     for the first hard disk (0x80).
					 *     At one point, 0x81 would go here
					 *     for the second hard disk; the
					 *     0x80 value is often used as a
					 *     bit flag for testing, rather
					 *     than an exact byte value.
					 */
	movw	$0x55AA, %bx
	movb	$0x41, %ah
	int	$0x13

	movb	(%si), %dl		/* Get back drive number */

	jc	do_chs			/* Did the command work? Jump if not */
	cmpw	$0xAA55, %bx		/* Check that bl, bh exchanged */
	jne	do_chs			/* If not, don't have EDD extensions */
	testb	$0x01, %cl		/* And do we have "read" available? */
	jz	do_chs			/* Again, use CHS if not */

do_lba:
	/*
	 * BIOS call "INT 0x13 Extensions Extended Read"
	 *	Call with	%ah = 0x42
	 *			%dl = drive (0x80 for 1st hd, 0x81 for 2nd, etc)
	 *			%ds:%si = segment:offset of command packet
	 *	Return:
	 *			carry set: failure
	 *				%ah = error code (0x01, invalid func)
	 *				command packet's sector count field set
	 *				to the number of sectors successfully
	 *				transferred
	 *			carry clear: success
	 *				%ah = 0 (success)
	 *	Command Packet:
	 *			0x0000	BYTE	packet size (0x10 or 0x18)
	 *			0x0001	BYTE	reserved (should be 0)
	 *			0x0002	WORD	sectors to transfer (max 127)
	 *			0x0004	DWORD	seg:offset of transfer buffer
	 *			0x0008	QWORD	starting sector number
	 */
	movb	$CHAR_LBA_READ, %al
	call	Lchr

	/* Load LBA sector number from active partition table entry */
	movl	8(%si), %ecx
	movl	%ecx, lba_sector

	pushw	%si			/* We'll need %si later */

	movb	$0x42, %ah
	movw	$lba_command, %si
	int	$0x13

	popw	%si			/* (get back %si) flags unchanged */

	jnc	booting_os		/* If it worked, run the pbr we got */

	/*
	 * LBA read failed, fall through to try CHS read
	 */

do_chs:
	/*
	 * BIOS call "INT 0x13 Function 0x2" to read sectors from disk into
	 * memory
	 *       Call with       %ah = 0x2
	 *                       %al = number of sectors
	 *                       %ch = cylinder & 0xFF
	 *                       %cl = sector (0-63) | rest of cylinder bits
	 *                       %dh = head
	 *                       %dl = drive (0x80 for hard disk)
	 *                       %es:%bx = segment:offset of buffer
	 *       Return:
	 *                       carry set: failure
	 *                           %ah = err code
	 *                           %al = number of sectors transferred
	 *                       carry clear: success
	 *                           %al = 0x0 OR number of sectors transferred
	 *                                 (depends on BIOS!)
	 *                                 (according to Ralph Brown Int List)
	 */
	movb	$CHAR_CHS_READ, %al
	call	Lchr

	/* Load values from active partition table entry */
	movb	1(%si), %dh		/* head */
	movw	2(%si), %cx		/* sect, cyl */
	movw	$0x201, %ax		/* function and number of blocks */
	xorw	%bx, %bx		/* put it at %es:0 */
d269 2
a270 4
	jnc	booting_os

read_error:
	movw	$eread, %si
d273 1
a273 2
booting_os:
	puts(crlf)
d275 1
d277 3
a279 10
	/*
	 * Make sure the pbr we loaded has a valid signature at the end.
	 * This also ensures that something did load where we were expecting
	 * it, as there's still a copy of our code there...
	 */
	cmpw	$DOSMBR_SIGNATURE, %es:signature(,1)
	jne	missing_os

	/* jump to the new code (%ds:%si is at the right point) */
	ljmp	$0, $BOOTSEG << 4
a281 4
missing_os:
	movw	$enoos, %si
	jmp	err_stop

d286 1
a286 1
	pushw	%ax
d289 1
a289 1
	lodsb			/* %al = *%si++ */
d292 3
a294 1
	call    Lchr
d297 3
a299 3
/*
 *	Lchr: write the error message in %ds:%si to console
 */
d301 1
a301 1
	pushw	%ax
d303 9
a311 2
#ifdef SERIAL
	pushw	%dx
d313 2
a314 1
	movw	SERIAL, %dx
d316 1
a316 7
	popw	%dx
#else
	pushw	%bx
	movb	$0x0e, %ah
	movw	$1, %bx
	int	$0x10
	popw	%bx
d318 1
a318 1
1:	popw	%ax
a320 10
/* command packet for LBA read of boot sector */
lba_command:
	.byte	0x10			/* size of command packet */
	.byte	0x00			/* reserved */
	.word	0x0001			/* sectors to transfer, just 1 */
	.word	0			/* target buffer, offset */
	.word	BOOTSEG			/* target buffer, segment */
lba_sector:
	.long	0, 0			/* sector number */

d322 5
a326 6
info:	.ascii		"!Using drive "
drive_num:
	.byte		'X'
	.ascii		", partition "
part_num:
	.asciz		"Y"
d329 4
a332 5
efdmbr:	.asciz		"MBR on floppy or old BIOS\r\n"
eread:	.asciz		"\r\nRead error\r\n"
enoos:	.asciz		"No O/S\r\n"
enoboot: .ascii		"No active partition"	/* runs into crlf... */
crlf:	.asciz		"\r\n"
d337 1
a337 9
/* We're going to store a flags word here */

	. = 0x1b4
flags:
	.word	0x0000
	.ascii	"Ox"			/* Indicate that the two bytes */
					/* before us are the flags word */

/* (MBR) NT disk signature offset */
d343 1
a343 1
	. = DOSPARTOFF	/* starting address of partition table */
d358 1
@


1.1.1.5
log
@large-scale import of OpenBSD 3.5-current source base including many fixes
note: from now, we will not be binary compatible with OpenBSD apps any
longer (due to syscall numbering differences); both an OpenBSD compat and
a conversion tool for old MirOS #7 apps will be delivered later.

The src/ tree is locked from now.
@
text
@d1 1
a1 1
/*	$OpenBSD: mbr.S,v 1.20 2004/02/10 00:35:15 tom Exp $	*/
d60 1
a60 1
 * The partition boot record (PBR) loads /boot at seg:offset 4000:0000
d251 2
a252 2
	sti				/* Ensure Ctl-Alt-Del will work */
	hlt				/* (don't require power cycle) */
@


