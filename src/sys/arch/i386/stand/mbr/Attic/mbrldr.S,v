head	1.6;
access;
symbols;
locks; strict;
comment	@# @;


1.6
date	2003.05.23.13.50.43;	author tg;	state dead;
branches;
next	1.5;

1.5
date	2003.05.19.16.34.47;	author tg;	state Exp;
branches;
next	1.4;

1.4
date	2003.05.19.16.29.11;	author tg;	state Exp;
branches;
next	1.3;

1.3
date	2003.05.03.17.12.45;	author tg;	state Stab;
branches;
next	1.2;

1.2
date	2003.05.03.11.53.31;	author tg;	state Stab;
branches;
next	1.1;

1.1
date	2003.05.03.11.25.52;	author tg;	state Exp;
branches;
next	;


desc
@@


1.6
log
@move bootblocks (pbr and mbr) into their directories
@
text
@/*	$MirBSD: mbrldr.S,v 1.5 2003/05/19 16:34:47 tg Exp $	*/
/*-
 * Copyright (c) 1982-2003 by Thorsten "mirabile" Glaser <x86@@ePost.de>
 *
 * Anyone who obtained a copy of this work is hereby permitted to freely use,
 * distribute, modify, merge, sublicence, give away or sell it as long as the
 * authors are given due credit and the following notice is retained:
 *
 * This work is provided "as is", with no explicit or implicit warranty what-
 * soever. Use it only at your own risk. In no event may an author or contri-
 * butor be held liable for any damage, directly or indirectly, that origina-
 * ted through or is caused by creation or modification of this work.
 */

	.file	"mbrldr.S"
	.intel_syntax noprefix

	.text
	.code16
	.globl	start
start:	xor	eax,eax
	push	eax		/* assume a sane stack of 4 bytes */
	popfd			/* clear eflags and interrupts */
	mov	ax,0x07A0
	mov	ss,ax		/* set up stack and other segments */
	mov	sp,0x1000
	mov	ds,ax
	mov	es,ax
	mov	si,0x0200	/* 7A0:0200 = 0:7C00 */
	xor	di,di		/* 7A0:0000 = 0:7A00 */
	mov	cx,0x0100
	rep	movsw		/* relocate ourselfes */
	jmp	0x07A0,offset Ldoit
	/* we are relocated now */
Ldoit:	/*
	 * a) Output "Hello" Text
	 * b) if BOOTMANAGER
	 *	Output "Choose" Text
	 *	Handle input (0,1,2,3,RET,ESC)
	 *    else
	 *	Fake input RET
	 *    endif
	 * c) load sector (RET=0x80-Partition, ESC=Floppy, 0-3=Partition)
	 * d) jump to sector
	 */
	mov	si,offset LtHelo
	call	Lotxt
#ifdef	BOOTMANAGER
	xor	ax,ax		/* read CMOS clock ticks since midnight */
	int	0x1A
	mov	edi,183		/* 10 seconds plus one tick */
	add	di,dx
	adc	cl,0		/* carry over */
	shl	ecx,16
	add	edi,ecx
Liloop:	mov	ah,1		/* check if key pressed */
	int	0x16
	jnz	Lkeyp		/* key was pressed */
	xor	ax,ax
	int	0x1A
	shl	ecx,16
	mov	cx,dx		/* current clock tick */
	or	al,al		/* past midnight? */
	jz	Lnwrap
	add	ecx,1573040	/* according to Ralf Brown Interrupt List */
Lnwrap:	cmp	ecx,edi		/* time is over? */
	jbe	Liloop		/* not yet */
	mov	al,13		/* assume user pressed RETURN (default) */
	jmp	Lchose
Lkeyp:	xor	ah,ah		/* get pressed key */
	int	0x16
	cmp	al,13		/* RETURN? */
	je	Lchose
	cmp	al,27		/* ESCAPE? */
	je	Lchose
	sub	al,0x30
	cmp	al,3		/* '0' .. '3' ? */
	ja	Lkeyp		/* if invalid key, stop 10-second timeout */
Lchose:	/* al=13,27,0,1,2,3 */
#else
	mov	al,13		/* fake a RETURN keypress */
#endif
	cmp	al,27
	je	Lflopp		/* ESC -> floppy */
	cmp	al,13
	jne	Lpart		/* 0..3 -> partition chosen */
	xor	al,al
	mov	bx,offset ptbl
Lcklp:	cmp	byte ptr [bx],0x80
	je	Lpart		/* loop over partition table, search */
	inc	ax		/*              for active partition */
	add	bl,0x10		/* sizeof ptbl-ent */
	cmp	al,4
	jb	Lcklp		/* if none found, fail */
Lbootf:	mov	si,offset LtFail
	call	Lotxt
	xor	ah,ah		/* wait for keypress */
	int	0x16
	jmp	0xF000,0xFFF0	/* reboot */
Lotxt:	lodsb
	or	al,al		/* '\0' is end of string */
	je	Ltxout
	mov	ah,0x0E		/* tty a character */
	mov	bx,7		/* light grey on black; page 0 */
	int	0x10
	jmp	Lotxt
Ltxout:	ret
Lpart:	mov	bx,offset ptbl
	shl	al,4		/* log_2 sizeof ptbl-ent */
	add	bl,al		/* can't overflow */
	push	bx
	/* Test for LBA support */
	mov	ah,0x41
	mov	bx,0x55AA
	mov	dl,0x80
	int	0x13
	jc	L_chs		/* carry -> error */
	cmp	bx,0xAA55
	jne	L_chs		/* magic -> command known? */
	and	cl,1
	je	L_chs		/* bitmask: supports LBA? */
L_lba:	pop	bx
	/* Load the boot structure (LBA) */
	mov	si,offset lbapbl
	mov	eax,[bx+8]	/* offset on disc */
	mov	[blknum],eax
	mov	ax,[bx+2]	/* save CHS values, in case */
	mov	[savecx],ax	/* the LBA boot fails twice */
	mov	dx,[bx]
	mov	dl,0x80
	mov	[savedx],dx
	mov	ah,0x42
	jmp	Lboot_loop
L_chs:	pop	bx
	/* Load the boot structure (CHS) */
	mov	cx,[bx+2]
	mov	dx,[bx]
	mov	dl,0x80
	jmp	Lboot_chs
Lflopp:	mov	cx,1
	xor	dx,dx
Lboot_chs:
	mov	bx,offset bsec
	mov	ax,0x0201
	jmp	Lboot_loop
LtHelo:	.ascii	"MirBSD mbr 1.02\r\n"
#ifdef	BOOTMANAGER
LtBmgr:	.ascii	"Press 0..3 to boot partition, ESC floppy,\r\n"
	.asciz	"RETURN/wait 10sec: default\r\n"
#else
	.byte	0		/* terminate the tHelo string */
#endif
LtFail:	.ascii	"Failed!"
	/* fall through */
LtCRLF:	.asciz	"\r\n"
Lboot_loop:
	xor	bp,bp
Lblp1:	pusha
	mov	ax,0x0E2E	/* print a dot */
	mov	bx,7
	int	0x10
	popa
	pusha
	int	0x13		/* try to read the PBR/bootsector */
	popa
	jc	Lblp2
	mov	si,offset LtCRLF
	call	Lotxt		/* print '\n' and jump into PBR */
	jmp	0,0x7C00	/* offset flat bsec */
Lblp2:	pusha
	xor	ax,ax		/* reset the drive */
	int	0x13
	popa
	inc	bp
	cmp	bp,2		/* second time it failed? */
	jne	Lblp3
	xor	di,di
	cmp	[savedx],di	/* if so, check if we were LBA */
	je	Lblp3
	mov	cx,[savecx]	/* if so, fall back to CHS */
	mov	dx,[savedx]
	mov	bx,offset bsec
	mov	ax,0x0201
Lblp3:	cmp	bp,16		/* 16 retries should be enough for everyone :) */
	jb	Lblp1
	jmp	Lbootf		/* failed */
lbapbl:	/* Parameter block for LBA */
	.word	0x0010		/* length, reserved */
	.word	0x0001		/* num. of sectors */
	.long	0x00007C00	/* transfer buffer */
blknum:	.long	0,0		/* LBA block number */
savecx:	.word	0
savedx:	.word	0

	/* Trailer: partition table, signature */
#if 0
	. = 0x01B8
	.long	0		/* some NT OS/2 stuff */
	.word	0		/* free/reserved space */
#else
	/* In fact, we have 6 bytes of 0x00 before,
	 * so we can safely skip till here:
	 */
	. = 0x01BE
#endif
ptbl:	.long	0,0,0,0
	.long	0,0,0,0
	.long	0,0,0,0
	.long	0x00010080,0xFFFFFFA6,0,0x7FFFFFFF
	.word	0xAA55		/* signature */
bsec:	/* 0x0200 is where the new boot sector is loaded */
@


1.5
log
@sync new MBR code
@
text
@d1 1
a1 1
/*	$MirBSD: mbrldr.S,v 1.4 2003/05/19 16:29:11 tg Exp $	*/
@


1.4
log
@implement a 10 second timeout for default in MBR (boot manager)
the timeout stops on any keypress, valid or not, as it's the
principle of least surprise
@
text
@d1 1
a1 1
/*	$MirBSD: mbrldr.S,v 1.3 2003/05/03 17:12:45 tg Stab $	*/
d149 1
a149 1
	.asciz	"RETURN / wait 10s: default\r\n"
@


1.3
log
@Fix small glitches (optical)
@
text
@d1 1
a1 1
/*	$MirBSD: mbrldr.S,v 1.2 2003/05/03 11:53:31 tg Stab $	*/
d22 2
a23 2
	push	eax
	popfd
d25 2
a26 2
	mov	ss,ax
	mov	esp,0x1000
d30 1
a30 1
	mov	di,0x0000	/* 7A0:0000 = 0:7A00 */
d32 2
a33 2
	rep	movsw
	jmp	0x07A0,offset doit
d35 1
a35 1
doit:	/*
d46 2
a47 2
	mov	si,offset tHelo
	call	_otxt
d49 8
a56 3
	mov	si,offset tBmgr
	call	_otxt
ilp1:	xor	ah,ah
d58 18
a75 4
	cmp	al,13
	je	ilok
	cmp	al,27
	je	ilok
d77 3
a79 3
	cmp	al,3
	ja	ilp1
ilok:	/* al=13,27,0,1,2,3 */
d81 1
a81 1
	mov	al,13
d84 1
a84 1
	je	floppy
d86 1
a86 1
	jne	partok
d89 3
a91 3
cklp:	cmp	byte ptr [bx],0x80
	je	partok
	inc	ax
d94 4
a97 4
	jb	cklp
bootfl:	mov	si,offset tFail
	call	_otxt
	xor	ah,ah
d99 6
a104 6
	jmp	0xF000,0xFFF0
_otxt:	lodsb
	or	al,al
	je	raus
	mov	ah,0x0E
	mov	bx,7
d106 3
a108 3
	jmp	_otxt
raus:	ret
partok:	mov	bx,offset ptbl
d117 1
a117 1
	jc	l_chs
d119 1
a119 1
	jne	l_chs
d121 2
a122 2
	je	l_chs
l_lba:	pop	bx
d125 1
a125 1
	mov	eax,[bx+8]
d127 2
a128 2
	mov	ax,[bx+2]
	mov	[savecx],ax
d133 2
a134 2
	jmp	boot_loop
l_chs:	pop	bx
d139 2
a140 2
	jmp	boot_chs
floppy:	mov	cx,1
d142 1
a142 1
boot_chs:
d145 2
a146 2
	jmp	boot_loop
tHelo:	.asciz	"MirBSD mbr 1.01\r\n"
d148 4
a151 4
tBmgr:	.ascii	"Choose partition to boot:\r\n"
	.ascii	"0,1,2,3 by number\r\n"
	.ascii	"RETURN: active; "
	.asciz	"ESC: floppy drive\r\n"
d153 1
a153 1
tFail:	.ascii	"Boot failed. Press a key to reboot."
d155 2
a156 2
tCRLF:	.asciz	"\r\n"
boot_loop:
d158 2
a159 2
blp1:	pusha
	mov	ax,0x0E2E
d164 1
a164 1
	int	0x13
d166 3
a168 3
	jc	blp2
	mov	si,offset tCRLF
	call	_otxt
d170 2
a171 2
blp2:	pusha
	xor	ax,ax
d175 2
a176 2
	cmp	bp,1		/* first time it failed? */
	jne	blp3
d179 1
a179 1
	je	blp3
d184 3
a186 3
blp3:	cmp	bp,16		/* 16 retries should be enough for everyone */
	jb	blp1
	jmp	bootfl		/* failed */
d196 1
d198 8
a205 2
	.long	0		/* some NT stuff */
	.word	0		/* space */
@


1.2
log
@fix:
 - floppy boot (indirectly)
 - retrying did not work
 - fallback to CHS did not work
All those were the same reason.

add:
 - print a dot every time it tries to boot

test:
 - boot LILO in PBR (CHS)
 - boot MS-DOS on FLOPPY
 - boot OpenBSD biosboot on PBR (CHS)
 - boot NTLDR on PBR (CHS)
 - boot simple test code (LBA)
@
text
@d1 1
a1 1
/*	$MirBSD: mbrldr.S,v 1.1 2003/05/03 11:25:52 tg Exp $	*/
d127 1
a127 1
tHelo:	.asciz	"MirBSD mbr v1.00\r\n"
d130 3
a132 3
	.ascii	"0,1,2,3: by number\r\n"
	.ascii	"RETURN: active\r\n"
	.asciz	"ESCAPE: floppy drive\r\n"
d134 3
a136 1
tFail:	.asciz	"Boot failed. Press a key to reboot.\r\n"
d148 2
@


1.1
log
@Write a new master boot record from scratch.
Features:
 - Capable of booting via CHS
 - Capable of booting via LBA
 - Can act as a boot manager
 - Boot manager can boot from floppy

Yet untested.
@
text
@d1 1
a1 1
/*	$MirBSD$	*/
d20 2
a21 2
	.globl	_start
_start:	xor	eax,eax
d130 3
a132 3
	.ascii	" 0,1,2,3: by number\r\n"
	.ascii	" RETURN: active\r\n"
	.asciz	" ESCAPE: floppy drive\r\n"
d138 5
d156 1
a156 1
	jne	blp3
d161 1
a161 1
blp3:	cmp	bp,4		/* 4 retries are enough */
@

