head	1.10;
access;
symbols
	MIRBSD_7quater:1.9
	MIRBSD_7_ALPHA:1.9.0.6
	MIRBSD_7:1.9.0.4
	MIRBSD_7ter:1.9
	MIRBSD_7_DEV:1.9.0.2
	MIRBSD_5:1.7;
locks; strict;
comment	@# @;


1.10
date	2003.10.30.12.49.39;	author tg;	state dead;
branches;
next	1.9;

1.9
date	2003.09.20.04.27.55;	author tg;	state Exp;
branches;
next	1.8;

1.8
date	2003.09.13.19.29.13;	author tg;	state Exp;
branches;
next	1.7;

1.7
date	2003.06.05.20.29.24;	author tg;	state Exp;
branches;
next	1.6;

1.6
date	2003.06.05.18.25.35;	author tg;	state Exp;
branches;
next	1.5;

1.5
date	2003.06.02.16.17.18;	author tg;	state Exp;
branches;
next	1.4;

1.4
date	2003.05.24.21.29.31;	author tg;	state Exp;
branches;
next	1.3;

1.3
date	2003.05.24.08.06.12;	author tg;	state Exp;
branches;
next	1.2;

1.2
date	2003.05.23.13.50.42;	author tg;	state Exp;
branches;
next	1.1;

1.1
date	2003.05.21.18.34.24;	author tg;	state Exp;
branches;
next	;


desc
@@


1.10
log
@move the files around a bit, for a cleaner infrastructure
(XXX why doesn't
 XXX	make show=PROG
 XXX or	make show=CPPFLAGS
 XXX work in these subdirs? it works in bin/cat e.g.)
@
text
@# $MirBSD: Makefile,v 1.9 2003/09/20 04:27:55 tg Exp $

SADIR=  ${.CURDIR}/../..
.include <../Makefile.inc>

PROG=	pbr_ffs
SRCS=	pbr.S

NOMAN=	yes
INSTALL_STRIP=
LDFLAGS= -nostdlib -Ttext 0 -N -x -Bstatic
CPPFLAGS+= -DLOADADDR=$(LOADADDR) -DLINKADDR=$(LINKADDR) \
	-DBOOTMAGIC=$(BOOTMAGIC) ${DEBUGFLAGS}

${PROG}: $(OBJS) $(DPADD)
	$(LD) $(LDFLAGS) -o $(PROG) $(OBJS) $(LDADD)
	@@size $(PROG)

disasm: ${PROG}
	objcopy -O binary ${PROG} ${.OBJDIR}/.tmp; \
	ndisasm -b 16 ${.OBJDIR}/.tmp >${.CURDIR}/disasm

CLEANFILES+= .tmp disasm

.include <bsd.prog.mk>
@


1.9
log
@now, if _that_ doesn't render a usable boot loader, it's FUBAR
@
text
@d1 1
a1 1
# $MirBSD: Makefile,v 1.8 2003/09/13 19:29:13 tg Exp $
@


1.8
log
@Makefile:
- add disasm to CLEANFILES

pbr.S:
- idea from Charles E. Hill <chill@@herber-hill.com>:
> if LBA/CHS load fail or a bad magic occurs, redo from start,
> but with loading the sectors one by one, and not multiple in
> one BIOS call. This should enable loading on a Soekris, with
> an additional diff needed for libsa.

- Tested on 486 CHS and (forced by debugger) CHS-single-sector mode.
- Not tested in LBA mode yet.

The code is way more slim than before now. This makes it even
a bit less readable, but that's a trade-off.
I've saved a couple of bytes again.
@
text
@d1 1
a1 1
# $MirBSD: Makefile,v 1.7 2003/06/05 20:29:24 tg Exp $
d4 1
a4 1
.include <../../Makefile.inc>
@


1.7
log
@give us some sane defaults
get rid of the temporary kludge
@
text
@d1 1
a1 1
# $MirBSD: Makefile,v 1.6 2003/06/05 18:25:35 tg Exp $
d22 2
a23 1
CLEANFILES+= .tmp
@


1.6
log
@implement the new boot sector code from scratch,
which can boot from LBA and CHS by converting between
LBA and CHS at run-time (idea from Toby Weingartner),
and adjust installboot accordingly.
Work done by me.
@
text
@d1 1
a1 1
# $MirBSD: Makefile,v 1.5 2003/06/02 16:17:18 tg Exp $
a7 2
#PROG=	biosboot
#SRCS=	biosboot.S
@


1.5
log
@work a bit more on the new boot loader code
done while bored, but now it's too hot :-(
@
text
@d1 1
a1 1
# $MirBSD: Makefile,v 1.4 2003/05/24 21:29:31 tg Exp $
d6 4
a9 4
#PROG=	pbr_ffs
#SRCS=	pbr.S
PROG=	biosboot
SRCS=	biosboot.S
d22 3
a24 1
	ndisasm -b 16 ${PROG} >${.CURDIR}/disasm
@


1.4
log
@kludge old biosboot.S to compile, until pbr.S will be written
@
text
@d1 4
a4 1
# $MirBSD: Makefile,v 1.3 2003/05/24 08:06:12 tg Exp $
a7 2

SADIR=  ${.CURDIR}/../..
a9 1
.include <../../Makefile.inc>
a11 1
#MAN=	biosboot.8
@


1.3
log
@back out previous installboot change until pbr_ffs
gets written.
Temporarily back add last mirbsd/openbsd biosboot,
so we can at least build the tree (hopefully).
@
text
@d1 1
a1 1
# $MirBSD: Makefile,v 1.2 2003/05/23 13:50:42 tg Exp $
d5 2
d9 1
@


1.2
log
@move bootblocks (pbr and mbr) into their directories
@
text
@d1 1
a1 1
# $MirBSD: Makefile,v 1.1 2003/05/21 18:34:24 tg Exp $
d3 4
a6 2
PROG=	pbr_ffs
SRCS=	pbr.S
@


1.1
log
@prepare to move our MBR and PBR boot blocks
into their own category subdirectory, along
with an installer for the FATfs ones (to be
written)

Item: ufs/ffs PBR (1st stage boot loader)
@
text
@d1 1
a1 1
# $MirBSD$
d4 1
a4 1
SRCS=	pbr_ffs.S
@

