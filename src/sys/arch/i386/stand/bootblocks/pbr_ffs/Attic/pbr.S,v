head	1.24;
access;
symbols
	MIRBSD_7quater:1.23
	MIRBSD_7_ALPHA:1.23.0.6
	MIRBSD_7:1.23.0.4
	MIRBSD_7ter:1.23
	MIRBSD_7_DEV:1.23.0.2
	MIRBSD_5:1.15;
locks; strict;
comment	@# @;


1.24
date	2003.10.30.12.49.39;	author tg;	state dead;
branches;
next	1.23;

1.23
date	2003.09.20.04.27.55;	author tg;	state Exp;
branches;
next	1.22;

1.22
date	2003.09.19.20.49.08;	author tg;	state Exp;
branches;
next	1.21;

1.21
date	2003.09.13.19.29.13;	author tg;	state Exp;
branches;
next	1.20;

1.20
date	2003.07.06.20.22.28;	author tg;	state Exp;
branches;
next	1.19;

1.19
date	2003.06.22.13.17.18;	author tg;	state Exp;
branches;
next	1.18;

1.18
date	2003.06.22.13.13.21;	author tg;	state Exp;
branches;
next	1.17;

1.17
date	2003.06.22.12.43.03;	author tg;	state Exp;
branches;
next	1.16;

1.16
date	2003.06.22.12.40.34;	author tg;	state Exp;
branches;
next	1.15;

1.15
date	2003.06.05.21.51.54;	author tg;	state Exp;
branches;
next	1.14;

1.14
date	2003.06.05.21.35.09;	author tg;	state Exp;
branches;
next	1.13;

1.13
date	2003.06.05.21.33.49;	author tg;	state Exp;
branches;
next	1.12;

1.12
date	2003.06.05.20.47.13;	author tg;	state Exp;
branches;
next	1.11;

1.11
date	2003.06.05.20.29.24;	author tg;	state Exp;
branches;
next	1.10;

1.10
date	2003.06.05.19.30.41;	author tg;	state Exp;
branches;
next	1.9;

1.9
date	2003.06.05.19.21.11;	author tg;	state Exp;
branches;
next	1.8;

1.8
date	2003.06.05.19.19.39;	author tg;	state Exp;
branches;
next	1.7;

1.7
date	2003.06.05.19.02.51;	author tg;	state Exp;
branches;
next	1.6;

1.6
date	2003.06.05.18.38.44;	author tg;	state Exp;
branches;
next	1.5;

1.5
date	2003.06.05.18.36.28;	author tg;	state Exp;
branches;
next	1.4;

1.4
date	2003.06.05.18.25.35;	author tg;	state Exp;
branches;
next	1.3;

1.3
date	2003.06.05.14.22.50;	author tg;	state Exp;
branches;
next	1.2;

1.2
date	2003.06.02.16.17.18;	author tg;	state Exp;
branches;
next	1.1;

1.1
date	2003.05.23.14.21.11;	author tg;	state Exp;
branches;
next	;


desc
@@


1.24
log
@move the files around a bit, for a cleaner infrastructure
(XXX why doesn't
 XXX	make show=PROG
 XXX or	make show=CPPFLAGS
 XXX work in these subdirs? it works in bin/cat e.g.)
@
text
@/* $MirBSD: pbr.S,v 1.23 2003/09/20 04:27:55 tg Exp $
 *-
 * Copyright (c) 2003 Thorsten Glaser <x86@@ePost.de>
 * Derived from ideas by and meant to be compatible with the
 *  original OpenBSD first stage boot loader code written by
 * Copyright (c) 1997 Michael Shalayeff, Tobias Weingartner
 *
 * Subject to these terms, everybody who obtained a copy of this work
 * is hereby permitted to deal in the work without restriction inclu-
 * ding without limitation the rights to use, distribute, sell, modi-
 * fy, publically perform, give away, merge or sublicense it provided
 * this notice is kept and the authors and contributors are given due
 * credit in derivates or accompanying documents.
 * This work is provided "as is" with no explicit or implicit warran-
 * ties whatsoever to the maximum extend permitted by applicable law;
 * in no event may an author or contributor be held liable for damage
 * that is, directly or indirectly, caused by the work, even if advi-
 * sed of the possibility of such damage.
 *-
 * Checks if LBA, if not available, uses CHS. If LBA load fails, fall
 * back to CHS. If everything fails or bad magic, redo from start but
 * using CHS-single-sector transfers. Ugly but size-optimized code.
 */

	.file	"pbr.S"
	.intel_syntax noprefix

	.text
	.code16
	.globl	_start
Lpbl:	/* Parameter block for LBA, gets constructed here:
	word	0x0010		(+0,2) length, reserved
	word	0x0001		(+2,2) num. of sectors
	long	0x00007C00	(+4,4) transfer buffer
	long	0,0		(+8,8) LBA block number
	 */
_start:	jmp	Linit
	nop
	. = _start + 3
Lmsg:	.ascii	"Loading "
	.word	512		/* bytes per sector */
	.byte	1		/* sectors per cluster */
	.word	1		/* reserved sectors */
	.byte	0		/* FATs per volume */
Lldp:	.word	LsLBA		/* root dir ents */
	.word	LsCHS		/* sectors per drive (FAT16s) */
	.byte	0xF8		/* media ID */
	.globl	blkcnt		/** block count in hint table */
	.type	blkcnt, @@function
	.globl	bpbspt		/** used to convert LBA -> CHS */
	.type	bpbspt, @@function
	.globl	bpbtpc		/** used to convert LBA -> CHS */
	.type	bpbtpc, @@function
#define	BLKCNT	(blkend - blktbl)	/** how much space do we have? */
blkcnt:	.word	BLKCNT		/* sectors per FAT */
bpbspt:	.word	18		/* sectors per track */
bpbtpc:	.word	2		/* tracks per cylinder */
	.long	16		/* hidden sectors */
Lbmgc:	.long	BOOTMAGIC	/* sectors per drive (FAT16B) */
Ldrv:	.byte	0x80, 0		/* BIOS drive */
	.byte	0x29		/* magic (EBPB) */
/* the following code is 0x0F bytes long:
	.long	0		// volume serial number
	.asciz	"UNIX LABEL"	// volume label
 */
Lotxt:	lodsb
	or	al,al
	je	Lotxt1
	mov	ah,0x0E
	mov	bx,7
	int	0x10
	jmp	Lotxt
Lotxt1:	ret
	. = 15 + Lotxt		/* ensure it fits exactly */
	.asciz	"UFS 4.4"	/* volume fstype */

	/* INITIALIZATION routine */
Linit:	xor	eax,eax
	push	ax
	popf
	mov	ss,ax
	mov	sp,0xFFFC
	sti
	add	ax,0x07C0	/* not MOV - eases debugging... */
	mov	ds,ax
	mov	gs,ax
	push	ax
	push	offset Lrun
	lret			/* should read retf */

	/* MAIN routine */
Lrun:	mov	[Ldrv],dl	/* boot device */
	/* say hello */
	mov	si,offset Lmsg
	call	Lotxt
	/* check for LBA */
	mov	di,offset Lldp
	mov	ah,0x41
	mov	bx,0x55AA
	int	0x13
	jc	Lr_chs		/* carry -> error */
	cmp	bx,0xAA55
	jne	Lr_chs		/* magic -> command known? */
	and	cl,1
	jne	Lr_lba		/* bitmask: supports LBA? */
Lr_chs:	inc	di
	inc	di

Lr_lba:	/* start the first stage boot loader code */
		/* don't use the << operator, it's broken! */
	mov	ax,(LOADADDR / 16)	/* libsa constant */
	mov	fs,ax		/* for ELFmagic check */
	push	ax		/* for load address and incrementing */
	mov	ax,0x0010
	mov	[Lpbl],eax	/* high 16 bits have already been cleared */
	/* initialize counters */
	mov	si,offset blktbl
	mov	cx,[blkcnt]

	/* --- main loop --- */
Lmlp1:	lodsb
	/*
	 * al contains bitmasked:
	 * aaabbbbb
	 * -> a=number of bytes-1 that follow	(-> dl)
	 * -> b=number of sectors-1 to load	(-> al)
	 * si, cx contain what is to be processed
	 */

	/* decode */
	mov	dl,al
	shr	dl,5
	and	ax,31		/* sectors */
	inc	ax
	inc	dx
	mov	[2+Lpbl],al
	pop	bx
	mov	es,bx		/* load segment */
	mov	[6+Lpbl],bx
	shl	ax,(9-4)	/* number of sectors, times their size,
				   divided by size of one paragraph */
	add	bx,ax		/* increment load addr. segment accordingly */
	push	bx		/* and save for next round */
	push	cx		/* save blkcnt */
	push	di		/* loader offset */
	mov	di,8+offset Lpbl
	xor	ebp,ebp
	mov	[di],ebp	/* zero out the LBA sector number */
	mov	[di+4],ebp
	mov	[di-4],bp	/* load offset within segment, always zero */
Lmlp2:	lodsb			/* copy over as many bytes as needed */
	mov	[di],al
	inc	di		/* stos? segment override forbidden */
	dec	dl
	jne	Lmlp2		/* faster/easier than loop */
	pop	di
	/*
	 * at this point, we have the following:
	 * si points to the _next_ entry to load
	 * on top of stack, there is the number of
	 *    entries to load, including the current one
	 * the _next_ load address is below that on the stack
	 * the LBA parameter block is filled in.
	 * ES is set up to the load segment (offset = const. 0000)
	 */

	/* call subroutine that does the actual loading */
	mov	dl,[Ldrv]
	call	[di]
	/* progress meter */
	mov	ax,0x0E2E
	mov	bx,7
	int	0x10			/* output a dot */
	/* --- main loop --- */
	pop	cx
	dec	cx
	jne	Lmlp1

	/* finally /boot is loaded. compare (E)LFmagic */
	mov	si,2
	fs lodsw
	cmp	ax,0x464C		/* last two bytes of "\x7FELF" */
	mov	si,offset Lerr		/* "bad magic" */
	jne	Lbarf			/* no it isn't, barf out */
	/* new line, for the fine look */
	mov	si,offset Lcrlf
	call	Lotxt
	/* set up and jump into /boot */
	mov	bp,[Ldrv]		/* byte after Ldrv is always zero */
	push	ebp			/* as well as the high half of ebp */
	push	dword ptr [Lbmgc]	/* boot magic */
	jmp	(LINKADDR / 16),0

	/* If something went wrong, but we didn't yet try the subrouting
	 * to cope with broken BIOSes and Soekris, redo from start.
	 */
Lbarf:	call	Lotxt			/* something went wrong */
	mov	ax,offset LsBRK		/* offset of broken-BIOS load sub */
	xchg	ax,[di]			/* if di is still Lldp, God help */
	cmp	ax,[di]			/* broken BIOS sub already tried? */
	jne	Lr_lba
	xor	ah,ah
	int	0x16
	jmp	0xF000,0xFFF0

	/* CHS boot routine */
LsCHS:	push	dx
	/* LBA -> CHS */
	mov	edx,[8+Lpbl]
	mov	ax,dx
	shr	edx,16
	div	word ptr [bpbspt]
	inc	dx			/* quotient AX, rem DX */
	push	dx			/* sector */
	xor	dx,dx
	div	word ptr [bpbtpc]
	pop	cx			/* cylinder AX, head DX */
	shl	ah,6
	xchg	ah,al
	or	cx,ax
	mov	dh,dl
	pop	ax
	mov	dl,al
	/* call the BIOS */
	mov	ah,2
	mov	al,[2+Lpbl]
	xor	bx,bx

	/* called from LBA routine, too */
LsINT:	mov	bp,7			/* number of retries */
LsIN0:	pusha
	int	0x13
	popa
	jnc	Lretn
	dec	bp
	pusha
	mov	si,offset Lldf
	jz	Lbarf
	xor	ax,ax
	int	0x13
	mov	ax,0x0E40		/* say it fails */
	add	ax,bp
	mov	bx,7
	int	0x10
	popa
Lnchk:	cmp	bp,3			/* after some failed LBA, try CHS */
LsBR9:	jne	LsIN0
	mov	di,2+offset Lldp
	jmp	LsIN0

LsLBA:	push	si			/* save blktbl offset */
	mov	ah,0x42			/* BIOS routine loadLBA */
	mov	si,offset Lpbl
	call	LsINT			/* call BIOS subroutine */
	pop	si
Lretn:	ret

Lerr:	.ascii	"bad magic"
Lldf:	.ascii	" ERR"
Lcrlf:	.asciz	"\r\n"

	/* some broken BIOSes don't allow multi-sector transfers... */
LsBRK:	mov	dh,1
	xchg	dh,[2+Lpbl]		/* number of sectors to load */
LsBR0:	push	dx
	call	LsCHS			/* chain to default CHS loader */
	pop	dx
	dec	dh
	je	Lretn			/* loop one by one over the sectors */
	mov	ax,es
	add	ax,32			/* size of a sector in paragraphs */
	mov	es,ax
	inc	dword ptr [8+Lpbl]
	jmp	LsBR0
	/* --- end of code --- */

	.globl	blktbl			/** hint table start */
	.type	blktbl, @@function
blktbl:
	. = 0x1FE
blkend:	.word	0xAA55
@


1.23
log
@now, if _that_ doesn't render a usable boot loader, it's FUBAR
@
text
@d1 1
a1 1
/* $MirBSD: licence.template,v 1.5 2003/07/26 12:33:13 tg Exp $
@


1.22
log
@wording, sync version numbers, ...
@
text
@d1 1
a1 1
/* $MirBSD: pbr.S,v 1.21 2003/09/13 19:29:13 tg Exp $
d4 2
a5 2
 * Derived from ideas and meant to be compatible to the
 *  original OpenBSD first stage boot loader code from:
d11 3
a13 3
 * fy, give away, merge or sublicense it provided this notice is kept
 * and the authors and contributors are given due credit in derivates
 * or accompanying documents.
a24 2
#define	BLKCNT	(blkend - blktbl)

d54 1
d84 1
a84 1
	add	ax,0x7C0	/* not MOV - eases debugging... */
d110 2
a111 2
	mov	ax,(LOADADDR / 16)	/* LOADADDR is a libsa constant */
				/* don't use << operators, it's broken! */
d115 1
a115 1
	mov	[Lpbl],eax	/* high 16 bits are already cleared */
@


1.21
log
@Makefile:
- add disasm to CLEANFILES

pbr.S:
- idea from Charles E. Hill <chill@@herber-hill.com>:
> if LBA/CHS load fail or a bad magic occurs, redo from start,
> but with loading the sectors one by one, and not multiple in
> one BIOS call. This should enable loading on a Soekris, with
> an additional diff needed for libsa.

- Tested on 486 CHS and (forced by debugger) CHS-single-sector mode.
- Not tested in LBA mode yet.

The code is way more slim than before now. This makes it even
a bit less readable, but that's a trade-off.
I've saved a couple of bytes again.
@
text
@d1 1
a1 1
/* $MirBSD: pbr.S,v 1.20 2003/07/06 20:22:28 tg Exp $
d111 2
a112 1
	mov	ax,(LOADADDR / 16)
@


1.20
log
@mop up
@
text
@d1 1
a1 1
/* $MirBSD: pbr.S,v 1.19 2003/06/22 13:17:18 tg Exp $
d19 4
d48 1
a48 1
	.word	0		/* sectors per drive (FAT16s) */
d78 1
d92 1
a92 4
Lerr:	.ascii	"bad magic."
Lldf:	.ascii	" FAILED!"
Lcrlf:	.asciz	"\r\n"

d98 1
d107 3
a109 1
Lr_chs:	call	Lpaddr
d119 1
d140 1
a140 2
	shl	ax,(9-4)	/* number of sectors
				   times their size
d145 1
d155 2
a156 1
	jne	Lmlp2		/* faster than loop */
d169 1
a169 1
	call	[Lldp]
d173 1
a173 1
	int	0x10		/* output a dot */
d179 1
a179 1
	/* finally /boot is loaded. compare ELFmagic */
d182 3
a184 3
	cmp	ax,0x464C	/* last two bytes of "\x7FELF" */
	mov	si,offset Lerr
	jne	Lbarf
d189 3
a191 3
	mov	bp,[Ldrv]	/* the byte after Ldrv is always zero */
	push	ebp		/* as well as the high half of ebp */
	push	dword ptr [Lbmgc] /* boot magic */
d193 13
d213 2
a214 2
	inc	dx		/* quotient AX, rem DX */
	push	dx		/* sector */
d217 1
a217 1
	pop	cx		/* cylinder AX, head DX */
d228 3
a230 1
LsINT:	mov	bp,7		/* retries */
d235 1
d237 2
d241 1
a241 1
	mov	ax,0x0E40	/* say it fails */
d246 7
a252 15
	mov	si,offset Lldf
	dec	bp
	jne	Lnchk
Lbarf:	call	Lotxt
	xor	ah,ah
	int	0x16
	jmp	0xF000,0xFFF0
Lnchk:	cmp	bp,3		/* after some failed LBA, try CHS */
	push	offset LsIN0
	jna	Lretn
Lpaddr:	push	offset LsCHS
	pop	[Lldp]		/* patch address of loader proc */
Lretn:	ret
LsLBA:	push	si		/* save blktbl offset */
	mov	ah,0x42		/* call BIOS */
d254 1
a254 1
	call	LsINT
d256 19
a274 1
	ret
d277 1
a277 1
	.globl	blktbl		/** hint table start */
@


1.19
log
@uhm, don't mix up segment and offset
correct is, the offset on the lower address of the memory cell
@
text
@d1 1
a1 1
/* $MirBSD: pbr.S,v 1.18 2003/06/22 13:13:21 tg Exp $
d8 6
a13 6
 * Everybody who obtained a copy of this work is hereby permitted, as
 * long as due credit is given to the authors and the notice below is
 * retained, to deal in the work without restriction, including with-
 * out limitation the rights to use, distribute, sell, give away, mo-
 * dify, merge or sublicense it.
 *
d15 4
a18 5
 * ty whatsoever. Use it only at your own risk. In no event an author
 * or contributor may be held liable for any damage that, directly or
 * indirectly, originated through or is caused by this work, creation
 * or any event connected with it, to the maximum extend permitted by
 * applicable law.
@


1.18
log
@even smaller, bugs fixed
@
text
@d1 1
a1 1
/* $MirBSD: pbr.S,v 1.17 2003/06/22 12:43:03 tg Exp $
d84 1
a85 1
	push	ax
@


1.17
log
@retf -> lret
GNU as sucks
@
text
@d1 1
a1 1
/* $MirBSD: pbr.S,v 1.16 2003/06/22 12:40:34 tg Exp $
d75 1
a75 1
Linit:	xor	ax,ax
d84 3
a86 1
	jmp	0x07C0,offset Lrun
d111 1
a111 3
	mov	[Lpbl],ax
	mov	[2+Lpbl],ax	/* the low 8 bit get overwritten,
				   this is smaller than mov [3+Lpbl],ah */
d128 1
a128 1
	and	al,31		/* sectors */
a134 1
	xor	ah,ah
d183 2
a184 3
	mov	ax,[Ldrv]
	cwde
	push	eax
d226 1
a226 4
	xor	ax,ax
	push	ax
	dec	ax
	push	ax
d228 2
a229 3
	lret			/* should read: retf */
Lnchk:	cmp	bp,4		/* after some failed LBA, try CHS */
	ja	LsIN0
d231 3
a233 2
Lpaddr:	mov	ax,offset LsCHS
	mov	[Lldp],ax	/* patch address of loader proc */
@


1.16
log
@make the boot code smaller
additionally, don't increase the load offset,
 but rather the load segment during loading the
 second stage boot loader.
rationale: imagine discs with large blocks, or
 a /boot with more than 64K

overall more stable. tested on a floppy.
@
text
@d1 1
a1 1
/* $MirBSD: licence.template,v 1.2 2003/06/19 11:38:18 tg Exp $
d233 1
a233 1
	retf
@


1.15
log
@help GNU as to find the right opcodes...
I hate this job
@
text
@d1 2
a2 2
/*	$MirBSD: pbr.S,v 1.14 2003/06/05 21:35:09 tg Exp $	*/
/*-
d4 3
d8 5
a12 4
 * Everybody who obtained a copy of this work is hereby permitted to,
 * without further restrictions as long as due credit is given to the
 * authors and the notice below is retained, use, distribute, modify,
 * sell, give away, merge or sublicense it.
a19 3
 *-
 * This code is partially derived from reading the original OpenBSD
 * boot loader code by Michael Shalayeff and Tobias Weingartner
d30 6
d39 1
a39 1
Lmsg:	.ascii	"Loading:"
d57 1
a57 1
	.long	0		/* sectors per drive (FAT16B) */
d60 13
a72 7
Lbmgc:	.long	BOOTMAGIC	/* volume serial number */
Lpbl:	/* Parameter block for LBA:
	word	0x0010		(+0,2) length, reserved
	word	0x0001		(+2,2) num. of sectors
	long	0x00007C00	(+4,4) transfer buffer
	long	0,0		(+8,8) LBA block number
*/	.asciz	"UNIX LABEL"	/* volume label */
d81 1
a81 1
	add	ax,0x7C0
a82 1
	mov	fs,ax
a85 9
Lotxt:	lodsb
	or	al,al
	je	Lotxt1
	mov	ah,0x0E
	mov	bx,7
	int	0x10
	jmp	Lotxt
Lotxt1:	ret

d90 2
a91 1
Lrun:	mov	[Ldrv],dl
d104 1
a104 1
Lr_lba:	/* start the boot code */
d106 2
a107 2
	mov	es,ax
	mov	[6+Lpbl],ax
d110 2
a111 2
	mov	[2+Lpbl],ax	/* the low 8 bit get overwritten */
	xor	bx,bx		/* segment and offset of /boot */
d120 3
a122 2
	 * -> a=number of bytes-1 that follow
	 * -> b=number of sectors-1 to load
d126 2
a127 3
	push	cx
	mov	cl,al
	shr	cl,5
d130 1
a130 1
	inc	cx
d132 10
a141 4
	mov	[4+Lpbl],bx	/* load offset */
	shl	ax,9		/* num. of sectors * their size */
	add	bx,ax		/* increment load address accordingly */
	push	bx
d144 1
a144 1
	mov	[di],ebp
d146 2
a147 1
Lmlp2:	lodsb
d150 1
a150 1
	dec	cl
d155 3
a157 3
	 * next load address is on top of stack
	 * the next word on the stack (number of entries to
	 *    load) must be decremented by one
d159 1
d162 1
a162 1
	/* call loading proc */
d165 1
d169 1
a169 1
	pop	bx
d174 1
a174 1
	/* /boot is loaded. compare magic */
d176 1
a176 1
	es lodsw
d180 1
d183 3
a185 1
	movzx	eax,dl		/* drive number */
d189 1
d191 1
d207 1
d210 1
a210 1
	mov	bx,[4+Lpbl]
d219 1
a219 1
	mov	ax,0x0E40
d228 4
a231 1
	xor	ah,ah
d233 2
a234 2
	jmp	0xF000,0xFFF0
Lnchk:	cmp	bp,5
d240 2
a241 2
LsLBA:	push	si
	mov	ah,0x42
@


1.14
log
@nicer comments
@
text
@d1 1
a1 1
/*	$MirBSD: pbr.S,v 1.13 2003/06/05 21:33:49 tg Exp $	*/
d171 1
a171 1
	push	[Lbmgc]		/* boot magic */
@


1.13
log
@various improvements found out "the hard way"
in single user mode
@
text
@d1 1
a1 1
/*	$MirBSD: pbr.S,v 1.12 2003/06/05 20:47:13 tg Exp $	*/
d54 6
a59 8
Lpbl:	/* Parameter block for LBA */
#if 0
	.word	0x0010		/* (+0,2) length, reserved */
	.word	0x0001		/* (+2,2) num. of sectors */
	.long	0x00007C00	/* (+4,4) transfer buffer */
	.long	0,0		/* (+8,8) LBA block number */
#endif
	.asciz	"UNIX LABEL"	/* volume label */
@


1.12
log
@hum well... it _boots_ my kernel.
but boot device 0xF0000000 is not correct...
@
text
@d1 1
a1 1
/*	$MirBSD: pbr.S,v 1.11 2003/06/05 20:29:24 tg Exp $	*/
d32 1
a32 1
	.ascii	"MirBSD#5"
d70 1
a70 1
	mov	ax,0x7C0
d85 2
a86 3
Lmsg:	.asciz	"reading..."
Lldf:	.asciz	"failed\r\n"
Lerr:	.ascii	"bad magic"
a94 3
#if 0
	mov	dl,0x80		/* XXX really? */
#endif
d164 3
a166 4
	xor	si,si
	es lodsd
	cmp	eax,0x464C457F
	je	Lboot
d168 2
a169 5
Lbarf:	call	Lotxt
	xor	ah,ah
	int	0x16
	jmp	0xF000,0xFFF0
Lboot:	mov	si,offset Lcrlf
a174 5
LsLBA:	push	si
	mov	ah,0x42
	call	LsINT
	pop	si
Lretn:	ret
a198 3
	dec	bp
	mov	si,offset Lldf
	je	Lbarf
d207 8
a214 1
	cmp	bp,5
d219 6
@


1.11
log
@give us some sane defaults
get rid of the temporary kludge
@
text
@d1 1
a1 1
/*	$MirBSD: pbr.S,v 1.10 2003/06/05 19:30:41 tg Exp $	*/
d90 4
a93 2
Lrun:	/* check for LBA */
	mov	[Ldrv],dl
d179 1
a179 1
	movzb	eax,dl		/* drive number */
@


1.10
log
@initialize LBA parametre block before use...
error in the uncompression routine (ENOCOFFEE)
@
text
@d1 1
a1 1
/*	$MirBSD: pbr.S,v 1.9 2003/06/05 19:21:11 tg Exp $	*/
d32 1
a32 1
	.ascii	">MirBSD<"
d47 2
a48 2
bpbspt:	.word	0		/* sectors per track */
bpbtpc:	.word	0		/* tracks per cylinder */
@


1.9
log
@nasm manual says:
   Segment override prefixes have no effect for this instruction: the
   use of `ES' for the store to `[DI]' or `[EDI]' cannot be overridden.
@
text
@d1 1
a1 1
/*	$MirBSD: pbr.S,v 1.8 2003/06/05 19:19:39 tg Exp $	*/
d137 3
@


1.8
log
@did not work.
reasons:
 - DS STOSB doesn't work, let's try FS STOSB
 - forgot to INC the values while decoding
@
text
@d1 1
a1 1
/*	$MirBSD: pbr.S,v 1.7 2003/06/05 19:02:51 tg Exp $	*/
d138 2
a139 1
	fs stosb
@


1.7
log
@fix relocations
@
text
@d1 1
a1 1
/*	$MirBSD: pbr.S,v 1.6 2003/06/05 18:38:44 tg Exp $	*/
d129 2
d138 1
a138 1
	ds stosb
@


1.6
log
@shrink: move the LBA parameter block up into the
DOS BPB and initialize the constants (offset
+0, +1 and +3) in code
@
text
@d1 1
a1 1
/*	$MirBSD: pbr.S,v 1.5 2003/06/05 18:36:28 tg Exp $	*/
d41 1
d43 1
d45 1
d223 2
a224 1
	.globl	blktbl
@


1.5
log
@fall back to CHS mode after two retries,
in case LBA doesn't work

printing is now:
reading...FEDCBA@@
          ^^LBA
            ^^^^CHS
                ^boot failed
@
text
@d1 1
a1 1
/*	$MirBSD: pbr.S,v 1.4 2003/06/05 18:25:35 tg Exp $	*/
d51 7
a81 6
Lpbl:	/* Parameter block for LBA */
	.word	0x0010		/* (+0,2) length, reserved */
	.word	0x0001		/* (+2,2) num. of sectors */
	.long	0x00007C00	/* (+4,4) transfer buffer */
	.long	0,0		/* (+8,8) LBA block number */

d105 3
@


1.4
log
@implement the new boot sector code from scratch,
which can boot from LBA and CHS by converting between
LBA and CHS at run-time (idea from Toby Weingartner),
and adjust installboot accordingly.
Work done by me.
@
text
@d1 1
a1 1
/*	$MirBSD: pbr.S,v 1.3 2003/06/05 14:22:50 tg Exp $	*/
d81 2
a82 2
Lmsg:	.asciz	"reading boot..."
Lldf:	.asciz	"failed!\r\n"
d99 1
a99 2
Lr_chs:	mov	ax,offset LsCHS
	mov	[Lldp],ax	/* patch address of loader proc */
d192 1
a192 1
LsINT:	mov	bp,8		/* retries */
d204 1
d208 6
a213 1
	jmp	LsIN0
@


1.3
log
@licence
@
text
@d1 1
a1 1
/*	$MirBSD: pbr.S,v 1.2 2003/06/02 16:17:18 tg Exp $	*/
d21 2
d37 1
a37 1
	.word	0		/* root dir ents */
d40 4
a43 1
	.word	0		/* sectors per FAT */
d48 1
a48 1
	.word	0x80		/* BIOS drive */
d50 1
a50 1
	.long	0x1982AFFE	/* volume serial number */
d64 1
a64 1
	jmp	0x07C0,Lrun
d75 6
d82 21
a102 3

Lrun:	/* start the boot code */
	mov	ax,LOADADDR >> 4
d104 111
a214 1
	xor	bx,bx	/* segment and offset of /boot */
@


1.2
log
@work a bit more on the new boot loader code
done while bored, but now it's too hot :-(
@
text
@d1 1
a1 1
/*	$MirBSD: pbr.S,v 1.1 2003/05/23 14:21:11 tg Exp $	*/
d3 1
a3 1
 * Copyright (c) 1982-2003 Thorsten Glaser <x86@@ePost.de>
d13 3
a15 1
 * indirectly, originated through or is caused by this work.
d18 1
a18 1
 * boot loader code by (c) 1997 Michael Shalayeff, Tobias Weingartner
@


1.1
log
@mbr_manager -> mbr
(name directories like the programmes they build)
@
text
@d1 1
a1 1
/*	$MirBSD$	*/
d3 1
a3 1
 * Copyright (c) 1982-2003 by Thorsten Glaser <x86@@ePost.de>
d5 4
a8 3
 * Anyone who obtained a copy of this work is hereby permitted to freely use,
 * distribute, modify, merge, sublicence, give away or sell it as long as the
 * authors is given due credit and the following notice is retained:
d10 7
a16 4
 * This work is provided "as is", with no explicit or implicit warranty what-
 * soever. Use it only at your own risk. In no event may an author or contri-
 * butor be held liable for any damage, directly or indirectly, that origina-
 * ted through or is caused by creation or modification of this work.
d28 46
@

